
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  08011e30  08011e30  00021e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012928  08012928  00030384  2**0
                  CONTENTS
  4 .ARM          00000008  08012928  08012928  00022928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012930  08012930  00030384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012930  08012930  00022930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012934  08012934  00022934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  08012938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fac  20000384  08012cbc  00030384  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002330  08012cbc  00032330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025e0a  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004e77  00000000  00000000  000561be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ac8  00000000  00000000  0005b038  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018a8  00000000  00000000  0005cb00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286d5  00000000  00000000  0005e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019be4  00000000  00000000  00086a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd491  00000000  00000000  000a0661  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017daf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000084a8  00000000  00000000  0017db70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000384 	.word	0x20000384
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011e14 	.word	0x08011e14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000388 	.word	0x20000388
 800020c:	08011e14 	.word	0x08011e14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b972 	b.w	8000f24 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	4688      	mov	r8, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14b      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4615      	mov	r5, r2
 8000c6a:	d967      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b14a      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c72:	f1c2 0720 	rsb	r7, r2, #32
 8000c76:	fa01 f302 	lsl.w	r3, r1, r2
 8000c7a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c7e:	4095      	lsls	r5, r2
 8000c80:	ea47 0803 	orr.w	r8, r7, r3
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c90:	fa1f fc85 	uxth.w	ip, r5
 8000c94:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c98:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c9c:	fb07 f10c 	mul.w	r1, r7, ip
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18eb      	adds	r3, r5, r3
 8000ca6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000caa:	f080 811b 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8118 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000cb4:	3f02      	subs	r7, #2
 8000cb6:	442b      	add	r3, r5
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cc0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ccc:	45a4      	cmp	ip, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	192c      	adds	r4, r5, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd6:	f080 8107 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cda:	45a4      	cmp	ip, r4
 8000cdc:	f240 8104 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	442c      	add	r4, r5
 8000ce4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce8:	eba4 040c 	sub.w	r4, r4, ip
 8000cec:	2700      	movs	r7, #0
 8000cee:	b11e      	cbz	r6, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf8:	4639      	mov	r1, r7
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0xbe>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80eb 	beq.w	8000ede <__udivmoddi4+0x286>
 8000d08:	2700      	movs	r7, #0
 8000d0a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d0e:	4638      	mov	r0, r7
 8000d10:	4639      	mov	r1, r7
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f783 	clz	r7, r3
 8000d1a:	2f00      	cmp	r7, #0
 8000d1c:	d147      	bne.n	8000dae <__udivmoddi4+0x156>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0xd0>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80fa 	bhi.w	8000f1c <__udivmoddi4+0x2c4>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	4698      	mov	r8, r3
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	d0e0      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000d36:	e9c6 4800 	strd	r4, r8, [r6]
 8000d3a:	e7dd      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000d3c:	b902      	cbnz	r2, 8000d40 <__udivmoddi4+0xe8>
 8000d3e:	deff      	udf	#255	; 0xff
 8000d40:	fab2 f282 	clz	r2, r2
 8000d44:	2a00      	cmp	r2, #0
 8000d46:	f040 808f 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d4a:	1b49      	subs	r1, r1, r5
 8000d4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d50:	fa1f f885 	uxth.w	r8, r5
 8000d54:	2701      	movs	r7, #1
 8000d56:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb08 f10c 	mul.w	r1, r8, ip
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	d907      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6c:	18eb      	adds	r3, r5, r3
 8000d6e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	f200 80cd 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d7a:	4684      	mov	ip, r0
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	b2a3      	uxth	r3, r4
 8000d80:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d84:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d88:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d8c:	fb08 f800 	mul.w	r8, r8, r0
 8000d90:	45a0      	cmp	r8, r4
 8000d92:	d907      	bls.n	8000da4 <__udivmoddi4+0x14c>
 8000d94:	192c      	adds	r4, r5, r4
 8000d96:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x14a>
 8000d9c:	45a0      	cmp	r8, r4
 8000d9e:	f200 80b6 	bhi.w	8000f0e <__udivmoddi4+0x2b6>
 8000da2:	4618      	mov	r0, r3
 8000da4:	eba4 0408 	sub.w	r4, r4, r8
 8000da8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dac:	e79f      	b.n	8000cee <__udivmoddi4+0x96>
 8000dae:	f1c7 0c20 	rsb	ip, r7, #32
 8000db2:	40bb      	lsls	r3, r7
 8000db4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000dbc:	fa01 f407 	lsl.w	r4, r1, r7
 8000dc0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dc4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dcc:	4325      	orrs	r5, r4
 8000dce:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dd2:	0c2c      	lsrs	r4, r5, #16
 8000dd4:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd8:	fa1f fa8e 	uxth.w	sl, lr
 8000ddc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000de0:	fb09 f40a 	mul.w	r4, r9, sl
 8000de4:	429c      	cmp	r4, r3
 8000de6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dea:	fa00 f107 	lsl.w	r1, r0, r7
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1e 0303 	adds.w	r3, lr, r3
 8000df4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df8:	f080 8087 	bcs.w	8000f0a <__udivmoddi4+0x2b2>
 8000dfc:	429c      	cmp	r4, r3
 8000dfe:	f240 8084 	bls.w	8000f0a <__udivmoddi4+0x2b2>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4473      	add	r3, lr
 8000e08:	1b1b      	subs	r3, r3, r4
 8000e0a:	b2ad      	uxth	r5, r5
 8000e0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e10:	fb08 3310 	mls	r3, r8, r0, r3
 8000e14:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e18:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e1c:	45a2      	cmp	sl, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1e 0404 	adds.w	r4, lr, r4
 8000e24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e28:	d26b      	bcs.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2a:	45a2      	cmp	sl, r4
 8000e2c:	d969      	bls.n	8000f02 <__udivmoddi4+0x2aa>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4474      	add	r4, lr
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3a:	eba4 040a 	sub.w	r4, r4, sl
 8000e3e:	454c      	cmp	r4, r9
 8000e40:	46c2      	mov	sl, r8
 8000e42:	464b      	mov	r3, r9
 8000e44:	d354      	bcc.n	8000ef0 <__udivmoddi4+0x298>
 8000e46:	d051      	beq.n	8000eec <__udivmoddi4+0x294>
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d069      	beq.n	8000f20 <__udivmoddi4+0x2c8>
 8000e4c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e50:	eb64 0403 	sbc.w	r4, r4, r3
 8000e54:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e58:	40fd      	lsrs	r5, r7
 8000e5a:	40fc      	lsrs	r4, r7
 8000e5c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e60:	e9c6 5400 	strd	r5, r4, [r6]
 8000e64:	2700      	movs	r7, #0
 8000e66:	e747      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000e68:	f1c2 0320 	rsb	r3, r2, #32
 8000e6c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e70:	4095      	lsls	r5, r2
 8000e72:	fa01 f002 	lsl.w	r0, r1, r2
 8000e76:	fa21 f303 	lsr.w	r3, r1, r3
 8000e7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e7e:	4338      	orrs	r0, r7
 8000e80:	0c01      	lsrs	r1, r0, #16
 8000e82:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e86:	fa1f f885 	uxth.w	r8, r5
 8000e8a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb07 f308 	mul.w	r3, r7, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	fa04 f402 	lsl.w	r4, r4, r2
 8000e9c:	d907      	bls.n	8000eae <__udivmoddi4+0x256>
 8000e9e:	1869      	adds	r1, r5, r1
 8000ea0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ea4:	d22f      	bcs.n	8000f06 <__udivmoddi4+0x2ae>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d92d      	bls.n	8000f06 <__udivmoddi4+0x2ae>
 8000eaa:	3f02      	subs	r7, #2
 8000eac:	4429      	add	r1, r5
 8000eae:	1acb      	subs	r3, r1, r3
 8000eb0:	b281      	uxth	r1, r0
 8000eb2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eb6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebe:	fb00 f308 	mul.w	r3, r0, r8
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	d907      	bls.n	8000ed6 <__udivmoddi4+0x27e>
 8000ec6:	1869      	adds	r1, r5, r1
 8000ec8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ecc:	d217      	bcs.n	8000efe <__udivmoddi4+0x2a6>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d915      	bls.n	8000efe <__udivmoddi4+0x2a6>
 8000ed2:	3802      	subs	r0, #2
 8000ed4:	4429      	add	r1, r5
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000edc:	e73b      	b.n	8000d56 <__udivmoddi4+0xfe>
 8000ede:	4637      	mov	r7, r6
 8000ee0:	4630      	mov	r0, r6
 8000ee2:	e709      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee4:	4607      	mov	r7, r0
 8000ee6:	e6e7      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6fb      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000eec:	4541      	cmp	r1, r8
 8000eee:	d2ab      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ef4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef8:	3801      	subs	r0, #1
 8000efa:	4613      	mov	r3, r2
 8000efc:	e7a4      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000efe:	4660      	mov	r0, ip
 8000f00:	e7e9      	b.n	8000ed6 <__udivmoddi4+0x27e>
 8000f02:	4618      	mov	r0, r3
 8000f04:	e795      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f06:	4667      	mov	r7, ip
 8000f08:	e7d1      	b.n	8000eae <__udivmoddi4+0x256>
 8000f0a:	4681      	mov	r9, r0
 8000f0c:	e77c      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f0e:	3802      	subs	r0, #2
 8000f10:	442c      	add	r4, r5
 8000f12:	e747      	b.n	8000da4 <__udivmoddi4+0x14c>
 8000f14:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f18:	442b      	add	r3, r5
 8000f1a:	e72f      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f1c:	4638      	mov	r0, r7
 8000f1e:	e708      	b.n	8000d32 <__udivmoddi4+0xda>
 8000f20:	4637      	mov	r7, r6
 8000f22:	e6e9      	b.n	8000cf8 <__udivmoddi4+0xa0>

08000f24 <__aeabi_idiv0>:
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop

08000f28 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	460b      	mov	r3, r1
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000f36:	7afb      	ldrb	r3, [r7, #11]
 8000f38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	753b      	strb	r3, [r7, #20]
 8000f40:	2300      	movs	r3, #0
 8000f42:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6858      	ldr	r0, [r3, #4]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	891b      	ldrh	r3, [r3, #8]
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f003 fd72 	bl	8004a38 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6818      	ldr	r0, [r3, #0]
 8000f58:	f107 0210 	add.w	r2, r7, #16
 8000f5c:	f107 0114 	add.w	r1, r7, #20
 8000f60:	f04f 33ff 	mov.w	r3, #4294967295
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2302      	movs	r3, #2
 8000f68:	f007 f914 	bl	8008194 <HAL_SPI_TransmitReceive>
 8000f6c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	bf0c      	ite	eq
 8000f72:	2301      	moveq	r3, #1
 8000f74:	2300      	movne	r3, #0
 8000f76:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000f78:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 8000f7a:	bf00      	nop
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f007 faa9 	bl	80084d8 <HAL_SPI_GetState>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d1f7      	bne.n	8000f7c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6858      	ldr	r0, [r3, #4]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	891b      	ldrh	r3, [r3, #8]
 8000f94:	2201      	movs	r2, #1
 8000f96:	4619      	mov	r1, r3
 8000f98:	f003 fd4e 	bl	8004a38 <HAL_GPIO_WritePin>

    if (status == 1) {
 8000f9c:	7dfb      	ldrb	r3, [r7, #23]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d102      	bne.n	8000fa8 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8000fa2:	7c7a      	ldrb	r2, [r7, #17]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]

}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b084      	sub	sp, #16
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
 8000fba:	460b      	mov	r3, r1
 8000fbc:	70fb      	strb	r3, [r7, #3]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8000fc2:	78fb      	ldrb	r3, [r7, #3]
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	78bb      	ldrb	r3, [r7, #2]
 8000fc8:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6858      	ldr	r0, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	891b      	ldrh	r3, [r3, #8]
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f003 fd2f 	bl	8004a38 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6818      	ldr	r0, [r3, #0]
 8000fde:	f107 010c 	add.w	r1, r7, #12
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	f006 ffa0 	bl	8007f2c <HAL_SPI_Transmit>
 8000fec:	4603      	mov	r3, r0
            == HAL_OK);
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	bf0c      	ite	eq
 8000ff2:	2301      	moveq	r3, #1
 8000ff4:	2300      	movne	r3, #0
 8000ff6:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8000ff8:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 8000ffa:	bf00      	nop
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f007 fa69 	bl	80084d8 <HAL_SPI_GetState>
 8001006:	4603      	mov	r3, r0
 8001008:	2b01      	cmp	r3, #1
 800100a:	d1f7      	bne.n	8000ffc <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6858      	ldr	r0, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	891b      	ldrh	r3, [r3, #8]
 8001014:	2201      	movs	r2, #1
 8001016:	4619      	mov	r1, r3
 8001018:	f003 fd0e 	bl	8004a38 <HAL_GPIO_WritePin>

    return status;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	68ba      	ldr	r2, [r7, #8]
 800103a:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	887a      	ldrh	r2, [r7, #2]
 8001046:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 8001048:	f107 031f 	add.w	r3, r7, #31
 800104c:	461a      	mov	r2, r3
 800104e:	210f      	movs	r1, #15
 8001050:	68f8      	ldr	r0, [r7, #12]
 8001052:	f7ff ff69 	bl	8000f28 <LSM_ReadRegister>

    if (data != 0x6C) {
 8001056:	7ffb      	ldrb	r3, [r7, #31]
 8001058:	2b6c      	cmp	r3, #108	; 0x6c
 800105a:	d001      	beq.n	8001060 <LSM_init+0x38>
        return 1;
 800105c:	2301      	movs	r3, #1
 800105e:	e064      	b.n	800112a <LSM_init+0x102>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001060:	2201      	movs	r2, #1
 8001062:	2112      	movs	r1, #18
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f7ff ffa4 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(40);
 800106a:	2028      	movs	r0, #40	; 0x28
 800106c:	f002 fe54 	bl	8003d18 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001070:	22a4      	movs	r2, #164	; 0xa4
 8001072:	2110      	movs	r1, #16
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff ff9c 	bl	8000fb2 <LSM_WriteRegister>

    HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f002 fe4c 	bl	8003d18 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001080:	22ac      	movs	r2, #172	; 0xac
 8001082:	2111      	movs	r1, #17
 8001084:	68f8      	ldr	r0, [r7, #12]
 8001086:	f7ff ff94 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f002 fe44 	bl	8003d18 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	a429      	add	r4, pc, #164	; (adr r4, 8001138 <LSM_init+0x110>)
 8001094:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001098:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 800109c:	68fa      	ldr	r2, [r7, #12]
 800109e:	a428      	add	r4, pc, #160	; (adr r4, 8001140 <LSM_init+0x118>)
 80010a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80010a4:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 80010a8:	220a      	movs	r2, #10
 80010aa:	2113      	movs	r1, #19
 80010ac:	68f8      	ldr	r0, [r7, #12]
 80010ae:	f7ff ff80 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(1);
 80010b2:	2001      	movs	r0, #1
 80010b4:	f002 fe30 	bl	8003d18 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 80010b8:	2200      	movs	r2, #0
 80010ba:	2115      	movs	r1, #21
 80010bc:	68f8      	ldr	r0, [r7, #12]
 80010be:	f7ff ff78 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f002 fe28 	bl	8003d18 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 80010c8:	2200      	movs	r2, #0
 80010ca:	2116      	movs	r1, #22
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f7ff ff70 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(1);
 80010d2:	2001      	movs	r0, #1
 80010d4:	f002 fe20 	bl	8003d18 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 80010d8:	2202      	movs	r2, #2
 80010da:	210d      	movs	r1, #13
 80010dc:	68f8      	ldr	r0, [r7, #12]
 80010de:	f7ff ff68 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(1);
 80010e2:	2001      	movs	r0, #1
 80010e4:	f002 fe18 	bl	8003d18 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 80010e8:	2280      	movs	r2, #128	; 0x80
 80010ea:	210b      	movs	r1, #11
 80010ec:	68f8      	ldr	r0, [r7, #12]
 80010ee:	f7ff ff60 	bl	8000fb2 <LSM_WriteRegister>
    HAL_Delay(1);
 80010f2:	2001      	movs	r0, #1
 80010f4:	f002 fe10 	bl	8003d18 <HAL_Delay>



    HAL_Delay(100);
 80010f8:	2064      	movs	r0, #100	; 0x64
 80010fa:	f002 fe0d 	bl	8003d18 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	f04f 0300 	mov.w	r3, #0
 8001104:	f04f 0400 	mov.w	r4, #0
 8001108:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
    imu->gyroDPSOffset[1] = 0;
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	f04f 0400 	mov.w	r4, #0
 8001116:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
    imu->gyroDPSOffset[2] = 0;
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	f04f 0400 	mov.w	r4, #0
 8001124:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

    return 0;
 8001128:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd90      	pop	{r4, r7, pc}
 8001132:	bf00      	nop
 8001134:	f3af 8000 	nop.w
 8001138:	1eb851ec 	.word	0x1eb851ec
 800113c:	3fb1eb85 	.word	0x3fb1eb85
 8001140:	0a5accd5 	.word	0x0a5accd5
 8001144:	3f4ffb48 	.word	0x3f4ffb48

08001148 <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b08c      	sub	sp, #48	; 0x30
 800114c:	af02      	add	r7, sp, #8
 800114e:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 8001150:	f107 0318 	add.w	r3, r7, #24
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	731a      	strb	r2, [r3, #12]
 800115e:	23a2      	movs	r3, #162	; 0xa2
 8001160:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6858      	ldr	r0, [r3, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	891b      	ldrh	r3, [r3, #8]
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	f003 fc63 	bl	8004a38 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	f107 0208 	add.w	r2, r7, #8
 800117a:	f107 0118 	add.w	r1, r7, #24
 800117e:	f04f 33ff 	mov.w	r3, #4294967295
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	230d      	movs	r3, #13
 8001186:	f007 f805 	bl	8008194 <HAL_SPI_TransmitReceive>
 800118a:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800118c:	2b00      	cmp	r3, #0
 800118e:	bf0c      	ite	eq
 8001190:	2301      	moveq	r3, #1
 8001192:	2300      	movne	r3, #0
 8001194:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 8001196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800119a:	bf00      	nop
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 f999 	bl	80084d8 <HAL_SPI_GetState>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1f7      	bne.n	800119c <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6858      	ldr	r0, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	891b      	ldrh	r3, [r3, #8]
 80011b4:	2201      	movs	r2, #1
 80011b6:	4619      	mov	r1, r3
 80011b8:	f003 fc3e 	bl	8004a38 <HAL_GPIO_WritePin>

    if (status == 1) {
 80011bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d13b      	bne.n	800123c <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 80011c4:	7abb      	ldrb	r3, [r7, #10]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7a7b      	ldrb	r3, [r7, #9]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	835a      	strh	r2, [r3, #26]
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 80011d6:	7b3b      	ldrb	r3, [r7, #12]
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	b21a      	sxth	r2, r3
 80011dc:	7afb      	ldrb	r3, [r7, #11]
 80011de:	b21b      	sxth	r3, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	839a      	strh	r2, [r3, #28]
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 80011e8:	7bbb      	ldrb	r3, [r7, #14]
 80011ea:	021b      	lsls	r3, r3, #8
 80011ec:	b21a      	sxth	r2, r3
 80011ee:	7b7b      	ldrb	r3, [r7, #13]
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	83da      	strh	r2, [r3, #30]

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 80011fa:	7c3b      	ldrb	r3, [r7, #16]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	b21a      	sxth	r2, r3
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 800120e:	7cbb      	ldrb	r3, [r7, #18]
 8001210:	021b      	lsls	r3, r3, #8
 8001212:	b21a      	sxth	r2, r3
 8001214:	7c7b      	ldrb	r3, [r7, #17]
 8001216:	b21b      	sxth	r3, r3
 8001218:	4313      	orrs	r3, r2
 800121a:	b21a      	sxth	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001222:	7d3b      	ldrb	r3, [r7, #20]
 8001224:	021b      	lsls	r3, r3, #8
 8001226:	b21a      	sxth	r2, r3
 8001228:	7cfb      	ldrb	r3, [r7, #19]
 800122a:	b21b      	sxth	r3, r3
 800122c:	4313      	orrs	r3, r2
 800122e:	b21a      	sxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

        // convert units
        LSM_Convert(imu);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f806 	bl	8001248 <LSM_Convert>

    }

    return status;
 800123c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001240:	4618      	mov	r0, r3
 8001242:	3728      	adds	r7, #40	; 0x28
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f9b3 3068 	ldrsh.w	r3, [r3, #104]	; 0x68
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f984 	bl	8000564 <__aeabi_i2d>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8001262:	461a      	mov	r2, r3
 8001264:	4623      	mov	r3, r4
 8001266:	f7ff f9e7 	bl	8000638 <__aeabi_dmul>
 800126a:	4603      	mov	r3, r0
 800126c:	460c      	mov	r4, r1
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f9b3 306a 	ldrsh.w	r3, [r3, #106]	; 0x6a
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f972 	bl	8000564 <__aeabi_i2d>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 8001286:	461a      	mov	r2, r3
 8001288:	4623      	mov	r3, r4
 800128a:	f7ff f9d5 	bl	8000638 <__aeabi_dmul>
 800128e:	4603      	mov	r3, r0
 8001290:	460c      	mov	r4, r1
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f9b3 306c 	ldrsh.w	r3, [r3, #108]	; 0x6c
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f960 	bl	8000564 <__aeabi_i2d>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	e9d3 342a 	ldrd	r3, r4, [r3, #168]	; 0xa8
 80012aa:	461a      	mov	r2, r3
 80012ac:	4623      	mov	r3, r4
 80012ae:	f7ff f9c3 	bl	8000638 <__aeabi_dmul>
 80012b2:	4603      	mov	r3, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 80012c2:	a364      	add	r3, pc, #400	; (adr r3, 8001454 <LSM_Convert+0x20c>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f9b6 	bl	8000638 <__aeabi_dmul>
 80012cc:	4603      	mov	r3, r0
 80012ce:	460c      	mov	r4, r1
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 80012dc:	a35d      	add	r3, pc, #372	; (adr r3, 8001454 <LSM_Convert+0x20c>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff f9a9 	bl	8000638 <__aeabi_dmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	460c      	mov	r4, r1
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	e9d3 0120 	ldrd	r0, r1, [r3, #128]	; 0x80
 80012f6:	a357      	add	r3, pc, #348	; (adr r3, 8001454 <LSM_Convert+0x20c>)
 80012f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fc:	f7ff f99c 	bl	8000638 <__aeabi_dmul>
 8001300:	4603      	mov	r3, r0
 8001302:	460c      	mov	r4, r1
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f927 	bl	8000564 <__aeabi_i2d>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 800131c:	461a      	mov	r2, r3
 800131e:	4623      	mov	r3, r4
 8001320:	f7ff f98a 	bl	8000638 <__aeabi_dmul>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	e9d3 3414 	ldrd	r3, r4, [r3, #80]	; 0x50
 8001332:	461a      	mov	r2, r3
 8001334:	4623      	mov	r3, r4
 8001336:	f7fe ffc7 	bl	80002c8 <__aeabi_dsub>
 800133a:	4603      	mov	r3, r0
 800133c:	460c      	mov	r4, r1
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	e9c2 3408 	strd	r3, r4, [r2, #32]
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f90a 	bl	8000564 <__aeabi_i2d>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8001356:	461a      	mov	r2, r3
 8001358:	4623      	mov	r3, r4
 800135a:	f7ff f96d 	bl	8000638 <__aeabi_dmul>
 800135e:	4603      	mov	r3, r0
 8001360:	460c      	mov	r4, r1
 8001362:	4618      	mov	r0, r3
 8001364:	4621      	mov	r1, r4
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 800136c:	461a      	mov	r2, r3
 800136e:	4623      	mov	r3, r4
 8001370:	f7fe ffaa 	bl	80002c8 <__aeabi_dsub>
 8001374:	4603      	mov	r3, r0
 8001376:	460c      	mov	r4, r1
 8001378:	687a      	ldr	r2, [r7, #4]
 800137a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8ed 	bl	8000564 <__aeabi_i2d>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e9d3 3428 	ldrd	r3, r4, [r3, #160]	; 0xa0
 8001390:	461a      	mov	r2, r3
 8001392:	4623      	mov	r3, r4
 8001394:	f7ff f950 	bl	8000638 <__aeabi_dmul>
 8001398:	4603      	mov	r3, r0
 800139a:	460c      	mov	r4, r1
 800139c:	4618      	mov	r0, r3
 800139e:	4621      	mov	r1, r4
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	f7fe ff8d 	bl	80002c8 <__aeabi_dsub>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80013be:	a322      	add	r3, pc, #136	; (adr r3, 8001448 <LSM_Convert+0x200>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f938 	bl	8000638 <__aeabi_dmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	460c      	mov	r4, r1
 80013cc:	4618      	mov	r0, r3
 80013ce:	4621      	mov	r1, r4
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <LSM_Convert+0x208>)
 80013d6:	f7ff fa59 	bl	800088c <__aeabi_ddiv>
 80013da:	4603      	mov	r3, r0
 80013dc:	460c      	mov	r4, r1
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80013ea:	a317      	add	r3, pc, #92	; (adr r3, 8001448 <LSM_Convert+0x200>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f922 	bl	8000638 <__aeabi_dmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4618      	mov	r0, r3
 80013fa:	4621      	mov	r1, r4
 80013fc:	f04f 0200 	mov.w	r2, #0
 8001400:	4b13      	ldr	r3, [pc, #76]	; (8001450 <LSM_Convert+0x208>)
 8001402:	f7ff fa43 	bl	800088c <__aeabi_ddiv>
 8001406:	4603      	mov	r3, r0
 8001408:	460c      	mov	r4, r1
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001416:	a30c      	add	r3, pc, #48	; (adr r3, 8001448 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
}
 800143c:	bf00      	nop
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	bd90      	pop	{r4, r7, pc}
 8001446:	bf00      	nop
 8001448:	54442eea 	.word	0x54442eea
 800144c:	400921fb 	.word	0x400921fb
 8001450:	40668000 	.word	0x40668000
 8001454:	3a92a305 	.word	0x3a92a305
 8001458:	40239d01 	.word	0x40239d01

0800145c <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b094      	sub	sp, #80	; 0x50
 8001460:	af04      	add	r7, sp, #16
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	4613      	mov	r3, r2
 8001468:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	62da      	str	r2, [r3, #44]	; 0x2c

    uint8_t txBuf[2] = {0x00, 0x00};
 8001490:	2300      	movs	r3, #0
 8001492:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001496:	2300      	movs	r3, #0
 8001498:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	791b      	ldrb	r3, [r3, #4]
 80014a4:	b299      	uxth	r1, r3
 80014a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	220d      	movs	r2, #13
 80014ba:	f003 fd09 	bl	8004ed0 <HAL_I2C_Mem_Read>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014d0:	4413      	add	r3, r2
 80014d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 80014d6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80014da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 80014de:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80014e2:	2b10      	cmp	r3, #16
 80014e4:	d001      	beq.n	80014ea <SPL06_Init+0x8e>

        return 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e139      	b.n	800175e <SPL06_Init+0x302>

    }
    HAL_Delay(10);
 80014ea:	200a      	movs	r0, #10
 80014ec:	f002 fc14 	bl	8003d18 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 80014f0:	2390      	movs	r3, #144	; 0x90
 80014f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6818      	ldr	r0, [r3, #0]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	791b      	ldrb	r3, [r3, #4]
 80014fe:	b299      	uxth	r1, r3
 8001500:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2313      	movs	r3, #19
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2301      	movs	r3, #1
 8001512:	2210      	movs	r2, #16
 8001514:	f003 fcdc 	bl	8004ed0 <HAL_I2C_Mem_Read>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf0c      	ite	eq
 800151e:	2301      	moveq	r3, #1
 8001520:	2300      	movne	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	b2da      	uxtb	r2, r3
 8001526:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800152a:	4413      	add	r3, r2
 800152c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 8001530:	7c3b      	ldrb	r3, [r7, #16]
 8001532:	011b      	lsls	r3, r3, #4
 8001534:	b21a      	sxth	r2, r3
 8001536:	7c7b      	ldrb	r3, [r7, #17]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	b2db      	uxtb	r3, r3
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21a      	sxth	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800154c:	b29b      	uxth	r3, r3
 800154e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001552:	2b00      	cmp	r3, #0
 8001554:	d008      	beq.n	8001568 <SPL06_Init+0x10c>
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800155c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8001560:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001564:	b21b      	sxth	r3, r3
 8001566:	e002      	b.n	800156e <SPL06_Init+0x112>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 8001572:	7c7b      	ldrb	r3, [r7, #17]
 8001574:	021b      	lsls	r3, r3, #8
 8001576:	b21b      	sxth	r3, r3
 8001578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800157c:	b21a      	sxth	r2, r3
 800157e:	7cbb      	ldrb	r3, [r7, #18]
 8001580:	b21b      	sxth	r3, r3
 8001582:	4313      	orrs	r3, r2
 8001584:	b21a      	sxth	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001590:	b29b      	uxth	r3, r3
 8001592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <SPL06_Init+0x150>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015a0:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80015a4:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	e002      	b.n	80015b2 <SPL06_Init+0x156>
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 80015b6:	7cfb      	ldrb	r3, [r7, #19]
 80015b8:	031a      	lsls	r2, r3, #12
 80015ba:	7d3b      	ldrb	r3, [r7, #20]
 80015bc:	011b      	lsls	r3, r3, #4
 80015be:	4313      	orrs	r3, r2
 80015c0:	7d7a      	ldrb	r2, [r7, #21]
 80015c2:	0912      	lsrs	r2, r2, #4
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	4313      	orrs	r3, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d006      	beq.n	80015e8 <SPL06_Init+0x18c>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80015e2:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80015e6:	e001      	b.n	80015ec <SPL06_Init+0x190>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	695b      	ldr	r3, [r3, #20]
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 80015f0:	7d7b      	ldrb	r3, [r7, #21]
 80015f2:	041b      	lsls	r3, r3, #16
 80015f4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80015f8:	7dbb      	ldrb	r3, [r7, #22]
 80015fa:	021b      	lsls	r3, r3, #8
 80015fc:	4313      	orrs	r3, r2
 80015fe:	7dfa      	ldrb	r2, [r7, #23]
 8001600:	4313      	orrs	r3, r2
 8001602:	461a      	mov	r2, r3
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <SPL06_Init+0x1c6>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800161c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001620:	e001      	b.n	8001626 <SPL06_Init+0x1ca>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 800162a:	7e3b      	ldrb	r3, [r7, #24]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	b21a      	sxth	r2, r3
 8001630:	7e7b      	ldrb	r3, [r7, #25]
 8001632:	b21b      	sxth	r3, r3
 8001634:	4313      	orrs	r3, r2
 8001636:	b21a      	sxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 800163c:	7ebb      	ldrb	r3, [r7, #26]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7efb      	ldrb	r3, [r7, #27]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	b21a      	sxth	r2, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 800164e:	7f3b      	ldrb	r3, [r7, #28]
 8001650:	021b      	lsls	r3, r3, #8
 8001652:	b21a      	sxth	r2, r3
 8001654:	7f7b      	ldrb	r3, [r7, #29]
 8001656:	b21b      	sxth	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b21a      	sxth	r2, r3
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 8001660:	7fbb      	ldrb	r3, [r7, #30]
 8001662:	021b      	lsls	r3, r3, #8
 8001664:	b21a      	sxth	r2, r3
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	b21a      	sxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 8001672:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b21a      	sxth	r2, r3
 800167a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001688:	2019      	movs	r0, #25
 800168a:	f002 fb45 	bl	8003d18 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0x33;
 800168e:	2333      	movs	r3, #51	; 0x33
 8001690:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	6818      	ldr	r0, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	791b      	ldrb	r3, [r3, #4]
 800169c:	b299      	uxth	r1, r3
 800169e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016a2:	9302      	str	r3, [sp, #8]
 80016a4:	2301      	movs	r3, #1
 80016a6:	9301      	str	r3, [sp, #4]
 80016a8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2301      	movs	r3, #1
 80016b0:	2206      	movs	r2, #6
 80016b2:	f003 fb13 	bl	8004cdc <HAL_I2C_Mem_Write>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016c8:	4413      	add	r3, r2
 80016ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 80016ce:	200a      	movs	r0, #10
 80016d0:	f002 fb22 	bl	8003d18 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 80016d4:	23b3      	movs	r3, #179	; 0xb3
 80016d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	6818      	ldr	r0, [r3, #0]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	791b      	ldrb	r3, [r3, #4]
 80016e2:	b299      	uxth	r1, r3
 80016e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016e8:	9302      	str	r3, [sp, #8]
 80016ea:	2301      	movs	r3, #1
 80016ec:	9301      	str	r3, [sp, #4]
 80016ee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2301      	movs	r3, #1
 80016f6:	2207      	movs	r2, #7
 80016f8:	f003 faf0 	bl	8004cdc <HAL_I2C_Mem_Write>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf0c      	ite	eq
 8001702:	2301      	moveq	r3, #1
 8001704:	2300      	movne	r3, #0
 8001706:	b2db      	uxtb	r3, r3
 8001708:	b2da      	uxtb	r2, r3
 800170a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800170e:	4413      	add	r3, r2
 8001710:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 8001714:	200a      	movs	r0, #10
 8001716:	f002 faff 	bl	8003d18 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 800171a:	23ff      	movs	r3, #255	; 0xff
 800171c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	791b      	ldrb	r3, [r3, #4]
 8001728:	b299      	uxth	r1, r3
 800172a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800172e:	9302      	str	r3, [sp, #8]
 8001730:	2301      	movs	r3, #1
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2301      	movs	r3, #1
 800173c:	2208      	movs	r2, #8
 800173e:	f003 facd 	bl	8004cdc <HAL_I2C_Mem_Write>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	b2da      	uxtb	r2, r3
 8001750:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001754:	4413      	add	r3, r2
 8001756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 800175a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 800175e:	4618      	mov	r0, r3
 8001760:	3740      	adds	r7, #64	; 0x40
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(double w, double v1, double v2, double v3, Quaternion* output)
{
 8001768:	b590      	push	{r4, r7, lr}
 800176a:	b08b      	sub	sp, #44	; 0x2c
 800176c:	af00      	add	r7, sp, #0
 800176e:	ed87 0b08 	vstr	d0, [r7, #32]
 8001772:	ed87 1b06 	vstr	d1, [r7, #24]
 8001776:	ed87 2b04 	vstr	d2, [r7, #16]
 800177a:	ed87 3b02 	vstr	d3, [r7, #8]
 800177e:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d105      	bne.n	8001792 <Quaternion_set+0x2a>
 8001786:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <Quaternion_set+0x5c>)
 8001788:	4a0f      	ldr	r2, [pc, #60]	; (80017c8 <Quaternion_set+0x60>)
 800178a:	211b      	movs	r1, #27
 800178c:	480f      	ldr	r0, [pc, #60]	; (80017cc <Quaternion_set+0x64>)
 800178e:	f00b ff65 	bl	800d65c <__assert_func>
    output->w = w;
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001798:	e9c2 3400 	strd	r3, r4, [r2]
    output->v[0] = v1;
 800179c:	687a      	ldr	r2, [r7, #4]
 800179e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
    output->v[1] = v2;
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80017ac:	e9c2 3404 	strd	r3, r4, [r2, #16]
    output->v[2] = v3;
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80017b6:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 80017ba:	bf00      	nop
 80017bc:	372c      	adds	r7, #44	; 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	08011e30 	.word	0x08011e30
 80017c8:	0801236c 	.word	0x0801236c
 80017cc:	08011e40 	.word	0x08011e40

080017d0 <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d105      	bne.n	80017ea <Quaternion_setIdentity+0x1a>
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <Quaternion_setIdentity+0x48>)
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <Quaternion_setIdentity+0x4c>)
 80017e2:	2124      	movs	r1, #36	; 0x24
 80017e4:	480e      	ldr	r0, [pc, #56]	; (8001820 <Quaternion_setIdentity+0x50>)
 80017e6:	f00b ff39 	bl	800d65c <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	ed9f 3b06 	vldr	d3, [pc, #24]	; 8001808 <Quaternion_setIdentity+0x38>
 80017f0:	ed9f 2b05 	vldr	d2, [pc, #20]	; 8001808 <Quaternion_setIdentity+0x38>
 80017f4:	ed9f 1b04 	vldr	d1, [pc, #16]	; 8001808 <Quaternion_setIdentity+0x38>
 80017f8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8001810 <Quaternion_setIdentity+0x40>
 80017fc:	f7ff ffb4 	bl	8001768 <Quaternion_set>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
	...
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	08011e5c 	.word	0x08011e5c
 800181c:	0801237c 	.word	0x0801237c
 8001820:	08011e40 	.word	0x08011e40

08001824 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	ed93 7b00 	vldr	d7, [r3]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	ed93 6b02 	vldr	d6, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	ed93 5b04 	vldr	d5, [r3, #16]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	ed93 4b06 	vldr	d4, [r3, #24]
 8001846:	6838      	ldr	r0, [r7, #0]
 8001848:	eeb0 3a44 	vmov.f32	s6, s8
 800184c:	eef0 3a64 	vmov.f32	s7, s9
 8001850:	eeb0 2a45 	vmov.f32	s4, s10
 8001854:	eef0 2a65 	vmov.f32	s5, s11
 8001858:	eeb0 1a46 	vmov.f32	s2, s12
 800185c:	eef0 1a66 	vmov.f32	s3, s13
 8001860:	eeb0 0a47 	vmov.f32	s0, s14
 8001864:	eef0 0a67 	vmov.f32	s1, s15
 8001868:	f7ff ff7e 	bl	8001768 <Quaternion_set>
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	0000      	movs	r0, r0
	...

08001878 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, double output[3])
{
 8001878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800187c:	b08d      	sub	sp, #52	; 0x34
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d105      	bne.n	8001896 <Quaternion_toEulerZYX+0x1e>
 800188a:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <Quaternion_toEulerZYX+0x278>)
 800188c:	4a99      	ldr	r2, [pc, #612]	; (8001af4 <Quaternion_toEulerZYX+0x27c>)
 800188e:	2185      	movs	r1, #133	; 0x85
 8001890:	4899      	ldr	r0, [pc, #612]	; (8001af8 <Quaternion_toEulerZYX+0x280>)
 8001892:	f00b fee3 	bl	800d65c <__assert_func>

    // Roll (x-axis rotation)
    double sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018a2:	f7fe fec9 	bl	8000638 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4690      	mov	r8, r2
 80018ac:	4699      	mov	r9, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80018ba:	f7fe febd 	bl	8000638 <__aeabi_dmul>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4640      	mov	r0, r8
 80018c4:	4649      	mov	r1, r9
 80018c6:	f7fe fd01 	bl	80002cc <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	f7fe fcf9 	bl	80002cc <__adddf3>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80018ee:	f7fe fea3 	bl	8000638 <__aeabi_dmul>
 80018f2:	4602      	mov	r2, r0
 80018f4:	460b      	mov	r3, r1
 80018f6:	4690      	mov	r8, r2
 80018f8:	4699      	mov	r9, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001906:	f7fe fe97 	bl	8000638 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4640      	mov	r0, r8
 8001910:	4649      	mov	r1, r9
 8001912:	f7fe fcdb 	bl	80002cc <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	f7fe fcd3 	bl	80002cc <__adddf3>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	4973      	ldr	r1, [pc, #460]	; (8001afc <Quaternion_toEulerZYX+0x284>)
 8001930:	f7fe fcca 	bl	80002c8 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	e9c7 2308 	strd	r2, r3, [r7, #32]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 800193c:	ed97 1b08 	vldr	d1, [r7, #32]
 8001940:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8001944:	f00e fd00 	bl	8010348 <atan2>
 8001948:	eeb0 7a40 	vmov.f32	s14, s0
 800194c:	eef0 7a60 	vmov.f32	s15, s1
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	ed83 7b00 	vstr	d7, [r3]

    // Pitch (y-axis rotation)
    double sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	e9d3 0100 	ldrd	r0, r1, [r3]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001962:	f7fe fe69 	bl	8000638 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4690      	mov	r8, r2
 800196c:	4699      	mov	r9, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800197a:	f7fe fe5d 	bl	8000638 <__aeabi_dmul>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	4640      	mov	r0, r8
 8001984:	4649      	mov	r1, r9
 8001986:	f7fe fc9f 	bl	80002c8 <__aeabi_dsub>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	f7fe fc99 	bl	80002cc <__adddf3>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (fabs(sinp) >= 1)
 80019a2:	69bc      	ldr	r4, [r7, #24]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80019aa:	f04f 0200 	mov.w	r2, #0
 80019ae:	4b53      	ldr	r3, [pc, #332]	; (8001afc <Quaternion_toEulerZYX+0x284>)
 80019b0:	4620      	mov	r0, r4
 80019b2:	4629      	mov	r1, r5
 80019b4:	f7ff f8c6 	bl	8000b44 <__aeabi_dcmpge>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d00f      	beq.n	80019de <Quaternion_toEulerZYX+0x166>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	f103 0408 	add.w	r4, r3, #8
 80019c4:	ed97 1b06 	vldr	d1, [r7, #24]
 80019c8:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8001ae8 <Quaternion_toEulerZYX+0x270>
 80019cc:	f00c fd08 	bl	800e3e0 <copysign>
 80019d0:	eeb0 7a40 	vmov.f32	s14, s0
 80019d4:	eef0 7a60 	vmov.f32	s15, s1
 80019d8:	ed84 7b00 	vstr	d7, [r4]
 80019dc:	e00c      	b.n	80019f8 <Quaternion_toEulerZYX+0x180>
    else
        output[1] = asin(sinp);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	f103 0408 	add.w	r4, r3, #8
 80019e4:	ed97 0b06 	vldr	d0, [r7, #24]
 80019e8:	f00e fc56 	bl	8010298 <asin>
 80019ec:	eeb0 7a40 	vmov.f32	s14, s0
 80019f0:	eef0 7a60 	vmov.f32	s15, s1
 80019f4:	ed84 7b00 	vstr	d7, [r4]

    // Yaw (z-axis rotation)
    double siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4623      	mov	r3, r4
 8001a08:	f7fe fe16 	bl	8000638 <__aeabi_dmul>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	461d      	mov	r5, r3
 8001a12:	4626      	mov	r6, r4
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001a20:	461a      	mov	r2, r3
 8001a22:	4623      	mov	r3, r4
 8001a24:	f7fe fe08 	bl	8000638 <__aeabi_dmul>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	4623      	mov	r3, r4
 8001a30:	4628      	mov	r0, r5
 8001a32:	4631      	mov	r1, r6
 8001a34:	f7fe fc4a 	bl	80002cc <__adddf3>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	460c      	mov	r4, r1
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	f7fe fc42 	bl	80002cc <__adddf3>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	460c      	mov	r4, r1
 8001a4c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    double cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4623      	mov	r3, r4
 8001a60:	f7fe fdea 	bl	8000638 <__aeabi_dmul>
 8001a64:	4603      	mov	r3, r0
 8001a66:	460c      	mov	r4, r1
 8001a68:	461d      	mov	r5, r3
 8001a6a:	4626      	mov	r6, r4
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	f7fe fddc 	bl	8000638 <__aeabi_dmul>
 8001a80:	4603      	mov	r3, r0
 8001a82:	460c      	mov	r4, r1
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	4628      	mov	r0, r5
 8001a8a:	4631      	mov	r1, r6
 8001a8c:	f7fe fc1e 	bl	80002cc <__adddf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	460c      	mov	r4, r1
 8001a94:	4618      	mov	r0, r3
 8001a96:	4621      	mov	r1, r4
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	f7fe fc16 	bl	80002cc <__adddf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	460c      	mov	r4, r1
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	4623      	mov	r3, r4
 8001aa8:	f04f 0000 	mov.w	r0, #0
 8001aac:	4913      	ldr	r1, [pc, #76]	; (8001afc <Quaternion_toEulerZYX+0x284>)
 8001aae:	f7fe fc0b 	bl	80002c8 <__aeabi_dsub>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	460c      	mov	r4, r1
 8001ab6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    output[2] = atan2(siny_cosp, cosy_cosp);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	f103 0410 	add.w	r4, r3, #16
 8001ac0:	ed97 1b02 	vldr	d1, [r7, #8]
 8001ac4:	ed97 0b04 	vldr	d0, [r7, #16]
 8001ac8:	f00e fc3e 	bl	8010348 <atan2>
 8001acc:	eeb0 7a40 	vmov.f32	s14, s0
 8001ad0:	eef0 7a60 	vmov.f32	s15, s1
 8001ad4:	ed84 7b00 	vstr	d7, [r4]
}
 8001ad8:	bf00      	nop
 8001ada:	3734      	adds	r7, #52	; 0x34
 8001adc:	46bd      	mov	sp, r7
 8001ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ae2:	bf00      	nop
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	54442d18 	.word	0x54442d18
 8001aec:	3ff921fb 	.word	0x3ff921fb
 8001af0:	08011e30 	.word	0x08011e30
 8001af4:	08012394 	.word	0x08012394
 8001af8:	08011e40 	.word	0x08011e40
 8001afc:	3ff00000 	.word	0x3ff00000

08001b00 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 8001b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
 8001b0a:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d105      	bne.n	8001b1e <Quaternion_conjugate+0x1e>
 8001b12:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <Quaternion_conjugate+0x6c>)
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <Quaternion_conjugate+0x70>)
 8001b16:	21b7      	movs	r1, #183	; 0xb7
 8001b18:	4816      	ldr	r0, [pc, #88]	; (8001b74 <Quaternion_conjugate+0x74>)
 8001b1a:	f00b fd9f 	bl	800d65c <__assert_func>
    output->w = q->w;
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001b24:	6838      	ldr	r0, [r7, #0]
 8001b26:	e9c0 1200 	strd	r1, r2, [r0]
    output->v[0] = -q->v[0];
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
 8001b30:	4688      	mov	r8, r1
 8001b32:	f082 4900 	eor.w	r9, r2, #2147483648	; 0x80000000
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	e9c2 8902 	strd	r8, r9, [r2, #8]
    output->v[1] = -q->v[1];
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	e9d2 1204 	ldrd	r1, r2, [r2, #16]
 8001b42:	460d      	mov	r5, r1
 8001b44:	f082 4600 	eor.w	r6, r2, #2147483648	; 0x80000000
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	e9c2 5604 	strd	r5, r6, [r2, #16]
    output->v[2] = -q->v[2];
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	e9d2 1206 	ldrd	r1, r2, [r2, #24]
 8001b54:	460b      	mov	r3, r1
 8001b56:	f082 4400 	eor.w	r4, r2, #2147483648	; 0x80000000
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 8001b60:	bf00      	nop
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b6a:	bf00      	nop
 8001b6c:	08011e30 	.word	0x08011e30
 8001b70:	080123ac 	.word	0x080123ac
 8001b74:	08011e40 	.word	0x08011e40

08001b78 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8001b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b7a:	b08d      	sub	sp, #52	; 0x34
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d105      	bne.n	8001b96 <Quaternion_multiply+0x1e>
 8001b8a:	4baa      	ldr	r3, [pc, #680]	; (8001e34 <Quaternion_multiply+0x2bc>)
 8001b8c:	4aaa      	ldr	r2, [pc, #680]	; (8001e38 <Quaternion_multiply+0x2c0>)
 8001b8e:	21d2      	movs	r1, #210	; 0xd2
 8001b90:	48aa      	ldr	r0, [pc, #680]	; (8001e3c <Quaternion_multiply+0x2c4>)
 8001b92:	f00b fd63 	bl	800d65c <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	f7fe fd47 	bl	8000638 <__aeabi_dmul>
 8001baa:	4603      	mov	r3, r0
 8001bac:	460c      	mov	r4, r1
 8001bae:	461d      	mov	r5, r3
 8001bb0:	4626      	mov	r6, r4
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	4623      	mov	r3, r4
 8001bc2:	f7fe fd39 	bl	8000638 <__aeabi_dmul>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	460c      	mov	r4, r1
 8001bca:	461a      	mov	r2, r3
 8001bcc:	4623      	mov	r3, r4
 8001bce:	4628      	mov	r0, r5
 8001bd0:	4631      	mov	r1, r6
 8001bd2:	f7fe fb79 	bl	80002c8 <__aeabi_dsub>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	461d      	mov	r5, r3
 8001bdc:	4626      	mov	r6, r4
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001bea:	461a      	mov	r2, r3
 8001bec:	4623      	mov	r3, r4
 8001bee:	f7fe fd23 	bl	8000638 <__aeabi_dmul>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4623      	mov	r3, r4
 8001bfa:	4628      	mov	r0, r5
 8001bfc:	4631      	mov	r1, r6
 8001bfe:	f7fe fb63 	bl	80002c8 <__aeabi_dsub>
 8001c02:	4603      	mov	r3, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	461d      	mov	r5, r3
 8001c08:	4626      	mov	r6, r4
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001c16:	461a      	mov	r2, r3
 8001c18:	4623      	mov	r3, r4
 8001c1a:	f7fe fd0d 	bl	8000638 <__aeabi_dmul>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460c      	mov	r4, r1
 8001c22:	461a      	mov	r2, r3
 8001c24:	4623      	mov	r3, r4
 8001c26:	4628      	mov	r0, r5
 8001c28:	4631      	mov	r1, r6
 8001c2a:	f7fe fb4d 	bl	80002c8 <__aeabi_dsub>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	e9c7 3404 	strd	r3, r4, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4623      	mov	r3, r4
 8001c46:	f7fe fcf7 	bl	8000638 <__aeabi_dmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	460c      	mov	r4, r1
 8001c4e:	461d      	mov	r5, r3
 8001c50:	4626      	mov	r6, r4
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe fce9 	bl	8000638 <__aeabi_dmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4623      	mov	r3, r4
 8001c6e:	4628      	mov	r0, r5
 8001c70:	4631      	mov	r1, r6
 8001c72:	f7fe fb2b 	bl	80002cc <__adddf3>
 8001c76:	4603      	mov	r3, r0
 8001c78:	460c      	mov	r4, r1
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4626      	mov	r6, r4
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	f7fe fcd3 	bl	8000638 <__aeabi_dmul>
 8001c92:	4603      	mov	r3, r0
 8001c94:	460c      	mov	r4, r1
 8001c96:	461a      	mov	r2, r3
 8001c98:	4623      	mov	r3, r4
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	4631      	mov	r1, r6
 8001c9e:	f7fe fb15 	bl	80002cc <__adddf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	461d      	mov	r5, r3
 8001ca8:	4626      	mov	r6, r4
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4623      	mov	r3, r4
 8001cba:	f7fe fcbd 	bl	8000638 <__aeabi_dmul>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	460c      	mov	r4, r1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4623      	mov	r3, r4
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	4631      	mov	r1, r6
 8001cca:	f7fe fafd 	bl	80002c8 <__aeabi_dsub>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	460c      	mov	r4, r1
 8001cd2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	f7fe fca7 	bl	8000638 <__aeabi_dmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	460c      	mov	r4, r1
 8001cee:	461d      	mov	r5, r3
 8001cf0:	4626      	mov	r6, r4
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4623      	mov	r3, r4
 8001d02:	f7fe fc99 	bl	8000638 <__aeabi_dmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4623      	mov	r3, r4
 8001d0e:	4628      	mov	r0, r5
 8001d10:	4631      	mov	r1, r6
 8001d12:	f7fe fad9 	bl	80002c8 <__aeabi_dsub>
 8001d16:	4603      	mov	r3, r0
 8001d18:	460c      	mov	r4, r1
 8001d1a:	461d      	mov	r5, r3
 8001d1c:	4626      	mov	r6, r4
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	f7fe fc83 	bl	8000638 <__aeabi_dmul>
 8001d32:	4603      	mov	r3, r0
 8001d34:	460c      	mov	r4, r1
 8001d36:	461a      	mov	r2, r3
 8001d38:	4623      	mov	r3, r4
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	4631      	mov	r1, r6
 8001d3e:	f7fe fac5 	bl	80002cc <__adddf3>
 8001d42:	4603      	mov	r3, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	461d      	mov	r5, r3
 8001d48:	4626      	mov	r6, r4
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001d56:	461a      	mov	r2, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	f7fe fc6d 	bl	8000638 <__aeabi_dmul>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	460c      	mov	r4, r1
 8001d62:	461a      	mov	r2, r3
 8001d64:	4623      	mov	r3, r4
 8001d66:	4628      	mov	r0, r5
 8001d68:	4631      	mov	r1, r6
 8001d6a:	f7fe faaf 	bl	80002cc <__adddf3>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	460c      	mov	r4, r1
 8001d72:	e9c7 3408 	strd	r3, r4, [r7, #32]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001d82:	461a      	mov	r2, r3
 8001d84:	4623      	mov	r3, r4
 8001d86:	f7fe fc57 	bl	8000638 <__aeabi_dmul>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	460c      	mov	r4, r1
 8001d8e:	461d      	mov	r5, r3
 8001d90:	4626      	mov	r6, r4
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	4623      	mov	r3, r4
 8001da2:	f7fe fc49 	bl	8000638 <__aeabi_dmul>
 8001da6:	4603      	mov	r3, r0
 8001da8:	460c      	mov	r4, r1
 8001daa:	461a      	mov	r2, r3
 8001dac:	4623      	mov	r3, r4
 8001dae:	4628      	mov	r0, r5
 8001db0:	4631      	mov	r1, r6
 8001db2:	f7fe fa8b 	bl	80002cc <__adddf3>
 8001db6:	4603      	mov	r3, r0
 8001db8:	460c      	mov	r4, r1
 8001dba:	461d      	mov	r5, r3
 8001dbc:	4626      	mov	r6, r4
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4623      	mov	r3, r4
 8001dce:	f7fe fc33 	bl	8000638 <__aeabi_dmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	460c      	mov	r4, r1
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4623      	mov	r3, r4
 8001dda:	4628      	mov	r0, r5
 8001ddc:	4631      	mov	r1, r6
 8001dde:	f7fe fa73 	bl	80002c8 <__aeabi_dsub>
 8001de2:	4603      	mov	r3, r0
 8001de4:	460c      	mov	r4, r1
 8001de6:	461d      	mov	r5, r3
 8001de8:	4626      	mov	r6, r4
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001df6:	461a      	mov	r2, r3
 8001df8:	4623      	mov	r3, r4
 8001dfa:	f7fe fc1d 	bl	8000638 <__aeabi_dmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	460c      	mov	r4, r1
 8001e02:	461a      	mov	r2, r3
 8001e04:	4623      	mov	r3, r4
 8001e06:	4628      	mov	r0, r5
 8001e08:	4631      	mov	r1, r6
 8001e0a:	f7fe fa5f 	bl	80002cc <__adddf3>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	460c      	mov	r4, r1
 8001e12:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

    *output = result;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	461d      	mov	r5, r3
 8001e1a:	f107 0410 	add.w	r4, r7, #16
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e26:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001e2a:	bf00      	nop
 8001e2c:	3734      	adds	r7, #52	; 0x34
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e32:	bf00      	nop
 8001e34:	08011e30 	.word	0x08011e30
 8001e38:	080123c4 	.word	0x080123c4
 8001e3c:	08011e40 	.word	0x08011e40

08001e40 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, double v[3], double output[3])
{
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	b09f      	sub	sp, #124	; 0x7c
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10c      	bne.n	8001e6c <Quaternion_rotate+0x2c>
 8001e52:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <Quaternion_rotate+0x20>)
 8001e54:	4a03      	ldr	r2, [pc, #12]	; (8001e64 <Quaternion_rotate+0x24>)
 8001e56:	21e6      	movs	r1, #230	; 0xe6
 8001e58:	4803      	ldr	r0, [pc, #12]	; (8001e68 <Quaternion_rotate+0x28>)
 8001e5a:	f00b fbff 	bl	800d65c <__assert_func>
 8001e5e:	bf00      	nop
 8001e60:	08011e30 	.word	0x08011e30
 8001e64:	080123d8 	.word	0x080123d8
 8001e68:	08011e40 	.word	0x08011e40
    double result[3];

    double ww = q->w * q->w;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4623      	mov	r3, r4
 8001e7c:	f7fe fbdc 	bl	8000638 <__aeabi_dmul>
 8001e80:	4603      	mov	r3, r0
 8001e82:	460c      	mov	r4, r1
 8001e84:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    double xx = q->v[0] * q->v[0];
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4623      	mov	r3, r4
 8001e98:	f7fe fbce 	bl	8000638 <__aeabi_dmul>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
    double yy = q->v[1] * q->v[1];
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	f7fe fbc0 	bl	8000638 <__aeabi_dmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	460c      	mov	r4, r1
 8001ebc:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    double zz = q->v[2] * q->v[2];
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4623      	mov	r3, r4
 8001ed0:	f7fe fbb2 	bl	8000638 <__aeabi_dmul>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	460c      	mov	r4, r1
 8001ed8:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
    double wx = q->w * q->v[0];
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4623      	mov	r3, r4
 8001eec:	f7fe fba4 	bl	8000638 <__aeabi_dmul>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
    double wy = q->w * q->v[1];
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001f04:	461a      	mov	r2, r3
 8001f06:	4623      	mov	r3, r4
 8001f08:	f7fe fb96 	bl	8000638 <__aeabi_dmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	460c      	mov	r4, r1
 8001f10:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    double wz = q->w * q->v[2];
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4623      	mov	r3, r4
 8001f24:	f7fe fb88 	bl	8000638 <__aeabi_dmul>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	460c      	mov	r4, r1
 8001f2c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    double xy = q->v[0] * q->v[1];
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4623      	mov	r3, r4
 8001f40:	f7fe fb7a 	bl	8000638 <__aeabi_dmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	460c      	mov	r4, r1
 8001f48:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double xz = q->v[0] * q->v[2];
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4623      	mov	r3, r4
 8001f5c:	f7fe fb6c 	bl	8000638 <__aeabi_dmul>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
 8001f64:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    double yz = q->v[1] * q->v[2];
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 8001f74:	461a      	mov	r2, r3
 8001f76:	4623      	mov	r3, r4
 8001f78:	f7fe fb5e 	bl	8000638 <__aeabi_dmul>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	460c      	mov	r4, r1
 8001f80:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f8e:	f7fe fb53 	bl	8000638 <__aeabi_dmul>
 8001f92:	4603      	mov	r3, r0
 8001f94:	460c      	mov	r4, r1
 8001f96:	461d      	mov	r5, r3
 8001f98:	4626      	mov	r6, r4
 8001f9a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	f7fe f993 	bl	80002cc <__adddf3>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	460c      	mov	r4, r1
 8001faa:	4618      	mov	r0, r3
 8001fac:	4621      	mov	r1, r4
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3310      	adds	r3, #16
 8001fb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4623      	mov	r3, r4
 8001fba:	f7fe fb3d 	bl	8000638 <__aeabi_dmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	4628      	mov	r0, r5
 8001fc8:	4631      	mov	r1, r6
 8001fca:	f7fe f97f 	bl	80002cc <__adddf3>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	460c      	mov	r4, r1
 8001fd2:	461d      	mov	r5, r3
 8001fd4:	4626      	mov	r6, r4
 8001fd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	f7fe f975 	bl	80002cc <__adddf3>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	4621      	mov	r1, r4
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	3308      	adds	r3, #8
 8001fee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	4623      	mov	r3, r4
 8001ff6:	f7fe fb1f 	bl	8000638 <__aeabi_dmul>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	460c      	mov	r4, r1
 8001ffe:	461a      	mov	r2, r3
 8002000:	4623      	mov	r3, r4
 8002002:	4628      	mov	r0, r5
 8002004:	4631      	mov	r1, r6
 8002006:	f7fe f95f 	bl	80002c8 <__aeabi_dsub>
 800200a:	4603      	mov	r3, r0
 800200c:	460c      	mov	r4, r1
 800200e:	4625      	mov	r5, r4
 8002010:	461c      	mov	r4, r3
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002018:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800201c:	f7fe fb0c 	bl	8000638 <__aeabi_dmul>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002024:	4620      	mov	r0, r4
 8002026:	4629      	mov	r1, r5
 8002028:	f7fe f950 	bl	80002cc <__adddf3>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	461d      	mov	r5, r3
 8002032:	4626      	mov	r6, r4
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002034:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	f7fe f946 	bl	80002cc <__adddf3>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	4618      	mov	r0, r3
 8002046:	4621      	mov	r1, r4
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	3308      	adds	r3, #8
 800204c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002050:	461a      	mov	r2, r3
 8002052:	4623      	mov	r3, r4
 8002054:	f7fe faf0 	bl	8000638 <__aeabi_dmul>
 8002058:	4603      	mov	r3, r0
 800205a:	460c      	mov	r4, r1
 800205c:	461a      	mov	r2, r3
 800205e:	4623      	mov	r3, r4
 8002060:	4628      	mov	r0, r5
 8002062:	4631      	mov	r1, r6
 8002064:	f7fe f932 	bl	80002cc <__adddf3>
 8002068:	4603      	mov	r3, r0
 800206a:	460c      	mov	r4, r1
 800206c:	461d      	mov	r5, r3
 800206e:	4626      	mov	r6, r4
 8002070:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	f7fe f928 	bl	80002cc <__adddf3>
 800207c:	4603      	mov	r3, r0
 800207e:	460c      	mov	r4, r1
 8002080:	4618      	mov	r0, r3
 8002082:	4621      	mov	r1, r4
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3310      	adds	r3, #16
 8002088:	e9d3 3400 	ldrd	r3, r4, [r3]
 800208c:	461a      	mov	r2, r3
 800208e:	4623      	mov	r3, r4
 8002090:	f7fe fad2 	bl	8000638 <__aeabi_dmul>
 8002094:	4603      	mov	r3, r0
 8002096:	460c      	mov	r4, r1
 8002098:	461a      	mov	r2, r3
 800209a:	4623      	mov	r3, r4
 800209c:	4628      	mov	r0, r5
 800209e:	4631      	mov	r1, r6
 80020a0:	f7fe f914 	bl	80002cc <__adddf3>
 80020a4:	4603      	mov	r3, r0
 80020a6:	460c      	mov	r4, r1
 80020a8:	4625      	mov	r5, r4
 80020aa:	461c      	mov	r4, r3
                zz*v[0] - yy*v[0];
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80020b6:	f7fe fabf 	bl	8000638 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 80020be:	4620      	mov	r0, r4
 80020c0:	4629      	mov	r1, r5
 80020c2:	f7fe f901 	bl	80002c8 <__aeabi_dsub>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	4625      	mov	r5, r4
 80020cc:	461c      	mov	r4, r3
                zz*v[0] - yy*v[0];
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80020d8:	f7fe faae 	bl	8000638 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f8f0 	bl	80002c8 <__aeabi_dsub>
 80020e8:	4603      	mov	r3, r0
 80020ea:	460c      	mov	r4, r1
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 80020ec:	e9c7 3404 	strd	r3, r4, [r7, #16]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 80020f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	f7fe f8e8 	bl	80002cc <__adddf3>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	4618      	mov	r0, r3
 8002102:	4621      	mov	r1, r4
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	e9d3 3400 	ldrd	r3, r4, [r3]
 800210a:	461a      	mov	r2, r3
 800210c:	4623      	mov	r3, r4
 800210e:	f7fe fa93 	bl	8000638 <__aeabi_dmul>
 8002112:	4603      	mov	r3, r0
 8002114:	460c      	mov	r4, r1
 8002116:	4625      	mov	r5, r4
 8002118:	461c      	mov	r4, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	3308      	adds	r3, #8
 800211e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002122:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8002126:	f7fe fa87 	bl	8000638 <__aeabi_dmul>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f8cb 	bl	80002cc <__adddf3>
 8002136:	4603      	mov	r3, r0
 8002138:	460c      	mov	r4, r1
 800213a:	461d      	mov	r5, r3
 800213c:	4626      	mov	r6, r4
 800213e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	f7fe f8c1 	bl	80002cc <__adddf3>
 800214a:	4603      	mov	r3, r0
 800214c:	460c      	mov	r4, r1
 800214e:	4618      	mov	r0, r3
 8002150:	4621      	mov	r1, r4
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	3310      	adds	r3, #16
 8002156:	e9d3 3400 	ldrd	r3, r4, [r3]
 800215a:	461a      	mov	r2, r3
 800215c:	4623      	mov	r3, r4
 800215e:	f7fe fa6b 	bl	8000638 <__aeabi_dmul>
 8002162:	4603      	mov	r3, r0
 8002164:	460c      	mov	r4, r1
 8002166:	461a      	mov	r2, r3
 8002168:	4623      	mov	r3, r4
 800216a:	4628      	mov	r0, r5
 800216c:	4631      	mov	r1, r6
 800216e:	f7fe f8ad 	bl	80002cc <__adddf3>
 8002172:	4603      	mov	r3, r0
 8002174:	460c      	mov	r4, r1
 8002176:	461d      	mov	r5, r3
 8002178:	4626      	mov	r6, r4
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 800217a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	f7fe f8a3 	bl	80002cc <__adddf3>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	4618      	mov	r0, r3
 800218c:	4621      	mov	r1, r4
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002194:	461a      	mov	r2, r3
 8002196:	4623      	mov	r3, r4
 8002198:	f7fe fa4e 	bl	8000638 <__aeabi_dmul>
 800219c:	4603      	mov	r3, r0
 800219e:	460c      	mov	r4, r1
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 80021a0:	461a      	mov	r2, r3
 80021a2:	4623      	mov	r3, r4
 80021a4:	4628      	mov	r0, r5
 80021a6:	4631      	mov	r1, r6
 80021a8:	f7fe f890 	bl	80002cc <__adddf3>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	4625      	mov	r5, r4
 80021b2:	461c      	mov	r4, r3
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	3308      	adds	r3, #8
 80021b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021c0:	f7fe fa3a 	bl	8000638 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	4620      	mov	r0, r4
 80021ca:	4629      	mov	r1, r5
 80021cc:	f7fe f87c 	bl	80002c8 <__aeabi_dsub>
 80021d0:	4603      	mov	r3, r0
 80021d2:	460c      	mov	r4, r1
 80021d4:	4625      	mov	r5, r4
 80021d6:	461c      	mov	r4, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3308      	adds	r3, #8
 80021dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021e4:	f7fe fa28 	bl	8000638 <__aeabi_dmul>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4620      	mov	r0, r4
 80021ee:	4629      	mov	r1, r5
 80021f0:	f7fe f86c 	bl	80002cc <__adddf3>
 80021f4:	4603      	mov	r3, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	461d      	mov	r5, r3
 80021fa:	4626      	mov	r6, r4
                2*wx*v[2] - xx*v[1];
 80021fc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	f7fe f862 	bl	80002cc <__adddf3>
 8002208:	4603      	mov	r3, r0
 800220a:	460c      	mov	r4, r1
 800220c:	4618      	mov	r0, r3
 800220e:	4621      	mov	r1, r4
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	3310      	adds	r3, #16
 8002214:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002218:	461a      	mov	r2, r3
 800221a:	4623      	mov	r3, r4
 800221c:	f7fe fa0c 	bl	8000638 <__aeabi_dmul>
 8002220:	4603      	mov	r3, r0
 8002222:	460c      	mov	r4, r1
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002224:	461a      	mov	r2, r3
 8002226:	4623      	mov	r3, r4
 8002228:	4628      	mov	r0, r5
 800222a:	4631      	mov	r1, r6
 800222c:	f7fe f84c 	bl	80002c8 <__aeabi_dsub>
 8002230:	4603      	mov	r3, r0
 8002232:	460c      	mov	r4, r1
 8002234:	4625      	mov	r5, r4
 8002236:	461c      	mov	r4, r3
                2*wx*v[2] - xx*v[1];
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	3308      	adds	r3, #8
 800223c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002240:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002244:	f7fe f9f8 	bl	8000638 <__aeabi_dmul>
 8002248:	4602      	mov	r2, r0
 800224a:	460b      	mov	r3, r1
 800224c:	4620      	mov	r0, r4
 800224e:	4629      	mov	r1, r5
 8002250:	f7fe f83a 	bl	80002c8 <__aeabi_dsub>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002258:	e9c7 3406 	strd	r3, r4, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 800225c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	f7fe f832 	bl	80002cc <__adddf3>
 8002268:	4603      	mov	r3, r0
 800226a:	460c      	mov	r4, r1
 800226c:	4618      	mov	r0, r3
 800226e:	4621      	mov	r1, r4
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002276:	461a      	mov	r2, r3
 8002278:	4623      	mov	r3, r4
 800227a:	f7fe f9dd 	bl	8000638 <__aeabi_dmul>
 800227e:	4603      	mov	r3, r0
 8002280:	460c      	mov	r4, r1
 8002282:	461d      	mov	r5, r3
 8002284:	4626      	mov	r6, r4
 8002286:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	f7fe f81d 	bl	80002cc <__adddf3>
 8002292:	4603      	mov	r3, r0
 8002294:	460c      	mov	r4, r1
 8002296:	4618      	mov	r0, r3
 8002298:	4621      	mov	r1, r4
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3308      	adds	r3, #8
 800229e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022a2:	461a      	mov	r2, r3
 80022a4:	4623      	mov	r3, r4
 80022a6:	f7fe f9c7 	bl	8000638 <__aeabi_dmul>
 80022aa:	4603      	mov	r3, r0
 80022ac:	460c      	mov	r4, r1
 80022ae:	461a      	mov	r2, r3
 80022b0:	4623      	mov	r3, r4
 80022b2:	4628      	mov	r0, r5
 80022b4:	4631      	mov	r1, r6
 80022b6:	f7fe f809 	bl	80002cc <__adddf3>
 80022ba:	4603      	mov	r3, r0
 80022bc:	460c      	mov	r4, r1
 80022be:	4625      	mov	r5, r4
 80022c0:	461c      	mov	r4, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	3310      	adds	r3, #16
 80022c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022ce:	f7fe f9b3 	bl	8000638 <__aeabi_dmul>
 80022d2:	4602      	mov	r2, r0
 80022d4:	460b      	mov	r3, r1
 80022d6:	4620      	mov	r0, r4
 80022d8:	4629      	mov	r1, r5
 80022da:	f7fd fff7 	bl	80002cc <__adddf3>
 80022de:	4603      	mov	r3, r0
 80022e0:	460c      	mov	r4, r1
 80022e2:	461d      	mov	r5, r3
 80022e4:	4626      	mov	r6, r4
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 80022e6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	f7fd ffed 	bl	80002cc <__adddf3>
 80022f2:	4603      	mov	r3, r0
 80022f4:	460c      	mov	r4, r1
 80022f6:	4618      	mov	r0, r3
 80022f8:	4621      	mov	r1, r4
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002300:	461a      	mov	r2, r3
 8002302:	4623      	mov	r3, r4
 8002304:	f7fe f998 	bl	8000638 <__aeabi_dmul>
 8002308:	4603      	mov	r3, r0
 800230a:	460c      	mov	r4, r1
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 800230c:	461a      	mov	r2, r3
 800230e:	4623      	mov	r3, r4
 8002310:	4628      	mov	r0, r5
 8002312:	4631      	mov	r1, r6
 8002314:	f7fd ffd8 	bl	80002c8 <__aeabi_dsub>
 8002318:	4603      	mov	r3, r0
 800231a:	460c      	mov	r4, r1
 800231c:	4625      	mov	r5, r4
 800231e:	461c      	mov	r4, r3
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3310      	adds	r3, #16
 8002324:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002328:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800232c:	f7fe f984 	bl	8000638 <__aeabi_dmul>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fd ffc6 	bl	80002c8 <__aeabi_dsub>
 800233c:	4603      	mov	r3, r0
 800233e:	460c      	mov	r4, r1
 8002340:	461d      	mov	r5, r3
 8002342:	4626      	mov	r6, r4
 8002344:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	f7fd ffbe 	bl	80002cc <__adddf3>
 8002350:	4603      	mov	r3, r0
 8002352:	460c      	mov	r4, r1
 8002354:	4618      	mov	r0, r3
 8002356:	4621      	mov	r1, r4
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3308      	adds	r3, #8
 800235c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002360:	461a      	mov	r2, r3
 8002362:	4623      	mov	r3, r4
 8002364:	f7fe f968 	bl	8000638 <__aeabi_dmul>
 8002368:	4603      	mov	r3, r0
 800236a:	460c      	mov	r4, r1
 800236c:	461a      	mov	r2, r3
 800236e:	4623      	mov	r3, r4
 8002370:	4628      	mov	r0, r5
 8002372:	4631      	mov	r1, r6
 8002374:	f7fd ffaa 	bl	80002cc <__adddf3>
 8002378:	4603      	mov	r3, r0
 800237a:	460c      	mov	r4, r1
 800237c:	4625      	mov	r5, r4
 800237e:	461c      	mov	r4, r3
                xx*v[2] + ww*v[2];
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	3310      	adds	r3, #16
 8002384:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002388:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800238c:	f7fe f954 	bl	8000638 <__aeabi_dmul>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002394:	4620      	mov	r0, r4
 8002396:	4629      	mov	r1, r5
 8002398:	f7fd ff96 	bl	80002c8 <__aeabi_dsub>
 800239c:	4603      	mov	r3, r0
 800239e:	460c      	mov	r4, r1
 80023a0:	4625      	mov	r5, r4
 80023a2:	461c      	mov	r4, r3
                xx*v[2] + ww*v[2];
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	3310      	adds	r3, #16
 80023a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80023b0:	f7fe f942 	bl	8000638 <__aeabi_dmul>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4620      	mov	r0, r4
 80023ba:	4629      	mov	r1, r5
 80023bc:	f7fd ff86 	bl	80002cc <__adddf3>
 80023c0:	4603      	mov	r3, r0
 80023c2:	460c      	mov	r4, r1
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 80023c4:	e9c7 3408 	strd	r3, r4, [r7, #32]

    // Copy result to output
    output[0] = result[0];
 80023c8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	e9c2 3400 	strd	r3, r4, [r2]
    output[1] = result[1];
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f103 0208 	add.w	r2, r3, #8
 80023d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023dc:	e9c2 3400 	strd	r3, r4, [r2]
    output[2] = result[2];
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f103 0210 	add.w	r2, r3, #16
 80023e6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023ea:	e9c2 3400 	strd	r3, r4, [r2]
}
 80023ee:	bf00      	nop
 80023f0:	377c      	adds	r7, #124	; 0x7c
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f6:	bf00      	nop

080023f8 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(double omega[3], double dt, Quaternion* output) {
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b08e      	sub	sp, #56	; 0x38
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	ed87 0b00 	vstr	d0, [r7]
 8002404:	60b9      	str	r1, [r7, #8]
    double hax = omega[0] * dt * 0.5;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	e9d3 0100 	ldrd	r0, r1, [r3]
 800240c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002410:	f7fe f912 	bl	8000638 <__aeabi_dmul>
 8002414:	4603      	mov	r3, r0
 8002416:	460c      	mov	r4, r1
 8002418:	4618      	mov	r0, r3
 800241a:	4621      	mov	r1, r4
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	4b59      	ldr	r3, [pc, #356]	; (8002588 <Quaternion_fromRate+0x190>)
 8002422:	f7fe f909 	bl	8000638 <__aeabi_dmul>
 8002426:	4603      	mov	r3, r0
 8002428:	460c      	mov	r4, r1
 800242a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    double hay = omega[1] * dt * 0.5;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3308      	adds	r3, #8
 8002432:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800243a:	f7fe f8fd 	bl	8000638 <__aeabi_dmul>
 800243e:	4603      	mov	r3, r0
 8002440:	460c      	mov	r4, r1
 8002442:	4618      	mov	r0, r3
 8002444:	4621      	mov	r1, r4
 8002446:	f04f 0200 	mov.w	r2, #0
 800244a:	4b4f      	ldr	r3, [pc, #316]	; (8002588 <Quaternion_fromRate+0x190>)
 800244c:	f7fe f8f4 	bl	8000638 <__aeabi_dmul>
 8002450:	4603      	mov	r3, r0
 8002452:	460c      	mov	r4, r1
 8002454:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double haz = omega[2] * dt * 0.5;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	3310      	adds	r3, #16
 800245c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002464:	f7fe f8e8 	bl	8000638 <__aeabi_dmul>
 8002468:	4603      	mov	r3, r0
 800246a:	460c      	mov	r4, r1
 800246c:	4618      	mov	r0, r3
 800246e:	4621      	mov	r1, r4
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	4b44      	ldr	r3, [pc, #272]	; (8002588 <Quaternion_fromRate+0x190>)
 8002476:	f7fe f8df 	bl	8000638 <__aeabi_dmul>
 800247a:	4603      	mov	r3, r0
 800247c:	460c      	mov	r4, r1
 800247e:	e9c7 3408 	strd	r3, r4, [r7, #32]

    double l = hax*hax + hay * hay + haz*haz;
 8002482:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002486:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800248a:	f7fe f8d5 	bl	8000638 <__aeabi_dmul>
 800248e:	4603      	mov	r3, r0
 8002490:	460c      	mov	r4, r1
 8002492:	4625      	mov	r5, r4
 8002494:	461c      	mov	r4, r3
 8002496:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800249a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800249e:	f7fe f8cb 	bl	8000638 <__aeabi_dmul>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	4620      	mov	r0, r4
 80024a8:	4629      	mov	r1, r5
 80024aa:	f7fd ff0f 	bl	80002cc <__adddf3>
 80024ae:	4603      	mov	r3, r0
 80024b0:	460c      	mov	r4, r1
 80024b2:	4625      	mov	r5, r4
 80024b4:	461c      	mov	r4, r3
 80024b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80024ba:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024be:	f7fe f8bb 	bl	8000638 <__aeabi_dmul>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4620      	mov	r0, r4
 80024c8:	4629      	mov	r1, r5
 80024ca:	f7fd feff 	bl	80002cc <__adddf3>
 80024ce:	4603      	mov	r3, r0
 80024d0:	460c      	mov	r4, r1
 80024d2:	e9c7 3406 	strd	r3, r4, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS) {
 80024d6:	a32a      	add	r3, pc, #168	; (adr r3, 8002580 <Quaternion_fromRate+0x188>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024e0:	f7fe fb3a 	bl	8000b58 <__aeabi_dcmpgt>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d040      	beq.n	800256c <Quaternion_fromRate+0x174>
        l = sqrt(l);
 80024ea:	ed97 0b06 	vldr	d0, [r7, #24]
 80024ee:	f00d ff2d 	bl	801034c <sqrt>
 80024f2:	ed87 0b06 	vstr	d0, [r7, #24]
        double sinl = sin(l) / l;
 80024f6:	ed97 0b06 	vldr	d0, [r7, #24]
 80024fa:	f00d fe85 	bl	8010208 <sin>
 80024fe:	ec51 0b10 	vmov	r0, r1, d0
 8002502:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002506:	f7fe f9c1 	bl	800088c <__aeabi_ddiv>
 800250a:	4603      	mov	r3, r0
 800250c:	460c      	mov	r4, r1
 800250e:	e9c7 3404 	strd	r3, r4, [r7, #16]

        output->w = cos(l);
 8002512:	ed97 0b06 	vldr	d0, [r7, #24]
 8002516:	f00d fe33 	bl	8010180 <cos>
 800251a:	eeb0 7a40 	vmov.f32	s14, s0
 800251e:	eef0 7a60 	vmov.f32	s15, s1
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	ed83 7b00 	vstr	d7, [r3]
        output->v[0] = hax * sinl;
 8002528:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800252c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002530:	f7fe f882 	bl	8000638 <__aeabi_dmul>
 8002534:	4603      	mov	r3, r0
 8002536:	460c      	mov	r4, r1
 8002538:	68ba      	ldr	r2, [r7, #8]
 800253a:	e9c2 3402 	strd	r3, r4, [r2, #8]
        output->v[1] = hay * sinl;
 800253e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002542:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002546:	f7fe f877 	bl	8000638 <__aeabi_dmul>
 800254a:	4603      	mov	r3, r0
 800254c:	460c      	mov	r4, r1
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	e9c2 3404 	strd	r3, r4, [r2, #16]
        output->v[2] = haz * sinl;
 8002554:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002558:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800255c:	f7fe f86c 	bl	8000638 <__aeabi_dmul>
 8002560:	4603      	mov	r3, r0
 8002562:	460c      	mov	r4, r1
 8002564:	68ba      	ldr	r2, [r7, #8]
 8002566:	e9c2 3406 	strd	r3, r4, [r2, #24]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 800256a:	e002      	b.n	8002572 <Quaternion_fromRate+0x17a>
        Quaternion_setIdentity(output);
 800256c:	68b8      	ldr	r0, [r7, #8]
 800256e:	f7ff f92f 	bl	80017d0 <Quaternion_setIdentity>
}
 8002572:	bf00      	nop
 8002574:	3738      	adds	r7, #56	; 0x38
 8002576:	46bd      	mov	sp, r7
 8002578:	bdb0      	pop	{r4, r5, r7, pc}
 800257a:	bf00      	nop
 800257c:	f3af 8000 	nop.w
 8002580:	e2308c3a 	.word	0xe2308c3a
 8002584:	3e45798e 	.word	0x3e45798e
 8002588:	3fe00000 	.word	0x3fe00000

0800258c <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 8002590:	2214      	movs	r2, #20
 8002592:	2122      	movs	r1, #34	; 0x22
 8002594:	2064      	movs	r0, #100	; 0x64
 8002596:	f000 fd47 	bl	8003028 <changeLed>

    changeLed(255, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	20ff      	movs	r0, #255	; 0xff
 80025a0:	f000 fd42 	bl	8003028 <changeLed>
    playtone(1046, 100, 10);
 80025a4:	220a      	movs	r2, #10
 80025a6:	2164      	movs	r1, #100	; 0x64
 80025a8:	f240 4016 	movw	r0, #1046	; 0x416
 80025ac:	f000 fcc0 	bl	8002f30 <playtone>
    HAL_Delay(100);
 80025b0:	2064      	movs	r0, #100	; 0x64
 80025b2:	f001 fbb1 	bl	8003d18 <HAL_Delay>
    changeLed(0, 255, 0);
 80025b6:	2200      	movs	r2, #0
 80025b8:	21ff      	movs	r1, #255	; 0xff
 80025ba:	2000      	movs	r0, #0
 80025bc:	f000 fd34 	bl	8003028 <changeLed>
    playtone(1319, 100, 10);
 80025c0:	220a      	movs	r2, #10
 80025c2:	2164      	movs	r1, #100	; 0x64
 80025c4:	f240 5027 	movw	r0, #1319	; 0x527
 80025c8:	f000 fcb2 	bl	8002f30 <playtone>
    return;
 80025cc:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025d4:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 80025d8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025da:	f001 fb2b 	bl	8003c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025de:	f000 f915 	bl	800280c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025e2:	f000 fbd1 	bl	8002d88 <MX_GPIO_Init>
  MX_TIM3_Init();
 80025e6:	f000 fb35 	bl	8002c54 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80025ea:	f00a fac3 	bl	800cb74 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80025ee:	f000 fa61 	bl	8002ab4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80025f2:	f000 fa95 	bl	8002b20 <MX_SPI3_Init>
  MX_TIM2_Init();
 80025f6:	f000 fac9 	bl	8002b8c <MX_TIM2_Init>
  MX_SPI1_Init();
 80025fa:	f000 fa25 	bl	8002a48 <MX_SPI1_Init>
  MX_FATFS_Init();
 80025fe:	f008 f8e3 	bl	800a7c8 <MX_FATFS_Init>
  MX_I2C3_Init();
 8002602:	f000 f9f3 	bl	80029ec <MX_I2C3_Init>
  MX_ADC1_Init();
 8002606:	f000 f99d 	bl	8002944 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800260a:	210c      	movs	r1, #12
 800260c:	4876      	ldr	r0, [pc, #472]	; (80027e8 <main+0x218>)
 800260e:	f006 f873 	bl	80086f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002612:	2104      	movs	r1, #4
 8002614:	4874      	ldr	r0, [pc, #464]	; (80027e8 <main+0x218>)
 8002616:	f006 f86f 	bl	80086f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800261a:	2108      	movs	r1, #8
 800261c:	4872      	ldr	r0, [pc, #456]	; (80027e8 <main+0x218>)
 800261e:	f006 f86b 	bl	80086f8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002622:	2100      	movs	r1, #0
 8002624:	4870      	ldr	r0, [pc, #448]	; (80027e8 <main+0x218>)
 8002626:	f006 f867 	bl	80086f8 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800262a:	210c      	movs	r1, #12
 800262c:	486f      	ldr	r0, [pc, #444]	; (80027ec <main+0x21c>)
 800262e:	f006 f863 	bl	80086f8 <HAL_TIM_PWM_Start>

    startupMusic();
 8002632:	f7ff ffab 	bl	800258c <startupMusic>

    changeLed(90, 0, 0);
 8002636:	2200      	movs	r2, #0
 8002638:	2100      	movs	r1, #0
 800263a:	205a      	movs	r0, #90	; 0x5a
 800263c:	f000 fcf4 	bl	8003028 <changeLed>

    htim3.Instance->CCR2 = 0;
 8002640:	4b69      	ldr	r3, [pc, #420]	; (80027e8 <main+0x218>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2200      	movs	r2, #0
 8002646:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8002648:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <main+0x218>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	22ff      	movs	r2, #255	; 0xff
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8002650:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002654:	f001 fb60 	bl	8003d18 <HAL_Delay>

    // LSM6dso setup
    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 8002658:	f507 70b4 	add.w	r0, r7, #360	; 0x168
 800265c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002660:	4a63      	ldr	r2, [pc, #396]	; (80027f0 <main+0x220>)
 8002662:	4964      	ldr	r1, [pc, #400]	; (80027f4 <main+0x224>)
 8002664:	f7fe fce0 	bl	8001028 <LSM_init>
 8002668:	4603      	mov	r3, r0
 800266a:	f887 32c7 	strb.w	r3, [r7, #711]	; 0x2c7
    SPI2_NSS_Pin);

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 800266e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8002672:	2277      	movs	r2, #119	; 0x77
 8002674:	4960      	ldr	r1, [pc, #384]	; (80027f8 <main+0x228>)
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fef0 	bl	800145c <SPL06_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	f887 32c6 	strb.w	r3, [r7, #710]	; 0x2c6

    if (barostatus != 5) {
 8002682:	f897 32c6 	ldrb.w	r3, [r7, #710]	; 0x2c6
 8002686:	2b05      	cmp	r3, #5
 8002688:	d010      	beq.n	80026ac <main+0xdc>
        while (1) {

            HAL_Delay(100);
 800268a:	2064      	movs	r0, #100	; 0x64
 800268c:	f001 fb44 	bl	8003d18 <HAL_Delay>
            changeLed(100, 0, 0);
 8002690:	2200      	movs	r2, #0
 8002692:	2100      	movs	r1, #0
 8002694:	2064      	movs	r0, #100	; 0x64
 8002696:	f000 fcc7 	bl	8003028 <changeLed>
            HAL_Delay(100);
 800269a:	2064      	movs	r0, #100	; 0x64
 800269c:	f001 fb3c 	bl	8003d18 <HAL_Delay>
            changeLed(0, 0, 0);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2100      	movs	r1, #0
 80026a4:	2000      	movs	r0, #0
 80026a6:	f000 fcbf 	bl	8003028 <changeLed>
            HAL_Delay(100);
 80026aa:	e7ee      	b.n	800268a <main+0xba>
    //BWtest();

    //loraTesting();
    //SDTesting();

    float yrot = 0;
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
    uint32_t lasttime = HAL_GetTick();
 80026b4:	f001 fb24 	bl	8003d00 <HAL_GetTick>
 80026b8:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
    uint32_t nowtime = HAL_GetTick();
 80026bc:	f001 fb20 	bl	8003d00 <HAL_GetTick>
 80026c0:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
    double dt = 0;
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	f04f 0400 	mov.w	r4, #0
 80026cc:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0

    uint16_t rawadc;

    Orientation ori;
    orientation_init(&ori);
 80026d0:	463b      	mov	r3, r7
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fdde 	bl	8003294 <orientation_init>
    uint32_t counter = 0;
 80026d8:	2300      	movs	r3, #0
 80026da:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //SPL06_Read(&baro);
        LSM_pollsensors(&imu);
 80026de:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fd30 	bl	8001148 <LSM_pollsensors>

        HAL_ADC_Start(&hadc1);
 80026e8:	4844      	ldr	r0, [pc, #272]	; (80027fc <main+0x22c>)
 80026ea:	f001 fb7b 	bl	8003de4 <HAL_ADC_Start>
        HAL_ADC_PollForConversion(&hadc1, 100);
 80026ee:	2164      	movs	r1, #100	; 0x64
 80026f0:	4842      	ldr	r0, [pc, #264]	; (80027fc <main+0x22c>)
 80026f2:	f001 fc3d 	bl	8003f70 <HAL_ADC_PollForConversion>
        rawadc = HAL_ADC_GetValue(&hadc1);
 80026f6:	4841      	ldr	r0, [pc, #260]	; (80027fc <main+0x22c>)
 80026f8:	f001 fcbe 	bl	8004078 <HAL_ADC_GetValue>
 80026fc:	4603      	mov	r3, r0
 80026fe:	f8a7 32ae 	strh.w	r3, [r7, #686]	; 0x2ae
        //sprintf(printBuffer, "gx: %f, gy: %f, gz: %f\r\n", imu.gyroRPS[0], imu.gyroRPS[1], imu.gyroRPS[2]);
        //sprintf(printBuffer, "y:%f,o:%f,g:%f,V:%d\r\n", yrot, imu.gyroDPSOffset[1],
        //        imu.gyroDPS[1], rawadc);
        //sprintf(printBuffer, "T:%f\r\n", (float) (25 + (((rawadc - 943) * 3.3 / 4096.0)) / 0.0025));

        changeLed(0, 100, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	2164      	movs	r1, #100	; 0x64
 8002706:	2000      	movs	r0, #0
 8002708:	f000 fc8e 	bl	8003028 <changeLed>
        nowtime = HAL_GetTick();
 800270c:	f001 faf8 	bl	8003d00 <HAL_GetTick>
 8002710:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
        dt = (nowtime - lasttime)/ 1000.0;
 8002714:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8002718:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff10 	bl	8000544 <__aeabi_ui2d>
 8002724:	f04f 0200 	mov.w	r2, #0
 8002728:	4b35      	ldr	r3, [pc, #212]	; (8002800 <main+0x230>)
 800272a:	f7fe f8af 	bl	800088c <__aeabi_ddiv>
 800272e:	4603      	mov	r3, r0
 8002730:	460c      	mov	r4, r1
 8002732:	e9c7 34ac 	strd	r3, r4, [r7, #688]	; 0x2b0
        lasttime = nowtime;
 8002736:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800273a:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc

        orientation_setGyro(&ori, imu.gyroRPS);
 800273e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002742:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8002746:	463b      	mov	r3, r7
 8002748:	4611      	mov	r1, r2
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fde4 	bl	8003318 <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8002750:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8002754:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8002758:	463b      	mov	r3, r7
 800275a:	4611      	mov	r1, r2
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fdf7 	bl	8003350 <orientation_setAcc>
        orientation_update(&ori, dt);
 8002762:	463b      	mov	r3, r7
 8002764:	ed97 0bac 	vldr	d0, [r7, #688]	; 0x2b0
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fe0d 	bl	8003388 <orientation_update>

        //sprintf(printBuffer, "z:%f,y:%f,x:%f\r\n", ori.eulerZYX[0], ori.eulerZYX[1], ori.eulerZYX[2]);
        if (counter % 30 == 0) {
 800276e:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8002772:	4b24      	ldr	r3, [pc, #144]	; (8002804 <main+0x234>)
 8002774:	fba3 2301 	umull	r2, r3, r3, r1
 8002778:	091a      	lsrs	r2, r3, #4
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	1aca      	subs	r2, r1, r3
 8002784:	2a00      	cmp	r2, #0
 8002786:	d125      	bne.n	80027d4 <main+0x204>
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.orientationQuat.w,ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.horQuat.w,ori.horQuat.v[0],ori.horQuat.v[1],ori.horQuat.v[2]);
 8002788:	463b      	mov	r3, r7
 800278a:	e9d3 8946 	ldrd	r8, r9, [r3, #280]	; 0x118
 800278e:	463b      	mov	r3, r7
 8002790:	e9d3 3448 	ldrd	r3, r4, [r3, #288]	; 0x120
 8002794:	463a      	mov	r2, r7
 8002796:	e9d2 124a 	ldrd	r1, r2, [r2, #296]	; 0x128
 800279a:	4638      	mov	r0, r7
 800279c:	e9d0 564c 	ldrd	r5, r6, [r0, #304]	; 0x130
 80027a0:	f507 700b 	add.w	r0, r7, #556	; 0x22c
 80027a4:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80027a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80027ac:	e9cd 3400 	strd	r3, r4, [sp]
 80027b0:	4642      	mov	r2, r8
 80027b2:	464b      	mov	r3, r9
 80027b4:	4914      	ldr	r1, [pc, #80]	; (8002808 <main+0x238>)
 80027b6:	f00b fe33 	bl	800e420 <siprintf>
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80027ba:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80027be:	4618      	mov	r0, r3
 80027c0:	f7fd fd26 	bl	8000210 <strlen>
 80027c4:	4603      	mov	r3, r0
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	f507 730b 	add.w	r3, r7, #556	; 0x22c
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f00a faa2 	bl	800cd18 <CDC_Transmit_FS>
        }
        counter++;
 80027d4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80027d8:	3301      	adds	r3, #1
 80027da:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8



        HAL_Delay(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f001 fa9a 	bl	8003d18 <HAL_Delay>
        LSM_pollsensors(&imu);
 80027e4:	e77b      	b.n	80026de <main+0x10e>
 80027e6:	bf00      	nop
 80027e8:	20000468 	.word	0x20000468
 80027ec:	200005a0 	.word	0x200005a0
 80027f0:	40020400 	.word	0x40020400
 80027f4:	20000410 	.word	0x20000410
 80027f8:	200003bc 	.word	0x200003bc
 80027fc:	20000500 	.word	0x20000500
 8002800:	408f4000 	.word	0x408f4000
 8002804:	88888889 	.word	0x88888889
 8002808:	08012078 	.word	0x08012078

0800280c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b0ac      	sub	sp, #176	; 0xb0
 8002810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002812:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002816:	2234      	movs	r2, #52	; 0x34
 8002818:	2100      	movs	r1, #0
 800281a:	4618      	mov	r0, r3
 800281c:	f00a ff93 	bl	800d746 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002820:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	225c      	movs	r2, #92	; 0x5c
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f00a ff84 	bl	800d746 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b3e      	ldr	r3, [pc, #248]	; (800293c <SystemClock_Config+0x130>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	4a3d      	ldr	r2, [pc, #244]	; (800293c <SystemClock_Config+0x130>)
 8002848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284c:	6413      	str	r3, [r2, #64]	; 0x40
 800284e:	4b3b      	ldr	r3, [pc, #236]	; (800293c <SystemClock_Config+0x130>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800285a:	2300      	movs	r3, #0
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <SystemClock_Config+0x134>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a37      	ldr	r2, [pc, #220]	; (8002940 <SystemClock_Config+0x134>)
 8002864:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <SystemClock_Config+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002872:	607b      	str	r3, [r7, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002876:	2301      	movs	r3, #1
 8002878:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800287a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800287e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002888:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800288c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002890:	2304      	movs	r3, #4
 8002892:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002896:	23b4      	movs	r3, #180	; 0xb4
 8002898:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800289c:	2302      	movs	r3, #2
 800289e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80028a2:	2308      	movs	r3, #8
 80028a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028a8:	2302      	movs	r3, #2
 80028aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80028b2:	4618      	mov	r0, r3
 80028b4:	f005 f87c 	bl	80079b0 <HAL_RCC_OscConfig>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80028be:	f000 fbd1 	bl	8003064 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80028c2:	f004 fa55 	bl	8006d70 <HAL_PWREx_EnableOverDrive>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028cc:	f000 fbca 	bl	8003064 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028d0:	230f      	movs	r3, #15
 80028d2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028d4:	2302      	movs	r3, #2
 80028d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028d8:	2300      	movs	r3, #0
 80028da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80028e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80028ec:	2105      	movs	r1, #5
 80028ee:	4618      	mov	r0, r3
 80028f0:	f004 fa8e 	bl	8006e10 <HAL_RCC_ClockConfig>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80028fa:	f000 fbb3 	bl	8003064 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80028fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002902:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8002904:	2304      	movs	r3, #4
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8002908:	2360      	movs	r3, #96	; 0x60
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800290c:	2302      	movs	r3, #2
 800290e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8002910:	2304      	movs	r3, #4
 8002912:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002914:	2301      	movs	r3, #1
 8002916:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8002918:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800291c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291e:	f107 030c 	add.w	r3, r7, #12
 8002922:	4618      	mov	r0, r3
 8002924:	f004 fb7a 	bl	800701c <HAL_RCCEx_PeriphCLKConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <SystemClock_Config+0x126>
  {
    Error_Handler();
 800292e:	f000 fb99 	bl	8003064 <Error_Handler>
  }
}
 8002932:	bf00      	nop
 8002934:	37b0      	adds	r7, #176	; 0xb0
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40007000 	.word	0x40007000

08002944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800294a:	463b      	mov	r3, r7
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002956:	4b21      	ldr	r3, [pc, #132]	; (80029dc <MX_ADC1_Init+0x98>)
 8002958:	4a21      	ldr	r2, [pc, #132]	; (80029e0 <MX_ADC1_Init+0x9c>)
 800295a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800295c:	4b1f      	ldr	r3, [pc, #124]	; (80029dc <MX_ADC1_Init+0x98>)
 800295e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002962:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <MX_ADC1_Init+0x98>)
 8002966:	2200      	movs	r2, #0
 8002968:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800296a:	4b1c      	ldr	r3, [pc, #112]	; (80029dc <MX_ADC1_Init+0x98>)
 800296c:	2200      	movs	r2, #0
 800296e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002970:	4b1a      	ldr	r3, [pc, #104]	; (80029dc <MX_ADC1_Init+0x98>)
 8002972:	2200      	movs	r2, #0
 8002974:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002976:	4b19      	ldr	r3, [pc, #100]	; (80029dc <MX_ADC1_Init+0x98>)
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800297e:	4b17      	ldr	r3, [pc, #92]	; (80029dc <MX_ADC1_Init+0x98>)
 8002980:	2200      	movs	r2, #0
 8002982:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002984:	4b15      	ldr	r3, [pc, #84]	; (80029dc <MX_ADC1_Init+0x98>)
 8002986:	4a17      	ldr	r2, [pc, #92]	; (80029e4 <MX_ADC1_Init+0xa0>)
 8002988:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800298a:	4b14      	ldr	r3, [pc, #80]	; (80029dc <MX_ADC1_Init+0x98>)
 800298c:	2200      	movs	r2, #0
 800298e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002990:	4b12      	ldr	r3, [pc, #72]	; (80029dc <MX_ADC1_Init+0x98>)
 8002992:	2201      	movs	r2, #1
 8002994:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MX_ADC1_Init+0x98>)
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800299e:	4b0f      	ldr	r3, [pc, #60]	; (80029dc <MX_ADC1_Init+0x98>)
 80029a0:	2201      	movs	r2, #1
 80029a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80029a4:	480d      	ldr	r0, [pc, #52]	; (80029dc <MX_ADC1_Init+0x98>)
 80029a6:	f001 f9d9 	bl	8003d5c <HAL_ADC_Init>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80029b0:	f000 fb58 	bl	8003064 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <MX_ADC1_Init+0xa4>)
 80029b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80029bc:	2300      	movs	r3, #0
 80029be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80029c0:	463b      	mov	r3, r7
 80029c2:	4619      	mov	r1, r3
 80029c4:	4805      	ldr	r0, [pc, #20]	; (80029dc <MX_ADC1_Init+0x98>)
 80029c6:	f001 fb65 	bl	8004094 <HAL_ADC_ConfigChannel>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d001      	beq.n	80029d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80029d0:	f000 fb48 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80029d4:	bf00      	nop
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20000500 	.word	0x20000500
 80029e0:	40012000 	.word	0x40012000
 80029e4:	0f000001 	.word	0x0f000001
 80029e8:	10000012 	.word	0x10000012

080029ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <MX_I2C3_Init+0x50>)
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <MX_I2C3_Init+0x54>)
 80029f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80029f6:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <MX_I2C3_Init+0x50>)
 80029f8:	4a12      	ldr	r2, [pc, #72]	; (8002a44 <MX_I2C3_Init+0x58>)
 80029fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80029fc:	4b0f      	ldr	r3, [pc, #60]	; (8002a3c <MX_I2C3_Init+0x50>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a08:	4b0c      	ldr	r3, [pc, #48]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a0e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002a16:	4b09      	ldr	r3, [pc, #36]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002a28:	4804      	ldr	r0, [pc, #16]	; (8002a3c <MX_I2C3_Init+0x50>)
 8002a2a:	f002 f81f 	bl	8004a6c <HAL_I2C_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002a34:	f000 fb16 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	200003bc 	.word	0x200003bc
 8002a40:	40005c00 	.word	0x40005c00
 8002a44:	000186a0 	.word	0x000186a0

08002a48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a4c:	4b17      	ldr	r3, [pc, #92]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a4e:	4a18      	ldr	r2, [pc, #96]	; (8002ab0 <MX_SPI1_Init+0x68>)
 8002a50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a52:	4b16      	ldr	r3, [pc, #88]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002a58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a66:	4b11      	ldr	r3, [pc, #68]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a6c:	4b0f      	ldr	r3, [pc, #60]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a72:	4b0e      	ldr	r3, [pc, #56]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a78:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a7c:	2238      	movs	r2, #56	; 0x38
 8002a7e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a8c:	4b07      	ldr	r3, [pc, #28]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a94:	220a      	movs	r2, #10
 8002a96:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a98:	4804      	ldr	r0, [pc, #16]	; (8002aac <MX_SPI1_Init+0x64>)
 8002a9a:	f005 f9e3 	bl	8007e64 <HAL_SPI_Init>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002aa4:	f000 fade 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002aa8:	bf00      	nop
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20000548 	.word	0x20000548
 8002ab0:	40013000 	.word	0x40013000

08002ab4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002ab8:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002aba:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <MX_SPI2_Init+0x68>)
 8002abc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ac0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ac4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ad8:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ade:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ae4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002ae8:	2210      	movs	r2, #16
 8002aea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002b00:	220a      	movs	r2, #10
 8002b02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_SPI2_Init+0x64>)
 8002b06:	f005 f9ad 	bl	8007e64 <HAL_SPI_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002b10:	f000 faa8 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000410 	.word	0x20000410
 8002b1c:	40003800 	.word	0x40003800

08002b20 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b26:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <MX_SPI3_Init+0x68>)
 8002b28:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b2c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b30:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b3e:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b44:	4b0f      	ldr	r3, [pc, #60]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002b4a:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b50:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002b52:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b54:	2210      	movs	r2, #16
 8002b56:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b5e:	4b09      	ldr	r3, [pc, #36]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b64:	4b07      	ldr	r3, [pc, #28]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002b6a:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b6c:	220a      	movs	r2, #10
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <MX_SPI3_Init+0x64>)
 8002b72:	f005 f977 	bl	8007e64 <HAL_SPI_Init>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002b7c:	f000 fa72 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b80:	bf00      	nop
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200004a8 	.word	0x200004a8
 8002b88:	40003c00 	.word	0x40003c00

08002b8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	; 0x28
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b92:	f107 0320 	add.w	r3, r7, #32
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b9c:	1d3b      	adds	r3, r7, #4
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	60da      	str	r2, [r3, #12]
 8002ba8:	611a      	str	r2, [r3, #16]
 8002baa:	615a      	str	r2, [r3, #20]
 8002bac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002bae:	4b28      	ldr	r3, [pc, #160]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bb0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bb4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002bb6:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bb8:	2259      	movs	r2, #89	; 0x59
 8002bba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002bc2:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bc4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002bc8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002bd6:	481e      	ldr	r0, [pc, #120]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bd8:	f005 fd63 	bl	80086a2 <HAL_TIM_PWM_Init>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002be2:	f000 fa3f 	bl	8003064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002be6:	2300      	movs	r3, #0
 8002be8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002bee:	f107 0320 	add.w	r3, r7, #32
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4816      	ldr	r0, [pc, #88]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002bf6:	f006 fa4b 	bl	8009090 <HAL_TIMEx_MasterConfigSynchronization>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002c00:	f000 fa30 	bl	8003064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c04:	2360      	movs	r3, #96	; 0x60
 8002c06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002c08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	2200      	movs	r2, #0
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	480c      	ldr	r0, [pc, #48]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002c1e:	f005 fda9 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002c28:	f000 fa1c 	bl	8003064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002c2c:	1d3b      	adds	r3, r7, #4
 8002c2e:	220c      	movs	r2, #12
 8002c30:	4619      	mov	r1, r3
 8002c32:	4807      	ldr	r0, [pc, #28]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002c34:	f005 fd9e 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002c3e:	f000 fa11 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002c42:	4803      	ldr	r0, [pc, #12]	; (8002c50 <MX_TIM2_Init+0xc4>)
 8002c44:	f000 fe3c 	bl	80038c0 <HAL_TIM_MspPostInit>

}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	; 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200005a0 	.word	0x200005a0

08002c54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08e      	sub	sp, #56	; 0x38
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002c5e:	2200      	movs	r2, #0
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	605a      	str	r2, [r3, #4]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c68:	f107 0320 	add.w	r3, r7, #32
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c72:	1d3b      	adds	r3, r7, #4
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
 8002c80:	615a      	str	r2, [r3, #20]
 8002c82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002c84:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002c86:	4a3f      	ldr	r2, [pc, #252]	; (8002d84 <MX_TIM3_Init+0x130>)
 8002c88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002c8a:	4b3d      	ldr	r3, [pc, #244]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002c8c:	2259      	movs	r2, #89	; 0x59
 8002c8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c90:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8002c96:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002c98:	22ff      	movs	r2, #255	; 0xff
 8002c9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c9c:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ca2:	4b37      	ldr	r3, [pc, #220]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002ca8:	4835      	ldr	r0, [pc, #212]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002caa:	f005 fccf 	bl	800864c <HAL_TIM_Base_Init>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002cb4:	f000 f9d6 	bl	8003064 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cbe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	482e      	ldr	r0, [pc, #184]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002cc6:	f005 fe1b 	bl	8008900 <HAL_TIM_ConfigClockSource>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002cd0:	f000 f9c8 	bl	8003064 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cd4:	482a      	ldr	r0, [pc, #168]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002cd6:	f005 fce4 	bl	80086a2 <HAL_TIM_PWM_Init>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002ce0:	f000 f9c0 	bl	8003064 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cec:	f107 0320 	add.w	r3, r7, #32
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4823      	ldr	r0, [pc, #140]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002cf4:	f006 f9cc 	bl	8009090 <HAL_TIMEx_MasterConfigSynchronization>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8002cfe:	f000 f9b1 	bl	8003064 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d02:	2360      	movs	r3, #96	; 0x60
 8002d04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d06:	2300      	movs	r3, #0
 8002d08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d12:	1d3b      	adds	r3, r7, #4
 8002d14:	2200      	movs	r2, #0
 8002d16:	4619      	mov	r1, r3
 8002d18:	4819      	ldr	r0, [pc, #100]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002d1a:	f005 fd2b 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002d24:	f000 f99e 	bl	8003064 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002d2c:	1d3b      	adds	r3, r7, #4
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4619      	mov	r1, r3
 8002d32:	4813      	ldr	r0, [pc, #76]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002d34:	f005 fd1e 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8002d3e:	f000 f991 	bl	8003064 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002d42:	2302      	movs	r3, #2
 8002d44:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	2208      	movs	r2, #8
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	480c      	ldr	r0, [pc, #48]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002d4e:	f005 fd11 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8002d58:	f000 f984 	bl	8003064 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	220c      	movs	r2, #12
 8002d60:	4619      	mov	r1, r3
 8002d62:	4807      	ldr	r0, [pc, #28]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002d64:	f005 fd06 	bl	8008774 <HAL_TIM_PWM_ConfigChannel>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8002d6e:	f000 f979 	bl	8003064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d72:	4803      	ldr	r0, [pc, #12]	; (8002d80 <MX_TIM3_Init+0x12c>)
 8002d74:	f000 fda4 	bl	80038c0 <HAL_TIM_MspPostInit>

}
 8002d78:	bf00      	nop
 8002d7a:	3738      	adds	r7, #56	; 0x38
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	20000468 	.word	0x20000468
 8002d84:	40000400 	.word	0x40000400

08002d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08a      	sub	sp, #40	; 0x28
 8002d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d8e:	f107 0314 	add.w	r3, r7, #20
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
 8002d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	4b5d      	ldr	r3, [pc, #372]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da6:	4a5c      	ldr	r2, [pc, #368]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002da8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dac:	6313      	str	r3, [r2, #48]	; 0x30
 8002dae:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a55      	ldr	r2, [pc, #340]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	4a4e      	ldr	r2, [pc, #312]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6313      	str	r3, [r2, #48]	; 0x30
 8002de6:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	4b48      	ldr	r3, [pc, #288]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfa:	4a47      	ldr	r2, [pc, #284]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002dfc:	f043 0302 	orr.w	r3, r3, #2
 8002e00:	6313      	str	r3, [r2, #48]	; 0x30
 8002e02:	4b45      	ldr	r3, [pc, #276]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	607b      	str	r3, [r7, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e0e:	2300      	movs	r3, #0
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	4b41      	ldr	r3, [pc, #260]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e16:	4a40      	ldr	r2, [pc, #256]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002e18:	f043 0308 	orr.w	r3, r3, #8
 8002e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	; (8002f18 <MX_GPIO_Init+0x190>)
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2110      	movs	r1, #16
 8002e2e:	483b      	ldr	r0, [pc, #236]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002e30:	f001 fe02 	bl	8004a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002e34:	2200      	movs	r2, #0
 8002e36:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e3a:	4839      	ldr	r0, [pc, #228]	; (8002f20 <MX_GPIO_Init+0x198>)
 8002e3c:	f001 fdfc 	bl	8004a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e46:	4837      	ldr	r0, [pc, #220]	; (8002f24 <MX_GPIO_Init+0x19c>)
 8002e48:	f001 fdf6 	bl	8004a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	2140      	movs	r1, #64	; 0x40
 8002e50:	4833      	ldr	r0, [pc, #204]	; (8002f20 <MX_GPIO_Init+0x198>)
 8002e52:	f001 fdf1 	bl	8004a38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002e56:	2310      	movs	r3, #16
 8002e58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e62:	2300      	movs	r3, #0
 8002e64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002e66:	f107 0314 	add.w	r3, r7, #20
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	482b      	ldr	r0, [pc, #172]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002e6e:	f001 fc51 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 8002e72:	2320      	movs	r3, #32
 8002e74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	4825      	ldr	r0, [pc, #148]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002e86:	f001 fc45 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 8002e8a:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9c:	f107 0314 	add.w	r3, r7, #20
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	481f      	ldr	r0, [pc, #124]	; (8002f20 <MX_GPIO_Init+0x198>)
 8002ea4:	f001 fc36 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8002ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8002eba:	f107 0314 	add.w	r3, r7, #20
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	4818      	ldr	r0, [pc, #96]	; (8002f24 <MX_GPIO_Init+0x19c>)
 8002ec2:	f001 fc27 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8002ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 8002ed4:	f107 0314 	add.w	r3, r7, #20
 8002ed8:	4619      	mov	r1, r3
 8002eda:	4810      	ldr	r0, [pc, #64]	; (8002f1c <MX_GPIO_Init+0x194>)
 8002edc:	f001 fc1a 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8002ee0:	2304      	movs	r3, #4
 8002ee2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002eec:	f107 0314 	add.w	r3, r7, #20
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	480d      	ldr	r0, [pc, #52]	; (8002f28 <MX_GPIO_Init+0x1a0>)
 8002ef4:	f001 fc0e 	bl	8004714 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8002ef8:	2310      	movs	r3, #16
 8002efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002efc:	2300      	movs	r3, #0
 8002efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002f04:	f107 0314 	add.w	r3, r7, #20
 8002f08:	4619      	mov	r1, r3
 8002f0a:	4805      	ldr	r0, [pc, #20]	; (8002f20 <MX_GPIO_Init+0x198>)
 8002f0c:	f001 fc02 	bl	8004714 <HAL_GPIO_Init>

}
 8002f10:	bf00      	nop
 8002f12:	3728      	adds	r7, #40	; 0x28
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	40020400 	.word	0x40020400
 8002f24:	40020000 	.word	0x40020000
 8002f28:	40020c00 	.word	0x40020c00
 8002f2c:	00000000 	.word	0x00000000

08002f30 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8002f30:	b590      	push	{r4, r7, lr}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	80bb      	strh	r3, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8002f42:	4b37      	ldr	r3, [pc, #220]	; (8003020 <playtone+0xf0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8002f4a:	4b35      	ldr	r3, [pc, #212]	; (8003020 <playtone+0xf0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8002f52:	4b33      	ldr	r3, [pc, #204]	; (8003020 <playtone+0xf0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7fd fb01 	bl	8000564 <__aeabi_i2d>
 8002f62:	4603      	mov	r3, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	461a      	mov	r2, r3
 8002f68:	4623      	mov	r3, r4
 8002f6a:	a12b      	add	r1, pc, #172	; (adr r1, 8003018 <playtone+0xe8>)
 8002f6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f70:	f7fd fc8c 	bl	800088c <__aeabi_ddiv>
 8002f74:	4603      	mov	r3, r0
 8002f76:	460c      	mov	r4, r1
 8002f78:	4618      	mov	r0, r3
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	f7fd fe34 	bl	8000be8 <__aeabi_d2uiz>
 8002f80:	4603      	mov	r3, r0
 8002f82:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8002f84:	4b26      	ldr	r3, [pc, #152]	; (8003020 <playtone+0xf0>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8002f8c:	4b24      	ldr	r3, [pc, #144]	; (8003020 <playtone+0xf0>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	fb02 f203 	mul.w	r2, r2, r3
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <playtone+0xf0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4920      	ldr	r1, [pc, #128]	; (8003024 <playtone+0xf4>)
 8002fa2:	fba1 1202 	umull	r1, r2, r1, r2
 8002fa6:	0992      	lsrs	r2, r2, #6
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8002faa:	8afb      	ldrh	r3, [r7, #22]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	fb02 f203 	mul.w	r2, r2, r3
 8002fb2:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <playtone+0xf0>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	0a12      	lsrs	r2, r2, #8
 8002fb8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8002fba:	8abb      	ldrh	r3, [r7, #20]
 8002fbc:	68fa      	ldr	r2, [r7, #12]
 8002fbe:	fb02 f203 	mul.w	r2, r2, r3
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <playtone+0xf0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	0a12      	lsrs	r2, r2, #8
 8002fc8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8002fca:	8a7b      	ldrh	r3, [r7, #18]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	fb02 f203 	mul.w	r2, r2, r3
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <playtone+0xf0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	0a12      	lsrs	r2, r2, #8
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 8002fda:	88bb      	ldrh	r3, [r7, #4]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fe9b 	bl	8003d18 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8002fe2:	4b0f      	ldr	r3, [pc, #60]	; (8003020 <playtone+0xf0>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8002fea:	4b0d      	ldr	r3, [pc, #52]	; (8003020 <playtone+0xf0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	22ff      	movs	r2, #255	; 0xff
 8002ff0:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <playtone+0xf0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	8afa      	ldrh	r2, [r7, #22]
 8002ff8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8002ffa:	4b09      	ldr	r3, [pc, #36]	; (8003020 <playtone+0xf0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	8aba      	ldrh	r2, [r7, #20]
 8003000:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <playtone+0xf0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	8a7a      	ldrh	r2, [r7, #18]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
}
 800300a:	bf00      	nop
 800300c:	371c      	adds	r7, #28
 800300e:	46bd      	mov	sp, r7
 8003010:	bd90      	pop	{r4, r7, pc}
 8003012:	bf00      	nop
 8003014:	f3af 8000 	nop.w
 8003018:	00000000 	.word	0x00000000
 800301c:	412e8480 	.word	0x412e8480
 8003020:	20000468 	.word	0x20000468
 8003024:	51eb851f 	.word	0x51eb851f

08003028 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	71fb      	strb	r3, [r7, #7]
 8003032:	460b      	mov	r3, r1
 8003034:	71bb      	strb	r3, [r7, #6]
 8003036:	4613      	mov	r3, r2
 8003038:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 800303a:	4b09      	ldr	r3, [pc, #36]	; (8003060 <changeLed+0x38>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	79fa      	ldrb	r2, [r7, #7]
 8003040:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8003042:	4b07      	ldr	r3, [pc, #28]	; (8003060 <changeLed+0x38>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	79ba      	ldrb	r2, [r7, #6]
 8003048:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 800304a:	4b05      	ldr	r3, [pc, #20]	; (8003060 <changeLed+0x38>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	797a      	ldrb	r2, [r7, #5]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000468 	.word	0x20000468

08003064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003068:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 800306a:	e7fe      	b.n	800306a <Error_Handler+0x6>

0800306c <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(double a[3], double b[3], double output[3]) {
 800306c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003070:	b085      	sub	sp, #20
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3308      	adds	r3, #8
 800307e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	3310      	adds	r3, #16
 8003086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800308a:	461a      	mov	r2, r3
 800308c:	4623      	mov	r3, r4
 800308e:	f7fd fad3 	bl	8000638 <__aeabi_dmul>
 8003092:	4603      	mov	r3, r0
 8003094:	460c      	mov	r4, r1
 8003096:	461d      	mov	r5, r3
 8003098:	4626      	mov	r6, r4
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3310      	adds	r3, #16
 800309e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	3308      	adds	r3, #8
 80030a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030aa:	461a      	mov	r2, r3
 80030ac:	4623      	mov	r3, r4
 80030ae:	f7fd fac3 	bl	8000638 <__aeabi_dmul>
 80030b2:	4603      	mov	r3, r0
 80030b4:	460c      	mov	r4, r1
 80030b6:	461a      	mov	r2, r3
 80030b8:	4623      	mov	r3, r4
 80030ba:	4628      	mov	r0, r5
 80030bc:	4631      	mov	r1, r6
 80030be:	f7fd f903 	bl	80002c8 <__aeabi_dsub>
 80030c2:	4603      	mov	r3, r0
 80030c4:	460c      	mov	r4, r1
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	e9c2 3400 	strd	r3, r4, [r2]
    output[1] = a[2] * b[0] - a[0]*b[2];
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3310      	adds	r3, #16
 80030d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030da:	461a      	mov	r2, r3
 80030dc:	4623      	mov	r3, r4
 80030de:	f7fd faab 	bl	8000638 <__aeabi_dmul>
 80030e2:	4603      	mov	r3, r0
 80030e4:	460c      	mov	r4, r1
 80030e6:	4698      	mov	r8, r3
 80030e8:	46a1      	mov	r9, r4
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	3310      	adds	r3, #16
 80030f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4623      	mov	r3, r4
 80030fc:	f7fd fa9c 	bl	8000638 <__aeabi_dmul>
 8003100:	4603      	mov	r3, r0
 8003102:	460c      	mov	r4, r1
 8003104:	4619      	mov	r1, r3
 8003106:	4622      	mov	r2, r4
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f103 0508 	add.w	r5, r3, #8
 800310e:	4613      	mov	r3, r2
 8003110:	460a      	mov	r2, r1
 8003112:	4640      	mov	r0, r8
 8003114:	4649      	mov	r1, r9
 8003116:	f7fd f8d7 	bl	80002c8 <__aeabi_dsub>
 800311a:	4603      	mov	r3, r0
 800311c:	460c      	mov	r4, r1
 800311e:	e9c5 3400 	strd	r3, r4, [r5]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	3308      	adds	r3, #8
 800312c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003130:	461a      	mov	r2, r3
 8003132:	4623      	mov	r3, r4
 8003134:	f7fd fa80 	bl	8000638 <__aeabi_dmul>
 8003138:	4603      	mov	r3, r0
 800313a:	460c      	mov	r4, r1
 800313c:	4698      	mov	r8, r3
 800313e:	46a1      	mov	r9, r4
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	3308      	adds	r3, #8
 8003144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800314e:	461a      	mov	r2, r3
 8003150:	4623      	mov	r3, r4
 8003152:	f7fd fa71 	bl	8000638 <__aeabi_dmul>
 8003156:	4603      	mov	r3, r0
 8003158:	460c      	mov	r4, r1
 800315a:	4619      	mov	r1, r3
 800315c:	4622      	mov	r2, r4
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f103 0510 	add.w	r5, r3, #16
 8003164:	4613      	mov	r3, r2
 8003166:	460a      	mov	r2, r1
 8003168:	4640      	mov	r0, r8
 800316a:	4649      	mov	r1, r9
 800316c:	f7fd f8ac 	bl	80002c8 <__aeabi_dsub>
 8003170:	4603      	mov	r3, r0
 8003172:	460c      	mov	r4, r1
 8003174:	e9c5 3400 	strd	r3, r4, [r5]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003182 <vector_sum>:

void vector_sum(double a[3], double b[3], double output[3]) {
 8003182:	b5b0      	push	{r4, r5, r7, lr}
 8003184:	b084      	sub	sp, #16
 8003186:	af00      	add	r7, sp, #0
 8003188:	60f8      	str	r0, [r7, #12]
 800318a:	60b9      	str	r1, [r7, #8]
 800318c:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	e9d3 3400 	ldrd	r3, r4, [r3]
 800319a:	461a      	mov	r2, r3
 800319c:	4623      	mov	r3, r4
 800319e:	f7fd f895 	bl	80002cc <__adddf3>
 80031a2:	4603      	mov	r3, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	e9c2 3400 	strd	r3, r4, [r2]
    output[1] = a[1] + b[1];
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	3308      	adds	r3, #8
 80031b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	3308      	adds	r3, #8
 80031b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	f102 0508 	add.w	r5, r2, #8
 80031c2:	461a      	mov	r2, r3
 80031c4:	4623      	mov	r3, r4
 80031c6:	f7fd f881 	bl	80002cc <__adddf3>
 80031ca:	4603      	mov	r3, r0
 80031cc:	460c      	mov	r4, r1
 80031ce:	e9c5 3400 	strd	r3, r4, [r5]
    output[2] = a[2] + b[2];
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	3310      	adds	r3, #16
 80031de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	f102 0510 	add.w	r5, r2, #16
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	f7fd f86e 	bl	80002cc <__adddf3>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	e9c5 3400 	strd	r3, r4, [r5]
}
 80031f8:	bf00      	nop
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bdb0      	pop	{r4, r5, r7, pc}

08003200 <vector_lenSquared>:

double vector_lenSquared(double a[3]) {
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003214:	461a      	mov	r2, r3
 8003216:	4623      	mov	r3, r4
 8003218:	f7fd fa0e 	bl	8000638 <__aeabi_dmul>
 800321c:	4603      	mov	r3, r0
 800321e:	460c      	mov	r4, r1
 8003220:	461d      	mov	r5, r3
 8003222:	4626      	mov	r6, r4
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3308      	adds	r3, #8
 8003228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3308      	adds	r3, #8
 8003230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003234:	461a      	mov	r2, r3
 8003236:	4623      	mov	r3, r4
 8003238:	f7fd f9fe 	bl	8000638 <__aeabi_dmul>
 800323c:	4603      	mov	r3, r0
 800323e:	460c      	mov	r4, r1
 8003240:	461a      	mov	r2, r3
 8003242:	4623      	mov	r3, r4
 8003244:	4628      	mov	r0, r5
 8003246:	4631      	mov	r1, r6
 8003248:	f7fd f840 	bl	80002cc <__adddf3>
 800324c:	4603      	mov	r3, r0
 800324e:	460c      	mov	r4, r1
 8003250:	461d      	mov	r5, r3
 8003252:	4626      	mov	r6, r4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3310      	adds	r3, #16
 8003258:	e9d3 0100 	ldrd	r0, r1, [r3]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3310      	adds	r3, #16
 8003260:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003264:	461a      	mov	r2, r3
 8003266:	4623      	mov	r3, r4
 8003268:	f7fd f9e6 	bl	8000638 <__aeabi_dmul>
 800326c:	4603      	mov	r3, r0
 800326e:	460c      	mov	r4, r1
 8003270:	461a      	mov	r2, r3
 8003272:	4623      	mov	r3, r4
 8003274:	4628      	mov	r0, r5
 8003276:	4631      	mov	r1, r6
 8003278:	f7fd f828 	bl	80002cc <__adddf3>
 800327c:	4603      	mov	r3, r0
 800327e:	460c      	mov	r4, r1
 8003280:	ec44 3b17 	vmov	d7, r3, r4
}
 8003284:	eeb0 0a47 	vmov.f32	s0, s14
 8003288:	eef0 0a67 	vmov.f32	s1, s15
 800328c:	370c      	adds	r7, #12
 800328e:	46bd      	mov	sp, r7
 8003290:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003294 <orientation_init>:

void orientation_init(Orientation *ori) {
 8003294:	b590      	push	{r4, r7, lr}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fe fa96 	bl	80017d0 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	33e0      	adds	r3, #224	; 0xe0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe fa91 	bl	80017d0 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	33c0      	adds	r3, #192	; 0xc0
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fe fa8c 	bl	80017d0 <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	f04f 0400 	mov.w	r4, #0
 80032c2:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
    ori->vertical[1] = 0;
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	f04f 0400 	mov.w	r4, #0
 80032d0:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
    ori->vertical[2] = 1;
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	f04f 0300 	mov.w	r3, #0
 80032da:	4c0e      	ldr	r4, [pc, #56]	; (8003314 <orientation_init+0x80>)
 80032dc:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8

    ori->gyroVec[0] = 0;
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	f04f 0400 	mov.w	r4, #0
 80032ea:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
    ori->gyroVec[1] = 0;
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	f04f 0300 	mov.w	r3, #0
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    ori->gyroVec[2] = 0;
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	f04f 0300 	mov.w	r3, #0
 8003302:	f04f 0400 	mov.w	r4, #0
 8003306:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
}
 800330a:	bf00      	nop
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}
 8003312:	bf00      	nop
 8003314:	3ff00000 	.word	0x3ff00000

08003318 <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, double gyro[3]) {
 8003318:	b490      	push	{r4, r7}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[0];
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
    ori->gyroVec[1] = gyro[1];
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
    ori->gyroVec[2] = gyro[2];
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
}
 8003346:	bf00      	nop
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bc90      	pop	{r4, r7}
 800334e:	4770      	bx	lr

08003350 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, double acc[3]) {
 8003350:	b490      	push	{r4, r7}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[0];
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
    ori->accBodyVec[1] = acc[1];
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
    ori->accBodyVec[2] = acc[2];
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	e9d3 3404 	ldrd	r3, r4, [r3, #16]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	e9c2 3422 	strd	r3, r4, [r2, #136]	; 0x88
}
 800337e:	bf00      	nop
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bc90      	pop	{r4, r7}
 8003386:	4770      	bx	lr

08003388 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, double dt) {
 8003388:	b590      	push	{r4, r7, lr}
 800338a:	b09b      	sub	sp, #108	; 0x6c
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	ed87 0b00 	vstr	d0, [r7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	3390      	adds	r3, #144	; 0x90
 80033a0:	461a      	mov	r2, r3
 80033a2:	f7fe fd4d 	bl	8001e40 <Quaternion_rotate>
    double correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f103 0090 	add.w	r0, r3, #144	; 0x90
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	33a8      	adds	r3, #168	; 0xa8
 80033b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80033b4:	4619      	mov	r1, r3
 80033b6:	f7ff fe59 	bl	800306c <cross_product>

    double correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3320      	adds	r3, #32
 80033c0:	4619      	mov	r1, r3
 80033c2:	4610      	mov	r0, r2
 80033c4:	f7fe fb9c 	bl	8001b00 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3320      	adds	r3, #32
 80033cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80033d0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe fd33 	bl	8001e40 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 80033da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80033de:	a33a      	add	r3, pc, #232	; (adr r3, 80034c8 <orientation_update+0x140>)
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f7fd f928 	bl	8000638 <__aeabi_dmul>
 80033e8:	4603      	mov	r3, r0
 80033ea:	460c      	mov	r4, r1
 80033ec:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    correctionBody[1] = correctionBody[1] * 0.1;
 80033f0:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80033f4:	a334      	add	r3, pc, #208	; (adr r3, 80034c8 <orientation_update+0x140>)
 80033f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fa:	f7fd f91d 	bl	8000638 <__aeabi_dmul>
 80033fe:	4603      	mov	r3, r0
 8003400:	460c      	mov	r4, r1
 8003402:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    correctionBody[2] = correctionBody[2] * 0.1;
 8003406:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800340a:	a32f      	add	r3, pc, #188	; (adr r3, 80034c8 <orientation_update+0x140>)
 800340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003410:	f7fd f912 	bl	8000638 <__aeabi_dmul>
 8003414:	4603      	mov	r3, r0
 8003416:	460c      	mov	r4, r1
 8003418:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

    double GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	3378      	adds	r3, #120	; 0x78
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff feed 	bl	8003200 <vector_lenSquared>
 8003426:	ec51 0b10 	vmov	r0, r1, d0
 800342a:	a329      	add	r3, pc, #164	; (adr r3, 80034d0 <orientation_update+0x148>)
 800342c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003430:	f7fd fa2c 	bl	800088c <__aeabi_ddiv>
 8003434:	4603      	mov	r3, r0
 8003436:	460c      	mov	r4, r1
 8003438:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
    if (GsSquared > 0.81 && GsSquared < 1.21) {
 800343c:	a326      	add	r3, pc, #152	; (adr r3, 80034d8 <orientation_update+0x150>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003446:	f7fd fb87 	bl	8000b58 <__aeabi_dcmpgt>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d014      	beq.n	800347a <orientation_update+0xf2>
 8003450:	a323      	add	r3, pc, #140	; (adr r3, 80034e0 <orientation_update+0x158>)
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800345a:	f7fd fb5f 	bl	8000b1c <__aeabi_dcmplt>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <orientation_update+0xf2>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003470:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003474:	4619      	mov	r1, r3
 8003476:	f7ff fe84 	bl	8003182 <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	3340      	adds	r3, #64	; 0x40
 8003484:	4619      	mov	r1, r3
 8003486:	ed97 0b00 	vldr	d0, [r7]
 800348a:	4610      	mov	r0, r2
 800348c:	f7fe ffb4 	bl	80023f8 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	3340      	adds	r3, #64	; 0x40
 8003496:	f107 0210 	add.w	r2, r7, #16
 800349a:	4619      	mov	r1, r3
 800349c:	f7fe fb6c 	bl	8001b78 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	f107 0310 	add.w	r3, r7, #16
 80034a6:	4611      	mov	r1, r2
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fe f9bb 	bl	8001824 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80034b6:	4619      	mov	r1, r3
 80034b8:	4610      	mov	r0, r2
 80034ba:	f7fe f9dd 	bl	8001878 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 80034be:	bf00      	nop
 80034c0:	376c      	adds	r7, #108	; 0x6c
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd90      	pop	{r4, r7, pc}
 80034c6:	bf00      	nop
 80034c8:	9999999a 	.word	0x9999999a
 80034cc:	3fb99999 	.word	0x3fb99999
 80034d0:	9339d914 	.word	0x9339d914
 80034d4:	40580ae7 	.word	0x40580ae7
 80034d8:	1eb851ec 	.word	0x1eb851ec
 80034dc:	3fe9eb85 	.word	0x3fe9eb85
 80034e0:	f5c28f5c 	.word	0xf5c28f5c
 80034e4:	3ff35c28 	.word	0x3ff35c28

080034e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ee:	2300      	movs	r3, #0
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	4b10      	ldr	r3, [pc, #64]	; (8003534 <HAL_MspInit+0x4c>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f6:	4a0f      	ldr	r2, [pc, #60]	; (8003534 <HAL_MspInit+0x4c>)
 80034f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fc:	6453      	str	r3, [r2, #68]	; 0x44
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_MspInit+0x4c>)
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003506:	607b      	str	r3, [r7, #4]
 8003508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	603b      	str	r3, [r7, #0]
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_MspInit+0x4c>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_MspInit+0x4c>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_MspInit+0x4c>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	40023800 	.word	0x40023800

08003538 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
 800354e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a17      	ldr	r2, [pc, #92]	; (80035b4 <HAL_ADC_MspInit+0x7c>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d127      	bne.n	80035aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
 800355e:	4b16      	ldr	r3, [pc, #88]	; (80035b8 <HAL_ADC_MspInit+0x80>)
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	4a15      	ldr	r2, [pc, #84]	; (80035b8 <HAL_ADC_MspInit+0x80>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6453      	str	r3, [r2, #68]	; 0x44
 800356a:	4b13      	ldr	r3, [pc, #76]	; (80035b8 <HAL_ADC_MspInit+0x80>)
 800356c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	4b0f      	ldr	r3, [pc, #60]	; (80035b8 <HAL_ADC_MspInit+0x80>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	4a0e      	ldr	r2, [pc, #56]	; (80035b8 <HAL_ADC_MspInit+0x80>)
 8003580:	f043 0304 	orr.w	r3, r3, #4
 8003584:	6313      	str	r3, [r2, #48]	; 0x30
 8003586:	4b0c      	ldr	r3, [pc, #48]	; (80035b8 <HAL_ADC_MspInit+0x80>)
 8003588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8003592:	2304      	movs	r3, #4
 8003594:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003596:	2303      	movs	r3, #3
 8003598:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359a:	2300      	movs	r3, #0
 800359c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 800359e:	f107 0314 	add.w	r3, r7, #20
 80035a2:	4619      	mov	r1, r3
 80035a4:	4805      	ldr	r0, [pc, #20]	; (80035bc <HAL_ADC_MspInit+0x84>)
 80035a6:	f001 f8b5 	bl	8004714 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80035aa:	bf00      	nop
 80035ac:	3728      	adds	r7, #40	; 0x28
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40012000 	.word	0x40012000
 80035b8:	40023800 	.word	0x40023800
 80035bc:	40020800 	.word	0x40020800

080035c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b08a      	sub	sp, #40	; 0x28
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c8:	f107 0314 	add.w	r3, r7, #20
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]
 80035d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a29      	ldr	r2, [pc, #164]	; (8003684 <HAL_I2C_MspInit+0xc4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d14b      	bne.n	800367a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]
 80035e6:	4b28      	ldr	r3, [pc, #160]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a27      	ldr	r2, [pc, #156]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 80035ec:	f043 0304 	orr.w	r3, r3, #4
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a20      	ldr	r2, [pc, #128]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b1e      	ldr	r3, [pc, #120]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800361a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800361e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003620:	2312      	movs	r3, #18
 8003622:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003624:	2301      	movs	r3, #1
 8003626:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003628:	2303      	movs	r3, #3
 800362a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800362c:	2304      	movs	r3, #4
 800362e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	4619      	mov	r1, r3
 8003636:	4815      	ldr	r0, [pc, #84]	; (800368c <HAL_I2C_MspInit+0xcc>)
 8003638:	f001 f86c 	bl	8004714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800363c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003640:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003642:	2312      	movs	r3, #18
 8003644:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003646:	2301      	movs	r3, #1
 8003648:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800364a:	2303      	movs	r3, #3
 800364c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800364e:	2304      	movs	r3, #4
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003652:	f107 0314 	add.w	r3, r7, #20
 8003656:	4619      	mov	r1, r3
 8003658:	480d      	ldr	r0, [pc, #52]	; (8003690 <HAL_I2C_MspInit+0xd0>)
 800365a:	f001 f85b 	bl	8004714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	60bb      	str	r3, [r7, #8]
 8003662:	4b09      	ldr	r3, [pc, #36]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003666:	4a08      	ldr	r2, [pc, #32]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 8003668:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800366c:	6413      	str	r3, [r2, #64]	; 0x40
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_I2C_MspInit+0xc8>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40005c00 	.word	0x40005c00
 8003688:	40023800 	.word	0x40023800
 800368c:	40020800 	.word	0x40020800
 8003690:	40020000 	.word	0x40020000

08003694 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800369c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a5b      	ldr	r2, [pc, #364]	; (8003820 <HAL_SPI_MspInit+0x18c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d12c      	bne.n	8003710 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036b6:	2300      	movs	r3, #0
 80036b8:	623b      	str	r3, [r7, #32]
 80036ba:	4b5a      	ldr	r3, [pc, #360]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80036bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036be:	4a59      	ldr	r2, [pc, #356]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80036c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036c4:	6453      	str	r3, [r2, #68]	; 0x44
 80036c6:	4b57      	ldr	r3, [pc, #348]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80036c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036ce:	623b      	str	r3, [r7, #32]
 80036d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d2:	2300      	movs	r3, #0
 80036d4:	61fb      	str	r3, [r7, #28]
 80036d6:	4b53      	ldr	r3, [pc, #332]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	4a52      	ldr	r2, [pc, #328]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80036dc:	f043 0301 	orr.w	r3, r3, #1
 80036e0:	6313      	str	r3, [r2, #48]	; 0x30
 80036e2:	4b50      	ldr	r3, [pc, #320]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036ee:	23e0      	movs	r3, #224	; 0xe0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f2:	2302      	movs	r3, #2
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fa:	2303      	movs	r3, #3
 80036fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036fe:	2305      	movs	r3, #5
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003706:	4619      	mov	r1, r3
 8003708:	4847      	ldr	r0, [pc, #284]	; (8003828 <HAL_SPI_MspInit+0x194>)
 800370a:	f001 f803 	bl	8004714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800370e:	e082      	b.n	8003816 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a45      	ldr	r2, [pc, #276]	; (800382c <HAL_SPI_MspInit+0x198>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12d      	bne.n	8003776 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	61bb      	str	r3, [r7, #24]
 800371e:	4b41      	ldr	r3, [pc, #260]	; (8003824 <HAL_SPI_MspInit+0x190>)
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	4a40      	ldr	r2, [pc, #256]	; (8003824 <HAL_SPI_MspInit+0x190>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003728:	6413      	str	r3, [r2, #64]	; 0x40
 800372a:	4b3e      	ldr	r3, [pc, #248]	; (8003824 <HAL_SPI_MspInit+0x190>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	61bb      	str	r3, [r7, #24]
 8003734:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <HAL_SPI_MspInit+0x190>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a39      	ldr	r2, [pc, #228]	; (8003824 <HAL_SPI_MspInit+0x190>)
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_SPI_MspInit+0x190>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003752:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003760:	2303      	movs	r3, #3
 8003762:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003764:	2305      	movs	r3, #5
 8003766:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800376c:	4619      	mov	r1, r3
 800376e:	4830      	ldr	r0, [pc, #192]	; (8003830 <HAL_SPI_MspInit+0x19c>)
 8003770:	f000 ffd0 	bl	8004714 <HAL_GPIO_Init>
}
 8003774:	e04f      	b.n	8003816 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a2e      	ldr	r2, [pc, #184]	; (8003834 <HAL_SPI_MspInit+0x1a0>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d14a      	bne.n	8003816 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003780:	2300      	movs	r3, #0
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	4b27      	ldr	r3, [pc, #156]	; (8003824 <HAL_SPI_MspInit+0x190>)
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	4a26      	ldr	r2, [pc, #152]	; (8003824 <HAL_SPI_MspInit+0x190>)
 800378a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800378e:	6413      	str	r3, [r2, #64]	; 0x40
 8003790:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_SPI_MspInit+0x190>)
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003798:	613b      	str	r3, [r7, #16]
 800379a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80037a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a4:	4a1f      	ldr	r2, [pc, #124]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80037a6:	f043 0304 	orr.w	r3, r3, #4
 80037aa:	6313      	str	r3, [r2, #48]	; 0x30
 80037ac:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
 80037b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b8:	2300      	movs	r3, #0
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	4b19      	ldr	r3, [pc, #100]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80037c2:	f043 0302 	orr.w	r3, r3, #2
 80037c6:	6313      	str	r3, [r2, #48]	; 0x30
 80037c8:	4b16      	ldr	r3, [pc, #88]	; (8003824 <HAL_SPI_MspInit+0x190>)
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	60bb      	str	r3, [r7, #8]
 80037d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037da:	2302      	movs	r3, #2
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037e2:	2303      	movs	r3, #3
 80037e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037e6:	2306      	movs	r3, #6
 80037e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037ee:	4619      	mov	r1, r3
 80037f0:	4811      	ldr	r0, [pc, #68]	; (8003838 <HAL_SPI_MspInit+0x1a4>)
 80037f2:	f000 ff8f 	bl	8004714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80037f6:	2320      	movs	r3, #32
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037fa:	2302      	movs	r3, #2
 80037fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003802:	2303      	movs	r3, #3
 8003804:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003806:	2306      	movs	r3, #6
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800380a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800380e:	4619      	mov	r1, r3
 8003810:	4807      	ldr	r0, [pc, #28]	; (8003830 <HAL_SPI_MspInit+0x19c>)
 8003812:	f000 ff7f 	bl	8004714 <HAL_GPIO_Init>
}
 8003816:	bf00      	nop
 8003818:	3738      	adds	r7, #56	; 0x38
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	40013000 	.word	0x40013000
 8003824:	40023800 	.word	0x40023800
 8003828:	40020000 	.word	0x40020000
 800382c:	40003800 	.word	0x40003800
 8003830:	40020400 	.word	0x40020400
 8003834:	40003c00 	.word	0x40003c00
 8003838:	40020800 	.word	0x40020800

0800383c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800384c:	d10d      	bne.n	800386a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <HAL_TIM_PWM_MspInit+0x3c>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a08      	ldr	r2, [pc, #32]	; (8003878 <HAL_TIM_PWM_MspInit+0x3c>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_TIM_PWM_MspInit+0x3c>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	60fb      	str	r3, [r7, #12]
 8003868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40023800 	.word	0x40023800

0800387c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a0b      	ldr	r2, [pc, #44]	; (80038b8 <HAL_TIM_Base_MspInit+0x3c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d10d      	bne.n	80038aa <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b0a      	ldr	r3, [pc, #40]	; (80038bc <HAL_TIM_Base_MspInit+0x40>)
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <HAL_TIM_Base_MspInit+0x40>)
 8003898:	f043 0302 	orr.w	r3, r3, #2
 800389c:	6413      	str	r3, [r2, #64]	; 0x40
 800389e:	4b07      	ldr	r3, [pc, #28]	; (80038bc <HAL_TIM_Base_MspInit+0x40>)
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	40000400 	.word	0x40000400
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08a      	sub	sp, #40	; 0x28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
 80038d2:	609a      	str	r2, [r3, #8]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e0:	d11e      	bne.n	8003920 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e2:	2300      	movs	r3, #0
 80038e4:	613b      	str	r3, [r7, #16]
 80038e6:	4b31      	ldr	r3, [pc, #196]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	4a30      	ldr	r2, [pc, #192]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6313      	str	r3, [r2, #48]	; 0x30
 80038f2:	4b2e      	ldr	r3, [pc, #184]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	613b      	str	r3, [r7, #16]
 80038fc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80038fe:	2309      	movs	r3, #9
 8003900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003902:	2302      	movs	r3, #2
 8003904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003906:	2300      	movs	r3, #0
 8003908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390a:	2300      	movs	r3, #0
 800390c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800390e:	2301      	movs	r3, #1
 8003910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003912:	f107 0314 	add.w	r3, r7, #20
 8003916:	4619      	mov	r1, r3
 8003918:	4825      	ldr	r0, [pc, #148]	; (80039b0 <HAL_TIM_MspPostInit+0xf0>)
 800391a:	f000 fefb 	bl	8004714 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800391e:	e041      	b.n	80039a4 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a23      	ldr	r2, [pc, #140]	; (80039b4 <HAL_TIM_MspPostInit+0xf4>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d13c      	bne.n	80039a4 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a1e      	ldr	r2, [pc, #120]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 8003934:	f043 0302 	orr.w	r3, r3, #2
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b18      	ldr	r3, [pc, #96]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 8003950:	f043 0304 	orr.w	r3, r3, #4
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b15      	ldr	r3, [pc, #84]	; (80039ac <HAL_TIM_MspPostInit+0xec>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003962:	2302      	movs	r3, #2
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003966:	2302      	movs	r3, #2
 8003968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396e:	2300      	movs	r3, #0
 8003970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003972:	2302      	movs	r3, #2
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003976:	f107 0314 	add.w	r3, r7, #20
 800397a:	4619      	mov	r1, r3
 800397c:	480e      	ldr	r0, [pc, #56]	; (80039b8 <HAL_TIM_MspPostInit+0xf8>)
 800397e:	f000 fec9 	bl	8004714 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003982:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003988:	2302      	movs	r3, #2
 800398a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003990:	2300      	movs	r3, #0
 8003992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003994:	2302      	movs	r3, #2
 8003996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	4619      	mov	r1, r3
 800399e:	4807      	ldr	r0, [pc, #28]	; (80039bc <HAL_TIM_MspPostInit+0xfc>)
 80039a0:	f000 feb8 	bl	8004714 <HAL_GPIO_Init>
}
 80039a4:	bf00      	nop
 80039a6:	3728      	adds	r7, #40	; 0x28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	40023800 	.word	0x40023800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40000400 	.word	0x40000400
 80039b8:	40020400 	.word	0x40020400
 80039bc:	40020800 	.word	0x40020800

080039c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <NMI_Handler+0x4>

080039c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <HardFault_Handler+0x4>

080039cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <MemManage_Handler+0x4>

080039d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039d6:	e7fe      	b.n	80039d6 <BusFault_Handler+0x4>

080039d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039dc:	e7fe      	b.n	80039dc <UsageFault_Handler+0x4>

080039de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039de:	b480      	push	{r7}
 80039e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039e2:	bf00      	nop
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a0c:	f000 f964 	bl	8003cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a10:	bf00      	nop
 8003a12:	bd80      	pop	{r7, pc}

08003a14 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a18:	4802      	ldr	r0, [pc, #8]	; (8003a24 <OTG_FS_IRQHandler+0x10>)
 8003a1a:	f002 f931 	bl	8005c80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a1e:	bf00      	nop
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	20001f24 	.word	0x20001f24

08003a28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	af00      	add	r7, sp, #0
	return 1;
 8003a2c:	2301      	movs	r3, #1
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <_kill>:

int _kill(int pid, int sig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b082      	sub	sp, #8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003a42:	f009 fe29 	bl	800d698 <__errno>
 8003a46:	4602      	mov	r2, r0
 8003a48:	2316      	movs	r3, #22
 8003a4a:	6013      	str	r3, [r2, #0]
	return -1;
 8003a4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <_exit>:

void _exit (int status)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f7ff ffe7 	bl	8003a38 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003a6a:	e7fe      	b.n	8003a6a <_exit+0x12>

08003a6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e00a      	b.n	8003a94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003a7e:	f3af 8000 	nop.w
 8003a82:	4601      	mov	r1, r0
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	1c5a      	adds	r2, r3, #1
 8003a88:	60ba      	str	r2, [r7, #8]
 8003a8a:	b2ca      	uxtb	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	dbf0      	blt.n	8003a7e <_read+0x12>
	}

return len;
 8003a9c:	687b      	ldr	r3, [r7, #4]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	60f8      	str	r0, [r7, #12]
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	617b      	str	r3, [r7, #20]
 8003ab6:	e009      	b.n	8003acc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	60ba      	str	r2, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	dbf1      	blt.n	8003ab8 <_write+0x12>
	}
	return len;
 8003ad4:	687b      	ldr	r3, [r7, #4]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_close>:

int _close(int file)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
	return -1;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003af6:	b480      	push	{r7}
 8003af8:	b083      	sub	sp, #12
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b06:	605a      	str	r2, [r3, #4]
	return 0;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <_isatty>:

int _isatty(int file)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
	return 1;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
	return 0;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b44:	4770      	bx	lr
	...

08003b48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b50:	4a14      	ldr	r2, [pc, #80]	; (8003ba4 <_sbrk+0x5c>)
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <_sbrk+0x60>)
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <_sbrk+0x64>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d102      	bne.n	8003b6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <_sbrk+0x64>)
 8003b66:	4a12      	ldr	r2, [pc, #72]	; (8003bb0 <_sbrk+0x68>)
 8003b68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <_sbrk+0x64>)
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4413      	add	r3, r2
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d207      	bcs.n	8003b88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b78:	f009 fd8e 	bl	800d698 <__errno>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	230c      	movs	r3, #12
 8003b80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	e009      	b.n	8003b9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b88:	4b08      	ldr	r3, [pc, #32]	; (8003bac <_sbrk+0x64>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003b8e:	4b07      	ldr	r3, [pc, #28]	; (8003bac <_sbrk+0x64>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4413      	add	r3, r2
 8003b96:	4a05      	ldr	r2, [pc, #20]	; (8003bac <_sbrk+0x64>)
 8003b98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	20020000 	.word	0x20020000
 8003ba8:	00000400 	.word	0x00000400
 8003bac:	200003a0 	.word	0x200003a0
 8003bb0:	20002330 	.word	0x20002330

08003bb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bb8:	4b08      	ldr	r3, [pc, #32]	; (8003bdc <SystemInit+0x28>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	4a07      	ldr	r2, [pc, #28]	; (8003bdc <SystemInit+0x28>)
 8003bc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bc8:	4b04      	ldr	r3, [pc, #16]	; (8003bdc <SystemInit+0x28>)
 8003bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bce:	609a      	str	r2, [r3, #8]
#endif
}
 8003bd0:	bf00      	nop
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	e000ed00 	.word	0xe000ed00

08003be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c18 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003be4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003be6:	e003      	b.n	8003bf0 <LoopCopyDataInit>

08003be8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003be8:	4b0c      	ldr	r3, [pc, #48]	; (8003c1c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003bea:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003bec:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003bee:	3104      	adds	r1, #4

08003bf0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003bf0:	480b      	ldr	r0, [pc, #44]	; (8003c20 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003bf2:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003bf4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003bf6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003bf8:	d3f6      	bcc.n	8003be8 <CopyDataInit>
  ldr  r2, =_sbss
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	; (8003c28 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003bfc:	e002      	b.n	8003c04 <LoopFillZerobss>

08003bfe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003bfe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003c00:	f842 3b04 	str.w	r3, [r2], #4

08003c04 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003c06:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003c08:	d3f9      	bcc.n	8003bfe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c0a:	f7ff ffd3 	bl	8003bb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c0e:	f009 fd5b 	bl	800d6c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c12:	f7fe fcdd 	bl	80025d0 <main>
  bx  lr    
 8003c16:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003c18:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003c1c:	08012938 	.word	0x08012938
  ldr  r0, =_sdata
 8003c20:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003c24:	20000384 	.word	0x20000384
  ldr  r2, =_sbss
 8003c28:	20000384 	.word	0x20000384
  ldr  r3, = _ebss
 8003c2c:	20002330 	.word	0x20002330

08003c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c30:	e7fe      	b.n	8003c30 <ADC_IRQHandler>
	...

08003c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c38:	4b0e      	ldr	r3, [pc, #56]	; (8003c74 <HAL_Init+0x40>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <HAL_Init+0x40>)
 8003c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c44:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <HAL_Init+0x40>)
 8003c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a07      	ldr	r2, [pc, #28]	; (8003c74 <HAL_Init+0x40>)
 8003c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c5c:	2003      	movs	r0, #3
 8003c5e:	f000 fd17 	bl	8004690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c62:	2000      	movs	r0, #0
 8003c64:	f000 f808 	bl	8003c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c68:	f7ff fc3e 	bl	80034e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00

08003c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c80:	4b12      	ldr	r3, [pc, #72]	; (8003ccc <HAL_InitTick+0x54>)
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	4b12      	ldr	r3, [pc, #72]	; (8003cd0 <HAL_InitTick+0x58>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fd2f 	bl	80046fa <HAL_SYSTICK_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e00e      	b.n	8003cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b0f      	cmp	r3, #15
 8003caa:	d80a      	bhi.n	8003cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cac:	2200      	movs	r2, #0
 8003cae:	6879      	ldr	r1, [r7, #4]
 8003cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cb4:	f000 fcf7 	bl	80046a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cb8:	4a06      	ldr	r2, [pc, #24]	; (8003cd4 <HAL_InitTick+0x5c>)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3708      	adds	r7, #8
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	20000008 	.word	0x20000008
 8003cd4:	20000004 	.word	0x20000004

08003cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003cdc:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <HAL_IncTick+0x20>)
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <HAL_IncTick+0x24>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	4a04      	ldr	r2, [pc, #16]	; (8003cfc <HAL_IncTick+0x24>)
 8003cea:	6013      	str	r3, [r2, #0]
}
 8003cec:	bf00      	nop
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	20000008 	.word	0x20000008
 8003cfc:	200005e0 	.word	0x200005e0

08003d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return uwTick;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_GetTick+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	200005e0 	.word	0x200005e0

08003d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d20:	f7ff ffee 	bl	8003d00 <HAL_GetTick>
 8003d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d30:	d005      	beq.n	8003d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d32:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <HAL_Delay+0x40>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d3e:	bf00      	nop
 8003d40:	f7ff ffde 	bl	8003d00 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d8f7      	bhi.n	8003d40 <HAL_Delay+0x28>
  {
  }
}
 8003d50:	bf00      	nop
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	20000008 	.word	0x20000008

08003d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d64:	2300      	movs	r3, #0
 8003d66:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e033      	b.n	8003dda <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f7ff fbdc 	bl	8003538 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d118      	bne.n	8003dcc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003da2:	f023 0302 	bic.w	r3, r3, #2
 8003da6:	f043 0202 	orr.w	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 faa2 	bl	80042f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f023 0303 	bic.w	r3, r3, #3
 8003dc2:	f043 0201 	orr.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dca:	e001      	b.n	8003dd0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003dec:	2300      	movs	r3, #0
 8003dee:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d101      	bne.n	8003dfe <HAL_ADC_Start+0x1a>
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	e0a5      	b.n	8003f4a <HAL_ADC_Start+0x166>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d018      	beq.n	8003e46 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	689a      	ldr	r2, [r3, #8]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003e24:	4b4c      	ldr	r3, [pc, #304]	; (8003f58 <HAL_ADC_Start+0x174>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a4c      	ldr	r2, [pc, #304]	; (8003f5c <HAL_ADC_Start+0x178>)
 8003e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2e:	0c9a      	lsrs	r2, r3, #18
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e38:	e002      	b.n	8003e40 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1f9      	bne.n	8003e3a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d179      	bne.n	8003f48 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e5c:	f023 0301 	bic.w	r3, r3, #1
 8003e60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d007      	beq.n	8003e86 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e7e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d106      	bne.n	8003ea2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e98:	f023 0206 	bic.w	r2, r3, #6
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	645a      	str	r2, [r3, #68]	; 0x44
 8003ea0:	e002      	b.n	8003ea8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb0:	4b2b      	ldr	r3, [pc, #172]	; (8003f60 <HAL_ADC_Start+0x17c>)
 8003eb2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003ebc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 031f 	and.w	r3, r3, #31
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d12a      	bne.n	8003f20 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a25      	ldr	r2, [pc, #148]	; (8003f64 <HAL_ADC_Start+0x180>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d015      	beq.n	8003f00 <HAL_ADC_Start+0x11c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a23      	ldr	r2, [pc, #140]	; (8003f68 <HAL_ADC_Start+0x184>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d105      	bne.n	8003eea <HAL_ADC_Start+0x106>
 8003ede:	4b20      	ldr	r3, [pc, #128]	; (8003f60 <HAL_ADC_Start+0x17c>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f003 031f 	and.w	r3, r3, #31
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00a      	beq.n	8003f00 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1f      	ldr	r2, [pc, #124]	; (8003f6c <HAL_ADC_Start+0x188>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d129      	bne.n	8003f48 <HAL_ADC_Start+0x164>
 8003ef4:	4b1a      	ldr	r3, [pc, #104]	; (8003f60 <HAL_ADC_Start+0x17c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	2b0f      	cmp	r3, #15
 8003efe:	d823      	bhi.n	8003f48 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d11c      	bne.n	8003f48 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	e013      	b.n	8003f48 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a0f      	ldr	r2, [pc, #60]	; (8003f64 <HAL_ADC_Start+0x180>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d10e      	bne.n	8003f48 <HAL_ADC_Start+0x164>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d107      	bne.n	8003f48 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f46:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000
 8003f5c:	431bde83 	.word	0x431bde83
 8003f60:	40012300 	.word	0x40012300
 8003f64:	40012000 	.word	0x40012000
 8003f68:	40012100 	.word	0x40012100
 8003f6c:	40012200 	.word	0x40012200

08003f70 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f8c:	d113      	bne.n	8003fb6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9c:	d10b      	bne.n	8003fb6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f043 0220 	orr.w	r2, r3, #32
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e05c      	b.n	8004070 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8003fb6:	f7ff fea3 	bl	8003d00 <HAL_GetTick>
 8003fba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003fbc:	e01a      	b.n	8003ff4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d016      	beq.n	8003ff4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d007      	beq.n	8003fdc <HAL_ADC_PollForConversion+0x6c>
 8003fcc:	f7ff fe98 	bl	8003d00 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d20b      	bcs.n	8003ff4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f043 0204 	orr.w	r2, r3, #4
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e03d      	b.n	8004070 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d1dd      	bne.n	8003fbe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f06f 0212 	mvn.w	r2, #18
 800400a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d123      	bne.n	800406e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800402a:	2b00      	cmp	r3, #0
 800402c:	d11f      	bne.n	800406e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004034:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004038:	2b00      	cmp	r3, #0
 800403a:	d006      	beq.n	800404a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004046:	2b00      	cmp	r3, #0
 8004048:	d111      	bne.n	800406e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405e:	2b00      	cmp	r3, #0
 8004060:	d105      	bne.n	800406e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	f043 0201 	orr.w	r2, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004078:	b480      	push	{r7}
 800407a:	b083      	sub	sp, #12
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004086:	4618      	mov	r0, r3
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
	...

08004094 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d101      	bne.n	80040b0 <HAL_ADC_ConfigChannel+0x1c>
 80040ac:	2302      	movs	r3, #2
 80040ae:	e113      	b.n	80042d8 <HAL_ADC_ConfigChannel+0x244>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b09      	cmp	r3, #9
 80040be:	d925      	bls.n	800410c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68d9      	ldr	r1, [r3, #12]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	461a      	mov	r2, r3
 80040ce:	4613      	mov	r3, r2
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	4413      	add	r3, r2
 80040d4:	3b1e      	subs	r3, #30
 80040d6:	2207      	movs	r2, #7
 80040d8:	fa02 f303 	lsl.w	r3, r2, r3
 80040dc:	43da      	mvns	r2, r3
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	400a      	ands	r2, r1
 80040e4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	68d9      	ldr	r1, [r3, #12]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	4618      	mov	r0, r3
 80040f8:	4603      	mov	r3, r0
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4403      	add	r3, r0
 80040fe:	3b1e      	subs	r3, #30
 8004100:	409a      	lsls	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	430a      	orrs	r2, r1
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	e022      	b.n	8004152 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6919      	ldr	r1, [r3, #16]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	b29b      	uxth	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	2207      	movs	r2, #7
 8004122:	fa02 f303 	lsl.w	r3, r2, r3
 8004126:	43da      	mvns	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	400a      	ands	r2, r1
 800412e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6919      	ldr	r1, [r3, #16]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	b29b      	uxth	r3, r3
 8004140:	4618      	mov	r0, r3
 8004142:	4603      	mov	r3, r0
 8004144:	005b      	lsls	r3, r3, #1
 8004146:	4403      	add	r3, r0
 8004148:	409a      	lsls	r2, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b06      	cmp	r3, #6
 8004158:	d824      	bhi.n	80041a4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4613      	mov	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	4413      	add	r3, r2
 800416a:	3b05      	subs	r3, #5
 800416c:	221f      	movs	r2, #31
 800416e:	fa02 f303 	lsl.w	r3, r2, r3
 8004172:	43da      	mvns	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	400a      	ands	r2, r1
 800417a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	b29b      	uxth	r3, r3
 8004188:	4618      	mov	r0, r3
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	685a      	ldr	r2, [r3, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	3b05      	subs	r3, #5
 8004196:	fa00 f203 	lsl.w	r2, r0, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	635a      	str	r2, [r3, #52]	; 0x34
 80041a2:	e04c      	b.n	800423e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b0c      	cmp	r3, #12
 80041aa:	d824      	bhi.n	80041f6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	4613      	mov	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4413      	add	r3, r2
 80041bc:	3b23      	subs	r3, #35	; 0x23
 80041be:	221f      	movs	r2, #31
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	43da      	mvns	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	400a      	ands	r2, r1
 80041cc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	4618      	mov	r0, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685a      	ldr	r2, [r3, #4]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	3b23      	subs	r3, #35	; 0x23
 80041e8:	fa00 f203 	lsl.w	r2, r0, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	430a      	orrs	r2, r1
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
 80041f4:	e023      	b.n	800423e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	3b41      	subs	r3, #65	; 0x41
 8004208:	221f      	movs	r2, #31
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	43da      	mvns	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	400a      	ands	r2, r1
 8004216:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b29b      	uxth	r3, r3
 8004224:	4618      	mov	r0, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	3b41      	subs	r3, #65	; 0x41
 8004232:	fa00 f203 	lsl.w	r2, r0, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800423e:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_ADC_ConfigChannel+0x250>)
 8004240:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a28      	ldr	r2, [pc, #160]	; (80042e8 <HAL_ADC_ConfigChannel+0x254>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10f      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d8>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b12      	cmp	r3, #18
 8004252:	d10b      	bne.n	800426c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <HAL_ADC_ConfigChannel+0x254>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d12b      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1c      	ldr	r2, [pc, #112]	; (80042ec <HAL_ADC_ConfigChannel+0x258>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <HAL_ADC_ConfigChannel+0x1f4>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b11      	cmp	r3, #17
 8004286:	d122      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a11      	ldr	r2, [pc, #68]	; (80042ec <HAL_ADC_ConfigChannel+0x258>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d111      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042aa:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <HAL_ADC_ConfigChannel+0x25c>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a11      	ldr	r2, [pc, #68]	; (80042f4 <HAL_ADC_ConfigChannel+0x260>)
 80042b0:	fba2 2303 	umull	r2, r3, r2, r3
 80042b4:	0c9a      	lsrs	r2, r3, #18
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	005b      	lsls	r3, r3, #1
 80042be:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c0:	e002      	b.n	80042c8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f9      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40012300 	.word	0x40012300
 80042e8:	40012000 	.word	0x40012000
 80042ec:	10000012 	.word	0x10000012
 80042f0:	20000000 	.word	0x20000000
 80042f4:	431bde83 	.word	0x431bde83

080042f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004300:	4b79      	ldr	r3, [pc, #484]	; (80044e8 <ADC_Init+0x1f0>)
 8004302:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	685a      	ldr	r2, [r3, #4]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800432c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6859      	ldr	r1, [r3, #4]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	021a      	lsls	r2, r3, #8
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6859      	ldr	r1, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	430a      	orrs	r2, r1
 8004362:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	430a      	orrs	r2, r1
 8004384:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438a:	4a58      	ldr	r2, [pc, #352]	; (80044ec <ADC_Init+0x1f4>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d022      	beq.n	80043d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800439e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6899      	ldr	r1, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	609a      	str	r2, [r3, #8]
 80043d4:	e00f      	b.n	80043f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689a      	ldr	r2, [r3, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689a      	ldr	r2, [r3, #8]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0202 	bic.w	r2, r2, #2
 8004404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6899      	ldr	r1, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	7e1b      	ldrb	r3, [r3, #24]
 8004410:	005a      	lsls	r2, r3, #1
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d01b      	beq.n	800445c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004442:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444e:	3b01      	subs	r3, #1
 8004450:	035a      	lsls	r2, r3, #13
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	430a      	orrs	r2, r1
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	e007      	b.n	800446c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800446a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800447a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	3b01      	subs	r3, #1
 8004488:	051a      	lsls	r2, r3, #20
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	6899      	ldr	r1, [r3, #8]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ae:	025a      	lsls	r2, r3, #9
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689a      	ldr	r2, [r3, #8]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6899      	ldr	r1, [r3, #8]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	029a      	lsls	r2, r3, #10
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	609a      	str	r2, [r3, #8]
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	40012300 	.word	0x40012300
 80044ec:	0f000001 	.word	0x0f000001

080044f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800450c:	4013      	ands	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004522:	4a04      	ldr	r2, [pc, #16]	; (8004534 <__NVIC_SetPriorityGrouping+0x44>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	60d3      	str	r3, [r2, #12]
}
 8004528:	bf00      	nop
 800452a:	3714      	adds	r7, #20
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <__NVIC_GetPriorityGrouping+0x18>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0307 	and.w	r3, r3, #7
}
 8004546:	4618      	mov	r0, r3
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	e000ed00 	.word	0xe000ed00

08004554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	4603      	mov	r3, r0
 800455c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db0b      	blt.n	800457e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004566:	79fb      	ldrb	r3, [r7, #7]
 8004568:	f003 021f 	and.w	r2, r3, #31
 800456c:	4907      	ldr	r1, [pc, #28]	; (800458c <__NVIC_EnableIRQ+0x38>)
 800456e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2001      	movs	r0, #1
 8004576:	fa00 f202 	lsl.w	r2, r0, r2
 800457a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
 800458a:	bf00      	nop
 800458c:	e000e100 	.word	0xe000e100

08004590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	db0a      	blt.n	80045ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	490c      	ldr	r1, [pc, #48]	; (80045dc <__NVIC_SetPriority+0x4c>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	0112      	lsls	r2, r2, #4
 80045b0:	b2d2      	uxtb	r2, r2
 80045b2:	440b      	add	r3, r1
 80045b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b8:	e00a      	b.n	80045d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	4908      	ldr	r1, [pc, #32]	; (80045e0 <__NVIC_SetPriority+0x50>)
 80045c0:	79fb      	ldrb	r3, [r7, #7]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	3b04      	subs	r3, #4
 80045c8:	0112      	lsls	r2, r2, #4
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	440b      	add	r3, r1
 80045ce:	761a      	strb	r2, [r3, #24]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	e000e100 	.word	0xe000e100
 80045e0:	e000ed00 	.word	0xe000ed00

080045e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b089      	sub	sp, #36	; 0x24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	bf28      	it	cs
 8004602:	2304      	movcs	r3, #4
 8004604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	3304      	adds	r3, #4
 800460a:	2b06      	cmp	r3, #6
 800460c:	d902      	bls.n	8004614 <NVIC_EncodePriority+0x30>
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	3b03      	subs	r3, #3
 8004612:	e000      	b.n	8004616 <NVIC_EncodePriority+0x32>
 8004614:	2300      	movs	r3, #0
 8004616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004618:	f04f 32ff 	mov.w	r2, #4294967295
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	401a      	ands	r2, r3
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800462c:	f04f 31ff 	mov.w	r1, #4294967295
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	fa01 f303 	lsl.w	r3, r1, r3
 8004636:	43d9      	mvns	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	4313      	orrs	r3, r2
         );
}
 800463e:	4618      	mov	r0, r3
 8004640:	3724      	adds	r7, #36	; 0x24
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr
	...

0800464c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	3b01      	subs	r3, #1
 8004658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800465c:	d301      	bcc.n	8004662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800465e:	2301      	movs	r3, #1
 8004660:	e00f      	b.n	8004682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004662:	4a0a      	ldr	r2, [pc, #40]	; (800468c <SysTick_Config+0x40>)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3b01      	subs	r3, #1
 8004668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800466a:	210f      	movs	r1, #15
 800466c:	f04f 30ff 	mov.w	r0, #4294967295
 8004670:	f7ff ff8e 	bl	8004590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <SysTick_Config+0x40>)
 8004676:	2200      	movs	r2, #0
 8004678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800467a:	4b04      	ldr	r3, [pc, #16]	; (800468c <SysTick_Config+0x40>)
 800467c:	2207      	movs	r2, #7
 800467e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	e000e010 	.word	0xe000e010

08004690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f7ff ff29 	bl	80044f0 <__NVIC_SetPriorityGrouping>
}
 800469e:	bf00      	nop
 80046a0:	3708      	adds	r7, #8
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	4603      	mov	r3, r0
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
 80046b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046b8:	f7ff ff3e 	bl	8004538 <__NVIC_GetPriorityGrouping>
 80046bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	68b9      	ldr	r1, [r7, #8]
 80046c2:	6978      	ldr	r0, [r7, #20]
 80046c4:	f7ff ff8e 	bl	80045e4 <NVIC_EncodePriority>
 80046c8:	4602      	mov	r2, r0
 80046ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff ff5d 	bl	8004590 <__NVIC_SetPriority>
}
 80046d6:	bf00      	nop
 80046d8:	3718      	adds	r7, #24
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b082      	sub	sp, #8
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4603      	mov	r3, r0
 80046e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff ff31 	bl	8004554 <__NVIC_EnableIRQ>
}
 80046f2:	bf00      	nop
 80046f4:	3708      	adds	r7, #8
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b082      	sub	sp, #8
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7ff ffa2 	bl	800464c <SysTick_Config>
 8004708:	4603      	mov	r3, r0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
	...

08004714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	; 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800471e:	2300      	movs	r3, #0
 8004720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004722:	2300      	movs	r3, #0
 8004724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004726:	2300      	movs	r3, #0
 8004728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800472a:	2300      	movs	r3, #0
 800472c:	61fb      	str	r3, [r7, #28]
 800472e:	e165      	b.n	80049fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004730:	2201      	movs	r2, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4013      	ands	r3, r2
 8004742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	429a      	cmp	r2, r3
 800474a:	f040 8154 	bne.w	80049f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2b01      	cmp	r3, #1
 8004754:	d00b      	beq.n	800476e <HAL_GPIO_Init+0x5a>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d007      	beq.n	800476e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004762:	2b11      	cmp	r3, #17
 8004764:	d003      	beq.n	800476e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b12      	cmp	r3, #18
 800476c:	d130      	bne.n	80047d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	005b      	lsls	r3, r3, #1
 8004778:	2203      	movs	r2, #3
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	43db      	mvns	r3, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4013      	ands	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	005b      	lsls	r3, r3, #1
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047a4:	2201      	movs	r2, #1
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	4013      	ands	r3, r2
 80047b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	091b      	lsrs	r3, r3, #4
 80047ba:	f003 0201 	and.w	r2, r3, #1
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	69ba      	ldr	r2, [r7, #24]
 80047ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	2203      	movs	r2, #3
 80047dc:	fa02 f303 	lsl.w	r3, r2, r3
 80047e0:	43db      	mvns	r3, r3
 80047e2:	69ba      	ldr	r2, [r7, #24]
 80047e4:	4013      	ands	r3, r2
 80047e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	689a      	ldr	r2, [r3, #8]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	005b      	lsls	r3, r3, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b02      	cmp	r3, #2
 8004806:	d003      	beq.n	8004810 <HAL_GPIO_Init+0xfc>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b12      	cmp	r3, #18
 800480e:	d123      	bne.n	8004858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	08da      	lsrs	r2, r3, #3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	3208      	adds	r2, #8
 8004818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	f003 0307 	and.w	r3, r3, #7
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	220f      	movs	r2, #15
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	691a      	ldr	r2, [r3, #16]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f003 0307 	and.w	r3, r3, #7
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	69ba      	ldr	r2, [r7, #24]
 8004846:	4313      	orrs	r3, r2
 8004848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	08da      	lsrs	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3208      	adds	r2, #8
 8004852:	69b9      	ldr	r1, [r7, #24]
 8004854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	2203      	movs	r2, #3
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	43db      	mvns	r3, r3
 800486a:	69ba      	ldr	r2, [r7, #24]
 800486c:	4013      	ands	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0203 	and.w	r2, r3, #3
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80ae 	beq.w	80049f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	4b5c      	ldr	r3, [pc, #368]	; (8004a10 <HAL_GPIO_Init+0x2fc>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	4a5b      	ldr	r2, [pc, #364]	; (8004a10 <HAL_GPIO_Init+0x2fc>)
 80048a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a8:	6453      	str	r3, [r2, #68]	; 0x44
 80048aa:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <HAL_GPIO_Init+0x2fc>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048b6:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <HAL_GPIO_Init+0x300>)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	009b      	lsls	r3, r3, #2
 80048cc:	220f      	movs	r2, #15
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a4e      	ldr	r2, [pc, #312]	; (8004a18 <HAL_GPIO_Init+0x304>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d025      	beq.n	800492e <HAL_GPIO_Init+0x21a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4d      	ldr	r2, [pc, #308]	; (8004a1c <HAL_GPIO_Init+0x308>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01f      	beq.n	800492a <HAL_GPIO_Init+0x216>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4c      	ldr	r2, [pc, #304]	; (8004a20 <HAL_GPIO_Init+0x30c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d019      	beq.n	8004926 <HAL_GPIO_Init+0x212>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4b      	ldr	r2, [pc, #300]	; (8004a24 <HAL_GPIO_Init+0x310>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_GPIO_Init+0x20e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a4a      	ldr	r2, [pc, #296]	; (8004a28 <HAL_GPIO_Init+0x314>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00d      	beq.n	800491e <HAL_GPIO_Init+0x20a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a49      	ldr	r2, [pc, #292]	; (8004a2c <HAL_GPIO_Init+0x318>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d007      	beq.n	800491a <HAL_GPIO_Init+0x206>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a48      	ldr	r2, [pc, #288]	; (8004a30 <HAL_GPIO_Init+0x31c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d101      	bne.n	8004916 <HAL_GPIO_Init+0x202>
 8004912:	2306      	movs	r3, #6
 8004914:	e00c      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 8004916:	2307      	movs	r3, #7
 8004918:	e00a      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 800491a:	2305      	movs	r3, #5
 800491c:	e008      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 800491e:	2304      	movs	r3, #4
 8004920:	e006      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 8004922:	2303      	movs	r3, #3
 8004924:	e004      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 8004926:	2302      	movs	r3, #2
 8004928:	e002      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 800492a:	2301      	movs	r3, #1
 800492c:	e000      	b.n	8004930 <HAL_GPIO_Init+0x21c>
 800492e:	2300      	movs	r3, #0
 8004930:	69fa      	ldr	r2, [r7, #28]
 8004932:	f002 0203 	and.w	r2, r2, #3
 8004936:	0092      	lsls	r2, r2, #2
 8004938:	4093      	lsls	r3, r2
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004940:	4934      	ldr	r1, [pc, #208]	; (8004a14 <HAL_GPIO_Init+0x300>)
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	089b      	lsrs	r3, r3, #2
 8004946:	3302      	adds	r3, #2
 8004948:	69ba      	ldr	r2, [r7, #24]
 800494a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800494e:	4b39      	ldr	r3, [pc, #228]	; (8004a34 <HAL_GPIO_Init+0x320>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	43db      	mvns	r3, r3
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	4013      	ands	r3, r2
 800495c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d003      	beq.n	8004972 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4313      	orrs	r3, r2
 8004970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004972:	4a30      	ldr	r2, [pc, #192]	; (8004a34 <HAL_GPIO_Init+0x320>)
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004978:	4b2e      	ldr	r3, [pc, #184]	; (8004a34 <HAL_GPIO_Init+0x320>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	43db      	mvns	r3, r3
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	4013      	ands	r3, r2
 8004986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800499c:	4a25      	ldr	r2, [pc, #148]	; (8004a34 <HAL_GPIO_Init+0x320>)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049a2:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_GPIO_Init+0x320>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	43db      	mvns	r3, r3
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	4013      	ands	r3, r2
 80049b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049c6:	4a1b      	ldr	r2, [pc, #108]	; (8004a34 <HAL_GPIO_Init+0x320>)
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_GPIO_Init+0x320>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	43db      	mvns	r3, r3
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	4013      	ands	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049f0:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <HAL_GPIO_Init+0x320>)
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3301      	adds	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	f67f ae96 	bls.w	8004730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a04:	bf00      	nop
 8004a06:	3724      	adds	r7, #36	; 0x24
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40013800 	.word	0x40013800
 8004a18:	40020000 	.word	0x40020000
 8004a1c:	40020400 	.word	0x40020400
 8004a20:	40020800 	.word	0x40020800
 8004a24:	40020c00 	.word	0x40020c00
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40021400 	.word	0x40021400
 8004a30:	40021800 	.word	0x40021800
 8004a34:	40013c00 	.word	0x40013c00

08004a38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	460b      	mov	r3, r1
 8004a42:	807b      	strh	r3, [r7, #2]
 8004a44:	4613      	mov	r3, r2
 8004a46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a48:	787b      	ldrb	r3, [r7, #1]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d003      	beq.n	8004a56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a4e:	887a      	ldrh	r2, [r7, #2]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a54:	e003      	b.n	8004a5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a56:	887b      	ldrh	r3, [r7, #2]
 8004a58:	041a      	lsls	r2, r3, #16
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	619a      	str	r2, [r3, #24]
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
	...

08004a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b084      	sub	sp, #16
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e11f      	b.n	8004cbe <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fe fd94 	bl	80035c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2224      	movs	r2, #36	; 0x24
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f022 0201 	bic.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ad0:	f002 fa90 	bl	8006ff4 <HAL_RCC_GetPCLK1Freq>
 8004ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	4a7b      	ldr	r2, [pc, #492]	; (8004cc8 <HAL_I2C_Init+0x25c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d807      	bhi.n	8004af0 <HAL_I2C_Init+0x84>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4a7a      	ldr	r2, [pc, #488]	; (8004ccc <HAL_I2C_Init+0x260>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bf94      	ite	ls
 8004ae8:	2301      	movls	r3, #1
 8004aea:	2300      	movhi	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e006      	b.n	8004afe <HAL_I2C_Init+0x92>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a77      	ldr	r2, [pc, #476]	; (8004cd0 <HAL_I2C_Init+0x264>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bf94      	ite	ls
 8004af8:	2301      	movls	r3, #1
 8004afa:	2300      	movhi	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	e0db      	b.n	8004cbe <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	4a72      	ldr	r2, [pc, #456]	; (8004cd4 <HAL_I2C_Init+0x268>)
 8004b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0e:	0c9b      	lsrs	r3, r3, #18
 8004b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	4a64      	ldr	r2, [pc, #400]	; (8004cc8 <HAL_I2C_Init+0x25c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d802      	bhi.n	8004b40 <HAL_I2C_Init+0xd4>
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	e009      	b.n	8004b54 <HAL_I2C_Init+0xe8>
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	4a63      	ldr	r2, [pc, #396]	; (8004cd8 <HAL_I2C_Init+0x26c>)
 8004b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b50:	099b      	lsrs	r3, r3, #6
 8004b52:	3301      	adds	r3, #1
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6812      	ldr	r2, [r2, #0]
 8004b58:	430b      	orrs	r3, r1
 8004b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	4956      	ldr	r1, [pc, #344]	; (8004cc8 <HAL_I2C_Init+0x25c>)
 8004b70:	428b      	cmp	r3, r1
 8004b72:	d80d      	bhi.n	8004b90 <HAL_I2C_Init+0x124>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	1e59      	subs	r1, r3, #1
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	bf38      	it	cc
 8004b8c:	2304      	movcc	r3, #4
 8004b8e:	e04f      	b.n	8004c30 <HAL_I2C_Init+0x1c4>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d111      	bne.n	8004bbc <HAL_I2C_Init+0x150>
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	1e58      	subs	r0, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6859      	ldr	r1, [r3, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	440b      	add	r3, r1
 8004ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004baa:	3301      	adds	r3, #1
 8004bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	e012      	b.n	8004be2 <HAL_I2C_Init+0x176>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1e58      	subs	r0, r3, #1
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6859      	ldr	r1, [r3, #4]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	0099      	lsls	r1, r3, #2
 8004bcc:	440b      	add	r3, r1
 8004bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <HAL_I2C_Init+0x17e>
 8004be6:	2301      	movs	r3, #1
 8004be8:	e022      	b.n	8004c30 <HAL_I2C_Init+0x1c4>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10e      	bne.n	8004c10 <HAL_I2C_Init+0x1a4>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	1e58      	subs	r0, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	440b      	add	r3, r1
 8004c00:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c04:	3301      	adds	r3, #1
 8004c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c0e:	e00f      	b.n	8004c30 <HAL_I2C_Init+0x1c4>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	1e58      	subs	r0, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6859      	ldr	r1, [r3, #4]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	440b      	add	r3, r1
 8004c1e:	0099      	lsls	r1, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	6809      	ldr	r1, [r1, #0]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	69da      	ldr	r2, [r3, #28]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	689b      	ldr	r3, [r3, #8]
 8004c5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6911      	ldr	r1, [r2, #16]
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	68d2      	ldr	r2, [r2, #12]
 8004c6a:	4311      	orrs	r1, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	430b      	orrs	r3, r1
 8004c72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695a      	ldr	r2, [r3, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	699b      	ldr	r3, [r3, #24]
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0201 	orr.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	000186a0 	.word	0x000186a0
 8004ccc:	001e847f 	.word	0x001e847f
 8004cd0:	003d08ff 	.word	0x003d08ff
 8004cd4:	431bde83 	.word	0x431bde83
 8004cd8:	10624dd3 	.word	0x10624dd3

08004cdc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	813b      	strh	r3, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf6:	f7ff f803 	bl	8003d00 <HAL_GetTick>
 8004cfa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 80d9 	bne.w	8004ebc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2319      	movs	r3, #25
 8004d10:	2201      	movs	r2, #1
 8004d12:	496d      	ldr	r1, [pc, #436]	; (8004ec8 <HAL_I2C_Mem_Write+0x1ec>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f000 fc7f 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	e0cc      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Mem_Write+0x56>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e0c5      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d007      	beq.n	8004d58 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2221      	movs	r2, #33	; 0x21
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2240      	movs	r2, #64	; 0x40
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a3a      	ldr	r2, [r7, #32]
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a4d      	ldr	r2, [pc, #308]	; (8004ecc <HAL_I2C_Mem_Write+0x1f0>)
 8004d98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d9a:	88f8      	ldrh	r0, [r7, #6]
 8004d9c:	893a      	ldrh	r2, [r7, #8]
 8004d9e:	8979      	ldrh	r1, [r7, #10]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f000 fab6 	bl	800531c <I2C_RequestMemoryWrite>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d052      	beq.n	8004e5c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e081      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fd00 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d107      	bne.n	8004de2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004de0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e06b      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	781a      	ldrb	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	3b01      	subs	r3, #1
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b04      	cmp	r3, #4
 8004e22:	d11b      	bne.n	8004e5c <HAL_I2C_Mem_Write+0x180>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	781a      	ldrb	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	3b01      	subs	r3, #1
 8004e56:	b29a      	uxth	r2, r3
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1aa      	bne.n	8004dba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e68:	68f8      	ldr	r0, [r7, #12]
 8004e6a:	f000 fcec 	bl	8005846 <I2C_WaitOnBTFFlagUntilTimeout>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00d      	beq.n	8004e90 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d107      	bne.n	8004e8c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e8a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e016      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e000      	b.n	8004ebe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004ebc:	2302      	movs	r3, #2
  }
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	00100002 	.word	0x00100002
 8004ecc:	ffff0000 	.word	0xffff0000

08004ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08c      	sub	sp, #48	; 0x30
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	817b      	strh	r3, [r7, #10]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	813b      	strh	r3, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004eea:	f7fe ff09 	bl	8003d00 <HAL_GetTick>
 8004eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b20      	cmp	r3, #32
 8004efa:	f040 8208 	bne.w	800530e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	2319      	movs	r3, #25
 8004f04:	2201      	movs	r2, #1
 8004f06:	497b      	ldr	r1, [pc, #492]	; (80050f4 <HAL_I2C_Mem_Read+0x224>)
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fb85 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004f14:	2302      	movs	r3, #2
 8004f16:	e1fb      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f1e:	2b01      	cmp	r3, #1
 8004f20:	d101      	bne.n	8004f26 <HAL_I2C_Mem_Read+0x56>
 8004f22:	2302      	movs	r3, #2
 8004f24:	e1f4      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d007      	beq.n	8004f4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0201 	orr.w	r2, r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2222      	movs	r2, #34	; 0x22
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2240      	movs	r2, #64	; 0x40
 8004f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4a5b      	ldr	r2, [pc, #364]	; (80050f8 <HAL_I2C_Mem_Read+0x228>)
 8004f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f8e:	88f8      	ldrh	r0, [r7, #6]
 8004f90:	893a      	ldrh	r2, [r7, #8]
 8004f92:	8979      	ldrh	r1, [r7, #10]
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	9301      	str	r3, [sp, #4]
 8004f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	68f8      	ldr	r0, [r7, #12]
 8004fa0:	f000 fa52 	bl	8005448 <I2C_RequestMemoryRead>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e1b0      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d113      	bne.n	8004fde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	623b      	str	r3, [r7, #32]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	695b      	ldr	r3, [r3, #20]
 8004fc0:	623b      	str	r3, [r7, #32]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	623b      	str	r3, [r7, #32]
 8004fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	e184      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d11b      	bne.n	800501e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	61fb      	str	r3, [r7, #28]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	61fb      	str	r3, [r7, #28]
 800500a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e164      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005022:	2b02      	cmp	r3, #2
 8005024:	d11b      	bne.n	800505e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	61bb      	str	r3, [r7, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	61bb      	str	r3, [r7, #24]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	61bb      	str	r3, [r7, #24]
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	e144      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	617b      	str	r3, [r7, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	617b      	str	r3, [r7, #20]
 8005072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005074:	e138      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	2b03      	cmp	r3, #3
 800507c:	f200 80f1 	bhi.w	8005262 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005084:	2b01      	cmp	r3, #1
 8005086:	d123      	bne.n	80050d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800508a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800508c:	68f8      	ldr	r0, [r7, #12]
 800508e:	f000 fc1b 	bl	80058c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005092:	4603      	mov	r3, r0
 8005094:	2b00      	cmp	r3, #0
 8005096:	d001      	beq.n	800509c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e139      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050b8:	3b01      	subs	r3, #1
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050ce:	e10b      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d14e      	bne.n	8005176 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050de:	2200      	movs	r2, #0
 80050e0:	4906      	ldr	r1, [pc, #24]	; (80050fc <HAL_I2C_Mem_Read+0x22c>)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa98 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e10e      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
 80050f2:	bf00      	nop
 80050f4:	00100002 	.word	0x00100002
 80050f8:	ffff0000 	.word	0xffff0000
 80050fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800510e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691a      	ldr	r2, [r3, #16]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800512c:	3b01      	subs	r3, #1
 800512e:	b29a      	uxth	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005138:	b29b      	uxth	r3, r3
 800513a:	3b01      	subs	r3, #1
 800513c:	b29a      	uxth	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005174:	e0b8      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800517c:	2200      	movs	r2, #0
 800517e:	4966      	ldr	r1, [pc, #408]	; (8005318 <HAL_I2C_Mem_Read+0x448>)
 8005180:	68f8      	ldr	r0, [r7, #12]
 8005182:	f000 fa49 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d001      	beq.n	8005190 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0bf      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800519e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691a      	ldr	r2, [r3, #16]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	1c5a      	adds	r2, r3, #1
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b29a      	uxth	r2, r3
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d8:	2200      	movs	r2, #0
 80051da:	494f      	ldr	r1, [pc, #316]	; (8005318 <HAL_I2C_Mem_Read+0x448>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fa1b 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e091      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005218:	3b01      	subs	r3, #1
 800521a:	b29a      	uxth	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	691a      	ldr	r2, [r3, #16]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	b2d2      	uxtb	r2, r2
 800523a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005240:	1c5a      	adds	r2, r3, #1
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800524a:	3b01      	subs	r3, #1
 800524c:	b29a      	uxth	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005260:	e042      	b.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	f000 fb2e 	bl	80058c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e04c      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	691a      	ldr	r2, [r3, #16]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005292:	3b01      	subs	r3, #1
 8005294:	b29a      	uxth	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d118      	bne.n	80052e8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052d2:	3b01      	subs	r3, #1
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052de:	b29b      	uxth	r3, r3
 80052e0:	3b01      	subs	r3, #1
 80052e2:	b29a      	uxth	r2, r3
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f47f aec2 	bne.w	8005076 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800530a:	2300      	movs	r3, #0
 800530c:	e000      	b.n	8005310 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800530e:	2302      	movs	r3, #2
  }
}
 8005310:	4618      	mov	r0, r3
 8005312:	3728      	adds	r7, #40	; 0x28
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	00010004 	.word	0x00010004

0800531c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b088      	sub	sp, #32
 8005320:	af02      	add	r7, sp, #8
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	4608      	mov	r0, r1
 8005326:	4611      	mov	r1, r2
 8005328:	461a      	mov	r2, r3
 800532a:	4603      	mov	r3, r0
 800532c:	817b      	strh	r3, [r7, #10]
 800532e:	460b      	mov	r3, r1
 8005330:	813b      	strh	r3, [r7, #8]
 8005332:	4613      	mov	r3, r2
 8005334:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005344:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	6a3b      	ldr	r3, [r7, #32]
 800534c:	2200      	movs	r2, #0
 800534e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005352:	68f8      	ldr	r0, [r7, #12]
 8005354:	f000 f960 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00d      	beq.n	800537a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536c:	d103      	bne.n	8005376 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005374:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e05f      	b.n	800543a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800537a:	897b      	ldrh	r3, [r7, #10]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	461a      	mov	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005388:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800538a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538c:	6a3a      	ldr	r2, [r7, #32]
 800538e:	492d      	ldr	r1, [pc, #180]	; (8005444 <I2C_RequestMemoryWrite+0x128>)
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f000 f998 	bl	80056c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	e04c      	b.n	800543a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053a0:	2300      	movs	r3, #0
 80053a2:	617b      	str	r3, [r7, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	617b      	str	r3, [r7, #20]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	617b      	str	r3, [r7, #20]
 80053b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b8:	6a39      	ldr	r1, [r7, #32]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f000 fa02 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00d      	beq.n	80053e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d107      	bne.n	80053de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e02b      	b.n	800543a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053e2:	88fb      	ldrh	r3, [r7, #6]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d105      	bne.n	80053f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e8:	893b      	ldrh	r3, [r7, #8]
 80053ea:	b2da      	uxtb	r2, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	611a      	str	r2, [r3, #16]
 80053f2:	e021      	b.n	8005438 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053f4:	893b      	ldrh	r3, [r7, #8]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005402:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005404:	6a39      	ldr	r1, [r7, #32]
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f000 f9dc 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00d      	beq.n	800542e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005416:	2b04      	cmp	r3, #4
 8005418:	d107      	bne.n	800542a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005428:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e005      	b.n	800543a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800542e:	893b      	ldrh	r3, [r7, #8]
 8005430:	b2da      	uxtb	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	00010002 	.word	0x00010002

08005448 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	461a      	mov	r2, r3
 8005456:	4603      	mov	r3, r0
 8005458:	817b      	strh	r3, [r7, #10]
 800545a:	460b      	mov	r3, r1
 800545c:	813b      	strh	r3, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005470:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005480:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005484:	9300      	str	r3, [sp, #0]
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2200      	movs	r2, #0
 800548a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800548e:	68f8      	ldr	r0, [r7, #12]
 8005490:	f000 f8c2 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 8005494:	4603      	mov	r3, r0
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00d      	beq.n	80054b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054a8:	d103      	bne.n	80054b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0aa      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054b6:	897b      	ldrh	r3, [r7, #10]
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	6a3a      	ldr	r2, [r7, #32]
 80054ca:	4952      	ldr	r1, [pc, #328]	; (8005614 <I2C_RequestMemoryRead+0x1cc>)
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f8fa 	bl	80056c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054d2:	4603      	mov	r3, r0
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e097      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	617b      	str	r3, [r7, #20]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	617b      	str	r3, [r7, #20]
 80054f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054f4:	6a39      	ldr	r1, [r7, #32]
 80054f6:	68f8      	ldr	r0, [r7, #12]
 80054f8:	f000 f964 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005506:	2b04      	cmp	r3, #4
 8005508:	d107      	bne.n	800551a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005518:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e076      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b01      	cmp	r3, #1
 8005522:	d105      	bne.n	8005530 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005524:	893b      	ldrh	r3, [r7, #8]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]
 800552e:	e021      	b.n	8005574 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005530:	893b      	ldrh	r3, [r7, #8]
 8005532:	0a1b      	lsrs	r3, r3, #8
 8005534:	b29b      	uxth	r3, r3
 8005536:	b2da      	uxtb	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	6a39      	ldr	r1, [r7, #32]
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f93e 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b04      	cmp	r3, #4
 8005554:	d107      	bne.n	8005566 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005564:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e050      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800556a:	893b      	ldrh	r3, [r7, #8]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	6a39      	ldr	r1, [r7, #32]
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 f923 	bl	80057c4 <I2C_WaitOnTXEFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00d      	beq.n	80055a0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	2b04      	cmp	r3, #4
 800558a:	d107      	bne.n	800559c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800559a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e035      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f82b 	bl	8005618 <I2C_WaitOnFlagUntilTimeout>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00d      	beq.n	80055e4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d6:	d103      	bne.n	80055e0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e013      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055e4:	897b      	ldrh	r3, [r7, #10]
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	6a3a      	ldr	r2, [r7, #32]
 80055f8:	4906      	ldr	r1, [pc, #24]	; (8005614 <I2C_RequestMemoryRead+0x1cc>)
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	f000 f863 	bl	80056c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e000      	b.n	800560c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	00010002 	.word	0x00010002

08005618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	4613      	mov	r3, r2
 8005626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005628:	e025      	b.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005630:	d021      	beq.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005632:	f7fe fb65 	bl	8003d00 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	683a      	ldr	r2, [r7, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d302      	bcc.n	8005648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d116      	bne.n	8005676 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2200      	movs	r2, #0
 800564c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2220      	movs	r2, #32
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005662:	f043 0220 	orr.w	r2, r3, #32
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e023      	b.n	80056be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	0c1b      	lsrs	r3, r3, #16
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b01      	cmp	r3, #1
 800567e:	d10d      	bne.n	800569c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	43da      	mvns	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	bf0c      	ite	eq
 8005692:	2301      	moveq	r3, #1
 8005694:	2300      	movne	r3, #0
 8005696:	b2db      	uxtb	r3, r3
 8005698:	461a      	mov	r2, r3
 800569a:	e00c      	b.n	80056b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	43da      	mvns	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	4013      	ands	r3, r2
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf0c      	ite	eq
 80056ae:	2301      	moveq	r3, #1
 80056b0:	2300      	movne	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	79fb      	ldrb	r3, [r7, #7]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d0b6      	beq.n	800562a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056d4:	e051      	b.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e4:	d123      	bne.n	800572e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f043 0204 	orr.w	r2, r3, #4
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e046      	b.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005734:	d021      	beq.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005736:	f7fe fae3 	bl	8003d00 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d116      	bne.n	800577a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2220      	movs	r2, #32
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	f043 0220 	orr.w	r2, r3, #32
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e020      	b.n	80057bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0c1b      	lsrs	r3, r3, #16
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b01      	cmp	r3, #1
 8005782:	d10c      	bne.n	800579e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	43da      	mvns	r2, r3
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4013      	ands	r3, r2
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e00b      	b.n	80057b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699b      	ldr	r3, [r3, #24]
 80057a4:	43da      	mvns	r2, r3
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4013      	ands	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d18d      	bne.n	80056d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}

080057c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057d0:	e02d      	b.n	800582e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 f8ce 	bl	8005974 <I2C_IsAcknowledgeFailed>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e02d      	b.n	800583e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d021      	beq.n	800582e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ea:	f7fe fa89 	bl	8003d00 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d302      	bcc.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d116      	bne.n	800582e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2220      	movs	r2, #32
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0220 	orr.w	r2, r3, #32
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	e007      	b.n	800583e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b80      	cmp	r3, #128	; 0x80
 800583a:	d1ca      	bne.n	80057d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005852:	e02d      	b.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f88d 	bl	8005974 <I2C_IsAcknowledgeFailed>
 800585a:	4603      	mov	r3, r0
 800585c:	2b00      	cmp	r3, #0
 800585e:	d001      	beq.n	8005864 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e02d      	b.n	80058c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d021      	beq.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800586c:	f7fe fa48 	bl	8003d00 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	429a      	cmp	r2, r3
 800587a:	d302      	bcc.n	8005882 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d116      	bne.n	80058b0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e007      	b.n	80058c0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d1ca      	bne.n	8005854 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058d4:	e042      	b.n	800595c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f003 0310 	and.w	r3, r3, #16
 80058e0:	2b10      	cmp	r3, #16
 80058e2:	d119      	bne.n	8005918 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f06f 0210 	mvn.w	r2, #16
 80058ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e029      	b.n	800596c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005918:	f7fe f9f2 	bl	8003d00 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d116      	bne.n	800595c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e007      	b.n	800596c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d1b5      	bne.n	80058d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598a:	d11b      	bne.n	80059c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005994:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b0:	f043 0204 	orr.w	r2, r3, #4
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e000      	b.n	80059c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	370c      	adds	r7, #12
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d4:	b08f      	sub	sp, #60	; 0x3c
 80059d6:	af0a      	add	r7, sp, #40	; 0x28
 80059d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e116      	b.n	8005c12 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f007 fae2 	bl	800cfc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2203      	movs	r2, #3
 8005a08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d102      	bne.n	8005a1e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f003 fcc5 	bl	80093b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	687e      	ldr	r6, [r7, #4]
 8005a30:	466d      	mov	r5, sp
 8005a32:	f106 0410 	add.w	r4, r6, #16
 8005a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a3e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a42:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a46:	1d33      	adds	r3, r6, #4
 8005a48:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a4a:	6838      	ldr	r0, [r7, #0]
 8005a4c:	f003 fb9c 	bl	8009188 <USB_CoreInit>
 8005a50:	4603      	mov	r3, r0
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d005      	beq.n	8005a62 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2202      	movs	r2, #2
 8005a5a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e0d7      	b.n	8005c12 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2100      	movs	r1, #0
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f003 fcb3 	bl	80093d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a6e:	2300      	movs	r3, #0
 8005a70:	73fb      	strb	r3, [r7, #15]
 8005a72:	e04a      	b.n	8005b0a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	333d      	adds	r3, #61	; 0x3d
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a88:	7bfa      	ldrb	r2, [r7, #15]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	333c      	adds	r3, #60	; 0x3c
 8005a98:	7bfa      	ldrb	r2, [r7, #15]
 8005a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a9c:	7bfa      	ldrb	r2, [r7, #15]
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	b298      	uxth	r0, r3
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3342      	adds	r3, #66	; 0x42
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	333f      	adds	r3, #63	; 0x3f
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005ac8:	7bfa      	ldrb	r2, [r7, #15]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3344      	adds	r3, #68	; 0x44
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005adc:	7bfa      	ldrb	r2, [r7, #15]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	00db      	lsls	r3, r3, #3
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	3348      	adds	r3, #72	; 0x48
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005af0:	7bfa      	ldrb	r2, [r7, #15]
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	4613      	mov	r3, r2
 8005af6:	00db      	lsls	r3, r3, #3
 8005af8:	1a9b      	subs	r3, r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	440b      	add	r3, r1
 8005afe:	3350      	adds	r3, #80	; 0x50
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	3301      	adds	r3, #1
 8005b08:	73fb      	strb	r3, [r7, #15]
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d3af      	bcc.n	8005a74 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]
 8005b18:	e044      	b.n	8005ba4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b30:	7bfa      	ldrb	r2, [r7, #15]
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005b42:	7bfa      	ldrb	r2, [r7, #15]
 8005b44:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b46:	7bfa      	ldrb	r2, [r7, #15]
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	00db      	lsls	r3, r3, #3
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	440b      	add	r3, r1
 8005b54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b58:	2200      	movs	r2, #0
 8005b5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b5c:	7bfa      	ldrb	r2, [r7, #15]
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	00db      	lsls	r3, r3, #3
 8005b64:	1a9b      	subs	r3, r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	440b      	add	r3, r1
 8005b6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b6e:	2200      	movs	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b72:	7bfa      	ldrb	r2, [r7, #15]
 8005b74:	6879      	ldr	r1, [r7, #4]
 8005b76:	4613      	mov	r3, r2
 8005b78:	00db      	lsls	r3, r3, #3
 8005b7a:	1a9b      	subs	r3, r3, r2
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	440b      	add	r3, r1
 8005b80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b88:	7bfa      	ldrb	r2, [r7, #15]
 8005b8a:	6879      	ldr	r1, [r7, #4]
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	1a9b      	subs	r3, r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	440b      	add	r3, r1
 8005b96:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	73fb      	strb	r3, [r7, #15]
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d3b5      	bcc.n	8005b1a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	603b      	str	r3, [r7, #0]
 8005bb4:	687e      	ldr	r6, [r7, #4]
 8005bb6:	466d      	mov	r5, sp
 8005bb8:	f106 0410 	add.w	r4, r6, #16
 8005bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005bc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005bc4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005bc8:	e885 0003 	stmia.w	r5, {r0, r1}
 8005bcc:	1d33      	adds	r3, r6, #4
 8005bce:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005bd0:	6838      	ldr	r0, [r7, #0]
 8005bd2:	f003 fc29 	bl	8009428 <USB_DevInit>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d005      	beq.n	8005be8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2202      	movs	r2, #2
 8005be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e014      	b.n	8005c12 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d102      	bne.n	8005c06 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f001 f891 	bl	8006d28 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f004 fc64 	bl	800a4d8 <USB_DevDisconnect>

  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_PCD_Start+0x1c>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e020      	b.n	8005c78 <HAL_PCD_Start+0x5e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d109      	bne.n	8005c5a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d005      	beq.n	8005c5a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f003 fb96 	bl	8009390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f004 fc14 	bl	800a496 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b08d      	sub	sp, #52	; 0x34
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4618      	mov	r0, r3
 8005c98:	f004 fcd2 	bl	800a640 <USB_GetMode>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	f040 83ca 	bne.w	8006438 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f004 fc36 	bl	800a51a <USB_ReadInterrupts>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 83c0 	beq.w	8006436 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f004 fc2d 	bl	800a51a <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d107      	bne.n	8005cda <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695a      	ldr	r2, [r3, #20]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f002 0202 	and.w	r2, r2, #2
 8005cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f004 fc1b 	bl	800a51a <USB_ReadInterrupts>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	f003 0310 	and.w	r3, r3, #16
 8005cea:	2b10      	cmp	r3, #16
 8005cec:	d161      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699a      	ldr	r2, [r3, #24]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0210 	bic.w	r2, r2, #16
 8005cfc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	6a1b      	ldr	r3, [r3, #32]
 8005d02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	f003 020f 	and.w	r2, r3, #15
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4413      	add	r3, r2
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	0c5b      	lsrs	r3, r3, #17
 8005d22:	f003 030f 	and.w	r3, r3, #15
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d124      	bne.n	8005d74 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d035      	beq.n	8005da2 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	091b      	lsrs	r3, r3, #4
 8005d3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	6a38      	ldr	r0, [r7, #32]
 8005d4a:	f004 fa81 	bl	800a250 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d5a:	441a      	add	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	699a      	ldr	r2, [r3, #24]
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d6c:	441a      	add	r2, r3
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	619a      	str	r2, [r3, #24]
 8005d72:	e016      	b.n	8005da2 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	0c5b      	lsrs	r3, r3, #17
 8005d78:	f003 030f 	and.w	r3, r3, #15
 8005d7c:	2b06      	cmp	r3, #6
 8005d7e:	d110      	bne.n	8005da2 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d86:	2208      	movs	r2, #8
 8005d88:	4619      	mov	r1, r3
 8005d8a:	6a38      	ldr	r0, [r7, #32]
 8005d8c:	f004 fa60 	bl	800a250 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	699a      	ldr	r2, [r3, #24]
 8005d94:	69bb      	ldr	r3, [r7, #24]
 8005d96:	091b      	lsrs	r3, r3, #4
 8005d98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d9c:	441a      	add	r2, r3
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699a      	ldr	r2, [r3, #24]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0210 	orr.w	r2, r2, #16
 8005db0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f004 fbaf 	bl	800a51a <USB_ReadInterrupts>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005dc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dc6:	d16e      	bne.n	8005ea6 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f004 fbb5 	bl	800a540 <USB_ReadDevAllOutEpInterrupt>
 8005dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005dd8:	e062      	b.n	8005ea0 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	f003 0301 	and.w	r3, r3, #1
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d057      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	4611      	mov	r1, r2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f004 fbda 	bl	800a5a8 <USB_ReadDevOutEPInterrupt>
 8005df4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00c      	beq.n	8005e1a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	2301      	movs	r3, #1
 8005e10:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f000 fddd 	bl	80069d4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00c      	beq.n	8005e3e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	2308      	movs	r3, #8
 8005e34:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fed7 	bl	8006bec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f003 0310 	and.w	r3, r3, #16
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	015a      	lsls	r2, r3, #5
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e54:	461a      	mov	r2, r3
 8005e56:	2310      	movs	r3, #16
 8005e58:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f003 0320 	and.w	r3, r3, #32
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d008      	beq.n	8005e76 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	015a      	lsls	r2, r3, #5
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	4413      	add	r3, r2
 8005e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e70:	461a      	mov	r2, r3
 8005e72:	2320      	movs	r3, #32
 8005e74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	015a      	lsls	r2, r3, #5
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	4413      	add	r3, r2
 8005e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e92:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e96:	3301      	adds	r3, #1
 8005e98:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d199      	bne.n	8005dda <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f004 fb35 	bl	800a51a <USB_ReadInterrupts>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005eba:	f040 80c0 	bne.w	800603e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f004 fb56 	bl	800a574 <USB_ReadDevAllInEpInterrupt>
 8005ec8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ece:	e0b2      	b.n	8006036 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80a7 	beq.w	800602a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f004 fb7c 	bl	800a5e4 <USB_ReadDevInEPInterrupt>
 8005eec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d057      	beq.n	8005fa8 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	2201      	movs	r2, #1
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	43db      	mvns	r3, r3
 8005f12:	69f9      	ldr	r1, [r7, #28]
 8005f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f18:	4013      	ands	r3, r2
 8005f1a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f28:	461a      	mov	r2, r3
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d132      	bne.n	8005f9c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3348      	adds	r3, #72	; 0x48
 8005f46:	6819      	ldr	r1, [r3, #0]
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4403      	add	r3, r0
 8005f56:	3344      	adds	r3, #68	; 0x44
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4419      	add	r1, r3
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f60:	4613      	mov	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4403      	add	r3, r0
 8005f6a:	3348      	adds	r3, #72	; 0x48
 8005f6c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d113      	bne.n	8005f9c <HAL_PCD_IRQHandler+0x31c>
 8005f74:	6879      	ldr	r1, [r7, #4]
 8005f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f78:	4613      	mov	r3, r2
 8005f7a:	00db      	lsls	r3, r3, #3
 8005f7c:	1a9b      	subs	r3, r3, r2
 8005f7e:	009b      	lsls	r3, r3, #2
 8005f80:	440b      	add	r3, r1
 8005f82:	3350      	adds	r3, #80	; 0x50
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d108      	bne.n	8005f9c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6818      	ldr	r0, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f94:	461a      	mov	r2, r3
 8005f96:	2101      	movs	r1, #1
 8005f98:	f004 fb84 	bl	800a6a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f007 f891 	bl	800d0ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d008      	beq.n	8005fc4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d008      	beq.n	8005fe0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	461a      	mov	r2, r3
 8005fdc:	2310      	movs	r3, #16
 8005fde:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d008      	beq.n	8005ffc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	015a      	lsls	r2, r3, #5
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff6:	461a      	mov	r2, r3
 8005ff8:	2340      	movs	r3, #64	; 0x40
 8005ffa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	461a      	mov	r2, r3
 8006014:	2302      	movs	r3, #2
 8006016:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006022:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 fc48 	bl	80068ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800602a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602c:	3301      	adds	r3, #1
 800602e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006032:	085b      	lsrs	r3, r3, #1
 8006034:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006038:	2b00      	cmp	r3, #0
 800603a:	f47f af49 	bne.w	8005ed0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4618      	mov	r0, r3
 8006044:	f004 fa69 	bl	800a51a <USB_ReadInterrupts>
 8006048:	4603      	mov	r3, r0
 800604a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006052:	d122      	bne.n	800609a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006062:	f023 0301 	bic.w	r3, r3, #1
 8006066:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800606e:	2b01      	cmp	r3, #1
 8006070:	d108      	bne.n	8006084 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800607a:	2100      	movs	r1, #0
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f007 fa73 	bl	800d568 <HAL_PCDEx_LPM_Callback>
 8006082:	e002      	b.n	800608a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f007 f897 	bl	800d1b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	695a      	ldr	r2, [r3, #20]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006098:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 fa3b 	bl	800a51a <USB_ReadInterrupts>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ae:	d112      	bne.n	80060d6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d102      	bne.n	80060c6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f007 f853 	bl	800d16c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80060d4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f004 fa1d 	bl	800a51a <USB_ReadInterrupts>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ea:	d121      	bne.n	8006130 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	695a      	ldr	r2, [r3, #20]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80060fa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d111      	bne.n	800612a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	089b      	lsrs	r3, r3, #2
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006120:	2101      	movs	r1, #1
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f007 fa20 	bl	800d568 <HAL_PCDEx_LPM_Callback>
 8006128:	e002      	b.n	8006130 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f007 f81e 	bl	800d16c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f004 f9f0 	bl	800a51a <USB_ReadInterrupts>
 800613a:	4603      	mov	r3, r0
 800613c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006144:	f040 80c7 	bne.w	80062d6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	69fa      	ldr	r2, [r7, #28]
 8006152:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006156:	f023 0301 	bic.w	r3, r3, #1
 800615a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2110      	movs	r1, #16
 8006162:	4618      	mov	r0, r3
 8006164:	f003 fabe 	bl	80096e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006168:	2300      	movs	r3, #0
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800616c:	e056      	b.n	800621c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	461a      	mov	r2, r3
 800617c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006180:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006192:	0151      	lsls	r1, r2, #5
 8006194:	69fa      	ldr	r2, [r7, #28]
 8006196:	440a      	add	r2, r1
 8006198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061a0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80061a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80061c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	461a      	mov	r2, r3
 80061d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d8:	015a      	lsls	r2, r3, #5
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	4413      	add	r3, r2
 80061de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061e6:	0151      	lsls	r1, r2, #5
 80061e8:	69fa      	ldr	r2, [r7, #28]
 80061ea:	440a      	add	r2, r1
 80061ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006210:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006214:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	3301      	adds	r3, #1
 800621a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006222:	429a      	cmp	r2, r3
 8006224:	d3a3      	bcc.n	800616e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006234:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006238:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623e:	2b00      	cmp	r3, #0
 8006240:	d016      	beq.n	8006270 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006248:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624c:	69fa      	ldr	r2, [r7, #28]
 800624e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006252:	f043 030b 	orr.w	r3, r3, #11
 8006256:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006268:	f043 030b 	orr.w	r3, r3, #11
 800626c:	6453      	str	r3, [r2, #68]	; 0x44
 800626e:	e015      	b.n	800629c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800627e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006282:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006286:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006296:	f043 030b 	orr.w	r3, r3, #11
 800629a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80062ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6818      	ldr	r0, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80062c0:	461a      	mov	r2, r3
 80062c2:	f004 f9ef 	bl	800a6a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80062d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4618      	mov	r0, r3
 80062dc:	f004 f91d 	bl	800a51a <USB_ReadInterrupts>
 80062e0:	4603      	mov	r3, r0
 80062e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ea:	d124      	bne.n	8006336 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4618      	mov	r0, r3
 80062f2:	f004 f9b3 	bl	800a65c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4618      	mov	r0, r3
 80062fc:	f003 fa53 	bl	80097a6 <USB_GetDevSpeed>
 8006300:	4603      	mov	r3, r0
 8006302:	461a      	mov	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681c      	ldr	r4, [r3, #0]
 800630c:	f000 fe66 	bl	8006fdc <HAL_RCC_GetHCLKFreq>
 8006310:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006316:	b2db      	uxtb	r3, r3
 8006318:	461a      	mov	r2, r3
 800631a:	4620      	mov	r0, r4
 800631c:	f002 ff96 	bl	800924c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f006 fefa 	bl	800d11a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695a      	ldr	r2, [r3, #20]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006334:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f004 f8ed 	bl	800a51a <USB_ReadInterrupts>
 8006340:	4603      	mov	r3, r0
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b08      	cmp	r3, #8
 8006348:	d10a      	bne.n	8006360 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f006 fed7 	bl	800d0fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695a      	ldr	r2, [r3, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f002 0208 	and.w	r2, r2, #8
 800635e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4618      	mov	r0, r3
 8006366:	f004 f8d8 	bl	800a51a <USB_ReadInterrupts>
 800636a:	4603      	mov	r3, r0
 800636c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006370:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006374:	d10f      	bne.n	8006396 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	b2db      	uxtb	r3, r3
 800637e:	4619      	mov	r1, r3
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f006 ff39 	bl	800d1f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	695a      	ldr	r2, [r3, #20]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4618      	mov	r0, r3
 800639c:	f004 f8bd 	bl	800a51a <USB_ReadInterrupts>
 80063a0:	4603      	mov	r3, r0
 80063a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063aa:	d10f      	bne.n	80063cc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f006 ff0c 	bl	800d1d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80063ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f004 f8a2 	bl	800a51a <USB_ReadInterrupts>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e0:	d10a      	bne.n	80063f8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f006 ff1a 	bl	800d21c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80063f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f004 f88c 	bl	800a51a <USB_ReadInterrupts>
 8006402:	4603      	mov	r3, r0
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b04      	cmp	r3, #4
 800640a:	d115      	bne.n	8006438 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f003 0304 	and.w	r3, r3, #4
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f006 ff0a 	bl	800d238 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6859      	ldr	r1, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	69ba      	ldr	r2, [r7, #24]
 8006430:	430a      	orrs	r2, r1
 8006432:	605a      	str	r2, [r3, #4]
 8006434:	e000      	b.n	8006438 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8006436:	bf00      	nop
    }
  }
}
 8006438:	3734      	adds	r7, #52	; 0x34
 800643a:	46bd      	mov	sp, r7
 800643c:	bd90      	pop	{r4, r7, pc}

0800643e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800643e:	b580      	push	{r7, lr}
 8006440:	b082      	sub	sp, #8
 8006442:	af00      	add	r7, sp, #0
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	460b      	mov	r3, r1
 8006448:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006450:	2b01      	cmp	r3, #1
 8006452:	d101      	bne.n	8006458 <HAL_PCD_SetAddress+0x1a>
 8006454:	2302      	movs	r3, #2
 8006456:	e013      	b.n	8006480 <HAL_PCD_SetAddress+0x42>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	78fa      	ldrb	r2, [r7, #3]
 8006464:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	4611      	mov	r1, r2
 8006470:	4618      	mov	r0, r3
 8006472:	f003 ffea 	bl	800a44a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	4608      	mov	r0, r1
 8006492:	4611      	mov	r1, r2
 8006494:	461a      	mov	r2, r3
 8006496:	4603      	mov	r3, r0
 8006498:	70fb      	strb	r3, [r7, #3]
 800649a:	460b      	mov	r3, r1
 800649c:	803b      	strh	r3, [r7, #0]
 800649e:	4613      	mov	r3, r2
 80064a0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80064a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	da0f      	bge.n	80064ce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80064ae:	78fb      	ldrb	r3, [r7, #3]
 80064b0:	f003 020f 	and.w	r2, r3, #15
 80064b4:	4613      	mov	r3, r2
 80064b6:	00db      	lsls	r3, r3, #3
 80064b8:	1a9b      	subs	r3, r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	3338      	adds	r3, #56	; 0x38
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	4413      	add	r3, r2
 80064c2:	3304      	adds	r3, #4
 80064c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2201      	movs	r2, #1
 80064ca:	705a      	strb	r2, [r3, #1]
 80064cc:	e00f      	b.n	80064ee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064ce:	78fb      	ldrb	r3, [r7, #3]
 80064d0:	f003 020f 	and.w	r2, r3, #15
 80064d4:	4613      	mov	r3, r2
 80064d6:	00db      	lsls	r3, r3, #3
 80064d8:	1a9b      	subs	r3, r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	4413      	add	r3, r2
 80064e4:	3304      	adds	r3, #4
 80064e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80064ee:	78fb      	ldrb	r3, [r7, #3]
 80064f0:	f003 030f 	and.w	r3, r3, #15
 80064f4:	b2da      	uxtb	r2, r3
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80064fa:	883a      	ldrh	r2, [r7, #0]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	78ba      	ldrb	r2, [r7, #2]
 8006504:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	785b      	ldrb	r3, [r3, #1]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d004      	beq.n	8006518 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	b29a      	uxth	r2, r3
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006518:	78bb      	ldrb	r3, [r7, #2]
 800651a:	2b02      	cmp	r3, #2
 800651c:	d102      	bne.n	8006524 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800652a:	2b01      	cmp	r3, #1
 800652c:	d101      	bne.n	8006532 <HAL_PCD_EP_Open+0xaa>
 800652e:	2302      	movs	r3, #2
 8006530:	e00e      	b.n	8006550 <HAL_PCD_EP_Open+0xc8>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2201      	movs	r2, #1
 8006536:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	4618      	mov	r0, r3
 8006542:	f003 f955 	bl	80097f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800654e:	7afb      	ldrb	r3, [r7, #11]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006568:	2b00      	cmp	r3, #0
 800656a:	da0f      	bge.n	800658c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800656c:	78fb      	ldrb	r3, [r7, #3]
 800656e:	f003 020f 	and.w	r2, r3, #15
 8006572:	4613      	mov	r3, r2
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	1a9b      	subs	r3, r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	3338      	adds	r3, #56	; 0x38
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	4413      	add	r3, r2
 8006580:	3304      	adds	r3, #4
 8006582:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2201      	movs	r2, #1
 8006588:	705a      	strb	r2, [r3, #1]
 800658a:	e00f      	b.n	80065ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	f003 020f 	and.w	r2, r3, #15
 8006592:	4613      	mov	r3, r2
 8006594:	00db      	lsls	r3, r3, #3
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	4413      	add	r3, r2
 80065a2:	3304      	adds	r3, #4
 80065a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	f003 030f 	and.w	r3, r3, #15
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d101      	bne.n	80065c6 <HAL_PCD_EP_Close+0x6e>
 80065c2:	2302      	movs	r3, #2
 80065c4:	e00e      	b.n	80065e4 <HAL_PCD_EP_Close+0x8c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2201      	movs	r2, #1
 80065ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f003 f993 	bl	8009900 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	603b      	str	r3, [r7, #0]
 80065f8:	460b      	mov	r3, r1
 80065fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065fc:	7afb      	ldrb	r3, [r7, #11]
 80065fe:	f003 020f 	and.w	r2, r3, #15
 8006602:	4613      	mov	r3, r2
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	1a9b      	subs	r3, r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	4413      	add	r3, r2
 8006612:	3304      	adds	r3, #4
 8006614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2200      	movs	r2, #0
 8006626:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800662e:	7afb      	ldrb	r3, [r7, #11]
 8006630:	f003 030f 	and.w	r3, r3, #15
 8006634:	b2da      	uxtb	r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	2b01      	cmp	r3, #1
 8006640:	d102      	bne.n	8006648 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006648:	7afb      	ldrb	r3, [r7, #11]
 800664a:	f003 030f 	and.w	r3, r3, #15
 800664e:	2b00      	cmp	r3, #0
 8006650:	d109      	bne.n	8006666 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	b2db      	uxtb	r3, r3
 800665c:	461a      	mov	r2, r3
 800665e:	6979      	ldr	r1, [r7, #20]
 8006660:	f003 fc6e 	bl	8009f40 <USB_EP0StartXfer>
 8006664:	e008      	b.n	8006678 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	b2db      	uxtb	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	6979      	ldr	r1, [r7, #20]
 8006674:	f003 fa20 	bl	8009ab8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3718      	adds	r7, #24
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800668e:	78fb      	ldrb	r3, [r7, #3]
 8006690:	f003 020f 	and.w	r2, r3, #15
 8006694:	6879      	ldr	r1, [r7, #4]
 8006696:	4613      	mov	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	1a9b      	subs	r3, r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80066a4:	681b      	ldr	r3, [r3, #0]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	370c      	adds	r7, #12
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	607a      	str	r2, [r7, #4]
 80066bc:	603b      	str	r3, [r7, #0]
 80066be:	460b      	mov	r3, r1
 80066c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066c2:	7afb      	ldrb	r3, [r7, #11]
 80066c4:	f003 020f 	and.w	r2, r3, #15
 80066c8:	4613      	mov	r3, r2
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	1a9b      	subs	r3, r3, r2
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	3338      	adds	r3, #56	; 0x38
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	3304      	adds	r3, #4
 80066d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	683a      	ldr	r2, [r7, #0]
 80066e4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	2200      	movs	r2, #0
 80066ea:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	2201      	movs	r2, #1
 80066f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066f2:	7afb      	ldrb	r3, [r7, #11]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	b2da      	uxtb	r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	2b01      	cmp	r3, #1
 8006704:	d102      	bne.n	800670c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	f003 030f 	and.w	r3, r3, #15
 8006712:	2b00      	cmp	r3, #0
 8006714:	d109      	bne.n	800672a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6818      	ldr	r0, [r3, #0]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	6979      	ldr	r1, [r7, #20]
 8006724:	f003 fc0c 	bl	8009f40 <USB_EP0StartXfer>
 8006728:	e008      	b.n	800673c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	6979      	ldr	r1, [r7, #20]
 8006738:	f003 f9be 	bl	8009ab8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006746:	b580      	push	{r7, lr}
 8006748:	b084      	sub	sp, #16
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]
 800674e:	460b      	mov	r3, r1
 8006750:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006752:	78fb      	ldrb	r3, [r7, #3]
 8006754:	f003 020f 	and.w	r2, r3, #15
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	429a      	cmp	r2, r3
 800675e:	d901      	bls.n	8006764 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e050      	b.n	8006806 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006764:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006768:	2b00      	cmp	r3, #0
 800676a:	da0f      	bge.n	800678c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	f003 020f 	and.w	r2, r3, #15
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	1a9b      	subs	r3, r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	3338      	adds	r3, #56	; 0x38
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4413      	add	r3, r2
 8006780:	3304      	adds	r3, #4
 8006782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	705a      	strb	r2, [r3, #1]
 800678a:	e00d      	b.n	80067a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800678c:	78fa      	ldrb	r2, [r7, #3]
 800678e:	4613      	mov	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	4413      	add	r3, r2
 800679e:	3304      	adds	r3, #4
 80067a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2201      	movs	r2, #1
 80067ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80067ae:	78fb      	ldrb	r3, [r7, #3]
 80067b0:	f003 030f 	and.w	r3, r3, #15
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d101      	bne.n	80067c8 <HAL_PCD_EP_SetStall+0x82>
 80067c4:	2302      	movs	r3, #2
 80067c6:	e01e      	b.n	8006806 <HAL_PCD_EP_SetStall+0xc0>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68f9      	ldr	r1, [r7, #12]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f003 fd63 	bl	800a2a2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	b2d9      	uxtb	r1, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067f6:	461a      	mov	r2, r3
 80067f8:	f003 ff54 	bl	800a6a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	460b      	mov	r3, r1
 8006818:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800681a:	78fb      	ldrb	r3, [r7, #3]
 800681c:	f003 020f 	and.w	r2, r3, #15
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	429a      	cmp	r2, r3
 8006826:	d901      	bls.n	800682c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e042      	b.n	80068b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800682c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006830:	2b00      	cmp	r3, #0
 8006832:	da0f      	bge.n	8006854 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006834:	78fb      	ldrb	r3, [r7, #3]
 8006836:	f003 020f 	and.w	r2, r3, #15
 800683a:	4613      	mov	r3, r2
 800683c:	00db      	lsls	r3, r3, #3
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	3338      	adds	r3, #56	; 0x38
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4413      	add	r3, r2
 8006848:	3304      	adds	r3, #4
 800684a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2201      	movs	r2, #1
 8006850:	705a      	strb	r2, [r3, #1]
 8006852:	e00f      	b.n	8006874 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006854:	78fb      	ldrb	r3, [r7, #3]
 8006856:	f003 020f 	and.w	r2, r3, #15
 800685a:	4613      	mov	r3, r2
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	1a9b      	subs	r3, r3, r2
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	4413      	add	r3, r2
 800686a:	3304      	adds	r3, #4
 800686c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2200      	movs	r2, #0
 8006872:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800687a:	78fb      	ldrb	r3, [r7, #3]
 800687c:	f003 030f 	and.w	r3, r3, #15
 8006880:	b2da      	uxtb	r2, r3
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800688c:	2b01      	cmp	r3, #1
 800688e:	d101      	bne.n	8006894 <HAL_PCD_EP_ClrStall+0x86>
 8006890:	2302      	movs	r3, #2
 8006892:	e00e      	b.n	80068b2 <HAL_PCD_EP_ClrStall+0xa4>
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68f9      	ldr	r1, [r7, #12]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f003 fd6b 	bl	800a37e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80068b0:	2300      	movs	r3, #0
}
 80068b2:	4618      	mov	r0, r3
 80068b4:	3710      	adds	r7, #16
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b08a      	sub	sp, #40	; 0x28
 80068be:	af02      	add	r7, sp, #8
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	4613      	mov	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	3338      	adds	r3, #56	; 0x38
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4413      	add	r3, r2
 80068de:	3304      	adds	r3, #4
 80068e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	699a      	ldr	r2, [r3, #24]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	695b      	ldr	r3, [r3, #20]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d901      	bls.n	80068f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e06c      	b.n	80069cc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	695a      	ldr	r2, [r3, #20]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	69fa      	ldr	r2, [r7, #28]
 8006904:	429a      	cmp	r2, r3
 8006906:	d902      	bls.n	800690e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	3303      	adds	r3, #3
 8006912:	089b      	lsrs	r3, r3, #2
 8006914:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006916:	e02b      	b.n	8006970 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	695a      	ldr	r2, [r3, #20]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	699b      	ldr	r3, [r3, #24]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	69fa      	ldr	r2, [r7, #28]
 800692a:	429a      	cmp	r2, r3
 800692c:	d902      	bls.n	8006934 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	3303      	adds	r3, #3
 8006938:	089b      	lsrs	r3, r3, #2
 800693a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68d9      	ldr	r1, [r3, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	b2da      	uxtb	r2, r3
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800694c:	b2db      	uxtb	r3, r3
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	4603      	mov	r3, r0
 8006952:	6978      	ldr	r0, [r7, #20]
 8006954:	f003 fc47 	bl	800a1e6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	441a      	add	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	015a      	lsls	r2, r3, #5
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	4413      	add	r3, r2
 8006978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	b29b      	uxth	r3, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	429a      	cmp	r2, r3
 8006984:	d809      	bhi.n	800699a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800698e:	429a      	cmp	r2, r3
 8006990:	d203      	bcs.n	800699a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1be      	bne.n	8006918 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	695a      	ldr	r2, [r3, #20]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d811      	bhi.n	80069ca <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	f003 030f 	and.w	r3, r3, #15
 80069ac:	2201      	movs	r2, #1
 80069ae:	fa02 f303 	lsl.w	r3, r2, r3
 80069b2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	43db      	mvns	r3, r3
 80069c0:	6939      	ldr	r1, [r7, #16]
 80069c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069c6:	4013      	ands	r3, r2
 80069c8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	333c      	adds	r3, #60	; 0x3c
 80069ec:	3304      	adds	r3, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	015a      	lsls	r2, r3, #5
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	4413      	add	r3, r2
 80069fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	f040 80a0 	bne.w	8006b4c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d015      	beq.n	8006a42 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4a72      	ldr	r2, [pc, #456]	; (8006be4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	f240 80dd 	bls.w	8006bda <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80d7 	beq.w	8006bda <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a38:	461a      	mov	r2, r3
 8006a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a3e:	6093      	str	r3, [r2, #8]
 8006a40:	e0cb      	b.n	8006bda <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d009      	beq.n	8006a60 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2320      	movs	r3, #32
 8006a5c:	6093      	str	r3, [r2, #8]
 8006a5e:	e0bc      	b.n	8006bda <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f040 80b7 	bne.w	8006bda <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a5d      	ldr	r2, [pc, #372]	; (8006be4 <PCD_EP_OutXfrComplete_int+0x210>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d90f      	bls.n	8006a94 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d00a      	beq.n	8006a94 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a90:	6093      	str	r3, [r2, #8]
 8006a92:	e0a2      	b.n	8006bda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	440b      	add	r3, r1
 8006aa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006aa6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	0159      	lsls	r1, r3, #5
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	440b      	add	r3, r1
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	691b      	ldr	r3, [r3, #16]
 8006ab6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006aba:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4403      	add	r3, r0
 8006aca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006ace:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006ad0:	6879      	ldr	r1, [r7, #4]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	00db      	lsls	r3, r3, #3
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	440b      	add	r3, r1
 8006ade:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ae2:	6819      	ldr	r1, [r3, #0]
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	1a9b      	subs	r3, r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4403      	add	r3, r0
 8006af2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4419      	add	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	4613      	mov	r3, r2
 8006b00:	00db      	lsls	r3, r3, #3
 8006b02:	1a9b      	subs	r3, r3, r2
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4403      	add	r3, r0
 8006b08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006b0c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d114      	bne.n	8006b3e <PCD_EP_OutXfrComplete_int+0x16a>
 8006b14:	6879      	ldr	r1, [r7, #4]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	1a9b      	subs	r3, r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d108      	bne.n	8006b3e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b36:	461a      	mov	r2, r3
 8006b38:	2101      	movs	r1, #1
 8006b3a:	f003 fdb3 	bl	800a6a4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f006 faa5 	bl	800d094 <HAL_PCD_DataOutStageCallback>
 8006b4a:	e046      	b.n	8006bda <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4a26      	ldr	r2, [pc, #152]	; (8006be8 <PCD_EP_OutXfrComplete_int+0x214>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d124      	bne.n	8006b9e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00a      	beq.n	8006b74 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	015a      	lsls	r2, r3, #5
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	4413      	add	r3, r2
 8006b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b70:	6093      	str	r3, [r2, #8]
 8006b72:	e032      	b.n	8006bda <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d008      	beq.n	8006b90 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2320      	movs	r3, #32
 8006b8e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	4619      	mov	r1, r3
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f006 fa7c 	bl	800d094 <HAL_PCD_DataOutStageCallback>
 8006b9c:	e01d      	b.n	8006bda <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d114      	bne.n	8006bce <PCD_EP_OutXfrComplete_int+0x1fa>
 8006ba4:	6879      	ldr	r1, [r7, #4]
 8006ba6:	683a      	ldr	r2, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	00db      	lsls	r3, r3, #3
 8006bac:	1a9b      	subs	r3, r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	440b      	add	r3, r1
 8006bb2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d108      	bne.n	8006bce <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6818      	ldr	r0, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f003 fd6b 	bl	800a6a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f006 fa5d 	bl	800d094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006bda:	2300      	movs	r3, #0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	4f54300a 	.word	0x4f54300a
 8006be8:	4f54310a 	.word	0x4f54310a

08006bec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	333c      	adds	r3, #60	; 0x3c
 8006c04:	3304      	adds	r3, #4
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	015a      	lsls	r2, r3, #5
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	4413      	add	r3, r2
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d90e      	bls.n	8006c40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d009      	beq.n	8006c40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c38:	461a      	mov	r2, r3
 8006c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f006 fa15 	bl	800d070 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	4a0a      	ldr	r2, [pc, #40]	; (8006c74 <PCD_EP_OutSetupPacket_int+0x88>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d90c      	bls.n	8006c68 <PCD_EP_OutSetupPacket_int+0x7c>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d108      	bne.n	8006c68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c60:	461a      	mov	r2, r3
 8006c62:	2101      	movs	r1, #1
 8006c64:	f003 fd1e 	bl	800a6a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c68:	2300      	movs	r3, #0
}
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	4f54300a 	.word	0x4f54300a

08006c78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	460b      	mov	r3, r1
 8006c82:	70fb      	strb	r3, [r7, #3]
 8006c84:	4613      	mov	r3, r2
 8006c86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c90:	78fb      	ldrb	r3, [r7, #3]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d107      	bne.n	8006ca6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c96:	883b      	ldrh	r3, [r7, #0]
 8006c98:	0419      	lsls	r1, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ca4:	e028      	b.n	8006cf8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cac:	0c1b      	lsrs	r3, r3, #16
 8006cae:	68ba      	ldr	r2, [r7, #8]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	73fb      	strb	r3, [r7, #15]
 8006cb8:	e00d      	b.n	8006cd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	3340      	adds	r3, #64	; 0x40
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	4413      	add	r3, r2
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	73fb      	strb	r3, [r7, #15]
 8006cd6:	7bfa      	ldrb	r2, [r7, #15]
 8006cd8:	78fb      	ldrb	r3, [r7, #3]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3ec      	bcc.n	8006cba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006ce0:	883b      	ldrh	r3, [r7, #0]
 8006ce2:	0418      	lsls	r0, r3, #16
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6819      	ldr	r1, [r3, #0]
 8006ce8:	78fb      	ldrb	r3, [r7, #3]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	4302      	orrs	r2, r0
 8006cf0:	3340      	adds	r3, #64	; 0x40
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	440b      	add	r3, r1
 8006cf6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	3714      	adds	r7, #20
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
 8006d0e:	460b      	mov	r3, r1
 8006d10:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	887a      	ldrh	r2, [r7, #2]
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2201      	movs	r2, #1
 8006d3a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d5a:	f043 0303 	orr.w	r3, r3, #3
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3714      	adds	r7, #20
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006d76:	2300      	movs	r3, #0
 8006d78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	603b      	str	r3, [r7, #0]
 8006d7e:	4b20      	ldr	r3, [pc, #128]	; (8006e00 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d82:	4a1f      	ldr	r2, [pc, #124]	; (8006e00 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d88:	6413      	str	r3, [r2, #64]	; 0x40
 8006d8a:	4b1d      	ldr	r3, [pc, #116]	; (8006e00 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d92:	603b      	str	r3, [r7, #0]
 8006d94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d96:	4b1b      	ldr	r3, [pc, #108]	; (8006e04 <HAL_PWREx_EnableOverDrive+0x94>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d9c:	f7fc ffb0 	bl	8003d00 <HAL_GetTick>
 8006da0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006da2:	e009      	b.n	8006db8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006da4:	f7fc ffac 	bl	8003d00 <HAL_GetTick>
 8006da8:	4602      	mov	r2, r0
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	1ad3      	subs	r3, r2, r3
 8006dae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006db2:	d901      	bls.n	8006db8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e01f      	b.n	8006df8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006db8:	4b13      	ldr	r3, [pc, #76]	; (8006e08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dc4:	d1ee      	bne.n	8006da4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006dc8:	2201      	movs	r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006dcc:	f7fc ff98 	bl	8003d00 <HAL_GetTick>
 8006dd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dd2:	e009      	b.n	8006de8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dd4:	f7fc ff94 	bl	8003d00 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006de2:	d901      	bls.n	8006de8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e007      	b.n	8006df8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006de8:	4b07      	ldr	r3, [pc, #28]	; (8006e08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006df4:	d1ee      	bne.n	8006dd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	40023800 	.word	0x40023800
 8006e04:	420e0040 	.word	0x420e0040
 8006e08:	40007000 	.word	0x40007000
 8006e0c:	420e0044 	.word	0x420e0044

08006e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d101      	bne.n	8006e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0cc      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006e24:	4b68      	ldr	r3, [pc, #416]	; (8006fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 030f 	and.w	r3, r3, #15
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d90c      	bls.n	8006e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e32:	4b65      	ldr	r3, [pc, #404]	; (8006fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e34:	683a      	ldr	r2, [r7, #0]
 8006e36:	b2d2      	uxtb	r2, r2
 8006e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e3a:	4b63      	ldr	r3, [pc, #396]	; (8006fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 030f 	and.w	r3, r3, #15
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d001      	beq.n	8006e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0b8      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d020      	beq.n	8006e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f003 0304 	and.w	r3, r3, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d005      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e64:	4b59      	ldr	r3, [pc, #356]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	4a58      	ldr	r2, [pc, #352]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0308 	and.w	r3, r3, #8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e7c:	4b53      	ldr	r3, [pc, #332]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	4a52      	ldr	r2, [pc, #328]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e88:	4b50      	ldr	r3, [pc, #320]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	494d      	ldr	r1, [pc, #308]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006e96:	4313      	orrs	r3, r2
 8006e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d044      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d107      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006eae:	4b47      	ldr	r3, [pc, #284]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d119      	bne.n	8006eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e07f      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	2b02      	cmp	r3, #2
 8006ec4:	d003      	beq.n	8006ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d107      	bne.n	8006ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ece:	4b3f      	ldr	r3, [pc, #252]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d109      	bne.n	8006eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e06f      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ede:	4b3b      	ldr	r3, [pc, #236]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e067      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006eee:	4b37      	ldr	r3, [pc, #220]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f023 0203 	bic.w	r2, r3, #3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	4934      	ldr	r1, [pc, #208]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006efc:	4313      	orrs	r3, r2
 8006efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f00:	f7fc fefe 	bl	8003d00 <HAL_GetTick>
 8006f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f06:	e00a      	b.n	8006f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f08:	f7fc fefa 	bl	8003d00 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d901      	bls.n	8006f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	e04f      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f1e:	4b2b      	ldr	r3, [pc, #172]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f003 020c 	and.w	r2, r3, #12
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d1eb      	bne.n	8006f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f30:	4b25      	ldr	r3, [pc, #148]	; (8006fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 030f 	and.w	r3, r3, #15
 8006f38:	683a      	ldr	r2, [r7, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d20c      	bcs.n	8006f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f3e:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	b2d2      	uxtb	r2, r2
 8006f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f46:	4b20      	ldr	r3, [pc, #128]	; (8006fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d001      	beq.n	8006f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e032      	b.n	8006fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d008      	beq.n	8006f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f64:	4b19      	ldr	r3, [pc, #100]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4916      	ldr	r1, [pc, #88]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0308 	and.w	r3, r3, #8
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d009      	beq.n	8006f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f82:	4b12      	ldr	r3, [pc, #72]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006f84:	689b      	ldr	r3, [r3, #8]
 8006f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	691b      	ldr	r3, [r3, #16]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	490e      	ldr	r1, [pc, #56]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f96:	f000 fb6b 	bl	8007670 <HAL_RCC_GetSysClockFreq>
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	4b0b      	ldr	r3, [pc, #44]	; (8006fcc <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	091b      	lsrs	r3, r3, #4
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	4a0a      	ldr	r2, [pc, #40]	; (8006fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa8:	5cd3      	ldrb	r3, [r2, r3]
 8006faa:	fa21 f303 	lsr.w	r3, r1, r3
 8006fae:	4a09      	ldr	r2, [pc, #36]	; (8006fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8006fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006fb2:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f7fc fe5e 	bl	8003c78 <HAL_InitTick>

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	40023c00 	.word	0x40023c00
 8006fcc:	40023800 	.word	0x40023800
 8006fd0:	080123ec 	.word	0x080123ec
 8006fd4:	20000000 	.word	0x20000000
 8006fd8:	20000004 	.word	0x20000004

08006fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fe0:	4b03      	ldr	r3, [pc, #12]	; (8006ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
 8006fee:	bf00      	nop
 8006ff0:	20000000 	.word	0x20000000

08006ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ff8:	f7ff fff0 	bl	8006fdc <HAL_RCC_GetHCLKFreq>
 8006ffc:	4601      	mov	r1, r0
 8006ffe:	4b05      	ldr	r3, [pc, #20]	; (8007014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	0a9b      	lsrs	r3, r3, #10
 8007004:	f003 0307 	and.w	r3, r3, #7
 8007008:	4a03      	ldr	r2, [pc, #12]	; (8007018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800700a:	5cd3      	ldrb	r3, [r2, r3]
 800700c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007010:	4618      	mov	r0, r3
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40023800 	.word	0x40023800
 8007018:	080123fc 	.word	0x080123fc

0800701c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b08c      	sub	sp, #48	; 0x30
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007028:	2300      	movs	r3, #0
 800702a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800702c:	2300      	movs	r3, #0
 800702e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007034:	2300      	movs	r3, #0
 8007036:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8007044:	2300      	movs	r3, #0
 8007046:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0301 	and.w	r3, r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	d010      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007054:	4b6f      	ldr	r3, [pc, #444]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007062:	496c      	ldr	r1, [pc, #432]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007064:	4313      	orrs	r3, r2
 8007066:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007072:	2301      	movs	r3, #1
 8007074:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f003 0302 	and.w	r3, r3, #2
 800707e:	2b00      	cmp	r3, #0
 8007080:	d010      	beq.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007082:	4b64      	ldr	r3, [pc, #400]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007084:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007088:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	4960      	ldr	r1, [pc, #384]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007092:	4313      	orrs	r3, r2
 8007094:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80070a0:	2301      	movs	r3, #1
 80070a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d017      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80070b0:	4b58      	ldr	r3, [pc, #352]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070be:	4955      	ldr	r1, [pc, #340]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070c0:	4313      	orrs	r3, r2
 80070c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070ce:	d101      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80070d0:	2301      	movs	r3, #1
 80070d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80070dc:	2301      	movs	r3, #1
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0308 	and.w	r3, r3, #8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d017      	beq.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070ec:	4b49      	ldr	r3, [pc, #292]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070fa:	4946      	ldr	r1, [pc, #280]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800710a:	d101      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800710c:	2301      	movs	r3, #1
 800710e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007118:	2301      	movs	r3, #1
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f003 0320 	and.w	r3, r3, #32
 8007124:	2b00      	cmp	r3, #0
 8007126:	f000 808a 	beq.w	800723e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800712a:	2300      	movs	r3, #0
 800712c:	60bb      	str	r3, [r7, #8]
 800712e:	4b39      	ldr	r3, [pc, #228]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	4a38      	ldr	r2, [pc, #224]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007138:	6413      	str	r3, [r2, #64]	; 0x40
 800713a:	4b36      	ldr	r3, [pc, #216]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007142:	60bb      	str	r3, [r7, #8]
 8007144:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007146:	4b34      	ldr	r3, [pc, #208]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a33      	ldr	r2, [pc, #204]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007150:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007152:	f7fc fdd5 	bl	8003d00 <HAL_GetTick>
 8007156:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007158:	e008      	b.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800715a:	f7fc fdd1 	bl	8003d00 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e278      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800716c:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007174:	2b00      	cmp	r3, #0
 8007176:	d0f0      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007178:	4b26      	ldr	r3, [pc, #152]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800717a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800717c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007180:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007182:	6a3b      	ldr	r3, [r7, #32]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d02f      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007190:	6a3a      	ldr	r2, [r7, #32]
 8007192:	429a      	cmp	r2, r3
 8007194:	d028      	beq.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007196:	4b1f      	ldr	r3, [pc, #124]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800719e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80071a0:	4b1e      	ldr	r3, [pc, #120]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071a6:	4b1d      	ldr	r3, [pc, #116]	; (800721c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071ac:	4a19      	ldr	r2, [pc, #100]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071ae:	6a3b      	ldr	r3, [r7, #32]
 80071b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071b2:	4b18      	ldr	r3, [pc, #96]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d114      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071be:	f7fc fd9f 	bl	8003d00 <HAL_GetTick>
 80071c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c4:	e00a      	b.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80071c6:	f7fc fd9b 	bl	8003d00 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d901      	bls.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e240      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d0ee      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071f4:	d114      	bne.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720a:	4902      	ldr	r1, [pc, #8]	; (8007214 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800720c:	4313      	orrs	r3, r2
 800720e:	608b      	str	r3, [r1, #8]
 8007210:	e00c      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800
 8007218:	40007000 	.word	0x40007000
 800721c:	42470e40 	.word	0x42470e40
 8007220:	4b4a      	ldr	r3, [pc, #296]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	4a49      	ldr	r2, [pc, #292]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007226:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800722a:	6093      	str	r3, [r2, #8]
 800722c:	4b47      	ldr	r3, [pc, #284]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800722e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007238:	4944      	ldr	r1, [pc, #272]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800723a:	4313      	orrs	r3, r2
 800723c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0310 	and.w	r3, r3, #16
 8007246:	2b00      	cmp	r3, #0
 8007248:	d004      	beq.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007250:	4b3f      	ldr	r3, [pc, #252]	; (8007350 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007252:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007260:	4b3a      	ldr	r3, [pc, #232]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007262:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007266:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800726e:	4937      	ldr	r1, [pc, #220]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007270:	4313      	orrs	r3, r2
 8007272:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007282:	4b32      	ldr	r3, [pc, #200]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007284:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007288:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007290:	492e      	ldr	r1, [pc, #184]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007292:	4313      	orrs	r3, r2
 8007294:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d011      	beq.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80072a4:	4b29      	ldr	r3, [pc, #164]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072aa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	4926      	ldr	r1, [pc, #152]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072c2:	d101      	bne.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80072c4:	2301      	movs	r3, #1
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00a      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80072d4:	4b1d      	ldr	r3, [pc, #116]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	491a      	ldr	r1, [pc, #104]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d011      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80072f6:	4b15      	ldr	r3, [pc, #84]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072fc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	4911      	ldr	r1, [pc, #68]	; (800734c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007306:	4313      	orrs	r3, r2
 8007308:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007314:	d101      	bne.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007316:	2301      	movs	r3, #1
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d005      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007328:	f040 80ff 	bne.w	800752a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007332:	f7fc fce5 	bl	8003d00 <HAL_GetTick>
 8007336:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007338:	e00e      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800733a:	f7fc fce1 	bl	8003d00 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b02      	cmp	r3, #2
 8007346:	d907      	bls.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e188      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800734c:	40023800 	.word	0x40023800
 8007350:	424711e0 	.word	0x424711e0
 8007354:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007358:	4b7e      	ldr	r3, [pc, #504]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1ea      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007380:	2b00      	cmp	r3, #0
 8007382:	d028      	beq.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007388:	2b00      	cmp	r3, #0
 800738a:	d124      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800738c:	4b71      	ldr	r3, [pc, #452]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800738e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007392:	0c1b      	lsrs	r3, r3, #16
 8007394:	f003 0303 	and.w	r3, r3, #3
 8007398:	3301      	adds	r3, #1
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800739e:	4b6d      	ldr	r3, [pc, #436]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80073a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a4:	0e1b      	lsrs	r3, r3, #24
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685a      	ldr	r2, [r3, #4]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	019b      	lsls	r3, r3, #6
 80073b6:	431a      	orrs	r2, r3
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	085b      	lsrs	r3, r3, #1
 80073bc:	3b01      	subs	r3, #1
 80073be:	041b      	lsls	r3, r3, #16
 80073c0:	431a      	orrs	r2, r3
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	061b      	lsls	r3, r3, #24
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	071b      	lsls	r3, r3, #28
 80073ce:	4961      	ldr	r1, [pc, #388]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 0304 	and.w	r3, r3, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d004      	beq.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073ea:	d00a      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d035      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007400:	d130      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007402:	4b54      	ldr	r3, [pc, #336]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007404:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007408:	0c1b      	lsrs	r3, r3, #16
 800740a:	f003 0303 	and.w	r3, r3, #3
 800740e:	3301      	adds	r3, #1
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007414:	4b4f      	ldr	r3, [pc, #316]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800741a:	0f1b      	lsrs	r3, r3, #28
 800741c:	f003 0307 	and.w	r3, r3, #7
 8007420:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	019b      	lsls	r3, r3, #6
 800742c:	431a      	orrs	r2, r3
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	085b      	lsrs	r3, r3, #1
 8007432:	3b01      	subs	r3, #1
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	431a      	orrs	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	061b      	lsls	r3, r3, #24
 800743e:	431a      	orrs	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	071b      	lsls	r3, r3, #28
 8007444:	4943      	ldr	r1, [pc, #268]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007446:	4313      	orrs	r3, r2
 8007448:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800744c:	4b41      	ldr	r3, [pc, #260]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800744e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007452:	f023 021f 	bic.w	r2, r3, #31
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745a:	3b01      	subs	r3, #1
 800745c:	493d      	ldr	r1, [pc, #244]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746c:	2b00      	cmp	r3, #0
 800746e:	d029      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007474:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007478:	d124      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800747a:	4b36      	ldr	r3, [pc, #216]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800747c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007480:	0c1b      	lsrs	r3, r3, #16
 8007482:	f003 0303 	and.w	r3, r3, #3
 8007486:	3301      	adds	r3, #1
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800748c:	4b31      	ldr	r3, [pc, #196]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800748e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007492:	0f1b      	lsrs	r3, r3, #28
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	019b      	lsls	r3, r3, #6
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	3b01      	subs	r3, #1
 80074ae:	041b      	lsls	r3, r3, #16
 80074b0:	431a      	orrs	r2, r3
 80074b2:	69bb      	ldr	r3, [r7, #24]
 80074b4:	061b      	lsls	r3, r3, #24
 80074b6:	431a      	orrs	r2, r3
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	071b      	lsls	r3, r3, #28
 80074bc:	4925      	ldr	r1, [pc, #148]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d016      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	019b      	lsls	r3, r3, #6
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	085b      	lsrs	r3, r3, #1
 80074e2:	3b01      	subs	r3, #1
 80074e4:	041b      	lsls	r3, r3, #16
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	061b      	lsls	r3, r3, #24
 80074ee:	431a      	orrs	r2, r3
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	071b      	lsls	r3, r3, #28
 80074f6:	4917      	ldr	r1, [pc, #92]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80074f8:	4313      	orrs	r3, r2
 80074fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074fe:	4b16      	ldr	r3, [pc, #88]	; (8007558 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007500:	2201      	movs	r2, #1
 8007502:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007504:	f7fc fbfc 	bl	8003d00 <HAL_GetTick>
 8007508:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800750a:	e008      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800750c:	f7fc fbf8 	bl	8003d00 <HAL_GetTick>
 8007510:	4602      	mov	r2, r0
 8007512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007514:	1ad3      	subs	r3, r2, r3
 8007516:	2b02      	cmp	r3, #2
 8007518:	d901      	bls.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800751a:	2303      	movs	r3, #3
 800751c:	e09f      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800751e:	4b0d      	ldr	r3, [pc, #52]	; (8007554 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0f0      	beq.n	800750c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	2b01      	cmp	r3, #1
 800752e:	f040 8095 	bne.w	800765c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007532:	4b0a      	ldr	r3, [pc, #40]	; (800755c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8007534:	2200      	movs	r2, #0
 8007536:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007538:	f7fc fbe2 	bl	8003d00 <HAL_GetTick>
 800753c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800753e:	e00f      	b.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007540:	f7fc fbde 	bl	8003d00 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	2b02      	cmp	r3, #2
 800754c:	d908      	bls.n	8007560 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800754e:	2303      	movs	r3, #3
 8007550:	e085      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007552:	bf00      	nop
 8007554:	40023800 	.word	0x40023800
 8007558:	42470068 	.word	0x42470068
 800755c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007560:	4b41      	ldr	r3, [pc, #260]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800756c:	d0e8      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d003      	beq.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800758a:	2b00      	cmp	r3, #0
 800758c:	d02b      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007592:	2b00      	cmp	r3, #0
 8007594:	d127      	bne.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8007596:	4b34      	ldr	r3, [pc, #208]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759c:	0c1b      	lsrs	r3, r3, #16
 800759e:	f003 0303 	and.w	r3, r3, #3
 80075a2:	3301      	adds	r3, #1
 80075a4:	005b      	lsls	r3, r3, #1
 80075a6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	699a      	ldr	r2, [r3, #24]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	69db      	ldr	r3, [r3, #28]
 80075b0:	019b      	lsls	r3, r3, #6
 80075b2:	431a      	orrs	r2, r3
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	3b01      	subs	r3, #1
 80075ba:	041b      	lsls	r3, r3, #16
 80075bc:	431a      	orrs	r2, r3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	061b      	lsls	r3, r3, #24
 80075c4:	4928      	ldr	r1, [pc, #160]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075cc:	4b26      	ldr	r3, [pc, #152]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	3b01      	subs	r3, #1
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	4922      	ldr	r1, [pc, #136]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01d      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x612>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075fa:	d118      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075fc:	4b1a      	ldr	r3, [pc, #104]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007602:	0e1b      	lsrs	r3, r3, #24
 8007604:	f003 030f 	and.w	r3, r3, #15
 8007608:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	019b      	lsls	r3, r3, #6
 8007614:	431a      	orrs	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	085b      	lsrs	r3, r3, #1
 800761c:	3b01      	subs	r3, #1
 800761e:	041b      	lsls	r3, r3, #16
 8007620:	431a      	orrs	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	061b      	lsls	r3, r3, #24
 8007626:	4910      	ldr	r1, [pc, #64]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800762e:	4b0f      	ldr	r3, [pc, #60]	; (800766c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007630:	2201      	movs	r2, #1
 8007632:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007634:	f7fc fb64 	bl	8003d00 <HAL_GetTick>
 8007638:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800763a:	e008      	b.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800763c:	f7fc fb60 	bl	8003d00 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b02      	cmp	r3, #2
 8007648:	d901      	bls.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e007      	b.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800764e:	4b06      	ldr	r3, [pc, #24]	; (8007668 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800765a:	d1ef      	bne.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3730      	adds	r7, #48	; 0x30
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	40023800 	.word	0x40023800
 800766c:	42470070 	.word	0x42470070

08007670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8007686:	2300      	movs	r3, #0
 8007688:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800768a:	4bc6      	ldr	r3, [pc, #792]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f003 030c 	and.w	r3, r3, #12
 8007692:	2b0c      	cmp	r3, #12
 8007694:	f200 817e 	bhi.w	8007994 <HAL_RCC_GetSysClockFreq+0x324>
 8007698:	a201      	add	r2, pc, #4	; (adr r2, 80076a0 <HAL_RCC_GetSysClockFreq+0x30>)
 800769a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800769e:	bf00      	nop
 80076a0:	080076d5 	.word	0x080076d5
 80076a4:	08007995 	.word	0x08007995
 80076a8:	08007995 	.word	0x08007995
 80076ac:	08007995 	.word	0x08007995
 80076b0:	080076db 	.word	0x080076db
 80076b4:	08007995 	.word	0x08007995
 80076b8:	08007995 	.word	0x08007995
 80076bc:	08007995 	.word	0x08007995
 80076c0:	080076e1 	.word	0x080076e1
 80076c4:	08007995 	.word	0x08007995
 80076c8:	08007995 	.word	0x08007995
 80076cc:	08007995 	.word	0x08007995
 80076d0:	0800783d 	.word	0x0800783d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076d4:	4bb4      	ldr	r3, [pc, #720]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x338>)
 80076d6:	613b      	str	r3, [r7, #16]
       break;
 80076d8:	e15f      	b.n	800799a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076da:	4bb4      	ldr	r3, [pc, #720]	; (80079ac <HAL_RCC_GetSysClockFreq+0x33c>)
 80076dc:	613b      	str	r3, [r7, #16]
      break;
 80076de:	e15c      	b.n	800799a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076e0:	4bb0      	ldr	r3, [pc, #704]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076e8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076ea:	4bae      	ldr	r3, [pc, #696]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d04a      	beq.n	800778c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076f6:	4bab      	ldr	r3, [pc, #684]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	099b      	lsrs	r3, r3, #6
 80076fc:	f04f 0400 	mov.w	r4, #0
 8007700:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007704:	f04f 0200 	mov.w	r2, #0
 8007708:	ea03 0501 	and.w	r5, r3, r1
 800770c:	ea04 0602 	and.w	r6, r4, r2
 8007710:	4629      	mov	r1, r5
 8007712:	4632      	mov	r2, r6
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	f04f 0400 	mov.w	r4, #0
 800771c:	0154      	lsls	r4, r2, #5
 800771e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007722:	014b      	lsls	r3, r1, #5
 8007724:	4619      	mov	r1, r3
 8007726:	4622      	mov	r2, r4
 8007728:	1b49      	subs	r1, r1, r5
 800772a:	eb62 0206 	sbc.w	r2, r2, r6
 800772e:	f04f 0300 	mov.w	r3, #0
 8007732:	f04f 0400 	mov.w	r4, #0
 8007736:	0194      	lsls	r4, r2, #6
 8007738:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800773c:	018b      	lsls	r3, r1, #6
 800773e:	1a5b      	subs	r3, r3, r1
 8007740:	eb64 0402 	sbc.w	r4, r4, r2
 8007744:	f04f 0100 	mov.w	r1, #0
 8007748:	f04f 0200 	mov.w	r2, #0
 800774c:	00e2      	lsls	r2, r4, #3
 800774e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007752:	00d9      	lsls	r1, r3, #3
 8007754:	460b      	mov	r3, r1
 8007756:	4614      	mov	r4, r2
 8007758:	195b      	adds	r3, r3, r5
 800775a:	eb44 0406 	adc.w	r4, r4, r6
 800775e:	f04f 0100 	mov.w	r1, #0
 8007762:	f04f 0200 	mov.w	r2, #0
 8007766:	0262      	lsls	r2, r4, #9
 8007768:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800776c:	0259      	lsls	r1, r3, #9
 800776e:	460b      	mov	r3, r1
 8007770:	4614      	mov	r4, r2
 8007772:	4618      	mov	r0, r3
 8007774:	4621      	mov	r1, r4
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f04f 0400 	mov.w	r4, #0
 800777c:	461a      	mov	r2, r3
 800777e:	4623      	mov	r3, r4
 8007780:	f7f9 fa52 	bl	8000c28 <__aeabi_uldivmod>
 8007784:	4603      	mov	r3, r0
 8007786:	460c      	mov	r4, r1
 8007788:	617b      	str	r3, [r7, #20]
 800778a:	e049      	b.n	8007820 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800778c:	4b85      	ldr	r3, [pc, #532]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	099b      	lsrs	r3, r3, #6
 8007792:	f04f 0400 	mov.w	r4, #0
 8007796:	f240 11ff 	movw	r1, #511	; 0x1ff
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	ea03 0501 	and.w	r5, r3, r1
 80077a2:	ea04 0602 	and.w	r6, r4, r2
 80077a6:	4629      	mov	r1, r5
 80077a8:	4632      	mov	r2, r6
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	f04f 0400 	mov.w	r4, #0
 80077b2:	0154      	lsls	r4, r2, #5
 80077b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80077b8:	014b      	lsls	r3, r1, #5
 80077ba:	4619      	mov	r1, r3
 80077bc:	4622      	mov	r2, r4
 80077be:	1b49      	subs	r1, r1, r5
 80077c0:	eb62 0206 	sbc.w	r2, r2, r6
 80077c4:	f04f 0300 	mov.w	r3, #0
 80077c8:	f04f 0400 	mov.w	r4, #0
 80077cc:	0194      	lsls	r4, r2, #6
 80077ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077d2:	018b      	lsls	r3, r1, #6
 80077d4:	1a5b      	subs	r3, r3, r1
 80077d6:	eb64 0402 	sbc.w	r4, r4, r2
 80077da:	f04f 0100 	mov.w	r1, #0
 80077de:	f04f 0200 	mov.w	r2, #0
 80077e2:	00e2      	lsls	r2, r4, #3
 80077e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077e8:	00d9      	lsls	r1, r3, #3
 80077ea:	460b      	mov	r3, r1
 80077ec:	4614      	mov	r4, r2
 80077ee:	195b      	adds	r3, r3, r5
 80077f0:	eb44 0406 	adc.w	r4, r4, r6
 80077f4:	f04f 0100 	mov.w	r1, #0
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	02a2      	lsls	r2, r4, #10
 80077fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007802:	0299      	lsls	r1, r3, #10
 8007804:	460b      	mov	r3, r1
 8007806:	4614      	mov	r4, r2
 8007808:	4618      	mov	r0, r3
 800780a:	4621      	mov	r1, r4
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f04f 0400 	mov.w	r4, #0
 8007812:	461a      	mov	r2, r3
 8007814:	4623      	mov	r3, r4
 8007816:	f7f9 fa07 	bl	8000c28 <__aeabi_uldivmod>
 800781a:	4603      	mov	r3, r0
 800781c:	460c      	mov	r4, r1
 800781e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007820:	4b60      	ldr	r3, [pc, #384]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	0c1b      	lsrs	r3, r3, #16
 8007826:	f003 0303 	and.w	r3, r3, #3
 800782a:	3301      	adds	r3, #1
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	fbb2 f3f3 	udiv	r3, r2, r3
 8007838:	613b      	str	r3, [r7, #16]
      break;
 800783a:	e0ae      	b.n	800799a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800783c:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800783e:	685b      	ldr	r3, [r3, #4]
 8007840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007844:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007846:	4b57      	ldr	r3, [pc, #348]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d04a      	beq.n	80078e8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007852:	4b54      	ldr	r3, [pc, #336]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	099b      	lsrs	r3, r3, #6
 8007858:	f04f 0400 	mov.w	r4, #0
 800785c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007860:	f04f 0200 	mov.w	r2, #0
 8007864:	ea03 0501 	and.w	r5, r3, r1
 8007868:	ea04 0602 	and.w	r6, r4, r2
 800786c:	4629      	mov	r1, r5
 800786e:	4632      	mov	r2, r6
 8007870:	f04f 0300 	mov.w	r3, #0
 8007874:	f04f 0400 	mov.w	r4, #0
 8007878:	0154      	lsls	r4, r2, #5
 800787a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800787e:	014b      	lsls	r3, r1, #5
 8007880:	4619      	mov	r1, r3
 8007882:	4622      	mov	r2, r4
 8007884:	1b49      	subs	r1, r1, r5
 8007886:	eb62 0206 	sbc.w	r2, r2, r6
 800788a:	f04f 0300 	mov.w	r3, #0
 800788e:	f04f 0400 	mov.w	r4, #0
 8007892:	0194      	lsls	r4, r2, #6
 8007894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007898:	018b      	lsls	r3, r1, #6
 800789a:	1a5b      	subs	r3, r3, r1
 800789c:	eb64 0402 	sbc.w	r4, r4, r2
 80078a0:	f04f 0100 	mov.w	r1, #0
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	00e2      	lsls	r2, r4, #3
 80078aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80078ae:	00d9      	lsls	r1, r3, #3
 80078b0:	460b      	mov	r3, r1
 80078b2:	4614      	mov	r4, r2
 80078b4:	195b      	adds	r3, r3, r5
 80078b6:	eb44 0406 	adc.w	r4, r4, r6
 80078ba:	f04f 0100 	mov.w	r1, #0
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	0262      	lsls	r2, r4, #9
 80078c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80078c8:	0259      	lsls	r1, r3, #9
 80078ca:	460b      	mov	r3, r1
 80078cc:	4614      	mov	r4, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	4621      	mov	r1, r4
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f04f 0400 	mov.w	r4, #0
 80078d8:	461a      	mov	r2, r3
 80078da:	4623      	mov	r3, r4
 80078dc:	f7f9 f9a4 	bl	8000c28 <__aeabi_uldivmod>
 80078e0:	4603      	mov	r3, r0
 80078e2:	460c      	mov	r4, r1
 80078e4:	617b      	str	r3, [r7, #20]
 80078e6:	e049      	b.n	800797c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078e8:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	099b      	lsrs	r3, r3, #6
 80078ee:	f04f 0400 	mov.w	r4, #0
 80078f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078f6:	f04f 0200 	mov.w	r2, #0
 80078fa:	ea03 0501 	and.w	r5, r3, r1
 80078fe:	ea04 0602 	and.w	r6, r4, r2
 8007902:	4629      	mov	r1, r5
 8007904:	4632      	mov	r2, r6
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	f04f 0400 	mov.w	r4, #0
 800790e:	0154      	lsls	r4, r2, #5
 8007910:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007914:	014b      	lsls	r3, r1, #5
 8007916:	4619      	mov	r1, r3
 8007918:	4622      	mov	r2, r4
 800791a:	1b49      	subs	r1, r1, r5
 800791c:	eb62 0206 	sbc.w	r2, r2, r6
 8007920:	f04f 0300 	mov.w	r3, #0
 8007924:	f04f 0400 	mov.w	r4, #0
 8007928:	0194      	lsls	r4, r2, #6
 800792a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800792e:	018b      	lsls	r3, r1, #6
 8007930:	1a5b      	subs	r3, r3, r1
 8007932:	eb64 0402 	sbc.w	r4, r4, r2
 8007936:	f04f 0100 	mov.w	r1, #0
 800793a:	f04f 0200 	mov.w	r2, #0
 800793e:	00e2      	lsls	r2, r4, #3
 8007940:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007944:	00d9      	lsls	r1, r3, #3
 8007946:	460b      	mov	r3, r1
 8007948:	4614      	mov	r4, r2
 800794a:	195b      	adds	r3, r3, r5
 800794c:	eb44 0406 	adc.w	r4, r4, r6
 8007950:	f04f 0100 	mov.w	r1, #0
 8007954:	f04f 0200 	mov.w	r2, #0
 8007958:	02a2      	lsls	r2, r4, #10
 800795a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800795e:	0299      	lsls	r1, r3, #10
 8007960:	460b      	mov	r3, r1
 8007962:	4614      	mov	r4, r2
 8007964:	4618      	mov	r0, r3
 8007966:	4621      	mov	r1, r4
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f04f 0400 	mov.w	r4, #0
 800796e:	461a      	mov	r2, r3
 8007970:	4623      	mov	r3, r4
 8007972:	f7f9 f959 	bl	8000c28 <__aeabi_uldivmod>
 8007976:	4603      	mov	r3, r0
 8007978:	460c      	mov	r4, r1
 800797a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800797c:	4b09      	ldr	r3, [pc, #36]	; (80079a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	0f1b      	lsrs	r3, r3, #28
 8007982:	f003 0307 	and.w	r3, r3, #7
 8007986:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	613b      	str	r3, [r7, #16]
      break;
 8007992:	e002      	b.n	800799a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007994:	4b04      	ldr	r3, [pc, #16]	; (80079a8 <HAL_RCC_GetSysClockFreq+0x338>)
 8007996:	613b      	str	r3, [r7, #16]
      break;
 8007998:	bf00      	nop
    }
  }
  return sysclockfreq;
 800799a:	693b      	ldr	r3, [r7, #16]
}
 800799c:	4618      	mov	r0, r3
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079a4:	40023800 	.word	0x40023800
 80079a8:	00f42400 	.word	0x00f42400
 80079ac:	007a1200 	.word	0x007a1200

080079b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079b8:	2300      	movs	r3, #0
 80079ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f003 0301 	and.w	r3, r3, #1
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f000 8083 	beq.w	8007ad0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079ca:	4b95      	ldr	r3, [pc, #596]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 030c 	and.w	r3, r3, #12
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d019      	beq.n	8007a0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079d6:	4b92      	ldr	r3, [pc, #584]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079de:	2b08      	cmp	r3, #8
 80079e0:	d106      	bne.n	80079f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079e2:	4b8f      	ldr	r3, [pc, #572]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079ee:	d00c      	beq.n	8007a0a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079f0:	4b8b      	ldr	r3, [pc, #556]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079f8:	2b0c      	cmp	r3, #12
 80079fa:	d112      	bne.n	8007a22 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079fc:	4b88      	ldr	r3, [pc, #544]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a08:	d10b      	bne.n	8007a22 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a0a:	4b85      	ldr	r3, [pc, #532]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d05b      	beq.n	8007ace <HAL_RCC_OscConfig+0x11e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d157      	bne.n	8007ace <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e216      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a2a:	d106      	bne.n	8007a3a <HAL_RCC_OscConfig+0x8a>
 8007a2c:	4b7c      	ldr	r3, [pc, #496]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a7b      	ldr	r2, [pc, #492]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	e01d      	b.n	8007a76 <HAL_RCC_OscConfig+0xc6>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a42:	d10c      	bne.n	8007a5e <HAL_RCC_OscConfig+0xae>
 8007a44:	4b76      	ldr	r3, [pc, #472]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a75      	ldr	r2, [pc, #468]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a4a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	4b73      	ldr	r3, [pc, #460]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a72      	ldr	r2, [pc, #456]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a5a:	6013      	str	r3, [r2, #0]
 8007a5c:	e00b      	b.n	8007a76 <HAL_RCC_OscConfig+0xc6>
 8007a5e:	4b70      	ldr	r3, [pc, #448]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a6f      	ldr	r2, [pc, #444]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a68:	6013      	str	r3, [r2, #0]
 8007a6a:	4b6d      	ldr	r3, [pc, #436]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	4a6c      	ldr	r2, [pc, #432]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a74:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d013      	beq.n	8007aa6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7e:	f7fc f93f 	bl	8003d00 <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a86:	f7fc f93b 	bl	8003d00 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b64      	cmp	r3, #100	; 0x64
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e1db      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a98:	4b61      	ldr	r3, [pc, #388]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <HAL_RCC_OscConfig+0xd6>
 8007aa4:	e014      	b.n	8007ad0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aa6:	f7fc f92b 	bl	8003d00 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007aae:	f7fc f927 	bl	8003d00 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b64      	cmp	r3, #100	; 0x64
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e1c7      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ac0:	4b57      	ldr	r3, [pc, #348]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d1f0      	bne.n	8007aae <HAL_RCC_OscConfig+0xfe>
 8007acc:	e000      	b.n	8007ad0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ace:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d06f      	beq.n	8007bbc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007adc:	4b50      	ldr	r3, [pc, #320]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f003 030c 	and.w	r3, r3, #12
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d017      	beq.n	8007b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ae8:	4b4d      	ldr	r3, [pc, #308]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d105      	bne.n	8007b00 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007af4:	4b4a      	ldr	r3, [pc, #296]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00b      	beq.n	8007b18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b00:	4b47      	ldr	r3, [pc, #284]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007b08:	2b0c      	cmp	r3, #12
 8007b0a:	d11c      	bne.n	8007b46 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b0c:	4b44      	ldr	r3, [pc, #272]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d116      	bne.n	8007b46 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b18:	4b41      	ldr	r3, [pc, #260]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d005      	beq.n	8007b30 <HAL_RCC_OscConfig+0x180>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d001      	beq.n	8007b30 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	e18f      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b30:	4b3b      	ldr	r3, [pc, #236]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	691b      	ldr	r3, [r3, #16]
 8007b3c:	00db      	lsls	r3, r3, #3
 8007b3e:	4938      	ldr	r1, [pc, #224]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b44:	e03a      	b.n	8007bbc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d020      	beq.n	8007b90 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b4e:	4b35      	ldr	r3, [pc, #212]	; (8007c24 <HAL_RCC_OscConfig+0x274>)
 8007b50:	2201      	movs	r2, #1
 8007b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fc f8d4 	bl	8003d00 <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b5c:	f7fc f8d0 	bl	8003d00 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b02      	cmp	r3, #2
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e170      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b6e:	4b2c      	ldr	r3, [pc, #176]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f003 0302 	and.w	r3, r3, #2
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f0      	beq.n	8007b5c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b7a:	4b29      	ldr	r3, [pc, #164]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	4925      	ldr	r1, [pc, #148]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	600b      	str	r3, [r1, #0]
 8007b8e:	e015      	b.n	8007bbc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b90:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <HAL_RCC_OscConfig+0x274>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b96:	f7fc f8b3 	bl	8003d00 <HAL_GetTick>
 8007b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b9c:	e008      	b.n	8007bb0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b9e:	f7fc f8af 	bl	8003d00 <HAL_GetTick>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	2b02      	cmp	r3, #2
 8007baa:	d901      	bls.n	8007bb0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007bac:	2303      	movs	r3, #3
 8007bae:	e14f      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bb0:	4b1b      	ldr	r3, [pc, #108]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0302 	and.w	r3, r3, #2
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f0      	bne.n	8007b9e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d037      	beq.n	8007c38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	695b      	ldr	r3, [r3, #20]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d016      	beq.n	8007bfe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bd0:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <HAL_RCC_OscConfig+0x278>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd6:	f7fc f893 	bl	8003d00 <HAL_GetTick>
 8007bda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bdc:	e008      	b.n	8007bf0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bde:	f7fc f88f 	bl	8003d00 <HAL_GetTick>
 8007be2:	4602      	mov	r2, r0
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	1ad3      	subs	r3, r2, r3
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d901      	bls.n	8007bf0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bec:	2303      	movs	r3, #3
 8007bee:	e12f      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bf0:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <HAL_RCC_OscConfig+0x270>)
 8007bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d0f0      	beq.n	8007bde <HAL_RCC_OscConfig+0x22e>
 8007bfc:	e01c      	b.n	8007c38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <HAL_RCC_OscConfig+0x278>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c04:	f7fc f87c 	bl	8003d00 <HAL_GetTick>
 8007c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c0a:	e00f      	b.n	8007c2c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c0c:	f7fc f878 	bl	8003d00 <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d908      	bls.n	8007c2c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e118      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
 8007c1e:	bf00      	nop
 8007c20:	40023800 	.word	0x40023800
 8007c24:	42470000 	.word	0x42470000
 8007c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c2c:	4b8a      	ldr	r3, [pc, #552]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c30:	f003 0302 	and.w	r3, r3, #2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1e9      	bne.n	8007c0c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 0304 	and.w	r3, r3, #4
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	f000 8097 	beq.w	8007d74 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c46:	2300      	movs	r3, #0
 8007c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c4a:	4b83      	ldr	r3, [pc, #524]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d10f      	bne.n	8007c76 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	4b7f      	ldr	r3, [pc, #508]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	4a7e      	ldr	r2, [pc, #504]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c64:	6413      	str	r3, [r2, #64]	; 0x40
 8007c66:	4b7c      	ldr	r3, [pc, #496]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c6e:	60fb      	str	r3, [r7, #12]
 8007c70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c72:	2301      	movs	r3, #1
 8007c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c76:	4b79      	ldr	r3, [pc, #484]	; (8007e5c <HAL_RCC_OscConfig+0x4ac>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d118      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c82:	4b76      	ldr	r3, [pc, #472]	; (8007e5c <HAL_RCC_OscConfig+0x4ac>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a75      	ldr	r2, [pc, #468]	; (8007e5c <HAL_RCC_OscConfig+0x4ac>)
 8007c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c8e:	f7fc f837 	bl	8003d00 <HAL_GetTick>
 8007c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c94:	e008      	b.n	8007ca8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c96:	f7fc f833 	bl	8003d00 <HAL_GetTick>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	1ad3      	subs	r3, r2, r3
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d901      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ca4:	2303      	movs	r3, #3
 8007ca6:	e0d3      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca8:	4b6c      	ldr	r3, [pc, #432]	; (8007e5c <HAL_RCC_OscConfig+0x4ac>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d0f0      	beq.n	8007c96 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d106      	bne.n	8007cca <HAL_RCC_OscConfig+0x31a>
 8007cbc:	4b66      	ldr	r3, [pc, #408]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc0:	4a65      	ldr	r2, [pc, #404]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cc2:	f043 0301 	orr.w	r3, r3, #1
 8007cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc8:	e01c      	b.n	8007d04 <HAL_RCC_OscConfig+0x354>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	2b05      	cmp	r3, #5
 8007cd0:	d10c      	bne.n	8007cec <HAL_RCC_OscConfig+0x33c>
 8007cd2:	4b61      	ldr	r3, [pc, #388]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd6:	4a60      	ldr	r2, [pc, #384]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cd8:	f043 0304 	orr.w	r3, r3, #4
 8007cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8007cde:	4b5e      	ldr	r3, [pc, #376]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ce2:	4a5d      	ldr	r2, [pc, #372]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007ce4:	f043 0301 	orr.w	r3, r3, #1
 8007ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8007cea:	e00b      	b.n	8007d04 <HAL_RCC_OscConfig+0x354>
 8007cec:	4b5a      	ldr	r3, [pc, #360]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf0:	4a59      	ldr	r2, [pc, #356]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cf2:	f023 0301 	bic.w	r3, r3, #1
 8007cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cf8:	4b57      	ldr	r3, [pc, #348]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfc:	4a56      	ldr	r2, [pc, #344]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007cfe:	f023 0304 	bic.w	r3, r3, #4
 8007d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d015      	beq.n	8007d38 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d0c:	f7fb fff8 	bl	8003d00 <HAL_GetTick>
 8007d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d12:	e00a      	b.n	8007d2a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d14:	f7fb fff4 	bl	8003d00 <HAL_GetTick>
 8007d18:	4602      	mov	r2, r0
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d901      	bls.n	8007d2a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e092      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d2a:	4b4b      	ldr	r3, [pc, #300]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	f003 0302 	and.w	r3, r3, #2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d0ee      	beq.n	8007d14 <HAL_RCC_OscConfig+0x364>
 8007d36:	e014      	b.n	8007d62 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d38:	f7fb ffe2 	bl	8003d00 <HAL_GetTick>
 8007d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d3e:	e00a      	b.n	8007d56 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d40:	f7fb ffde 	bl	8003d00 <HAL_GetTick>
 8007d44:	4602      	mov	r2, r0
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	1ad3      	subs	r3, r2, r3
 8007d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d901      	bls.n	8007d56 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007d52:	2303      	movs	r3, #3
 8007d54:	e07c      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d56:	4b40      	ldr	r3, [pc, #256]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	f003 0302 	and.w	r3, r3, #2
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1ee      	bne.n	8007d40 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d105      	bne.n	8007d74 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d68:	4b3b      	ldr	r3, [pc, #236]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	4a3a      	ldr	r2, [pc, #232]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d068      	beq.n	8007e4e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d7c:	4b36      	ldr	r3, [pc, #216]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f003 030c 	and.w	r3, r3, #12
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d060      	beq.n	8007e4a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	699b      	ldr	r3, [r3, #24]
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d145      	bne.n	8007e1c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d90:	4b33      	ldr	r3, [pc, #204]	; (8007e60 <HAL_RCC_OscConfig+0x4b0>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d96:	f7fb ffb3 	bl	8003d00 <HAL_GetTick>
 8007d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d9c:	e008      	b.n	8007db0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d9e:	f7fb ffaf 	bl	8003d00 <HAL_GetTick>
 8007da2:	4602      	mov	r2, r0
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d901      	bls.n	8007db0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8007dac:	2303      	movs	r3, #3
 8007dae:	e04f      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007db0:	4b29      	ldr	r3, [pc, #164]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f0      	bne.n	8007d9e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	431a      	orrs	r2, r3
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	019b      	lsls	r3, r3, #6
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	041b      	lsls	r3, r3, #16
 8007dd8:	431a      	orrs	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dde:	061b      	lsls	r3, r3, #24
 8007de0:	431a      	orrs	r2, r3
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de6:	071b      	lsls	r3, r3, #28
 8007de8:	491b      	ldr	r1, [pc, #108]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dee:	4b1c      	ldr	r3, [pc, #112]	; (8007e60 <HAL_RCC_OscConfig+0x4b0>)
 8007df0:	2201      	movs	r2, #1
 8007df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df4:	f7fb ff84 	bl	8003d00 <HAL_GetTick>
 8007df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dfa:	e008      	b.n	8007e0e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dfc:	f7fb ff80 	bl	8003d00 <HAL_GetTick>
 8007e00:	4602      	mov	r2, r0
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	1ad3      	subs	r3, r2, r3
 8007e06:	2b02      	cmp	r3, #2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e020      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e0e:	4b12      	ldr	r3, [pc, #72]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0f0      	beq.n	8007dfc <HAL_RCC_OscConfig+0x44c>
 8007e1a:	e018      	b.n	8007e4e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e1c:	4b10      	ldr	r3, [pc, #64]	; (8007e60 <HAL_RCC_OscConfig+0x4b0>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e22:	f7fb ff6d 	bl	8003d00 <HAL_GetTick>
 8007e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e28:	e008      	b.n	8007e3c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e2a:	f7fb ff69 	bl	8003d00 <HAL_GetTick>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	1ad3      	subs	r3, r2, r3
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e009      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3c:	4b06      	ldr	r3, [pc, #24]	; (8007e58 <HAL_RCC_OscConfig+0x4a8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1f0      	bne.n	8007e2a <HAL_RCC_OscConfig+0x47a>
 8007e48:	e001      	b.n	8007e4e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e000      	b.n	8007e50 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3718      	adds	r7, #24
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	40023800 	.word	0x40023800
 8007e5c:	40007000 	.word	0x40007000
 8007e60:	42470060 	.word	0x42470060

08007e64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e72:	2301      	movs	r3, #1
 8007e74:	e056      	b.n	8007f24 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d106      	bne.n	8007e96 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f7fb fbff 	bl	8003694 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2202      	movs	r2, #2
 8007e9a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eac:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	685a      	ldr	r2, [r3, #4]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	431a      	orrs	r2, r3
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	695b      	ldr	r3, [r3, #20]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	69db      	ldr	r3, [r3, #28]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a1b      	ldr	r3, [r3, #32]
 8007ede:	ea42 0103 	orr.w	r1, r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	699b      	ldr	r3, [r3, #24]
 8007ef2:	0c1b      	lsrs	r3, r3, #16
 8007ef4:	f003 0104 	and.w	r1, r3, #4
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	430a      	orrs	r2, r1
 8007f02:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69da      	ldr	r2, [r3, #28]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f12:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f22:	2300      	movs	r3, #0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b088      	sub	sp, #32
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	60b9      	str	r1, [r7, #8]
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d101      	bne.n	8007f4e <HAL_SPI_Transmit+0x22>
 8007f4a:	2302      	movs	r3, #2
 8007f4c:	e11e      	b.n	800818c <HAL_SPI_Transmit+0x260>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f56:	f7fb fed3 	bl	8003d00 <HAL_GetTick>
 8007f5a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f5c:	88fb      	ldrh	r3, [r7, #6]
 8007f5e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d002      	beq.n	8007f72 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f70:	e103      	b.n	800817a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d002      	beq.n	8007f7e <HAL_SPI_Transmit+0x52>
 8007f78:	88fb      	ldrh	r3, [r7, #6]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d102      	bne.n	8007f84 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f82:	e0fa      	b.n	800817a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	2203      	movs	r2, #3
 8007f88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	68ba      	ldr	r2, [r7, #8]
 8007f96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	88fa      	ldrh	r2, [r7, #6]
 8007f9c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	88fa      	ldrh	r2, [r7, #6]
 8007fa2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2200      	movs	r2, #0
 8007fa8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fca:	d107      	bne.n	8007fdc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fda:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	d007      	beq.n	8007ffa <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ff8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008002:	d14b      	bne.n	800809c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d002      	beq.n	8008012 <HAL_SPI_Transmit+0xe6>
 800800c:	8afb      	ldrh	r3, [r7, #22]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d13e      	bne.n	8008090 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	881a      	ldrh	r2, [r3, #0]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	1c9a      	adds	r2, r3, #2
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800802c:	b29b      	uxth	r3, r3
 800802e:	3b01      	subs	r3, #1
 8008030:	b29a      	uxth	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008036:	e02b      	b.n	8008090 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	f003 0302 	and.w	r3, r3, #2
 8008042:	2b02      	cmp	r3, #2
 8008044:	d112      	bne.n	800806c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804a:	881a      	ldrh	r2, [r3, #0]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	1c9a      	adds	r2, r3, #2
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	86da      	strh	r2, [r3, #54]	; 0x36
 800806a:	e011      	b.n	8008090 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800806c:	f7fb fe48 	bl	8003d00 <HAL_GetTick>
 8008070:	4602      	mov	r2, r0
 8008072:	69bb      	ldr	r3, [r7, #24]
 8008074:	1ad3      	subs	r3, r2, r3
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	429a      	cmp	r2, r3
 800807a:	d803      	bhi.n	8008084 <HAL_SPI_Transmit+0x158>
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008082:	d102      	bne.n	800808a <HAL_SPI_Transmit+0x15e>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d102      	bne.n	8008090 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800808e:	e074      	b.n	800817a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008094:	b29b      	uxth	r3, r3
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1ce      	bne.n	8008038 <HAL_SPI_Transmit+0x10c>
 800809a:	e04c      	b.n	8008136 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d002      	beq.n	80080aa <HAL_SPI_Transmit+0x17e>
 80080a4:	8afb      	ldrh	r3, [r7, #22]
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d140      	bne.n	800812c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	330c      	adds	r3, #12
 80080b4:	7812      	ldrb	r2, [r2, #0]
 80080b6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	3b01      	subs	r3, #1
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080d0:	e02c      	b.n	800812c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d113      	bne.n	8008108 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	330c      	adds	r3, #12
 80080ea:	7812      	ldrb	r2, [r2, #0]
 80080ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	1c5a      	adds	r2, r3, #1
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	3b01      	subs	r3, #1
 8008100:	b29a      	uxth	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	86da      	strh	r2, [r3, #54]	; 0x36
 8008106:	e011      	b.n	800812c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008108:	f7fb fdfa 	bl	8003d00 <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	429a      	cmp	r2, r3
 8008116:	d803      	bhi.n	8008120 <HAL_SPI_Transmit+0x1f4>
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800811e:	d102      	bne.n	8008126 <HAL_SPI_Transmit+0x1fa>
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d102      	bne.n	800812c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	77fb      	strb	r3, [r7, #31]
          goto error;
 800812a:	e026      	b.n	800817a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1cd      	bne.n	80080d2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	6839      	ldr	r1, [r7, #0]
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 fa44 	bl	80085c8 <SPI_EndRxTxTransaction>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d002      	beq.n	800814c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2220      	movs	r2, #32
 800814a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10a      	bne.n	800816a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008154:	2300      	movs	r3, #0
 8008156:	613b      	str	r3, [r7, #16]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	613b      	str	r3, [r7, #16]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e000      	b.n	800817a <HAL_SPI_Transmit+0x24e>
  }

error:
 8008178:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800818a:	7ffb      	ldrb	r3, [r7, #31]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3720      	adds	r7, #32
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b08c      	sub	sp, #48	; 0x30
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
 80081a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80081a2:	2301      	movs	r3, #1
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d101      	bne.n	80081ba <HAL_SPI_TransmitReceive+0x26>
 80081b6:	2302      	movs	r3, #2
 80081b8:	e18a      	b.n	80084d0 <HAL_SPI_TransmitReceive+0x33c>
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2201      	movs	r2, #1
 80081be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081c2:	f7fb fd9d 	bl	8003d00 <HAL_GetTick>
 80081c6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80081d8:	887b      	ldrh	r3, [r7, #2]
 80081da:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80081dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d00f      	beq.n	8008204 <HAL_SPI_TransmitReceive+0x70>
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081ea:	d107      	bne.n	80081fc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d103      	bne.n	80081fc <HAL_SPI_TransmitReceive+0x68>
 80081f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80081f8:	2b04      	cmp	r3, #4
 80081fa:	d003      	beq.n	8008204 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80081fc:	2302      	movs	r3, #2
 80081fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008202:	e15b      	b.n	80084bc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d005      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x82>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x82>
 8008210:	887b      	ldrh	r3, [r7, #2]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d103      	bne.n	800821e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800821c:	e14e      	b.n	80084bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008224:	b2db      	uxtb	r3, r3
 8008226:	2b04      	cmp	r3, #4
 8008228:	d003      	beq.n	8008232 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2205      	movs	r2, #5
 800822e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	687a      	ldr	r2, [r7, #4]
 800823c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	887a      	ldrh	r2, [r7, #2]
 8008242:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	887a      	ldrh	r2, [r7, #2]
 8008248:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	68ba      	ldr	r2, [r7, #8]
 800824e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	887a      	ldrh	r2, [r7, #2]
 8008254:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	887a      	ldrh	r2, [r7, #2]
 800825a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	2200      	movs	r2, #0
 8008260:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2200      	movs	r2, #0
 8008266:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008272:	2b40      	cmp	r3, #64	; 0x40
 8008274:	d007      	beq.n	8008286 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008284:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800828e:	d178      	bne.n	8008382 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d002      	beq.n	800829e <HAL_SPI_TransmitReceive+0x10a>
 8008298:	8b7b      	ldrh	r3, [r7, #26]
 800829a:	2b01      	cmp	r3, #1
 800829c:	d166      	bne.n	800836c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a2:	881a      	ldrh	r2, [r3, #0]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ae:	1c9a      	adds	r2, r3, #2
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b29a      	uxth	r2, r3
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082c2:	e053      	b.n	800836c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f003 0302 	and.w	r3, r3, #2
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d11b      	bne.n	800830a <HAL_SPI_TransmitReceive+0x176>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d016      	beq.n	800830a <HAL_SPI_TransmitReceive+0x176>
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b01      	cmp	r3, #1
 80082e0:	d113      	bne.n	800830a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082e6:	881a      	ldrh	r2, [r3, #0]
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082f2:	1c9a      	adds	r2, r3, #2
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	3b01      	subs	r3, #1
 8008300:	b29a      	uxth	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008306:	2300      	movs	r3, #0
 8008308:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0301 	and.w	r3, r3, #1
 8008314:	2b01      	cmp	r3, #1
 8008316:	d119      	bne.n	800834c <HAL_SPI_TransmitReceive+0x1b8>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800831c:	b29b      	uxth	r3, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	d014      	beq.n	800834c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68da      	ldr	r2, [r3, #12]
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	b292      	uxth	r2, r2
 800832e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	1c9a      	adds	r2, r3, #2
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833e:	b29b      	uxth	r3, r3
 8008340:	3b01      	subs	r3, #1
 8008342:	b29a      	uxth	r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008348:	2301      	movs	r3, #1
 800834a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800834c:	f7fb fcd8 	bl	8003d00 <HAL_GetTick>
 8008350:	4602      	mov	r2, r0
 8008352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008358:	429a      	cmp	r2, r3
 800835a:	d807      	bhi.n	800836c <HAL_SPI_TransmitReceive+0x1d8>
 800835c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800835e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008362:	d003      	beq.n	800836c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008364:	2303      	movs	r3, #3
 8008366:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800836a:	e0a7      	b.n	80084bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008370:	b29b      	uxth	r3, r3
 8008372:	2b00      	cmp	r3, #0
 8008374:	d1a6      	bne.n	80082c4 <HAL_SPI_TransmitReceive+0x130>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800837a:	b29b      	uxth	r3, r3
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1a1      	bne.n	80082c4 <HAL_SPI_TransmitReceive+0x130>
 8008380:	e07c      	b.n	800847c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d002      	beq.n	8008390 <HAL_SPI_TransmitReceive+0x1fc>
 800838a:	8b7b      	ldrh	r3, [r7, #26]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d16b      	bne.n	8008468 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	330c      	adds	r3, #12
 800839a:	7812      	ldrb	r2, [r2, #0]
 800839c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a2:	1c5a      	adds	r2, r3, #1
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	3b01      	subs	r3, #1
 80083b0:	b29a      	uxth	r2, r3
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083b6:	e057      	b.n	8008468 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	f003 0302 	and.w	r3, r3, #2
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d11c      	bne.n	8008400 <HAL_SPI_TransmitReceive+0x26c>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d017      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x26c>
 80083d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d114      	bne.n	8008400 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	330c      	adds	r3, #12
 80083e0:	7812      	ldrb	r2, [r2, #0]
 80083e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	1c5a      	adds	r2, r3, #1
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3b01      	subs	r3, #1
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	689b      	ldr	r3, [r3, #8]
 8008406:	f003 0301 	and.w	r3, r3, #1
 800840a:	2b01      	cmp	r3, #1
 800840c:	d119      	bne.n	8008442 <HAL_SPI_TransmitReceive+0x2ae>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008412:	b29b      	uxth	r3, r3
 8008414:	2b00      	cmp	r3, #0
 8008416:	d014      	beq.n	8008442 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68da      	ldr	r2, [r3, #12]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	b2d2      	uxtb	r2, r2
 8008424:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008434:	b29b      	uxth	r3, r3
 8008436:	3b01      	subs	r3, #1
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800843e:	2301      	movs	r3, #1
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008442:	f7fb fc5d 	bl	8003d00 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800844e:	429a      	cmp	r2, r3
 8008450:	d803      	bhi.n	800845a <HAL_SPI_TransmitReceive+0x2c6>
 8008452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008458:	d102      	bne.n	8008460 <HAL_SPI_TransmitReceive+0x2cc>
 800845a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800845c:	2b00      	cmp	r3, #0
 800845e:	d103      	bne.n	8008468 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008460:	2303      	movs	r3, #3
 8008462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008466:	e029      	b.n	80084bc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800846c:	b29b      	uxth	r3, r3
 800846e:	2b00      	cmp	r3, #0
 8008470:	d1a2      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x224>
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008476:	b29b      	uxth	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	d19d      	bne.n	80083b8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800847c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800847e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f000 f8a1 	bl	80085c8 <SPI_EndRxTxTransaction>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d006      	beq.n	800849a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2220      	movs	r2, #32
 8008496:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008498:	e010      	b.n	80084bc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10b      	bne.n	80084ba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80084a2:	2300      	movs	r3, #0
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	617b      	str	r3, [r7, #20]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	e000      	b.n	80084bc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80084ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80084cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3730      	adds	r7, #48	; 0x30
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80084e6:	b2db      	uxtb	r3, r3
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	603b      	str	r3, [r7, #0]
 8008500:	4613      	mov	r3, r2
 8008502:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008504:	e04c      	b.n	80085a0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800850c:	d048      	beq.n	80085a0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800850e:	f7fb fbf7 	bl	8003d00 <HAL_GetTick>
 8008512:	4602      	mov	r2, r0
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	1ad3      	subs	r3, r2, r3
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d902      	bls.n	8008524 <SPI_WaitFlagStateUntilTimeout+0x30>
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d13d      	bne.n	80085a0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	685a      	ldr	r2, [r3, #4]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008532:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800853c:	d111      	bne.n	8008562 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008546:	d004      	beq.n	8008552 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	689b      	ldr	r3, [r3, #8]
 800854c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008550:	d107      	bne.n	8008562 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008560:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800856a:	d10f      	bne.n	800858c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681a      	ldr	r2, [r3, #0]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800858a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2200      	movs	r2, #0
 8008598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800859c:	2303      	movs	r3, #3
 800859e:	e00f      	b.n	80085c0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	689a      	ldr	r2, [r3, #8]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	4013      	ands	r3, r2
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	bf0c      	ite	eq
 80085b0:	2301      	moveq	r3, #1
 80085b2:	2300      	movne	r3, #0
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	461a      	mov	r2, r3
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d1a3      	bne.n	8008506 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b088      	sub	sp, #32
 80085cc:	af02      	add	r7, sp, #8
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085d4:	4b1b      	ldr	r3, [pc, #108]	; (8008644 <SPI_EndRxTxTransaction+0x7c>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1b      	ldr	r2, [pc, #108]	; (8008648 <SPI_EndRxTxTransaction+0x80>)
 80085da:	fba2 2303 	umull	r2, r3, r2, r3
 80085de:	0d5b      	lsrs	r3, r3, #21
 80085e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80085e4:	fb02 f303 	mul.w	r3, r2, r3
 80085e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085f2:	d112      	bne.n	800861a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	9300      	str	r3, [sp, #0]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2200      	movs	r2, #0
 80085fc:	2180      	movs	r1, #128	; 0x80
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f7ff ff78 	bl	80084f4 <SPI_WaitFlagStateUntilTimeout>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d016      	beq.n	8008638 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860e:	f043 0220 	orr.w	r2, r3, #32
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e00f      	b.n	800863a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	3b01      	subs	r3, #1
 8008624:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	689b      	ldr	r3, [r3, #8]
 800862c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008630:	2b80      	cmp	r3, #128	; 0x80
 8008632:	d0f2      	beq.n	800861a <SPI_EndRxTxTransaction+0x52>
 8008634:	e000      	b.n	8008638 <SPI_EndRxTxTransaction+0x70>
        break;
 8008636:	bf00      	nop
  }

  return HAL_OK;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000000 	.word	0x20000000
 8008648:	165e9f81 	.word	0x165e9f81

0800864c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e01d      	b.n	800869a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008664:	b2db      	uxtb	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fb f902 	bl	800387c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3304      	adds	r3, #4
 8008688:	4619      	mov	r1, r3
 800868a:	4610      	mov	r0, r2
 800868c:	f000 f9f0 	bl	8008a70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2201      	movs	r2, #1
 8008694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3708      	adds	r7, #8
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b082      	sub	sp, #8
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d101      	bne.n	80086b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086b0:	2301      	movs	r3, #1
 80086b2:	e01d      	b.n	80086f0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d106      	bne.n	80086ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7fb f8b7 	bl	800383c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2202      	movs	r2, #2
 80086d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	3304      	adds	r3, #4
 80086de:	4619      	mov	r1, r3
 80086e0:	4610      	mov	r0, r2
 80086e2:	f000 f9c5 	bl	8008a70 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2201      	movs	r2, #1
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2201      	movs	r2, #1
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fc9a 	bl	8009044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a15      	ldr	r2, [pc, #84]	; (800876c <HAL_TIM_PWM_Start+0x74>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d004      	beq.n	8008724 <HAL_TIM_PWM_Start+0x2c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a14      	ldr	r2, [pc, #80]	; (8008770 <HAL_TIM_PWM_Start+0x78>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d101      	bne.n	8008728 <HAL_TIM_PWM_Start+0x30>
 8008724:	2301      	movs	r3, #1
 8008726:	e000      	b.n	800872a <HAL_TIM_PWM_Start+0x32>
 8008728:	2300      	movs	r3, #0
 800872a:	2b00      	cmp	r3, #0
 800872c:	d007      	beq.n	800873e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800873c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f003 0307 	and.w	r3, r3, #7
 8008748:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2b06      	cmp	r3, #6
 800874e:	d007      	beq.n	8008760 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681a      	ldr	r2, [r3, #0]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0201 	orr.w	r2, r2, #1
 800875e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008760:	2300      	movs	r3, #0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	40010000 	.word	0x40010000
 8008770:	40010400 	.word	0x40010400

08008774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800878a:	2302      	movs	r3, #2
 800878c:	e0b4      	b.n	80088f8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2b0c      	cmp	r3, #12
 80087a2:	f200 809f 	bhi.w	80088e4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80087a6:	a201      	add	r2, pc, #4	; (adr r2, 80087ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80087a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ac:	080087e1 	.word	0x080087e1
 80087b0:	080088e5 	.word	0x080088e5
 80087b4:	080088e5 	.word	0x080088e5
 80087b8:	080088e5 	.word	0x080088e5
 80087bc:	08008821 	.word	0x08008821
 80087c0:	080088e5 	.word	0x080088e5
 80087c4:	080088e5 	.word	0x080088e5
 80087c8:	080088e5 	.word	0x080088e5
 80087cc:	08008863 	.word	0x08008863
 80087d0:	080088e5 	.word	0x080088e5
 80087d4:	080088e5 	.word	0x080088e5
 80087d8:	080088e5 	.word	0x080088e5
 80087dc:	080088a3 	.word	0x080088a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 f9e2 	bl	8008bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0208 	orr.w	r2, r2, #8
 80087fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	699a      	ldr	r2, [r3, #24]
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f022 0204 	bic.w	r2, r2, #4
 800880a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6999      	ldr	r1, [r3, #24]
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691a      	ldr	r2, [r3, #16]
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	430a      	orrs	r2, r1
 800881c:	619a      	str	r2, [r3, #24]
      break;
 800881e:	e062      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68b9      	ldr	r1, [r7, #8]
 8008826:	4618      	mov	r0, r3
 8008828:	f000 fa32 	bl	8008c90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	699a      	ldr	r2, [r3, #24]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800883a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	699a      	ldr	r2, [r3, #24]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800884a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6999      	ldr	r1, [r3, #24]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	021a      	lsls	r2, r3, #8
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	430a      	orrs	r2, r1
 800885e:	619a      	str	r2, [r3, #24]
      break;
 8008860:	e041      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	68b9      	ldr	r1, [r7, #8]
 8008868:	4618      	mov	r0, r3
 800886a:	f000 fa87 	bl	8008d7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f042 0208 	orr.w	r2, r2, #8
 800887c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	69da      	ldr	r2, [r3, #28]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f022 0204 	bic.w	r2, r2, #4
 800888c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	69d9      	ldr	r1, [r3, #28]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	430a      	orrs	r2, r1
 800889e:	61da      	str	r2, [r3, #28]
      break;
 80088a0:	e021      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	68b9      	ldr	r1, [r7, #8]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 fadb 	bl	8008e64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	69da      	ldr	r2, [r3, #28]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	69da      	ldr	r2, [r3, #28]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69d9      	ldr	r1, [r3, #28]
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	021a      	lsls	r2, r3, #8
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	430a      	orrs	r2, r1
 80088e0:	61da      	str	r2, [r3, #28]
      break;
 80088e2:	e000      	b.n	80088e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80088e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2201      	movs	r2, #1
 80088ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3710      	adds	r7, #16
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008910:	2b01      	cmp	r3, #1
 8008912:	d101      	bne.n	8008918 <HAL_TIM_ConfigClockSource+0x18>
 8008914:	2302      	movs	r3, #2
 8008916:	e0a6      	b.n	8008a66 <HAL_TIM_ConfigClockSource+0x166>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2201      	movs	r2, #1
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008936:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800893e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	2b40      	cmp	r3, #64	; 0x40
 800894e:	d067      	beq.n	8008a20 <HAL_TIM_ConfigClockSource+0x120>
 8008950:	2b40      	cmp	r3, #64	; 0x40
 8008952:	d80b      	bhi.n	800896c <HAL_TIM_ConfigClockSource+0x6c>
 8008954:	2b10      	cmp	r3, #16
 8008956:	d073      	beq.n	8008a40 <HAL_TIM_ConfigClockSource+0x140>
 8008958:	2b10      	cmp	r3, #16
 800895a:	d802      	bhi.n	8008962 <HAL_TIM_ConfigClockSource+0x62>
 800895c:	2b00      	cmp	r3, #0
 800895e:	d06f      	beq.n	8008a40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008960:	e078      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008962:	2b20      	cmp	r3, #32
 8008964:	d06c      	beq.n	8008a40 <HAL_TIM_ConfigClockSource+0x140>
 8008966:	2b30      	cmp	r3, #48	; 0x30
 8008968:	d06a      	beq.n	8008a40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800896a:	e073      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800896c:	2b70      	cmp	r3, #112	; 0x70
 800896e:	d00d      	beq.n	800898c <HAL_TIM_ConfigClockSource+0x8c>
 8008970:	2b70      	cmp	r3, #112	; 0x70
 8008972:	d804      	bhi.n	800897e <HAL_TIM_ConfigClockSource+0x7e>
 8008974:	2b50      	cmp	r3, #80	; 0x50
 8008976:	d033      	beq.n	80089e0 <HAL_TIM_ConfigClockSource+0xe0>
 8008978:	2b60      	cmp	r3, #96	; 0x60
 800897a:	d041      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800897c:	e06a      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008982:	d066      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x152>
 8008984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008988:	d017      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0xba>
      break;
 800898a:	e063      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6818      	ldr	r0, [r3, #0]
 8008990:	683b      	ldr	r3, [r7, #0]
 8008992:	6899      	ldr	r1, [r3, #8]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	685a      	ldr	r2, [r3, #4]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	f000 fb32 	bl	8009004 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	609a      	str	r2, [r3, #8]
      break;
 80089b8:	e04c      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6899      	ldr	r1, [r3, #8]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f000 fb1b 	bl	8009004 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	689a      	ldr	r2, [r3, #8]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089dc:	609a      	str	r2, [r3, #8]
      break;
 80089de:	e039      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	6859      	ldr	r1, [r3, #4]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	68db      	ldr	r3, [r3, #12]
 80089ec:	461a      	mov	r2, r3
 80089ee:	f000 fa8f 	bl	8008f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2150      	movs	r1, #80	; 0x50
 80089f8:	4618      	mov	r0, r3
 80089fa:	f000 fae8 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 80089fe:	e029      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	6859      	ldr	r1, [r3, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	f000 faae 	bl	8008f6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	2160      	movs	r1, #96	; 0x60
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fad8 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008a1e:	e019      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	6859      	ldr	r1, [r3, #4]
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	f000 fa6f 	bl	8008f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2140      	movs	r1, #64	; 0x40
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f000 fac8 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008a3e:	e009      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681a      	ldr	r2, [r3, #0]
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4619      	mov	r1, r3
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	f000 fabf 	bl	8008fce <TIM_ITRx_SetConfig>
      break;
 8008a50:	e000      	b.n	8008a54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008a52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
	...

08008a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a40      	ldr	r2, [pc, #256]	; (8008b84 <TIM_Base_SetConfig+0x114>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d013      	beq.n	8008ab0 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a8e:	d00f      	beq.n	8008ab0 <TIM_Base_SetConfig+0x40>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a3d      	ldr	r2, [pc, #244]	; (8008b88 <TIM_Base_SetConfig+0x118>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d00b      	beq.n	8008ab0 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a3c      	ldr	r2, [pc, #240]	; (8008b8c <TIM_Base_SetConfig+0x11c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d007      	beq.n	8008ab0 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a3b      	ldr	r2, [pc, #236]	; (8008b90 <TIM_Base_SetConfig+0x120>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d003      	beq.n	8008ab0 <TIM_Base_SetConfig+0x40>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a3a      	ldr	r2, [pc, #232]	; (8008b94 <TIM_Base_SetConfig+0x124>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d108      	bne.n	8008ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2f      	ldr	r2, [pc, #188]	; (8008b84 <TIM_Base_SetConfig+0x114>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d02b      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad0:	d027      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2c      	ldr	r2, [pc, #176]	; (8008b88 <TIM_Base_SetConfig+0x118>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d023      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a2b      	ldr	r2, [pc, #172]	; (8008b8c <TIM_Base_SetConfig+0x11c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d01f      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a2a      	ldr	r2, [pc, #168]	; (8008b90 <TIM_Base_SetConfig+0x120>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d01b      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a29      	ldr	r2, [pc, #164]	; (8008b94 <TIM_Base_SetConfig+0x124>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d017      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a28      	ldr	r2, [pc, #160]	; (8008b98 <TIM_Base_SetConfig+0x128>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d013      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a27      	ldr	r2, [pc, #156]	; (8008b9c <TIM_Base_SetConfig+0x12c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00f      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a26      	ldr	r2, [pc, #152]	; (8008ba0 <TIM_Base_SetConfig+0x130>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d00b      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a25      	ldr	r2, [pc, #148]	; (8008ba4 <TIM_Base_SetConfig+0x134>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d007      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a24      	ldr	r2, [pc, #144]	; (8008ba8 <TIM_Base_SetConfig+0x138>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d003      	beq.n	8008b22 <TIM_Base_SetConfig+0xb2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a23      	ldr	r2, [pc, #140]	; (8008bac <TIM_Base_SetConfig+0x13c>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d108      	bne.n	8008b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	695b      	ldr	r3, [r3, #20]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	689a      	ldr	r2, [r3, #8]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	4a0a      	ldr	r2, [pc, #40]	; (8008b84 <TIM_Base_SetConfig+0x114>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d003      	beq.n	8008b68 <TIM_Base_SetConfig+0xf8>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	4a0c      	ldr	r2, [pc, #48]	; (8008b94 <TIM_Base_SetConfig+0x124>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d103      	bne.n	8008b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	691a      	ldr	r2, [r3, #16]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2201      	movs	r2, #1
 8008b74:	615a      	str	r2, [r3, #20]
}
 8008b76:	bf00      	nop
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40010000 	.word	0x40010000
 8008b88:	40000400 	.word	0x40000400
 8008b8c:	40000800 	.word	0x40000800
 8008b90:	40000c00 	.word	0x40000c00
 8008b94:	40010400 	.word	0x40010400
 8008b98:	40014000 	.word	0x40014000
 8008b9c:	40014400 	.word	0x40014400
 8008ba0:	40014800 	.word	0x40014800
 8008ba4:	40001800 	.word	0x40001800
 8008ba8:	40001c00 	.word	0x40001c00
 8008bac:	40002000 	.word	0x40002000

08008bb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f023 0201 	bic.w	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	699b      	ldr	r3, [r3, #24]
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f023 0303 	bic.w	r3, r3, #3
 8008be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68fa      	ldr	r2, [r7, #12]
 8008bee:	4313      	orrs	r3, r2
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	f023 0302 	bic.w	r3, r3, #2
 8008bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a20      	ldr	r2, [pc, #128]	; (8008c88 <TIM_OC1_SetConfig+0xd8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC1_SetConfig+0x64>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a1f      	ldr	r2, [pc, #124]	; (8008c8c <TIM_OC1_SetConfig+0xdc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d10c      	bne.n	8008c2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0308 	bic.w	r3, r3, #8
 8008c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f023 0304 	bic.w	r3, r3, #4
 8008c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a15      	ldr	r2, [pc, #84]	; (8008c88 <TIM_OC1_SetConfig+0xd8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d003      	beq.n	8008c3e <TIM_OC1_SetConfig+0x8e>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a14      	ldr	r2, [pc, #80]	; (8008c8c <TIM_OC1_SetConfig+0xdc>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d111      	bne.n	8008c62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	695b      	ldr	r3, [r3, #20]
 8008c52:	693a      	ldr	r2, [r7, #16]
 8008c54:	4313      	orrs	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	bf00      	nop
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400

08008c90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f023 0210 	bic.w	r2, r3, #16
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f023 0320 	bic.w	r3, r3, #32
 8008cda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	011b      	lsls	r3, r3, #4
 8008ce2:	697a      	ldr	r2, [r7, #20]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a22      	ldr	r2, [pc, #136]	; (8008d74 <TIM_OC2_SetConfig+0xe4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC2_SetConfig+0x68>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a21      	ldr	r2, [pc, #132]	; (8008d78 <TIM_OC2_SetConfig+0xe8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d10d      	bne.n	8008d14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	011b      	lsls	r3, r3, #4
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a17      	ldr	r2, [pc, #92]	; (8008d74 <TIM_OC2_SetConfig+0xe4>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d003      	beq.n	8008d24 <TIM_OC2_SetConfig+0x94>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	4a16      	ldr	r2, [pc, #88]	; (8008d78 <TIM_OC2_SetConfig+0xe8>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d113      	bne.n	8008d4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	693a      	ldr	r2, [r7, #16]
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	693a      	ldr	r2, [r7, #16]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685a      	ldr	r2, [r3, #4]
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	621a      	str	r2, [r3, #32]
}
 8008d66:	bf00      	nop
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40010400 	.word	0x40010400

08008d7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	69db      	ldr	r3, [r3, #28]
 8008da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	697a      	ldr	r2, [r7, #20]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a21      	ldr	r2, [pc, #132]	; (8008e5c <TIM_OC3_SetConfig+0xe0>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d003      	beq.n	8008de2 <TIM_OC3_SetConfig+0x66>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a20      	ldr	r2, [pc, #128]	; (8008e60 <TIM_OC3_SetConfig+0xe4>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d10d      	bne.n	8008dfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	021b      	lsls	r3, r3, #8
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008dfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a16      	ldr	r2, [pc, #88]	; (8008e5c <TIM_OC3_SetConfig+0xe0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d003      	beq.n	8008e0e <TIM_OC3_SetConfig+0x92>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a15      	ldr	r2, [pc, #84]	; (8008e60 <TIM_OC3_SetConfig+0xe4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d113      	bne.n	8008e36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	699b      	ldr	r3, [r3, #24]
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	621a      	str	r2, [r3, #32]
}
 8008e50:	bf00      	nop
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	40010000 	.word	0x40010000
 8008e60:	40010400 	.word	0x40010400

08008e64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	021b      	lsls	r3, r3, #8
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008eae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	031b      	lsls	r3, r3, #12
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	4a12      	ldr	r2, [pc, #72]	; (8008f08 <TIM_OC4_SetConfig+0xa4>)
 8008ec0:	4293      	cmp	r3, r2
 8008ec2:	d003      	beq.n	8008ecc <TIM_OC4_SetConfig+0x68>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a11      	ldr	r2, [pc, #68]	; (8008f0c <TIM_OC4_SetConfig+0xa8>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d109      	bne.n	8008ee0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ecc:	697b      	ldr	r3, [r7, #20]
 8008ece:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ed2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	695b      	ldr	r3, [r3, #20]
 8008ed8:	019b      	lsls	r3, r3, #6
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	697a      	ldr	r2, [r7, #20]
 8008ee4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	621a      	str	r2, [r3, #32]
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40010400 	.word	0x40010400

08008f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	6a1b      	ldr	r3, [r3, #32]
 8008f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	f023 0201 	bic.w	r2, r3, #1
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	699b      	ldr	r3, [r3, #24]
 8008f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	011b      	lsls	r3, r3, #4
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f023 030a 	bic.w	r3, r3, #10
 8008f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	621a      	str	r2, [r3, #32]
}
 8008f62:	bf00      	nop
 8008f64:	371c      	adds	r7, #28
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr

08008f6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f6e:	b480      	push	{r7}
 8008f70:	b087      	sub	sp, #28
 8008f72:	af00      	add	r7, sp, #0
 8008f74:	60f8      	str	r0, [r7, #12]
 8008f76:	60b9      	str	r1, [r7, #8]
 8008f78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1b      	ldr	r3, [r3, #32]
 8008f7e:	f023 0210 	bic.w	r2, r3, #16
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	031b      	lsls	r3, r3, #12
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008faa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	011b      	lsls	r3, r3, #4
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	697a      	ldr	r2, [r7, #20]
 8008fba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	621a      	str	r2, [r3, #32]
}
 8008fc2:	bf00      	nop
 8008fc4:	371c      	adds	r7, #28
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fe6:	683a      	ldr	r2, [r7, #0]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	f043 0307 	orr.w	r3, r3, #7
 8008ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	609a      	str	r2, [r3, #8]
}
 8008ff8:	bf00      	nop
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009004:	b480      	push	{r7}
 8009006:	b087      	sub	sp, #28
 8009008:	af00      	add	r7, sp, #0
 800900a:	60f8      	str	r0, [r7, #12]
 800900c:	60b9      	str	r1, [r7, #8]
 800900e:	607a      	str	r2, [r7, #4]
 8009010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800901e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	021a      	lsls	r2, r3, #8
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	431a      	orrs	r2, r3
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4313      	orrs	r3, r2
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	609a      	str	r2, [r3, #8]
}
 8009038:	bf00      	nop
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	f003 031f 	and.w	r3, r3, #31
 8009056:	2201      	movs	r2, #1
 8009058:	fa02 f303 	lsl.w	r3, r2, r3
 800905c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	6a1a      	ldr	r2, [r3, #32]
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	43db      	mvns	r3, r3
 8009066:	401a      	ands	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a1a      	ldr	r2, [r3, #32]
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f003 031f 	and.w	r3, r3, #31
 8009076:	6879      	ldr	r1, [r7, #4]
 8009078:	fa01 f303 	lsl.w	r3, r1, r3
 800907c:	431a      	orrs	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	621a      	str	r2, [r3, #32]
}
 8009082:	bf00      	nop
 8009084:	371c      	adds	r7, #28
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr
	...

08009090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090a0:	2b01      	cmp	r3, #1
 80090a2:	d101      	bne.n	80090a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090a4:	2302      	movs	r3, #2
 80090a6:	e05a      	b.n	800915e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2202      	movs	r2, #2
 80090b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	68fa      	ldr	r2, [r7, #12]
 80090d6:	4313      	orrs	r3, r2
 80090d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a21      	ldr	r2, [pc, #132]	; (800916c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d022      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090f4:	d01d      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a1d      	ldr	r2, [pc, #116]	; (8009170 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d018      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d013      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a1a      	ldr	r2, [pc, #104]	; (8009178 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d00e      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a18      	ldr	r2, [pc, #96]	; (800917c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d009      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	4a17      	ldr	r2, [pc, #92]	; (8009180 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d004      	beq.n	8009132 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a15      	ldr	r2, [pc, #84]	; (8009184 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d10c      	bne.n	800914c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009138:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	4313      	orrs	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68ba      	ldr	r2, [r7, #8]
 800914a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr
 800916a:	bf00      	nop
 800916c:	40010000 	.word	0x40010000
 8009170:	40000400 	.word	0x40000400
 8009174:	40000800 	.word	0x40000800
 8009178:	40000c00 	.word	0x40000c00
 800917c:	40010400 	.word	0x40010400
 8009180:	40014000 	.word	0x40014000
 8009184:	40001800 	.word	0x40001800

08009188 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009188:	b084      	sub	sp, #16
 800918a:	b580      	push	{r7, lr}
 800918c:	b084      	sub	sp, #16
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	f107 001c 	add.w	r0, r7, #28
 8009196:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800919a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919c:	2b01      	cmp	r3, #1
 800919e:	d122      	bne.n	80091e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80091b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68db      	ldr	r3, [r3, #12]
 80091c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80091c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d105      	bne.n	80091da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f001 fac0 	bl	800a760 <USB_CoreReset>
 80091e0:	4603      	mov	r3, r0
 80091e2:	73fb      	strb	r3, [r7, #15]
 80091e4:	e01a      	b.n	800921c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80091f2:	6878      	ldr	r0, [r7, #4]
 80091f4:	f001 fab4 	bl	800a760 <USB_CoreReset>
 80091f8:	4603      	mov	r3, r0
 80091fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80091fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	639a      	str	r2, [r3, #56]	; 0x38
 800920e:	e005      	b.n	800921c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009214:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800921c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921e:	2b01      	cmp	r3, #1
 8009220:	d10b      	bne.n	800923a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f043 0206 	orr.w	r2, r3, #6
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f043 0220 	orr.w	r2, r3, #32
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800923a:	7bfb      	ldrb	r3, [r7, #15]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3710      	adds	r7, #16
 8009240:	46bd      	mov	sp, r7
 8009242:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009246:	b004      	add	sp, #16
 8009248:	4770      	bx	lr
	...

0800924c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	4613      	mov	r3, r2
 8009258:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800925a:	79fb      	ldrb	r3, [r7, #7]
 800925c:	2b02      	cmp	r3, #2
 800925e:	d165      	bne.n	800932c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	4a41      	ldr	r2, [pc, #260]	; (8009368 <USB_SetTurnaroundTime+0x11c>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d906      	bls.n	8009276 <USB_SetTurnaroundTime+0x2a>
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	4a40      	ldr	r2, [pc, #256]	; (800936c <USB_SetTurnaroundTime+0x120>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d802      	bhi.n	8009276 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009270:	230f      	movs	r3, #15
 8009272:	617b      	str	r3, [r7, #20]
 8009274:	e062      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	4a3c      	ldr	r2, [pc, #240]	; (800936c <USB_SetTurnaroundTime+0x120>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d906      	bls.n	800928c <USB_SetTurnaroundTime+0x40>
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	4a3b      	ldr	r2, [pc, #236]	; (8009370 <USB_SetTurnaroundTime+0x124>)
 8009282:	4293      	cmp	r3, r2
 8009284:	d802      	bhi.n	800928c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009286:	230e      	movs	r3, #14
 8009288:	617b      	str	r3, [r7, #20]
 800928a:	e057      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	4a38      	ldr	r2, [pc, #224]	; (8009370 <USB_SetTurnaroundTime+0x124>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d906      	bls.n	80092a2 <USB_SetTurnaroundTime+0x56>
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4a37      	ldr	r2, [pc, #220]	; (8009374 <USB_SetTurnaroundTime+0x128>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d802      	bhi.n	80092a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800929c:	230d      	movs	r3, #13
 800929e:	617b      	str	r3, [r7, #20]
 80092a0:	e04c      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	4a33      	ldr	r2, [pc, #204]	; (8009374 <USB_SetTurnaroundTime+0x128>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d906      	bls.n	80092b8 <USB_SetTurnaroundTime+0x6c>
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	4a32      	ldr	r2, [pc, #200]	; (8009378 <USB_SetTurnaroundTime+0x12c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d802      	bhi.n	80092b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80092b2:	230c      	movs	r3, #12
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e041      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	4a2f      	ldr	r2, [pc, #188]	; (8009378 <USB_SetTurnaroundTime+0x12c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d906      	bls.n	80092ce <USB_SetTurnaroundTime+0x82>
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	4a2e      	ldr	r2, [pc, #184]	; (800937c <USB_SetTurnaroundTime+0x130>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d802      	bhi.n	80092ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80092c8:	230b      	movs	r3, #11
 80092ca:	617b      	str	r3, [r7, #20]
 80092cc:	e036      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	4a2a      	ldr	r2, [pc, #168]	; (800937c <USB_SetTurnaroundTime+0x130>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d906      	bls.n	80092e4 <USB_SetTurnaroundTime+0x98>
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4a29      	ldr	r2, [pc, #164]	; (8009380 <USB_SetTurnaroundTime+0x134>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d802      	bhi.n	80092e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80092de:	230a      	movs	r3, #10
 80092e0:	617b      	str	r3, [r7, #20]
 80092e2:	e02b      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4a26      	ldr	r2, [pc, #152]	; (8009380 <USB_SetTurnaroundTime+0x134>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d906      	bls.n	80092fa <USB_SetTurnaroundTime+0xae>
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	4a25      	ldr	r2, [pc, #148]	; (8009384 <USB_SetTurnaroundTime+0x138>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d802      	bhi.n	80092fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80092f4:	2309      	movs	r3, #9
 80092f6:	617b      	str	r3, [r7, #20]
 80092f8:	e020      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	4a21      	ldr	r2, [pc, #132]	; (8009384 <USB_SetTurnaroundTime+0x138>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d906      	bls.n	8009310 <USB_SetTurnaroundTime+0xc4>
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	4a20      	ldr	r2, [pc, #128]	; (8009388 <USB_SetTurnaroundTime+0x13c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d802      	bhi.n	8009310 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800930a:	2308      	movs	r3, #8
 800930c:	617b      	str	r3, [r7, #20]
 800930e:	e015      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	4a1d      	ldr	r2, [pc, #116]	; (8009388 <USB_SetTurnaroundTime+0x13c>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d906      	bls.n	8009326 <USB_SetTurnaroundTime+0xda>
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	4a1c      	ldr	r2, [pc, #112]	; (800938c <USB_SetTurnaroundTime+0x140>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d802      	bhi.n	8009326 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009320:	2307      	movs	r3, #7
 8009322:	617b      	str	r3, [r7, #20]
 8009324:	e00a      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009326:	2306      	movs	r3, #6
 8009328:	617b      	str	r3, [r7, #20]
 800932a:	e007      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800932c:	79fb      	ldrb	r3, [r7, #7]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d102      	bne.n	8009338 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009332:	2309      	movs	r3, #9
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e001      	b.n	800933c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009338:	2309      	movs	r3, #9
 800933a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	68db      	ldr	r3, [r3, #12]
 8009340:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	029b      	lsls	r3, r3, #10
 8009350:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009354:	431a      	orrs	r2, r3
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	371c      	adds	r7, #28
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr
 8009368:	00d8acbf 	.word	0x00d8acbf
 800936c:	00e4e1bf 	.word	0x00e4e1bf
 8009370:	00f423ff 	.word	0x00f423ff
 8009374:	0106737f 	.word	0x0106737f
 8009378:	011a499f 	.word	0x011a499f
 800937c:	01312cff 	.word	0x01312cff
 8009380:	014ca43f 	.word	0x014ca43f
 8009384:	016e35ff 	.word	0x016e35ff
 8009388:	01a6ab1f 	.word	0x01a6ab1f
 800938c:	01e847ff 	.word	0x01e847ff

08009390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	f043 0201 	orr.w	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	f023 0201 	bic.w	r2, r3, #1
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093c6:	2300      	movs	r3, #0
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	460b      	mov	r3, r1
 80093de:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	68db      	ldr	r3, [r3, #12]
 80093e4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d106      	bne.n	8009400 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	60da      	str	r2, [r3, #12]
 80093fe:	e00b      	b.n	8009418 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009400:	78fb      	ldrb	r3, [r7, #3]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d106      	bne.n	8009414 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	68db      	ldr	r3, [r3, #12]
 800940a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	60da      	str	r2, [r3, #12]
 8009412:	e001      	b.n	8009418 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e003      	b.n	8009420 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8009418:	2032      	movs	r0, #50	; 0x32
 800941a:	f7fa fc7d 	bl	8003d18 <HAL_Delay>

  return HAL_OK;
 800941e:	2300      	movs	r3, #0
}
 8009420:	4618      	mov	r0, r3
 8009422:	3708      	adds	r7, #8
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009428:	b084      	sub	sp, #16
 800942a:	b580      	push	{r7, lr}
 800942c:	b086      	sub	sp, #24
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009442:	2300      	movs	r3, #0
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	e009      	b.n	800945c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009448:	687a      	ldr	r2, [r7, #4]
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	3340      	adds	r3, #64	; 0x40
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	2200      	movs	r2, #0
 8009454:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	3301      	adds	r3, #1
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	2b0e      	cmp	r3, #14
 8009460:	d9f2      	bls.n	8009448 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009462:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009464:	2b00      	cmp	r3, #0
 8009466:	d11c      	bne.n	80094a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	68fa      	ldr	r2, [r7, #12]
 8009472:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009476:	f043 0302 	orr.w	r3, r3, #2
 800947a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009480:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	e005      	b.n	80094ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094b4:	461a      	mov	r2, r3
 80094b6:	2300      	movs	r3, #0
 80094b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c0:	4619      	mov	r1, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c8:	461a      	mov	r2, r3
 80094ca:	680b      	ldr	r3, [r1, #0]
 80094cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d10c      	bne.n	80094ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80094d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d104      	bne.n	80094e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80094da:	2100      	movs	r1, #0
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f000 f949 	bl	8009774 <USB_SetDevSpeed>
 80094e2:	e008      	b.n	80094f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80094e4:	2101      	movs	r1, #1
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f944 	bl	8009774 <USB_SetDevSpeed>
 80094ec:	e003      	b.n	80094f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80094ee:	2103      	movs	r1, #3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f000 f93f 	bl	8009774 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80094f6:	2110      	movs	r1, #16
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f8f3 	bl	80096e4 <USB_FlushTxFifo>
 80094fe:	4603      	mov	r3, r0
 8009500:	2b00      	cmp	r3, #0
 8009502:	d001      	beq.n	8009508 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009504:	2301      	movs	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f000 f911 	bl	8009730 <USB_FlushRxFifo>
 800950e:	4603      	mov	r3, r0
 8009510:	2b00      	cmp	r3, #0
 8009512:	d001      	beq.n	8009518 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009514:	2301      	movs	r3, #1
 8009516:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800951e:	461a      	mov	r2, r3
 8009520:	2300      	movs	r3, #0
 8009522:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952a:	461a      	mov	r2, r3
 800952c:	2300      	movs	r3, #0
 800952e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009536:	461a      	mov	r2, r3
 8009538:	2300      	movs	r3, #0
 800953a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800953c:	2300      	movs	r3, #0
 800953e:	613b      	str	r3, [r7, #16]
 8009540:	e043      	b.n	80095ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009542:	693b      	ldr	r3, [r7, #16]
 8009544:	015a      	lsls	r2, r3, #5
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	4413      	add	r3, r2
 800954a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009554:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009558:	d118      	bne.n	800958c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10a      	bne.n	8009576 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	015a      	lsls	r2, r3, #5
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956c:	461a      	mov	r2, r3
 800956e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	e013      	b.n	800959e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009582:	461a      	mov	r2, r3
 8009584:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	e008      	b.n	800959e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	4413      	add	r3, r2
 8009594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009598:	461a      	mov	r2, r3
 800959a:	2300      	movs	r3, #0
 800959c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095aa:	461a      	mov	r2, r3
 80095ac:	2300      	movs	r3, #0
 80095ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80095b0:	693b      	ldr	r3, [r7, #16]
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095bc:	461a      	mov	r2, r3
 80095be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	3301      	adds	r3, #1
 80095c8:	613b      	str	r3, [r7, #16]
 80095ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095cc:	693a      	ldr	r2, [r7, #16]
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d3b7      	bcc.n	8009542 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80095d2:	2300      	movs	r3, #0
 80095d4:	613b      	str	r3, [r7, #16]
 80095d6:	e043      	b.n	8009660 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	015a      	lsls	r2, r3, #5
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	4413      	add	r3, r2
 80095e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80095ee:	d118      	bne.n	8009622 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d10a      	bne.n	800960c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	461a      	mov	r2, r3
 8009604:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	e013      	b.n	8009634 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	461a      	mov	r2, r3
 800961a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	e008      	b.n	8009634 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962e:	461a      	mov	r2, r3
 8009630:	2300      	movs	r3, #0
 8009632:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	015a      	lsls	r2, r3, #5
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	4413      	add	r3, r2
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	461a      	mov	r2, r3
 8009642:	2300      	movs	r3, #0
 8009644:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4413      	add	r3, r2
 800964e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009652:	461a      	mov	r2, r3
 8009654:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009658:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	3301      	adds	r3, #1
 800965e:	613b      	str	r3, [r7, #16]
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	429a      	cmp	r2, r3
 8009666:	d3b7      	bcc.n	80095d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800967a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009688:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800968a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968c:	2b00      	cmp	r3, #0
 800968e:	d105      	bne.n	800969c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	699b      	ldr	r3, [r3, #24]
 8009694:	f043 0210 	orr.w	r2, r3, #16
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699a      	ldr	r2, [r3, #24]
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <USB_DevInit+0x2b8>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80096a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d005      	beq.n	80096ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	f043 0208 	orr.w	r2, r3, #8
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80096ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d107      	bne.n	80096d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	699b      	ldr	r3, [r3, #24]
 80096c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80096c8:	f043 0304 	orr.w	r3, r3, #4
 80096cc:	687a      	ldr	r2, [r7, #4]
 80096ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096dc:	b004      	add	sp, #16
 80096de:	4770      	bx	lr
 80096e0:	803c3800 	.word	0x803c3800

080096e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80096ee:	2300      	movs	r3, #0
 80096f0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	019b      	lsls	r3, r3, #6
 80096f6:	f043 0220 	orr.w	r2, r3, #32
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3301      	adds	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	4a09      	ldr	r2, [pc, #36]	; (800972c <USB_FlushTxFifo+0x48>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d901      	bls.n	8009710 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e006      	b.n	800971e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b20      	cmp	r3, #32
 800971a:	d0f0      	beq.n	80096fe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800971c:	2300      	movs	r3, #0
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop
 800972c:	00030d40 	.word	0x00030d40

08009730 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009730:	b480      	push	{r7}
 8009732:	b085      	sub	sp, #20
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2210      	movs	r2, #16
 8009740:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3301      	adds	r3, #1
 8009746:	60fb      	str	r3, [r7, #12]
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	4a09      	ldr	r2, [pc, #36]	; (8009770 <USB_FlushRxFifo+0x40>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d901      	bls.n	8009754 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009750:	2303      	movs	r3, #3
 8009752:	e006      	b.n	8009762 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
 8009758:	f003 0310 	and.w	r3, r3, #16
 800975c:	2b10      	cmp	r3, #16
 800975e:	d0f0      	beq.n	8009742 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr
 800976e:	bf00      	nop
 8009770:	00030d40 	.word	0x00030d40

08009774 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	78fb      	ldrb	r3, [r7, #3]
 800978e:	68f9      	ldr	r1, [r7, #12]
 8009790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009794:	4313      	orrs	r3, r2
 8009796:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b087      	sub	sp, #28
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	f003 0306 	and.w	r3, r3, #6
 80097be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80097c6:	2300      	movs	r3, #0
 80097c8:	75fb      	strb	r3, [r7, #23]
 80097ca:	e00a      	b.n	80097e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d002      	beq.n	80097d8 <USB_GetDevSpeed+0x32>
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2b06      	cmp	r3, #6
 80097d6:	d102      	bne.n	80097de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80097d8:	2302      	movs	r3, #2
 80097da:	75fb      	strb	r3, [r7, #23]
 80097dc:	e001      	b.n	80097e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80097de:	230f      	movs	r3, #15
 80097e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80097e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	785b      	ldrb	r3, [r3, #1]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d13a      	bne.n	8009882 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009812:	69da      	ldr	r2, [r3, #28]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	f003 030f 	and.w	r3, r3, #15
 800981c:	2101      	movs	r1, #1
 800981e:	fa01 f303 	lsl.w	r3, r1, r3
 8009822:	b29b      	uxth	r3, r3
 8009824:	68f9      	ldr	r1, [r7, #12]
 8009826:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800982a:	4313      	orrs	r3, r2
 800982c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d155      	bne.n	80098f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	015a      	lsls	r2, r3, #5
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	4413      	add	r3, r2
 800984c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009850:	681a      	ldr	r2, [r3, #0]
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	78db      	ldrb	r3, [r3, #3]
 800985e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009860:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	059b      	lsls	r3, r3, #22
 8009866:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009868:	4313      	orrs	r3, r2
 800986a:	68ba      	ldr	r2, [r7, #8]
 800986c:	0151      	lsls	r1, r2, #5
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	440a      	add	r2, r1
 8009872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800987a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800987e:	6013      	str	r3, [r2, #0]
 8009880:	e036      	b.n	80098f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009888:	69da      	ldr	r2, [r3, #28]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	781b      	ldrb	r3, [r3, #0]
 800988e:	f003 030f 	and.w	r3, r3, #15
 8009892:	2101      	movs	r1, #1
 8009894:	fa01 f303 	lsl.w	r3, r1, r3
 8009898:	041b      	lsls	r3, r3, #16
 800989a:	68f9      	ldr	r1, [r7, #12]
 800989c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098a0:	4313      	orrs	r3, r2
 80098a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	015a      	lsls	r2, r3, #5
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	4413      	add	r3, r2
 80098ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d11a      	bne.n	80098f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	78db      	ldrb	r3, [r3, #3]
 80098d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80098d6:	430b      	orrs	r3, r1
 80098d8:	4313      	orrs	r3, r2
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	0151      	lsls	r1, r2, #5
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	440a      	add	r2, r1
 80098e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fc:	4770      	bx	lr
	...

08009900 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	785b      	ldrb	r3, [r3, #1]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d161      	bne.n	80099e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	015a      	lsls	r2, r3, #5
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800992e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009932:	d11f      	bne.n	8009974 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68ba      	ldr	r2, [r7, #8]
 8009944:	0151      	lsls	r1, r2, #5
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	440a      	add	r2, r1
 800994a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800994e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009952:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009954:	68bb      	ldr	r3, [r7, #8]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	0151      	lsls	r1, r2, #5
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	440a      	add	r2, r1
 800996a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800996e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009972:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800997a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800997c:	683b      	ldr	r3, [r7, #0]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	f003 030f 	and.w	r3, r3, #15
 8009984:	2101      	movs	r1, #1
 8009986:	fa01 f303 	lsl.w	r3, r1, r3
 800998a:	b29b      	uxth	r3, r3
 800998c:	43db      	mvns	r3, r3
 800998e:	68f9      	ldr	r1, [r7, #12]
 8009990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009994:	4013      	ands	r3, r2
 8009996:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800999e:	69da      	ldr	r2, [r3, #28]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	f003 030f 	and.w	r3, r3, #15
 80099a8:	2101      	movs	r1, #1
 80099aa:	fa01 f303 	lsl.w	r3, r1, r3
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	43db      	mvns	r3, r3
 80099b2:	68f9      	ldr	r1, [r7, #12]
 80099b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80099b8:	4013      	ands	r3, r2
 80099ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68bb      	ldr	r3, [r7, #8]
 80099cc:	0159      	lsls	r1, r3, #5
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	440b      	add	r3, r1
 80099d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099d6:	4619      	mov	r1, r3
 80099d8:	4b35      	ldr	r3, [pc, #212]	; (8009ab0 <USB_DeactivateEndpoint+0x1b0>)
 80099da:	4013      	ands	r3, r2
 80099dc:	600b      	str	r3, [r1, #0]
 80099de:	e060      	b.n	8009aa2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099f6:	d11f      	bne.n	8009a38 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	68ba      	ldr	r2, [r7, #8]
 8009a08:	0151      	lsls	r1, r2, #5
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	440a      	add	r2, r1
 8009a0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009a16:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	0151      	lsls	r1, r2, #5
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	440a      	add	r2, r1
 8009a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a32:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a36:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 030f 	and.w	r3, r3, #15
 8009a48:	2101      	movs	r1, #1
 8009a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4e:	041b      	lsls	r3, r3, #16
 8009a50:	43db      	mvns	r3, r3
 8009a52:	68f9      	ldr	r1, [r7, #12]
 8009a54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a58:	4013      	ands	r3, r2
 8009a5a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a62:	69da      	ldr	r2, [r3, #28]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	f003 030f 	and.w	r3, r3, #15
 8009a6c:	2101      	movs	r1, #1
 8009a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a72:	041b      	lsls	r3, r3, #16
 8009a74:	43db      	mvns	r3, r3
 8009a76:	68f9      	ldr	r1, [r7, #12]
 8009a78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	0159      	lsls	r1, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	440b      	add	r3, r1
 8009a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	4b05      	ldr	r3, [pc, #20]	; (8009ab4 <USB_DeactivateEndpoint+0x1b4>)
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3714      	adds	r7, #20
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aae:	4770      	bx	lr
 8009ab0:	ec337800 	.word	0xec337800
 8009ab4:	eff37800 	.word	0xeff37800

08009ab8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b08a      	sub	sp, #40	; 0x28
 8009abc:	af02      	add	r7, sp, #8
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	785b      	ldrb	r3, [r3, #1]
 8009ad4:	2b01      	cmp	r3, #1
 8009ad6:	f040 815c 	bne.w	8009d92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d132      	bne.n	8009b48 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aee:	691b      	ldr	r3, [r3, #16]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009b06:	69bb      	ldr	r3, [r7, #24]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	69ba      	ldr	r2, [r7, #24]
 8009b16:	0151      	lsls	r1, r2, #5
 8009b18:	69fa      	ldr	r2, [r7, #28]
 8009b1a:	440a      	add	r2, r1
 8009b1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b20:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b26:	69bb      	ldr	r3, [r7, #24]
 8009b28:	015a      	lsls	r2, r3, #5
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	69ba      	ldr	r2, [r7, #24]
 8009b36:	0151      	lsls	r1, r2, #5
 8009b38:	69fa      	ldr	r2, [r7, #28]
 8009b3a:	440a      	add	r2, r1
 8009b3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b40:	0cdb      	lsrs	r3, r3, #19
 8009b42:	04db      	lsls	r3, r3, #19
 8009b44:	6113      	str	r3, [r2, #16]
 8009b46:	e074      	b.n	8009c32 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	015a      	lsls	r2, r3, #5
 8009b4c:	69fb      	ldr	r3, [r7, #28]
 8009b4e:	4413      	add	r3, r2
 8009b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	69ba      	ldr	r2, [r7, #24]
 8009b58:	0151      	lsls	r1, r2, #5
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	440a      	add	r2, r1
 8009b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b62:	0cdb      	lsrs	r3, r3, #19
 8009b64:	04db      	lsls	r3, r3, #19
 8009b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009b68:	69bb      	ldr	r3, [r7, #24]
 8009b6a:	015a      	lsls	r2, r3, #5
 8009b6c:	69fb      	ldr	r3, [r7, #28]
 8009b6e:	4413      	add	r3, r2
 8009b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	69ba      	ldr	r2, [r7, #24]
 8009b78:	0151      	lsls	r1, r2, #5
 8009b7a:	69fa      	ldr	r2, [r7, #28]
 8009b7c:	440a      	add	r2, r1
 8009b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b82:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b86:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	015a      	lsls	r2, r3, #5
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	4413      	add	r3, r2
 8009b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b98:	691a      	ldr	r2, [r3, #16]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	6959      	ldr	r1, [r3, #20]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	689b      	ldr	r3, [r3, #8]
 8009ba2:	440b      	add	r3, r1
 8009ba4:	1e59      	subs	r1, r3, #1
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	689b      	ldr	r3, [r3, #8]
 8009baa:	fbb1 f3f3 	udiv	r3, r1, r3
 8009bae:	04d9      	lsls	r1, r3, #19
 8009bb0:	4b9d      	ldr	r3, [pc, #628]	; (8009e28 <USB_EPStartXfer+0x370>)
 8009bb2:	400b      	ands	r3, r1
 8009bb4:	69b9      	ldr	r1, [r7, #24]
 8009bb6:	0148      	lsls	r0, r1, #5
 8009bb8:	69f9      	ldr	r1, [r7, #28]
 8009bba:	4401      	add	r1, r0
 8009bbc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	69fb      	ldr	r3, [r7, #28]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd0:	691a      	ldr	r2, [r3, #16]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bda:	69b9      	ldr	r1, [r7, #24]
 8009bdc:	0148      	lsls	r0, r1, #5
 8009bde:	69f9      	ldr	r1, [r7, #28]
 8009be0:	4401      	add	r1, r0
 8009be2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009be6:	4313      	orrs	r3, r2
 8009be8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	78db      	ldrb	r3, [r3, #3]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d11f      	bne.n	8009c32 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bfe:	691b      	ldr	r3, [r3, #16]
 8009c00:	69ba      	ldr	r2, [r7, #24]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	69fa      	ldr	r2, [r7, #28]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c0c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009c10:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009c12:	69bb      	ldr	r3, [r7, #24]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	69fb      	ldr	r3, [r7, #28]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	69ba      	ldr	r2, [r7, #24]
 8009c22:	0151      	lsls	r1, r2, #5
 8009c24:	69fa      	ldr	r2, [r7, #28]
 8009c26:	440a      	add	r2, r1
 8009c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c2c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c30:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009c32:	79fb      	ldrb	r3, [r7, #7]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d14b      	bne.n	8009cd0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d009      	beq.n	8009c54 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009c40:	69bb      	ldr	r3, [r7, #24]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	69fb      	ldr	r3, [r7, #28]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	78db      	ldrb	r3, [r3, #3]
 8009c58:	2b01      	cmp	r3, #1
 8009c5a:	d128      	bne.n	8009cae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d110      	bne.n	8009c8e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009c6c:	69bb      	ldr	r3, [r7, #24]
 8009c6e:	015a      	lsls	r2, r3, #5
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	4413      	add	r3, r2
 8009c74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	0151      	lsls	r1, r2, #5
 8009c7e:	69fa      	ldr	r2, [r7, #28]
 8009c80:	440a      	add	r2, r1
 8009c82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009c8a:	6013      	str	r3, [r2, #0]
 8009c8c:	e00f      	b.n	8009cae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009c8e:	69bb      	ldr	r3, [r7, #24]
 8009c90:	015a      	lsls	r2, r3, #5
 8009c92:	69fb      	ldr	r3, [r7, #28]
 8009c94:	4413      	add	r3, r2
 8009c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	69ba      	ldr	r2, [r7, #24]
 8009c9e:	0151      	lsls	r1, r2, #5
 8009ca0:	69fa      	ldr	r2, [r7, #28]
 8009ca2:	440a      	add	r2, r1
 8009ca4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009cac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	015a      	lsls	r2, r3, #5
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	69ba      	ldr	r2, [r7, #24]
 8009cbe:	0151      	lsls	r1, r2, #5
 8009cc0:	69fa      	ldr	r2, [r7, #28]
 8009cc2:	440a      	add	r2, r1
 8009cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ccc:	6013      	str	r3, [r2, #0]
 8009cce:	e12f      	b.n	8009f30 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009cd0:	69bb      	ldr	r3, [r7, #24]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	69ba      	ldr	r2, [r7, #24]
 8009ce0:	0151      	lsls	r1, r2, #5
 8009ce2:	69fa      	ldr	r2, [r7, #28]
 8009ce4:	440a      	add	r2, r1
 8009ce6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009cea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009cee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	78db      	ldrb	r3, [r3, #3]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	d015      	beq.n	8009d24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	695b      	ldr	r3, [r3, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 8117 	beq.w	8009f30 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009d02:	69fb      	ldr	r3, [r7, #28]
 8009d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	f003 030f 	and.w	r3, r3, #15
 8009d12:	2101      	movs	r1, #1
 8009d14:	fa01 f303 	lsl.w	r3, r1, r3
 8009d18:	69f9      	ldr	r1, [r7, #28]
 8009d1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	634b      	str	r3, [r1, #52]	; 0x34
 8009d22:	e105      	b.n	8009f30 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d2a:	689b      	ldr	r3, [r3, #8]
 8009d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d110      	bne.n	8009d56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009d34:	69bb      	ldr	r3, [r7, #24]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	69fb      	ldr	r3, [r7, #28]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	69ba      	ldr	r2, [r7, #24]
 8009d44:	0151      	lsls	r1, r2, #5
 8009d46:	69fa      	ldr	r2, [r7, #28]
 8009d48:	440a      	add	r2, r1
 8009d4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d52:	6013      	str	r3, [r2, #0]
 8009d54:	e00f      	b.n	8009d76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	015a      	lsls	r2, r3, #5
 8009d5a:	69fb      	ldr	r3, [r7, #28]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69ba      	ldr	r2, [r7, #24]
 8009d66:	0151      	lsls	r1, r2, #5
 8009d68:	69fa      	ldr	r2, [r7, #28]
 8009d6a:	440a      	add	r2, r1
 8009d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	68d9      	ldr	r1, [r3, #12]
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	695b      	ldr	r3, [r3, #20]
 8009d82:	b298      	uxth	r0, r3
 8009d84:	79fb      	ldrb	r3, [r7, #7]
 8009d86:	9300      	str	r3, [sp, #0]
 8009d88:	4603      	mov	r3, r0
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 fa2b 	bl	800a1e6 <USB_WritePacket>
 8009d90:	e0ce      	b.n	8009f30 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d9e:	691b      	ldr	r3, [r3, #16]
 8009da0:	69ba      	ldr	r2, [r7, #24]
 8009da2:	0151      	lsls	r1, r2, #5
 8009da4:	69fa      	ldr	r2, [r7, #28]
 8009da6:	440a      	add	r2, r1
 8009da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dac:	0cdb      	lsrs	r3, r3, #19
 8009dae:	04db      	lsls	r3, r3, #19
 8009db0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbe:	691b      	ldr	r3, [r3, #16]
 8009dc0:	69ba      	ldr	r2, [r7, #24]
 8009dc2:	0151      	lsls	r1, r2, #5
 8009dc4:	69fa      	ldr	r2, [r7, #28]
 8009dc6:	440a      	add	r2, r1
 8009dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dcc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009dd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009dd4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	695b      	ldr	r3, [r3, #20]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d126      	bne.n	8009e2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	015a      	lsls	r2, r3, #5
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	4413      	add	r3, r2
 8009de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dea:	691a      	ldr	r2, [r3, #16]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009df4:	69b9      	ldr	r1, [r7, #24]
 8009df6:	0148      	lsls	r0, r1, #5
 8009df8:	69f9      	ldr	r1, [r7, #28]
 8009dfa:	4401      	add	r1, r0
 8009dfc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e00:	4313      	orrs	r3, r2
 8009e02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	015a      	lsls	r2, r3, #5
 8009e08:	69fb      	ldr	r3, [r7, #28]
 8009e0a:	4413      	add	r3, r2
 8009e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e10:	691b      	ldr	r3, [r3, #16]
 8009e12:	69ba      	ldr	r2, [r7, #24]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	69fa      	ldr	r2, [r7, #28]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e22:	6113      	str	r3, [r2, #16]
 8009e24:	e036      	b.n	8009e94 <USB_EPStartXfer+0x3dc>
 8009e26:	bf00      	nop
 8009e28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	695a      	ldr	r2, [r3, #20]
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	4413      	add	r3, r2
 8009e36:	1e5a      	subs	r2, r3, #1
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	689b      	ldr	r3, [r3, #8]
 8009e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	69fb      	ldr	r3, [r7, #28]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4e:	691a      	ldr	r2, [r3, #16]
 8009e50:	8afb      	ldrh	r3, [r7, #22]
 8009e52:	04d9      	lsls	r1, r3, #19
 8009e54:	4b39      	ldr	r3, [pc, #228]	; (8009f3c <USB_EPStartXfer+0x484>)
 8009e56:	400b      	ands	r3, r1
 8009e58:	69b9      	ldr	r1, [r7, #24]
 8009e5a:	0148      	lsls	r0, r1, #5
 8009e5c:	69f9      	ldr	r1, [r7, #28]
 8009e5e:	4401      	add	r1, r0
 8009e60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e64:	4313      	orrs	r3, r2
 8009e66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009e68:	69bb      	ldr	r3, [r7, #24]
 8009e6a:	015a      	lsls	r2, r3, #5
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	4413      	add	r3, r2
 8009e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e74:	691a      	ldr	r2, [r3, #16]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	8af9      	ldrh	r1, [r7, #22]
 8009e7c:	fb01 f303 	mul.w	r3, r1, r3
 8009e80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e84:	69b9      	ldr	r1, [r7, #24]
 8009e86:	0148      	lsls	r0, r1, #5
 8009e88:	69f9      	ldr	r1, [r7, #28]
 8009e8a:	4401      	add	r1, r0
 8009e8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009e90:	4313      	orrs	r3, r2
 8009e92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e94:	79fb      	ldrb	r3, [r7, #7]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d10d      	bne.n	8009eb6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	68d9      	ldr	r1, [r3, #12]
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb2:	460a      	mov	r2, r1
 8009eb4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	78db      	ldrb	r3, [r3, #3]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d128      	bne.n	8009f10 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d110      	bne.n	8009ef0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009ece:	69bb      	ldr	r3, [r7, #24]
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	69ba      	ldr	r2, [r7, #24]
 8009ede:	0151      	lsls	r1, r2, #5
 8009ee0:	69fa      	ldr	r2, [r7, #28]
 8009ee2:	440a      	add	r2, r1
 8009ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ee8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009eec:	6013      	str	r3, [r2, #0]
 8009eee:	e00f      	b.n	8009f10 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	69ba      	ldr	r2, [r7, #24]
 8009f00:	0151      	lsls	r1, r2, #5
 8009f02:	69fa      	ldr	r2, [r7, #28]
 8009f04:	440a      	add	r2, r1
 8009f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	69fb      	ldr	r3, [r7, #28]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	69ba      	ldr	r2, [r7, #24]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	69fa      	ldr	r2, [r7, #28]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f30:	2300      	movs	r3, #0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3720      	adds	r7, #32
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
 8009f3a:	bf00      	nop
 8009f3c:	1ff80000 	.word	0x1ff80000

08009f40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	4613      	mov	r3, r2
 8009f4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	781b      	ldrb	r3, [r3, #0]
 8009f56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	785b      	ldrb	r3, [r3, #1]
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	f040 80cd 	bne.w	800a0fc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	695b      	ldr	r3, [r3, #20]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d132      	bne.n	8009fd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f6a:	693b      	ldr	r3, [r7, #16]
 8009f6c:	015a      	lsls	r2, r3, #5
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	4413      	add	r3, r2
 8009f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f76:	691b      	ldr	r3, [r3, #16]
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	0151      	lsls	r1, r2, #5
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	440a      	add	r2, r1
 8009f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	015a      	lsls	r2, r3, #5
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	4413      	add	r3, r2
 8009f96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	0151      	lsls	r1, r2, #5
 8009fa0:	697a      	ldr	r2, [r7, #20]
 8009fa2:	440a      	add	r2, r1
 8009fa4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	015a      	lsls	r2, r3, #5
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	693a      	ldr	r2, [r7, #16]
 8009fbe:	0151      	lsls	r1, r2, #5
 8009fc0:	697a      	ldr	r2, [r7, #20]
 8009fc2:	440a      	add	r2, r1
 8009fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fc8:	0cdb      	lsrs	r3, r3, #19
 8009fca:	04db      	lsls	r3, r3, #19
 8009fcc:	6113      	str	r3, [r2, #16]
 8009fce:	e04e      	b.n	800a06e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fd0:	693b      	ldr	r3, [r7, #16]
 8009fd2:	015a      	lsls	r2, r3, #5
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	4413      	add	r3, r2
 8009fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fdc:	691b      	ldr	r3, [r3, #16]
 8009fde:	693a      	ldr	r2, [r7, #16]
 8009fe0:	0151      	lsls	r1, r2, #5
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	440a      	add	r2, r1
 8009fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fea:	0cdb      	lsrs	r3, r3, #19
 8009fec:	04db      	lsls	r3, r3, #19
 8009fee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	015a      	lsls	r2, r3, #5
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	4413      	add	r3, r2
 8009ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	693a      	ldr	r2, [r7, #16]
 800a000:	0151      	lsls	r1, r2, #5
 800a002:	697a      	ldr	r2, [r7, #20]
 800a004:	440a      	add	r2, r1
 800a006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a00a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a00e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a012:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	695a      	ldr	r2, [r3, #20]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d903      	bls.n	800a028 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	689a      	ldr	r2, [r3, #8]
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	015a      	lsls	r2, r3, #5
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	4413      	add	r3, r2
 800a030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a034:	691b      	ldr	r3, [r3, #16]
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	0151      	lsls	r1, r2, #5
 800a03a:	697a      	ldr	r2, [r7, #20]
 800a03c:	440a      	add	r2, r1
 800a03e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a042:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a054:	691a      	ldr	r2, [r3, #16]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	695b      	ldr	r3, [r3, #20]
 800a05a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05e:	6939      	ldr	r1, [r7, #16]
 800a060:	0148      	lsls	r0, r1, #5
 800a062:	6979      	ldr	r1, [r7, #20]
 800a064:	4401      	add	r1, r0
 800a066:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a06a:	4313      	orrs	r3, r2
 800a06c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	2b01      	cmp	r3, #1
 800a072:	d11e      	bne.n	800a0b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d009      	beq.n	800a090 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	015a      	lsls	r2, r3, #5
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	4413      	add	r3, r2
 800a084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a088:	461a      	mov	r2, r3
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	015a      	lsls	r2, r3, #5
 800a094:	697b      	ldr	r3, [r7, #20]
 800a096:	4413      	add	r3, r2
 800a098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	693a      	ldr	r2, [r7, #16]
 800a0a0:	0151      	lsls	r1, r2, #5
 800a0a2:	697a      	ldr	r2, [r7, #20]
 800a0a4:	440a      	add	r2, r1
 800a0a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0ae:	6013      	str	r3, [r2, #0]
 800a0b0:	e092      	b.n	800a1d8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a0b2:	693b      	ldr	r3, [r7, #16]
 800a0b4:	015a      	lsls	r2, r3, #5
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	4413      	add	r3, r2
 800a0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	693a      	ldr	r2, [r7, #16]
 800a0c2:	0151      	lsls	r1, r2, #5
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	440a      	add	r2, r1
 800a0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a0d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d07e      	beq.n	800a1d8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a0da:	697b      	ldr	r3, [r7, #20]
 800a0dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	f003 030f 	and.w	r3, r3, #15
 800a0ea:	2101      	movs	r1, #1
 800a0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f0:	6979      	ldr	r1, [r7, #20]
 800a0f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	634b      	str	r3, [r1, #52]	; 0x34
 800a0fa:	e06d      	b.n	800a1d8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	693a      	ldr	r2, [r7, #16]
 800a10c:	0151      	lsls	r1, r2, #5
 800a10e:	697a      	ldr	r2, [r7, #20]
 800a110:	440a      	add	r2, r1
 800a112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a116:	0cdb      	lsrs	r3, r3, #19
 800a118:	04db      	lsls	r3, r3, #19
 800a11a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	693a      	ldr	r2, [r7, #16]
 800a12c:	0151      	lsls	r1, r2, #5
 800a12e:	697a      	ldr	r2, [r7, #20]
 800a130:	440a      	add	r2, r1
 800a132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a136:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a13a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a13e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a140:	68bb      	ldr	r3, [r7, #8]
 800a142:	695b      	ldr	r3, [r3, #20]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d003      	beq.n	800a150 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a16a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a16e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17c:	691a      	ldr	r2, [r3, #16]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a186:	6939      	ldr	r1, [r7, #16]
 800a188:	0148      	lsls	r0, r1, #5
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	4401      	add	r1, r0
 800a18e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a192:	4313      	orrs	r3, r2
 800a194:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	d10d      	bne.n	800a1b8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	68db      	ldr	r3, [r3, #12]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d009      	beq.n	800a1b8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	68d9      	ldr	r1, [r3, #12]
 800a1a8:	693b      	ldr	r3, [r7, #16]
 800a1aa:	015a      	lsls	r2, r3, #5
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b4:	460a      	mov	r2, r1
 800a1b6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	015a      	lsls	r2, r3, #5
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	4413      	add	r3, r2
 800a1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	693a      	ldr	r2, [r7, #16]
 800a1c8:	0151      	lsls	r1, r2, #5
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	440a      	add	r2, r1
 800a1ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1d8:	2300      	movs	r3, #0
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	371c      	adds	r7, #28
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e4:	4770      	bx	lr

0800a1e6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a1e6:	b480      	push	{r7}
 800a1e8:	b089      	sub	sp, #36	; 0x24
 800a1ea:	af00      	add	r7, sp, #0
 800a1ec:	60f8      	str	r0, [r7, #12]
 800a1ee:	60b9      	str	r1, [r7, #8]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	71fb      	strb	r3, [r7, #7]
 800a1f8:	4613      	mov	r3, r2
 800a1fa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a204:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d11a      	bne.n	800a242 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a20c:	88bb      	ldrh	r3, [r7, #4]
 800a20e:	3303      	adds	r3, #3
 800a210:	089b      	lsrs	r3, r3, #2
 800a212:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a214:	2300      	movs	r3, #0
 800a216:	61bb      	str	r3, [r7, #24]
 800a218:	e00f      	b.n	800a23a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a21a:	79fb      	ldrb	r3, [r7, #7]
 800a21c:	031a      	lsls	r2, r3, #12
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	4413      	add	r3, r2
 800a222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a226:	461a      	mov	r2, r3
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	3304      	adds	r3, #4
 800a232:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a234:	69bb      	ldr	r3, [r7, #24]
 800a236:	3301      	adds	r3, #1
 800a238:	61bb      	str	r3, [r7, #24]
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d3eb      	bcc.n	800a21a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3724      	adds	r7, #36	; 0x24
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a250:	b480      	push	{r7}
 800a252:	b089      	sub	sp, #36	; 0x24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4613      	mov	r3, r2
 800a25c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a266:	88fb      	ldrh	r3, [r7, #6]
 800a268:	3303      	adds	r3, #3
 800a26a:	089b      	lsrs	r3, r3, #2
 800a26c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a26e:	2300      	movs	r3, #0
 800a270:	61bb      	str	r3, [r7, #24]
 800a272:	e00b      	b.n	800a28c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a274:	697b      	ldr	r3, [r7, #20]
 800a276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	3304      	adds	r3, #4
 800a284:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	3301      	adds	r3, #1
 800a28a:	61bb      	str	r3, [r7, #24]
 800a28c:	69ba      	ldr	r2, [r7, #24]
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	429a      	cmp	r2, r3
 800a292:	d3ef      	bcc.n	800a274 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a294:	69fb      	ldr	r3, [r7, #28]
}
 800a296:	4618      	mov	r0, r3
 800a298:	3724      	adds	r7, #36	; 0x24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a0:	4770      	bx	lr

0800a2a2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2a2:	b480      	push	{r7}
 800a2a4:	b085      	sub	sp, #20
 800a2a6:	af00      	add	r7, sp, #0
 800a2a8:	6078      	str	r0, [r7, #4]
 800a2aa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	785b      	ldrb	r3, [r3, #1]
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d12c      	bne.n	800a318 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	015a      	lsls	r2, r3, #5
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	db12      	blt.n	800a2f6 <USB_EPSetStall+0x54>
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00f      	beq.n	800a2f6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	68ba      	ldr	r2, [r7, #8]
 800a2e6:	0151      	lsls	r1, r2, #5
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	440a      	add	r2, r1
 800a2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a2f4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	015a      	lsls	r2, r3, #5
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	0151      	lsls	r1, r2, #5
 800a308:	68fa      	ldr	r2, [r7, #12]
 800a30a:	440a      	add	r2, r1
 800a30c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a310:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a314:	6013      	str	r3, [r2, #0]
 800a316:	e02b      	b.n	800a370 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	015a      	lsls	r2, r3, #5
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	4413      	add	r3, r2
 800a320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2b00      	cmp	r3, #0
 800a328:	db12      	blt.n	800a350 <USB_EPSetStall+0xae>
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00f      	beq.n	800a350 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	0151      	lsls	r1, r2, #5
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	440a      	add	r2, r1
 800a346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a34a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a34e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	015a      	lsls	r2, r3, #5
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4413      	add	r3, r2
 800a358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	0151      	lsls	r1, r2, #5
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	440a      	add	r2, r1
 800a366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a36a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a36e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a370:	2300      	movs	r3, #0
}
 800a372:	4618      	mov	r0, r3
 800a374:	3714      	adds	r7, #20
 800a376:	46bd      	mov	sp, r7
 800a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37c:	4770      	bx	lr

0800a37e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a37e:	b480      	push	{r7}
 800a380:	b085      	sub	sp, #20
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
 800a386:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	785b      	ldrb	r3, [r3, #1]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d128      	bne.n	800a3ec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	015a      	lsls	r2, r3, #5
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3b8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	78db      	ldrb	r3, [r3, #3]
 800a3be:	2b03      	cmp	r3, #3
 800a3c0:	d003      	beq.n	800a3ca <USB_EPClearStall+0x4c>
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	78db      	ldrb	r3, [r3, #3]
 800a3c6:	2b02      	cmp	r3, #2
 800a3c8:	d138      	bne.n	800a43c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	015a      	lsls	r2, r3, #5
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	0151      	lsls	r1, r2, #5
 800a3dc:	68fa      	ldr	r2, [r7, #12]
 800a3de:	440a      	add	r2, r1
 800a3e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	e027      	b.n	800a43c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68ba      	ldr	r2, [r7, #8]
 800a3fc:	0151      	lsls	r1, r2, #5
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	440a      	add	r2, r1
 800a402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a40a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	78db      	ldrb	r3, [r3, #3]
 800a410:	2b03      	cmp	r3, #3
 800a412:	d003      	beq.n	800a41c <USB_EPClearStall+0x9e>
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	78db      	ldrb	r3, [r3, #3]
 800a418:	2b02      	cmp	r3, #2
 800a41a:	d10f      	bne.n	800a43c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	015a      	lsls	r2, r3, #5
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	4413      	add	r3, r2
 800a424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	0151      	lsls	r1, r2, #5
 800a42e:	68fa      	ldr	r2, [r7, #12]
 800a430:	440a      	add	r2, r1
 800a432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a43a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3714      	adds	r7, #20
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a44a:	b480      	push	{r7}
 800a44c:	b085      	sub	sp, #20
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	460b      	mov	r3, r1
 800a454:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a468:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a46c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	78fb      	ldrb	r3, [r7, #3]
 800a478:	011b      	lsls	r3, r3, #4
 800a47a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a484:	4313      	orrs	r3, r2
 800a486:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4b0:	f023 0303 	bic.w	r3, r3, #3
 800a4b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	68fa      	ldr	r2, [r7, #12]
 800a4c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4c4:	f023 0302 	bic.w	r3, r3, #2
 800a4c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4ca:	2300      	movs	r3, #0
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	3714      	adds	r7, #20
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d8:	b480      	push	{r7}
 800a4da:	b085      	sub	sp, #20
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68fa      	ldr	r2, [r7, #12]
 800a4ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4f2:	f023 0303 	bic.w	r3, r3, #3
 800a4f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	68fa      	ldr	r2, [r7, #12]
 800a502:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a506:	f043 0302 	orr.w	r3, r3, #2
 800a50a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3714      	adds	r7, #20
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b085      	sub	sp, #20
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	695b      	ldr	r3, [r3, #20]
 800a526:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	699b      	ldr	r3, [r3, #24]
 800a52c:	68fa      	ldr	r2, [r7, #12]
 800a52e:	4013      	ands	r3, r2
 800a530:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a532:	68fb      	ldr	r3, [r7, #12]
}
 800a534:	4618      	mov	r0, r3
 800a536:	3714      	adds	r7, #20
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a540:	b480      	push	{r7}
 800a542:	b085      	sub	sp, #20
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a552:	699b      	ldr	r3, [r3, #24]
 800a554:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	4013      	ands	r3, r2
 800a562:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	0c1b      	lsrs	r3, r3, #16
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3714      	adds	r7, #20
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a574:	b480      	push	{r7}
 800a576:	b085      	sub	sp, #20
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a586:	699b      	ldr	r3, [r3, #24]
 800a588:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	68ba      	ldr	r2, [r7, #8]
 800a594:	4013      	ands	r3, r2
 800a596:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	b29b      	uxth	r3, r3
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b085      	sub	sp, #20
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	015a      	lsls	r2, r3, #5
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	4413      	add	r3, r2
 800a5c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5c4:	689b      	ldr	r3, [r3, #8]
 800a5c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ce:	695b      	ldr	r3, [r3, #20]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	4013      	ands	r3, r2
 800a5d4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a5d6:	68bb      	ldr	r3, [r7, #8]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3714      	adds	r7, #20
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	460b      	mov	r3, r1
 800a5ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5fa:	691b      	ldr	r3, [r3, #16]
 800a5fc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a606:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a608:	78fb      	ldrb	r3, [r7, #3]
 800a60a:	f003 030f 	and.w	r3, r3, #15
 800a60e:	68fa      	ldr	r2, [r7, #12]
 800a610:	fa22 f303 	lsr.w	r3, r2, r3
 800a614:	01db      	lsls	r3, r3, #7
 800a616:	b2db      	uxtb	r3, r3
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a61e:	78fb      	ldrb	r3, [r7, #3]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	4013      	ands	r3, r2
 800a630:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a632:	68bb      	ldr	r3, [r7, #8]
}
 800a634:	4618      	mov	r0, r3
 800a636:	371c      	adds	r7, #28
 800a638:	46bd      	mov	sp, r7
 800a63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63e:	4770      	bx	lr

0800a640 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a640:	b480      	push	{r7}
 800a642:	b083      	sub	sp, #12
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	695b      	ldr	r3, [r3, #20]
 800a64c:	f003 0301 	and.w	r3, r3, #1
}
 800a650:	4618      	mov	r0, r3
 800a652:	370c      	adds	r7, #12
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr

0800a65c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	68fa      	ldr	r2, [r7, #12]
 800a672:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a676:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a67a:	f023 0307 	bic.w	r3, r3, #7
 800a67e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	68fa      	ldr	r2, [r7, #12]
 800a68a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a68e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a692:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a694:	2300      	movs	r3, #0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr
	...

0800a6a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	607a      	str	r2, [r7, #4]
 800a6b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	333c      	adds	r3, #60	; 0x3c
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	4a26      	ldr	r2, [pc, #152]	; (800a75c <USB_EP0_OutStart+0xb8>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d90a      	bls.n	800a6de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6d8:	d101      	bne.n	800a6de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e037      	b.n	800a74e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6f0:	691b      	ldr	r3, [r3, #16]
 800a6f2:	697a      	ldr	r2, [r7, #20]
 800a6f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a70c:	f043 0318 	orr.w	r3, r3, #24
 800a710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a712:	697b      	ldr	r3, [r7, #20]
 800a714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a718:	691b      	ldr	r3, [r3, #16]
 800a71a:	697a      	ldr	r2, [r7, #20]
 800a71c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a720:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a724:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a726:	7afb      	ldrb	r3, [r7, #11]
 800a728:	2b01      	cmp	r3, #1
 800a72a:	d10f      	bne.n	800a74c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a732:	461a      	mov	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a738:	697b      	ldr	r3, [r7, #20]
 800a73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a746:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a74a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	371c      	adds	r7, #28
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	4f54300a 	.word	0x4f54300a

0800a760 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a768:	2300      	movs	r3, #0
 800a76a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	4a13      	ldr	r2, [pc, #76]	; (800a7c4 <USB_CoreReset+0x64>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d901      	bls.n	800a77e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e01b      	b.n	800a7b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	2b00      	cmp	r3, #0
 800a784:	daf2      	bge.n	800a76c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	691b      	ldr	r3, [r3, #16]
 800a78e:	f043 0201 	orr.w	r2, r3, #1
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	3301      	adds	r3, #1
 800a79a:	60fb      	str	r3, [r7, #12]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4a09      	ldr	r2, [pc, #36]	; (800a7c4 <USB_CoreReset+0x64>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d901      	bls.n	800a7a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e006      	b.n	800a7b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f003 0301 	and.w	r3, r3, #1
 800a7b0:	2b01      	cmp	r3, #1
 800a7b2:	d0f0      	beq.n	800a796 <USB_CoreReset+0x36>

  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	00030d40 	.word	0x00030d40

0800a7c8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a7cc:	4904      	ldr	r1, [pc, #16]	; (800a7e0 <MX_FATFS_Init+0x18>)
 800a7ce:	4805      	ldr	r0, [pc, #20]	; (800a7e4 <MX_FATFS_Init+0x1c>)
 800a7d0:	f002 f9c0 	bl	800cb54 <FATFS_LinkDriver>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <MX_FATFS_Init+0x20>)
 800a7da:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a7dc:	bf00      	nop
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	200005e4 	.word	0x200005e4
 800a7e4:	2000000c 	.word	0x2000000c
 800a7e8:	200005e8 	.word	0x200005e8

0800a7ec <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b082      	sub	sp, #8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800a7f6:	79fb      	ldrb	r3, [r7, #7]
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f000 f9d7 	bl	800abac <USER_SPI_initialize>
 800a7fe:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a800:	4618      	mov	r0, r3
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	4603      	mov	r3, r0
 800a810:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	4618      	mov	r0, r3
 800a816:	f000 fab3 	bl	800ad80 <USER_SPI_status>
 800a81a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60b9      	str	r1, [r7, #8]
 800a82c:	607a      	str	r2, [r7, #4]
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	4603      	mov	r3, r0
 800a832:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800a834:	7bf8      	ldrb	r0, [r7, #15]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	f000 fab6 	bl	800adac <USER_SPI_read>
 800a840:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	603b      	str	r3, [r7, #0]
 800a856:	4603      	mov	r3, r0
 800a858:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800a85a:	7bf8      	ldrb	r0, [r7, #15]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	68b9      	ldr	r1, [r7, #8]
 800a862:	f000 fb09 	bl	800ae78 <USER_SPI_write>
 800a866:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3710      	adds	r7, #16
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	603a      	str	r2, [r7, #0]
 800a87a:	71fb      	strb	r3, [r7, #7]
 800a87c:	460b      	mov	r3, r1
 800a87e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800a880:	79b9      	ldrb	r1, [r7, #6]
 800a882:	79fb      	ldrb	r3, [r7, #7]
 800a884:	683a      	ldr	r2, [r7, #0]
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fb72 	bl	800af70 <USER_SPI_ioctl>
 800a88c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3708      	adds	r7, #8
 800a892:	46bd      	mov	sp, r7
 800a894:	bd80      	pop	{r7, pc}
	...

0800a898 <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a898:	b580      	push	{r7, lr}
 800a89a:	b082      	sub	sp, #8
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a8a0:	f7f9 fa2e 	bl	8003d00 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	4b04      	ldr	r3, [pc, #16]	; (800a8b8 <SPI_Timer_On+0x20>)
 800a8a8:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800a8aa:	4a04      	ldr	r2, [pc, #16]	; (800a8bc <SPI_Timer_On+0x24>)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6013      	str	r3, [r2, #0]
}
 800a8b0:	bf00      	nop
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	20000a4c 	.word	0x20000a4c
 800a8bc:	20000a50 	.word	0x20000a50

0800a8c0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a8c4:	f7f9 fa1c 	bl	8003d00 <HAL_GetTick>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <SPI_Timer_Status+0x24>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	1ad2      	subs	r2, r2, r3
 800a8d0:	4b05      	ldr	r3, [pc, #20]	; (800a8e8 <SPI_Timer_Status+0x28>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	bf34      	ite	cc
 800a8d8:	2301      	movcc	r3, #1
 800a8da:	2300      	movcs	r3, #0
 800a8dc:	b2db      	uxtb	r3, r3
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000a4c 	.word	0x20000a4c
 800a8e8:	20000a50 	.word	0x20000a50

0800a8ec <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b086      	sub	sp, #24
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a8f6:	f107 020f 	add.w	r2, r7, #15
 800a8fa:	1df9      	adds	r1, r7, #7
 800a8fc:	2332      	movs	r3, #50	; 0x32
 800a8fe:	9300      	str	r3, [sp, #0]
 800a900:	2301      	movs	r3, #1
 800a902:	4804      	ldr	r0, [pc, #16]	; (800a914 <xchg_spi+0x28>)
 800a904:	f7fd fc46 	bl	8008194 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a908:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	20000548 	.word	0x20000548

0800a918 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800a918:	b590      	push	{r4, r7, lr}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
 800a920:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800a922:	2300      	movs	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
 800a926:	e00a      	b.n	800a93e <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	18d4      	adds	r4, r2, r3
 800a92e:	20ff      	movs	r0, #255	; 0xff
 800a930:	f7ff ffdc 	bl	800a8ec <xchg_spi>
 800a934:	4603      	mov	r3, r0
 800a936:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	3301      	adds	r3, #1
 800a93c:	60fb      	str	r3, [r7, #12]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	683b      	ldr	r3, [r7, #0]
 800a942:	429a      	cmp	r2, r3
 800a944:	d3f0      	bcc.n	800a928 <rcvr_spi_multi+0x10>
    }
}
 800a946:	bf00      	nop
 800a948:	3714      	adds	r7, #20
 800a94a:	46bd      	mov	sp, r7
 800a94c:	bd90      	pop	{r4, r7, pc}

0800a94e <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800a94e:	b580      	push	{r7, lr}
 800a950:	b084      	sub	sp, #16
 800a952:	af00      	add	r7, sp, #0
 800a954:	6078      	str	r0, [r7, #4]
 800a956:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800a958:	2300      	movs	r3, #0
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	e009      	b.n	800a972 <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	781b      	ldrb	r3, [r3, #0]
 800a966:	4618      	mov	r0, r3
 800a968:	f7ff ffc0 	bl	800a8ec <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	683b      	ldr	r3, [r7, #0]
 800a976:	429a      	cmp	r2, r3
 800a978:	d3f1      	bcc.n	800a95e <xmit_spi_multi+0x10>
    }
}
 800a97a:	bf00      	nop
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b086      	sub	sp, #24
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800a98a:	f7f9 f9b9 	bl	8003d00 <HAL_GetTick>
 800a98e:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800a994:	20ff      	movs	r0, #255	; 0xff
 800a996:	f7ff ffa9 	bl	800a8ec <xchg_spi>
 800a99a:	4603      	mov	r3, r0
 800a99c:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800a99e:	7bfb      	ldrb	r3, [r7, #15]
 800a9a0:	2bff      	cmp	r3, #255	; 0xff
 800a9a2:	d007      	beq.n	800a9b4 <wait_ready+0x32>
 800a9a4:	f7f9 f9ac 	bl	8003d00 <HAL_GetTick>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	1ad3      	subs	r3, r2, r3
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d8ef      	bhi.n	800a994 <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800a9b4:	7bfb      	ldrb	r3, [r7, #15]
 800a9b6:	2bff      	cmp	r3, #255	; 0xff
 800a9b8:	bf0c      	ite	eq
 800a9ba:	2301      	moveq	r3, #1
 800a9bc:	2300      	movne	r3, #0
 800a9be:	b2db      	uxtb	r3, r3
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3718      	adds	r7, #24
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	2110      	movs	r1, #16
 800a9d0:	4803      	ldr	r0, [pc, #12]	; (800a9e0 <despiselect+0x18>)
 800a9d2:	f7fa f831 	bl	8004a38 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a9d6:	20ff      	movs	r0, #255	; 0xff
 800a9d8:	f7ff ff88 	bl	800a8ec <xchg_spi>

}
 800a9dc:	bf00      	nop
 800a9de:	bd80      	pop	{r7, pc}
 800a9e0:	40020800 	.word	0x40020800

0800a9e4 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	2110      	movs	r1, #16
 800a9ec:	4809      	ldr	r0, [pc, #36]	; (800aa14 <spiselect+0x30>)
 800a9ee:	f7fa f823 	bl	8004a38 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800a9f2:	20ff      	movs	r0, #255	; 0xff
 800a9f4:	f7ff ff7a 	bl	800a8ec <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800a9f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a9fc:	f7ff ffc1 	bl	800a982 <wait_ready>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <spiselect+0x26>
 800aa06:	2301      	movs	r3, #1
 800aa08:	e002      	b.n	800aa10 <spiselect+0x2c>

    despiselect();
 800aa0a:	f7ff ffdd 	bl	800a9c8 <despiselect>
    return 0;   /* Timeout */
 800aa0e:	2300      	movs	r3, #0
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40020800 	.word	0x40020800

0800aa18 <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800aa22:	20c8      	movs	r0, #200	; 0xc8
 800aa24:	f7ff ff38 	bl	800a898 <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800aa28:	20ff      	movs	r0, #255	; 0xff
 800aa2a:	f7ff ff5f 	bl	800a8ec <xchg_spi>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	2bff      	cmp	r3, #255	; 0xff
 800aa36:	d104      	bne.n	800aa42 <rcvr_datablock+0x2a>
 800aa38:	f7ff ff42 	bl	800a8c0 <SPI_Timer_Status>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d1f2      	bne.n	800aa28 <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
 800aa44:	2bfe      	cmp	r3, #254	; 0xfe
 800aa46:	d001      	beq.n	800aa4c <rcvr_datablock+0x34>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	e00a      	b.n	800aa62 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800aa4c:	6839      	ldr	r1, [r7, #0]
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f7ff ff62 	bl	800a918 <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800aa54:	20ff      	movs	r0, #255	; 0xff
 800aa56:	f7ff ff49 	bl	800a8ec <xchg_spi>
 800aa5a:	20ff      	movs	r0, #255	; 0xff
 800aa5c:	f7ff ff46 	bl	800a8ec <xchg_spi>

    return 1;                       /* Function succeeded */
 800aa60:	2301      	movs	r3, #1
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b084      	sub	sp, #16
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
 800aa72:	460b      	mov	r3, r1
 800aa74:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800aa76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aa7a:	f7ff ff82 	bl	800a982 <wait_ready>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <xmit_datablock+0x1e>
 800aa84:	2300      	movs	r3, #0
 800aa86:	e01e      	b.n	800aac6 <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7ff ff2e 	bl	800a8ec <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800aa90:	78fb      	ldrb	r3, [r7, #3]
 800aa92:	2bfd      	cmp	r3, #253	; 0xfd
 800aa94:	d016      	beq.n	800aac4 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800aa96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7ff ff57 	bl	800a94e <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800aaa0:	20ff      	movs	r0, #255	; 0xff
 800aaa2:	f7ff ff23 	bl	800a8ec <xchg_spi>
 800aaa6:	20ff      	movs	r0, #255	; 0xff
 800aaa8:	f7ff ff20 	bl	800a8ec <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800aaac:	20ff      	movs	r0, #255	; 0xff
 800aaae:	f7ff ff1d 	bl	800a8ec <xchg_spi>
 800aab2:	4603      	mov	r3, r0
 800aab4:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800aab6:	7bfb      	ldrb	r3, [r7, #15]
 800aab8:	f003 031f 	and.w	r3, r3, #31
 800aabc:	2b05      	cmp	r3, #5
 800aabe:	d001      	beq.n	800aac4 <xmit_datablock+0x5a>
 800aac0:	2300      	movs	r3, #0
 800aac2:	e000      	b.n	800aac6 <xmit_datablock+0x5c>
    }
    return 1;
 800aac4:	2301      	movs	r3, #1
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3710      	adds	r7, #16
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}

0800aace <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800aace:	b580      	push	{r7, lr}
 800aad0:	b084      	sub	sp, #16
 800aad2:	af00      	add	r7, sp, #0
 800aad4:	4603      	mov	r3, r0
 800aad6:	6039      	str	r1, [r7, #0]
 800aad8:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800aada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	da0e      	bge.n	800ab00 <send_cmd+0x32>
        cmd &= 0x7F;
 800aae2:	79fb      	ldrb	r3, [r7, #7]
 800aae4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae8:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800aaea:	2100      	movs	r1, #0
 800aaec:	2037      	movs	r0, #55	; 0x37
 800aaee:	f7ff ffee 	bl	800aace <send_cmd>
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800aaf6:	7bbb      	ldrb	r3, [r7, #14]
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d901      	bls.n	800ab00 <send_cmd+0x32>
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	e051      	b.n	800aba4 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800ab00:	79fb      	ldrb	r3, [r7, #7]
 800ab02:	2b0c      	cmp	r3, #12
 800ab04:	d008      	beq.n	800ab18 <send_cmd+0x4a>
        despiselect();
 800ab06:	f7ff ff5f 	bl	800a9c8 <despiselect>
        if (!spiselect()) return 0xFF;
 800ab0a:	f7ff ff6b 	bl	800a9e4 <spiselect>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d101      	bne.n	800ab18 <send_cmd+0x4a>
 800ab14:	23ff      	movs	r3, #255	; 0xff
 800ab16:	e045      	b.n	800aba4 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab1e:	b2db      	uxtb	r3, r3
 800ab20:	4618      	mov	r0, r3
 800ab22:	f7ff fee3 	bl	800a8ec <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	0e1b      	lsrs	r3, r3, #24
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f7ff fedd 	bl	800a8ec <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	0c1b      	lsrs	r3, r3, #16
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff fed7 	bl	800a8ec <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800ab3e:	683b      	ldr	r3, [r7, #0]
 800ab40:	0a1b      	lsrs	r3, r3, #8
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7ff fed1 	bl	800a8ec <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff fecc 	bl	800a8ec <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800ab54:	2301      	movs	r3, #1
 800ab56:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <send_cmd+0x94>
 800ab5e:	2395      	movs	r3, #149	; 0x95
 800ab60:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800ab62:	79fb      	ldrb	r3, [r7, #7]
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d101      	bne.n	800ab6c <send_cmd+0x9e>
 800ab68:	2387      	movs	r3, #135	; 0x87
 800ab6a:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f7ff febc 	bl	800a8ec <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800ab74:	79fb      	ldrb	r3, [r7, #7]
 800ab76:	2b0c      	cmp	r3, #12
 800ab78:	d102      	bne.n	800ab80 <send_cmd+0xb2>
 800ab7a:	20ff      	movs	r0, #255	; 0xff
 800ab7c:	f7ff feb6 	bl	800a8ec <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800ab80:	230a      	movs	r3, #10
 800ab82:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800ab84:	20ff      	movs	r0, #255	; 0xff
 800ab86:	f7ff feb1 	bl	800a8ec <xchg_spi>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800ab8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	da05      	bge.n	800aba2 <send_cmd+0xd4>
 800ab96:	7bfb      	ldrb	r3, [r7, #15]
 800ab98:	3b01      	subs	r3, #1
 800ab9a:	73fb      	strb	r3, [r7, #15]
 800ab9c:	7bfb      	ldrb	r3, [r7, #15]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1f0      	bne.n	800ab84 <send_cmd+0xb6>

    return res;                         /* Return received response */
 800aba2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3710      	adds	r7, #16
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800abac:	b590      	push	{r4, r7, lr}
 800abae:	b085      	sub	sp, #20
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	4603      	mov	r3, r0
 800abb4:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800abb6:	79fb      	ldrb	r3, [r7, #7]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d001      	beq.n	800abc0 <USER_SPI_initialize+0x14>
 800abbc:	2301      	movs	r3, #1
 800abbe:	e0d4      	b.n	800ad6a <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800abc0:	4b6c      	ldr	r3, [pc, #432]	; (800ad74 <USER_SPI_initialize+0x1c8>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d003      	beq.n	800abd6 <USER_SPI_initialize+0x2a>
 800abce:	4b69      	ldr	r3, [pc, #420]	; (800ad74 <USER_SPI_initialize+0x1c8>)
 800abd0:	781b      	ldrb	r3, [r3, #0]
 800abd2:	b2db      	uxtb	r3, r3
 800abd4:	e0c9      	b.n	800ad6a <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800abd6:	4b68      	ldr	r3, [pc, #416]	; (800ad78 <USER_SPI_initialize+0x1cc>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	4b66      	ldr	r3, [pc, #408]	; (800ad78 <USER_SPI_initialize+0x1cc>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800abe4:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800abe6:	230a      	movs	r3, #10
 800abe8:	73fb      	strb	r3, [r7, #15]
 800abea:	e005      	b.n	800abf8 <USER_SPI_initialize+0x4c>
 800abec:	20ff      	movs	r0, #255	; 0xff
 800abee:	f7ff fe7d 	bl	800a8ec <xchg_spi>
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	73fb      	strb	r3, [r7, #15]
 800abf8:	7bfb      	ldrb	r3, [r7, #15]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1f6      	bne.n	800abec <USER_SPI_initialize+0x40>

    ty = 0;
 800abfe:	2300      	movs	r3, #0
 800ac00:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800ac02:	2100      	movs	r1, #0
 800ac04:	2000      	movs	r0, #0
 800ac06:	f7ff ff62 	bl	800aace <send_cmd>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	f040 808b 	bne.w	800ad28 <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800ac12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ac16:	f7ff fe3f 	bl	800a898 <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800ac1a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ac1e:	2008      	movs	r0, #8
 800ac20:	f7ff ff55 	bl	800aace <send_cmd>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d151      	bne.n	800acce <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	73fb      	strb	r3, [r7, #15]
 800ac2e:	e00d      	b.n	800ac4c <USER_SPI_initialize+0xa0>
 800ac30:	7bfc      	ldrb	r4, [r7, #15]
 800ac32:	20ff      	movs	r0, #255	; 0xff
 800ac34:	f7ff fe5a 	bl	800a8ec <xchg_spi>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	f107 0310 	add.w	r3, r7, #16
 800ac40:	4423      	add	r3, r4
 800ac42:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ac46:	7bfb      	ldrb	r3, [r7, #15]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	73fb      	strb	r3, [r7, #15]
 800ac4c:	7bfb      	ldrb	r3, [r7, #15]
 800ac4e:	2b03      	cmp	r3, #3
 800ac50:	d9ee      	bls.n	800ac30 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800ac52:	7abb      	ldrb	r3, [r7, #10]
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d167      	bne.n	800ad28 <USER_SPI_initialize+0x17c>
 800ac58:	7afb      	ldrb	r3, [r7, #11]
 800ac5a:	2baa      	cmp	r3, #170	; 0xaa
 800ac5c:	d164      	bne.n	800ad28 <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800ac5e:	bf00      	nop
 800ac60:	f7ff fe2e 	bl	800a8c0 <SPI_Timer_Status>
 800ac64:	4603      	mov	r3, r0
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d007      	beq.n	800ac7a <USER_SPI_initialize+0xce>
 800ac6a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ac6e:	20a9      	movs	r0, #169	; 0xa9
 800ac70:	f7ff ff2d 	bl	800aace <send_cmd>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d1f2      	bne.n	800ac60 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800ac7a:	f7ff fe21 	bl	800a8c0 <SPI_Timer_Status>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d051      	beq.n	800ad28 <USER_SPI_initialize+0x17c>
 800ac84:	2100      	movs	r1, #0
 800ac86:	203a      	movs	r0, #58	; 0x3a
 800ac88:	f7ff ff21 	bl	800aace <send_cmd>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d14a      	bne.n	800ad28 <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
 800ac96:	e00d      	b.n	800acb4 <USER_SPI_initialize+0x108>
 800ac98:	7bfc      	ldrb	r4, [r7, #15]
 800ac9a:	20ff      	movs	r0, #255	; 0xff
 800ac9c:	f7ff fe26 	bl	800a8ec <xchg_spi>
 800aca0:	4603      	mov	r3, r0
 800aca2:	461a      	mov	r2, r3
 800aca4:	f107 0310 	add.w	r3, r7, #16
 800aca8:	4423      	add	r3, r4
 800acaa:	f803 2c08 	strb.w	r2, [r3, #-8]
 800acae:	7bfb      	ldrb	r3, [r7, #15]
 800acb0:	3301      	adds	r3, #1
 800acb2:	73fb      	strb	r3, [r7, #15]
 800acb4:	7bfb      	ldrb	r3, [r7, #15]
 800acb6:	2b03      	cmp	r3, #3
 800acb8:	d9ee      	bls.n	800ac98 <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800acba:	7a3b      	ldrb	r3, [r7, #8]
 800acbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <USER_SPI_initialize+0x11c>
 800acc4:	230c      	movs	r3, #12
 800acc6:	e000      	b.n	800acca <USER_SPI_initialize+0x11e>
 800acc8:	2304      	movs	r3, #4
 800acca:	737b      	strb	r3, [r7, #13]
 800accc:	e02c      	b.n	800ad28 <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800acce:	2100      	movs	r1, #0
 800acd0:	20a9      	movs	r0, #169	; 0xa9
 800acd2:	f7ff fefc 	bl	800aace <send_cmd>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b01      	cmp	r3, #1
 800acda:	d804      	bhi.n	800ace6 <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800acdc:	2302      	movs	r3, #2
 800acde:	737b      	strb	r3, [r7, #13]
 800ace0:	23a9      	movs	r3, #169	; 0xa9
 800ace2:	73bb      	strb	r3, [r7, #14]
 800ace4:	e003      	b.n	800acee <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800ace6:	2301      	movs	r3, #1
 800ace8:	737b      	strb	r3, [r7, #13]
 800acea:	2301      	movs	r3, #1
 800acec:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800acee:	bf00      	nop
 800acf0:	f7ff fde6 	bl	800a8c0 <SPI_Timer_Status>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d007      	beq.n	800ad0a <USER_SPI_initialize+0x15e>
 800acfa:	7bbb      	ldrb	r3, [r7, #14]
 800acfc:	2100      	movs	r1, #0
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7ff fee5 	bl	800aace <send_cmd>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1f2      	bne.n	800acf0 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800ad0a:	f7ff fdd9 	bl	800a8c0 <SPI_Timer_Status>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <USER_SPI_initialize+0x178>
 800ad14:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad18:	2010      	movs	r0, #16
 800ad1a:	f7ff fed8 	bl	800aace <send_cmd>
 800ad1e:	4603      	mov	r3, r0
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d001      	beq.n	800ad28 <USER_SPI_initialize+0x17c>
                ty = 0;
 800ad24:	2300      	movs	r3, #0
 800ad26:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800ad28:	4a14      	ldr	r2, [pc, #80]	; (800ad7c <USER_SPI_initialize+0x1d0>)
 800ad2a:	7b7b      	ldrb	r3, [r7, #13]
 800ad2c:	7013      	strb	r3, [r2, #0]
    despiselect();
 800ad2e:	f7ff fe4b 	bl	800a9c8 <despiselect>

    if (ty) {           /* OK */
 800ad32:	7b7b      	ldrb	r3, [r7, #13]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d012      	beq.n	800ad5e <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800ad38:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <USER_SPI_initialize+0x1cc>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ad42:	4b0d      	ldr	r3, [pc, #52]	; (800ad78 <USER_SPI_initialize+0x1cc>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	f042 0220 	orr.w	r2, r2, #32
 800ad4a:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <USER_SPI_initialize+0x1c8>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	b2db      	uxtb	r3, r3
 800ad52:	f023 0301 	bic.w	r3, r3, #1
 800ad56:	b2da      	uxtb	r2, r3
 800ad58:	4b06      	ldr	r3, [pc, #24]	; (800ad74 <USER_SPI_initialize+0x1c8>)
 800ad5a:	701a      	strb	r2, [r3, #0]
 800ad5c:	e002      	b.n	800ad64 <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800ad5e:	4b05      	ldr	r3, [pc, #20]	; (800ad74 <USER_SPI_initialize+0x1c8>)
 800ad60:	2201      	movs	r2, #1
 800ad62:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800ad64:	4b03      	ldr	r3, [pc, #12]	; (800ad74 <USER_SPI_initialize+0x1c8>)
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	b2db      	uxtb	r3, r3
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}
 800ad72:	bf00      	nop
 800ad74:	20000020 	.word	0x20000020
 800ad78:	20000548 	.word	0x20000548
 800ad7c:	200003a4 	.word	0x200003a4

0800ad80 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	4603      	mov	r3, r0
 800ad88:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800ad8a:	79fb      	ldrb	r3, [r7, #7]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <USER_SPI_status+0x14>
 800ad90:	2301      	movs	r3, #1
 800ad92:	e002      	b.n	800ad9a <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800ad94:	4b04      	ldr	r3, [pc, #16]	; (800ada8 <USER_SPI_status+0x28>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	b2db      	uxtb	r3, r3
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20000020 	.word	0x20000020

0800adac <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60b9      	str	r1, [r7, #8]
 800adb4:	607a      	str	r2, [r7, #4]
 800adb6:	603b      	str	r3, [r7, #0]
 800adb8:	4603      	mov	r3, r0
 800adba:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800adbc:	7bfb      	ldrb	r3, [r7, #15]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d102      	bne.n	800adc8 <USER_SPI_read+0x1c>
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <USER_SPI_read+0x20>
 800adc8:	2304      	movs	r3, #4
 800adca:	e04d      	b.n	800ae68 <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800adcc:	4b28      	ldr	r3, [pc, #160]	; (800ae70 <USER_SPI_read+0xc4>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	b2db      	uxtb	r3, r3
 800add2:	f003 0301 	and.w	r3, r3, #1
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <USER_SPI_read+0x32>
 800adda:	2303      	movs	r3, #3
 800addc:	e044      	b.n	800ae68 <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800adde:	4b25      	ldr	r3, [pc, #148]	; (800ae74 <USER_SPI_read+0xc8>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	f003 0308 	and.w	r3, r3, #8
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d102      	bne.n	800adf0 <USER_SPI_read+0x44>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	025b      	lsls	r3, r3, #9
 800adee:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d111      	bne.n	800ae1a <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800adf6:	6879      	ldr	r1, [r7, #4]
 800adf8:	2011      	movs	r0, #17
 800adfa:	f7ff fe68 	bl	800aace <send_cmd>
 800adfe:	4603      	mov	r3, r0
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d129      	bne.n	800ae58 <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800ae04:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae08:	68b8      	ldr	r0, [r7, #8]
 800ae0a:	f7ff fe05 	bl	800aa18 <rcvr_datablock>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d021      	beq.n	800ae58 <USER_SPI_read+0xac>
            count = 0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	603b      	str	r3, [r7, #0]
 800ae18:	e01e      	b.n	800ae58 <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800ae1a:	6879      	ldr	r1, [r7, #4]
 800ae1c:	2012      	movs	r0, #18
 800ae1e:	f7ff fe56 	bl	800aace <send_cmd>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d117      	bne.n	800ae58 <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800ae28:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ae2c:	68b8      	ldr	r0, [r7, #8]
 800ae2e:	f7ff fdf3 	bl	800aa18 <rcvr_datablock>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <USER_SPI_read+0xa2>
                buff += 512;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ae3e:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	3b01      	subs	r3, #1
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	683b      	ldr	r3, [r7, #0]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1ed      	bne.n	800ae28 <USER_SPI_read+0x7c>
 800ae4c:	e000      	b.n	800ae50 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800ae4e:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800ae50:	2100      	movs	r1, #0
 800ae52:	200c      	movs	r0, #12
 800ae54:	f7ff fe3b 	bl	800aace <send_cmd>
        }
    }
    despiselect();
 800ae58:	f7ff fdb6 	bl	800a9c8 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	bf14      	ite	ne
 800ae62:	2301      	movne	r3, #1
 800ae64:	2300      	moveq	r3, #0
 800ae66:	b2db      	uxtb	r3, r3
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	20000020 	.word	0x20000020
 800ae74:	200003a4 	.word	0x200003a4

0800ae78 <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60b9      	str	r1, [r7, #8]
 800ae80:	607a      	str	r2, [r7, #4]
 800ae82:	603b      	str	r3, [r7, #0]
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800ae88:	7bfb      	ldrb	r3, [r7, #15]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d102      	bne.n	800ae94 <USER_SPI_write+0x1c>
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d101      	bne.n	800ae98 <USER_SPI_write+0x20>
 800ae94:	2304      	movs	r3, #4
 800ae96:	e063      	b.n	800af60 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800ae98:	4b33      	ldr	r3, [pc, #204]	; (800af68 <USER_SPI_write+0xf0>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d001      	beq.n	800aeaa <USER_SPI_write+0x32>
 800aea6:	2303      	movs	r3, #3
 800aea8:	e05a      	b.n	800af60 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800aeaa:	4b2f      	ldr	r3, [pc, #188]	; (800af68 <USER_SPI_write+0xf0>)
 800aeac:	781b      	ldrb	r3, [r3, #0]
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	f003 0304 	and.w	r3, r3, #4
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d001      	beq.n	800aebc <USER_SPI_write+0x44>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e051      	b.n	800af60 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800aebc:	4b2b      	ldr	r3, [pc, #172]	; (800af6c <USER_SPI_write+0xf4>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	f003 0308 	and.w	r3, r3, #8
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d102      	bne.n	800aece <USER_SPI_write+0x56>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	025b      	lsls	r3, r3, #9
 800aecc:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b01      	cmp	r3, #1
 800aed2:	d110      	bne.n	800aef6 <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800aed4:	6879      	ldr	r1, [r7, #4]
 800aed6:	2018      	movs	r0, #24
 800aed8:	f7ff fdf9 	bl	800aace <send_cmd>
 800aedc:	4603      	mov	r3, r0
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d136      	bne.n	800af50 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800aee2:	21fe      	movs	r1, #254	; 0xfe
 800aee4:	68b8      	ldr	r0, [r7, #8]
 800aee6:	f7ff fdc0 	bl	800aa6a <xmit_datablock>
 800aeea:	4603      	mov	r3, r0
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d02f      	beq.n	800af50 <USER_SPI_write+0xd8>
            count = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	603b      	str	r3, [r7, #0]
 800aef4:	e02c      	b.n	800af50 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800aef6:	4b1d      	ldr	r3, [pc, #116]	; (800af6c <USER_SPI_write+0xf4>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	f003 0306 	and.w	r3, r3, #6
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d003      	beq.n	800af0a <USER_SPI_write+0x92>
 800af02:	6839      	ldr	r1, [r7, #0]
 800af04:	2097      	movs	r0, #151	; 0x97
 800af06:	f7ff fde2 	bl	800aace <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800af0a:	6879      	ldr	r1, [r7, #4]
 800af0c:	2019      	movs	r0, #25
 800af0e:	f7ff fdde 	bl	800aace <send_cmd>
 800af12:	4603      	mov	r3, r0
 800af14:	2b00      	cmp	r3, #0
 800af16:	d11b      	bne.n	800af50 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800af18:	21fc      	movs	r1, #252	; 0xfc
 800af1a:	68b8      	ldr	r0, [r7, #8]
 800af1c:	f7ff fda5 	bl	800aa6a <xmit_datablock>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00a      	beq.n	800af3c <USER_SPI_write+0xc4>
                buff += 512;
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800af2c:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	3b01      	subs	r3, #1
 800af32:	603b      	str	r3, [r7, #0]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1ee      	bne.n	800af18 <USER_SPI_write+0xa0>
 800af3a:	e000      	b.n	800af3e <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800af3c:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800af3e:	21fd      	movs	r1, #253	; 0xfd
 800af40:	2000      	movs	r0, #0
 800af42:	f7ff fd92 	bl	800aa6a <xmit_datablock>
 800af46:	4603      	mov	r3, r0
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d101      	bne.n	800af50 <USER_SPI_write+0xd8>
 800af4c:	2301      	movs	r3, #1
 800af4e:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800af50:	f7ff fd3a 	bl	800a9c8 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	2b00      	cmp	r3, #0
 800af58:	bf14      	ite	ne
 800af5a:	2301      	movne	r3, #1
 800af5c:	2300      	moveq	r3, #0
 800af5e:	b2db      	uxtb	r3, r3
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20000020 	.word	0x20000020
 800af6c:	200003a4 	.word	0x200003a4

0800af70 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b08c      	sub	sp, #48	; 0x30
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	603a      	str	r2, [r7, #0]
 800af7a:	71fb      	strb	r3, [r7, #7]
 800af7c:	460b      	mov	r3, r1
 800af7e:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <USER_SPI_ioctl+0x1a>
 800af86:	2304      	movs	r3, #4
 800af88:	e15a      	b.n	800b240 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800af8a:	4baf      	ldr	r3, [pc, #700]	; (800b248 <USER_SPI_ioctl+0x2d8>)
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	f003 0301 	and.w	r3, r3, #1
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <USER_SPI_ioctl+0x2c>
 800af98:	2303      	movs	r3, #3
 800af9a:	e151      	b.n	800b240 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800af9c:	2301      	movs	r3, #1
 800af9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800afa2:	79bb      	ldrb	r3, [r7, #6]
 800afa4:	2b04      	cmp	r3, #4
 800afa6:	f200 8136 	bhi.w	800b216 <USER_SPI_ioctl+0x2a6>
 800afaa:	a201      	add	r2, pc, #4	; (adr r2, 800afb0 <USER_SPI_ioctl+0x40>)
 800afac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afb0:	0800afc5 	.word	0x0800afc5
 800afb4:	0800afd9 	.word	0x0800afd9
 800afb8:	0800b217 	.word	0x0800b217
 800afbc:	0800b085 	.word	0x0800b085
 800afc0:	0800b17b 	.word	0x0800b17b
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800afc4:	f7ff fd0e 	bl	800a9e4 <spiselect>
 800afc8:	4603      	mov	r3, r0
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 8127 	beq.w	800b21e <USER_SPI_ioctl+0x2ae>
 800afd0:	2300      	movs	r3, #0
 800afd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800afd6:	e122      	b.n	800b21e <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800afd8:	2100      	movs	r1, #0
 800afda:	2009      	movs	r0, #9
 800afdc:	f7ff fd77 	bl	800aace <send_cmd>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	f040 811d 	bne.w	800b222 <USER_SPI_ioctl+0x2b2>
 800afe8:	f107 030c 	add.w	r3, r7, #12
 800afec:	2110      	movs	r1, #16
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff fd12 	bl	800aa18 <rcvr_datablock>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	f000 8113 	beq.w	800b222 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800affc:	7b3b      	ldrb	r3, [r7, #12]
 800affe:	099b      	lsrs	r3, r3, #6
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b01      	cmp	r3, #1
 800b004:	d111      	bne.n	800b02a <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b006:	7d7b      	ldrb	r3, [r7, #21]
 800b008:	461a      	mov	r2, r3
 800b00a:	7d3b      	ldrb	r3, [r7, #20]
 800b00c:	021b      	lsls	r3, r3, #8
 800b00e:	4413      	add	r3, r2
 800b010:	461a      	mov	r2, r3
 800b012:	7cfb      	ldrb	r3, [r7, #19]
 800b014:	041b      	lsls	r3, r3, #16
 800b016:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b01a:	4413      	add	r3, r2
 800b01c:	3301      	adds	r3, #1
 800b01e:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	029a      	lsls	r2, r3, #10
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	e028      	b.n	800b07c <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b02a:	7c7b      	ldrb	r3, [r7, #17]
 800b02c:	f003 030f 	and.w	r3, r3, #15
 800b030:	b2da      	uxtb	r2, r3
 800b032:	7dbb      	ldrb	r3, [r7, #22]
 800b034:	09db      	lsrs	r3, r3, #7
 800b036:	b2db      	uxtb	r3, r3
 800b038:	4413      	add	r3, r2
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	7d7b      	ldrb	r3, [r7, #21]
 800b03e:	005b      	lsls	r3, r3, #1
 800b040:	b2db      	uxtb	r3, r3
 800b042:	f003 0306 	and.w	r3, r3, #6
 800b046:	b2db      	uxtb	r3, r3
 800b048:	4413      	add	r3, r2
 800b04a:	b2db      	uxtb	r3, r3
 800b04c:	3302      	adds	r3, #2
 800b04e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b052:	7d3b      	ldrb	r3, [r7, #20]
 800b054:	099b      	lsrs	r3, r3, #6
 800b056:	b2db      	uxtb	r3, r3
 800b058:	461a      	mov	r2, r3
 800b05a:	7cfb      	ldrb	r3, [r7, #19]
 800b05c:	009b      	lsls	r3, r3, #2
 800b05e:	441a      	add	r2, r3
 800b060:	7cbb      	ldrb	r3, [r7, #18]
 800b062:	029b      	lsls	r3, r3, #10
 800b064:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b068:	4413      	add	r3, r2
 800b06a:	3301      	adds	r3, #1
 800b06c:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800b06e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b072:	3b09      	subs	r3, #9
 800b074:	69fa      	ldr	r2, [r7, #28]
 800b076:	409a      	lsls	r2, r3
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800b07c:	2300      	movs	r3, #0
 800b07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800b082:	e0ce      	b.n	800b222 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800b084:	4b71      	ldr	r3, [pc, #452]	; (800b24c <USER_SPI_ioctl+0x2dc>)
 800b086:	781b      	ldrb	r3, [r3, #0]
 800b088:	f003 0304 	and.w	r3, r3, #4
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d031      	beq.n	800b0f4 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800b090:	2100      	movs	r1, #0
 800b092:	208d      	movs	r0, #141	; 0x8d
 800b094:	f7ff fd1b 	bl	800aace <send_cmd>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	f040 80c3 	bne.w	800b226 <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800b0a0:	20ff      	movs	r0, #255	; 0xff
 800b0a2:	f7ff fc23 	bl	800a8ec <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800b0a6:	f107 030c 	add.w	r3, r7, #12
 800b0aa:	2110      	movs	r1, #16
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7ff fcb3 	bl	800aa18 <rcvr_datablock>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 80b6 	beq.w	800b226 <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800b0ba:	2330      	movs	r3, #48	; 0x30
 800b0bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b0c0:	e007      	b.n	800b0d2 <USER_SPI_ioctl+0x162>
 800b0c2:	20ff      	movs	r0, #255	; 0xff
 800b0c4:	f7ff fc12 	bl	800a8ec <xchg_spi>
 800b0c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b0d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1f3      	bne.n	800b0c2 <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
 800b0dc:	091b      	lsrs	r3, r3, #4
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	2310      	movs	r3, #16
 800b0e4:	fa03 f202 	lsl.w	r2, r3, r2
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800b0f2:	e098      	b.n	800b226 <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800b0f4:	2100      	movs	r1, #0
 800b0f6:	2009      	movs	r0, #9
 800b0f8:	f7ff fce9 	bl	800aace <send_cmd>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	f040 8091 	bne.w	800b226 <USER_SPI_ioctl+0x2b6>
 800b104:	f107 030c 	add.w	r3, r7, #12
 800b108:	2110      	movs	r1, #16
 800b10a:	4618      	mov	r0, r3
 800b10c:	f7ff fc84 	bl	800aa18 <rcvr_datablock>
 800b110:	4603      	mov	r3, r0
 800b112:	2b00      	cmp	r3, #0
 800b114:	f000 8087 	beq.w	800b226 <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800b118:	4b4c      	ldr	r3, [pc, #304]	; (800b24c <USER_SPI_ioctl+0x2dc>)
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	f003 0302 	and.w	r3, r3, #2
 800b120:	2b00      	cmp	r3, #0
 800b122:	d012      	beq.n	800b14a <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b124:	7dbb      	ldrb	r3, [r7, #22]
 800b126:	005b      	lsls	r3, r3, #1
 800b128:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b12c:	7dfa      	ldrb	r2, [r7, #23]
 800b12e:	09d2      	lsrs	r2, r2, #7
 800b130:	b2d2      	uxtb	r2, r2
 800b132:	4413      	add	r3, r2
 800b134:	1c5a      	adds	r2, r3, #1
 800b136:	7e7b      	ldrb	r3, [r7, #25]
 800b138:	099b      	lsrs	r3, r3, #6
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	3b01      	subs	r3, #1
 800b13e:	fa02 f303 	lsl.w	r3, r2, r3
 800b142:	461a      	mov	r2, r3
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	601a      	str	r2, [r3, #0]
 800b148:	e013      	b.n	800b172 <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b14a:	7dbb      	ldrb	r3, [r7, #22]
 800b14c:	109b      	asrs	r3, r3, #2
 800b14e:	b29b      	uxth	r3, r3
 800b150:	f003 031f 	and.w	r3, r3, #31
 800b154:	3301      	adds	r3, #1
 800b156:	7dfa      	ldrb	r2, [r7, #23]
 800b158:	00d2      	lsls	r2, r2, #3
 800b15a:	f002 0218 	and.w	r2, r2, #24
 800b15e:	7df9      	ldrb	r1, [r7, #23]
 800b160:	0949      	lsrs	r1, r1, #5
 800b162:	b2c9      	uxtb	r1, r1
 800b164:	440a      	add	r2, r1
 800b166:	3201      	adds	r2, #1
 800b168:	fb02 f303 	mul.w	r3, r2, r3
 800b16c:	461a      	mov	r2, r3
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800b172:	2300      	movs	r3, #0
 800b174:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800b178:	e055      	b.n	800b226 <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800b17a:	4b34      	ldr	r3, [pc, #208]	; (800b24c <USER_SPI_ioctl+0x2dc>)
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	f003 0306 	and.w	r3, r3, #6
 800b182:	2b00      	cmp	r3, #0
 800b184:	d051      	beq.n	800b22a <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800b186:	f107 020c 	add.w	r2, r7, #12
 800b18a:	79fb      	ldrb	r3, [r7, #7]
 800b18c:	210b      	movs	r1, #11
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff feee 	bl	800af70 <USER_SPI_ioctl>
 800b194:	4603      	mov	r3, r0
 800b196:	2b00      	cmp	r3, #0
 800b198:	d149      	bne.n	800b22e <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800b19a:	7b3b      	ldrb	r3, [r7, #12]
 800b19c:	099b      	lsrs	r3, r3, #6
 800b19e:	b2db      	uxtb	r3, r3
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d104      	bne.n	800b1ae <USER_SPI_ioctl+0x23e>
 800b1a4:	7dbb      	ldrb	r3, [r7, #22]
 800b1a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d041      	beq.n	800b232 <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800b1ae:	683b      	ldr	r3, [r7, #0]
 800b1b0:	623b      	str	r3, [r7, #32]
 800b1b2:	6a3b      	ldr	r3, [r7, #32]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800b1be:	4b23      	ldr	r3, [pc, #140]	; (800b24c <USER_SPI_ioctl+0x2dc>)
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	f003 0308 	and.w	r3, r3, #8
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d105      	bne.n	800b1d6 <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800b1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1cc:	025b      	lsls	r3, r3, #9
 800b1ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d2:	025b      	lsls	r3, r3, #9
 800b1d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800b1d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1d8:	2020      	movs	r0, #32
 800b1da:	f7ff fc78 	bl	800aace <send_cmd>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d128      	bne.n	800b236 <USER_SPI_ioctl+0x2c6>
 800b1e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b1e6:	2021      	movs	r0, #33	; 0x21
 800b1e8:	f7ff fc71 	bl	800aace <send_cmd>
 800b1ec:	4603      	mov	r3, r0
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d121      	bne.n	800b236 <USER_SPI_ioctl+0x2c6>
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	2026      	movs	r0, #38	; 0x26
 800b1f6:	f7ff fc6a 	bl	800aace <send_cmd>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d11a      	bne.n	800b236 <USER_SPI_ioctl+0x2c6>
 800b200:	f247 5030 	movw	r0, #30000	; 0x7530
 800b204:	f7ff fbbd 	bl	800a982 <wait_ready>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d013      	beq.n	800b236 <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800b20e:	2300      	movs	r3, #0
 800b210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800b214:	e00f      	b.n	800b236 <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800b216:	2304      	movs	r3, #4
 800b218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b21c:	e00c      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        break;
 800b21e:	bf00      	nop
 800b220:	e00a      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        break;
 800b222:	bf00      	nop
 800b224:	e008      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        break;
 800b226:	bf00      	nop
 800b228:	e006      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800b22a:	bf00      	nop
 800b22c:	e004      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800b22e:	bf00      	nop
 800b230:	e002      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800b232:	bf00      	nop
 800b234:	e000      	b.n	800b238 <USER_SPI_ioctl+0x2c8>
        break;
 800b236:	bf00      	nop
    }

    despiselect();
 800b238:	f7ff fbc6 	bl	800a9c8 <despiselect>

    return res;
 800b23c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b240:	4618      	mov	r0, r3
 800b242:	3730      	adds	r7, #48	; 0x30
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	20000020 	.word	0x20000020
 800b24c:	200003a4 	.word	0x200003a4

0800b250 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b25c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b260:	f002 fa56 	bl	800d710 <malloc>
 800b264:	4603      	mov	r3, r0
 800b266:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d105      	bne.n	800b27a <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2200      	movs	r2, #0
 800b272:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b276:	2302      	movs	r3, #2
 800b278:	e066      	b.n	800b348 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	7c1b      	ldrb	r3, [r3, #16]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d119      	bne.n	800b2be <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b28a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b28e:	2202      	movs	r2, #2
 800b290:	2181      	movs	r1, #129	; 0x81
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f002 f845 	bl	800d322 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b29e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2a2:	2202      	movs	r2, #2
 800b2a4:	2101      	movs	r1, #1
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f002 f83b 	bl	800d322 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2201      	movs	r2, #1
 800b2b0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2210      	movs	r2, #16
 800b2b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b2bc:	e016      	b.n	800b2ec <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b2be:	2340      	movs	r3, #64	; 0x40
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	2181      	movs	r1, #129	; 0x81
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f002 f82c 	bl	800d322 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b2d0:	2340      	movs	r3, #64	; 0x40
 800b2d2:	2202      	movs	r2, #2
 800b2d4:	2101      	movs	r1, #1
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f002 f823 	bl	800d322 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2210      	movs	r2, #16
 800b2e8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b2ec:	2308      	movs	r3, #8
 800b2ee:	2203      	movs	r2, #3
 800b2f0:	2182      	movs	r1, #130	; 0x82
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f002 f815 	bl	800d322 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	2200      	movs	r2, #0
 800b30e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2200      	movs	r2, #0
 800b316:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	7c1b      	ldrb	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d109      	bne.n	800b336 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b328:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b32c:	2101      	movs	r1, #1
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f002 f8e6 	bl	800d500 <USBD_LL_PrepareReceive>
 800b334:	e007      	b.n	800b346 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b33c:	2340      	movs	r3, #64	; 0x40
 800b33e:	2101      	movs	r1, #1
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f002 f8dd 	bl	800d500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b346:	2300      	movs	r3, #0
}
 800b348:	4618      	mov	r0, r3
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}

0800b350 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b084      	sub	sp, #16
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	460b      	mov	r3, r1
 800b35a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b35c:	2300      	movs	r3, #0
 800b35e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b360:	2181      	movs	r1, #129	; 0x81
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f002 f803 	bl	800d36e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b36e:	2101      	movs	r1, #1
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f001 fffc 	bl	800d36e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b37e:	2182      	movs	r1, #130	; 0x82
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f001 fff4 	bl	800d36e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d00e      	beq.n	800b3be <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3a6:	685b      	ldr	r3, [r3, #4]
 800b3a8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	f002 f9b5 	bl	800d720 <free>
    pdev->pClassData = NULL;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3710      	adds	r7, #16
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}

0800b3c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	6078      	str	r0, [r7, #4]
 800b3d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3d8:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b3de:	2300      	movs	r3, #0
 800b3e0:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d03a      	beq.n	800b468 <USBD_CDC_Setup+0xa0>
 800b3f2:	2b20      	cmp	r3, #32
 800b3f4:	f040 8097 	bne.w	800b526 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	88db      	ldrh	r3, [r3, #6]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d029      	beq.n	800b454 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	781b      	ldrb	r3, [r3, #0]
 800b404:	b25b      	sxtb	r3, r3
 800b406:	2b00      	cmp	r3, #0
 800b408:	da11      	bge.n	800b42e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	683a      	ldr	r2, [r7, #0]
 800b414:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b416:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	88d2      	ldrh	r2, [r2, #6]
 800b41c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b41e:	6939      	ldr	r1, [r7, #16]
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	88db      	ldrh	r3, [r3, #6]
 800b424:	461a      	mov	r2, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f001 fac7 	bl	800c9ba <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b42c:	e082      	b.n	800b534 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	785a      	ldrb	r2, [r3, #1]
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	88db      	ldrh	r3, [r3, #6]
 800b43c:	b2da      	uxtb	r2, r3
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b444:	6939      	ldr	r1, [r7, #16]
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	88db      	ldrh	r3, [r3, #6]
 800b44a:	461a      	mov	r2, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f001 fae0 	bl	800ca12 <USBD_CtlPrepareRx>
    break;
 800b452:	e06f      	b.n	800b534 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	683a      	ldr	r2, [r7, #0]
 800b45e:	7850      	ldrb	r0, [r2, #1]
 800b460:	2200      	movs	r2, #0
 800b462:	6839      	ldr	r1, [r7, #0]
 800b464:	4798      	blx	r3
    break;
 800b466:	e065      	b.n	800b534 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	785b      	ldrb	r3, [r3, #1]
 800b46c:	2b0b      	cmp	r3, #11
 800b46e:	d84f      	bhi.n	800b510 <USBD_CDC_Setup+0x148>
 800b470:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <USBD_CDC_Setup+0xb0>)
 800b472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b476:	bf00      	nop
 800b478:	0800b4a9 	.word	0x0800b4a9
 800b47c:	0800b51f 	.word	0x0800b51f
 800b480:	0800b511 	.word	0x0800b511
 800b484:	0800b511 	.word	0x0800b511
 800b488:	0800b511 	.word	0x0800b511
 800b48c:	0800b511 	.word	0x0800b511
 800b490:	0800b511 	.word	0x0800b511
 800b494:	0800b511 	.word	0x0800b511
 800b498:	0800b511 	.word	0x0800b511
 800b49c:	0800b511 	.word	0x0800b511
 800b4a0:	0800b4d1 	.word	0x0800b4d1
 800b4a4:	0800b4f9 	.word	0x0800b4f9
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4ae:	2b03      	cmp	r3, #3
 800b4b0:	d107      	bne.n	800b4c2 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b4b2:	f107 030c 	add.w	r3, r7, #12
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f001 fa7d 	bl	800c9ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b4c0:	e030      	b.n	800b524 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f001 fa07 	bl	800c8d8 <USBD_CtlError>
        ret = USBD_FAIL;
 800b4ca:	2303      	movs	r3, #3
 800b4cc:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ce:	e029      	b.n	800b524 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4d6:	2b03      	cmp	r3, #3
 800b4d8:	d107      	bne.n	800b4ea <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b4da:	f107 030f 	add.w	r3, r7, #15
 800b4de:	2201      	movs	r2, #1
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 fa69 	bl	800c9ba <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b4e8:	e01c      	b.n	800b524 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b4ea:	6839      	ldr	r1, [r7, #0]
 800b4ec:	6878      	ldr	r0, [r7, #4]
 800b4ee:	f001 f9f3 	bl	800c8d8 <USBD_CtlError>
        ret = USBD_FAIL;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	75fb      	strb	r3, [r7, #23]
      break;
 800b4f6:	e015      	b.n	800b524 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b4fe:	2b03      	cmp	r3, #3
 800b500:	d00f      	beq.n	800b522 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b502:	6839      	ldr	r1, [r7, #0]
 800b504:	6878      	ldr	r0, [r7, #4]
 800b506:	f001 f9e7 	bl	800c8d8 <USBD_CtlError>
        ret = USBD_FAIL;
 800b50a:	2303      	movs	r3, #3
 800b50c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b50e:	e008      	b.n	800b522 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b510:	6839      	ldr	r1, [r7, #0]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f001 f9e0 	bl	800c8d8 <USBD_CtlError>
      ret = USBD_FAIL;
 800b518:	2303      	movs	r3, #3
 800b51a:	75fb      	strb	r3, [r7, #23]
      break;
 800b51c:	e002      	b.n	800b524 <USBD_CDC_Setup+0x15c>
      break;
 800b51e:	bf00      	nop
 800b520:	e008      	b.n	800b534 <USBD_CDC_Setup+0x16c>
      break;
 800b522:	bf00      	nop
    }
    break;
 800b524:	e006      	b.n	800b534 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b526:	6839      	ldr	r1, [r7, #0]
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f001 f9d5 	bl	800c8d8 <USBD_CtlError>
    ret = USBD_FAIL;
 800b52e:	2303      	movs	r3, #3
 800b530:	75fb      	strb	r3, [r7, #23]
    break;
 800b532:	bf00      	nop
  }

  return (uint8_t)ret;
 800b534:	7dfb      	ldrb	r3, [r7, #23]
}
 800b536:	4618      	mov	r0, r3
 800b538:	3718      	adds	r7, #24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop

0800b540 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b552:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d101      	bne.n	800b562 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b55e:	2303      	movs	r3, #3
 800b560:	e049      	b.n	800b5f6 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b568:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b56a:	78fa      	ldrb	r2, [r7, #3]
 800b56c:	6879      	ldr	r1, [r7, #4]
 800b56e:	4613      	mov	r3, r2
 800b570:	009b      	lsls	r3, r3, #2
 800b572:	4413      	add	r3, r2
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	440b      	add	r3, r1
 800b578:	3318      	adds	r3, #24
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d029      	beq.n	800b5d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b580:	78fa      	ldrb	r2, [r7, #3]
 800b582:	6879      	ldr	r1, [r7, #4]
 800b584:	4613      	mov	r3, r2
 800b586:	009b      	lsls	r3, r3, #2
 800b588:	4413      	add	r3, r2
 800b58a:	009b      	lsls	r3, r3, #2
 800b58c:	440b      	add	r3, r1
 800b58e:	3318      	adds	r3, #24
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	78f9      	ldrb	r1, [r7, #3]
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	460b      	mov	r3, r1
 800b598:	00db      	lsls	r3, r3, #3
 800b59a:	1a5b      	subs	r3, r3, r1
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	4403      	add	r3, r0
 800b5a0:	3344      	adds	r3, #68	; 0x44
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800b5a8:	fb03 f301 	mul.w	r3, r3, r1
 800b5ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d110      	bne.n	800b5d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b5b2:	78fa      	ldrb	r2, [r7, #3]
 800b5b4:	6879      	ldr	r1, [r7, #4]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	4413      	add	r3, r2
 800b5bc:	009b      	lsls	r3, r3, #2
 800b5be:	440b      	add	r3, r1
 800b5c0:	3318      	adds	r3, #24
 800b5c2:	2200      	movs	r2, #0
 800b5c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b5c6:	78f9      	ldrb	r1, [r7, #3]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f001 ff76 	bl	800d4be <USBD_LL_Transmit>
 800b5d2:	e00f      	b.n	800b5f4 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b5f0:	78fa      	ldrb	r2, [r7, #3]
 800b5f2:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b084      	sub	sp, #16
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	460b      	mov	r3, r1
 800b608:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b610:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d101      	bne.n	800b620 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b61c:	2303      	movs	r3, #3
 800b61e:	e015      	b.n	800b64c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	4619      	mov	r1, r3
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f001 ff8c 	bl	800d542 <USBD_LL_GetRxDataSize>
 800b62a:	4602      	mov	r2, r0
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b640:	68fa      	ldr	r2, [r7, #12]
 800b642:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b646:	4611      	mov	r1, r2
 800b648:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b662:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d015      	beq.n	800b69a <USBD_CDC_EP0_RxReady+0x46>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b674:	2bff      	cmp	r3, #255	; 0xff
 800b676:	d010      	beq.n	800b69a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b67e:	689b      	ldr	r3, [r3, #8]
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b686:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b688:	68fa      	ldr	r2, [r7, #12]
 800b68a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b68e:	b292      	uxth	r2, r2
 800b690:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	22ff      	movs	r2, #255	; 0xff
 800b696:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b69a:	2300      	movs	r3, #0
}
 800b69c:	4618      	mov	r0, r3
 800b69e:	3710      	adds	r7, #16
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	bd80      	pop	{r7, pc}

0800b6a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2243      	movs	r2, #67	; 0x43
 800b6b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b6b2:	4b03      	ldr	r3, [pc, #12]	; (800b6c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	370c      	adds	r7, #12
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6be:	4770      	bx	lr
 800b6c0:	200000ac 	.word	0x200000ac

0800b6c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b083      	sub	sp, #12
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2243      	movs	r2, #67	; 0x43
 800b6d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b6d2:	4b03      	ldr	r3, [pc, #12]	; (800b6e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr
 800b6e0:	20000068 	.word	0x20000068

0800b6e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b083      	sub	sp, #12
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2243      	movs	r2, #67	; 0x43
 800b6f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b6f2:	4b03      	ldr	r3, [pc, #12]	; (800b700 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	370c      	adds	r7, #12
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fe:	4770      	bx	lr
 800b700:	200000f0 	.word	0x200000f0

0800b704 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	220a      	movs	r2, #10
 800b710:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b712:	4b03      	ldr	r3, [pc, #12]	; (800b720 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b714:	4618      	mov	r0, r3
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr
 800b720:	20000024 	.word	0x20000024

0800b724 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b724:	b480      	push	{r7}
 800b726:	b083      	sub	sp, #12
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
 800b72c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d101      	bne.n	800b738 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b734:	2303      	movs	r3, #3
 800b736:	e004      	b.n	800b742 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	683a      	ldr	r2, [r7, #0]
 800b73c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b74e:	b480      	push	{r7}
 800b750:	b087      	sub	sp, #28
 800b752:	af00      	add	r7, sp, #0
 800b754:	60f8      	str	r0, [r7, #12]
 800b756:	60b9      	str	r1, [r7, #8]
 800b758:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b760:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	68ba      	ldr	r2, [r7, #8]
 800b766:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	687a      	ldr	r2, [r7, #4]
 800b76e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b772:	2300      	movs	r3, #0
}
 800b774:	4618      	mov	r0, r3
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77e:	4770      	bx	lr

0800b780 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b780:	b480      	push	{r7}
 800b782:	b085      	sub	sp, #20
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b790:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	683a      	ldr	r2, [r7, #0]
 800b796:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b79a:	2300      	movs	r3, #0
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a6:	4770      	bx	lr

0800b7a8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	b084      	sub	sp, #16
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7b6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d101      	bne.n	800b7ca <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b7c6:	2303      	movs	r3, #3
 800b7c8:	e01a      	b.n	800b800 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d114      	bne.n	800b7fe <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	2201      	movs	r2, #1
 800b7d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b7f2:	2181      	movs	r1, #129	; 0x81
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f001 fe62 	bl	800d4be <USBD_LL_Transmit>

    ret = USBD_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b7fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b816:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d101      	bne.n	800b826 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b822:	2303      	movs	r3, #3
 800b824:	e016      	b.n	800b854 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	7c1b      	ldrb	r3, [r3, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d109      	bne.n	800b842 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b834:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b838:	2101      	movs	r1, #1
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f001 fe60 	bl	800d500 <USBD_LL_PrepareReceive>
 800b840:	e007      	b.n	800b852 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b848:	2340      	movs	r3, #64	; 0x40
 800b84a:	2101      	movs	r1, #1
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f001 fe57 	bl	800d500 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3710      	adds	r7, #16
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b086      	sub	sp, #24
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	4613      	mov	r3, r2
 800b868:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b870:	2303      	movs	r3, #3
 800b872:	e025      	b.n	800b8c0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d003      	beq.n	800b886 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2200      	movs	r2, #0
 800b882:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d003      	beq.n	800b898 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d003      	beq.n	800b8a6 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2201      	movs	r2, #1
 800b8aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	79fa      	ldrb	r2, [r7, #7]
 800b8b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8b4:	68f8      	ldr	r0, [r7, #12]
 800b8b6:	f001 fccd 	bl	800d254 <USBD_LL_Init>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8be:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3718      	adds	r7, #24
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
 800b8d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d101      	bne.n	800b8e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e010      	b.n	800b902 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f0:	f107 020e 	add.w	r2, r7, #14
 800b8f4:	4610      	mov	r0, r2
 800b8f6:	4798      	blx	r3
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3710      	adds	r7, #16
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b90a:	b580      	push	{r7, lr}
 800b90c:	b082      	sub	sp, #8
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f001 fcea 	bl	800d2ec <USBD_LL_Start>
 800b918:	4603      	mov	r3, r0
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b922:	b480      	push	{r7}
 800b924:	b083      	sub	sp, #12
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b92a:	2300      	movs	r3, #0
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	370c      	adds	r7, #12
 800b930:	46bd      	mov	sp, r7
 800b932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b936:	4770      	bx	lr

0800b938 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b944:	2303      	movs	r3, #3
 800b946:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d009      	beq.n	800b966 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	78fa      	ldrb	r2, [r7, #3]
 800b95c:	4611      	mov	r1, r2
 800b95e:	6878      	ldr	r0, [r7, #4]
 800b960:	4798      	blx	r3
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b966:	7bfb      	ldrb	r3, [r7, #15]
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	b082      	sub	sp, #8
 800b974:	af00      	add	r7, sp, #0
 800b976:	6078      	str	r0, [r7, #4]
 800b978:	460b      	mov	r3, r1
 800b97a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b982:	2b00      	cmp	r3, #0
 800b984:	d007      	beq.n	800b996 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	78fa      	ldrb	r2, [r7, #3]
 800b990:	4611      	mov	r1, r2
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	4798      	blx	r3
  }

  return USBD_OK;
 800b996:	2300      	movs	r3, #0
}
 800b998:	4618      	mov	r0, r3
 800b99a:	3708      	adds	r7, #8
 800b99c:	46bd      	mov	sp, r7
 800b99e:	bd80      	pop	{r7, pc}

0800b9a0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9b0:	6839      	ldr	r1, [r7, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f000 ff56 	bl	800c864 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9d4:	f003 031f 	and.w	r3, r3, #31
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d00e      	beq.n	800b9fa <USBD_LL_SetupStage+0x5a>
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d302      	bcc.n	800b9e6 <USBD_LL_SetupStage+0x46>
 800b9e0:	2b02      	cmp	r3, #2
 800b9e2:	d014      	beq.n	800ba0e <USBD_LL_SetupStage+0x6e>
 800b9e4:	e01d      	b.n	800ba22 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 fa18 	bl	800be24 <USBD_StdDevReq>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]
      break;
 800b9f8:	e020      	b.n	800ba3c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba00:	4619      	mov	r1, r3
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 fa7c 	bl	800bf00 <USBD_StdItfReq>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ba0c:	e016      	b.n	800ba3c <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba14:	4619      	mov	r1, r3
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fab8 	bl	800bf8c <USBD_StdEPReq>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba20:	e00c      	b.n	800ba3c <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba2c:	b2db      	uxtb	r3, r3
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f001 fcbb 	bl	800d3ac <USBD_LL_StallEP>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73fb      	strb	r3, [r7, #15]
      break;
 800ba3a:	bf00      	nop
  }

  return ret;
 800ba3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b086      	sub	sp, #24
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	460b      	mov	r3, r1
 800ba50:	607a      	str	r2, [r7, #4]
 800ba52:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ba54:	7afb      	ldrb	r3, [r7, #11]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d137      	bne.n	800baca <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ba60:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d14a      	bne.n	800bb02 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	689a      	ldr	r2, [r3, #8]
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d913      	bls.n	800baa0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	689a      	ldr	r2, [r3, #8]
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	1ad2      	subs	r2, r2, r3
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	68da      	ldr	r2, [r3, #12]
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	689b      	ldr	r3, [r3, #8]
 800ba8e:	4293      	cmp	r3, r2
 800ba90:	bf28      	it	cs
 800ba92:	4613      	movcs	r3, r2
 800ba94:	461a      	mov	r2, r3
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	68f8      	ldr	r0, [r7, #12]
 800ba9a:	f000 ffd7 	bl	800ca4c <USBD_CtlContinueRx>
 800ba9e:	e030      	b.n	800bb02 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d00a      	beq.n	800bac2 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d105      	bne.n	800bac2 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	68f8      	ldr	r0, [r7, #12]
 800bac0:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f000 ffd3 	bl	800ca6e <USBD_CtlSendStatus>
 800bac8:	e01b      	b.n	800bb02 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bad0:	699b      	ldr	r3, [r3, #24]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d013      	beq.n	800bafe <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800badc:	2b03      	cmp	r3, #3
 800bade:	d10e      	bne.n	800bafe <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	7afa      	ldrb	r2, [r7, #11]
 800baea:	4611      	mov	r1, r2
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	4798      	blx	r3
 800baf0:	4603      	mov	r3, r0
 800baf2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800baf4:	7dfb      	ldrb	r3, [r7, #23]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bafa:	7dfb      	ldrb	r3, [r7, #23]
 800bafc:	e002      	b.n	800bb04 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bafe:	2303      	movs	r3, #3
 800bb00:	e000      	b.n	800bb04 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bb02:	2300      	movs	r3, #0
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3718      	adds	r7, #24
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b086      	sub	sp, #24
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	60f8      	str	r0, [r7, #12]
 800bb14:	460b      	mov	r3, r1
 800bb16:	607a      	str	r2, [r7, #4]
 800bb18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bb1a:	7afb      	ldrb	r3, [r7, #11]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d16a      	bne.n	800bbf6 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	3314      	adds	r3, #20
 800bb24:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bb2c:	2b02      	cmp	r3, #2
 800bb2e:	d155      	bne.n	800bbdc <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	693b      	ldr	r3, [r7, #16]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d914      	bls.n	800bb66 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bb3c:	693b      	ldr	r3, [r7, #16]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	693b      	ldr	r3, [r7, #16]
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	1ad2      	subs	r2, r2, r3
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bb4a:	693b      	ldr	r3, [r7, #16]
 800bb4c:	689b      	ldr	r3, [r3, #8]
 800bb4e:	461a      	mov	r2, r3
 800bb50:	6879      	ldr	r1, [r7, #4]
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 ff4c 	bl	800c9f0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb58:	2300      	movs	r3, #0
 800bb5a:	2200      	movs	r2, #0
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f001 fcce 	bl	800d500 <USBD_LL_PrepareReceive>
 800bb64:	e03a      	b.n	800bbdc <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	68da      	ldr	r2, [r3, #12]
 800bb6a:	693b      	ldr	r3, [r7, #16]
 800bb6c:	689b      	ldr	r3, [r3, #8]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d11c      	bne.n	800bbac <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	685a      	ldr	r2, [r3, #4]
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d316      	bcc.n	800bbac <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	d20f      	bcs.n	800bbac <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2100      	movs	r1, #0
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 ff2d 	bl	800c9f0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb9e:	2300      	movs	r3, #0
 800bba0:	2200      	movs	r2, #0
 800bba2:	2100      	movs	r1, #0
 800bba4:	68f8      	ldr	r0, [r7, #12]
 800bba6:	f001 fcab 	bl	800d500 <USBD_LL_PrepareReceive>
 800bbaa:	e017      	b.n	800bbdc <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00a      	beq.n	800bbce <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bbbe:	2b03      	cmp	r3, #3
 800bbc0:	d105      	bne.n	800bbce <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbc8:	68db      	ldr	r3, [r3, #12]
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbce:	2180      	movs	r1, #128	; 0x80
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	f001 fbeb 	bl	800d3ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f000 ff5c 	bl	800ca94 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d123      	bne.n	800bc2e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800bbe6:	68f8      	ldr	r0, [r7, #12]
 800bbe8:	f7ff fe9b 	bl	800b922 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	2200      	movs	r2, #0
 800bbf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bbf4:	e01b      	b.n	800bc2e <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bbfc:	695b      	ldr	r3, [r3, #20]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d013      	beq.n	800bc2a <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bc08:	2b03      	cmp	r3, #3
 800bc0a:	d10e      	bne.n	800bc2a <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc12:	695b      	ldr	r3, [r3, #20]
 800bc14:	7afa      	ldrb	r2, [r7, #11]
 800bc16:	4611      	mov	r1, r2
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	4798      	blx	r3
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bc20:	7dfb      	ldrb	r3, [r7, #23]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d003      	beq.n	800bc2e <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	e002      	b.n	800bc30 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e000      	b.n	800bc30 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3718      	adds	r7, #24
 800bc34:	46bd      	mov	sp, r7
 800bc36:	bd80      	pop	{r7, pc}

0800bc38 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b082      	sub	sp, #8
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2201      	movs	r2, #1
 800bc44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d009      	beq.n	800bc7c <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc6e:	685b      	ldr	r3, [r3, #4]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	6852      	ldr	r2, [r2, #4]
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	4611      	mov	r1, r2
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc7c:	2340      	movs	r3, #64	; 0x40
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2100      	movs	r1, #0
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f001 fb4d 	bl	800d322 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2240      	movs	r2, #64	; 0x40
 800bc94:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bc98:	2340      	movs	r3, #64	; 0x40
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2180      	movs	r1, #128	; 0x80
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 fb3f 	bl	800d322 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2240      	movs	r2, #64	; 0x40
 800bcae:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bcb0:	2300      	movs	r3, #0
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3708      	adds	r7, #8
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bcba:	b480      	push	{r7}
 800bcbc:	b083      	sub	sp, #12
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	460b      	mov	r3, r1
 800bcc4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	78fa      	ldrb	r2, [r7, #3]
 800bcca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bccc:	2300      	movs	r3, #0
}
 800bcce:	4618      	mov	r0, r3
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd8:	4770      	bx	lr

0800bcda <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bcda:	b480      	push	{r7}
 800bcdc:	b083      	sub	sp, #12
 800bcde:	af00      	add	r7, sp, #0
 800bce0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2204      	movs	r2, #4
 800bcf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bcf6:	2300      	movs	r3, #0
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b083      	sub	sp, #12
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd12:	2b04      	cmp	r3, #4
 800bd14:	d105      	bne.n	800bd22 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	370c      	adds	r7, #12
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd3e:	2b03      	cmp	r3, #3
 800bd40:	d10b      	bne.n	800bd5a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd48:	69db      	ldr	r3, [r3, #28]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	3708      	adds	r7, #8
 800bd60:	46bd      	mov	sp, r7
 800bd62:	bd80      	pop	{r7, pc}

0800bd64 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b083      	sub	sp, #12
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	460b      	mov	r3, r1
 800bd6e:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr

0800bd7e <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd7e:	b480      	push	{r7}
 800bd80:	b083      	sub	sp, #12
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	460b      	mov	r3, r1
 800bd88:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bda0:	2300      	movs	r3, #0
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	370c      	adds	r7, #12
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr

0800bdae <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2201      	movs	r2, #1
 800bdba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d009      	beq.n	800bddc <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdce:	685b      	ldr	r3, [r3, #4]
 800bdd0:	687a      	ldr	r2, [r7, #4]
 800bdd2:	6852      	ldr	r2, [r2, #4]
 800bdd4:	b2d2      	uxtb	r2, r2
 800bdd6:	4611      	mov	r1, r2
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	4798      	blx	r3
  }

  return USBD_OK;
 800bddc:	2300      	movs	r3, #0
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3708      	adds	r7, #8
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b087      	sub	sp, #28
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bdf8:	697b      	ldr	r3, [r7, #20]
 800bdfa:	3301      	adds	r3, #1
 800bdfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	781b      	ldrb	r3, [r3, #0]
 800be02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800be04:	8a3b      	ldrh	r3, [r7, #16]
 800be06:	021b      	lsls	r3, r3, #8
 800be08:	b21a      	sxth	r2, r3
 800be0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be0e:	4313      	orrs	r3, r2
 800be10:	b21b      	sxth	r3, r3
 800be12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800be14:	89fb      	ldrh	r3, [r7, #14]
}
 800be16:	4618      	mov	r0, r3
 800be18:	371c      	adds	r7, #28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
	...

0800be24 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b084      	sub	sp, #16
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
 800be2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be2e:	2300      	movs	r3, #0
 800be30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800be3a:	2b20      	cmp	r3, #32
 800be3c:	d004      	beq.n	800be48 <USBD_StdDevReq+0x24>
 800be3e:	2b40      	cmp	r3, #64	; 0x40
 800be40:	d002      	beq.n	800be48 <USBD_StdDevReq+0x24>
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00a      	beq.n	800be5c <USBD_StdDevReq+0x38>
 800be46:	e050      	b.n	800beea <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	6839      	ldr	r1, [r7, #0]
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	4798      	blx	r3
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]
    break;
 800be5a:	e04b      	b.n	800bef4 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	785b      	ldrb	r3, [r3, #1]
 800be60:	2b09      	cmp	r3, #9
 800be62:	d83c      	bhi.n	800bede <USBD_StdDevReq+0xba>
 800be64:	a201      	add	r2, pc, #4	; (adr r2, 800be6c <USBD_StdDevReq+0x48>)
 800be66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be6a:	bf00      	nop
 800be6c:	0800bec1 	.word	0x0800bec1
 800be70:	0800bed5 	.word	0x0800bed5
 800be74:	0800bedf 	.word	0x0800bedf
 800be78:	0800becb 	.word	0x0800becb
 800be7c:	0800bedf 	.word	0x0800bedf
 800be80:	0800be9f 	.word	0x0800be9f
 800be84:	0800be95 	.word	0x0800be95
 800be88:	0800bedf 	.word	0x0800bedf
 800be8c:	0800beb7 	.word	0x0800beb7
 800be90:	0800bea9 	.word	0x0800bea9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 f9ce 	bl	800c238 <USBD_GetDescriptor>
      break;
 800be9c:	e024      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 fb5d 	bl	800c560 <USBD_SetAddress>
      break;
 800bea6:	e01f      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f000 fb9a 	bl	800c5e4 <USBD_SetConfig>
 800beb0:	4603      	mov	r3, r0
 800beb2:	73fb      	strb	r3, [r7, #15]
      break;
 800beb4:	e018      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800beb6:	6839      	ldr	r1, [r7, #0]
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f000 fc37 	bl	800c72c <USBD_GetConfig>
      break;
 800bebe:	e013      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bec0:	6839      	ldr	r1, [r7, #0]
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 fc66 	bl	800c794 <USBD_GetStatus>
      break;
 800bec8:	e00e      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800beca:	6839      	ldr	r1, [r7, #0]
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 fc94 	bl	800c7fa <USBD_SetFeature>
      break;
 800bed2:	e009      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fca3 	bl	800c822 <USBD_ClrFeature>
      break;
 800bedc:	e004      	b.n	800bee8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bede:	6839      	ldr	r1, [r7, #0]
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	f000 fcf9 	bl	800c8d8 <USBD_CtlError>
      break;
 800bee6:	bf00      	nop
    }
    break;
 800bee8:	e004      	b.n	800bef4 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fcf3 	bl	800c8d8 <USBD_CtlError>
    break;
 800bef2:	bf00      	nop
  }

  return ret;
 800bef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3710      	adds	r7, #16
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}
 800befe:	bf00      	nop

0800bf00 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	781b      	ldrb	r3, [r3, #0]
 800bf12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf16:	2b20      	cmp	r3, #32
 800bf18:	d003      	beq.n	800bf22 <USBD_StdItfReq+0x22>
 800bf1a:	2b40      	cmp	r3, #64	; 0x40
 800bf1c:	d001      	beq.n	800bf22 <USBD_StdItfReq+0x22>
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d12a      	bne.n	800bf78 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf28:	3b01      	subs	r3, #1
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d81d      	bhi.n	800bf6a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	889b      	ldrh	r3, [r3, #4]
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d813      	bhi.n	800bf60 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	4798      	blx	r3
 800bf46:	4603      	mov	r3, r0
 800bf48:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	88db      	ldrh	r3, [r3, #6]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d110      	bne.n	800bf74 <USBD_StdItfReq+0x74>
 800bf52:	7bfb      	ldrb	r3, [r7, #15]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d10d      	bne.n	800bf74 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bf58:	6878      	ldr	r0, [r7, #4]
 800bf5a:	f000 fd88 	bl	800ca6e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bf5e:	e009      	b.n	800bf74 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bf60:	6839      	ldr	r1, [r7, #0]
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fcb8 	bl	800c8d8 <USBD_CtlError>
      break;
 800bf68:	e004      	b.n	800bf74 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bf6a:	6839      	ldr	r1, [r7, #0]
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 fcb3 	bl	800c8d8 <USBD_CtlError>
      break;
 800bf72:	e000      	b.n	800bf76 <USBD_StdItfReq+0x76>
      break;
 800bf74:	bf00      	nop
    }
    break;
 800bf76:	e004      	b.n	800bf82 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bf78:	6839      	ldr	r1, [r7, #0]
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 fcac 	bl	800c8d8 <USBD_CtlError>
    break;
 800bf80:	bf00      	nop
  }

  return ret;
 800bf82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3710      	adds	r7, #16
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
 800bf94:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	889b      	ldrh	r3, [r3, #4]
 800bf9e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfa0:	683b      	ldr	r3, [r7, #0]
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfa8:	2b20      	cmp	r3, #32
 800bfaa:	d004      	beq.n	800bfb6 <USBD_StdEPReq+0x2a>
 800bfac:	2b40      	cmp	r3, #64	; 0x40
 800bfae:	d002      	beq.n	800bfb6 <USBD_StdEPReq+0x2a>
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d00a      	beq.n	800bfca <USBD_StdEPReq+0x3e>
 800bfb4:	e135      	b.n	800c222 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbc:	689b      	ldr	r3, [r3, #8]
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	4798      	blx	r3
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800bfc8:	e130      	b.n	800c22c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	785b      	ldrb	r3, [r3, #1]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d03e      	beq.n	800c050 <USBD_StdEPReq+0xc4>
 800bfd2:	2b03      	cmp	r3, #3
 800bfd4:	d002      	beq.n	800bfdc <USBD_StdEPReq+0x50>
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d077      	beq.n	800c0ca <USBD_StdEPReq+0x13e>
 800bfda:	e11c      	b.n	800c216 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfe2:	2b02      	cmp	r3, #2
 800bfe4:	d002      	beq.n	800bfec <USBD_StdEPReq+0x60>
 800bfe6:	2b03      	cmp	r3, #3
 800bfe8:	d015      	beq.n	800c016 <USBD_StdEPReq+0x8a>
 800bfea:	e02b      	b.n	800c044 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00c      	beq.n	800c00c <USBD_StdEPReq+0x80>
 800bff2:	7bbb      	ldrb	r3, [r7, #14]
 800bff4:	2b80      	cmp	r3, #128	; 0x80
 800bff6:	d009      	beq.n	800c00c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bff8:	7bbb      	ldrb	r3, [r7, #14]
 800bffa:	4619      	mov	r1, r3
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f001 f9d5 	bl	800d3ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c002:	2180      	movs	r1, #128	; 0x80
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f001 f9d1 	bl	800d3ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c00a:	e020      	b.n	800c04e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c00c:	6839      	ldr	r1, [r7, #0]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 fc62 	bl	800c8d8 <USBD_CtlError>
        break;
 800c014:	e01b      	b.n	800c04e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	885b      	ldrh	r3, [r3, #2]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d10e      	bne.n	800c03c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d00b      	beq.n	800c03c <USBD_StdEPReq+0xb0>
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b80      	cmp	r3, #128	; 0x80
 800c028:	d008      	beq.n	800c03c <USBD_StdEPReq+0xb0>
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	88db      	ldrh	r3, [r3, #6]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d104      	bne.n	800c03c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f001 f9b8 	bl	800d3ac <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f000 fd16 	bl	800ca6e <USBD_CtlSendStatus>

        break;
 800c042:	e004      	b.n	800c04e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c044:	6839      	ldr	r1, [r7, #0]
 800c046:	6878      	ldr	r0, [r7, #4]
 800c048:	f000 fc46 	bl	800c8d8 <USBD_CtlError>
        break;
 800c04c:	bf00      	nop
      }
      break;
 800c04e:	e0e7      	b.n	800c220 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c056:	2b02      	cmp	r3, #2
 800c058:	d002      	beq.n	800c060 <USBD_StdEPReq+0xd4>
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d015      	beq.n	800c08a <USBD_StdEPReq+0xfe>
 800c05e:	e02d      	b.n	800c0bc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c060:	7bbb      	ldrb	r3, [r7, #14]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d00c      	beq.n	800c080 <USBD_StdEPReq+0xf4>
 800c066:	7bbb      	ldrb	r3, [r7, #14]
 800c068:	2b80      	cmp	r3, #128	; 0x80
 800c06a:	d009      	beq.n	800c080 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c06c:	7bbb      	ldrb	r3, [r7, #14]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f001 f99b 	bl	800d3ac <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c076:	2180      	movs	r1, #128	; 0x80
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f001 f997 	bl	800d3ac <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c07e:	e023      	b.n	800c0c8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c080:	6839      	ldr	r1, [r7, #0]
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 fc28 	bl	800c8d8 <USBD_CtlError>
        break;
 800c088:	e01e      	b.n	800c0c8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	885b      	ldrh	r3, [r3, #2]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d119      	bne.n	800c0c6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c092:	7bbb      	ldrb	r3, [r7, #14]
 800c094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c09c:	7bbb      	ldrb	r3, [r7, #14]
 800c09e:	4619      	mov	r1, r3
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f001 f9a2 	bl	800d3ea <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 fce1 	bl	800ca6e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0b2:	689b      	ldr	r3, [r3, #8]
 800c0b4:	6839      	ldr	r1, [r7, #0]
 800c0b6:	6878      	ldr	r0, [r7, #4]
 800c0b8:	4798      	blx	r3
        }
        break;
 800c0ba:	e004      	b.n	800c0c6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c0bc:	6839      	ldr	r1, [r7, #0]
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f000 fc0a 	bl	800c8d8 <USBD_CtlError>
        break;
 800c0c4:	e000      	b.n	800c0c8 <USBD_StdEPReq+0x13c>
        break;
 800c0c6:	bf00      	nop
      }
      break;
 800c0c8:	e0aa      	b.n	800c220 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c0d0:	2b02      	cmp	r3, #2
 800c0d2:	d002      	beq.n	800c0da <USBD_StdEPReq+0x14e>
 800c0d4:	2b03      	cmp	r3, #3
 800c0d6:	d032      	beq.n	800c13e <USBD_StdEPReq+0x1b2>
 800c0d8:	e097      	b.n	800c20a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d007      	beq.n	800c0f0 <USBD_StdEPReq+0x164>
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	2b80      	cmp	r3, #128	; 0x80
 800c0e4:	d004      	beq.n	800c0f0 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c0e6:	6839      	ldr	r1, [r7, #0]
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 fbf5 	bl	800c8d8 <USBD_CtlError>
          break;
 800c0ee:	e091      	b.n	800c214 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	da0b      	bge.n	800c110 <USBD_StdEPReq+0x184>
 800c0f8:	7bbb      	ldrb	r3, [r7, #14]
 800c0fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c0fe:	4613      	mov	r3, r2
 800c100:	009b      	lsls	r3, r3, #2
 800c102:	4413      	add	r3, r2
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	3310      	adds	r3, #16
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	4413      	add	r3, r2
 800c10c:	3304      	adds	r3, #4
 800c10e:	e00b      	b.n	800c128 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c110:	7bbb      	ldrb	r3, [r7, #14]
 800c112:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c116:	4613      	mov	r3, r2
 800c118:	009b      	lsls	r3, r3, #2
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	4413      	add	r3, r2
 800c126:	3304      	adds	r3, #4
 800c128:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	2200      	movs	r2, #0
 800c12e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2202      	movs	r2, #2
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fc3f 	bl	800c9ba <USBD_CtlSendData>
        break;
 800c13c:	e06a      	b.n	800c214 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c13e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c142:	2b00      	cmp	r3, #0
 800c144:	da11      	bge.n	800c16a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c146:	7bbb      	ldrb	r3, [r7, #14]
 800c148:	f003 020f 	and.w	r2, r3, #15
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	4613      	mov	r3, r2
 800c150:	009b      	lsls	r3, r3, #2
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	440b      	add	r3, r1
 800c158:	3324      	adds	r3, #36	; 0x24
 800c15a:	881b      	ldrh	r3, [r3, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d117      	bne.n	800c190 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fbb8 	bl	800c8d8 <USBD_CtlError>
            break;
 800c168:	e054      	b.n	800c214 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	f003 020f 	and.w	r2, r3, #15
 800c170:	6879      	ldr	r1, [r7, #4]
 800c172:	4613      	mov	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	4413      	add	r3, r2
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	440b      	add	r3, r1
 800c17c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c180:	881b      	ldrh	r3, [r3, #0]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d104      	bne.n	800c190 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 fba5 	bl	800c8d8 <USBD_CtlError>
            break;
 800c18e:	e041      	b.n	800c214 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c190:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c194:	2b00      	cmp	r3, #0
 800c196:	da0b      	bge.n	800c1b0 <USBD_StdEPReq+0x224>
 800c198:	7bbb      	ldrb	r3, [r7, #14]
 800c19a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c19e:	4613      	mov	r3, r2
 800c1a0:	009b      	lsls	r3, r3, #2
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	3310      	adds	r3, #16
 800c1a8:	687a      	ldr	r2, [r7, #4]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	e00b      	b.n	800c1c8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c1b0:	7bbb      	ldrb	r3, [r7, #14]
 800c1b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1b6:	4613      	mov	r3, r2
 800c1b8:	009b      	lsls	r3, r3, #2
 800c1ba:	4413      	add	r3, r2
 800c1bc:	009b      	lsls	r3, r3, #2
 800c1be:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	3304      	adds	r3, #4
 800c1c8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1ca:	7bbb      	ldrb	r3, [r7, #14]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d002      	beq.n	800c1d6 <USBD_StdEPReq+0x24a>
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	2b80      	cmp	r3, #128	; 0x80
 800c1d4:	d103      	bne.n	800c1de <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]
 800c1dc:	e00e      	b.n	800c1fc <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 f920 	bl	800d428 <USBD_LL_IsStallEP>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d003      	beq.n	800c1f6 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c1ee:	68bb      	ldr	r3, [r7, #8]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	601a      	str	r2, [r3, #0]
 800c1f4:	e002      	b.n	800c1fc <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1fc:	68bb      	ldr	r3, [r7, #8]
 800c1fe:	2202      	movs	r2, #2
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fbd9 	bl	800c9ba <USBD_CtlSendData>
          break;
 800c208:	e004      	b.n	800c214 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 fb63 	bl	800c8d8 <USBD_CtlError>
        break;
 800c212:	bf00      	nop
      }
      break;
 800c214:	e004      	b.n	800c220 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c216:	6839      	ldr	r1, [r7, #0]
 800c218:	6878      	ldr	r0, [r7, #4]
 800c21a:	f000 fb5d 	bl	800c8d8 <USBD_CtlError>
      break;
 800c21e:	bf00      	nop
    }
    break;
 800c220:	e004      	b.n	800c22c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c222:	6839      	ldr	r1, [r7, #0]
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f000 fb57 	bl	800c8d8 <USBD_CtlError>
    break;
 800c22a:	bf00      	nop
  }

  return ret;
 800c22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3710      	adds	r7, #16
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
	...

0800c238 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b084      	sub	sp, #16
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
 800c240:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c242:	2300      	movs	r3, #0
 800c244:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c246:	2300      	movs	r3, #0
 800c248:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c24a:	2300      	movs	r3, #0
 800c24c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	885b      	ldrh	r3, [r3, #2]
 800c252:	0a1b      	lsrs	r3, r3, #8
 800c254:	b29b      	uxth	r3, r3
 800c256:	3b01      	subs	r3, #1
 800c258:	2b0e      	cmp	r3, #14
 800c25a:	f200 8152 	bhi.w	800c502 <USBD_GetDescriptor+0x2ca>
 800c25e:	a201      	add	r2, pc, #4	; (adr r2, 800c264 <USBD_GetDescriptor+0x2c>)
 800c260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c264:	0800c2d5 	.word	0x0800c2d5
 800c268:	0800c2ed 	.word	0x0800c2ed
 800c26c:	0800c32d 	.word	0x0800c32d
 800c270:	0800c503 	.word	0x0800c503
 800c274:	0800c503 	.word	0x0800c503
 800c278:	0800c4a3 	.word	0x0800c4a3
 800c27c:	0800c4cf 	.word	0x0800c4cf
 800c280:	0800c503 	.word	0x0800c503
 800c284:	0800c503 	.word	0x0800c503
 800c288:	0800c503 	.word	0x0800c503
 800c28c:	0800c503 	.word	0x0800c503
 800c290:	0800c503 	.word	0x0800c503
 800c294:	0800c503 	.word	0x0800c503
 800c298:	0800c503 	.word	0x0800c503
 800c29c:	0800c2a1 	.word	0x0800c2a1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2a6:	69db      	ldr	r3, [r3, #28]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d00b      	beq.n	800c2c4 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2b2:	69db      	ldr	r3, [r3, #28]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	7c12      	ldrb	r2, [r2, #16]
 800c2b8:	f107 0108 	add.w	r1, r7, #8
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
 800c2c0:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c2c2:	e126      	b.n	800c512 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c2c4:	6839      	ldr	r1, [r7, #0]
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 fb06 	bl	800c8d8 <USBD_CtlError>
      err++;
 800c2cc:	7afb      	ldrb	r3, [r7, #11]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	72fb      	strb	r3, [r7, #11]
    break;
 800c2d2:	e11e      	b.n	800c512 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	687a      	ldr	r2, [r7, #4]
 800c2de:	7c12      	ldrb	r2, [r2, #16]
 800c2e0:	f107 0108 	add.w	r1, r7, #8
 800c2e4:	4610      	mov	r0, r2
 800c2e6:	4798      	blx	r3
 800c2e8:	60f8      	str	r0, [r7, #12]
    break;
 800c2ea:	e112      	b.n	800c512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	7c1b      	ldrb	r3, [r3, #16]
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	d10d      	bne.n	800c310 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2fc:	f107 0208 	add.w	r2, r7, #8
 800c300:	4610      	mov	r0, r2
 800c302:	4798      	blx	r3
 800c304:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3301      	adds	r3, #1
 800c30a:	2202      	movs	r2, #2
 800c30c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c30e:	e100      	b.n	800c512 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c318:	f107 0208 	add.w	r2, r7, #8
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
 800c320:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3301      	adds	r3, #1
 800c326:	2202      	movs	r2, #2
 800c328:	701a      	strb	r2, [r3, #0]
    break;
 800c32a:	e0f2      	b.n	800c512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c32c:	683b      	ldr	r3, [r7, #0]
 800c32e:	885b      	ldrh	r3, [r3, #2]
 800c330:	b2db      	uxtb	r3, r3
 800c332:	2b05      	cmp	r3, #5
 800c334:	f200 80ac 	bhi.w	800c490 <USBD_GetDescriptor+0x258>
 800c338:	a201      	add	r2, pc, #4	; (adr r2, 800c340 <USBD_GetDescriptor+0x108>)
 800c33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c33e:	bf00      	nop
 800c340:	0800c359 	.word	0x0800c359
 800c344:	0800c38d 	.word	0x0800c38d
 800c348:	0800c3c1 	.word	0x0800c3c1
 800c34c:	0800c3f5 	.word	0x0800c3f5
 800c350:	0800c429 	.word	0x0800c429
 800c354:	0800c45d 	.word	0x0800c45d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c35e:	685b      	ldr	r3, [r3, #4]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d00b      	beq.n	800c37c <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c36a:	685b      	ldr	r3, [r3, #4]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	7c12      	ldrb	r2, [r2, #16]
 800c370:	f107 0108 	add.w	r1, r7, #8
 800c374:	4610      	mov	r0, r2
 800c376:	4798      	blx	r3
 800c378:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c37a:	e091      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c37c:	6839      	ldr	r1, [r7, #0]
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	f000 faaa 	bl	800c8d8 <USBD_CtlError>
        err++;
 800c384:	7afb      	ldrb	r3, [r7, #11]
 800c386:	3301      	adds	r3, #1
 800c388:	72fb      	strb	r3, [r7, #11]
      break;
 800c38a:	e089      	b.n	800c4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00b      	beq.n	800c3b0 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	7c12      	ldrb	r2, [r2, #16]
 800c3a4:	f107 0108 	add.w	r1, r7, #8
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
 800c3ac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3ae:	e077      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 fa90 	bl	800c8d8 <USBD_CtlError>
        err++;
 800c3b8:	7afb      	ldrb	r3, [r7, #11]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	72fb      	strb	r3, [r7, #11]
      break;
 800c3be:	e06f      	b.n	800c4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3c6:	68db      	ldr	r3, [r3, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d00b      	beq.n	800c3e4 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3d2:	68db      	ldr	r3, [r3, #12]
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	7c12      	ldrb	r2, [r2, #16]
 800c3d8:	f107 0108 	add.w	r1, r7, #8
 800c3dc:	4610      	mov	r0, r2
 800c3de:	4798      	blx	r3
 800c3e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3e2:	e05d      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 fa76 	bl	800c8d8 <USBD_CtlError>
        err++;
 800c3ec:	7afb      	ldrb	r3, [r7, #11]
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	72fb      	strb	r3, [r7, #11]
      break;
 800c3f2:	e055      	b.n	800c4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d00b      	beq.n	800c418 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	7c12      	ldrb	r2, [r2, #16]
 800c40c:	f107 0108 	add.w	r1, r7, #8
 800c410:	4610      	mov	r0, r2
 800c412:	4798      	blx	r3
 800c414:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c416:	e043      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fa5c 	bl	800c8d8 <USBD_CtlError>
        err++;
 800c420:	7afb      	ldrb	r3, [r7, #11]
 800c422:	3301      	adds	r3, #1
 800c424:	72fb      	strb	r3, [r7, #11]
      break;
 800c426:	e03b      	b.n	800c4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c42e:	695b      	ldr	r3, [r3, #20]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00b      	beq.n	800c44c <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c44a:	e029      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fa42 	bl	800c8d8 <USBD_CtlError>
        err++;
 800c454:	7afb      	ldrb	r3, [r7, #11]
 800c456:	3301      	adds	r3, #1
 800c458:	72fb      	strb	r3, [r7, #11]
      break;
 800c45a:	e021      	b.n	800c4a0 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c462:	699b      	ldr	r3, [r3, #24]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00b      	beq.n	800c480 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c46e:	699b      	ldr	r3, [r3, #24]
 800c470:	687a      	ldr	r2, [r7, #4]
 800c472:	7c12      	ldrb	r2, [r2, #16]
 800c474:	f107 0108 	add.w	r1, r7, #8
 800c478:	4610      	mov	r0, r2
 800c47a:	4798      	blx	r3
 800c47c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c47e:	e00f      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c480:	6839      	ldr	r1, [r7, #0]
 800c482:	6878      	ldr	r0, [r7, #4]
 800c484:	f000 fa28 	bl	800c8d8 <USBD_CtlError>
        err++;
 800c488:	7afb      	ldrb	r3, [r7, #11]
 800c48a:	3301      	adds	r3, #1
 800c48c:	72fb      	strb	r3, [r7, #11]
      break;
 800c48e:	e007      	b.n	800c4a0 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f000 fa20 	bl	800c8d8 <USBD_CtlError>
      err++;
 800c498:	7afb      	ldrb	r3, [r7, #11]
 800c49a:	3301      	adds	r3, #1
 800c49c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c49e:	bf00      	nop
    }
    break;
 800c4a0:	e037      	b.n	800c512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	7c1b      	ldrb	r3, [r3, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4b2:	f107 0208 	add.w	r2, r7, #8
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	4798      	blx	r3
 800c4ba:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c4bc:	e029      	b.n	800c512 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fa09 	bl	800c8d8 <USBD_CtlError>
      err++;
 800c4c6:	7afb      	ldrb	r3, [r7, #11]
 800c4c8:	3301      	adds	r3, #1
 800c4ca:	72fb      	strb	r3, [r7, #11]
    break;
 800c4cc:	e021      	b.n	800c512 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	7c1b      	ldrb	r3, [r3, #16]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10d      	bne.n	800c4f2 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4de:	f107 0208 	add.w	r2, r7, #8
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	4798      	blx	r3
 800c4e6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3301      	adds	r3, #1
 800c4ec:	2207      	movs	r2, #7
 800c4ee:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c4f0:	e00f      	b.n	800c512 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c4f2:	6839      	ldr	r1, [r7, #0]
 800c4f4:	6878      	ldr	r0, [r7, #4]
 800c4f6:	f000 f9ef 	bl	800c8d8 <USBD_CtlError>
      err++;
 800c4fa:	7afb      	ldrb	r3, [r7, #11]
 800c4fc:	3301      	adds	r3, #1
 800c4fe:	72fb      	strb	r3, [r7, #11]
    break;
 800c500:	e007      	b.n	800c512 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 f9e7 	bl	800c8d8 <USBD_CtlError>
    err++;
 800c50a:	7afb      	ldrb	r3, [r7, #11]
 800c50c:	3301      	adds	r3, #1
 800c50e:	72fb      	strb	r3, [r7, #11]
    break;
 800c510:	bf00      	nop
  }

  if (err != 0U)
 800c512:	7afb      	ldrb	r3, [r7, #11]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d11e      	bne.n	800c556 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	88db      	ldrh	r3, [r3, #6]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d016      	beq.n	800c54e <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c520:	893b      	ldrh	r3, [r7, #8]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00e      	beq.n	800c544 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	88da      	ldrh	r2, [r3, #6]
 800c52a:	893b      	ldrh	r3, [r7, #8]
 800c52c:	4293      	cmp	r3, r2
 800c52e:	bf28      	it	cs
 800c530:	4613      	movcs	r3, r2
 800c532:	b29b      	uxth	r3, r3
 800c534:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c536:	893b      	ldrh	r3, [r7, #8]
 800c538:	461a      	mov	r2, r3
 800c53a:	68f9      	ldr	r1, [r7, #12]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fa3c 	bl	800c9ba <USBD_CtlSendData>
 800c542:	e009      	b.n	800c558 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 f9c6 	bl	800c8d8 <USBD_CtlError>
 800c54c:	e004      	b.n	800c558 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fa8d 	bl	800ca6e <USBD_CtlSendStatus>
 800c554:	e000      	b.n	800c558 <USBD_GetDescriptor+0x320>
    return;
 800c556:	bf00      	nop
    }
  }
}
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bd80      	pop	{r7, pc}
 800c55e:	bf00      	nop

0800c560 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c560:	b580      	push	{r7, lr}
 800c562:	b084      	sub	sp, #16
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	889b      	ldrh	r3, [r3, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d130      	bne.n	800c5d4 <USBD_SetAddress+0x74>
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	88db      	ldrh	r3, [r3, #6]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d12c      	bne.n	800c5d4 <USBD_SetAddress+0x74>
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	885b      	ldrh	r3, [r3, #2]
 800c57e:	2b7f      	cmp	r3, #127	; 0x7f
 800c580:	d828      	bhi.n	800c5d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	885b      	ldrh	r3, [r3, #2]
 800c586:	b2db      	uxtb	r3, r3
 800c588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c58c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c594:	2b03      	cmp	r3, #3
 800c596:	d104      	bne.n	800c5a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c598:	6839      	ldr	r1, [r7, #0]
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f000 f99c 	bl	800c8d8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5a0:	e01c      	b.n	800c5dc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	7bfa      	ldrb	r2, [r7, #15]
 800c5a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
 800c5ac:	4619      	mov	r1, r3
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 ff66 	bl	800d480 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f000 fa5a 	bl	800ca6e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5ba:	7bfb      	ldrb	r3, [r7, #15]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d004      	beq.n	800c5ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2202      	movs	r2, #2
 800c5c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c8:	e008      	b.n	800c5dc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d2:	e003      	b.n	800c5dc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5d4:	6839      	ldr	r1, [r7, #0]
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f97e 	bl	800c8d8 <USBD_CtlError>
  }
}
 800c5dc:	bf00      	nop
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	885b      	ldrh	r3, [r3, #2]
 800c5f6:	b2da      	uxtb	r2, r3
 800c5f8:	4b4b      	ldr	r3, [pc, #300]	; (800c728 <USBD_SetConfig+0x144>)
 800c5fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5fc:	4b4a      	ldr	r3, [pc, #296]	; (800c728 <USBD_SetConfig+0x144>)
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	2b01      	cmp	r3, #1
 800c602:	d905      	bls.n	800c610 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c604:	6839      	ldr	r1, [r7, #0]
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f966 	bl	800c8d8 <USBD_CtlError>
    return USBD_FAIL;
 800c60c:	2303      	movs	r3, #3
 800c60e:	e087      	b.n	800c720 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c616:	2b02      	cmp	r3, #2
 800c618:	d002      	beq.n	800c620 <USBD_SetConfig+0x3c>
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d025      	beq.n	800c66a <USBD_SetConfig+0x86>
 800c61e:	e071      	b.n	800c704 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c620:	4b41      	ldr	r3, [pc, #260]	; (800c728 <USBD_SetConfig+0x144>)
 800c622:	781b      	ldrb	r3, [r3, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d01c      	beq.n	800c662 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c628:	4b3f      	ldr	r3, [pc, #252]	; (800c728 <USBD_SetConfig+0x144>)
 800c62a:	781b      	ldrb	r3, [r3, #0]
 800c62c:	461a      	mov	r2, r3
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c632:	4b3d      	ldr	r3, [pc, #244]	; (800c728 <USBD_SetConfig+0x144>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	4619      	mov	r1, r3
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f7ff f97d 	bl	800b938 <USBD_SetClassConfig>
 800c63e:	4603      	mov	r3, r0
 800c640:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c642:	7bfb      	ldrb	r3, [r7, #15]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d004      	beq.n	800c652 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 f944 	bl	800c8d8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c650:	e065      	b.n	800c71e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f000 fa0b 	bl	800ca6e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2203      	movs	r2, #3
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c660:	e05d      	b.n	800c71e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fa03 	bl	800ca6e <USBD_CtlSendStatus>
    break;
 800c668:	e059      	b.n	800c71e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c66a:	4b2f      	ldr	r3, [pc, #188]	; (800c728 <USBD_SetConfig+0x144>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d112      	bne.n	800c698 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2202      	movs	r2, #2
 800c676:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c67a:	4b2b      	ldr	r3, [pc, #172]	; (800c728 <USBD_SetConfig+0x144>)
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c684:	4b28      	ldr	r3, [pc, #160]	; (800c728 <USBD_SetConfig+0x144>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f7ff f970 	bl	800b970 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f9ec 	bl	800ca6e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c696:	e042      	b.n	800c71e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c698:	4b23      	ldr	r3, [pc, #140]	; (800c728 <USBD_SetConfig+0x144>)
 800c69a:	781b      	ldrb	r3, [r3, #0]
 800c69c:	461a      	mov	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	d02a      	beq.n	800c6fc <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	685b      	ldr	r3, [r3, #4]
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f7ff f95e 	bl	800b970 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c6b4:	4b1c      	ldr	r3, [pc, #112]	; (800c728 <USBD_SetConfig+0x144>)
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6be:	4b1a      	ldr	r3, [pc, #104]	; (800c728 <USBD_SetConfig+0x144>)
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	4619      	mov	r1, r3
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f7ff f937 	bl	800b938 <USBD_SetClassConfig>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c6ce:	7bfb      	ldrb	r3, [r7, #15]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00f      	beq.n	800c6f4 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c6d4:	6839      	ldr	r1, [r7, #0]
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 f8fe 	bl	800c8d8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	b2db      	uxtb	r3, r3
 800c6e2:	4619      	mov	r1, r3
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7ff f943 	bl	800b970 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2202      	movs	r2, #2
 800c6ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c6f2:	e014      	b.n	800c71e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f9ba 	bl	800ca6e <USBD_CtlSendStatus>
    break;
 800c6fa:	e010      	b.n	800c71e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f9b6 	bl	800ca6e <USBD_CtlSendStatus>
    break;
 800c702:	e00c      	b.n	800c71e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c704:	6839      	ldr	r1, [r7, #0]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 f8e6 	bl	800c8d8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c70c:	4b06      	ldr	r3, [pc, #24]	; (800c728 <USBD_SetConfig+0x144>)
 800c70e:	781b      	ldrb	r3, [r3, #0]
 800c710:	4619      	mov	r1, r3
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f7ff f92c 	bl	800b970 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c718:	2303      	movs	r3, #3
 800c71a:	73fb      	strb	r3, [r7, #15]
    break;
 800c71c:	bf00      	nop
  }

  return ret;
 800c71e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c720:	4618      	mov	r0, r3
 800c722:	3710      	adds	r7, #16
 800c724:	46bd      	mov	sp, r7
 800c726:	bd80      	pop	{r7, pc}
 800c728:	200003a5 	.word	0x200003a5

0800c72c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	88db      	ldrh	r3, [r3, #6]
 800c73a:	2b01      	cmp	r3, #1
 800c73c:	d004      	beq.n	800c748 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c73e:	6839      	ldr	r1, [r7, #0]
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f000 f8c9 	bl	800c8d8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c746:	e021      	b.n	800c78c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c74e:	2b01      	cmp	r3, #1
 800c750:	db17      	blt.n	800c782 <USBD_GetConfig+0x56>
 800c752:	2b02      	cmp	r3, #2
 800c754:	dd02      	ble.n	800c75c <USBD_GetConfig+0x30>
 800c756:	2b03      	cmp	r3, #3
 800c758:	d00b      	beq.n	800c772 <USBD_GetConfig+0x46>
 800c75a:	e012      	b.n	800c782 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3308      	adds	r3, #8
 800c766:	2201      	movs	r2, #1
 800c768:	4619      	mov	r1, r3
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f925 	bl	800c9ba <USBD_CtlSendData>
      break;
 800c770:	e00c      	b.n	800c78c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	3304      	adds	r3, #4
 800c776:	2201      	movs	r2, #1
 800c778:	4619      	mov	r1, r3
 800c77a:	6878      	ldr	r0, [r7, #4]
 800c77c:	f000 f91d 	bl	800c9ba <USBD_CtlSendData>
      break;
 800c780:	e004      	b.n	800c78c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c782:	6839      	ldr	r1, [r7, #0]
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f8a7 	bl	800c8d8 <USBD_CtlError>
      break;
 800c78a:	bf00      	nop
}
 800c78c:	bf00      	nop
 800c78e:	3708      	adds	r7, #8
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b082      	sub	sp, #8
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7a4:	3b01      	subs	r3, #1
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d81e      	bhi.n	800c7e8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	88db      	ldrh	r3, [r3, #6]
 800c7ae:	2b02      	cmp	r3, #2
 800c7b0:	d004      	beq.n	800c7bc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f000 f88f 	bl	800c8d8 <USBD_CtlError>
      break;
 800c7ba:	e01a      	b.n	800c7f2 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d005      	beq.n	800c7d8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	f043 0202 	orr.w	r2, r3, #2
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	330c      	adds	r3, #12
 800c7dc:	2202      	movs	r2, #2
 800c7de:	4619      	mov	r1, r3
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f8ea 	bl	800c9ba <USBD_CtlSendData>
    break;
 800c7e6:	e004      	b.n	800c7f2 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 f874 	bl	800c8d8 <USBD_CtlError>
    break;
 800c7f0:	bf00      	nop
  }
}
 800c7f2:	bf00      	nop
 800c7f4:	3708      	adds	r7, #8
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	6078      	str	r0, [r7, #4]
 800c802:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c804:	683b      	ldr	r3, [r7, #0]
 800c806:	885b      	ldrh	r3, [r3, #2]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d106      	bne.n	800c81a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2201      	movs	r2, #1
 800c810:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f000 f92a 	bl	800ca6e <USBD_CtlSendStatus>
  }
}
 800c81a:	bf00      	nop
 800c81c:	3708      	adds	r7, #8
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}

0800c822 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c822:	b580      	push	{r7, lr}
 800c824:	b082      	sub	sp, #8
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
 800c82a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c832:	3b01      	subs	r3, #1
 800c834:	2b02      	cmp	r3, #2
 800c836:	d80b      	bhi.n	800c850 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	885b      	ldrh	r3, [r3, #2]
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d10c      	bne.n	800c85a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2200      	movs	r2, #0
 800c844:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 f910 	bl	800ca6e <USBD_CtlSendStatus>
      }
      break;
 800c84e:	e004      	b.n	800c85a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c850:	6839      	ldr	r1, [r7, #0]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f840 	bl	800c8d8 <USBD_CtlError>
      break;
 800c858:	e000      	b.n	800c85c <USBD_ClrFeature+0x3a>
      break;
 800c85a:	bf00      	nop
  }
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	781a      	ldrb	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	3301      	adds	r3, #1
 800c87e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	3301      	adds	r3, #1
 800c88c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f7ff faa9 	bl	800bde6 <SWAPBYTE>
 800c894:	4603      	mov	r3, r0
 800c896:	461a      	mov	r2, r3
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	3301      	adds	r3, #1
 800c8a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7ff fa9c 	bl	800bde6 <SWAPBYTE>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff fa8f 	bl	800bde6 <SWAPBYTE>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	80da      	strh	r2, [r3, #6]
}
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b082      	sub	sp, #8
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8e2:	2180      	movs	r1, #128	; 0x80
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 fd61 	bl	800d3ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 fd5d 	bl	800d3ac <USBD_LL_StallEP>
}
 800c8f2:	bf00      	nop
 800c8f4:	3708      	adds	r7, #8
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b086      	sub	sp, #24
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	60f8      	str	r0, [r7, #12]
 800c902:	60b9      	str	r1, [r7, #8]
 800c904:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c906:	2300      	movs	r3, #0
 800c908:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d036      	beq.n	800c97e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c914:	6938      	ldr	r0, [r7, #16]
 800c916:	f000 f836 	bl	800c986 <USBD_GetLen>
 800c91a:	4603      	mov	r3, r0
 800c91c:	3301      	adds	r3, #1
 800c91e:	b29b      	uxth	r3, r3
 800c920:	005b      	lsls	r3, r3, #1
 800c922:	b29a      	uxth	r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c928:	7dfb      	ldrb	r3, [r7, #23]
 800c92a:	68ba      	ldr	r2, [r7, #8]
 800c92c:	4413      	add	r3, r2
 800c92e:	687a      	ldr	r2, [r7, #4]
 800c930:	7812      	ldrb	r2, [r2, #0]
 800c932:	701a      	strb	r2, [r3, #0]
  idx++;
 800c934:	7dfb      	ldrb	r3, [r7, #23]
 800c936:	3301      	adds	r3, #1
 800c938:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c93a:	7dfb      	ldrb	r3, [r7, #23]
 800c93c:	68ba      	ldr	r2, [r7, #8]
 800c93e:	4413      	add	r3, r2
 800c940:	2203      	movs	r2, #3
 800c942:	701a      	strb	r2, [r3, #0]
  idx++;
 800c944:	7dfb      	ldrb	r3, [r7, #23]
 800c946:	3301      	adds	r3, #1
 800c948:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c94a:	e013      	b.n	800c974 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	68ba      	ldr	r2, [r7, #8]
 800c950:	4413      	add	r3, r2
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	7812      	ldrb	r2, [r2, #0]
 800c956:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	3301      	adds	r3, #1
 800c95c:	613b      	str	r3, [r7, #16]
    idx++;
 800c95e:	7dfb      	ldrb	r3, [r7, #23]
 800c960:	3301      	adds	r3, #1
 800c962:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c964:	7dfb      	ldrb	r3, [r7, #23]
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	4413      	add	r3, r2
 800c96a:	2200      	movs	r2, #0
 800c96c:	701a      	strb	r2, [r3, #0]
    idx++;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
 800c970:	3301      	adds	r3, #1
 800c972:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e7      	bne.n	800c94c <USBD_GetString+0x52>
 800c97c:	e000      	b.n	800c980 <USBD_GetString+0x86>
    return;
 800c97e:	bf00      	nop
  }
}
 800c980:	3718      	adds	r7, #24
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}

0800c986 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c986:	b480      	push	{r7}
 800c988:	b085      	sub	sp, #20
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c996:	e005      	b.n	800c9a4 <USBD_GetLen+0x1e>
  {
    len++;
 800c998:	7bfb      	ldrb	r3, [r7, #15]
 800c99a:	3301      	adds	r3, #1
 800c99c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c99e:	68bb      	ldr	r3, [r7, #8]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9a4:	68bb      	ldr	r3, [r7, #8]
 800c9a6:	781b      	ldrb	r3, [r3, #0]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d1f5      	bne.n	800c998 <USBD_GetLen+0x12>
  }

  return len;
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3714      	adds	r7, #20
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr

0800c9ba <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9ba:	b580      	push	{r7, lr}
 800c9bc:	b084      	sub	sp, #16
 800c9be:	af00      	add	r7, sp, #0
 800c9c0:	60f8      	str	r0, [r7, #12]
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	687a      	ldr	r2, [r7, #4]
 800c9d2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	68ba      	ldr	r2, [r7, #8]
 800c9de:	2100      	movs	r1, #0
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 fd6c 	bl	800d4be <USBD_LL_Transmit>

  return USBD_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b084      	sub	sp, #16
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	68ba      	ldr	r2, [r7, #8]
 800ca00:	2100      	movs	r1, #0
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f000 fd5b 	bl	800d4be <USBD_LL_Transmit>

  return USBD_OK;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}

0800ca12 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca12:	b580      	push	{r7, lr}
 800ca14:	b084      	sub	sp, #16
 800ca16:	af00      	add	r7, sp, #0
 800ca18:	60f8      	str	r0, [r7, #12]
 800ca1a:	60b9      	str	r1, [r7, #8]
 800ca1c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	2203      	movs	r2, #3
 800ca22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	687a      	ldr	r2, [r7, #4]
 800ca2a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	687a      	ldr	r2, [r7, #4]
 800ca32:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	2100      	movs	r1, #0
 800ca3c:	68f8      	ldr	r0, [r7, #12]
 800ca3e:	f000 fd5f 	bl	800d500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}

0800ca4c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	2100      	movs	r1, #0
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f000 fd4e 	bl	800d500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca64:	2300      	movs	r3, #0
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3710      	adds	r7, #16
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2204      	movs	r2, #4
 800ca7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ca7e:	2300      	movs	r3, #0
 800ca80:	2200      	movs	r2, #0
 800ca82:	2100      	movs	r1, #0
 800ca84:	6878      	ldr	r0, [r7, #4]
 800ca86:	f000 fd1a 	bl	800d4be <USBD_LL_Transmit>

  return USBD_OK;
 800ca8a:	2300      	movs	r3, #0
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3708      	adds	r7, #8
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b082      	sub	sp, #8
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2205      	movs	r2, #5
 800caa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800caa4:	2300      	movs	r3, #0
 800caa6:	2200      	movs	r2, #0
 800caa8:	2100      	movs	r1, #0
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 fd28 	bl	800d500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b087      	sub	sp, #28
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	60b9      	str	r1, [r7, #8]
 800cac6:	4613      	mov	r3, r2
 800cac8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800caca:	2301      	movs	r3, #1
 800cacc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cad2:	4b1f      	ldr	r3, [pc, #124]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cad4:	7a5b      	ldrb	r3, [r3, #9]
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d131      	bne.n	800cb40 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cadc:	4b1c      	ldr	r3, [pc, #112]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cade:	7a5b      	ldrb	r3, [r3, #9]
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	461a      	mov	r2, r3
 800cae4:	4b1a      	ldr	r3, [pc, #104]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cae6:	2100      	movs	r1, #0
 800cae8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800caea:	4b19      	ldr	r3, [pc, #100]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800caec:	7a5b      	ldrb	r3, [r3, #9]
 800caee:	b2db      	uxtb	r3, r3
 800caf0:	4a17      	ldr	r2, [pc, #92]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	4413      	add	r3, r2
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cafa:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cafc:	7a5b      	ldrb	r3, [r3, #9]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	461a      	mov	r2, r3
 800cb02:	4b13      	ldr	r3, [pc, #76]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cb04:	4413      	add	r3, r2
 800cb06:	79fa      	ldrb	r2, [r7, #7]
 800cb08:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cb0a:	4b11      	ldr	r3, [pc, #68]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cb0c:	7a5b      	ldrb	r3, [r3, #9]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	1c5a      	adds	r2, r3, #1
 800cb12:	b2d1      	uxtb	r1, r2
 800cb14:	4a0e      	ldr	r2, [pc, #56]	; (800cb50 <FATFS_LinkDriverEx+0x94>)
 800cb16:	7251      	strb	r1, [r2, #9]
 800cb18:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cb1a:	7dbb      	ldrb	r3, [r7, #22]
 800cb1c:	3330      	adds	r3, #48	; 0x30
 800cb1e:	b2da      	uxtb	r2, r3
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cb24:	68bb      	ldr	r3, [r7, #8]
 800cb26:	3301      	adds	r3, #1
 800cb28:	223a      	movs	r2, #58	; 0x3a
 800cb2a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	3302      	adds	r3, #2
 800cb30:	222f      	movs	r2, #47	; 0x2f
 800cb32:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	3303      	adds	r3, #3
 800cb38:	2200      	movs	r2, #0
 800cb3a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	371c      	adds	r7, #28
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop
 800cb50:	200003a8 	.word	0x200003a8

0800cb54 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
 800cb5c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800cb5e:	2200      	movs	r2, #0
 800cb60:	6839      	ldr	r1, [r7, #0]
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f7ff ffaa 	bl	800cabc <FATFS_LinkDriverEx>
 800cb68:	4603      	mov	r3, r0
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb78:	2200      	movs	r2, #0
 800cb7a:	4912      	ldr	r1, [pc, #72]	; (800cbc4 <MX_USB_DEVICE_Init+0x50>)
 800cb7c:	4812      	ldr	r0, [pc, #72]	; (800cbc8 <MX_USB_DEVICE_Init+0x54>)
 800cb7e:	f7fe fe6d 	bl	800b85c <USBD_Init>
 800cb82:	4603      	mov	r3, r0
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d001      	beq.n	800cb8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb88:	f7f6 fa6c 	bl	8003064 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb8c:	490f      	ldr	r1, [pc, #60]	; (800cbcc <MX_USB_DEVICE_Init+0x58>)
 800cb8e:	480e      	ldr	r0, [pc, #56]	; (800cbc8 <MX_USB_DEVICE_Init+0x54>)
 800cb90:	f7fe fe9a 	bl	800b8c8 <USBD_RegisterClass>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb9a:	f7f6 fa63 	bl	8003064 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb9e:	490c      	ldr	r1, [pc, #48]	; (800cbd0 <MX_USB_DEVICE_Init+0x5c>)
 800cba0:	4809      	ldr	r0, [pc, #36]	; (800cbc8 <MX_USB_DEVICE_Init+0x54>)
 800cba2:	f7fe fdbf 	bl	800b724 <USBD_CDC_RegisterInterface>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cbac:	f7f6 fa5a 	bl	8003064 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cbb0:	4805      	ldr	r0, [pc, #20]	; (800cbc8 <MX_USB_DEVICE_Init+0x54>)
 800cbb2:	f7fe feaa 	bl	800b90a <USBD_Start>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cbbc:	f7f6 fa52 	bl	8003064 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cbc0:	bf00      	nop
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	20000150 	.word	0x20000150
 800cbc8:	20000a54 	.word	0x20000a54
 800cbcc:	20000030 	.word	0x20000030
 800cbd0:	2000013c 	.word	0x2000013c

0800cbd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbd8:	2200      	movs	r2, #0
 800cbda:	4905      	ldr	r1, [pc, #20]	; (800cbf0 <CDC_Init_FS+0x1c>)
 800cbdc:	4805      	ldr	r0, [pc, #20]	; (800cbf4 <CDC_Init_FS+0x20>)
 800cbde:	f7fe fdb6 	bl	800b74e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbe2:	4905      	ldr	r1, [pc, #20]	; (800cbf8 <CDC_Init_FS+0x24>)
 800cbe4:	4803      	ldr	r0, [pc, #12]	; (800cbf4 <CDC_Init_FS+0x20>)
 800cbe6:	f7fe fdcb 	bl	800b780 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	bd80      	pop	{r7, pc}
 800cbf0:	20001524 	.word	0x20001524
 800cbf4:	20000a54 	.word	0x20000a54
 800cbf8:	20000d24 	.word	0x20000d24

0800cbfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbfc:	b480      	push	{r7}
 800cbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	46bd      	mov	sp, r7
 800cc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0a:	4770      	bx	lr

0800cc0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc0c:	b480      	push	{r7}
 800cc0e:	b083      	sub	sp, #12
 800cc10:	af00      	add	r7, sp, #0
 800cc12:	4603      	mov	r3, r0
 800cc14:	6039      	str	r1, [r7, #0]
 800cc16:	71fb      	strb	r3, [r7, #7]
 800cc18:	4613      	mov	r3, r2
 800cc1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc1c:	79fb      	ldrb	r3, [r7, #7]
 800cc1e:	2b23      	cmp	r3, #35	; 0x23
 800cc20:	d85c      	bhi.n	800ccdc <CDC_Control_FS+0xd0>
 800cc22:	a201      	add	r2, pc, #4	; (adr r2, 800cc28 <CDC_Control_FS+0x1c>)
 800cc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc28:	0800ccdd 	.word	0x0800ccdd
 800cc2c:	0800ccdd 	.word	0x0800ccdd
 800cc30:	0800ccdd 	.word	0x0800ccdd
 800cc34:	0800ccdd 	.word	0x0800ccdd
 800cc38:	0800ccdd 	.word	0x0800ccdd
 800cc3c:	0800ccdd 	.word	0x0800ccdd
 800cc40:	0800ccdd 	.word	0x0800ccdd
 800cc44:	0800ccdd 	.word	0x0800ccdd
 800cc48:	0800ccdd 	.word	0x0800ccdd
 800cc4c:	0800ccdd 	.word	0x0800ccdd
 800cc50:	0800ccdd 	.word	0x0800ccdd
 800cc54:	0800ccdd 	.word	0x0800ccdd
 800cc58:	0800ccdd 	.word	0x0800ccdd
 800cc5c:	0800ccdd 	.word	0x0800ccdd
 800cc60:	0800ccdd 	.word	0x0800ccdd
 800cc64:	0800ccdd 	.word	0x0800ccdd
 800cc68:	0800ccdd 	.word	0x0800ccdd
 800cc6c:	0800ccdd 	.word	0x0800ccdd
 800cc70:	0800ccdd 	.word	0x0800ccdd
 800cc74:	0800ccdd 	.word	0x0800ccdd
 800cc78:	0800ccdd 	.word	0x0800ccdd
 800cc7c:	0800ccdd 	.word	0x0800ccdd
 800cc80:	0800ccdd 	.word	0x0800ccdd
 800cc84:	0800ccdd 	.word	0x0800ccdd
 800cc88:	0800ccdd 	.word	0x0800ccdd
 800cc8c:	0800ccdd 	.word	0x0800ccdd
 800cc90:	0800ccdd 	.word	0x0800ccdd
 800cc94:	0800ccdd 	.word	0x0800ccdd
 800cc98:	0800ccdd 	.word	0x0800ccdd
 800cc9c:	0800ccdd 	.word	0x0800ccdd
 800cca0:	0800ccdd 	.word	0x0800ccdd
 800cca4:	0800ccdd 	.word	0x0800ccdd
 800cca8:	0800ccb9 	.word	0x0800ccb9
 800ccac:	0800cccb 	.word	0x0800cccb
 800ccb0:	0800ccdd 	.word	0x0800ccdd
 800ccb4:	0800ccdd 	.word	0x0800ccdd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800ccb8:	4b0c      	ldr	r3, [pc, #48]	; (800ccec <CDC_Control_FS+0xe0>)
 800ccba:	683a      	ldr	r2, [r7, #0]
 800ccbc:	6810      	ldr	r0, [r2, #0]
 800ccbe:	6018      	str	r0, [r3, #0]
 800ccc0:	8891      	ldrh	r1, [r2, #4]
 800ccc2:	7992      	ldrb	r2, [r2, #6]
 800ccc4:	8099      	strh	r1, [r3, #4]
 800ccc6:	719a      	strb	r2, [r3, #6]
    break;
 800ccc8:	e009      	b.n	800ccde <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	4a07      	ldr	r2, [pc, #28]	; (800ccec <CDC_Control_FS+0xe0>)
 800ccce:	6810      	ldr	r0, [r2, #0]
 800ccd0:	6018      	str	r0, [r3, #0]
 800ccd2:	8891      	ldrh	r1, [r2, #4]
 800ccd4:	7992      	ldrb	r2, [r2, #6]
 800ccd6:	8099      	strh	r1, [r3, #4]
 800ccd8:	719a      	strb	r2, [r3, #6]
    break;
 800ccda:	e000      	b.n	800ccde <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ccdc:	bf00      	nop
  }

  return (USBD_OK);
 800ccde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cce0:	4618      	mov	r0, r3
 800cce2:	370c      	adds	r7, #12
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr
 800ccec:	20000134 	.word	0x20000134

0800ccf0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccfa:	6879      	ldr	r1, [r7, #4]
 800ccfc:	4805      	ldr	r0, [pc, #20]	; (800cd14 <CDC_Receive_FS+0x24>)
 800ccfe:	f7fe fd3f 	bl	800b780 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd02:	4804      	ldr	r0, [pc, #16]	; (800cd14 <CDC_Receive_FS+0x24>)
 800cd04:	f7fe fd80 	bl	800b808 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd08:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3708      	adds	r7, #8
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}
 800cd12:	bf00      	nop
 800cd14:	20000a54 	.word	0x20000a54

0800cd18 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
 800cd20:	460b      	mov	r3, r1
 800cd22:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd28:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <CDC_Transmit_FS+0x48>)
 800cd2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cd2e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d001      	beq.n	800cd3e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e00b      	b.n	800cd56 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd3e:	887b      	ldrh	r3, [r7, #2]
 800cd40:	461a      	mov	r2, r3
 800cd42:	6879      	ldr	r1, [r7, #4]
 800cd44:	4806      	ldr	r0, [pc, #24]	; (800cd60 <CDC_Transmit_FS+0x48>)
 800cd46:	f7fe fd02 	bl	800b74e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd4a:	4805      	ldr	r0, [pc, #20]	; (800cd60 <CDC_Transmit_FS+0x48>)
 800cd4c:	f7fe fd2c 	bl	800b7a8 <USBD_CDC_TransmitPacket>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd54:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd56:	4618      	mov	r0, r3
 800cd58:	3710      	adds	r7, #16
 800cd5a:	46bd      	mov	sp, r7
 800cd5c:	bd80      	pop	{r7, pc}
 800cd5e:	bf00      	nop
 800cd60:	20000a54 	.word	0x20000a54

0800cd64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cd76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	371c      	adds	r7, #28
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd84:	4770      	bx	lr
	...

0800cd88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	4603      	mov	r3, r0
 800cd90:	6039      	str	r1, [r7, #0]
 800cd92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	2212      	movs	r2, #18
 800cd98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cd9a:	4b03      	ldr	r3, [pc, #12]	; (800cda8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	370c      	adds	r7, #12
 800cda0:	46bd      	mov	sp, r7
 800cda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda6:	4770      	bx	lr
 800cda8:	20000170 	.word	0x20000170

0800cdac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	6039      	str	r1, [r7, #0]
 800cdb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2204      	movs	r2, #4
 800cdbc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdbe:	4b03      	ldr	r3, [pc, #12]	; (800cdcc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr
 800cdcc:	20000190 	.word	0x20000190

0800cdd0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b082      	sub	sp, #8
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	6039      	str	r1, [r7, #0]
 800cdda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d105      	bne.n	800cdee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	4907      	ldr	r1, [pc, #28]	; (800ce04 <USBD_FS_ProductStrDescriptor+0x34>)
 800cde6:	4808      	ldr	r0, [pc, #32]	; (800ce08 <USBD_FS_ProductStrDescriptor+0x38>)
 800cde8:	f7ff fd87 	bl	800c8fa <USBD_GetString>
 800cdec:	e004      	b.n	800cdf8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cdee:	683a      	ldr	r2, [r7, #0]
 800cdf0:	4904      	ldr	r1, [pc, #16]	; (800ce04 <USBD_FS_ProductStrDescriptor+0x34>)
 800cdf2:	4805      	ldr	r0, [pc, #20]	; (800ce08 <USBD_FS_ProductStrDescriptor+0x38>)
 800cdf4:	f7ff fd81 	bl	800c8fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800cdf8:	4b02      	ldr	r3, [pc, #8]	; (800ce04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3708      	adds	r7, #8
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}
 800ce02:	bf00      	nop
 800ce04:	20001d24 	.word	0x20001d24
 800ce08:	08012324 	.word	0x08012324

0800ce0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	6039      	str	r1, [r7, #0]
 800ce16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	4904      	ldr	r1, [pc, #16]	; (800ce2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce1c:	4804      	ldr	r0, [pc, #16]	; (800ce30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce1e:	f7ff fd6c 	bl	800c8fa <USBD_GetString>
  return USBD_StrDesc;
 800ce22:	4b02      	ldr	r3, [pc, #8]	; (800ce2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3708      	adds	r7, #8
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20001d24 	.word	0x20001d24
 800ce30:	0801233c 	.word	0x0801233c

0800ce34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	6039      	str	r1, [r7, #0]
 800ce3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	221a      	movs	r2, #26
 800ce44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce46:	f000 f855 	bl	800cef4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce4a:	4b02      	ldr	r3, [pc, #8]	; (800ce54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20000194 	.word	0x20000194

0800ce58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	4603      	mov	r3, r0
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ce64:	79fb      	ldrb	r3, [r7, #7]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce6a:	683a      	ldr	r2, [r7, #0]
 800ce6c:	4907      	ldr	r1, [pc, #28]	; (800ce8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce6e:	4808      	ldr	r0, [pc, #32]	; (800ce90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce70:	f7ff fd43 	bl	800c8fa <USBD_GetString>
 800ce74:	e004      	b.n	800ce80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ce76:	683a      	ldr	r2, [r7, #0]
 800ce78:	4904      	ldr	r1, [pc, #16]	; (800ce8c <USBD_FS_ConfigStrDescriptor+0x34>)
 800ce7a:	4805      	ldr	r0, [pc, #20]	; (800ce90 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ce7c:	f7ff fd3d 	bl	800c8fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce80:	4b02      	ldr	r3, [pc, #8]	; (800ce8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ce82:	4618      	mov	r0, r3
 800ce84:	3708      	adds	r7, #8
 800ce86:	46bd      	mov	sp, r7
 800ce88:	bd80      	pop	{r7, pc}
 800ce8a:	bf00      	nop
 800ce8c:	20001d24 	.word	0x20001d24
 800ce90:	08012350 	.word	0x08012350

0800ce94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	6039      	str	r1, [r7, #0]
 800ce9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d105      	bne.n	800ceb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	4907      	ldr	r1, [pc, #28]	; (800cec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceaa:	4808      	ldr	r0, [pc, #32]	; (800cecc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ceac:	f7ff fd25 	bl	800c8fa <USBD_GetString>
 800ceb0:	e004      	b.n	800cebc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	4904      	ldr	r1, [pc, #16]	; (800cec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ceb6:	4805      	ldr	r0, [pc, #20]	; (800cecc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ceb8:	f7ff fd1f 	bl	800c8fa <USBD_GetString>
  }
  return USBD_StrDesc;
 800cebc:	4b02      	ldr	r3, [pc, #8]	; (800cec8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20001d24 	.word	0x20001d24
 800cecc:	0801235c 	.word	0x0801235c

0800ced0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ced0:	b480      	push	{r7}
 800ced2:	b083      	sub	sp, #12
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	6039      	str	r1, [r7, #0]
 800ceda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	220c      	movs	r2, #12
 800cee0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800cee2:	4b03      	ldr	r3, [pc, #12]	; (800cef0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr
 800cef0:	20000184 	.word	0x20000184

0800cef4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cefa:	4b0f      	ldr	r3, [pc, #60]	; (800cf38 <Get_SerialNum+0x44>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf00:	4b0e      	ldr	r3, [pc, #56]	; (800cf3c <Get_SerialNum+0x48>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf06:	4b0e      	ldr	r3, [pc, #56]	; (800cf40 <Get_SerialNum+0x4c>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf0c:	68fa      	ldr	r2, [r7, #12]
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	4413      	add	r3, r2
 800cf12:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d009      	beq.n	800cf2e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf1a:	2208      	movs	r2, #8
 800cf1c:	4909      	ldr	r1, [pc, #36]	; (800cf44 <Get_SerialNum+0x50>)
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f000 f814 	bl	800cf4c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf24:	2204      	movs	r2, #4
 800cf26:	4908      	ldr	r1, [pc, #32]	; (800cf48 <Get_SerialNum+0x54>)
 800cf28:	68b8      	ldr	r0, [r7, #8]
 800cf2a:	f000 f80f 	bl	800cf4c <IntToUnicode>
  }
}
 800cf2e:	bf00      	nop
 800cf30:	3710      	adds	r7, #16
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	1fff7a10 	.word	0x1fff7a10
 800cf3c:	1fff7a14 	.word	0x1fff7a14
 800cf40:	1fff7a18 	.word	0x1fff7a18
 800cf44:	20000196 	.word	0x20000196
 800cf48:	200001a6 	.word	0x200001a6

0800cf4c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b087      	sub	sp, #28
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	4613      	mov	r3, r2
 800cf58:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf5e:	2300      	movs	r3, #0
 800cf60:	75fb      	strb	r3, [r7, #23]
 800cf62:	e027      	b.n	800cfb4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	0f1b      	lsrs	r3, r3, #28
 800cf68:	2b09      	cmp	r3, #9
 800cf6a:	d80b      	bhi.n	800cf84 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	0f1b      	lsrs	r3, r3, #28
 800cf70:	b2da      	uxtb	r2, r3
 800cf72:	7dfb      	ldrb	r3, [r7, #23]
 800cf74:	005b      	lsls	r3, r3, #1
 800cf76:	4619      	mov	r1, r3
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	440b      	add	r3, r1
 800cf7c:	3230      	adds	r2, #48	; 0x30
 800cf7e:	b2d2      	uxtb	r2, r2
 800cf80:	701a      	strb	r2, [r3, #0]
 800cf82:	e00a      	b.n	800cf9a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	0f1b      	lsrs	r3, r3, #28
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	440b      	add	r3, r1
 800cf94:	3237      	adds	r2, #55	; 0x37
 800cf96:	b2d2      	uxtb	r2, r2
 800cf98:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	011b      	lsls	r3, r3, #4
 800cf9e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfa0:	7dfb      	ldrb	r3, [r7, #23]
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	68ba      	ldr	r2, [r7, #8]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	2200      	movs	r2, #0
 800cfac:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfae:	7dfb      	ldrb	r3, [r7, #23]
 800cfb0:	3301      	adds	r3, #1
 800cfb2:	75fb      	strb	r3, [r7, #23]
 800cfb4:	7dfa      	ldrb	r2, [r7, #23]
 800cfb6:	79fb      	ldrb	r3, [r7, #7]
 800cfb8:	429a      	cmp	r2, r3
 800cfba:	d3d3      	bcc.n	800cf64 <IntToUnicode+0x18>
  }
}
 800cfbc:	bf00      	nop
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08a      	sub	sp, #40	; 0x28
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfd0:	f107 0314 	add.w	r3, r7, #20
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	601a      	str	r2, [r3, #0]
 800cfd8:	605a      	str	r2, [r3, #4]
 800cfda:	609a      	str	r2, [r3, #8]
 800cfdc:	60da      	str	r2, [r3, #12]
 800cfde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cfe8:	d13a      	bne.n	800d060 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cfea:	2300      	movs	r3, #0
 800cfec:	613b      	str	r3, [r7, #16]
 800cfee:	4b1e      	ldr	r3, [pc, #120]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800cff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff2:	4a1d      	ldr	r2, [pc, #116]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800cff4:	f043 0301 	orr.w	r3, r3, #1
 800cff8:	6313      	str	r3, [r2, #48]	; 0x30
 800cffa:	4b1b      	ldr	r3, [pc, #108]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800cffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cffe:	f003 0301 	and.w	r3, r3, #1
 800d002:	613b      	str	r3, [r7, #16]
 800d004:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d00a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d00c:	2302      	movs	r3, #2
 800d00e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d010:	2300      	movs	r3, #0
 800d012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d014:	2303      	movs	r3, #3
 800d016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d018:	230a      	movs	r3, #10
 800d01a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d01c:	f107 0314 	add.w	r3, r7, #20
 800d020:	4619      	mov	r1, r3
 800d022:	4812      	ldr	r0, [pc, #72]	; (800d06c <HAL_PCD_MspInit+0xa4>)
 800d024:	f7f7 fb76 	bl	8004714 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d028:	4b0f      	ldr	r3, [pc, #60]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800d02a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d02c:	4a0e      	ldr	r2, [pc, #56]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800d02e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d032:	6353      	str	r3, [r2, #52]	; 0x34
 800d034:	2300      	movs	r3, #0
 800d036:	60fb      	str	r3, [r7, #12]
 800d038:	4b0b      	ldr	r3, [pc, #44]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800d03a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d03c:	4a0a      	ldr	r2, [pc, #40]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800d03e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d042:	6453      	str	r3, [r2, #68]	; 0x44
 800d044:	4b08      	ldr	r3, [pc, #32]	; (800d068 <HAL_PCD_MspInit+0xa0>)
 800d046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d050:	2200      	movs	r2, #0
 800d052:	2100      	movs	r1, #0
 800d054:	2043      	movs	r0, #67	; 0x43
 800d056:	f7f7 fb26 	bl	80046a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d05a:	2043      	movs	r0, #67	; 0x43
 800d05c:	f7f7 fb3f 	bl	80046de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d060:	bf00      	nop
 800d062:	3728      	adds	r7, #40	; 0x28
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	40023800 	.word	0x40023800
 800d06c:	40020000 	.word	0x40020000

0800d070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b082      	sub	sp, #8
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d084:	4619      	mov	r1, r3
 800d086:	4610      	mov	r0, r2
 800d088:	f7fe fc8a 	bl	800b9a0 <USBD_LL_SetupStage>
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	460b      	mov	r3, r1
 800d09e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d0a6:	78fa      	ldrb	r2, [r7, #3]
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	4613      	mov	r3, r2
 800d0ac:	00db      	lsls	r3, r3, #3
 800d0ae:	1a9b      	subs	r3, r3, r2
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	440b      	add	r3, r1
 800d0b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d0b8:	681a      	ldr	r2, [r3, #0]
 800d0ba:	78fb      	ldrb	r3, [r7, #3]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f7fe fcc2 	bl	800ba46 <USBD_LL_DataOutStage>
}
 800d0c2:	bf00      	nop
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}

0800d0ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0ca:	b580      	push	{r7, lr}
 800d0cc:	b082      	sub	sp, #8
 800d0ce:	af00      	add	r7, sp, #0
 800d0d0:	6078      	str	r0, [r7, #4]
 800d0d2:	460b      	mov	r3, r1
 800d0d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d0dc:	78fa      	ldrb	r2, [r7, #3]
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	4613      	mov	r3, r2
 800d0e2:	00db      	lsls	r3, r3, #3
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	009b      	lsls	r3, r3, #2
 800d0e8:	440b      	add	r3, r1
 800d0ea:	3348      	adds	r3, #72	; 0x48
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	78fb      	ldrb	r3, [r7, #3]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	f7fe fd0b 	bl	800bb0c <USBD_LL_DataInStage>
}
 800d0f6:	bf00      	nop
 800d0f8:	3708      	adds	r7, #8
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	bd80      	pop	{r7, pc}

0800d0fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0fe:	b580      	push	{r7, lr}
 800d100:	b082      	sub	sp, #8
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7fe fe0f 	bl	800bd30 <USBD_LL_SOF>
}
 800d112:	bf00      	nop
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b084      	sub	sp, #16
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d122:	2301      	movs	r3, #1
 800d124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d102      	bne.n	800d134 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d12e:	2300      	movs	r3, #0
 800d130:	73fb      	strb	r3, [r7, #15]
 800d132:	e008      	b.n	800d146 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	2b02      	cmp	r3, #2
 800d13a:	d102      	bne.n	800d142 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d13c:	2301      	movs	r3, #1
 800d13e:	73fb      	strb	r3, [r7, #15]
 800d140:	e001      	b.n	800d146 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d142:	f7f5 ff8f 	bl	8003064 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d14c:	7bfa      	ldrb	r2, [r7, #15]
 800d14e:	4611      	mov	r1, r2
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe fdb2 	bl	800bcba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fe fd6b 	bl	800bc38 <USBD_LL_Reset>
}
 800d162:	bf00      	nop
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}
	...

0800d16c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b082      	sub	sp, #8
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d17a:	4618      	mov	r0, r3
 800d17c:	f7fe fdad 	bl	800bcda <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	687a      	ldr	r2, [r7, #4]
 800d18c:	6812      	ldr	r2, [r2, #0]
 800d18e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d192:	f043 0301 	orr.w	r3, r3, #1
 800d196:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	6a1b      	ldr	r3, [r3, #32]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d005      	beq.n	800d1ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1a0:	4b04      	ldr	r3, [pc, #16]	; (800d1b4 <HAL_PCD_SuspendCallback+0x48>)
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	4a03      	ldr	r2, [pc, #12]	; (800d1b4 <HAL_PCD_SuspendCallback+0x48>)
 800d1a6:	f043 0306 	orr.w	r3, r3, #6
 800d1aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1ac:	bf00      	nop
 800d1ae:	3708      	adds	r7, #8
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}
 800d1b4:	e000ed00 	.word	0xe000ed00

0800d1b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b082      	sub	sp, #8
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fe fd9c 	bl	800bd04 <USBD_LL_Resume>
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}

0800d1d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b082      	sub	sp, #8
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	460b      	mov	r3, r1
 800d1de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d1e6:	78fa      	ldrb	r2, [r7, #3]
 800d1e8:	4611      	mov	r1, r2
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	f7fe fdc7 	bl	800bd7e <USBD_LL_IsoOUTIncomplete>
}
 800d1f0:	bf00      	nop
 800d1f2:	3708      	adds	r7, #8
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b082      	sub	sp, #8
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	6078      	str	r0, [r7, #4]
 800d200:	460b      	mov	r3, r1
 800d202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d20a:	78fa      	ldrb	r2, [r7, #3]
 800d20c:	4611      	mov	r1, r2
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fda8 	bl	800bd64 <USBD_LL_IsoINIncomplete>
}
 800d214:	bf00      	nop
 800d216:	3708      	adds	r7, #8
 800d218:	46bd      	mov	sp, r7
 800d21a:	bd80      	pop	{r7, pc}

0800d21c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d22a:	4618      	mov	r0, r3
 800d22c:	f7fe fdb4 	bl	800bd98 <USBD_LL_DevConnected>
}
 800d230:	bf00      	nop
 800d232:	3708      	adds	r7, #8
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b082      	sub	sp, #8
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d246:	4618      	mov	r0, r3
 800d248:	f7fe fdb1 	bl	800bdae <USBD_LL_DevDisconnected>
}
 800d24c:	bf00      	nop
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d13c      	bne.n	800d2de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d264:	4a20      	ldr	r2, [pc, #128]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4a1e      	ldr	r2, [pc, #120]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d270:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d274:	4b1c      	ldr	r3, [pc, #112]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d27a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d27c:	4b1a      	ldr	r3, [pc, #104]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d27e:	2206      	movs	r2, #6
 800d280:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d282:	4b19      	ldr	r3, [pc, #100]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d284:	2202      	movs	r2, #2
 800d286:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d288:	4b17      	ldr	r3, [pc, #92]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d28e:	4b16      	ldr	r3, [pc, #88]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d290:	2202      	movs	r2, #2
 800d292:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d294:	4b14      	ldr	r3, [pc, #80]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d296:	2200      	movs	r2, #0
 800d298:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d29a:	4b13      	ldr	r3, [pc, #76]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d29c:	2200      	movs	r2, #0
 800d29e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2a0:	4b11      	ldr	r3, [pc, #68]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2a6:	4b10      	ldr	r3, [pc, #64]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2ac:	4b0e      	ldr	r3, [pc, #56]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2b2:	480d      	ldr	r0, [pc, #52]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2b4:	f7f8 fb8d 	bl	80059d2 <HAL_PCD_Init>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d001      	beq.n	800d2c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d2be:	f7f5 fed1 	bl	8003064 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2c2:	2180      	movs	r1, #128	; 0x80
 800d2c4:	4808      	ldr	r0, [pc, #32]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2c6:	f7f9 fd1e 	bl	8006d06 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2ca:	2240      	movs	r2, #64	; 0x40
 800d2cc:	2100      	movs	r1, #0
 800d2ce:	4806      	ldr	r0, [pc, #24]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2d0:	f7f9 fcd2 	bl	8006c78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d2d4:	2280      	movs	r2, #128	; 0x80
 800d2d6:	2101      	movs	r1, #1
 800d2d8:	4803      	ldr	r0, [pc, #12]	; (800d2e8 <USBD_LL_Init+0x94>)
 800d2da:	f7f9 fccd 	bl	8006c78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d2de:	2300      	movs	r3, #0
}
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	3708      	adds	r7, #8
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	bd80      	pop	{r7, pc}
 800d2e8:	20001f24 	.word	0x20001f24

0800d2ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d302:	4618      	mov	r0, r3
 800d304:	f7f8 fc89 	bl	8005c1a <HAL_PCD_Start>
 800d308:	4603      	mov	r3, r0
 800d30a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d30c:	7bfb      	ldrb	r3, [r7, #15]
 800d30e:	4618      	mov	r0, r3
 800d310:	f000 f978 	bl	800d604 <USBD_Get_USB_Status>
 800d314:	4603      	mov	r3, r0
 800d316:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d318:	7bbb      	ldrb	r3, [r7, #14]
}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3710      	adds	r7, #16
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}

0800d322 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d322:	b580      	push	{r7, lr}
 800d324:	b084      	sub	sp, #16
 800d326:	af00      	add	r7, sp, #0
 800d328:	6078      	str	r0, [r7, #4]
 800d32a:	4608      	mov	r0, r1
 800d32c:	4611      	mov	r1, r2
 800d32e:	461a      	mov	r2, r3
 800d330:	4603      	mov	r3, r0
 800d332:	70fb      	strb	r3, [r7, #3]
 800d334:	460b      	mov	r3, r1
 800d336:	70bb      	strb	r3, [r7, #2]
 800d338:	4613      	mov	r3, r2
 800d33a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33c:	2300      	movs	r3, #0
 800d33e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d340:	2300      	movs	r3, #0
 800d342:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d34a:	78bb      	ldrb	r3, [r7, #2]
 800d34c:	883a      	ldrh	r2, [r7, #0]
 800d34e:	78f9      	ldrb	r1, [r7, #3]
 800d350:	f7f9 f89a 	bl	8006488 <HAL_PCD_EP_Open>
 800d354:	4603      	mov	r3, r0
 800d356:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d358:	7bfb      	ldrb	r3, [r7, #15]
 800d35a:	4618      	mov	r0, r3
 800d35c:	f000 f952 	bl	800d604 <USBD_Get_USB_Status>
 800d360:	4603      	mov	r3, r0
 800d362:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d364:	7bbb      	ldrb	r3, [r7, #14]
}
 800d366:	4618      	mov	r0, r3
 800d368:	3710      	adds	r7, #16
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}

0800d36e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36e:	b580      	push	{r7, lr}
 800d370:	b084      	sub	sp, #16
 800d372:	af00      	add	r7, sp, #0
 800d374:	6078      	str	r0, [r7, #4]
 800d376:	460b      	mov	r3, r1
 800d378:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d37a:	2300      	movs	r3, #0
 800d37c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d388:	78fa      	ldrb	r2, [r7, #3]
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7f9 f8e3 	bl	8006558 <HAL_PCD_EP_Close>
 800d392:	4603      	mov	r3, r0
 800d394:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d396:	7bfb      	ldrb	r3, [r7, #15]
 800d398:	4618      	mov	r0, r3
 800d39a:	f000 f933 	bl	800d604 <USBD_Get_USB_Status>
 800d39e:	4603      	mov	r3, r0
 800d3a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3710      	adds	r7, #16
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}

0800d3ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3ac:	b580      	push	{r7, lr}
 800d3ae:	b084      	sub	sp, #16
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
 800d3b4:	460b      	mov	r3, r1
 800d3b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d3c6:	78fa      	ldrb	r2, [r7, #3]
 800d3c8:	4611      	mov	r1, r2
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7f9 f9bb 	bl	8006746 <HAL_PCD_EP_SetStall>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3d4:	7bfb      	ldrb	r3, [r7, #15]
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f000 f914 	bl	800d604 <USBD_Get_USB_Status>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3710      	adds	r7, #16
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b084      	sub	sp, #16
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d404:	78fa      	ldrb	r2, [r7, #3]
 800d406:	4611      	mov	r1, r2
 800d408:	4618      	mov	r0, r3
 800d40a:	f7f9 fa00 	bl	800680e <HAL_PCD_EP_ClrStall>
 800d40e:	4603      	mov	r3, r0
 800d410:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d412:	7bfb      	ldrb	r3, [r7, #15]
 800d414:	4618      	mov	r0, r3
 800d416:	f000 f8f5 	bl	800d604 <USBD_Get_USB_Status>
 800d41a:	4603      	mov	r3, r0
 800d41c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d41e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d420:	4618      	mov	r0, r3
 800d422:	3710      	adds	r7, #16
 800d424:	46bd      	mov	sp, r7
 800d426:	bd80      	pop	{r7, pc}

0800d428 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d428:	b480      	push	{r7}
 800d42a:	b085      	sub	sp, #20
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	460b      	mov	r3, r1
 800d432:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d43a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d43c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d440:	2b00      	cmp	r3, #0
 800d442:	da0b      	bge.n	800d45c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d444:	78fb      	ldrb	r3, [r7, #3]
 800d446:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d44a:	68f9      	ldr	r1, [r7, #12]
 800d44c:	4613      	mov	r3, r2
 800d44e:	00db      	lsls	r3, r3, #3
 800d450:	1a9b      	subs	r3, r3, r2
 800d452:	009b      	lsls	r3, r3, #2
 800d454:	440b      	add	r3, r1
 800d456:	333e      	adds	r3, #62	; 0x3e
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	e00b      	b.n	800d474 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d45c:	78fb      	ldrb	r3, [r7, #3]
 800d45e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d462:	68f9      	ldr	r1, [r7, #12]
 800d464:	4613      	mov	r3, r2
 800d466:	00db      	lsls	r3, r3, #3
 800d468:	1a9b      	subs	r3, r3, r2
 800d46a:	009b      	lsls	r3, r3, #2
 800d46c:	440b      	add	r3, r1
 800d46e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d472:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d474:	4618      	mov	r0, r3
 800d476:	3714      	adds	r7, #20
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d490:	2300      	movs	r3, #0
 800d492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d49a:	78fa      	ldrb	r2, [r7, #3]
 800d49c:	4611      	mov	r1, r2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7f8 ffcd 	bl	800643e <HAL_PCD_SetAddress>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f000 f8aa 	bl	800d604 <USBD_Get_USB_Status>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}

0800d4be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4be:	b580      	push	{r7, lr}
 800d4c0:	b086      	sub	sp, #24
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	60f8      	str	r0, [r7, #12]
 800d4c6:	607a      	str	r2, [r7, #4]
 800d4c8:	603b      	str	r3, [r7, #0]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d4dc:	7af9      	ldrb	r1, [r7, #11]
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	687a      	ldr	r2, [r7, #4]
 800d4e2:	f7f9 f8e6 	bl	80066b2 <HAL_PCD_EP_Transmit>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f000 f889 	bl	800d604 <USBD_Get_USB_Status>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	607a      	str	r2, [r7, #4]
 800d50a:	603b      	str	r3, [r7, #0]
 800d50c:	460b      	mov	r3, r1
 800d50e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d510:	2300      	movs	r3, #0
 800d512:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d51e:	7af9      	ldrb	r1, [r7, #11]
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	687a      	ldr	r2, [r7, #4]
 800d524:	f7f9 f862 	bl	80065ec <HAL_PCD_EP_Receive>
 800d528:	4603      	mov	r3, r0
 800d52a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d52c:	7dfb      	ldrb	r3, [r7, #23]
 800d52e:	4618      	mov	r0, r3
 800d530:	f000 f868 	bl	800d604 <USBD_Get_USB_Status>
 800d534:	4603      	mov	r3, r0
 800d536:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d538:	7dbb      	ldrb	r3, [r7, #22]
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3718      	adds	r7, #24
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}

0800d542 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b082      	sub	sp, #8
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
 800d54a:	460b      	mov	r3, r1
 800d54c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d554:	78fa      	ldrb	r2, [r7, #3]
 800d556:	4611      	mov	r1, r2
 800d558:	4618      	mov	r0, r3
 800d55a:	f7f9 f892 	bl	8006682 <HAL_PCD_EP_GetRxCount>
 800d55e:	4603      	mov	r3, r0
}
 800d560:	4618      	mov	r0, r3
 800d562:	3708      	adds	r7, #8
 800d564:	46bd      	mov	sp, r7
 800d566:	bd80      	pop	{r7, pc}

0800d568 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d568:	b580      	push	{r7, lr}
 800d56a:	b082      	sub	sp, #8
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
 800d570:	460b      	mov	r3, r1
 800d572:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d574:	78fb      	ldrb	r3, [r7, #3]
 800d576:	2b00      	cmp	r3, #0
 800d578:	d002      	beq.n	800d580 <HAL_PCDEx_LPM_Callback+0x18>
 800d57a:	2b01      	cmp	r3, #1
 800d57c:	d01f      	beq.n	800d5be <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d57e:	e03b      	b.n	800d5f8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	6a1b      	ldr	r3, [r3, #32]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d007      	beq.n	800d598 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d588:	f7f5 f940 	bl	800280c <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d58c:	4b1c      	ldr	r3, [pc, #112]	; (800d600 <HAL_PCDEx_LPM_Callback+0x98>)
 800d58e:	691b      	ldr	r3, [r3, #16]
 800d590:	4a1b      	ldr	r2, [pc, #108]	; (800d600 <HAL_PCDEx_LPM_Callback+0x98>)
 800d592:	f023 0306 	bic.w	r3, r3, #6
 800d596:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	6812      	ldr	r2, [r2, #0]
 800d5a6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d5aa:	f023 0301 	bic.w	r3, r3, #1
 800d5ae:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe fba4 	bl	800bd04 <USBD_LL_Resume>
    break;
 800d5bc:	e01c      	b.n	800d5f8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	687a      	ldr	r2, [r7, #4]
 800d5ca:	6812      	ldr	r2, [r2, #0]
 800d5cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d5d0:	f043 0301 	orr.w	r3, r3, #1
 800d5d4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f7fe fb7c 	bl	800bcda <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d005      	beq.n	800d5f6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d5ea:	4b05      	ldr	r3, [pc, #20]	; (800d600 <HAL_PCDEx_LPM_Callback+0x98>)
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	4a04      	ldr	r2, [pc, #16]	; (800d600 <HAL_PCDEx_LPM_Callback+0x98>)
 800d5f0:	f043 0306 	orr.w	r3, r3, #6
 800d5f4:	6113      	str	r3, [r2, #16]
    break;
 800d5f6:	bf00      	nop
}
 800d5f8:	bf00      	nop
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	e000ed00 	.word	0xe000ed00

0800d604 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d604:	b480      	push	{r7}
 800d606:	b085      	sub	sp, #20
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	2b03      	cmp	r3, #3
 800d616:	d817      	bhi.n	800d648 <USBD_Get_USB_Status+0x44>
 800d618:	a201      	add	r2, pc, #4	; (adr r2, 800d620 <USBD_Get_USB_Status+0x1c>)
 800d61a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d61e:	bf00      	nop
 800d620:	0800d631 	.word	0x0800d631
 800d624:	0800d637 	.word	0x0800d637
 800d628:	0800d63d 	.word	0x0800d63d
 800d62c:	0800d643 	.word	0x0800d643
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d630:	2300      	movs	r3, #0
 800d632:	73fb      	strb	r3, [r7, #15]
    break;
 800d634:	e00b      	b.n	800d64e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d636:	2303      	movs	r3, #3
 800d638:	73fb      	strb	r3, [r7, #15]
    break;
 800d63a:	e008      	b.n	800d64e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d63c:	2301      	movs	r3, #1
 800d63e:	73fb      	strb	r3, [r7, #15]
    break;
 800d640:	e005      	b.n	800d64e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d642:	2303      	movs	r3, #3
 800d644:	73fb      	strb	r3, [r7, #15]
    break;
 800d646:	e002      	b.n	800d64e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d648:	2303      	movs	r3, #3
 800d64a:	73fb      	strb	r3, [r7, #15]
    break;
 800d64c:	bf00      	nop
  }
  return usb_status;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3714      	adds	r7, #20
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <__assert_func>:
 800d65c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d65e:	461c      	mov	r4, r3
 800d660:	4b09      	ldr	r3, [pc, #36]	; (800d688 <__assert_func+0x2c>)
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	4605      	mov	r5, r0
 800d666:	68d8      	ldr	r0, [r3, #12]
 800d668:	b152      	cbz	r2, 800d680 <__assert_func+0x24>
 800d66a:	4b08      	ldr	r3, [pc, #32]	; (800d68c <__assert_func+0x30>)
 800d66c:	9100      	str	r1, [sp, #0]
 800d66e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d672:	4907      	ldr	r1, [pc, #28]	; (800d690 <__assert_func+0x34>)
 800d674:	462b      	mov	r3, r5
 800d676:	4622      	mov	r2, r4
 800d678:	f000 f814 	bl	800d6a4 <fiprintf>
 800d67c:	f001 f806 	bl	800e68c <abort>
 800d680:	4b04      	ldr	r3, [pc, #16]	; (800d694 <__assert_func+0x38>)
 800d682:	461a      	mov	r2, r3
 800d684:	e7f2      	b.n	800d66c <__assert_func+0x10>
 800d686:	bf00      	nop
 800d688:	200001b0 	.word	0x200001b0
 800d68c:	08012404 	.word	0x08012404
 800d690:	08012411 	.word	0x08012411
 800d694:	0801243f 	.word	0x0801243f

0800d698 <__errno>:
 800d698:	4b01      	ldr	r3, [pc, #4]	; (800d6a0 <__errno+0x8>)
 800d69a:	6818      	ldr	r0, [r3, #0]
 800d69c:	4770      	bx	lr
 800d69e:	bf00      	nop
 800d6a0:	200001b0 	.word	0x200001b0

0800d6a4 <fiprintf>:
 800d6a4:	b40e      	push	{r1, r2, r3}
 800d6a6:	b503      	push	{r0, r1, lr}
 800d6a8:	4601      	mov	r1, r0
 800d6aa:	ab03      	add	r3, sp, #12
 800d6ac:	4805      	ldr	r0, [pc, #20]	; (800d6c4 <fiprintf+0x20>)
 800d6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6b2:	6800      	ldr	r0, [r0, #0]
 800d6b4:	9301      	str	r3, [sp, #4]
 800d6b6:	f000 f921 	bl	800d8fc <_vfiprintf_r>
 800d6ba:	b002      	add	sp, #8
 800d6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6c0:	b003      	add	sp, #12
 800d6c2:	4770      	bx	lr
 800d6c4:	200001b0 	.word	0x200001b0

0800d6c8 <__libc_init_array>:
 800d6c8:	b570      	push	{r4, r5, r6, lr}
 800d6ca:	4e0d      	ldr	r6, [pc, #52]	; (800d700 <__libc_init_array+0x38>)
 800d6cc:	4c0d      	ldr	r4, [pc, #52]	; (800d704 <__libc_init_array+0x3c>)
 800d6ce:	1ba4      	subs	r4, r4, r6
 800d6d0:	10a4      	asrs	r4, r4, #2
 800d6d2:	2500      	movs	r5, #0
 800d6d4:	42a5      	cmp	r5, r4
 800d6d6:	d109      	bne.n	800d6ec <__libc_init_array+0x24>
 800d6d8:	4e0b      	ldr	r6, [pc, #44]	; (800d708 <__libc_init_array+0x40>)
 800d6da:	4c0c      	ldr	r4, [pc, #48]	; (800d70c <__libc_init_array+0x44>)
 800d6dc:	f004 fb9a 	bl	8011e14 <_init>
 800d6e0:	1ba4      	subs	r4, r4, r6
 800d6e2:	10a4      	asrs	r4, r4, #2
 800d6e4:	2500      	movs	r5, #0
 800d6e6:	42a5      	cmp	r5, r4
 800d6e8:	d105      	bne.n	800d6f6 <__libc_init_array+0x2e>
 800d6ea:	bd70      	pop	{r4, r5, r6, pc}
 800d6ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d6f0:	4798      	blx	r3
 800d6f2:	3501      	adds	r5, #1
 800d6f4:	e7ee      	b.n	800d6d4 <__libc_init_array+0xc>
 800d6f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d6fa:	4798      	blx	r3
 800d6fc:	3501      	adds	r5, #1
 800d6fe:	e7f2      	b.n	800d6e6 <__libc_init_array+0x1e>
 800d700:	08012930 	.word	0x08012930
 800d704:	08012930 	.word	0x08012930
 800d708:	08012930 	.word	0x08012930
 800d70c:	08012934 	.word	0x08012934

0800d710 <malloc>:
 800d710:	4b02      	ldr	r3, [pc, #8]	; (800d71c <malloc+0xc>)
 800d712:	4601      	mov	r1, r0
 800d714:	6818      	ldr	r0, [r3, #0]
 800d716:	f000 b86d 	b.w	800d7f4 <_malloc_r>
 800d71a:	bf00      	nop
 800d71c:	200001b0 	.word	0x200001b0

0800d720 <free>:
 800d720:	4b02      	ldr	r3, [pc, #8]	; (800d72c <free+0xc>)
 800d722:	4601      	mov	r1, r0
 800d724:	6818      	ldr	r0, [r3, #0]
 800d726:	f000 b817 	b.w	800d758 <_free_r>
 800d72a:	bf00      	nop
 800d72c:	200001b0 	.word	0x200001b0

0800d730 <memcpy>:
 800d730:	b510      	push	{r4, lr}
 800d732:	1e43      	subs	r3, r0, #1
 800d734:	440a      	add	r2, r1
 800d736:	4291      	cmp	r1, r2
 800d738:	d100      	bne.n	800d73c <memcpy+0xc>
 800d73a:	bd10      	pop	{r4, pc}
 800d73c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d740:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d744:	e7f7      	b.n	800d736 <memcpy+0x6>

0800d746 <memset>:
 800d746:	4402      	add	r2, r0
 800d748:	4603      	mov	r3, r0
 800d74a:	4293      	cmp	r3, r2
 800d74c:	d100      	bne.n	800d750 <memset+0xa>
 800d74e:	4770      	bx	lr
 800d750:	f803 1b01 	strb.w	r1, [r3], #1
 800d754:	e7f9      	b.n	800d74a <memset+0x4>
	...

0800d758 <_free_r>:
 800d758:	b538      	push	{r3, r4, r5, lr}
 800d75a:	4605      	mov	r5, r0
 800d75c:	2900      	cmp	r1, #0
 800d75e:	d045      	beq.n	800d7ec <_free_r+0x94>
 800d760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d764:	1f0c      	subs	r4, r1, #4
 800d766:	2b00      	cmp	r3, #0
 800d768:	bfb8      	it	lt
 800d76a:	18e4      	addlt	r4, r4, r3
 800d76c:	f002 f803 	bl	800f776 <__malloc_lock>
 800d770:	4a1f      	ldr	r2, [pc, #124]	; (800d7f0 <_free_r+0x98>)
 800d772:	6813      	ldr	r3, [r2, #0]
 800d774:	4610      	mov	r0, r2
 800d776:	b933      	cbnz	r3, 800d786 <_free_r+0x2e>
 800d778:	6063      	str	r3, [r4, #4]
 800d77a:	6014      	str	r4, [r2, #0]
 800d77c:	4628      	mov	r0, r5
 800d77e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d782:	f001 bff9 	b.w	800f778 <__malloc_unlock>
 800d786:	42a3      	cmp	r3, r4
 800d788:	d90c      	bls.n	800d7a4 <_free_r+0x4c>
 800d78a:	6821      	ldr	r1, [r4, #0]
 800d78c:	1862      	adds	r2, r4, r1
 800d78e:	4293      	cmp	r3, r2
 800d790:	bf04      	itt	eq
 800d792:	681a      	ldreq	r2, [r3, #0]
 800d794:	685b      	ldreq	r3, [r3, #4]
 800d796:	6063      	str	r3, [r4, #4]
 800d798:	bf04      	itt	eq
 800d79a:	1852      	addeq	r2, r2, r1
 800d79c:	6022      	streq	r2, [r4, #0]
 800d79e:	6004      	str	r4, [r0, #0]
 800d7a0:	e7ec      	b.n	800d77c <_free_r+0x24>
 800d7a2:	4613      	mov	r3, r2
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	b10a      	cbz	r2, 800d7ac <_free_r+0x54>
 800d7a8:	42a2      	cmp	r2, r4
 800d7aa:	d9fa      	bls.n	800d7a2 <_free_r+0x4a>
 800d7ac:	6819      	ldr	r1, [r3, #0]
 800d7ae:	1858      	adds	r0, r3, r1
 800d7b0:	42a0      	cmp	r0, r4
 800d7b2:	d10b      	bne.n	800d7cc <_free_r+0x74>
 800d7b4:	6820      	ldr	r0, [r4, #0]
 800d7b6:	4401      	add	r1, r0
 800d7b8:	1858      	adds	r0, r3, r1
 800d7ba:	4282      	cmp	r2, r0
 800d7bc:	6019      	str	r1, [r3, #0]
 800d7be:	d1dd      	bne.n	800d77c <_free_r+0x24>
 800d7c0:	6810      	ldr	r0, [r2, #0]
 800d7c2:	6852      	ldr	r2, [r2, #4]
 800d7c4:	605a      	str	r2, [r3, #4]
 800d7c6:	4401      	add	r1, r0
 800d7c8:	6019      	str	r1, [r3, #0]
 800d7ca:	e7d7      	b.n	800d77c <_free_r+0x24>
 800d7cc:	d902      	bls.n	800d7d4 <_free_r+0x7c>
 800d7ce:	230c      	movs	r3, #12
 800d7d0:	602b      	str	r3, [r5, #0]
 800d7d2:	e7d3      	b.n	800d77c <_free_r+0x24>
 800d7d4:	6820      	ldr	r0, [r4, #0]
 800d7d6:	1821      	adds	r1, r4, r0
 800d7d8:	428a      	cmp	r2, r1
 800d7da:	bf04      	itt	eq
 800d7dc:	6811      	ldreq	r1, [r2, #0]
 800d7de:	6852      	ldreq	r2, [r2, #4]
 800d7e0:	6062      	str	r2, [r4, #4]
 800d7e2:	bf04      	itt	eq
 800d7e4:	1809      	addeq	r1, r1, r0
 800d7e6:	6021      	streq	r1, [r4, #0]
 800d7e8:	605c      	str	r4, [r3, #4]
 800d7ea:	e7c7      	b.n	800d77c <_free_r+0x24>
 800d7ec:	bd38      	pop	{r3, r4, r5, pc}
 800d7ee:	bf00      	nop
 800d7f0:	200003b4 	.word	0x200003b4

0800d7f4 <_malloc_r>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	1ccd      	adds	r5, r1, #3
 800d7f8:	f025 0503 	bic.w	r5, r5, #3
 800d7fc:	3508      	adds	r5, #8
 800d7fe:	2d0c      	cmp	r5, #12
 800d800:	bf38      	it	cc
 800d802:	250c      	movcc	r5, #12
 800d804:	2d00      	cmp	r5, #0
 800d806:	4606      	mov	r6, r0
 800d808:	db01      	blt.n	800d80e <_malloc_r+0x1a>
 800d80a:	42a9      	cmp	r1, r5
 800d80c:	d903      	bls.n	800d816 <_malloc_r+0x22>
 800d80e:	230c      	movs	r3, #12
 800d810:	6033      	str	r3, [r6, #0]
 800d812:	2000      	movs	r0, #0
 800d814:	bd70      	pop	{r4, r5, r6, pc}
 800d816:	f001 ffae 	bl	800f776 <__malloc_lock>
 800d81a:	4a21      	ldr	r2, [pc, #132]	; (800d8a0 <_malloc_r+0xac>)
 800d81c:	6814      	ldr	r4, [r2, #0]
 800d81e:	4621      	mov	r1, r4
 800d820:	b991      	cbnz	r1, 800d848 <_malloc_r+0x54>
 800d822:	4c20      	ldr	r4, [pc, #128]	; (800d8a4 <_malloc_r+0xb0>)
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	b91b      	cbnz	r3, 800d830 <_malloc_r+0x3c>
 800d828:	4630      	mov	r0, r6
 800d82a:	f000 fde9 	bl	800e400 <_sbrk_r>
 800d82e:	6020      	str	r0, [r4, #0]
 800d830:	4629      	mov	r1, r5
 800d832:	4630      	mov	r0, r6
 800d834:	f000 fde4 	bl	800e400 <_sbrk_r>
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	d124      	bne.n	800d886 <_malloc_r+0x92>
 800d83c:	230c      	movs	r3, #12
 800d83e:	6033      	str	r3, [r6, #0]
 800d840:	4630      	mov	r0, r6
 800d842:	f001 ff99 	bl	800f778 <__malloc_unlock>
 800d846:	e7e4      	b.n	800d812 <_malloc_r+0x1e>
 800d848:	680b      	ldr	r3, [r1, #0]
 800d84a:	1b5b      	subs	r3, r3, r5
 800d84c:	d418      	bmi.n	800d880 <_malloc_r+0x8c>
 800d84e:	2b0b      	cmp	r3, #11
 800d850:	d90f      	bls.n	800d872 <_malloc_r+0x7e>
 800d852:	600b      	str	r3, [r1, #0]
 800d854:	50cd      	str	r5, [r1, r3]
 800d856:	18cc      	adds	r4, r1, r3
 800d858:	4630      	mov	r0, r6
 800d85a:	f001 ff8d 	bl	800f778 <__malloc_unlock>
 800d85e:	f104 000b 	add.w	r0, r4, #11
 800d862:	1d23      	adds	r3, r4, #4
 800d864:	f020 0007 	bic.w	r0, r0, #7
 800d868:	1ac3      	subs	r3, r0, r3
 800d86a:	d0d3      	beq.n	800d814 <_malloc_r+0x20>
 800d86c:	425a      	negs	r2, r3
 800d86e:	50e2      	str	r2, [r4, r3]
 800d870:	e7d0      	b.n	800d814 <_malloc_r+0x20>
 800d872:	428c      	cmp	r4, r1
 800d874:	684b      	ldr	r3, [r1, #4]
 800d876:	bf16      	itet	ne
 800d878:	6063      	strne	r3, [r4, #4]
 800d87a:	6013      	streq	r3, [r2, #0]
 800d87c:	460c      	movne	r4, r1
 800d87e:	e7eb      	b.n	800d858 <_malloc_r+0x64>
 800d880:	460c      	mov	r4, r1
 800d882:	6849      	ldr	r1, [r1, #4]
 800d884:	e7cc      	b.n	800d820 <_malloc_r+0x2c>
 800d886:	1cc4      	adds	r4, r0, #3
 800d888:	f024 0403 	bic.w	r4, r4, #3
 800d88c:	42a0      	cmp	r0, r4
 800d88e:	d005      	beq.n	800d89c <_malloc_r+0xa8>
 800d890:	1a21      	subs	r1, r4, r0
 800d892:	4630      	mov	r0, r6
 800d894:	f000 fdb4 	bl	800e400 <_sbrk_r>
 800d898:	3001      	adds	r0, #1
 800d89a:	d0cf      	beq.n	800d83c <_malloc_r+0x48>
 800d89c:	6025      	str	r5, [r4, #0]
 800d89e:	e7db      	b.n	800d858 <_malloc_r+0x64>
 800d8a0:	200003b4 	.word	0x200003b4
 800d8a4:	200003b8 	.word	0x200003b8

0800d8a8 <__sfputc_r>:
 800d8a8:	6893      	ldr	r3, [r2, #8]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	b410      	push	{r4}
 800d8b0:	6093      	str	r3, [r2, #8]
 800d8b2:	da08      	bge.n	800d8c6 <__sfputc_r+0x1e>
 800d8b4:	6994      	ldr	r4, [r2, #24]
 800d8b6:	42a3      	cmp	r3, r4
 800d8b8:	db01      	blt.n	800d8be <__sfputc_r+0x16>
 800d8ba:	290a      	cmp	r1, #10
 800d8bc:	d103      	bne.n	800d8c6 <__sfputc_r+0x1e>
 800d8be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8c2:	f000 be11 	b.w	800e4e8 <__swbuf_r>
 800d8c6:	6813      	ldr	r3, [r2, #0]
 800d8c8:	1c58      	adds	r0, r3, #1
 800d8ca:	6010      	str	r0, [r2, #0]
 800d8cc:	7019      	strb	r1, [r3, #0]
 800d8ce:	4608      	mov	r0, r1
 800d8d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d8d4:	4770      	bx	lr

0800d8d6 <__sfputs_r>:
 800d8d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d8:	4606      	mov	r6, r0
 800d8da:	460f      	mov	r7, r1
 800d8dc:	4614      	mov	r4, r2
 800d8de:	18d5      	adds	r5, r2, r3
 800d8e0:	42ac      	cmp	r4, r5
 800d8e2:	d101      	bne.n	800d8e8 <__sfputs_r+0x12>
 800d8e4:	2000      	movs	r0, #0
 800d8e6:	e007      	b.n	800d8f8 <__sfputs_r+0x22>
 800d8e8:	463a      	mov	r2, r7
 800d8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f7ff ffda 	bl	800d8a8 <__sfputc_r>
 800d8f4:	1c43      	adds	r3, r0, #1
 800d8f6:	d1f3      	bne.n	800d8e0 <__sfputs_r+0xa>
 800d8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d8fc <_vfiprintf_r>:
 800d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d900:	460c      	mov	r4, r1
 800d902:	b09d      	sub	sp, #116	; 0x74
 800d904:	4617      	mov	r7, r2
 800d906:	461d      	mov	r5, r3
 800d908:	4606      	mov	r6, r0
 800d90a:	b118      	cbz	r0, 800d914 <_vfiprintf_r+0x18>
 800d90c:	6983      	ldr	r3, [r0, #24]
 800d90e:	b90b      	cbnz	r3, 800d914 <_vfiprintf_r+0x18>
 800d910:	f001 fe0a 	bl	800f528 <__sinit>
 800d914:	4b7c      	ldr	r3, [pc, #496]	; (800db08 <_vfiprintf_r+0x20c>)
 800d916:	429c      	cmp	r4, r3
 800d918:	d158      	bne.n	800d9cc <_vfiprintf_r+0xd0>
 800d91a:	6874      	ldr	r4, [r6, #4]
 800d91c:	89a3      	ldrh	r3, [r4, #12]
 800d91e:	0718      	lsls	r0, r3, #28
 800d920:	d55e      	bpl.n	800d9e0 <_vfiprintf_r+0xe4>
 800d922:	6923      	ldr	r3, [r4, #16]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d05b      	beq.n	800d9e0 <_vfiprintf_r+0xe4>
 800d928:	2300      	movs	r3, #0
 800d92a:	9309      	str	r3, [sp, #36]	; 0x24
 800d92c:	2320      	movs	r3, #32
 800d92e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d932:	2330      	movs	r3, #48	; 0x30
 800d934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d938:	9503      	str	r5, [sp, #12]
 800d93a:	f04f 0b01 	mov.w	fp, #1
 800d93e:	46b8      	mov	r8, r7
 800d940:	4645      	mov	r5, r8
 800d942:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d946:	b10b      	cbz	r3, 800d94c <_vfiprintf_r+0x50>
 800d948:	2b25      	cmp	r3, #37	; 0x25
 800d94a:	d154      	bne.n	800d9f6 <_vfiprintf_r+0xfa>
 800d94c:	ebb8 0a07 	subs.w	sl, r8, r7
 800d950:	d00b      	beq.n	800d96a <_vfiprintf_r+0x6e>
 800d952:	4653      	mov	r3, sl
 800d954:	463a      	mov	r2, r7
 800d956:	4621      	mov	r1, r4
 800d958:	4630      	mov	r0, r6
 800d95a:	f7ff ffbc 	bl	800d8d6 <__sfputs_r>
 800d95e:	3001      	adds	r0, #1
 800d960:	f000 80c2 	beq.w	800dae8 <_vfiprintf_r+0x1ec>
 800d964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d966:	4453      	add	r3, sl
 800d968:	9309      	str	r3, [sp, #36]	; 0x24
 800d96a:	f898 3000 	ldrb.w	r3, [r8]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	f000 80ba 	beq.w	800dae8 <_vfiprintf_r+0x1ec>
 800d974:	2300      	movs	r3, #0
 800d976:	f04f 32ff 	mov.w	r2, #4294967295
 800d97a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d97e:	9304      	str	r3, [sp, #16]
 800d980:	9307      	str	r3, [sp, #28]
 800d982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d986:	931a      	str	r3, [sp, #104]	; 0x68
 800d988:	46a8      	mov	r8, r5
 800d98a:	2205      	movs	r2, #5
 800d98c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800d990:	485e      	ldr	r0, [pc, #376]	; (800db0c <_vfiprintf_r+0x210>)
 800d992:	f7f2 fc45 	bl	8000220 <memchr>
 800d996:	9b04      	ldr	r3, [sp, #16]
 800d998:	bb78      	cbnz	r0, 800d9fa <_vfiprintf_r+0xfe>
 800d99a:	06d9      	lsls	r1, r3, #27
 800d99c:	bf44      	itt	mi
 800d99e:	2220      	movmi	r2, #32
 800d9a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9a4:	071a      	lsls	r2, r3, #28
 800d9a6:	bf44      	itt	mi
 800d9a8:	222b      	movmi	r2, #43	; 0x2b
 800d9aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d9ae:	782a      	ldrb	r2, [r5, #0]
 800d9b0:	2a2a      	cmp	r2, #42	; 0x2a
 800d9b2:	d02a      	beq.n	800da0a <_vfiprintf_r+0x10e>
 800d9b4:	9a07      	ldr	r2, [sp, #28]
 800d9b6:	46a8      	mov	r8, r5
 800d9b8:	2000      	movs	r0, #0
 800d9ba:	250a      	movs	r5, #10
 800d9bc:	4641      	mov	r1, r8
 800d9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9c2:	3b30      	subs	r3, #48	; 0x30
 800d9c4:	2b09      	cmp	r3, #9
 800d9c6:	d969      	bls.n	800da9c <_vfiprintf_r+0x1a0>
 800d9c8:	b360      	cbz	r0, 800da24 <_vfiprintf_r+0x128>
 800d9ca:	e024      	b.n	800da16 <_vfiprintf_r+0x11a>
 800d9cc:	4b50      	ldr	r3, [pc, #320]	; (800db10 <_vfiprintf_r+0x214>)
 800d9ce:	429c      	cmp	r4, r3
 800d9d0:	d101      	bne.n	800d9d6 <_vfiprintf_r+0xda>
 800d9d2:	68b4      	ldr	r4, [r6, #8]
 800d9d4:	e7a2      	b.n	800d91c <_vfiprintf_r+0x20>
 800d9d6:	4b4f      	ldr	r3, [pc, #316]	; (800db14 <_vfiprintf_r+0x218>)
 800d9d8:	429c      	cmp	r4, r3
 800d9da:	bf08      	it	eq
 800d9dc:	68f4      	ldreq	r4, [r6, #12]
 800d9de:	e79d      	b.n	800d91c <_vfiprintf_r+0x20>
 800d9e0:	4621      	mov	r1, r4
 800d9e2:	4630      	mov	r0, r6
 800d9e4:	f000 fde4 	bl	800e5b0 <__swsetup_r>
 800d9e8:	2800      	cmp	r0, #0
 800d9ea:	d09d      	beq.n	800d928 <_vfiprintf_r+0x2c>
 800d9ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f0:	b01d      	add	sp, #116	; 0x74
 800d9f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9f6:	46a8      	mov	r8, r5
 800d9f8:	e7a2      	b.n	800d940 <_vfiprintf_r+0x44>
 800d9fa:	4a44      	ldr	r2, [pc, #272]	; (800db0c <_vfiprintf_r+0x210>)
 800d9fc:	1a80      	subs	r0, r0, r2
 800d9fe:	fa0b f000 	lsl.w	r0, fp, r0
 800da02:	4318      	orrs	r0, r3
 800da04:	9004      	str	r0, [sp, #16]
 800da06:	4645      	mov	r5, r8
 800da08:	e7be      	b.n	800d988 <_vfiprintf_r+0x8c>
 800da0a:	9a03      	ldr	r2, [sp, #12]
 800da0c:	1d11      	adds	r1, r2, #4
 800da0e:	6812      	ldr	r2, [r2, #0]
 800da10:	9103      	str	r1, [sp, #12]
 800da12:	2a00      	cmp	r2, #0
 800da14:	db01      	blt.n	800da1a <_vfiprintf_r+0x11e>
 800da16:	9207      	str	r2, [sp, #28]
 800da18:	e004      	b.n	800da24 <_vfiprintf_r+0x128>
 800da1a:	4252      	negs	r2, r2
 800da1c:	f043 0302 	orr.w	r3, r3, #2
 800da20:	9207      	str	r2, [sp, #28]
 800da22:	9304      	str	r3, [sp, #16]
 800da24:	f898 3000 	ldrb.w	r3, [r8]
 800da28:	2b2e      	cmp	r3, #46	; 0x2e
 800da2a:	d10e      	bne.n	800da4a <_vfiprintf_r+0x14e>
 800da2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 800da30:	2b2a      	cmp	r3, #42	; 0x2a
 800da32:	d138      	bne.n	800daa6 <_vfiprintf_r+0x1aa>
 800da34:	9b03      	ldr	r3, [sp, #12]
 800da36:	1d1a      	adds	r2, r3, #4
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	9203      	str	r2, [sp, #12]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	bfb8      	it	lt
 800da40:	f04f 33ff 	movlt.w	r3, #4294967295
 800da44:	f108 0802 	add.w	r8, r8, #2
 800da48:	9305      	str	r3, [sp, #20]
 800da4a:	4d33      	ldr	r5, [pc, #204]	; (800db18 <_vfiprintf_r+0x21c>)
 800da4c:	f898 1000 	ldrb.w	r1, [r8]
 800da50:	2203      	movs	r2, #3
 800da52:	4628      	mov	r0, r5
 800da54:	f7f2 fbe4 	bl	8000220 <memchr>
 800da58:	b140      	cbz	r0, 800da6c <_vfiprintf_r+0x170>
 800da5a:	2340      	movs	r3, #64	; 0x40
 800da5c:	1b40      	subs	r0, r0, r5
 800da5e:	fa03 f000 	lsl.w	r0, r3, r0
 800da62:	9b04      	ldr	r3, [sp, #16]
 800da64:	4303      	orrs	r3, r0
 800da66:	f108 0801 	add.w	r8, r8, #1
 800da6a:	9304      	str	r3, [sp, #16]
 800da6c:	f898 1000 	ldrb.w	r1, [r8]
 800da70:	482a      	ldr	r0, [pc, #168]	; (800db1c <_vfiprintf_r+0x220>)
 800da72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da76:	2206      	movs	r2, #6
 800da78:	f108 0701 	add.w	r7, r8, #1
 800da7c:	f7f2 fbd0 	bl	8000220 <memchr>
 800da80:	2800      	cmp	r0, #0
 800da82:	d037      	beq.n	800daf4 <_vfiprintf_r+0x1f8>
 800da84:	4b26      	ldr	r3, [pc, #152]	; (800db20 <_vfiprintf_r+0x224>)
 800da86:	bb1b      	cbnz	r3, 800dad0 <_vfiprintf_r+0x1d4>
 800da88:	9b03      	ldr	r3, [sp, #12]
 800da8a:	3307      	adds	r3, #7
 800da8c:	f023 0307 	bic.w	r3, r3, #7
 800da90:	3308      	adds	r3, #8
 800da92:	9303      	str	r3, [sp, #12]
 800da94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da96:	444b      	add	r3, r9
 800da98:	9309      	str	r3, [sp, #36]	; 0x24
 800da9a:	e750      	b.n	800d93e <_vfiprintf_r+0x42>
 800da9c:	fb05 3202 	mla	r2, r5, r2, r3
 800daa0:	2001      	movs	r0, #1
 800daa2:	4688      	mov	r8, r1
 800daa4:	e78a      	b.n	800d9bc <_vfiprintf_r+0xc0>
 800daa6:	2300      	movs	r3, #0
 800daa8:	f108 0801 	add.w	r8, r8, #1
 800daac:	9305      	str	r3, [sp, #20]
 800daae:	4619      	mov	r1, r3
 800dab0:	250a      	movs	r5, #10
 800dab2:	4640      	mov	r0, r8
 800dab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dab8:	3a30      	subs	r2, #48	; 0x30
 800daba:	2a09      	cmp	r2, #9
 800dabc:	d903      	bls.n	800dac6 <_vfiprintf_r+0x1ca>
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d0c3      	beq.n	800da4a <_vfiprintf_r+0x14e>
 800dac2:	9105      	str	r1, [sp, #20]
 800dac4:	e7c1      	b.n	800da4a <_vfiprintf_r+0x14e>
 800dac6:	fb05 2101 	mla	r1, r5, r1, r2
 800daca:	2301      	movs	r3, #1
 800dacc:	4680      	mov	r8, r0
 800dace:	e7f0      	b.n	800dab2 <_vfiprintf_r+0x1b6>
 800dad0:	ab03      	add	r3, sp, #12
 800dad2:	9300      	str	r3, [sp, #0]
 800dad4:	4622      	mov	r2, r4
 800dad6:	4b13      	ldr	r3, [pc, #76]	; (800db24 <_vfiprintf_r+0x228>)
 800dad8:	a904      	add	r1, sp, #16
 800dada:	4630      	mov	r0, r6
 800dadc:	f000 f8b8 	bl	800dc50 <_printf_float>
 800dae0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dae4:	4681      	mov	r9, r0
 800dae6:	d1d5      	bne.n	800da94 <_vfiprintf_r+0x198>
 800dae8:	89a3      	ldrh	r3, [r4, #12]
 800daea:	065b      	lsls	r3, r3, #25
 800daec:	f53f af7e 	bmi.w	800d9ec <_vfiprintf_r+0xf0>
 800daf0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daf2:	e77d      	b.n	800d9f0 <_vfiprintf_r+0xf4>
 800daf4:	ab03      	add	r3, sp, #12
 800daf6:	9300      	str	r3, [sp, #0]
 800daf8:	4622      	mov	r2, r4
 800dafa:	4b0a      	ldr	r3, [pc, #40]	; (800db24 <_vfiprintf_r+0x228>)
 800dafc:	a904      	add	r1, sp, #16
 800dafe:	4630      	mov	r0, r6
 800db00:	f000 fb5c 	bl	800e1bc <_printf_i>
 800db04:	e7ec      	b.n	800dae0 <_vfiprintf_r+0x1e4>
 800db06:	bf00      	nop
 800db08:	080124b8 	.word	0x080124b8
 800db0c:	08012444 	.word	0x08012444
 800db10:	080124d8 	.word	0x080124d8
 800db14:	08012498 	.word	0x08012498
 800db18:	0801244a 	.word	0x0801244a
 800db1c:	0801244e 	.word	0x0801244e
 800db20:	0800dc51 	.word	0x0800dc51
 800db24:	0800d8d7 	.word	0x0800d8d7

0800db28 <__cvt>:
 800db28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	ec55 4b10 	vmov	r4, r5, d0
 800db30:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800db32:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db36:	2d00      	cmp	r5, #0
 800db38:	460e      	mov	r6, r1
 800db3a:	4691      	mov	r9, r2
 800db3c:	4619      	mov	r1, r3
 800db3e:	bfb8      	it	lt
 800db40:	4622      	movlt	r2, r4
 800db42:	462b      	mov	r3, r5
 800db44:	f027 0720 	bic.w	r7, r7, #32
 800db48:	bfbb      	ittet	lt
 800db4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db4e:	461d      	movlt	r5, r3
 800db50:	2300      	movge	r3, #0
 800db52:	232d      	movlt	r3, #45	; 0x2d
 800db54:	bfb8      	it	lt
 800db56:	4614      	movlt	r4, r2
 800db58:	2f46      	cmp	r7, #70	; 0x46
 800db5a:	700b      	strb	r3, [r1, #0]
 800db5c:	d004      	beq.n	800db68 <__cvt+0x40>
 800db5e:	2f45      	cmp	r7, #69	; 0x45
 800db60:	d100      	bne.n	800db64 <__cvt+0x3c>
 800db62:	3601      	adds	r6, #1
 800db64:	2102      	movs	r1, #2
 800db66:	e000      	b.n	800db6a <__cvt+0x42>
 800db68:	2103      	movs	r1, #3
 800db6a:	ab03      	add	r3, sp, #12
 800db6c:	9301      	str	r3, [sp, #4]
 800db6e:	ab02      	add	r3, sp, #8
 800db70:	9300      	str	r3, [sp, #0]
 800db72:	4632      	mov	r2, r6
 800db74:	4653      	mov	r3, sl
 800db76:	ec45 4b10 	vmov	d0, r4, r5
 800db7a:	f000 fe2d 	bl	800e7d8 <_dtoa_r>
 800db7e:	2f47      	cmp	r7, #71	; 0x47
 800db80:	4680      	mov	r8, r0
 800db82:	d102      	bne.n	800db8a <__cvt+0x62>
 800db84:	f019 0f01 	tst.w	r9, #1
 800db88:	d026      	beq.n	800dbd8 <__cvt+0xb0>
 800db8a:	2f46      	cmp	r7, #70	; 0x46
 800db8c:	eb08 0906 	add.w	r9, r8, r6
 800db90:	d111      	bne.n	800dbb6 <__cvt+0x8e>
 800db92:	f898 3000 	ldrb.w	r3, [r8]
 800db96:	2b30      	cmp	r3, #48	; 0x30
 800db98:	d10a      	bne.n	800dbb0 <__cvt+0x88>
 800db9a:	2200      	movs	r2, #0
 800db9c:	2300      	movs	r3, #0
 800db9e:	4620      	mov	r0, r4
 800dba0:	4629      	mov	r1, r5
 800dba2:	f7f2 ffb1 	bl	8000b08 <__aeabi_dcmpeq>
 800dba6:	b918      	cbnz	r0, 800dbb0 <__cvt+0x88>
 800dba8:	f1c6 0601 	rsb	r6, r6, #1
 800dbac:	f8ca 6000 	str.w	r6, [sl]
 800dbb0:	f8da 3000 	ldr.w	r3, [sl]
 800dbb4:	4499      	add	r9, r3
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4620      	mov	r0, r4
 800dbbc:	4629      	mov	r1, r5
 800dbbe:	f7f2 ffa3 	bl	8000b08 <__aeabi_dcmpeq>
 800dbc2:	b938      	cbnz	r0, 800dbd4 <__cvt+0xac>
 800dbc4:	2230      	movs	r2, #48	; 0x30
 800dbc6:	9b03      	ldr	r3, [sp, #12]
 800dbc8:	454b      	cmp	r3, r9
 800dbca:	d205      	bcs.n	800dbd8 <__cvt+0xb0>
 800dbcc:	1c59      	adds	r1, r3, #1
 800dbce:	9103      	str	r1, [sp, #12]
 800dbd0:	701a      	strb	r2, [r3, #0]
 800dbd2:	e7f8      	b.n	800dbc6 <__cvt+0x9e>
 800dbd4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbd8:	9b03      	ldr	r3, [sp, #12]
 800dbda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbdc:	eba3 0308 	sub.w	r3, r3, r8
 800dbe0:	4640      	mov	r0, r8
 800dbe2:	6013      	str	r3, [r2, #0]
 800dbe4:	b004      	add	sp, #16
 800dbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dbea <__exponent>:
 800dbea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbec:	2900      	cmp	r1, #0
 800dbee:	4604      	mov	r4, r0
 800dbf0:	bfba      	itte	lt
 800dbf2:	4249      	neglt	r1, r1
 800dbf4:	232d      	movlt	r3, #45	; 0x2d
 800dbf6:	232b      	movge	r3, #43	; 0x2b
 800dbf8:	2909      	cmp	r1, #9
 800dbfa:	f804 2b02 	strb.w	r2, [r4], #2
 800dbfe:	7043      	strb	r3, [r0, #1]
 800dc00:	dd20      	ble.n	800dc44 <__exponent+0x5a>
 800dc02:	f10d 0307 	add.w	r3, sp, #7
 800dc06:	461f      	mov	r7, r3
 800dc08:	260a      	movs	r6, #10
 800dc0a:	fb91 f5f6 	sdiv	r5, r1, r6
 800dc0e:	fb06 1115 	mls	r1, r6, r5, r1
 800dc12:	3130      	adds	r1, #48	; 0x30
 800dc14:	2d09      	cmp	r5, #9
 800dc16:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dc1a:	f103 32ff 	add.w	r2, r3, #4294967295
 800dc1e:	4629      	mov	r1, r5
 800dc20:	dc09      	bgt.n	800dc36 <__exponent+0x4c>
 800dc22:	3130      	adds	r1, #48	; 0x30
 800dc24:	3b02      	subs	r3, #2
 800dc26:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dc2a:	42bb      	cmp	r3, r7
 800dc2c:	4622      	mov	r2, r4
 800dc2e:	d304      	bcc.n	800dc3a <__exponent+0x50>
 800dc30:	1a10      	subs	r0, r2, r0
 800dc32:	b003      	add	sp, #12
 800dc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc36:	4613      	mov	r3, r2
 800dc38:	e7e7      	b.n	800dc0a <__exponent+0x20>
 800dc3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc3e:	f804 2b01 	strb.w	r2, [r4], #1
 800dc42:	e7f2      	b.n	800dc2a <__exponent+0x40>
 800dc44:	2330      	movs	r3, #48	; 0x30
 800dc46:	4419      	add	r1, r3
 800dc48:	7083      	strb	r3, [r0, #2]
 800dc4a:	1d02      	adds	r2, r0, #4
 800dc4c:	70c1      	strb	r1, [r0, #3]
 800dc4e:	e7ef      	b.n	800dc30 <__exponent+0x46>

0800dc50 <_printf_float>:
 800dc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc54:	b08d      	sub	sp, #52	; 0x34
 800dc56:	460c      	mov	r4, r1
 800dc58:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800dc5c:	4616      	mov	r6, r2
 800dc5e:	461f      	mov	r7, r3
 800dc60:	4605      	mov	r5, r0
 800dc62:	f001 fceb 	bl	800f63c <_localeconv_r>
 800dc66:	6803      	ldr	r3, [r0, #0]
 800dc68:	9304      	str	r3, [sp, #16]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7f2 fad0 	bl	8000210 <strlen>
 800dc70:	2300      	movs	r3, #0
 800dc72:	930a      	str	r3, [sp, #40]	; 0x28
 800dc74:	f8d8 3000 	ldr.w	r3, [r8]
 800dc78:	9005      	str	r0, [sp, #20]
 800dc7a:	3307      	adds	r3, #7
 800dc7c:	f023 0307 	bic.w	r3, r3, #7
 800dc80:	f103 0208 	add.w	r2, r3, #8
 800dc84:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dc88:	f8d4 b000 	ldr.w	fp, [r4]
 800dc8c:	f8c8 2000 	str.w	r2, [r8]
 800dc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc94:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc98:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dc9c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dca0:	9307      	str	r3, [sp, #28]
 800dca2:	f8cd 8018 	str.w	r8, [sp, #24]
 800dca6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcaa:	4ba7      	ldr	r3, [pc, #668]	; (800df48 <_printf_float+0x2f8>)
 800dcac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcb0:	f7f2 ff5c 	bl	8000b6c <__aeabi_dcmpun>
 800dcb4:	bb70      	cbnz	r0, 800dd14 <_printf_float+0xc4>
 800dcb6:	f04f 32ff 	mov.w	r2, #4294967295
 800dcba:	4ba3      	ldr	r3, [pc, #652]	; (800df48 <_printf_float+0x2f8>)
 800dcbc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcc0:	f7f2 ff36 	bl	8000b30 <__aeabi_dcmple>
 800dcc4:	bb30      	cbnz	r0, 800dd14 <_printf_float+0xc4>
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	2300      	movs	r3, #0
 800dcca:	4640      	mov	r0, r8
 800dccc:	4649      	mov	r1, r9
 800dcce:	f7f2 ff25 	bl	8000b1c <__aeabi_dcmplt>
 800dcd2:	b110      	cbz	r0, 800dcda <_printf_float+0x8a>
 800dcd4:	232d      	movs	r3, #45	; 0x2d
 800dcd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcda:	4a9c      	ldr	r2, [pc, #624]	; (800df4c <_printf_float+0x2fc>)
 800dcdc:	4b9c      	ldr	r3, [pc, #624]	; (800df50 <_printf_float+0x300>)
 800dcde:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dce2:	bf8c      	ite	hi
 800dce4:	4690      	movhi	r8, r2
 800dce6:	4698      	movls	r8, r3
 800dce8:	2303      	movs	r3, #3
 800dcea:	f02b 0204 	bic.w	r2, fp, #4
 800dcee:	6123      	str	r3, [r4, #16]
 800dcf0:	6022      	str	r2, [r4, #0]
 800dcf2:	f04f 0900 	mov.w	r9, #0
 800dcf6:	9700      	str	r7, [sp, #0]
 800dcf8:	4633      	mov	r3, r6
 800dcfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800dcfc:	4621      	mov	r1, r4
 800dcfe:	4628      	mov	r0, r5
 800dd00:	f000 f9e6 	bl	800e0d0 <_printf_common>
 800dd04:	3001      	adds	r0, #1
 800dd06:	f040 808d 	bne.w	800de24 <_printf_float+0x1d4>
 800dd0a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd0e:	b00d      	add	sp, #52	; 0x34
 800dd10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd14:	4642      	mov	r2, r8
 800dd16:	464b      	mov	r3, r9
 800dd18:	4640      	mov	r0, r8
 800dd1a:	4649      	mov	r1, r9
 800dd1c:	f7f2 ff26 	bl	8000b6c <__aeabi_dcmpun>
 800dd20:	b110      	cbz	r0, 800dd28 <_printf_float+0xd8>
 800dd22:	4a8c      	ldr	r2, [pc, #560]	; (800df54 <_printf_float+0x304>)
 800dd24:	4b8c      	ldr	r3, [pc, #560]	; (800df58 <_printf_float+0x308>)
 800dd26:	e7da      	b.n	800dcde <_printf_float+0x8e>
 800dd28:	6861      	ldr	r1, [r4, #4]
 800dd2a:	1c4b      	adds	r3, r1, #1
 800dd2c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dd30:	a80a      	add	r0, sp, #40	; 0x28
 800dd32:	d13e      	bne.n	800ddb2 <_printf_float+0x162>
 800dd34:	2306      	movs	r3, #6
 800dd36:	6063      	str	r3, [r4, #4]
 800dd38:	2300      	movs	r3, #0
 800dd3a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dd3e:	ab09      	add	r3, sp, #36	; 0x24
 800dd40:	9300      	str	r3, [sp, #0]
 800dd42:	ec49 8b10 	vmov	d0, r8, r9
 800dd46:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd4a:	6022      	str	r2, [r4, #0]
 800dd4c:	f8cd a004 	str.w	sl, [sp, #4]
 800dd50:	6861      	ldr	r1, [r4, #4]
 800dd52:	4628      	mov	r0, r5
 800dd54:	f7ff fee8 	bl	800db28 <__cvt>
 800dd58:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800dd5c:	2b47      	cmp	r3, #71	; 0x47
 800dd5e:	4680      	mov	r8, r0
 800dd60:	d109      	bne.n	800dd76 <_printf_float+0x126>
 800dd62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd64:	1cd8      	adds	r0, r3, #3
 800dd66:	db02      	blt.n	800dd6e <_printf_float+0x11e>
 800dd68:	6862      	ldr	r2, [r4, #4]
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	dd47      	ble.n	800ddfe <_printf_float+0x1ae>
 800dd6e:	f1aa 0a02 	sub.w	sl, sl, #2
 800dd72:	fa5f fa8a 	uxtb.w	sl, sl
 800dd76:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dd7a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd7c:	d824      	bhi.n	800ddc8 <_printf_float+0x178>
 800dd7e:	3901      	subs	r1, #1
 800dd80:	4652      	mov	r2, sl
 800dd82:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd86:	9109      	str	r1, [sp, #36]	; 0x24
 800dd88:	f7ff ff2f 	bl	800dbea <__exponent>
 800dd8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd8e:	1813      	adds	r3, r2, r0
 800dd90:	2a01      	cmp	r2, #1
 800dd92:	4681      	mov	r9, r0
 800dd94:	6123      	str	r3, [r4, #16]
 800dd96:	dc02      	bgt.n	800dd9e <_printf_float+0x14e>
 800dd98:	6822      	ldr	r2, [r4, #0]
 800dd9a:	07d1      	lsls	r1, r2, #31
 800dd9c:	d501      	bpl.n	800dda2 <_printf_float+0x152>
 800dd9e:	3301      	adds	r3, #1
 800dda0:	6123      	str	r3, [r4, #16]
 800dda2:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0a5      	beq.n	800dcf6 <_printf_float+0xa6>
 800ddaa:	232d      	movs	r3, #45	; 0x2d
 800ddac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddb0:	e7a1      	b.n	800dcf6 <_printf_float+0xa6>
 800ddb2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ddb6:	f000 8177 	beq.w	800e0a8 <_printf_float+0x458>
 800ddba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ddbe:	d1bb      	bne.n	800dd38 <_printf_float+0xe8>
 800ddc0:	2900      	cmp	r1, #0
 800ddc2:	d1b9      	bne.n	800dd38 <_printf_float+0xe8>
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	e7b6      	b.n	800dd36 <_printf_float+0xe6>
 800ddc8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ddcc:	d119      	bne.n	800de02 <_printf_float+0x1b2>
 800ddce:	2900      	cmp	r1, #0
 800ddd0:	6863      	ldr	r3, [r4, #4]
 800ddd2:	dd0c      	ble.n	800ddee <_printf_float+0x19e>
 800ddd4:	6121      	str	r1, [r4, #16]
 800ddd6:	b913      	cbnz	r3, 800ddde <_printf_float+0x18e>
 800ddd8:	6822      	ldr	r2, [r4, #0]
 800ddda:	07d2      	lsls	r2, r2, #31
 800dddc:	d502      	bpl.n	800dde4 <_printf_float+0x194>
 800ddde:	3301      	adds	r3, #1
 800dde0:	440b      	add	r3, r1
 800dde2:	6123      	str	r3, [r4, #16]
 800dde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dde6:	65a3      	str	r3, [r4, #88]	; 0x58
 800dde8:	f04f 0900 	mov.w	r9, #0
 800ddec:	e7d9      	b.n	800dda2 <_printf_float+0x152>
 800ddee:	b913      	cbnz	r3, 800ddf6 <_printf_float+0x1a6>
 800ddf0:	6822      	ldr	r2, [r4, #0]
 800ddf2:	07d0      	lsls	r0, r2, #31
 800ddf4:	d501      	bpl.n	800ddfa <_printf_float+0x1aa>
 800ddf6:	3302      	adds	r3, #2
 800ddf8:	e7f3      	b.n	800dde2 <_printf_float+0x192>
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e7f1      	b.n	800dde2 <_printf_float+0x192>
 800ddfe:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800de02:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800de06:	4293      	cmp	r3, r2
 800de08:	db05      	blt.n	800de16 <_printf_float+0x1c6>
 800de0a:	6822      	ldr	r2, [r4, #0]
 800de0c:	6123      	str	r3, [r4, #16]
 800de0e:	07d1      	lsls	r1, r2, #31
 800de10:	d5e8      	bpl.n	800dde4 <_printf_float+0x194>
 800de12:	3301      	adds	r3, #1
 800de14:	e7e5      	b.n	800dde2 <_printf_float+0x192>
 800de16:	2b00      	cmp	r3, #0
 800de18:	bfd4      	ite	le
 800de1a:	f1c3 0302 	rsble	r3, r3, #2
 800de1e:	2301      	movgt	r3, #1
 800de20:	4413      	add	r3, r2
 800de22:	e7de      	b.n	800dde2 <_printf_float+0x192>
 800de24:	6823      	ldr	r3, [r4, #0]
 800de26:	055a      	lsls	r2, r3, #21
 800de28:	d407      	bmi.n	800de3a <_printf_float+0x1ea>
 800de2a:	6923      	ldr	r3, [r4, #16]
 800de2c:	4642      	mov	r2, r8
 800de2e:	4631      	mov	r1, r6
 800de30:	4628      	mov	r0, r5
 800de32:	47b8      	blx	r7
 800de34:	3001      	adds	r0, #1
 800de36:	d12b      	bne.n	800de90 <_printf_float+0x240>
 800de38:	e767      	b.n	800dd0a <_printf_float+0xba>
 800de3a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800de3e:	f240 80dc 	bls.w	800dffa <_printf_float+0x3aa>
 800de42:	2200      	movs	r2, #0
 800de44:	2300      	movs	r3, #0
 800de46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de4a:	f7f2 fe5d 	bl	8000b08 <__aeabi_dcmpeq>
 800de4e:	2800      	cmp	r0, #0
 800de50:	d033      	beq.n	800deba <_printf_float+0x26a>
 800de52:	2301      	movs	r3, #1
 800de54:	4a41      	ldr	r2, [pc, #260]	; (800df5c <_printf_float+0x30c>)
 800de56:	4631      	mov	r1, r6
 800de58:	4628      	mov	r0, r5
 800de5a:	47b8      	blx	r7
 800de5c:	3001      	adds	r0, #1
 800de5e:	f43f af54 	beq.w	800dd0a <_printf_float+0xba>
 800de62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de66:	429a      	cmp	r2, r3
 800de68:	db02      	blt.n	800de70 <_printf_float+0x220>
 800de6a:	6823      	ldr	r3, [r4, #0]
 800de6c:	07d8      	lsls	r0, r3, #31
 800de6e:	d50f      	bpl.n	800de90 <_printf_float+0x240>
 800de70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de74:	4631      	mov	r1, r6
 800de76:	4628      	mov	r0, r5
 800de78:	47b8      	blx	r7
 800de7a:	3001      	adds	r0, #1
 800de7c:	f43f af45 	beq.w	800dd0a <_printf_float+0xba>
 800de80:	f04f 0800 	mov.w	r8, #0
 800de84:	f104 091a 	add.w	r9, r4, #26
 800de88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de8a:	3b01      	subs	r3, #1
 800de8c:	4543      	cmp	r3, r8
 800de8e:	dc09      	bgt.n	800dea4 <_printf_float+0x254>
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	079b      	lsls	r3, r3, #30
 800de94:	f100 8103 	bmi.w	800e09e <_printf_float+0x44e>
 800de98:	68e0      	ldr	r0, [r4, #12]
 800de9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de9c:	4298      	cmp	r0, r3
 800de9e:	bfb8      	it	lt
 800dea0:	4618      	movlt	r0, r3
 800dea2:	e734      	b.n	800dd0e <_printf_float+0xbe>
 800dea4:	2301      	movs	r3, #1
 800dea6:	464a      	mov	r2, r9
 800dea8:	4631      	mov	r1, r6
 800deaa:	4628      	mov	r0, r5
 800deac:	47b8      	blx	r7
 800deae:	3001      	adds	r0, #1
 800deb0:	f43f af2b 	beq.w	800dd0a <_printf_float+0xba>
 800deb4:	f108 0801 	add.w	r8, r8, #1
 800deb8:	e7e6      	b.n	800de88 <_printf_float+0x238>
 800deba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800debc:	2b00      	cmp	r3, #0
 800debe:	dc2b      	bgt.n	800df18 <_printf_float+0x2c8>
 800dec0:	2301      	movs	r3, #1
 800dec2:	4a26      	ldr	r2, [pc, #152]	; (800df5c <_printf_float+0x30c>)
 800dec4:	4631      	mov	r1, r6
 800dec6:	4628      	mov	r0, r5
 800dec8:	47b8      	blx	r7
 800deca:	3001      	adds	r0, #1
 800decc:	f43f af1d 	beq.w	800dd0a <_printf_float+0xba>
 800ded0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded2:	b923      	cbnz	r3, 800dede <_printf_float+0x28e>
 800ded4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ded6:	b913      	cbnz	r3, 800dede <_printf_float+0x28e>
 800ded8:	6823      	ldr	r3, [r4, #0]
 800deda:	07d9      	lsls	r1, r3, #31
 800dedc:	d5d8      	bpl.n	800de90 <_printf_float+0x240>
 800dede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dee2:	4631      	mov	r1, r6
 800dee4:	4628      	mov	r0, r5
 800dee6:	47b8      	blx	r7
 800dee8:	3001      	adds	r0, #1
 800deea:	f43f af0e 	beq.w	800dd0a <_printf_float+0xba>
 800deee:	f04f 0900 	mov.w	r9, #0
 800def2:	f104 0a1a 	add.w	sl, r4, #26
 800def6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def8:	425b      	negs	r3, r3
 800defa:	454b      	cmp	r3, r9
 800defc:	dc01      	bgt.n	800df02 <_printf_float+0x2b2>
 800defe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df00:	e794      	b.n	800de2c <_printf_float+0x1dc>
 800df02:	2301      	movs	r3, #1
 800df04:	4652      	mov	r2, sl
 800df06:	4631      	mov	r1, r6
 800df08:	4628      	mov	r0, r5
 800df0a:	47b8      	blx	r7
 800df0c:	3001      	adds	r0, #1
 800df0e:	f43f aefc 	beq.w	800dd0a <_printf_float+0xba>
 800df12:	f109 0901 	add.w	r9, r9, #1
 800df16:	e7ee      	b.n	800def6 <_printf_float+0x2a6>
 800df18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df1a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df1c:	429a      	cmp	r2, r3
 800df1e:	bfa8      	it	ge
 800df20:	461a      	movge	r2, r3
 800df22:	2a00      	cmp	r2, #0
 800df24:	4691      	mov	r9, r2
 800df26:	dd07      	ble.n	800df38 <_printf_float+0x2e8>
 800df28:	4613      	mov	r3, r2
 800df2a:	4631      	mov	r1, r6
 800df2c:	4642      	mov	r2, r8
 800df2e:	4628      	mov	r0, r5
 800df30:	47b8      	blx	r7
 800df32:	3001      	adds	r0, #1
 800df34:	f43f aee9 	beq.w	800dd0a <_printf_float+0xba>
 800df38:	f104 031a 	add.w	r3, r4, #26
 800df3c:	f04f 0b00 	mov.w	fp, #0
 800df40:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df44:	9306      	str	r3, [sp, #24]
 800df46:	e015      	b.n	800df74 <_printf_float+0x324>
 800df48:	7fefffff 	.word	0x7fefffff
 800df4c:	08012459 	.word	0x08012459
 800df50:	08012455 	.word	0x08012455
 800df54:	08012461 	.word	0x08012461
 800df58:	0801245d 	.word	0x0801245d
 800df5c:	08012465 	.word	0x08012465
 800df60:	2301      	movs	r3, #1
 800df62:	9a06      	ldr	r2, [sp, #24]
 800df64:	4631      	mov	r1, r6
 800df66:	4628      	mov	r0, r5
 800df68:	47b8      	blx	r7
 800df6a:	3001      	adds	r0, #1
 800df6c:	f43f aecd 	beq.w	800dd0a <_printf_float+0xba>
 800df70:	f10b 0b01 	add.w	fp, fp, #1
 800df74:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800df78:	ebaa 0309 	sub.w	r3, sl, r9
 800df7c:	455b      	cmp	r3, fp
 800df7e:	dcef      	bgt.n	800df60 <_printf_float+0x310>
 800df80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df84:	429a      	cmp	r2, r3
 800df86:	44d0      	add	r8, sl
 800df88:	db15      	blt.n	800dfb6 <_printf_float+0x366>
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	07da      	lsls	r2, r3, #31
 800df8e:	d412      	bmi.n	800dfb6 <_printf_float+0x366>
 800df90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df92:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df94:	eba3 020a 	sub.w	r2, r3, sl
 800df98:	eba3 0a01 	sub.w	sl, r3, r1
 800df9c:	4592      	cmp	sl, r2
 800df9e:	bfa8      	it	ge
 800dfa0:	4692      	movge	sl, r2
 800dfa2:	f1ba 0f00 	cmp.w	sl, #0
 800dfa6:	dc0e      	bgt.n	800dfc6 <_printf_float+0x376>
 800dfa8:	f04f 0800 	mov.w	r8, #0
 800dfac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dfb0:	f104 091a 	add.w	r9, r4, #26
 800dfb4:	e019      	b.n	800dfea <_printf_float+0x39a>
 800dfb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dfba:	4631      	mov	r1, r6
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	47b8      	blx	r7
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	d1e5      	bne.n	800df90 <_printf_float+0x340>
 800dfc4:	e6a1      	b.n	800dd0a <_printf_float+0xba>
 800dfc6:	4653      	mov	r3, sl
 800dfc8:	4642      	mov	r2, r8
 800dfca:	4631      	mov	r1, r6
 800dfcc:	4628      	mov	r0, r5
 800dfce:	47b8      	blx	r7
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d1e9      	bne.n	800dfa8 <_printf_float+0x358>
 800dfd4:	e699      	b.n	800dd0a <_printf_float+0xba>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	464a      	mov	r2, r9
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4628      	mov	r0, r5
 800dfde:	47b8      	blx	r7
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	f43f ae92 	beq.w	800dd0a <_printf_float+0xba>
 800dfe6:	f108 0801 	add.w	r8, r8, #1
 800dfea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfee:	1a9b      	subs	r3, r3, r2
 800dff0:	eba3 030a 	sub.w	r3, r3, sl
 800dff4:	4543      	cmp	r3, r8
 800dff6:	dcee      	bgt.n	800dfd6 <_printf_float+0x386>
 800dff8:	e74a      	b.n	800de90 <_printf_float+0x240>
 800dffa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dffc:	2a01      	cmp	r2, #1
 800dffe:	dc01      	bgt.n	800e004 <_printf_float+0x3b4>
 800e000:	07db      	lsls	r3, r3, #31
 800e002:	d53a      	bpl.n	800e07a <_printf_float+0x42a>
 800e004:	2301      	movs	r3, #1
 800e006:	4642      	mov	r2, r8
 800e008:	4631      	mov	r1, r6
 800e00a:	4628      	mov	r0, r5
 800e00c:	47b8      	blx	r7
 800e00e:	3001      	adds	r0, #1
 800e010:	f43f ae7b 	beq.w	800dd0a <_printf_float+0xba>
 800e014:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e018:	4631      	mov	r1, r6
 800e01a:	4628      	mov	r0, r5
 800e01c:	47b8      	blx	r7
 800e01e:	3001      	adds	r0, #1
 800e020:	f108 0801 	add.w	r8, r8, #1
 800e024:	f43f ae71 	beq.w	800dd0a <_printf_float+0xba>
 800e028:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e02a:	2200      	movs	r2, #0
 800e02c:	f103 3aff 	add.w	sl, r3, #4294967295
 800e030:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e034:	2300      	movs	r3, #0
 800e036:	f7f2 fd67 	bl	8000b08 <__aeabi_dcmpeq>
 800e03a:	b9c8      	cbnz	r0, 800e070 <_printf_float+0x420>
 800e03c:	4653      	mov	r3, sl
 800e03e:	4642      	mov	r2, r8
 800e040:	4631      	mov	r1, r6
 800e042:	4628      	mov	r0, r5
 800e044:	47b8      	blx	r7
 800e046:	3001      	adds	r0, #1
 800e048:	d10e      	bne.n	800e068 <_printf_float+0x418>
 800e04a:	e65e      	b.n	800dd0a <_printf_float+0xba>
 800e04c:	2301      	movs	r3, #1
 800e04e:	4652      	mov	r2, sl
 800e050:	4631      	mov	r1, r6
 800e052:	4628      	mov	r0, r5
 800e054:	47b8      	blx	r7
 800e056:	3001      	adds	r0, #1
 800e058:	f43f ae57 	beq.w	800dd0a <_printf_float+0xba>
 800e05c:	f108 0801 	add.w	r8, r8, #1
 800e060:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e062:	3b01      	subs	r3, #1
 800e064:	4543      	cmp	r3, r8
 800e066:	dcf1      	bgt.n	800e04c <_printf_float+0x3fc>
 800e068:	464b      	mov	r3, r9
 800e06a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e06e:	e6de      	b.n	800de2e <_printf_float+0x1de>
 800e070:	f04f 0800 	mov.w	r8, #0
 800e074:	f104 0a1a 	add.w	sl, r4, #26
 800e078:	e7f2      	b.n	800e060 <_printf_float+0x410>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e7df      	b.n	800e03e <_printf_float+0x3ee>
 800e07e:	2301      	movs	r3, #1
 800e080:	464a      	mov	r2, r9
 800e082:	4631      	mov	r1, r6
 800e084:	4628      	mov	r0, r5
 800e086:	47b8      	blx	r7
 800e088:	3001      	adds	r0, #1
 800e08a:	f43f ae3e 	beq.w	800dd0a <_printf_float+0xba>
 800e08e:	f108 0801 	add.w	r8, r8, #1
 800e092:	68e3      	ldr	r3, [r4, #12]
 800e094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e096:	1a9b      	subs	r3, r3, r2
 800e098:	4543      	cmp	r3, r8
 800e09a:	dcf0      	bgt.n	800e07e <_printf_float+0x42e>
 800e09c:	e6fc      	b.n	800de98 <_printf_float+0x248>
 800e09e:	f04f 0800 	mov.w	r8, #0
 800e0a2:	f104 0919 	add.w	r9, r4, #25
 800e0a6:	e7f4      	b.n	800e092 <_printf_float+0x442>
 800e0a8:	2900      	cmp	r1, #0
 800e0aa:	f43f ae8b 	beq.w	800ddc4 <_printf_float+0x174>
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e0b4:	ab09      	add	r3, sp, #36	; 0x24
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	ec49 8b10 	vmov	d0, r8, r9
 800e0bc:	6022      	str	r2, [r4, #0]
 800e0be:	f8cd a004 	str.w	sl, [sp, #4]
 800e0c2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0c6:	4628      	mov	r0, r5
 800e0c8:	f7ff fd2e 	bl	800db28 <__cvt>
 800e0cc:	4680      	mov	r8, r0
 800e0ce:	e648      	b.n	800dd62 <_printf_float+0x112>

0800e0d0 <_printf_common>:
 800e0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0d4:	4691      	mov	r9, r2
 800e0d6:	461f      	mov	r7, r3
 800e0d8:	688a      	ldr	r2, [r1, #8]
 800e0da:	690b      	ldr	r3, [r1, #16]
 800e0dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	bfb8      	it	lt
 800e0e4:	4613      	movlt	r3, r2
 800e0e6:	f8c9 3000 	str.w	r3, [r9]
 800e0ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	b112      	cbz	r2, 800e0fa <_printf_common+0x2a>
 800e0f4:	3301      	adds	r3, #1
 800e0f6:	f8c9 3000 	str.w	r3, [r9]
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	0699      	lsls	r1, r3, #26
 800e0fe:	bf42      	ittt	mi
 800e100:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e104:	3302      	addmi	r3, #2
 800e106:	f8c9 3000 	strmi.w	r3, [r9]
 800e10a:	6825      	ldr	r5, [r4, #0]
 800e10c:	f015 0506 	ands.w	r5, r5, #6
 800e110:	d107      	bne.n	800e122 <_printf_common+0x52>
 800e112:	f104 0a19 	add.w	sl, r4, #25
 800e116:	68e3      	ldr	r3, [r4, #12]
 800e118:	f8d9 2000 	ldr.w	r2, [r9]
 800e11c:	1a9b      	subs	r3, r3, r2
 800e11e:	42ab      	cmp	r3, r5
 800e120:	dc28      	bgt.n	800e174 <_printf_common+0xa4>
 800e122:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e126:	6822      	ldr	r2, [r4, #0]
 800e128:	3300      	adds	r3, #0
 800e12a:	bf18      	it	ne
 800e12c:	2301      	movne	r3, #1
 800e12e:	0692      	lsls	r2, r2, #26
 800e130:	d42d      	bmi.n	800e18e <_printf_common+0xbe>
 800e132:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e136:	4639      	mov	r1, r7
 800e138:	4630      	mov	r0, r6
 800e13a:	47c0      	blx	r8
 800e13c:	3001      	adds	r0, #1
 800e13e:	d020      	beq.n	800e182 <_printf_common+0xb2>
 800e140:	6823      	ldr	r3, [r4, #0]
 800e142:	68e5      	ldr	r5, [r4, #12]
 800e144:	f8d9 2000 	ldr.w	r2, [r9]
 800e148:	f003 0306 	and.w	r3, r3, #6
 800e14c:	2b04      	cmp	r3, #4
 800e14e:	bf08      	it	eq
 800e150:	1aad      	subeq	r5, r5, r2
 800e152:	68a3      	ldr	r3, [r4, #8]
 800e154:	6922      	ldr	r2, [r4, #16]
 800e156:	bf0c      	ite	eq
 800e158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e15c:	2500      	movne	r5, #0
 800e15e:	4293      	cmp	r3, r2
 800e160:	bfc4      	itt	gt
 800e162:	1a9b      	subgt	r3, r3, r2
 800e164:	18ed      	addgt	r5, r5, r3
 800e166:	f04f 0900 	mov.w	r9, #0
 800e16a:	341a      	adds	r4, #26
 800e16c:	454d      	cmp	r5, r9
 800e16e:	d11a      	bne.n	800e1a6 <_printf_common+0xd6>
 800e170:	2000      	movs	r0, #0
 800e172:	e008      	b.n	800e186 <_printf_common+0xb6>
 800e174:	2301      	movs	r3, #1
 800e176:	4652      	mov	r2, sl
 800e178:	4639      	mov	r1, r7
 800e17a:	4630      	mov	r0, r6
 800e17c:	47c0      	blx	r8
 800e17e:	3001      	adds	r0, #1
 800e180:	d103      	bne.n	800e18a <_printf_common+0xba>
 800e182:	f04f 30ff 	mov.w	r0, #4294967295
 800e186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e18a:	3501      	adds	r5, #1
 800e18c:	e7c3      	b.n	800e116 <_printf_common+0x46>
 800e18e:	18e1      	adds	r1, r4, r3
 800e190:	1c5a      	adds	r2, r3, #1
 800e192:	2030      	movs	r0, #48	; 0x30
 800e194:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e198:	4422      	add	r2, r4
 800e19a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e19e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1a2:	3302      	adds	r3, #2
 800e1a4:	e7c5      	b.n	800e132 <_printf_common+0x62>
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	4639      	mov	r1, r7
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	47c0      	blx	r8
 800e1b0:	3001      	adds	r0, #1
 800e1b2:	d0e6      	beq.n	800e182 <_printf_common+0xb2>
 800e1b4:	f109 0901 	add.w	r9, r9, #1
 800e1b8:	e7d8      	b.n	800e16c <_printf_common+0x9c>
	...

0800e1bc <_printf_i>:
 800e1bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1c0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	7e09      	ldrb	r1, [r1, #24]
 800e1c8:	b085      	sub	sp, #20
 800e1ca:	296e      	cmp	r1, #110	; 0x6e
 800e1cc:	4617      	mov	r7, r2
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	4698      	mov	r8, r3
 800e1d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1d4:	f000 80b3 	beq.w	800e33e <_printf_i+0x182>
 800e1d8:	d822      	bhi.n	800e220 <_printf_i+0x64>
 800e1da:	2963      	cmp	r1, #99	; 0x63
 800e1dc:	d036      	beq.n	800e24c <_printf_i+0x90>
 800e1de:	d80a      	bhi.n	800e1f6 <_printf_i+0x3a>
 800e1e0:	2900      	cmp	r1, #0
 800e1e2:	f000 80b9 	beq.w	800e358 <_printf_i+0x19c>
 800e1e6:	2958      	cmp	r1, #88	; 0x58
 800e1e8:	f000 8083 	beq.w	800e2f2 <_printf_i+0x136>
 800e1ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1f0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e1f4:	e032      	b.n	800e25c <_printf_i+0xa0>
 800e1f6:	2964      	cmp	r1, #100	; 0x64
 800e1f8:	d001      	beq.n	800e1fe <_printf_i+0x42>
 800e1fa:	2969      	cmp	r1, #105	; 0x69
 800e1fc:	d1f6      	bne.n	800e1ec <_printf_i+0x30>
 800e1fe:	6820      	ldr	r0, [r4, #0]
 800e200:	6813      	ldr	r3, [r2, #0]
 800e202:	0605      	lsls	r5, r0, #24
 800e204:	f103 0104 	add.w	r1, r3, #4
 800e208:	d52a      	bpl.n	800e260 <_printf_i+0xa4>
 800e20a:	681b      	ldr	r3, [r3, #0]
 800e20c:	6011      	str	r1, [r2, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	da03      	bge.n	800e21a <_printf_i+0x5e>
 800e212:	222d      	movs	r2, #45	; 0x2d
 800e214:	425b      	negs	r3, r3
 800e216:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e21a:	486f      	ldr	r0, [pc, #444]	; (800e3d8 <_printf_i+0x21c>)
 800e21c:	220a      	movs	r2, #10
 800e21e:	e039      	b.n	800e294 <_printf_i+0xd8>
 800e220:	2973      	cmp	r1, #115	; 0x73
 800e222:	f000 809d 	beq.w	800e360 <_printf_i+0x1a4>
 800e226:	d808      	bhi.n	800e23a <_printf_i+0x7e>
 800e228:	296f      	cmp	r1, #111	; 0x6f
 800e22a:	d020      	beq.n	800e26e <_printf_i+0xb2>
 800e22c:	2970      	cmp	r1, #112	; 0x70
 800e22e:	d1dd      	bne.n	800e1ec <_printf_i+0x30>
 800e230:	6823      	ldr	r3, [r4, #0]
 800e232:	f043 0320 	orr.w	r3, r3, #32
 800e236:	6023      	str	r3, [r4, #0]
 800e238:	e003      	b.n	800e242 <_printf_i+0x86>
 800e23a:	2975      	cmp	r1, #117	; 0x75
 800e23c:	d017      	beq.n	800e26e <_printf_i+0xb2>
 800e23e:	2978      	cmp	r1, #120	; 0x78
 800e240:	d1d4      	bne.n	800e1ec <_printf_i+0x30>
 800e242:	2378      	movs	r3, #120	; 0x78
 800e244:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e248:	4864      	ldr	r0, [pc, #400]	; (800e3dc <_printf_i+0x220>)
 800e24a:	e055      	b.n	800e2f8 <_printf_i+0x13c>
 800e24c:	6813      	ldr	r3, [r2, #0]
 800e24e:	1d19      	adds	r1, r3, #4
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	6011      	str	r1, [r2, #0]
 800e254:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e258:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e25c:	2301      	movs	r3, #1
 800e25e:	e08c      	b.n	800e37a <_printf_i+0x1be>
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	6011      	str	r1, [r2, #0]
 800e264:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e268:	bf18      	it	ne
 800e26a:	b21b      	sxthne	r3, r3
 800e26c:	e7cf      	b.n	800e20e <_printf_i+0x52>
 800e26e:	6813      	ldr	r3, [r2, #0]
 800e270:	6825      	ldr	r5, [r4, #0]
 800e272:	1d18      	adds	r0, r3, #4
 800e274:	6010      	str	r0, [r2, #0]
 800e276:	0628      	lsls	r0, r5, #24
 800e278:	d501      	bpl.n	800e27e <_printf_i+0xc2>
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	e002      	b.n	800e284 <_printf_i+0xc8>
 800e27e:	0668      	lsls	r0, r5, #25
 800e280:	d5fb      	bpl.n	800e27a <_printf_i+0xbe>
 800e282:	881b      	ldrh	r3, [r3, #0]
 800e284:	4854      	ldr	r0, [pc, #336]	; (800e3d8 <_printf_i+0x21c>)
 800e286:	296f      	cmp	r1, #111	; 0x6f
 800e288:	bf14      	ite	ne
 800e28a:	220a      	movne	r2, #10
 800e28c:	2208      	moveq	r2, #8
 800e28e:	2100      	movs	r1, #0
 800e290:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e294:	6865      	ldr	r5, [r4, #4]
 800e296:	60a5      	str	r5, [r4, #8]
 800e298:	2d00      	cmp	r5, #0
 800e29a:	f2c0 8095 	blt.w	800e3c8 <_printf_i+0x20c>
 800e29e:	6821      	ldr	r1, [r4, #0]
 800e2a0:	f021 0104 	bic.w	r1, r1, #4
 800e2a4:	6021      	str	r1, [r4, #0]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d13d      	bne.n	800e326 <_printf_i+0x16a>
 800e2aa:	2d00      	cmp	r5, #0
 800e2ac:	f040 808e 	bne.w	800e3cc <_printf_i+0x210>
 800e2b0:	4665      	mov	r5, ip
 800e2b2:	2a08      	cmp	r2, #8
 800e2b4:	d10b      	bne.n	800e2ce <_printf_i+0x112>
 800e2b6:	6823      	ldr	r3, [r4, #0]
 800e2b8:	07db      	lsls	r3, r3, #31
 800e2ba:	d508      	bpl.n	800e2ce <_printf_i+0x112>
 800e2bc:	6923      	ldr	r3, [r4, #16]
 800e2be:	6862      	ldr	r2, [r4, #4]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	bfde      	ittt	le
 800e2c4:	2330      	movle	r3, #48	; 0x30
 800e2c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e2ce:	ebac 0305 	sub.w	r3, ip, r5
 800e2d2:	6123      	str	r3, [r4, #16]
 800e2d4:	f8cd 8000 	str.w	r8, [sp]
 800e2d8:	463b      	mov	r3, r7
 800e2da:	aa03      	add	r2, sp, #12
 800e2dc:	4621      	mov	r1, r4
 800e2de:	4630      	mov	r0, r6
 800e2e0:	f7ff fef6 	bl	800e0d0 <_printf_common>
 800e2e4:	3001      	adds	r0, #1
 800e2e6:	d14d      	bne.n	800e384 <_printf_i+0x1c8>
 800e2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ec:	b005      	add	sp, #20
 800e2ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2f2:	4839      	ldr	r0, [pc, #228]	; (800e3d8 <_printf_i+0x21c>)
 800e2f4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e2f8:	6813      	ldr	r3, [r2, #0]
 800e2fa:	6821      	ldr	r1, [r4, #0]
 800e2fc:	1d1d      	adds	r5, r3, #4
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	6015      	str	r5, [r2, #0]
 800e302:	060a      	lsls	r2, r1, #24
 800e304:	d50b      	bpl.n	800e31e <_printf_i+0x162>
 800e306:	07ca      	lsls	r2, r1, #31
 800e308:	bf44      	itt	mi
 800e30a:	f041 0120 	orrmi.w	r1, r1, #32
 800e30e:	6021      	strmi	r1, [r4, #0]
 800e310:	b91b      	cbnz	r3, 800e31a <_printf_i+0x15e>
 800e312:	6822      	ldr	r2, [r4, #0]
 800e314:	f022 0220 	bic.w	r2, r2, #32
 800e318:	6022      	str	r2, [r4, #0]
 800e31a:	2210      	movs	r2, #16
 800e31c:	e7b7      	b.n	800e28e <_printf_i+0xd2>
 800e31e:	064d      	lsls	r5, r1, #25
 800e320:	bf48      	it	mi
 800e322:	b29b      	uxthmi	r3, r3
 800e324:	e7ef      	b.n	800e306 <_printf_i+0x14a>
 800e326:	4665      	mov	r5, ip
 800e328:	fbb3 f1f2 	udiv	r1, r3, r2
 800e32c:	fb02 3311 	mls	r3, r2, r1, r3
 800e330:	5cc3      	ldrb	r3, [r0, r3]
 800e332:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e336:	460b      	mov	r3, r1
 800e338:	2900      	cmp	r1, #0
 800e33a:	d1f5      	bne.n	800e328 <_printf_i+0x16c>
 800e33c:	e7b9      	b.n	800e2b2 <_printf_i+0xf6>
 800e33e:	6813      	ldr	r3, [r2, #0]
 800e340:	6825      	ldr	r5, [r4, #0]
 800e342:	6961      	ldr	r1, [r4, #20]
 800e344:	1d18      	adds	r0, r3, #4
 800e346:	6010      	str	r0, [r2, #0]
 800e348:	0628      	lsls	r0, r5, #24
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	d501      	bpl.n	800e352 <_printf_i+0x196>
 800e34e:	6019      	str	r1, [r3, #0]
 800e350:	e002      	b.n	800e358 <_printf_i+0x19c>
 800e352:	066a      	lsls	r2, r5, #25
 800e354:	d5fb      	bpl.n	800e34e <_printf_i+0x192>
 800e356:	8019      	strh	r1, [r3, #0]
 800e358:	2300      	movs	r3, #0
 800e35a:	6123      	str	r3, [r4, #16]
 800e35c:	4665      	mov	r5, ip
 800e35e:	e7b9      	b.n	800e2d4 <_printf_i+0x118>
 800e360:	6813      	ldr	r3, [r2, #0]
 800e362:	1d19      	adds	r1, r3, #4
 800e364:	6011      	str	r1, [r2, #0]
 800e366:	681d      	ldr	r5, [r3, #0]
 800e368:	6862      	ldr	r2, [r4, #4]
 800e36a:	2100      	movs	r1, #0
 800e36c:	4628      	mov	r0, r5
 800e36e:	f7f1 ff57 	bl	8000220 <memchr>
 800e372:	b108      	cbz	r0, 800e378 <_printf_i+0x1bc>
 800e374:	1b40      	subs	r0, r0, r5
 800e376:	6060      	str	r0, [r4, #4]
 800e378:	6863      	ldr	r3, [r4, #4]
 800e37a:	6123      	str	r3, [r4, #16]
 800e37c:	2300      	movs	r3, #0
 800e37e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e382:	e7a7      	b.n	800e2d4 <_printf_i+0x118>
 800e384:	6923      	ldr	r3, [r4, #16]
 800e386:	462a      	mov	r2, r5
 800e388:	4639      	mov	r1, r7
 800e38a:	4630      	mov	r0, r6
 800e38c:	47c0      	blx	r8
 800e38e:	3001      	adds	r0, #1
 800e390:	d0aa      	beq.n	800e2e8 <_printf_i+0x12c>
 800e392:	6823      	ldr	r3, [r4, #0]
 800e394:	079b      	lsls	r3, r3, #30
 800e396:	d413      	bmi.n	800e3c0 <_printf_i+0x204>
 800e398:	68e0      	ldr	r0, [r4, #12]
 800e39a:	9b03      	ldr	r3, [sp, #12]
 800e39c:	4298      	cmp	r0, r3
 800e39e:	bfb8      	it	lt
 800e3a0:	4618      	movlt	r0, r3
 800e3a2:	e7a3      	b.n	800e2ec <_printf_i+0x130>
 800e3a4:	2301      	movs	r3, #1
 800e3a6:	464a      	mov	r2, r9
 800e3a8:	4639      	mov	r1, r7
 800e3aa:	4630      	mov	r0, r6
 800e3ac:	47c0      	blx	r8
 800e3ae:	3001      	adds	r0, #1
 800e3b0:	d09a      	beq.n	800e2e8 <_printf_i+0x12c>
 800e3b2:	3501      	adds	r5, #1
 800e3b4:	68e3      	ldr	r3, [r4, #12]
 800e3b6:	9a03      	ldr	r2, [sp, #12]
 800e3b8:	1a9b      	subs	r3, r3, r2
 800e3ba:	42ab      	cmp	r3, r5
 800e3bc:	dcf2      	bgt.n	800e3a4 <_printf_i+0x1e8>
 800e3be:	e7eb      	b.n	800e398 <_printf_i+0x1dc>
 800e3c0:	2500      	movs	r5, #0
 800e3c2:	f104 0919 	add.w	r9, r4, #25
 800e3c6:	e7f5      	b.n	800e3b4 <_printf_i+0x1f8>
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d1ac      	bne.n	800e326 <_printf_i+0x16a>
 800e3cc:	7803      	ldrb	r3, [r0, #0]
 800e3ce:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3d6:	e76c      	b.n	800e2b2 <_printf_i+0xf6>
 800e3d8:	08012467 	.word	0x08012467
 800e3dc:	08012478 	.word	0x08012478

0800e3e0 <copysign>:
 800e3e0:	ec51 0b10 	vmov	r0, r1, d0
 800e3e4:	ee11 0a90 	vmov	r0, s3
 800e3e8:	ee10 2a10 	vmov	r2, s0
 800e3ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e3f0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e3f4:	ea41 0300 	orr.w	r3, r1, r0
 800e3f8:	ec43 2b10 	vmov	d0, r2, r3
 800e3fc:	4770      	bx	lr
	...

0800e400 <_sbrk_r>:
 800e400:	b538      	push	{r3, r4, r5, lr}
 800e402:	4c06      	ldr	r4, [pc, #24]	; (800e41c <_sbrk_r+0x1c>)
 800e404:	2300      	movs	r3, #0
 800e406:	4605      	mov	r5, r0
 800e408:	4608      	mov	r0, r1
 800e40a:	6023      	str	r3, [r4, #0]
 800e40c:	f7f5 fb9c 	bl	8003b48 <_sbrk>
 800e410:	1c43      	adds	r3, r0, #1
 800e412:	d102      	bne.n	800e41a <_sbrk_r+0x1a>
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	b103      	cbz	r3, 800e41a <_sbrk_r+0x1a>
 800e418:	602b      	str	r3, [r5, #0]
 800e41a:	bd38      	pop	{r3, r4, r5, pc}
 800e41c:	2000232c 	.word	0x2000232c

0800e420 <siprintf>:
 800e420:	b40e      	push	{r1, r2, r3}
 800e422:	b500      	push	{lr}
 800e424:	b09c      	sub	sp, #112	; 0x70
 800e426:	ab1d      	add	r3, sp, #116	; 0x74
 800e428:	9002      	str	r0, [sp, #8]
 800e42a:	9006      	str	r0, [sp, #24]
 800e42c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e430:	4809      	ldr	r0, [pc, #36]	; (800e458 <siprintf+0x38>)
 800e432:	9107      	str	r1, [sp, #28]
 800e434:	9104      	str	r1, [sp, #16]
 800e436:	4909      	ldr	r1, [pc, #36]	; (800e45c <siprintf+0x3c>)
 800e438:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43c:	9105      	str	r1, [sp, #20]
 800e43e:	6800      	ldr	r0, [r0, #0]
 800e440:	9301      	str	r3, [sp, #4]
 800e442:	a902      	add	r1, sp, #8
 800e444:	f001 fd02 	bl	800fe4c <_svfiprintf_r>
 800e448:	9b02      	ldr	r3, [sp, #8]
 800e44a:	2200      	movs	r2, #0
 800e44c:	701a      	strb	r2, [r3, #0]
 800e44e:	b01c      	add	sp, #112	; 0x70
 800e450:	f85d eb04 	ldr.w	lr, [sp], #4
 800e454:	b003      	add	sp, #12
 800e456:	4770      	bx	lr
 800e458:	200001b0 	.word	0x200001b0
 800e45c:	ffff0208 	.word	0xffff0208

0800e460 <__sread>:
 800e460:	b510      	push	{r4, lr}
 800e462:	460c      	mov	r4, r1
 800e464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e468:	f001 fde8 	bl	801003c <_read_r>
 800e46c:	2800      	cmp	r0, #0
 800e46e:	bfab      	itete	ge
 800e470:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e472:	89a3      	ldrhlt	r3, [r4, #12]
 800e474:	181b      	addge	r3, r3, r0
 800e476:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e47a:	bfac      	ite	ge
 800e47c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e47e:	81a3      	strhlt	r3, [r4, #12]
 800e480:	bd10      	pop	{r4, pc}

0800e482 <__swrite>:
 800e482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e486:	461f      	mov	r7, r3
 800e488:	898b      	ldrh	r3, [r1, #12]
 800e48a:	05db      	lsls	r3, r3, #23
 800e48c:	4605      	mov	r5, r0
 800e48e:	460c      	mov	r4, r1
 800e490:	4616      	mov	r6, r2
 800e492:	d505      	bpl.n	800e4a0 <__swrite+0x1e>
 800e494:	2302      	movs	r3, #2
 800e496:	2200      	movs	r2, #0
 800e498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e49c:	f001 f8dc 	bl	800f658 <_lseek_r>
 800e4a0:	89a3      	ldrh	r3, [r4, #12]
 800e4a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4aa:	81a3      	strh	r3, [r4, #12]
 800e4ac:	4632      	mov	r2, r6
 800e4ae:	463b      	mov	r3, r7
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4b6:	f000 b869 	b.w	800e58c <_write_r>

0800e4ba <__sseek>:
 800e4ba:	b510      	push	{r4, lr}
 800e4bc:	460c      	mov	r4, r1
 800e4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4c2:	f001 f8c9 	bl	800f658 <_lseek_r>
 800e4c6:	1c43      	adds	r3, r0, #1
 800e4c8:	89a3      	ldrh	r3, [r4, #12]
 800e4ca:	bf15      	itete	ne
 800e4cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800e4ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e4d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e4d6:	81a3      	strheq	r3, [r4, #12]
 800e4d8:	bf18      	it	ne
 800e4da:	81a3      	strhne	r3, [r4, #12]
 800e4dc:	bd10      	pop	{r4, pc}

0800e4de <__sclose>:
 800e4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4e2:	f000 b8db 	b.w	800e69c <_close_r>
	...

0800e4e8 <__swbuf_r>:
 800e4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ea:	460e      	mov	r6, r1
 800e4ec:	4614      	mov	r4, r2
 800e4ee:	4605      	mov	r5, r0
 800e4f0:	b118      	cbz	r0, 800e4fa <__swbuf_r+0x12>
 800e4f2:	6983      	ldr	r3, [r0, #24]
 800e4f4:	b90b      	cbnz	r3, 800e4fa <__swbuf_r+0x12>
 800e4f6:	f001 f817 	bl	800f528 <__sinit>
 800e4fa:	4b21      	ldr	r3, [pc, #132]	; (800e580 <__swbuf_r+0x98>)
 800e4fc:	429c      	cmp	r4, r3
 800e4fe:	d12a      	bne.n	800e556 <__swbuf_r+0x6e>
 800e500:	686c      	ldr	r4, [r5, #4]
 800e502:	69a3      	ldr	r3, [r4, #24]
 800e504:	60a3      	str	r3, [r4, #8]
 800e506:	89a3      	ldrh	r3, [r4, #12]
 800e508:	071a      	lsls	r2, r3, #28
 800e50a:	d52e      	bpl.n	800e56a <__swbuf_r+0x82>
 800e50c:	6923      	ldr	r3, [r4, #16]
 800e50e:	b363      	cbz	r3, 800e56a <__swbuf_r+0x82>
 800e510:	6923      	ldr	r3, [r4, #16]
 800e512:	6820      	ldr	r0, [r4, #0]
 800e514:	1ac0      	subs	r0, r0, r3
 800e516:	6963      	ldr	r3, [r4, #20]
 800e518:	b2f6      	uxtb	r6, r6
 800e51a:	4283      	cmp	r3, r0
 800e51c:	4637      	mov	r7, r6
 800e51e:	dc04      	bgt.n	800e52a <__swbuf_r+0x42>
 800e520:	4621      	mov	r1, r4
 800e522:	4628      	mov	r0, r5
 800e524:	f000 ff96 	bl	800f454 <_fflush_r>
 800e528:	bb28      	cbnz	r0, 800e576 <__swbuf_r+0x8e>
 800e52a:	68a3      	ldr	r3, [r4, #8]
 800e52c:	3b01      	subs	r3, #1
 800e52e:	60a3      	str	r3, [r4, #8]
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	1c5a      	adds	r2, r3, #1
 800e534:	6022      	str	r2, [r4, #0]
 800e536:	701e      	strb	r6, [r3, #0]
 800e538:	6963      	ldr	r3, [r4, #20]
 800e53a:	3001      	adds	r0, #1
 800e53c:	4283      	cmp	r3, r0
 800e53e:	d004      	beq.n	800e54a <__swbuf_r+0x62>
 800e540:	89a3      	ldrh	r3, [r4, #12]
 800e542:	07db      	lsls	r3, r3, #31
 800e544:	d519      	bpl.n	800e57a <__swbuf_r+0x92>
 800e546:	2e0a      	cmp	r6, #10
 800e548:	d117      	bne.n	800e57a <__swbuf_r+0x92>
 800e54a:	4621      	mov	r1, r4
 800e54c:	4628      	mov	r0, r5
 800e54e:	f000 ff81 	bl	800f454 <_fflush_r>
 800e552:	b190      	cbz	r0, 800e57a <__swbuf_r+0x92>
 800e554:	e00f      	b.n	800e576 <__swbuf_r+0x8e>
 800e556:	4b0b      	ldr	r3, [pc, #44]	; (800e584 <__swbuf_r+0x9c>)
 800e558:	429c      	cmp	r4, r3
 800e55a:	d101      	bne.n	800e560 <__swbuf_r+0x78>
 800e55c:	68ac      	ldr	r4, [r5, #8]
 800e55e:	e7d0      	b.n	800e502 <__swbuf_r+0x1a>
 800e560:	4b09      	ldr	r3, [pc, #36]	; (800e588 <__swbuf_r+0xa0>)
 800e562:	429c      	cmp	r4, r3
 800e564:	bf08      	it	eq
 800e566:	68ec      	ldreq	r4, [r5, #12]
 800e568:	e7cb      	b.n	800e502 <__swbuf_r+0x1a>
 800e56a:	4621      	mov	r1, r4
 800e56c:	4628      	mov	r0, r5
 800e56e:	f000 f81f 	bl	800e5b0 <__swsetup_r>
 800e572:	2800      	cmp	r0, #0
 800e574:	d0cc      	beq.n	800e510 <__swbuf_r+0x28>
 800e576:	f04f 37ff 	mov.w	r7, #4294967295
 800e57a:	4638      	mov	r0, r7
 800e57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e57e:	bf00      	nop
 800e580:	080124b8 	.word	0x080124b8
 800e584:	080124d8 	.word	0x080124d8
 800e588:	08012498 	.word	0x08012498

0800e58c <_write_r>:
 800e58c:	b538      	push	{r3, r4, r5, lr}
 800e58e:	4c07      	ldr	r4, [pc, #28]	; (800e5ac <_write_r+0x20>)
 800e590:	4605      	mov	r5, r0
 800e592:	4608      	mov	r0, r1
 800e594:	4611      	mov	r1, r2
 800e596:	2200      	movs	r2, #0
 800e598:	6022      	str	r2, [r4, #0]
 800e59a:	461a      	mov	r2, r3
 800e59c:	f7f5 fa83 	bl	8003aa6 <_write>
 800e5a0:	1c43      	adds	r3, r0, #1
 800e5a2:	d102      	bne.n	800e5aa <_write_r+0x1e>
 800e5a4:	6823      	ldr	r3, [r4, #0]
 800e5a6:	b103      	cbz	r3, 800e5aa <_write_r+0x1e>
 800e5a8:	602b      	str	r3, [r5, #0]
 800e5aa:	bd38      	pop	{r3, r4, r5, pc}
 800e5ac:	2000232c 	.word	0x2000232c

0800e5b0 <__swsetup_r>:
 800e5b0:	4b32      	ldr	r3, [pc, #200]	; (800e67c <__swsetup_r+0xcc>)
 800e5b2:	b570      	push	{r4, r5, r6, lr}
 800e5b4:	681d      	ldr	r5, [r3, #0]
 800e5b6:	4606      	mov	r6, r0
 800e5b8:	460c      	mov	r4, r1
 800e5ba:	b125      	cbz	r5, 800e5c6 <__swsetup_r+0x16>
 800e5bc:	69ab      	ldr	r3, [r5, #24]
 800e5be:	b913      	cbnz	r3, 800e5c6 <__swsetup_r+0x16>
 800e5c0:	4628      	mov	r0, r5
 800e5c2:	f000 ffb1 	bl	800f528 <__sinit>
 800e5c6:	4b2e      	ldr	r3, [pc, #184]	; (800e680 <__swsetup_r+0xd0>)
 800e5c8:	429c      	cmp	r4, r3
 800e5ca:	d10f      	bne.n	800e5ec <__swsetup_r+0x3c>
 800e5cc:	686c      	ldr	r4, [r5, #4]
 800e5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	0715      	lsls	r5, r2, #28
 800e5d6:	d42c      	bmi.n	800e632 <__swsetup_r+0x82>
 800e5d8:	06d0      	lsls	r0, r2, #27
 800e5da:	d411      	bmi.n	800e600 <__swsetup_r+0x50>
 800e5dc:	2209      	movs	r2, #9
 800e5de:	6032      	str	r2, [r6, #0]
 800e5e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5e4:	81a3      	strh	r3, [r4, #12]
 800e5e6:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ea:	e03e      	b.n	800e66a <__swsetup_r+0xba>
 800e5ec:	4b25      	ldr	r3, [pc, #148]	; (800e684 <__swsetup_r+0xd4>)
 800e5ee:	429c      	cmp	r4, r3
 800e5f0:	d101      	bne.n	800e5f6 <__swsetup_r+0x46>
 800e5f2:	68ac      	ldr	r4, [r5, #8]
 800e5f4:	e7eb      	b.n	800e5ce <__swsetup_r+0x1e>
 800e5f6:	4b24      	ldr	r3, [pc, #144]	; (800e688 <__swsetup_r+0xd8>)
 800e5f8:	429c      	cmp	r4, r3
 800e5fa:	bf08      	it	eq
 800e5fc:	68ec      	ldreq	r4, [r5, #12]
 800e5fe:	e7e6      	b.n	800e5ce <__swsetup_r+0x1e>
 800e600:	0751      	lsls	r1, r2, #29
 800e602:	d512      	bpl.n	800e62a <__swsetup_r+0x7a>
 800e604:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e606:	b141      	cbz	r1, 800e61a <__swsetup_r+0x6a>
 800e608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e60c:	4299      	cmp	r1, r3
 800e60e:	d002      	beq.n	800e616 <__swsetup_r+0x66>
 800e610:	4630      	mov	r0, r6
 800e612:	f7ff f8a1 	bl	800d758 <_free_r>
 800e616:	2300      	movs	r3, #0
 800e618:	6363      	str	r3, [r4, #52]	; 0x34
 800e61a:	89a3      	ldrh	r3, [r4, #12]
 800e61c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e620:	81a3      	strh	r3, [r4, #12]
 800e622:	2300      	movs	r3, #0
 800e624:	6063      	str	r3, [r4, #4]
 800e626:	6923      	ldr	r3, [r4, #16]
 800e628:	6023      	str	r3, [r4, #0]
 800e62a:	89a3      	ldrh	r3, [r4, #12]
 800e62c:	f043 0308 	orr.w	r3, r3, #8
 800e630:	81a3      	strh	r3, [r4, #12]
 800e632:	6923      	ldr	r3, [r4, #16]
 800e634:	b94b      	cbnz	r3, 800e64a <__swsetup_r+0x9a>
 800e636:	89a3      	ldrh	r3, [r4, #12]
 800e638:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e63c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e640:	d003      	beq.n	800e64a <__swsetup_r+0x9a>
 800e642:	4621      	mov	r1, r4
 800e644:	4630      	mov	r0, r6
 800e646:	f001 f83d 	bl	800f6c4 <__smakebuf_r>
 800e64a:	89a2      	ldrh	r2, [r4, #12]
 800e64c:	f012 0301 	ands.w	r3, r2, #1
 800e650:	d00c      	beq.n	800e66c <__swsetup_r+0xbc>
 800e652:	2300      	movs	r3, #0
 800e654:	60a3      	str	r3, [r4, #8]
 800e656:	6963      	ldr	r3, [r4, #20]
 800e658:	425b      	negs	r3, r3
 800e65a:	61a3      	str	r3, [r4, #24]
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	b953      	cbnz	r3, 800e676 <__swsetup_r+0xc6>
 800e660:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e664:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e668:	d1ba      	bne.n	800e5e0 <__swsetup_r+0x30>
 800e66a:	bd70      	pop	{r4, r5, r6, pc}
 800e66c:	0792      	lsls	r2, r2, #30
 800e66e:	bf58      	it	pl
 800e670:	6963      	ldrpl	r3, [r4, #20]
 800e672:	60a3      	str	r3, [r4, #8]
 800e674:	e7f2      	b.n	800e65c <__swsetup_r+0xac>
 800e676:	2000      	movs	r0, #0
 800e678:	e7f7      	b.n	800e66a <__swsetup_r+0xba>
 800e67a:	bf00      	nop
 800e67c:	200001b0 	.word	0x200001b0
 800e680:	080124b8 	.word	0x080124b8
 800e684:	080124d8 	.word	0x080124d8
 800e688:	08012498 	.word	0x08012498

0800e68c <abort>:
 800e68c:	b508      	push	{r3, lr}
 800e68e:	2006      	movs	r0, #6
 800e690:	f001 fd0e 	bl	80100b0 <raise>
 800e694:	2001      	movs	r0, #1
 800e696:	f7f5 f9df 	bl	8003a58 <_exit>
	...

0800e69c <_close_r>:
 800e69c:	b538      	push	{r3, r4, r5, lr}
 800e69e:	4c06      	ldr	r4, [pc, #24]	; (800e6b8 <_close_r+0x1c>)
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	4605      	mov	r5, r0
 800e6a4:	4608      	mov	r0, r1
 800e6a6:	6023      	str	r3, [r4, #0]
 800e6a8:	f7f5 fa19 	bl	8003ade <_close>
 800e6ac:	1c43      	adds	r3, r0, #1
 800e6ae:	d102      	bne.n	800e6b6 <_close_r+0x1a>
 800e6b0:	6823      	ldr	r3, [r4, #0]
 800e6b2:	b103      	cbz	r3, 800e6b6 <_close_r+0x1a>
 800e6b4:	602b      	str	r3, [r5, #0]
 800e6b6:	bd38      	pop	{r3, r4, r5, pc}
 800e6b8:	2000232c 	.word	0x2000232c

0800e6bc <quorem>:
 800e6bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6c0:	6903      	ldr	r3, [r0, #16]
 800e6c2:	690c      	ldr	r4, [r1, #16]
 800e6c4:	42a3      	cmp	r3, r4
 800e6c6:	4680      	mov	r8, r0
 800e6c8:	f2c0 8082 	blt.w	800e7d0 <quorem+0x114>
 800e6cc:	3c01      	subs	r4, #1
 800e6ce:	f101 0714 	add.w	r7, r1, #20
 800e6d2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e6d6:	f100 0614 	add.w	r6, r0, #20
 800e6da:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e6de:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e6e2:	eb06 030c 	add.w	r3, r6, ip
 800e6e6:	3501      	adds	r5, #1
 800e6e8:	eb07 090c 	add.w	r9, r7, ip
 800e6ec:	9301      	str	r3, [sp, #4]
 800e6ee:	fbb0 f5f5 	udiv	r5, r0, r5
 800e6f2:	b395      	cbz	r5, 800e75a <quorem+0x9e>
 800e6f4:	f04f 0a00 	mov.w	sl, #0
 800e6f8:	4638      	mov	r0, r7
 800e6fa:	46b6      	mov	lr, r6
 800e6fc:	46d3      	mov	fp, sl
 800e6fe:	f850 2b04 	ldr.w	r2, [r0], #4
 800e702:	b293      	uxth	r3, r2
 800e704:	fb05 a303 	mla	r3, r5, r3, sl
 800e708:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e70c:	b29b      	uxth	r3, r3
 800e70e:	ebab 0303 	sub.w	r3, fp, r3
 800e712:	0c12      	lsrs	r2, r2, #16
 800e714:	f8de b000 	ldr.w	fp, [lr]
 800e718:	fb05 a202 	mla	r2, r5, r2, sl
 800e71c:	fa13 f38b 	uxtah	r3, r3, fp
 800e720:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e724:	fa1f fb82 	uxth.w	fp, r2
 800e728:	f8de 2000 	ldr.w	r2, [lr]
 800e72c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e730:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e734:	b29b      	uxth	r3, r3
 800e736:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e73a:	4581      	cmp	r9, r0
 800e73c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e740:	f84e 3b04 	str.w	r3, [lr], #4
 800e744:	d2db      	bcs.n	800e6fe <quorem+0x42>
 800e746:	f856 300c 	ldr.w	r3, [r6, ip]
 800e74a:	b933      	cbnz	r3, 800e75a <quorem+0x9e>
 800e74c:	9b01      	ldr	r3, [sp, #4]
 800e74e:	3b04      	subs	r3, #4
 800e750:	429e      	cmp	r6, r3
 800e752:	461a      	mov	r2, r3
 800e754:	d330      	bcc.n	800e7b8 <quorem+0xfc>
 800e756:	f8c8 4010 	str.w	r4, [r8, #16]
 800e75a:	4640      	mov	r0, r8
 800e75c:	f001 fa22 	bl	800fba4 <__mcmp>
 800e760:	2800      	cmp	r0, #0
 800e762:	db25      	blt.n	800e7b0 <quorem+0xf4>
 800e764:	3501      	adds	r5, #1
 800e766:	4630      	mov	r0, r6
 800e768:	f04f 0c00 	mov.w	ip, #0
 800e76c:	f857 2b04 	ldr.w	r2, [r7], #4
 800e770:	f8d0 e000 	ldr.w	lr, [r0]
 800e774:	b293      	uxth	r3, r2
 800e776:	ebac 0303 	sub.w	r3, ip, r3
 800e77a:	0c12      	lsrs	r2, r2, #16
 800e77c:	fa13 f38e 	uxtah	r3, r3, lr
 800e780:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e784:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e788:	b29b      	uxth	r3, r3
 800e78a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e78e:	45b9      	cmp	r9, r7
 800e790:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e794:	f840 3b04 	str.w	r3, [r0], #4
 800e798:	d2e8      	bcs.n	800e76c <quorem+0xb0>
 800e79a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e79e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e7a2:	b92a      	cbnz	r2, 800e7b0 <quorem+0xf4>
 800e7a4:	3b04      	subs	r3, #4
 800e7a6:	429e      	cmp	r6, r3
 800e7a8:	461a      	mov	r2, r3
 800e7aa:	d30b      	bcc.n	800e7c4 <quorem+0x108>
 800e7ac:	f8c8 4010 	str.w	r4, [r8, #16]
 800e7b0:	4628      	mov	r0, r5
 800e7b2:	b003      	add	sp, #12
 800e7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7b8:	6812      	ldr	r2, [r2, #0]
 800e7ba:	3b04      	subs	r3, #4
 800e7bc:	2a00      	cmp	r2, #0
 800e7be:	d1ca      	bne.n	800e756 <quorem+0x9a>
 800e7c0:	3c01      	subs	r4, #1
 800e7c2:	e7c5      	b.n	800e750 <quorem+0x94>
 800e7c4:	6812      	ldr	r2, [r2, #0]
 800e7c6:	3b04      	subs	r3, #4
 800e7c8:	2a00      	cmp	r2, #0
 800e7ca:	d1ef      	bne.n	800e7ac <quorem+0xf0>
 800e7cc:	3c01      	subs	r4, #1
 800e7ce:	e7ea      	b.n	800e7a6 <quorem+0xea>
 800e7d0:	2000      	movs	r0, #0
 800e7d2:	e7ee      	b.n	800e7b2 <quorem+0xf6>
 800e7d4:	0000      	movs	r0, r0
	...

0800e7d8 <_dtoa_r>:
 800e7d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7dc:	ec57 6b10 	vmov	r6, r7, d0
 800e7e0:	b097      	sub	sp, #92	; 0x5c
 800e7e2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e7e4:	9106      	str	r1, [sp, #24]
 800e7e6:	4604      	mov	r4, r0
 800e7e8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e7ea:	9312      	str	r3, [sp, #72]	; 0x48
 800e7ec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e7f0:	e9cd 6700 	strd	r6, r7, [sp]
 800e7f4:	b93d      	cbnz	r5, 800e806 <_dtoa_r+0x2e>
 800e7f6:	2010      	movs	r0, #16
 800e7f8:	f7fe ff8a 	bl	800d710 <malloc>
 800e7fc:	6260      	str	r0, [r4, #36]	; 0x24
 800e7fe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e802:	6005      	str	r5, [r0, #0]
 800e804:	60c5      	str	r5, [r0, #12]
 800e806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e808:	6819      	ldr	r1, [r3, #0]
 800e80a:	b151      	cbz	r1, 800e822 <_dtoa_r+0x4a>
 800e80c:	685a      	ldr	r2, [r3, #4]
 800e80e:	604a      	str	r2, [r1, #4]
 800e810:	2301      	movs	r3, #1
 800e812:	4093      	lsls	r3, r2
 800e814:	608b      	str	r3, [r1, #8]
 800e816:	4620      	mov	r0, r4
 800e818:	f000 ffe3 	bl	800f7e2 <_Bfree>
 800e81c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e81e:	2200      	movs	r2, #0
 800e820:	601a      	str	r2, [r3, #0]
 800e822:	1e3b      	subs	r3, r7, #0
 800e824:	bfbb      	ittet	lt
 800e826:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e82a:	9301      	strlt	r3, [sp, #4]
 800e82c:	2300      	movge	r3, #0
 800e82e:	2201      	movlt	r2, #1
 800e830:	bfac      	ite	ge
 800e832:	f8c8 3000 	strge.w	r3, [r8]
 800e836:	f8c8 2000 	strlt.w	r2, [r8]
 800e83a:	4baf      	ldr	r3, [pc, #700]	; (800eaf8 <_dtoa_r+0x320>)
 800e83c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e840:	ea33 0308 	bics.w	r3, r3, r8
 800e844:	d114      	bne.n	800e870 <_dtoa_r+0x98>
 800e846:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e848:	f242 730f 	movw	r3, #9999	; 0x270f
 800e84c:	6013      	str	r3, [r2, #0]
 800e84e:	9b00      	ldr	r3, [sp, #0]
 800e850:	b923      	cbnz	r3, 800e85c <_dtoa_r+0x84>
 800e852:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e856:	2800      	cmp	r0, #0
 800e858:	f000 8542 	beq.w	800f2e0 <_dtoa_r+0xb08>
 800e85c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e85e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800eb0c <_dtoa_r+0x334>
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 8544 	beq.w	800f2f0 <_dtoa_r+0xb18>
 800e868:	f10b 0303 	add.w	r3, fp, #3
 800e86c:	f000 bd3e 	b.w	800f2ec <_dtoa_r+0xb14>
 800e870:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e874:	2200      	movs	r2, #0
 800e876:	2300      	movs	r3, #0
 800e878:	4630      	mov	r0, r6
 800e87a:	4639      	mov	r1, r7
 800e87c:	f7f2 f944 	bl	8000b08 <__aeabi_dcmpeq>
 800e880:	4681      	mov	r9, r0
 800e882:	b168      	cbz	r0, 800e8a0 <_dtoa_r+0xc8>
 800e884:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e886:	2301      	movs	r3, #1
 800e888:	6013      	str	r3, [r2, #0]
 800e88a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	f000 8524 	beq.w	800f2da <_dtoa_r+0xb02>
 800e892:	4b9a      	ldr	r3, [pc, #616]	; (800eafc <_dtoa_r+0x324>)
 800e894:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e896:	f103 3bff 	add.w	fp, r3, #4294967295
 800e89a:	6013      	str	r3, [r2, #0]
 800e89c:	f000 bd28 	b.w	800f2f0 <_dtoa_r+0xb18>
 800e8a0:	aa14      	add	r2, sp, #80	; 0x50
 800e8a2:	a915      	add	r1, sp, #84	; 0x54
 800e8a4:	ec47 6b10 	vmov	d0, r6, r7
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	f001 f9f2 	bl	800fc92 <__d2b>
 800e8ae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e8b2:	9004      	str	r0, [sp, #16]
 800e8b4:	2d00      	cmp	r5, #0
 800e8b6:	d07c      	beq.n	800e9b2 <_dtoa_r+0x1da>
 800e8b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e8bc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e8c0:	46b2      	mov	sl, r6
 800e8c2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e8c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e8ca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	4b8b      	ldr	r3, [pc, #556]	; (800eb00 <_dtoa_r+0x328>)
 800e8d2:	4650      	mov	r0, sl
 800e8d4:	4659      	mov	r1, fp
 800e8d6:	f7f1 fcf7 	bl	80002c8 <__aeabi_dsub>
 800e8da:	a381      	add	r3, pc, #516	; (adr r3, 800eae0 <_dtoa_r+0x308>)
 800e8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8e0:	f7f1 feaa 	bl	8000638 <__aeabi_dmul>
 800e8e4:	a380      	add	r3, pc, #512	; (adr r3, 800eae8 <_dtoa_r+0x310>)
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	f7f1 fcef 	bl	80002cc <__adddf3>
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	4628      	mov	r0, r5
 800e8f2:	460f      	mov	r7, r1
 800e8f4:	f7f1 fe36 	bl	8000564 <__aeabi_i2d>
 800e8f8:	a37d      	add	r3, pc, #500	; (adr r3, 800eaf0 <_dtoa_r+0x318>)
 800e8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fe:	f7f1 fe9b 	bl	8000638 <__aeabi_dmul>
 800e902:	4602      	mov	r2, r0
 800e904:	460b      	mov	r3, r1
 800e906:	4630      	mov	r0, r6
 800e908:	4639      	mov	r1, r7
 800e90a:	f7f1 fcdf 	bl	80002cc <__adddf3>
 800e90e:	4606      	mov	r6, r0
 800e910:	460f      	mov	r7, r1
 800e912:	f7f2 f941 	bl	8000b98 <__aeabi_d2iz>
 800e916:	2200      	movs	r2, #0
 800e918:	4682      	mov	sl, r0
 800e91a:	2300      	movs	r3, #0
 800e91c:	4630      	mov	r0, r6
 800e91e:	4639      	mov	r1, r7
 800e920:	f7f2 f8fc 	bl	8000b1c <__aeabi_dcmplt>
 800e924:	b148      	cbz	r0, 800e93a <_dtoa_r+0x162>
 800e926:	4650      	mov	r0, sl
 800e928:	f7f1 fe1c 	bl	8000564 <__aeabi_i2d>
 800e92c:	4632      	mov	r2, r6
 800e92e:	463b      	mov	r3, r7
 800e930:	f7f2 f8ea 	bl	8000b08 <__aeabi_dcmpeq>
 800e934:	b908      	cbnz	r0, 800e93a <_dtoa_r+0x162>
 800e936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e93a:	f1ba 0f16 	cmp.w	sl, #22
 800e93e:	d859      	bhi.n	800e9f4 <_dtoa_r+0x21c>
 800e940:	4970      	ldr	r1, [pc, #448]	; (800eb04 <_dtoa_r+0x32c>)
 800e942:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e94a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e94e:	f7f2 f903 	bl	8000b58 <__aeabi_dcmpgt>
 800e952:	2800      	cmp	r0, #0
 800e954:	d050      	beq.n	800e9f8 <_dtoa_r+0x220>
 800e956:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e95a:	2300      	movs	r3, #0
 800e95c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e95e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e960:	1b5d      	subs	r5, r3, r5
 800e962:	f1b5 0801 	subs.w	r8, r5, #1
 800e966:	bf49      	itett	mi
 800e968:	f1c5 0301 	rsbmi	r3, r5, #1
 800e96c:	2300      	movpl	r3, #0
 800e96e:	9305      	strmi	r3, [sp, #20]
 800e970:	f04f 0800 	movmi.w	r8, #0
 800e974:	bf58      	it	pl
 800e976:	9305      	strpl	r3, [sp, #20]
 800e978:	f1ba 0f00 	cmp.w	sl, #0
 800e97c:	db3e      	blt.n	800e9fc <_dtoa_r+0x224>
 800e97e:	2300      	movs	r3, #0
 800e980:	44d0      	add	r8, sl
 800e982:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e986:	9307      	str	r3, [sp, #28]
 800e988:	9b06      	ldr	r3, [sp, #24]
 800e98a:	2b09      	cmp	r3, #9
 800e98c:	f200 8090 	bhi.w	800eab0 <_dtoa_r+0x2d8>
 800e990:	2b05      	cmp	r3, #5
 800e992:	bfc4      	itt	gt
 800e994:	3b04      	subgt	r3, #4
 800e996:	9306      	strgt	r3, [sp, #24]
 800e998:	9b06      	ldr	r3, [sp, #24]
 800e99a:	f1a3 0302 	sub.w	r3, r3, #2
 800e99e:	bfcc      	ite	gt
 800e9a0:	2500      	movgt	r5, #0
 800e9a2:	2501      	movle	r5, #1
 800e9a4:	2b03      	cmp	r3, #3
 800e9a6:	f200 808f 	bhi.w	800eac8 <_dtoa_r+0x2f0>
 800e9aa:	e8df f003 	tbb	[pc, r3]
 800e9ae:	7f7d      	.short	0x7f7d
 800e9b0:	7131      	.short	0x7131
 800e9b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e9b6:	441d      	add	r5, r3
 800e9b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e9bc:	2820      	cmp	r0, #32
 800e9be:	dd13      	ble.n	800e9e8 <_dtoa_r+0x210>
 800e9c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e9c4:	9b00      	ldr	r3, [sp, #0]
 800e9c6:	fa08 f800 	lsl.w	r8, r8, r0
 800e9ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e9ce:	fa23 f000 	lsr.w	r0, r3, r0
 800e9d2:	ea48 0000 	orr.w	r0, r8, r0
 800e9d6:	f7f1 fdb5 	bl	8000544 <__aeabi_ui2d>
 800e9da:	2301      	movs	r3, #1
 800e9dc:	4682      	mov	sl, r0
 800e9de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e9e2:	3d01      	subs	r5, #1
 800e9e4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9e6:	e772      	b.n	800e8ce <_dtoa_r+0xf6>
 800e9e8:	9b00      	ldr	r3, [sp, #0]
 800e9ea:	f1c0 0020 	rsb	r0, r0, #32
 800e9ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e9f2:	e7f0      	b.n	800e9d6 <_dtoa_r+0x1fe>
 800e9f4:	2301      	movs	r3, #1
 800e9f6:	e7b1      	b.n	800e95c <_dtoa_r+0x184>
 800e9f8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e9fa:	e7b0      	b.n	800e95e <_dtoa_r+0x186>
 800e9fc:	9b05      	ldr	r3, [sp, #20]
 800e9fe:	eba3 030a 	sub.w	r3, r3, sl
 800ea02:	9305      	str	r3, [sp, #20]
 800ea04:	f1ca 0300 	rsb	r3, sl, #0
 800ea08:	9307      	str	r3, [sp, #28]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	930e      	str	r3, [sp, #56]	; 0x38
 800ea0e:	e7bb      	b.n	800e988 <_dtoa_r+0x1b0>
 800ea10:	2301      	movs	r3, #1
 800ea12:	930a      	str	r3, [sp, #40]	; 0x28
 800ea14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	dd59      	ble.n	800eace <_dtoa_r+0x2f6>
 800ea1a:	9302      	str	r3, [sp, #8]
 800ea1c:	4699      	mov	r9, r3
 800ea1e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea20:	2200      	movs	r2, #0
 800ea22:	6072      	str	r2, [r6, #4]
 800ea24:	2204      	movs	r2, #4
 800ea26:	f102 0014 	add.w	r0, r2, #20
 800ea2a:	4298      	cmp	r0, r3
 800ea2c:	6871      	ldr	r1, [r6, #4]
 800ea2e:	d953      	bls.n	800ead8 <_dtoa_r+0x300>
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 fea2 	bl	800f77a <_Balloc>
 800ea36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea38:	6030      	str	r0, [r6, #0]
 800ea3a:	f1b9 0f0e 	cmp.w	r9, #14
 800ea3e:	f8d3 b000 	ldr.w	fp, [r3]
 800ea42:	f200 80e6 	bhi.w	800ec12 <_dtoa_r+0x43a>
 800ea46:	2d00      	cmp	r5, #0
 800ea48:	f000 80e3 	beq.w	800ec12 <_dtoa_r+0x43a>
 800ea4c:	ed9d 7b00 	vldr	d7, [sp]
 800ea50:	f1ba 0f00 	cmp.w	sl, #0
 800ea54:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ea58:	dd74      	ble.n	800eb44 <_dtoa_r+0x36c>
 800ea5a:	4a2a      	ldr	r2, [pc, #168]	; (800eb04 <_dtoa_r+0x32c>)
 800ea5c:	f00a 030f 	and.w	r3, sl, #15
 800ea60:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea64:	ed93 7b00 	vldr	d7, [r3]
 800ea68:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ea6c:	06f0      	lsls	r0, r6, #27
 800ea6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ea72:	d565      	bpl.n	800eb40 <_dtoa_r+0x368>
 800ea74:	4b24      	ldr	r3, [pc, #144]	; (800eb08 <_dtoa_r+0x330>)
 800ea76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea7a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea7e:	f7f1 ff05 	bl	800088c <__aeabi_ddiv>
 800ea82:	e9cd 0100 	strd	r0, r1, [sp]
 800ea86:	f006 060f 	and.w	r6, r6, #15
 800ea8a:	2503      	movs	r5, #3
 800ea8c:	4f1e      	ldr	r7, [pc, #120]	; (800eb08 <_dtoa_r+0x330>)
 800ea8e:	e04c      	b.n	800eb2a <_dtoa_r+0x352>
 800ea90:	2301      	movs	r3, #1
 800ea92:	930a      	str	r3, [sp, #40]	; 0x28
 800ea94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea96:	4453      	add	r3, sl
 800ea98:	f103 0901 	add.w	r9, r3, #1
 800ea9c:	9302      	str	r3, [sp, #8]
 800ea9e:	464b      	mov	r3, r9
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	bfb8      	it	lt
 800eaa4:	2301      	movlt	r3, #1
 800eaa6:	e7ba      	b.n	800ea1e <_dtoa_r+0x246>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	e7b2      	b.n	800ea12 <_dtoa_r+0x23a>
 800eaac:	2300      	movs	r3, #0
 800eaae:	e7f0      	b.n	800ea92 <_dtoa_r+0x2ba>
 800eab0:	2501      	movs	r5, #1
 800eab2:	2300      	movs	r3, #0
 800eab4:	9306      	str	r3, [sp, #24]
 800eab6:	950a      	str	r5, [sp, #40]	; 0x28
 800eab8:	f04f 33ff 	mov.w	r3, #4294967295
 800eabc:	9302      	str	r3, [sp, #8]
 800eabe:	4699      	mov	r9, r3
 800eac0:	2200      	movs	r2, #0
 800eac2:	2312      	movs	r3, #18
 800eac4:	920b      	str	r2, [sp, #44]	; 0x2c
 800eac6:	e7aa      	b.n	800ea1e <_dtoa_r+0x246>
 800eac8:	2301      	movs	r3, #1
 800eaca:	930a      	str	r3, [sp, #40]	; 0x28
 800eacc:	e7f4      	b.n	800eab8 <_dtoa_r+0x2e0>
 800eace:	2301      	movs	r3, #1
 800ead0:	9302      	str	r3, [sp, #8]
 800ead2:	4699      	mov	r9, r3
 800ead4:	461a      	mov	r2, r3
 800ead6:	e7f5      	b.n	800eac4 <_dtoa_r+0x2ec>
 800ead8:	3101      	adds	r1, #1
 800eada:	6071      	str	r1, [r6, #4]
 800eadc:	0052      	lsls	r2, r2, #1
 800eade:	e7a2      	b.n	800ea26 <_dtoa_r+0x24e>
 800eae0:	636f4361 	.word	0x636f4361
 800eae4:	3fd287a7 	.word	0x3fd287a7
 800eae8:	8b60c8b3 	.word	0x8b60c8b3
 800eaec:	3fc68a28 	.word	0x3fc68a28
 800eaf0:	509f79fb 	.word	0x509f79fb
 800eaf4:	3fd34413 	.word	0x3fd34413
 800eaf8:	7ff00000 	.word	0x7ff00000
 800eafc:	08012466 	.word	0x08012466
 800eb00:	3ff80000 	.word	0x3ff80000
 800eb04:	08012520 	.word	0x08012520
 800eb08:	080124f8 	.word	0x080124f8
 800eb0c:	08012492 	.word	0x08012492
 800eb10:	07f1      	lsls	r1, r6, #31
 800eb12:	d508      	bpl.n	800eb26 <_dtoa_r+0x34e>
 800eb14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb18:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eb1c:	f7f1 fd8c 	bl	8000638 <__aeabi_dmul>
 800eb20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb24:	3501      	adds	r5, #1
 800eb26:	1076      	asrs	r6, r6, #1
 800eb28:	3708      	adds	r7, #8
 800eb2a:	2e00      	cmp	r6, #0
 800eb2c:	d1f0      	bne.n	800eb10 <_dtoa_r+0x338>
 800eb2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb32:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb36:	f7f1 fea9 	bl	800088c <__aeabi_ddiv>
 800eb3a:	e9cd 0100 	strd	r0, r1, [sp]
 800eb3e:	e01a      	b.n	800eb76 <_dtoa_r+0x39e>
 800eb40:	2502      	movs	r5, #2
 800eb42:	e7a3      	b.n	800ea8c <_dtoa_r+0x2b4>
 800eb44:	f000 80a0 	beq.w	800ec88 <_dtoa_r+0x4b0>
 800eb48:	f1ca 0600 	rsb	r6, sl, #0
 800eb4c:	4b9f      	ldr	r3, [pc, #636]	; (800edcc <_dtoa_r+0x5f4>)
 800eb4e:	4fa0      	ldr	r7, [pc, #640]	; (800edd0 <_dtoa_r+0x5f8>)
 800eb50:	f006 020f 	and.w	r2, r6, #15
 800eb54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb60:	f7f1 fd6a 	bl	8000638 <__aeabi_dmul>
 800eb64:	e9cd 0100 	strd	r0, r1, [sp]
 800eb68:	1136      	asrs	r6, r6, #4
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	2502      	movs	r5, #2
 800eb6e:	2e00      	cmp	r6, #0
 800eb70:	d17f      	bne.n	800ec72 <_dtoa_r+0x49a>
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	d1e1      	bne.n	800eb3a <_dtoa_r+0x362>
 800eb76:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	f000 8087 	beq.w	800ec8c <_dtoa_r+0x4b4>
 800eb7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb82:	2200      	movs	r2, #0
 800eb84:	4b93      	ldr	r3, [pc, #588]	; (800edd4 <_dtoa_r+0x5fc>)
 800eb86:	4630      	mov	r0, r6
 800eb88:	4639      	mov	r1, r7
 800eb8a:	f7f1 ffc7 	bl	8000b1c <__aeabi_dcmplt>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d07c      	beq.n	800ec8c <_dtoa_r+0x4b4>
 800eb92:	f1b9 0f00 	cmp.w	r9, #0
 800eb96:	d079      	beq.n	800ec8c <_dtoa_r+0x4b4>
 800eb98:	9b02      	ldr	r3, [sp, #8]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	dd35      	ble.n	800ec0a <_dtoa_r+0x432>
 800eb9e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800eba2:	9308      	str	r3, [sp, #32]
 800eba4:	4639      	mov	r1, r7
 800eba6:	2200      	movs	r2, #0
 800eba8:	4b8b      	ldr	r3, [pc, #556]	; (800edd8 <_dtoa_r+0x600>)
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7f1 fd44 	bl	8000638 <__aeabi_dmul>
 800ebb0:	e9cd 0100 	strd	r0, r1, [sp]
 800ebb4:	9f02      	ldr	r7, [sp, #8]
 800ebb6:	3501      	adds	r5, #1
 800ebb8:	4628      	mov	r0, r5
 800ebba:	f7f1 fcd3 	bl	8000564 <__aeabi_i2d>
 800ebbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebc2:	f7f1 fd39 	bl	8000638 <__aeabi_dmul>
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4b84      	ldr	r3, [pc, #528]	; (800eddc <_dtoa_r+0x604>)
 800ebca:	f7f1 fb7f 	bl	80002cc <__adddf3>
 800ebce:	4605      	mov	r5, r0
 800ebd0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ebd4:	2f00      	cmp	r7, #0
 800ebd6:	d15d      	bne.n	800ec94 <_dtoa_r+0x4bc>
 800ebd8:	2200      	movs	r2, #0
 800ebda:	4b81      	ldr	r3, [pc, #516]	; (800ede0 <_dtoa_r+0x608>)
 800ebdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebe0:	f7f1 fb72 	bl	80002c8 <__aeabi_dsub>
 800ebe4:	462a      	mov	r2, r5
 800ebe6:	4633      	mov	r3, r6
 800ebe8:	e9cd 0100 	strd	r0, r1, [sp]
 800ebec:	f7f1 ffb4 	bl	8000b58 <__aeabi_dcmpgt>
 800ebf0:	2800      	cmp	r0, #0
 800ebf2:	f040 8288 	bne.w	800f106 <_dtoa_r+0x92e>
 800ebf6:	462a      	mov	r2, r5
 800ebf8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ebfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec00:	f7f1 ff8c 	bl	8000b1c <__aeabi_dcmplt>
 800ec04:	2800      	cmp	r0, #0
 800ec06:	f040 827c 	bne.w	800f102 <_dtoa_r+0x92a>
 800ec0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ec0e:	e9cd 2300 	strd	r2, r3, [sp]
 800ec12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	f2c0 8150 	blt.w	800eeba <_dtoa_r+0x6e2>
 800ec1a:	f1ba 0f0e 	cmp.w	sl, #14
 800ec1e:	f300 814c 	bgt.w	800eeba <_dtoa_r+0x6e2>
 800ec22:	4b6a      	ldr	r3, [pc, #424]	; (800edcc <_dtoa_r+0x5f4>)
 800ec24:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ec28:	ed93 7b00 	vldr	d7, [r3]
 800ec2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec34:	f280 80d8 	bge.w	800ede8 <_dtoa_r+0x610>
 800ec38:	f1b9 0f00 	cmp.w	r9, #0
 800ec3c:	f300 80d4 	bgt.w	800ede8 <_dtoa_r+0x610>
 800ec40:	f040 825e 	bne.w	800f100 <_dtoa_r+0x928>
 800ec44:	2200      	movs	r2, #0
 800ec46:	4b66      	ldr	r3, [pc, #408]	; (800ede0 <_dtoa_r+0x608>)
 800ec48:	ec51 0b17 	vmov	r0, r1, d7
 800ec4c:	f7f1 fcf4 	bl	8000638 <__aeabi_dmul>
 800ec50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec54:	f7f1 ff76 	bl	8000b44 <__aeabi_dcmpge>
 800ec58:	464f      	mov	r7, r9
 800ec5a:	464e      	mov	r6, r9
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	f040 8234 	bne.w	800f0ca <_dtoa_r+0x8f2>
 800ec62:	2331      	movs	r3, #49	; 0x31
 800ec64:	f10b 0501 	add.w	r5, fp, #1
 800ec68:	f88b 3000 	strb.w	r3, [fp]
 800ec6c:	f10a 0a01 	add.w	sl, sl, #1
 800ec70:	e22f      	b.n	800f0d2 <_dtoa_r+0x8fa>
 800ec72:	07f2      	lsls	r2, r6, #31
 800ec74:	d505      	bpl.n	800ec82 <_dtoa_r+0x4aa>
 800ec76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec7a:	f7f1 fcdd 	bl	8000638 <__aeabi_dmul>
 800ec7e:	3501      	adds	r5, #1
 800ec80:	2301      	movs	r3, #1
 800ec82:	1076      	asrs	r6, r6, #1
 800ec84:	3708      	adds	r7, #8
 800ec86:	e772      	b.n	800eb6e <_dtoa_r+0x396>
 800ec88:	2502      	movs	r5, #2
 800ec8a:	e774      	b.n	800eb76 <_dtoa_r+0x39e>
 800ec8c:	f8cd a020 	str.w	sl, [sp, #32]
 800ec90:	464f      	mov	r7, r9
 800ec92:	e791      	b.n	800ebb8 <_dtoa_r+0x3e0>
 800ec94:	4b4d      	ldr	r3, [pc, #308]	; (800edcc <_dtoa_r+0x5f4>)
 800ec96:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec9a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ec9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d047      	beq.n	800ed34 <_dtoa_r+0x55c>
 800eca4:	4602      	mov	r2, r0
 800eca6:	460b      	mov	r3, r1
 800eca8:	2000      	movs	r0, #0
 800ecaa:	494e      	ldr	r1, [pc, #312]	; (800ede4 <_dtoa_r+0x60c>)
 800ecac:	f7f1 fdee 	bl	800088c <__aeabi_ddiv>
 800ecb0:	462a      	mov	r2, r5
 800ecb2:	4633      	mov	r3, r6
 800ecb4:	f7f1 fb08 	bl	80002c8 <__aeabi_dsub>
 800ecb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ecbc:	465d      	mov	r5, fp
 800ecbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecc2:	f7f1 ff69 	bl	8000b98 <__aeabi_d2iz>
 800ecc6:	4606      	mov	r6, r0
 800ecc8:	f7f1 fc4c 	bl	8000564 <__aeabi_i2d>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecd4:	f7f1 faf8 	bl	80002c8 <__aeabi_dsub>
 800ecd8:	3630      	adds	r6, #48	; 0x30
 800ecda:	f805 6b01 	strb.w	r6, [r5], #1
 800ecde:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ece2:	e9cd 0100 	strd	r0, r1, [sp]
 800ece6:	f7f1 ff19 	bl	8000b1c <__aeabi_dcmplt>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	d163      	bne.n	800edb6 <_dtoa_r+0x5de>
 800ecee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecf2:	2000      	movs	r0, #0
 800ecf4:	4937      	ldr	r1, [pc, #220]	; (800edd4 <_dtoa_r+0x5fc>)
 800ecf6:	f7f1 fae7 	bl	80002c8 <__aeabi_dsub>
 800ecfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ecfe:	f7f1 ff0d 	bl	8000b1c <__aeabi_dcmplt>
 800ed02:	2800      	cmp	r0, #0
 800ed04:	f040 80b7 	bne.w	800ee76 <_dtoa_r+0x69e>
 800ed08:	eba5 030b 	sub.w	r3, r5, fp
 800ed0c:	429f      	cmp	r7, r3
 800ed0e:	f77f af7c 	ble.w	800ec0a <_dtoa_r+0x432>
 800ed12:	2200      	movs	r2, #0
 800ed14:	4b30      	ldr	r3, [pc, #192]	; (800edd8 <_dtoa_r+0x600>)
 800ed16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed1a:	f7f1 fc8d 	bl	8000638 <__aeabi_dmul>
 800ed1e:	2200      	movs	r2, #0
 800ed20:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ed24:	4b2c      	ldr	r3, [pc, #176]	; (800edd8 <_dtoa_r+0x600>)
 800ed26:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed2a:	f7f1 fc85 	bl	8000638 <__aeabi_dmul>
 800ed2e:	e9cd 0100 	strd	r0, r1, [sp]
 800ed32:	e7c4      	b.n	800ecbe <_dtoa_r+0x4e6>
 800ed34:	462a      	mov	r2, r5
 800ed36:	4633      	mov	r3, r6
 800ed38:	f7f1 fc7e 	bl	8000638 <__aeabi_dmul>
 800ed3c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ed40:	eb0b 0507 	add.w	r5, fp, r7
 800ed44:	465e      	mov	r6, fp
 800ed46:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed4a:	f7f1 ff25 	bl	8000b98 <__aeabi_d2iz>
 800ed4e:	4607      	mov	r7, r0
 800ed50:	f7f1 fc08 	bl	8000564 <__aeabi_i2d>
 800ed54:	3730      	adds	r7, #48	; 0x30
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed5e:	f7f1 fab3 	bl	80002c8 <__aeabi_dsub>
 800ed62:	f806 7b01 	strb.w	r7, [r6], #1
 800ed66:	42ae      	cmp	r6, r5
 800ed68:	e9cd 0100 	strd	r0, r1, [sp]
 800ed6c:	f04f 0200 	mov.w	r2, #0
 800ed70:	d126      	bne.n	800edc0 <_dtoa_r+0x5e8>
 800ed72:	4b1c      	ldr	r3, [pc, #112]	; (800ede4 <_dtoa_r+0x60c>)
 800ed74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed78:	f7f1 faa8 	bl	80002cc <__adddf3>
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	460b      	mov	r3, r1
 800ed80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed84:	f7f1 fee8 	bl	8000b58 <__aeabi_dcmpgt>
 800ed88:	2800      	cmp	r0, #0
 800ed8a:	d174      	bne.n	800ee76 <_dtoa_r+0x69e>
 800ed8c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ed90:	2000      	movs	r0, #0
 800ed92:	4914      	ldr	r1, [pc, #80]	; (800ede4 <_dtoa_r+0x60c>)
 800ed94:	f7f1 fa98 	bl	80002c8 <__aeabi_dsub>
 800ed98:	4602      	mov	r2, r0
 800ed9a:	460b      	mov	r3, r1
 800ed9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eda0:	f7f1 febc 	bl	8000b1c <__aeabi_dcmplt>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	f43f af30 	beq.w	800ec0a <_dtoa_r+0x432>
 800edaa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800edae:	2b30      	cmp	r3, #48	; 0x30
 800edb0:	f105 32ff 	add.w	r2, r5, #4294967295
 800edb4:	d002      	beq.n	800edbc <_dtoa_r+0x5e4>
 800edb6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800edba:	e04a      	b.n	800ee52 <_dtoa_r+0x67a>
 800edbc:	4615      	mov	r5, r2
 800edbe:	e7f4      	b.n	800edaa <_dtoa_r+0x5d2>
 800edc0:	4b05      	ldr	r3, [pc, #20]	; (800edd8 <_dtoa_r+0x600>)
 800edc2:	f7f1 fc39 	bl	8000638 <__aeabi_dmul>
 800edc6:	e9cd 0100 	strd	r0, r1, [sp]
 800edca:	e7bc      	b.n	800ed46 <_dtoa_r+0x56e>
 800edcc:	08012520 	.word	0x08012520
 800edd0:	080124f8 	.word	0x080124f8
 800edd4:	3ff00000 	.word	0x3ff00000
 800edd8:	40240000 	.word	0x40240000
 800eddc:	401c0000 	.word	0x401c0000
 800ede0:	40140000 	.word	0x40140000
 800ede4:	3fe00000 	.word	0x3fe00000
 800ede8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800edec:	465d      	mov	r5, fp
 800edee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edf2:	4630      	mov	r0, r6
 800edf4:	4639      	mov	r1, r7
 800edf6:	f7f1 fd49 	bl	800088c <__aeabi_ddiv>
 800edfa:	f7f1 fecd 	bl	8000b98 <__aeabi_d2iz>
 800edfe:	4680      	mov	r8, r0
 800ee00:	f7f1 fbb0 	bl	8000564 <__aeabi_i2d>
 800ee04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee08:	f7f1 fc16 	bl	8000638 <__aeabi_dmul>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4630      	mov	r0, r6
 800ee12:	4639      	mov	r1, r7
 800ee14:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ee18:	f7f1 fa56 	bl	80002c8 <__aeabi_dsub>
 800ee1c:	f805 6b01 	strb.w	r6, [r5], #1
 800ee20:	eba5 060b 	sub.w	r6, r5, fp
 800ee24:	45b1      	cmp	r9, r6
 800ee26:	4602      	mov	r2, r0
 800ee28:	460b      	mov	r3, r1
 800ee2a:	d139      	bne.n	800eea0 <_dtoa_r+0x6c8>
 800ee2c:	f7f1 fa4e 	bl	80002cc <__adddf3>
 800ee30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee34:	4606      	mov	r6, r0
 800ee36:	460f      	mov	r7, r1
 800ee38:	f7f1 fe8e 	bl	8000b58 <__aeabi_dcmpgt>
 800ee3c:	b9c8      	cbnz	r0, 800ee72 <_dtoa_r+0x69a>
 800ee3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee42:	4630      	mov	r0, r6
 800ee44:	4639      	mov	r1, r7
 800ee46:	f7f1 fe5f 	bl	8000b08 <__aeabi_dcmpeq>
 800ee4a:	b110      	cbz	r0, 800ee52 <_dtoa_r+0x67a>
 800ee4c:	f018 0f01 	tst.w	r8, #1
 800ee50:	d10f      	bne.n	800ee72 <_dtoa_r+0x69a>
 800ee52:	9904      	ldr	r1, [sp, #16]
 800ee54:	4620      	mov	r0, r4
 800ee56:	f000 fcc4 	bl	800f7e2 <_Bfree>
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee5e:	702b      	strb	r3, [r5, #0]
 800ee60:	f10a 0301 	add.w	r3, sl, #1
 800ee64:	6013      	str	r3, [r2, #0]
 800ee66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f000 8241 	beq.w	800f2f0 <_dtoa_r+0xb18>
 800ee6e:	601d      	str	r5, [r3, #0]
 800ee70:	e23e      	b.n	800f2f0 <_dtoa_r+0xb18>
 800ee72:	f8cd a020 	str.w	sl, [sp, #32]
 800ee76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee7a:	2a39      	cmp	r2, #57	; 0x39
 800ee7c:	f105 33ff 	add.w	r3, r5, #4294967295
 800ee80:	d108      	bne.n	800ee94 <_dtoa_r+0x6bc>
 800ee82:	459b      	cmp	fp, r3
 800ee84:	d10a      	bne.n	800ee9c <_dtoa_r+0x6c4>
 800ee86:	9b08      	ldr	r3, [sp, #32]
 800ee88:	3301      	adds	r3, #1
 800ee8a:	9308      	str	r3, [sp, #32]
 800ee8c:	2330      	movs	r3, #48	; 0x30
 800ee8e:	f88b 3000 	strb.w	r3, [fp]
 800ee92:	465b      	mov	r3, fp
 800ee94:	781a      	ldrb	r2, [r3, #0]
 800ee96:	3201      	adds	r2, #1
 800ee98:	701a      	strb	r2, [r3, #0]
 800ee9a:	e78c      	b.n	800edb6 <_dtoa_r+0x5de>
 800ee9c:	461d      	mov	r5, r3
 800ee9e:	e7ea      	b.n	800ee76 <_dtoa_r+0x69e>
 800eea0:	2200      	movs	r2, #0
 800eea2:	4b9b      	ldr	r3, [pc, #620]	; (800f110 <_dtoa_r+0x938>)
 800eea4:	f7f1 fbc8 	bl	8000638 <__aeabi_dmul>
 800eea8:	2200      	movs	r2, #0
 800eeaa:	2300      	movs	r3, #0
 800eeac:	4606      	mov	r6, r0
 800eeae:	460f      	mov	r7, r1
 800eeb0:	f7f1 fe2a 	bl	8000b08 <__aeabi_dcmpeq>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d09a      	beq.n	800edee <_dtoa_r+0x616>
 800eeb8:	e7cb      	b.n	800ee52 <_dtoa_r+0x67a>
 800eeba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eebc:	2a00      	cmp	r2, #0
 800eebe:	f000 808b 	beq.w	800efd8 <_dtoa_r+0x800>
 800eec2:	9a06      	ldr	r2, [sp, #24]
 800eec4:	2a01      	cmp	r2, #1
 800eec6:	dc6e      	bgt.n	800efa6 <_dtoa_r+0x7ce>
 800eec8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800eeca:	2a00      	cmp	r2, #0
 800eecc:	d067      	beq.n	800ef9e <_dtoa_r+0x7c6>
 800eece:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eed2:	9f07      	ldr	r7, [sp, #28]
 800eed4:	9d05      	ldr	r5, [sp, #20]
 800eed6:	9a05      	ldr	r2, [sp, #20]
 800eed8:	2101      	movs	r1, #1
 800eeda:	441a      	add	r2, r3
 800eedc:	4620      	mov	r0, r4
 800eede:	9205      	str	r2, [sp, #20]
 800eee0:	4498      	add	r8, r3
 800eee2:	f000 fd1e 	bl	800f922 <__i2b>
 800eee6:	4606      	mov	r6, r0
 800eee8:	2d00      	cmp	r5, #0
 800eeea:	dd0c      	ble.n	800ef06 <_dtoa_r+0x72e>
 800eeec:	f1b8 0f00 	cmp.w	r8, #0
 800eef0:	dd09      	ble.n	800ef06 <_dtoa_r+0x72e>
 800eef2:	4545      	cmp	r5, r8
 800eef4:	9a05      	ldr	r2, [sp, #20]
 800eef6:	462b      	mov	r3, r5
 800eef8:	bfa8      	it	ge
 800eefa:	4643      	movge	r3, r8
 800eefc:	1ad2      	subs	r2, r2, r3
 800eefe:	9205      	str	r2, [sp, #20]
 800ef00:	1aed      	subs	r5, r5, r3
 800ef02:	eba8 0803 	sub.w	r8, r8, r3
 800ef06:	9b07      	ldr	r3, [sp, #28]
 800ef08:	b1eb      	cbz	r3, 800ef46 <_dtoa_r+0x76e>
 800ef0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d067      	beq.n	800efe0 <_dtoa_r+0x808>
 800ef10:	b18f      	cbz	r7, 800ef36 <_dtoa_r+0x75e>
 800ef12:	4631      	mov	r1, r6
 800ef14:	463a      	mov	r2, r7
 800ef16:	4620      	mov	r0, r4
 800ef18:	f000 fda2 	bl	800fa60 <__pow5mult>
 800ef1c:	9a04      	ldr	r2, [sp, #16]
 800ef1e:	4601      	mov	r1, r0
 800ef20:	4606      	mov	r6, r0
 800ef22:	4620      	mov	r0, r4
 800ef24:	f000 fd06 	bl	800f934 <__multiply>
 800ef28:	9904      	ldr	r1, [sp, #16]
 800ef2a:	9008      	str	r0, [sp, #32]
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f000 fc58 	bl	800f7e2 <_Bfree>
 800ef32:	9b08      	ldr	r3, [sp, #32]
 800ef34:	9304      	str	r3, [sp, #16]
 800ef36:	9b07      	ldr	r3, [sp, #28]
 800ef38:	1bda      	subs	r2, r3, r7
 800ef3a:	d004      	beq.n	800ef46 <_dtoa_r+0x76e>
 800ef3c:	9904      	ldr	r1, [sp, #16]
 800ef3e:	4620      	mov	r0, r4
 800ef40:	f000 fd8e 	bl	800fa60 <__pow5mult>
 800ef44:	9004      	str	r0, [sp, #16]
 800ef46:	2101      	movs	r1, #1
 800ef48:	4620      	mov	r0, r4
 800ef4a:	f000 fcea 	bl	800f922 <__i2b>
 800ef4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef50:	4607      	mov	r7, r0
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	f000 81d0 	beq.w	800f2f8 <_dtoa_r+0xb20>
 800ef58:	461a      	mov	r2, r3
 800ef5a:	4601      	mov	r1, r0
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	f000 fd7f 	bl	800fa60 <__pow5mult>
 800ef62:	9b06      	ldr	r3, [sp, #24]
 800ef64:	2b01      	cmp	r3, #1
 800ef66:	4607      	mov	r7, r0
 800ef68:	dc40      	bgt.n	800efec <_dtoa_r+0x814>
 800ef6a:	9b00      	ldr	r3, [sp, #0]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d139      	bne.n	800efe4 <_dtoa_r+0x80c>
 800ef70:	9b01      	ldr	r3, [sp, #4]
 800ef72:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d136      	bne.n	800efe8 <_dtoa_r+0x810>
 800ef7a:	9b01      	ldr	r3, [sp, #4]
 800ef7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef80:	0d1b      	lsrs	r3, r3, #20
 800ef82:	051b      	lsls	r3, r3, #20
 800ef84:	b12b      	cbz	r3, 800ef92 <_dtoa_r+0x7ba>
 800ef86:	9b05      	ldr	r3, [sp, #20]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	9305      	str	r3, [sp, #20]
 800ef8c:	f108 0801 	add.w	r8, r8, #1
 800ef90:	2301      	movs	r3, #1
 800ef92:	9307      	str	r3, [sp, #28]
 800ef94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d12a      	bne.n	800eff0 <_dtoa_r+0x818>
 800ef9a:	2001      	movs	r0, #1
 800ef9c:	e030      	b.n	800f000 <_dtoa_r+0x828>
 800ef9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800efa0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800efa4:	e795      	b.n	800eed2 <_dtoa_r+0x6fa>
 800efa6:	9b07      	ldr	r3, [sp, #28]
 800efa8:	f109 37ff 	add.w	r7, r9, #4294967295
 800efac:	42bb      	cmp	r3, r7
 800efae:	bfbf      	itttt	lt
 800efb0:	9b07      	ldrlt	r3, [sp, #28]
 800efb2:	9707      	strlt	r7, [sp, #28]
 800efb4:	1afa      	sublt	r2, r7, r3
 800efb6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800efb8:	bfbb      	ittet	lt
 800efba:	189b      	addlt	r3, r3, r2
 800efbc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800efbe:	1bdf      	subge	r7, r3, r7
 800efc0:	2700      	movlt	r7, #0
 800efc2:	f1b9 0f00 	cmp.w	r9, #0
 800efc6:	bfb5      	itete	lt
 800efc8:	9b05      	ldrlt	r3, [sp, #20]
 800efca:	9d05      	ldrge	r5, [sp, #20]
 800efcc:	eba3 0509 	sublt.w	r5, r3, r9
 800efd0:	464b      	movge	r3, r9
 800efd2:	bfb8      	it	lt
 800efd4:	2300      	movlt	r3, #0
 800efd6:	e77e      	b.n	800eed6 <_dtoa_r+0x6fe>
 800efd8:	9f07      	ldr	r7, [sp, #28]
 800efda:	9d05      	ldr	r5, [sp, #20]
 800efdc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800efde:	e783      	b.n	800eee8 <_dtoa_r+0x710>
 800efe0:	9a07      	ldr	r2, [sp, #28]
 800efe2:	e7ab      	b.n	800ef3c <_dtoa_r+0x764>
 800efe4:	2300      	movs	r3, #0
 800efe6:	e7d4      	b.n	800ef92 <_dtoa_r+0x7ba>
 800efe8:	9b00      	ldr	r3, [sp, #0]
 800efea:	e7d2      	b.n	800ef92 <_dtoa_r+0x7ba>
 800efec:	2300      	movs	r3, #0
 800efee:	9307      	str	r3, [sp, #28]
 800eff0:	693b      	ldr	r3, [r7, #16]
 800eff2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800eff6:	6918      	ldr	r0, [r3, #16]
 800eff8:	f000 fc45 	bl	800f886 <__hi0bits>
 800effc:	f1c0 0020 	rsb	r0, r0, #32
 800f000:	4440      	add	r0, r8
 800f002:	f010 001f 	ands.w	r0, r0, #31
 800f006:	d047      	beq.n	800f098 <_dtoa_r+0x8c0>
 800f008:	f1c0 0320 	rsb	r3, r0, #32
 800f00c:	2b04      	cmp	r3, #4
 800f00e:	dd3b      	ble.n	800f088 <_dtoa_r+0x8b0>
 800f010:	9b05      	ldr	r3, [sp, #20]
 800f012:	f1c0 001c 	rsb	r0, r0, #28
 800f016:	4403      	add	r3, r0
 800f018:	9305      	str	r3, [sp, #20]
 800f01a:	4405      	add	r5, r0
 800f01c:	4480      	add	r8, r0
 800f01e:	9b05      	ldr	r3, [sp, #20]
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd05      	ble.n	800f030 <_dtoa_r+0x858>
 800f024:	461a      	mov	r2, r3
 800f026:	9904      	ldr	r1, [sp, #16]
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 fd67 	bl	800fafc <__lshift>
 800f02e:	9004      	str	r0, [sp, #16]
 800f030:	f1b8 0f00 	cmp.w	r8, #0
 800f034:	dd05      	ble.n	800f042 <_dtoa_r+0x86a>
 800f036:	4639      	mov	r1, r7
 800f038:	4642      	mov	r2, r8
 800f03a:	4620      	mov	r0, r4
 800f03c:	f000 fd5e 	bl	800fafc <__lshift>
 800f040:	4607      	mov	r7, r0
 800f042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f044:	b353      	cbz	r3, 800f09c <_dtoa_r+0x8c4>
 800f046:	4639      	mov	r1, r7
 800f048:	9804      	ldr	r0, [sp, #16]
 800f04a:	f000 fdab 	bl	800fba4 <__mcmp>
 800f04e:	2800      	cmp	r0, #0
 800f050:	da24      	bge.n	800f09c <_dtoa_r+0x8c4>
 800f052:	2300      	movs	r3, #0
 800f054:	220a      	movs	r2, #10
 800f056:	9904      	ldr	r1, [sp, #16]
 800f058:	4620      	mov	r0, r4
 800f05a:	f000 fbd9 	bl	800f810 <__multadd>
 800f05e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f060:	9004      	str	r0, [sp, #16]
 800f062:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 814d 	beq.w	800f306 <_dtoa_r+0xb2e>
 800f06c:	2300      	movs	r3, #0
 800f06e:	4631      	mov	r1, r6
 800f070:	220a      	movs	r2, #10
 800f072:	4620      	mov	r0, r4
 800f074:	f000 fbcc 	bl	800f810 <__multadd>
 800f078:	9b02      	ldr	r3, [sp, #8]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	4606      	mov	r6, r0
 800f07e:	dc4f      	bgt.n	800f120 <_dtoa_r+0x948>
 800f080:	9b06      	ldr	r3, [sp, #24]
 800f082:	2b02      	cmp	r3, #2
 800f084:	dd4c      	ble.n	800f120 <_dtoa_r+0x948>
 800f086:	e011      	b.n	800f0ac <_dtoa_r+0x8d4>
 800f088:	d0c9      	beq.n	800f01e <_dtoa_r+0x846>
 800f08a:	9a05      	ldr	r2, [sp, #20]
 800f08c:	331c      	adds	r3, #28
 800f08e:	441a      	add	r2, r3
 800f090:	9205      	str	r2, [sp, #20]
 800f092:	441d      	add	r5, r3
 800f094:	4498      	add	r8, r3
 800f096:	e7c2      	b.n	800f01e <_dtoa_r+0x846>
 800f098:	4603      	mov	r3, r0
 800f09a:	e7f6      	b.n	800f08a <_dtoa_r+0x8b2>
 800f09c:	f1b9 0f00 	cmp.w	r9, #0
 800f0a0:	dc38      	bgt.n	800f114 <_dtoa_r+0x93c>
 800f0a2:	9b06      	ldr	r3, [sp, #24]
 800f0a4:	2b02      	cmp	r3, #2
 800f0a6:	dd35      	ble.n	800f114 <_dtoa_r+0x93c>
 800f0a8:	f8cd 9008 	str.w	r9, [sp, #8]
 800f0ac:	9b02      	ldr	r3, [sp, #8]
 800f0ae:	b963      	cbnz	r3, 800f0ca <_dtoa_r+0x8f2>
 800f0b0:	4639      	mov	r1, r7
 800f0b2:	2205      	movs	r2, #5
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 fbab 	bl	800f810 <__multadd>
 800f0ba:	4601      	mov	r1, r0
 800f0bc:	4607      	mov	r7, r0
 800f0be:	9804      	ldr	r0, [sp, #16]
 800f0c0:	f000 fd70 	bl	800fba4 <__mcmp>
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	f73f adcc 	bgt.w	800ec62 <_dtoa_r+0x48a>
 800f0ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0cc:	465d      	mov	r5, fp
 800f0ce:	ea6f 0a03 	mvn.w	sl, r3
 800f0d2:	f04f 0900 	mov.w	r9, #0
 800f0d6:	4639      	mov	r1, r7
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f000 fb82 	bl	800f7e2 <_Bfree>
 800f0de:	2e00      	cmp	r6, #0
 800f0e0:	f43f aeb7 	beq.w	800ee52 <_dtoa_r+0x67a>
 800f0e4:	f1b9 0f00 	cmp.w	r9, #0
 800f0e8:	d005      	beq.n	800f0f6 <_dtoa_r+0x91e>
 800f0ea:	45b1      	cmp	r9, r6
 800f0ec:	d003      	beq.n	800f0f6 <_dtoa_r+0x91e>
 800f0ee:	4649      	mov	r1, r9
 800f0f0:	4620      	mov	r0, r4
 800f0f2:	f000 fb76 	bl	800f7e2 <_Bfree>
 800f0f6:	4631      	mov	r1, r6
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f000 fb72 	bl	800f7e2 <_Bfree>
 800f0fe:	e6a8      	b.n	800ee52 <_dtoa_r+0x67a>
 800f100:	2700      	movs	r7, #0
 800f102:	463e      	mov	r6, r7
 800f104:	e7e1      	b.n	800f0ca <_dtoa_r+0x8f2>
 800f106:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f10a:	463e      	mov	r6, r7
 800f10c:	e5a9      	b.n	800ec62 <_dtoa_r+0x48a>
 800f10e:	bf00      	nop
 800f110:	40240000 	.word	0x40240000
 800f114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f116:	f8cd 9008 	str.w	r9, [sp, #8]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	f000 80fa 	beq.w	800f314 <_dtoa_r+0xb3c>
 800f120:	2d00      	cmp	r5, #0
 800f122:	dd05      	ble.n	800f130 <_dtoa_r+0x958>
 800f124:	4631      	mov	r1, r6
 800f126:	462a      	mov	r2, r5
 800f128:	4620      	mov	r0, r4
 800f12a:	f000 fce7 	bl	800fafc <__lshift>
 800f12e:	4606      	mov	r6, r0
 800f130:	9b07      	ldr	r3, [sp, #28]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d04c      	beq.n	800f1d0 <_dtoa_r+0x9f8>
 800f136:	6871      	ldr	r1, [r6, #4]
 800f138:	4620      	mov	r0, r4
 800f13a:	f000 fb1e 	bl	800f77a <_Balloc>
 800f13e:	6932      	ldr	r2, [r6, #16]
 800f140:	3202      	adds	r2, #2
 800f142:	4605      	mov	r5, r0
 800f144:	0092      	lsls	r2, r2, #2
 800f146:	f106 010c 	add.w	r1, r6, #12
 800f14a:	300c      	adds	r0, #12
 800f14c:	f7fe faf0 	bl	800d730 <memcpy>
 800f150:	2201      	movs	r2, #1
 800f152:	4629      	mov	r1, r5
 800f154:	4620      	mov	r0, r4
 800f156:	f000 fcd1 	bl	800fafc <__lshift>
 800f15a:	9b00      	ldr	r3, [sp, #0]
 800f15c:	f8cd b014 	str.w	fp, [sp, #20]
 800f160:	f003 0301 	and.w	r3, r3, #1
 800f164:	46b1      	mov	r9, r6
 800f166:	9307      	str	r3, [sp, #28]
 800f168:	4606      	mov	r6, r0
 800f16a:	4639      	mov	r1, r7
 800f16c:	9804      	ldr	r0, [sp, #16]
 800f16e:	f7ff faa5 	bl	800e6bc <quorem>
 800f172:	4649      	mov	r1, r9
 800f174:	4605      	mov	r5, r0
 800f176:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f17a:	9804      	ldr	r0, [sp, #16]
 800f17c:	f000 fd12 	bl	800fba4 <__mcmp>
 800f180:	4632      	mov	r2, r6
 800f182:	9000      	str	r0, [sp, #0]
 800f184:	4639      	mov	r1, r7
 800f186:	4620      	mov	r0, r4
 800f188:	f000 fd26 	bl	800fbd8 <__mdiff>
 800f18c:	68c3      	ldr	r3, [r0, #12]
 800f18e:	4602      	mov	r2, r0
 800f190:	bb03      	cbnz	r3, 800f1d4 <_dtoa_r+0x9fc>
 800f192:	4601      	mov	r1, r0
 800f194:	9008      	str	r0, [sp, #32]
 800f196:	9804      	ldr	r0, [sp, #16]
 800f198:	f000 fd04 	bl	800fba4 <__mcmp>
 800f19c:	9a08      	ldr	r2, [sp, #32]
 800f19e:	4603      	mov	r3, r0
 800f1a0:	4611      	mov	r1, r2
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	9308      	str	r3, [sp, #32]
 800f1a6:	f000 fb1c 	bl	800f7e2 <_Bfree>
 800f1aa:	9b08      	ldr	r3, [sp, #32]
 800f1ac:	b9a3      	cbnz	r3, 800f1d8 <_dtoa_r+0xa00>
 800f1ae:	9a06      	ldr	r2, [sp, #24]
 800f1b0:	b992      	cbnz	r2, 800f1d8 <_dtoa_r+0xa00>
 800f1b2:	9a07      	ldr	r2, [sp, #28]
 800f1b4:	b982      	cbnz	r2, 800f1d8 <_dtoa_r+0xa00>
 800f1b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f1ba:	d029      	beq.n	800f210 <_dtoa_r+0xa38>
 800f1bc:	9b00      	ldr	r3, [sp, #0]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	dd01      	ble.n	800f1c6 <_dtoa_r+0x9ee>
 800f1c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f1c6:	9b05      	ldr	r3, [sp, #20]
 800f1c8:	1c5d      	adds	r5, r3, #1
 800f1ca:	f883 8000 	strb.w	r8, [r3]
 800f1ce:	e782      	b.n	800f0d6 <_dtoa_r+0x8fe>
 800f1d0:	4630      	mov	r0, r6
 800f1d2:	e7c2      	b.n	800f15a <_dtoa_r+0x982>
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	e7e3      	b.n	800f1a0 <_dtoa_r+0x9c8>
 800f1d8:	9a00      	ldr	r2, [sp, #0]
 800f1da:	2a00      	cmp	r2, #0
 800f1dc:	db04      	blt.n	800f1e8 <_dtoa_r+0xa10>
 800f1de:	d125      	bne.n	800f22c <_dtoa_r+0xa54>
 800f1e0:	9a06      	ldr	r2, [sp, #24]
 800f1e2:	bb1a      	cbnz	r2, 800f22c <_dtoa_r+0xa54>
 800f1e4:	9a07      	ldr	r2, [sp, #28]
 800f1e6:	bb0a      	cbnz	r2, 800f22c <_dtoa_r+0xa54>
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	ddec      	ble.n	800f1c6 <_dtoa_r+0x9ee>
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	9904      	ldr	r1, [sp, #16]
 800f1f0:	4620      	mov	r0, r4
 800f1f2:	f000 fc83 	bl	800fafc <__lshift>
 800f1f6:	4639      	mov	r1, r7
 800f1f8:	9004      	str	r0, [sp, #16]
 800f1fa:	f000 fcd3 	bl	800fba4 <__mcmp>
 800f1fe:	2800      	cmp	r0, #0
 800f200:	dc03      	bgt.n	800f20a <_dtoa_r+0xa32>
 800f202:	d1e0      	bne.n	800f1c6 <_dtoa_r+0x9ee>
 800f204:	f018 0f01 	tst.w	r8, #1
 800f208:	d0dd      	beq.n	800f1c6 <_dtoa_r+0x9ee>
 800f20a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f20e:	d1d8      	bne.n	800f1c2 <_dtoa_r+0x9ea>
 800f210:	9b05      	ldr	r3, [sp, #20]
 800f212:	9a05      	ldr	r2, [sp, #20]
 800f214:	1c5d      	adds	r5, r3, #1
 800f216:	2339      	movs	r3, #57	; 0x39
 800f218:	7013      	strb	r3, [r2, #0]
 800f21a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f21e:	2b39      	cmp	r3, #57	; 0x39
 800f220:	f105 32ff 	add.w	r2, r5, #4294967295
 800f224:	d04f      	beq.n	800f2c6 <_dtoa_r+0xaee>
 800f226:	3301      	adds	r3, #1
 800f228:	7013      	strb	r3, [r2, #0]
 800f22a:	e754      	b.n	800f0d6 <_dtoa_r+0x8fe>
 800f22c:	9a05      	ldr	r2, [sp, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f102 0501 	add.w	r5, r2, #1
 800f234:	dd06      	ble.n	800f244 <_dtoa_r+0xa6c>
 800f236:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f23a:	d0e9      	beq.n	800f210 <_dtoa_r+0xa38>
 800f23c:	f108 0801 	add.w	r8, r8, #1
 800f240:	9b05      	ldr	r3, [sp, #20]
 800f242:	e7c2      	b.n	800f1ca <_dtoa_r+0x9f2>
 800f244:	9a02      	ldr	r2, [sp, #8]
 800f246:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f24a:	eba5 030b 	sub.w	r3, r5, fp
 800f24e:	4293      	cmp	r3, r2
 800f250:	d021      	beq.n	800f296 <_dtoa_r+0xabe>
 800f252:	2300      	movs	r3, #0
 800f254:	220a      	movs	r2, #10
 800f256:	9904      	ldr	r1, [sp, #16]
 800f258:	4620      	mov	r0, r4
 800f25a:	f000 fad9 	bl	800f810 <__multadd>
 800f25e:	45b1      	cmp	r9, r6
 800f260:	9004      	str	r0, [sp, #16]
 800f262:	f04f 0300 	mov.w	r3, #0
 800f266:	f04f 020a 	mov.w	r2, #10
 800f26a:	4649      	mov	r1, r9
 800f26c:	4620      	mov	r0, r4
 800f26e:	d105      	bne.n	800f27c <_dtoa_r+0xaa4>
 800f270:	f000 face 	bl	800f810 <__multadd>
 800f274:	4681      	mov	r9, r0
 800f276:	4606      	mov	r6, r0
 800f278:	9505      	str	r5, [sp, #20]
 800f27a:	e776      	b.n	800f16a <_dtoa_r+0x992>
 800f27c:	f000 fac8 	bl	800f810 <__multadd>
 800f280:	4631      	mov	r1, r6
 800f282:	4681      	mov	r9, r0
 800f284:	2300      	movs	r3, #0
 800f286:	220a      	movs	r2, #10
 800f288:	4620      	mov	r0, r4
 800f28a:	f000 fac1 	bl	800f810 <__multadd>
 800f28e:	4606      	mov	r6, r0
 800f290:	e7f2      	b.n	800f278 <_dtoa_r+0xaa0>
 800f292:	f04f 0900 	mov.w	r9, #0
 800f296:	2201      	movs	r2, #1
 800f298:	9904      	ldr	r1, [sp, #16]
 800f29a:	4620      	mov	r0, r4
 800f29c:	f000 fc2e 	bl	800fafc <__lshift>
 800f2a0:	4639      	mov	r1, r7
 800f2a2:	9004      	str	r0, [sp, #16]
 800f2a4:	f000 fc7e 	bl	800fba4 <__mcmp>
 800f2a8:	2800      	cmp	r0, #0
 800f2aa:	dcb6      	bgt.n	800f21a <_dtoa_r+0xa42>
 800f2ac:	d102      	bne.n	800f2b4 <_dtoa_r+0xadc>
 800f2ae:	f018 0f01 	tst.w	r8, #1
 800f2b2:	d1b2      	bne.n	800f21a <_dtoa_r+0xa42>
 800f2b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f2b8:	2b30      	cmp	r3, #48	; 0x30
 800f2ba:	f105 32ff 	add.w	r2, r5, #4294967295
 800f2be:	f47f af0a 	bne.w	800f0d6 <_dtoa_r+0x8fe>
 800f2c2:	4615      	mov	r5, r2
 800f2c4:	e7f6      	b.n	800f2b4 <_dtoa_r+0xadc>
 800f2c6:	4593      	cmp	fp, r2
 800f2c8:	d105      	bne.n	800f2d6 <_dtoa_r+0xafe>
 800f2ca:	2331      	movs	r3, #49	; 0x31
 800f2cc:	f10a 0a01 	add.w	sl, sl, #1
 800f2d0:	f88b 3000 	strb.w	r3, [fp]
 800f2d4:	e6ff      	b.n	800f0d6 <_dtoa_r+0x8fe>
 800f2d6:	4615      	mov	r5, r2
 800f2d8:	e79f      	b.n	800f21a <_dtoa_r+0xa42>
 800f2da:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f340 <_dtoa_r+0xb68>
 800f2de:	e007      	b.n	800f2f0 <_dtoa_r+0xb18>
 800f2e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f344 <_dtoa_r+0xb6c>
 800f2e6:	b11b      	cbz	r3, 800f2f0 <_dtoa_r+0xb18>
 800f2e8:	f10b 0308 	add.w	r3, fp, #8
 800f2ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f2ee:	6013      	str	r3, [r2, #0]
 800f2f0:	4658      	mov	r0, fp
 800f2f2:	b017      	add	sp, #92	; 0x5c
 800f2f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2f8:	9b06      	ldr	r3, [sp, #24]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	f77f ae35 	ble.w	800ef6a <_dtoa_r+0x792>
 800f300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f302:	9307      	str	r3, [sp, #28]
 800f304:	e649      	b.n	800ef9a <_dtoa_r+0x7c2>
 800f306:	9b02      	ldr	r3, [sp, #8]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	dc03      	bgt.n	800f314 <_dtoa_r+0xb3c>
 800f30c:	9b06      	ldr	r3, [sp, #24]
 800f30e:	2b02      	cmp	r3, #2
 800f310:	f73f aecc 	bgt.w	800f0ac <_dtoa_r+0x8d4>
 800f314:	465d      	mov	r5, fp
 800f316:	4639      	mov	r1, r7
 800f318:	9804      	ldr	r0, [sp, #16]
 800f31a:	f7ff f9cf 	bl	800e6bc <quorem>
 800f31e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f322:	f805 8b01 	strb.w	r8, [r5], #1
 800f326:	9a02      	ldr	r2, [sp, #8]
 800f328:	eba5 030b 	sub.w	r3, r5, fp
 800f32c:	429a      	cmp	r2, r3
 800f32e:	ddb0      	ble.n	800f292 <_dtoa_r+0xaba>
 800f330:	2300      	movs	r3, #0
 800f332:	220a      	movs	r2, #10
 800f334:	9904      	ldr	r1, [sp, #16]
 800f336:	4620      	mov	r0, r4
 800f338:	f000 fa6a 	bl	800f810 <__multadd>
 800f33c:	9004      	str	r0, [sp, #16]
 800f33e:	e7ea      	b.n	800f316 <_dtoa_r+0xb3e>
 800f340:	08012465 	.word	0x08012465
 800f344:	08012489 	.word	0x08012489

0800f348 <__sflush_r>:
 800f348:	898a      	ldrh	r2, [r1, #12]
 800f34a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f34e:	4605      	mov	r5, r0
 800f350:	0710      	lsls	r0, r2, #28
 800f352:	460c      	mov	r4, r1
 800f354:	d458      	bmi.n	800f408 <__sflush_r+0xc0>
 800f356:	684b      	ldr	r3, [r1, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	dc05      	bgt.n	800f368 <__sflush_r+0x20>
 800f35c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f35e:	2b00      	cmp	r3, #0
 800f360:	dc02      	bgt.n	800f368 <__sflush_r+0x20>
 800f362:	2000      	movs	r0, #0
 800f364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f36a:	2e00      	cmp	r6, #0
 800f36c:	d0f9      	beq.n	800f362 <__sflush_r+0x1a>
 800f36e:	2300      	movs	r3, #0
 800f370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f374:	682f      	ldr	r7, [r5, #0]
 800f376:	6a21      	ldr	r1, [r4, #32]
 800f378:	602b      	str	r3, [r5, #0]
 800f37a:	d032      	beq.n	800f3e2 <__sflush_r+0x9a>
 800f37c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f37e:	89a3      	ldrh	r3, [r4, #12]
 800f380:	075a      	lsls	r2, r3, #29
 800f382:	d505      	bpl.n	800f390 <__sflush_r+0x48>
 800f384:	6863      	ldr	r3, [r4, #4]
 800f386:	1ac0      	subs	r0, r0, r3
 800f388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f38a:	b10b      	cbz	r3, 800f390 <__sflush_r+0x48>
 800f38c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f38e:	1ac0      	subs	r0, r0, r3
 800f390:	2300      	movs	r3, #0
 800f392:	4602      	mov	r2, r0
 800f394:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f396:	6a21      	ldr	r1, [r4, #32]
 800f398:	4628      	mov	r0, r5
 800f39a:	47b0      	blx	r6
 800f39c:	1c43      	adds	r3, r0, #1
 800f39e:	89a3      	ldrh	r3, [r4, #12]
 800f3a0:	d106      	bne.n	800f3b0 <__sflush_r+0x68>
 800f3a2:	6829      	ldr	r1, [r5, #0]
 800f3a4:	291d      	cmp	r1, #29
 800f3a6:	d848      	bhi.n	800f43a <__sflush_r+0xf2>
 800f3a8:	4a29      	ldr	r2, [pc, #164]	; (800f450 <__sflush_r+0x108>)
 800f3aa:	40ca      	lsrs	r2, r1
 800f3ac:	07d6      	lsls	r6, r2, #31
 800f3ae:	d544      	bpl.n	800f43a <__sflush_r+0xf2>
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	6062      	str	r2, [r4, #4]
 800f3b4:	04d9      	lsls	r1, r3, #19
 800f3b6:	6922      	ldr	r2, [r4, #16]
 800f3b8:	6022      	str	r2, [r4, #0]
 800f3ba:	d504      	bpl.n	800f3c6 <__sflush_r+0x7e>
 800f3bc:	1c42      	adds	r2, r0, #1
 800f3be:	d101      	bne.n	800f3c4 <__sflush_r+0x7c>
 800f3c0:	682b      	ldr	r3, [r5, #0]
 800f3c2:	b903      	cbnz	r3, 800f3c6 <__sflush_r+0x7e>
 800f3c4:	6560      	str	r0, [r4, #84]	; 0x54
 800f3c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f3c8:	602f      	str	r7, [r5, #0]
 800f3ca:	2900      	cmp	r1, #0
 800f3cc:	d0c9      	beq.n	800f362 <__sflush_r+0x1a>
 800f3ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3d2:	4299      	cmp	r1, r3
 800f3d4:	d002      	beq.n	800f3dc <__sflush_r+0x94>
 800f3d6:	4628      	mov	r0, r5
 800f3d8:	f7fe f9be 	bl	800d758 <_free_r>
 800f3dc:	2000      	movs	r0, #0
 800f3de:	6360      	str	r0, [r4, #52]	; 0x34
 800f3e0:	e7c0      	b.n	800f364 <__sflush_r+0x1c>
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	4628      	mov	r0, r5
 800f3e6:	47b0      	blx	r6
 800f3e8:	1c41      	adds	r1, r0, #1
 800f3ea:	d1c8      	bne.n	800f37e <__sflush_r+0x36>
 800f3ec:	682b      	ldr	r3, [r5, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d0c5      	beq.n	800f37e <__sflush_r+0x36>
 800f3f2:	2b1d      	cmp	r3, #29
 800f3f4:	d001      	beq.n	800f3fa <__sflush_r+0xb2>
 800f3f6:	2b16      	cmp	r3, #22
 800f3f8:	d101      	bne.n	800f3fe <__sflush_r+0xb6>
 800f3fa:	602f      	str	r7, [r5, #0]
 800f3fc:	e7b1      	b.n	800f362 <__sflush_r+0x1a>
 800f3fe:	89a3      	ldrh	r3, [r4, #12]
 800f400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f404:	81a3      	strh	r3, [r4, #12]
 800f406:	e7ad      	b.n	800f364 <__sflush_r+0x1c>
 800f408:	690f      	ldr	r7, [r1, #16]
 800f40a:	2f00      	cmp	r7, #0
 800f40c:	d0a9      	beq.n	800f362 <__sflush_r+0x1a>
 800f40e:	0793      	lsls	r3, r2, #30
 800f410:	680e      	ldr	r6, [r1, #0]
 800f412:	bf08      	it	eq
 800f414:	694b      	ldreq	r3, [r1, #20]
 800f416:	600f      	str	r7, [r1, #0]
 800f418:	bf18      	it	ne
 800f41a:	2300      	movne	r3, #0
 800f41c:	eba6 0807 	sub.w	r8, r6, r7
 800f420:	608b      	str	r3, [r1, #8]
 800f422:	f1b8 0f00 	cmp.w	r8, #0
 800f426:	dd9c      	ble.n	800f362 <__sflush_r+0x1a>
 800f428:	4643      	mov	r3, r8
 800f42a:	463a      	mov	r2, r7
 800f42c:	6a21      	ldr	r1, [r4, #32]
 800f42e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f430:	4628      	mov	r0, r5
 800f432:	47b0      	blx	r6
 800f434:	2800      	cmp	r0, #0
 800f436:	dc06      	bgt.n	800f446 <__sflush_r+0xfe>
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f43e:	81a3      	strh	r3, [r4, #12]
 800f440:	f04f 30ff 	mov.w	r0, #4294967295
 800f444:	e78e      	b.n	800f364 <__sflush_r+0x1c>
 800f446:	4407      	add	r7, r0
 800f448:	eba8 0800 	sub.w	r8, r8, r0
 800f44c:	e7e9      	b.n	800f422 <__sflush_r+0xda>
 800f44e:	bf00      	nop
 800f450:	20400001 	.word	0x20400001

0800f454 <_fflush_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	690b      	ldr	r3, [r1, #16]
 800f458:	4605      	mov	r5, r0
 800f45a:	460c      	mov	r4, r1
 800f45c:	b1db      	cbz	r3, 800f496 <_fflush_r+0x42>
 800f45e:	b118      	cbz	r0, 800f468 <_fflush_r+0x14>
 800f460:	6983      	ldr	r3, [r0, #24]
 800f462:	b90b      	cbnz	r3, 800f468 <_fflush_r+0x14>
 800f464:	f000 f860 	bl	800f528 <__sinit>
 800f468:	4b0c      	ldr	r3, [pc, #48]	; (800f49c <_fflush_r+0x48>)
 800f46a:	429c      	cmp	r4, r3
 800f46c:	d109      	bne.n	800f482 <_fflush_r+0x2e>
 800f46e:	686c      	ldr	r4, [r5, #4]
 800f470:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f474:	b17b      	cbz	r3, 800f496 <_fflush_r+0x42>
 800f476:	4621      	mov	r1, r4
 800f478:	4628      	mov	r0, r5
 800f47a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f47e:	f7ff bf63 	b.w	800f348 <__sflush_r>
 800f482:	4b07      	ldr	r3, [pc, #28]	; (800f4a0 <_fflush_r+0x4c>)
 800f484:	429c      	cmp	r4, r3
 800f486:	d101      	bne.n	800f48c <_fflush_r+0x38>
 800f488:	68ac      	ldr	r4, [r5, #8]
 800f48a:	e7f1      	b.n	800f470 <_fflush_r+0x1c>
 800f48c:	4b05      	ldr	r3, [pc, #20]	; (800f4a4 <_fflush_r+0x50>)
 800f48e:	429c      	cmp	r4, r3
 800f490:	bf08      	it	eq
 800f492:	68ec      	ldreq	r4, [r5, #12]
 800f494:	e7ec      	b.n	800f470 <_fflush_r+0x1c>
 800f496:	2000      	movs	r0, #0
 800f498:	bd38      	pop	{r3, r4, r5, pc}
 800f49a:	bf00      	nop
 800f49c:	080124b8 	.word	0x080124b8
 800f4a0:	080124d8 	.word	0x080124d8
 800f4a4:	08012498 	.word	0x08012498

0800f4a8 <std>:
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	b510      	push	{r4, lr}
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	e9c0 3300 	strd	r3, r3, [r0]
 800f4b2:	6083      	str	r3, [r0, #8]
 800f4b4:	8181      	strh	r1, [r0, #12]
 800f4b6:	6643      	str	r3, [r0, #100]	; 0x64
 800f4b8:	81c2      	strh	r2, [r0, #14]
 800f4ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4be:	6183      	str	r3, [r0, #24]
 800f4c0:	4619      	mov	r1, r3
 800f4c2:	2208      	movs	r2, #8
 800f4c4:	305c      	adds	r0, #92	; 0x5c
 800f4c6:	f7fe f93e 	bl	800d746 <memset>
 800f4ca:	4b05      	ldr	r3, [pc, #20]	; (800f4e0 <std+0x38>)
 800f4cc:	6263      	str	r3, [r4, #36]	; 0x24
 800f4ce:	4b05      	ldr	r3, [pc, #20]	; (800f4e4 <std+0x3c>)
 800f4d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4d2:	4b05      	ldr	r3, [pc, #20]	; (800f4e8 <std+0x40>)
 800f4d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4d6:	4b05      	ldr	r3, [pc, #20]	; (800f4ec <std+0x44>)
 800f4d8:	6224      	str	r4, [r4, #32]
 800f4da:	6323      	str	r3, [r4, #48]	; 0x30
 800f4dc:	bd10      	pop	{r4, pc}
 800f4de:	bf00      	nop
 800f4e0:	0800e461 	.word	0x0800e461
 800f4e4:	0800e483 	.word	0x0800e483
 800f4e8:	0800e4bb 	.word	0x0800e4bb
 800f4ec:	0800e4df 	.word	0x0800e4df

0800f4f0 <_cleanup_r>:
 800f4f0:	4901      	ldr	r1, [pc, #4]	; (800f4f8 <_cleanup_r+0x8>)
 800f4f2:	f000 b885 	b.w	800f600 <_fwalk_reent>
 800f4f6:	bf00      	nop
 800f4f8:	0800f455 	.word	0x0800f455

0800f4fc <__sfmoreglue>:
 800f4fc:	b570      	push	{r4, r5, r6, lr}
 800f4fe:	1e4a      	subs	r2, r1, #1
 800f500:	2568      	movs	r5, #104	; 0x68
 800f502:	4355      	muls	r5, r2
 800f504:	460e      	mov	r6, r1
 800f506:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f50a:	f7fe f973 	bl	800d7f4 <_malloc_r>
 800f50e:	4604      	mov	r4, r0
 800f510:	b140      	cbz	r0, 800f524 <__sfmoreglue+0x28>
 800f512:	2100      	movs	r1, #0
 800f514:	e9c0 1600 	strd	r1, r6, [r0]
 800f518:	300c      	adds	r0, #12
 800f51a:	60a0      	str	r0, [r4, #8]
 800f51c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f520:	f7fe f911 	bl	800d746 <memset>
 800f524:	4620      	mov	r0, r4
 800f526:	bd70      	pop	{r4, r5, r6, pc}

0800f528 <__sinit>:
 800f528:	6983      	ldr	r3, [r0, #24]
 800f52a:	b510      	push	{r4, lr}
 800f52c:	4604      	mov	r4, r0
 800f52e:	bb33      	cbnz	r3, 800f57e <__sinit+0x56>
 800f530:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f534:	6503      	str	r3, [r0, #80]	; 0x50
 800f536:	4b12      	ldr	r3, [pc, #72]	; (800f580 <__sinit+0x58>)
 800f538:	4a12      	ldr	r2, [pc, #72]	; (800f584 <__sinit+0x5c>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	6282      	str	r2, [r0, #40]	; 0x28
 800f53e:	4298      	cmp	r0, r3
 800f540:	bf04      	itt	eq
 800f542:	2301      	moveq	r3, #1
 800f544:	6183      	streq	r3, [r0, #24]
 800f546:	f000 f81f 	bl	800f588 <__sfp>
 800f54a:	6060      	str	r0, [r4, #4]
 800f54c:	4620      	mov	r0, r4
 800f54e:	f000 f81b 	bl	800f588 <__sfp>
 800f552:	60a0      	str	r0, [r4, #8]
 800f554:	4620      	mov	r0, r4
 800f556:	f000 f817 	bl	800f588 <__sfp>
 800f55a:	2200      	movs	r2, #0
 800f55c:	60e0      	str	r0, [r4, #12]
 800f55e:	2104      	movs	r1, #4
 800f560:	6860      	ldr	r0, [r4, #4]
 800f562:	f7ff ffa1 	bl	800f4a8 <std>
 800f566:	2201      	movs	r2, #1
 800f568:	2109      	movs	r1, #9
 800f56a:	68a0      	ldr	r0, [r4, #8]
 800f56c:	f7ff ff9c 	bl	800f4a8 <std>
 800f570:	2202      	movs	r2, #2
 800f572:	2112      	movs	r1, #18
 800f574:	68e0      	ldr	r0, [r4, #12]
 800f576:	f7ff ff97 	bl	800f4a8 <std>
 800f57a:	2301      	movs	r3, #1
 800f57c:	61a3      	str	r3, [r4, #24]
 800f57e:	bd10      	pop	{r4, pc}
 800f580:	08012440 	.word	0x08012440
 800f584:	0800f4f1 	.word	0x0800f4f1

0800f588 <__sfp>:
 800f588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f58a:	4b1b      	ldr	r3, [pc, #108]	; (800f5f8 <__sfp+0x70>)
 800f58c:	681e      	ldr	r6, [r3, #0]
 800f58e:	69b3      	ldr	r3, [r6, #24]
 800f590:	4607      	mov	r7, r0
 800f592:	b913      	cbnz	r3, 800f59a <__sfp+0x12>
 800f594:	4630      	mov	r0, r6
 800f596:	f7ff ffc7 	bl	800f528 <__sinit>
 800f59a:	3648      	adds	r6, #72	; 0x48
 800f59c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f5a0:	3b01      	subs	r3, #1
 800f5a2:	d503      	bpl.n	800f5ac <__sfp+0x24>
 800f5a4:	6833      	ldr	r3, [r6, #0]
 800f5a6:	b133      	cbz	r3, 800f5b6 <__sfp+0x2e>
 800f5a8:	6836      	ldr	r6, [r6, #0]
 800f5aa:	e7f7      	b.n	800f59c <__sfp+0x14>
 800f5ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f5b0:	b16d      	cbz	r5, 800f5ce <__sfp+0x46>
 800f5b2:	3468      	adds	r4, #104	; 0x68
 800f5b4:	e7f4      	b.n	800f5a0 <__sfp+0x18>
 800f5b6:	2104      	movs	r1, #4
 800f5b8:	4638      	mov	r0, r7
 800f5ba:	f7ff ff9f 	bl	800f4fc <__sfmoreglue>
 800f5be:	6030      	str	r0, [r6, #0]
 800f5c0:	2800      	cmp	r0, #0
 800f5c2:	d1f1      	bne.n	800f5a8 <__sfp+0x20>
 800f5c4:	230c      	movs	r3, #12
 800f5c6:	603b      	str	r3, [r7, #0]
 800f5c8:	4604      	mov	r4, r0
 800f5ca:	4620      	mov	r0, r4
 800f5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ce:	4b0b      	ldr	r3, [pc, #44]	; (800f5fc <__sfp+0x74>)
 800f5d0:	6665      	str	r5, [r4, #100]	; 0x64
 800f5d2:	e9c4 5500 	strd	r5, r5, [r4]
 800f5d6:	60a5      	str	r5, [r4, #8]
 800f5d8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f5dc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f5e0:	2208      	movs	r2, #8
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5e8:	f7fe f8ad 	bl	800d746 <memset>
 800f5ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5f4:	e7e9      	b.n	800f5ca <__sfp+0x42>
 800f5f6:	bf00      	nop
 800f5f8:	08012440 	.word	0x08012440
 800f5fc:	ffff0001 	.word	0xffff0001

0800f600 <_fwalk_reent>:
 800f600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f604:	4680      	mov	r8, r0
 800f606:	4689      	mov	r9, r1
 800f608:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f60c:	2600      	movs	r6, #0
 800f60e:	b914      	cbnz	r4, 800f616 <_fwalk_reent+0x16>
 800f610:	4630      	mov	r0, r6
 800f612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f616:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f61a:	3f01      	subs	r7, #1
 800f61c:	d501      	bpl.n	800f622 <_fwalk_reent+0x22>
 800f61e:	6824      	ldr	r4, [r4, #0]
 800f620:	e7f5      	b.n	800f60e <_fwalk_reent+0xe>
 800f622:	89ab      	ldrh	r3, [r5, #12]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d907      	bls.n	800f638 <_fwalk_reent+0x38>
 800f628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f62c:	3301      	adds	r3, #1
 800f62e:	d003      	beq.n	800f638 <_fwalk_reent+0x38>
 800f630:	4629      	mov	r1, r5
 800f632:	4640      	mov	r0, r8
 800f634:	47c8      	blx	r9
 800f636:	4306      	orrs	r6, r0
 800f638:	3568      	adds	r5, #104	; 0x68
 800f63a:	e7ee      	b.n	800f61a <_fwalk_reent+0x1a>

0800f63c <_localeconv_r>:
 800f63c:	4b04      	ldr	r3, [pc, #16]	; (800f650 <_localeconv_r+0x14>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	6a18      	ldr	r0, [r3, #32]
 800f642:	4b04      	ldr	r3, [pc, #16]	; (800f654 <_localeconv_r+0x18>)
 800f644:	2800      	cmp	r0, #0
 800f646:	bf08      	it	eq
 800f648:	4618      	moveq	r0, r3
 800f64a:	30f0      	adds	r0, #240	; 0xf0
 800f64c:	4770      	bx	lr
 800f64e:	bf00      	nop
 800f650:	200001b0 	.word	0x200001b0
 800f654:	20000214 	.word	0x20000214

0800f658 <_lseek_r>:
 800f658:	b538      	push	{r3, r4, r5, lr}
 800f65a:	4c07      	ldr	r4, [pc, #28]	; (800f678 <_lseek_r+0x20>)
 800f65c:	4605      	mov	r5, r0
 800f65e:	4608      	mov	r0, r1
 800f660:	4611      	mov	r1, r2
 800f662:	2200      	movs	r2, #0
 800f664:	6022      	str	r2, [r4, #0]
 800f666:	461a      	mov	r2, r3
 800f668:	f7f4 fa60 	bl	8003b2c <_lseek>
 800f66c:	1c43      	adds	r3, r0, #1
 800f66e:	d102      	bne.n	800f676 <_lseek_r+0x1e>
 800f670:	6823      	ldr	r3, [r4, #0]
 800f672:	b103      	cbz	r3, 800f676 <_lseek_r+0x1e>
 800f674:	602b      	str	r3, [r5, #0]
 800f676:	bd38      	pop	{r3, r4, r5, pc}
 800f678:	2000232c 	.word	0x2000232c

0800f67c <__swhatbuf_r>:
 800f67c:	b570      	push	{r4, r5, r6, lr}
 800f67e:	460e      	mov	r6, r1
 800f680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f684:	2900      	cmp	r1, #0
 800f686:	b096      	sub	sp, #88	; 0x58
 800f688:	4614      	mov	r4, r2
 800f68a:	461d      	mov	r5, r3
 800f68c:	da07      	bge.n	800f69e <__swhatbuf_r+0x22>
 800f68e:	2300      	movs	r3, #0
 800f690:	602b      	str	r3, [r5, #0]
 800f692:	89b3      	ldrh	r3, [r6, #12]
 800f694:	061a      	lsls	r2, r3, #24
 800f696:	d410      	bmi.n	800f6ba <__swhatbuf_r+0x3e>
 800f698:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f69c:	e00e      	b.n	800f6bc <__swhatbuf_r+0x40>
 800f69e:	466a      	mov	r2, sp
 800f6a0:	f000 fd22 	bl	80100e8 <_fstat_r>
 800f6a4:	2800      	cmp	r0, #0
 800f6a6:	dbf2      	blt.n	800f68e <__swhatbuf_r+0x12>
 800f6a8:	9a01      	ldr	r2, [sp, #4]
 800f6aa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f6ae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f6b2:	425a      	negs	r2, r3
 800f6b4:	415a      	adcs	r2, r3
 800f6b6:	602a      	str	r2, [r5, #0]
 800f6b8:	e7ee      	b.n	800f698 <__swhatbuf_r+0x1c>
 800f6ba:	2340      	movs	r3, #64	; 0x40
 800f6bc:	2000      	movs	r0, #0
 800f6be:	6023      	str	r3, [r4, #0]
 800f6c0:	b016      	add	sp, #88	; 0x58
 800f6c2:	bd70      	pop	{r4, r5, r6, pc}

0800f6c4 <__smakebuf_r>:
 800f6c4:	898b      	ldrh	r3, [r1, #12]
 800f6c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f6c8:	079d      	lsls	r5, r3, #30
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	d507      	bpl.n	800f6e0 <__smakebuf_r+0x1c>
 800f6d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f6d4:	6023      	str	r3, [r4, #0]
 800f6d6:	6123      	str	r3, [r4, #16]
 800f6d8:	2301      	movs	r3, #1
 800f6da:	6163      	str	r3, [r4, #20]
 800f6dc:	b002      	add	sp, #8
 800f6de:	bd70      	pop	{r4, r5, r6, pc}
 800f6e0:	ab01      	add	r3, sp, #4
 800f6e2:	466a      	mov	r2, sp
 800f6e4:	f7ff ffca 	bl	800f67c <__swhatbuf_r>
 800f6e8:	9900      	ldr	r1, [sp, #0]
 800f6ea:	4605      	mov	r5, r0
 800f6ec:	4630      	mov	r0, r6
 800f6ee:	f7fe f881 	bl	800d7f4 <_malloc_r>
 800f6f2:	b948      	cbnz	r0, 800f708 <__smakebuf_r+0x44>
 800f6f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6f8:	059a      	lsls	r2, r3, #22
 800f6fa:	d4ef      	bmi.n	800f6dc <__smakebuf_r+0x18>
 800f6fc:	f023 0303 	bic.w	r3, r3, #3
 800f700:	f043 0302 	orr.w	r3, r3, #2
 800f704:	81a3      	strh	r3, [r4, #12]
 800f706:	e7e3      	b.n	800f6d0 <__smakebuf_r+0xc>
 800f708:	4b0d      	ldr	r3, [pc, #52]	; (800f740 <__smakebuf_r+0x7c>)
 800f70a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f70c:	89a3      	ldrh	r3, [r4, #12]
 800f70e:	6020      	str	r0, [r4, #0]
 800f710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f714:	81a3      	strh	r3, [r4, #12]
 800f716:	9b00      	ldr	r3, [sp, #0]
 800f718:	6163      	str	r3, [r4, #20]
 800f71a:	9b01      	ldr	r3, [sp, #4]
 800f71c:	6120      	str	r0, [r4, #16]
 800f71e:	b15b      	cbz	r3, 800f738 <__smakebuf_r+0x74>
 800f720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f724:	4630      	mov	r0, r6
 800f726:	f000 fcf1 	bl	801010c <_isatty_r>
 800f72a:	b128      	cbz	r0, 800f738 <__smakebuf_r+0x74>
 800f72c:	89a3      	ldrh	r3, [r4, #12]
 800f72e:	f023 0303 	bic.w	r3, r3, #3
 800f732:	f043 0301 	orr.w	r3, r3, #1
 800f736:	81a3      	strh	r3, [r4, #12]
 800f738:	89a3      	ldrh	r3, [r4, #12]
 800f73a:	431d      	orrs	r5, r3
 800f73c:	81a5      	strh	r5, [r4, #12]
 800f73e:	e7cd      	b.n	800f6dc <__smakebuf_r+0x18>
 800f740:	0800f4f1 	.word	0x0800f4f1

0800f744 <memmove>:
 800f744:	4288      	cmp	r0, r1
 800f746:	b510      	push	{r4, lr}
 800f748:	eb01 0302 	add.w	r3, r1, r2
 800f74c:	d807      	bhi.n	800f75e <memmove+0x1a>
 800f74e:	1e42      	subs	r2, r0, #1
 800f750:	4299      	cmp	r1, r3
 800f752:	d00a      	beq.n	800f76a <memmove+0x26>
 800f754:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f758:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f75c:	e7f8      	b.n	800f750 <memmove+0xc>
 800f75e:	4283      	cmp	r3, r0
 800f760:	d9f5      	bls.n	800f74e <memmove+0xa>
 800f762:	1881      	adds	r1, r0, r2
 800f764:	1ad2      	subs	r2, r2, r3
 800f766:	42d3      	cmn	r3, r2
 800f768:	d100      	bne.n	800f76c <memmove+0x28>
 800f76a:	bd10      	pop	{r4, pc}
 800f76c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f770:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f774:	e7f7      	b.n	800f766 <memmove+0x22>

0800f776 <__malloc_lock>:
 800f776:	4770      	bx	lr

0800f778 <__malloc_unlock>:
 800f778:	4770      	bx	lr

0800f77a <_Balloc>:
 800f77a:	b570      	push	{r4, r5, r6, lr}
 800f77c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f77e:	4604      	mov	r4, r0
 800f780:	460e      	mov	r6, r1
 800f782:	b93d      	cbnz	r5, 800f794 <_Balloc+0x1a>
 800f784:	2010      	movs	r0, #16
 800f786:	f7fd ffc3 	bl	800d710 <malloc>
 800f78a:	6260      	str	r0, [r4, #36]	; 0x24
 800f78c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f790:	6005      	str	r5, [r0, #0]
 800f792:	60c5      	str	r5, [r0, #12]
 800f794:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f796:	68eb      	ldr	r3, [r5, #12]
 800f798:	b183      	cbz	r3, 800f7bc <_Balloc+0x42>
 800f79a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f7a2:	b9b8      	cbnz	r0, 800f7d4 <_Balloc+0x5a>
 800f7a4:	2101      	movs	r1, #1
 800f7a6:	fa01 f506 	lsl.w	r5, r1, r6
 800f7aa:	1d6a      	adds	r2, r5, #5
 800f7ac:	0092      	lsls	r2, r2, #2
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	f000 fabe 	bl	800fd30 <_calloc_r>
 800f7b4:	b160      	cbz	r0, 800f7d0 <_Balloc+0x56>
 800f7b6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f7ba:	e00e      	b.n	800f7da <_Balloc+0x60>
 800f7bc:	2221      	movs	r2, #33	; 0x21
 800f7be:	2104      	movs	r1, #4
 800f7c0:	4620      	mov	r0, r4
 800f7c2:	f000 fab5 	bl	800fd30 <_calloc_r>
 800f7c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f7c8:	60e8      	str	r0, [r5, #12]
 800f7ca:	68db      	ldr	r3, [r3, #12]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d1e4      	bne.n	800f79a <_Balloc+0x20>
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	bd70      	pop	{r4, r5, r6, pc}
 800f7d4:	6802      	ldr	r2, [r0, #0]
 800f7d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f7da:	2300      	movs	r3, #0
 800f7dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f7e0:	e7f7      	b.n	800f7d2 <_Balloc+0x58>

0800f7e2 <_Bfree>:
 800f7e2:	b570      	push	{r4, r5, r6, lr}
 800f7e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f7e6:	4606      	mov	r6, r0
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	b93c      	cbnz	r4, 800f7fc <_Bfree+0x1a>
 800f7ec:	2010      	movs	r0, #16
 800f7ee:	f7fd ff8f 	bl	800d710 <malloc>
 800f7f2:	6270      	str	r0, [r6, #36]	; 0x24
 800f7f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f7f8:	6004      	str	r4, [r0, #0]
 800f7fa:	60c4      	str	r4, [r0, #12]
 800f7fc:	b13d      	cbz	r5, 800f80e <_Bfree+0x2c>
 800f7fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f800:	686a      	ldr	r2, [r5, #4]
 800f802:	68db      	ldr	r3, [r3, #12]
 800f804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f808:	6029      	str	r1, [r5, #0]
 800f80a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f80e:	bd70      	pop	{r4, r5, r6, pc}

0800f810 <__multadd>:
 800f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f814:	690d      	ldr	r5, [r1, #16]
 800f816:	461f      	mov	r7, r3
 800f818:	4606      	mov	r6, r0
 800f81a:	460c      	mov	r4, r1
 800f81c:	f101 0c14 	add.w	ip, r1, #20
 800f820:	2300      	movs	r3, #0
 800f822:	f8dc 0000 	ldr.w	r0, [ip]
 800f826:	b281      	uxth	r1, r0
 800f828:	fb02 7101 	mla	r1, r2, r1, r7
 800f82c:	0c0f      	lsrs	r7, r1, #16
 800f82e:	0c00      	lsrs	r0, r0, #16
 800f830:	fb02 7000 	mla	r0, r2, r0, r7
 800f834:	b289      	uxth	r1, r1
 800f836:	3301      	adds	r3, #1
 800f838:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f83c:	429d      	cmp	r5, r3
 800f83e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f842:	f84c 1b04 	str.w	r1, [ip], #4
 800f846:	dcec      	bgt.n	800f822 <__multadd+0x12>
 800f848:	b1d7      	cbz	r7, 800f880 <__multadd+0x70>
 800f84a:	68a3      	ldr	r3, [r4, #8]
 800f84c:	42ab      	cmp	r3, r5
 800f84e:	dc12      	bgt.n	800f876 <__multadd+0x66>
 800f850:	6861      	ldr	r1, [r4, #4]
 800f852:	4630      	mov	r0, r6
 800f854:	3101      	adds	r1, #1
 800f856:	f7ff ff90 	bl	800f77a <_Balloc>
 800f85a:	6922      	ldr	r2, [r4, #16]
 800f85c:	3202      	adds	r2, #2
 800f85e:	f104 010c 	add.w	r1, r4, #12
 800f862:	4680      	mov	r8, r0
 800f864:	0092      	lsls	r2, r2, #2
 800f866:	300c      	adds	r0, #12
 800f868:	f7fd ff62 	bl	800d730 <memcpy>
 800f86c:	4621      	mov	r1, r4
 800f86e:	4630      	mov	r0, r6
 800f870:	f7ff ffb7 	bl	800f7e2 <_Bfree>
 800f874:	4644      	mov	r4, r8
 800f876:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f87a:	3501      	adds	r5, #1
 800f87c:	615f      	str	r7, [r3, #20]
 800f87e:	6125      	str	r5, [r4, #16]
 800f880:	4620      	mov	r0, r4
 800f882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f886 <__hi0bits>:
 800f886:	0c02      	lsrs	r2, r0, #16
 800f888:	0412      	lsls	r2, r2, #16
 800f88a:	4603      	mov	r3, r0
 800f88c:	b9b2      	cbnz	r2, 800f8bc <__hi0bits+0x36>
 800f88e:	0403      	lsls	r3, r0, #16
 800f890:	2010      	movs	r0, #16
 800f892:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f896:	bf04      	itt	eq
 800f898:	021b      	lsleq	r3, r3, #8
 800f89a:	3008      	addeq	r0, #8
 800f89c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f8a0:	bf04      	itt	eq
 800f8a2:	011b      	lsleq	r3, r3, #4
 800f8a4:	3004      	addeq	r0, #4
 800f8a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f8aa:	bf04      	itt	eq
 800f8ac:	009b      	lsleq	r3, r3, #2
 800f8ae:	3002      	addeq	r0, #2
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	db06      	blt.n	800f8c2 <__hi0bits+0x3c>
 800f8b4:	005b      	lsls	r3, r3, #1
 800f8b6:	d503      	bpl.n	800f8c0 <__hi0bits+0x3a>
 800f8b8:	3001      	adds	r0, #1
 800f8ba:	4770      	bx	lr
 800f8bc:	2000      	movs	r0, #0
 800f8be:	e7e8      	b.n	800f892 <__hi0bits+0xc>
 800f8c0:	2020      	movs	r0, #32
 800f8c2:	4770      	bx	lr

0800f8c4 <__lo0bits>:
 800f8c4:	6803      	ldr	r3, [r0, #0]
 800f8c6:	f013 0207 	ands.w	r2, r3, #7
 800f8ca:	4601      	mov	r1, r0
 800f8cc:	d00b      	beq.n	800f8e6 <__lo0bits+0x22>
 800f8ce:	07da      	lsls	r2, r3, #31
 800f8d0:	d423      	bmi.n	800f91a <__lo0bits+0x56>
 800f8d2:	0798      	lsls	r0, r3, #30
 800f8d4:	bf49      	itett	mi
 800f8d6:	085b      	lsrmi	r3, r3, #1
 800f8d8:	089b      	lsrpl	r3, r3, #2
 800f8da:	2001      	movmi	r0, #1
 800f8dc:	600b      	strmi	r3, [r1, #0]
 800f8de:	bf5c      	itt	pl
 800f8e0:	600b      	strpl	r3, [r1, #0]
 800f8e2:	2002      	movpl	r0, #2
 800f8e4:	4770      	bx	lr
 800f8e6:	b298      	uxth	r0, r3
 800f8e8:	b9a8      	cbnz	r0, 800f916 <__lo0bits+0x52>
 800f8ea:	0c1b      	lsrs	r3, r3, #16
 800f8ec:	2010      	movs	r0, #16
 800f8ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f8f2:	bf04      	itt	eq
 800f8f4:	0a1b      	lsreq	r3, r3, #8
 800f8f6:	3008      	addeq	r0, #8
 800f8f8:	071a      	lsls	r2, r3, #28
 800f8fa:	bf04      	itt	eq
 800f8fc:	091b      	lsreq	r3, r3, #4
 800f8fe:	3004      	addeq	r0, #4
 800f900:	079a      	lsls	r2, r3, #30
 800f902:	bf04      	itt	eq
 800f904:	089b      	lsreq	r3, r3, #2
 800f906:	3002      	addeq	r0, #2
 800f908:	07da      	lsls	r2, r3, #31
 800f90a:	d402      	bmi.n	800f912 <__lo0bits+0x4e>
 800f90c:	085b      	lsrs	r3, r3, #1
 800f90e:	d006      	beq.n	800f91e <__lo0bits+0x5a>
 800f910:	3001      	adds	r0, #1
 800f912:	600b      	str	r3, [r1, #0]
 800f914:	4770      	bx	lr
 800f916:	4610      	mov	r0, r2
 800f918:	e7e9      	b.n	800f8ee <__lo0bits+0x2a>
 800f91a:	2000      	movs	r0, #0
 800f91c:	4770      	bx	lr
 800f91e:	2020      	movs	r0, #32
 800f920:	4770      	bx	lr

0800f922 <__i2b>:
 800f922:	b510      	push	{r4, lr}
 800f924:	460c      	mov	r4, r1
 800f926:	2101      	movs	r1, #1
 800f928:	f7ff ff27 	bl	800f77a <_Balloc>
 800f92c:	2201      	movs	r2, #1
 800f92e:	6144      	str	r4, [r0, #20]
 800f930:	6102      	str	r2, [r0, #16]
 800f932:	bd10      	pop	{r4, pc}

0800f934 <__multiply>:
 800f934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f938:	4614      	mov	r4, r2
 800f93a:	690a      	ldr	r2, [r1, #16]
 800f93c:	6923      	ldr	r3, [r4, #16]
 800f93e:	429a      	cmp	r2, r3
 800f940:	bfb8      	it	lt
 800f942:	460b      	movlt	r3, r1
 800f944:	4688      	mov	r8, r1
 800f946:	bfbc      	itt	lt
 800f948:	46a0      	movlt	r8, r4
 800f94a:	461c      	movlt	r4, r3
 800f94c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f950:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f954:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f958:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f95c:	eb07 0609 	add.w	r6, r7, r9
 800f960:	42b3      	cmp	r3, r6
 800f962:	bfb8      	it	lt
 800f964:	3101      	addlt	r1, #1
 800f966:	f7ff ff08 	bl	800f77a <_Balloc>
 800f96a:	f100 0514 	add.w	r5, r0, #20
 800f96e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f972:	462b      	mov	r3, r5
 800f974:	2200      	movs	r2, #0
 800f976:	4573      	cmp	r3, lr
 800f978:	d316      	bcc.n	800f9a8 <__multiply+0x74>
 800f97a:	f104 0214 	add.w	r2, r4, #20
 800f97e:	f108 0114 	add.w	r1, r8, #20
 800f982:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f986:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f98a:	9300      	str	r3, [sp, #0]
 800f98c:	9b00      	ldr	r3, [sp, #0]
 800f98e:	9201      	str	r2, [sp, #4]
 800f990:	4293      	cmp	r3, r2
 800f992:	d80c      	bhi.n	800f9ae <__multiply+0x7a>
 800f994:	2e00      	cmp	r6, #0
 800f996:	dd03      	ble.n	800f9a0 <__multiply+0x6c>
 800f998:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d05d      	beq.n	800fa5c <__multiply+0x128>
 800f9a0:	6106      	str	r6, [r0, #16]
 800f9a2:	b003      	add	sp, #12
 800f9a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a8:	f843 2b04 	str.w	r2, [r3], #4
 800f9ac:	e7e3      	b.n	800f976 <__multiply+0x42>
 800f9ae:	f8b2 b000 	ldrh.w	fp, [r2]
 800f9b2:	f1bb 0f00 	cmp.w	fp, #0
 800f9b6:	d023      	beq.n	800fa00 <__multiply+0xcc>
 800f9b8:	4689      	mov	r9, r1
 800f9ba:	46ac      	mov	ip, r5
 800f9bc:	f04f 0800 	mov.w	r8, #0
 800f9c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800f9c4:	f8dc a000 	ldr.w	sl, [ip]
 800f9c8:	b2a3      	uxth	r3, r4
 800f9ca:	fa1f fa8a 	uxth.w	sl, sl
 800f9ce:	fb0b a303 	mla	r3, fp, r3, sl
 800f9d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f9d6:	f8dc 4000 	ldr.w	r4, [ip]
 800f9da:	4443      	add	r3, r8
 800f9dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f9e0:	fb0b 840a 	mla	r4, fp, sl, r8
 800f9e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f9e8:	46e2      	mov	sl, ip
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f9f0:	454f      	cmp	r7, r9
 800f9f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f9f6:	f84a 3b04 	str.w	r3, [sl], #4
 800f9fa:	d82b      	bhi.n	800fa54 <__multiply+0x120>
 800f9fc:	f8cc 8004 	str.w	r8, [ip, #4]
 800fa00:	9b01      	ldr	r3, [sp, #4]
 800fa02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fa06:	3204      	adds	r2, #4
 800fa08:	f1ba 0f00 	cmp.w	sl, #0
 800fa0c:	d020      	beq.n	800fa50 <__multiply+0x11c>
 800fa0e:	682b      	ldr	r3, [r5, #0]
 800fa10:	4689      	mov	r9, r1
 800fa12:	46a8      	mov	r8, r5
 800fa14:	f04f 0b00 	mov.w	fp, #0
 800fa18:	f8b9 c000 	ldrh.w	ip, [r9]
 800fa1c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fa20:	fb0a 440c 	mla	r4, sl, ip, r4
 800fa24:	445c      	add	r4, fp
 800fa26:	46c4      	mov	ip, r8
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fa2e:	f84c 3b04 	str.w	r3, [ip], #4
 800fa32:	f859 3b04 	ldr.w	r3, [r9], #4
 800fa36:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fa3a:	0c1b      	lsrs	r3, r3, #16
 800fa3c:	fb0a b303 	mla	r3, sl, r3, fp
 800fa40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fa44:	454f      	cmp	r7, r9
 800fa46:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fa4a:	d805      	bhi.n	800fa58 <__multiply+0x124>
 800fa4c:	f8c8 3004 	str.w	r3, [r8, #4]
 800fa50:	3504      	adds	r5, #4
 800fa52:	e79b      	b.n	800f98c <__multiply+0x58>
 800fa54:	46d4      	mov	ip, sl
 800fa56:	e7b3      	b.n	800f9c0 <__multiply+0x8c>
 800fa58:	46e0      	mov	r8, ip
 800fa5a:	e7dd      	b.n	800fa18 <__multiply+0xe4>
 800fa5c:	3e01      	subs	r6, #1
 800fa5e:	e799      	b.n	800f994 <__multiply+0x60>

0800fa60 <__pow5mult>:
 800fa60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa64:	4615      	mov	r5, r2
 800fa66:	f012 0203 	ands.w	r2, r2, #3
 800fa6a:	4606      	mov	r6, r0
 800fa6c:	460f      	mov	r7, r1
 800fa6e:	d007      	beq.n	800fa80 <__pow5mult+0x20>
 800fa70:	3a01      	subs	r2, #1
 800fa72:	4c21      	ldr	r4, [pc, #132]	; (800faf8 <__pow5mult+0x98>)
 800fa74:	2300      	movs	r3, #0
 800fa76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa7a:	f7ff fec9 	bl	800f810 <__multadd>
 800fa7e:	4607      	mov	r7, r0
 800fa80:	10ad      	asrs	r5, r5, #2
 800fa82:	d035      	beq.n	800faf0 <__pow5mult+0x90>
 800fa84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa86:	b93c      	cbnz	r4, 800fa98 <__pow5mult+0x38>
 800fa88:	2010      	movs	r0, #16
 800fa8a:	f7fd fe41 	bl	800d710 <malloc>
 800fa8e:	6270      	str	r0, [r6, #36]	; 0x24
 800fa90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa94:	6004      	str	r4, [r0, #0]
 800fa96:	60c4      	str	r4, [r0, #12]
 800fa98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800faa0:	b94c      	cbnz	r4, 800fab6 <__pow5mult+0x56>
 800faa2:	f240 2171 	movw	r1, #625	; 0x271
 800faa6:	4630      	mov	r0, r6
 800faa8:	f7ff ff3b 	bl	800f922 <__i2b>
 800faac:	2300      	movs	r3, #0
 800faae:	f8c8 0008 	str.w	r0, [r8, #8]
 800fab2:	4604      	mov	r4, r0
 800fab4:	6003      	str	r3, [r0, #0]
 800fab6:	f04f 0800 	mov.w	r8, #0
 800faba:	07eb      	lsls	r3, r5, #31
 800fabc:	d50a      	bpl.n	800fad4 <__pow5mult+0x74>
 800fabe:	4639      	mov	r1, r7
 800fac0:	4622      	mov	r2, r4
 800fac2:	4630      	mov	r0, r6
 800fac4:	f7ff ff36 	bl	800f934 <__multiply>
 800fac8:	4639      	mov	r1, r7
 800faca:	4681      	mov	r9, r0
 800facc:	4630      	mov	r0, r6
 800face:	f7ff fe88 	bl	800f7e2 <_Bfree>
 800fad2:	464f      	mov	r7, r9
 800fad4:	106d      	asrs	r5, r5, #1
 800fad6:	d00b      	beq.n	800faf0 <__pow5mult+0x90>
 800fad8:	6820      	ldr	r0, [r4, #0]
 800fada:	b938      	cbnz	r0, 800faec <__pow5mult+0x8c>
 800fadc:	4622      	mov	r2, r4
 800fade:	4621      	mov	r1, r4
 800fae0:	4630      	mov	r0, r6
 800fae2:	f7ff ff27 	bl	800f934 <__multiply>
 800fae6:	6020      	str	r0, [r4, #0]
 800fae8:	f8c0 8000 	str.w	r8, [r0]
 800faec:	4604      	mov	r4, r0
 800faee:	e7e4      	b.n	800faba <__pow5mult+0x5a>
 800faf0:	4638      	mov	r0, r7
 800faf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faf6:	bf00      	nop
 800faf8:	080125e8 	.word	0x080125e8

0800fafc <__lshift>:
 800fafc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb00:	460c      	mov	r4, r1
 800fb02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fb06:	6923      	ldr	r3, [r4, #16]
 800fb08:	6849      	ldr	r1, [r1, #4]
 800fb0a:	eb0a 0903 	add.w	r9, sl, r3
 800fb0e:	68a3      	ldr	r3, [r4, #8]
 800fb10:	4607      	mov	r7, r0
 800fb12:	4616      	mov	r6, r2
 800fb14:	f109 0501 	add.w	r5, r9, #1
 800fb18:	42ab      	cmp	r3, r5
 800fb1a:	db32      	blt.n	800fb82 <__lshift+0x86>
 800fb1c:	4638      	mov	r0, r7
 800fb1e:	f7ff fe2c 	bl	800f77a <_Balloc>
 800fb22:	2300      	movs	r3, #0
 800fb24:	4680      	mov	r8, r0
 800fb26:	f100 0114 	add.w	r1, r0, #20
 800fb2a:	461a      	mov	r2, r3
 800fb2c:	4553      	cmp	r3, sl
 800fb2e:	db2b      	blt.n	800fb88 <__lshift+0x8c>
 800fb30:	6920      	ldr	r0, [r4, #16]
 800fb32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fb36:	f104 0314 	add.w	r3, r4, #20
 800fb3a:	f016 021f 	ands.w	r2, r6, #31
 800fb3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fb42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fb46:	d025      	beq.n	800fb94 <__lshift+0x98>
 800fb48:	f1c2 0e20 	rsb	lr, r2, #32
 800fb4c:	2000      	movs	r0, #0
 800fb4e:	681e      	ldr	r6, [r3, #0]
 800fb50:	468a      	mov	sl, r1
 800fb52:	4096      	lsls	r6, r2
 800fb54:	4330      	orrs	r0, r6
 800fb56:	f84a 0b04 	str.w	r0, [sl], #4
 800fb5a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fb5e:	459c      	cmp	ip, r3
 800fb60:	fa20 f00e 	lsr.w	r0, r0, lr
 800fb64:	d814      	bhi.n	800fb90 <__lshift+0x94>
 800fb66:	6048      	str	r0, [r1, #4]
 800fb68:	b108      	cbz	r0, 800fb6e <__lshift+0x72>
 800fb6a:	f109 0502 	add.w	r5, r9, #2
 800fb6e:	3d01      	subs	r5, #1
 800fb70:	4638      	mov	r0, r7
 800fb72:	f8c8 5010 	str.w	r5, [r8, #16]
 800fb76:	4621      	mov	r1, r4
 800fb78:	f7ff fe33 	bl	800f7e2 <_Bfree>
 800fb7c:	4640      	mov	r0, r8
 800fb7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb82:	3101      	adds	r1, #1
 800fb84:	005b      	lsls	r3, r3, #1
 800fb86:	e7c7      	b.n	800fb18 <__lshift+0x1c>
 800fb88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fb8c:	3301      	adds	r3, #1
 800fb8e:	e7cd      	b.n	800fb2c <__lshift+0x30>
 800fb90:	4651      	mov	r1, sl
 800fb92:	e7dc      	b.n	800fb4e <__lshift+0x52>
 800fb94:	3904      	subs	r1, #4
 800fb96:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb9a:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb9e:	459c      	cmp	ip, r3
 800fba0:	d8f9      	bhi.n	800fb96 <__lshift+0x9a>
 800fba2:	e7e4      	b.n	800fb6e <__lshift+0x72>

0800fba4 <__mcmp>:
 800fba4:	6903      	ldr	r3, [r0, #16]
 800fba6:	690a      	ldr	r2, [r1, #16]
 800fba8:	1a9b      	subs	r3, r3, r2
 800fbaa:	b530      	push	{r4, r5, lr}
 800fbac:	d10c      	bne.n	800fbc8 <__mcmp+0x24>
 800fbae:	0092      	lsls	r2, r2, #2
 800fbb0:	3014      	adds	r0, #20
 800fbb2:	3114      	adds	r1, #20
 800fbb4:	1884      	adds	r4, r0, r2
 800fbb6:	4411      	add	r1, r2
 800fbb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fbbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fbc0:	4295      	cmp	r5, r2
 800fbc2:	d003      	beq.n	800fbcc <__mcmp+0x28>
 800fbc4:	d305      	bcc.n	800fbd2 <__mcmp+0x2e>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	4618      	mov	r0, r3
 800fbca:	bd30      	pop	{r4, r5, pc}
 800fbcc:	42a0      	cmp	r0, r4
 800fbce:	d3f3      	bcc.n	800fbb8 <__mcmp+0x14>
 800fbd0:	e7fa      	b.n	800fbc8 <__mcmp+0x24>
 800fbd2:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd6:	e7f7      	b.n	800fbc8 <__mcmp+0x24>

0800fbd8 <__mdiff>:
 800fbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbdc:	460d      	mov	r5, r1
 800fbde:	4607      	mov	r7, r0
 800fbe0:	4611      	mov	r1, r2
 800fbe2:	4628      	mov	r0, r5
 800fbe4:	4614      	mov	r4, r2
 800fbe6:	f7ff ffdd 	bl	800fba4 <__mcmp>
 800fbea:	1e06      	subs	r6, r0, #0
 800fbec:	d108      	bne.n	800fc00 <__mdiff+0x28>
 800fbee:	4631      	mov	r1, r6
 800fbf0:	4638      	mov	r0, r7
 800fbf2:	f7ff fdc2 	bl	800f77a <_Balloc>
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fbfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc00:	bfa4      	itt	ge
 800fc02:	4623      	movge	r3, r4
 800fc04:	462c      	movge	r4, r5
 800fc06:	4638      	mov	r0, r7
 800fc08:	6861      	ldr	r1, [r4, #4]
 800fc0a:	bfa6      	itte	ge
 800fc0c:	461d      	movge	r5, r3
 800fc0e:	2600      	movge	r6, #0
 800fc10:	2601      	movlt	r6, #1
 800fc12:	f7ff fdb2 	bl	800f77a <_Balloc>
 800fc16:	692b      	ldr	r3, [r5, #16]
 800fc18:	60c6      	str	r6, [r0, #12]
 800fc1a:	6926      	ldr	r6, [r4, #16]
 800fc1c:	f105 0914 	add.w	r9, r5, #20
 800fc20:	f104 0214 	add.w	r2, r4, #20
 800fc24:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fc28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fc2c:	f100 0514 	add.w	r5, r0, #20
 800fc30:	f04f 0e00 	mov.w	lr, #0
 800fc34:	f852 ab04 	ldr.w	sl, [r2], #4
 800fc38:	f859 4b04 	ldr.w	r4, [r9], #4
 800fc3c:	fa1e f18a 	uxtah	r1, lr, sl
 800fc40:	b2a3      	uxth	r3, r4
 800fc42:	1ac9      	subs	r1, r1, r3
 800fc44:	0c23      	lsrs	r3, r4, #16
 800fc46:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fc4a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fc4e:	b289      	uxth	r1, r1
 800fc50:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fc54:	45c8      	cmp	r8, r9
 800fc56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fc5a:	4694      	mov	ip, r2
 800fc5c:	f845 3b04 	str.w	r3, [r5], #4
 800fc60:	d8e8      	bhi.n	800fc34 <__mdiff+0x5c>
 800fc62:	45bc      	cmp	ip, r7
 800fc64:	d304      	bcc.n	800fc70 <__mdiff+0x98>
 800fc66:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fc6a:	b183      	cbz	r3, 800fc8e <__mdiff+0xb6>
 800fc6c:	6106      	str	r6, [r0, #16]
 800fc6e:	e7c5      	b.n	800fbfc <__mdiff+0x24>
 800fc70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fc74:	fa1e f381 	uxtah	r3, lr, r1
 800fc78:	141a      	asrs	r2, r3, #16
 800fc7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc84:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fc88:	f845 3b04 	str.w	r3, [r5], #4
 800fc8c:	e7e9      	b.n	800fc62 <__mdiff+0x8a>
 800fc8e:	3e01      	subs	r6, #1
 800fc90:	e7e9      	b.n	800fc66 <__mdiff+0x8e>

0800fc92 <__d2b>:
 800fc92:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc96:	460e      	mov	r6, r1
 800fc98:	2101      	movs	r1, #1
 800fc9a:	ec59 8b10 	vmov	r8, r9, d0
 800fc9e:	4615      	mov	r5, r2
 800fca0:	f7ff fd6b 	bl	800f77a <_Balloc>
 800fca4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fca8:	4607      	mov	r7, r0
 800fcaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fcae:	bb34      	cbnz	r4, 800fcfe <__d2b+0x6c>
 800fcb0:	9301      	str	r3, [sp, #4]
 800fcb2:	f1b8 0300 	subs.w	r3, r8, #0
 800fcb6:	d027      	beq.n	800fd08 <__d2b+0x76>
 800fcb8:	a802      	add	r0, sp, #8
 800fcba:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fcbe:	f7ff fe01 	bl	800f8c4 <__lo0bits>
 800fcc2:	9900      	ldr	r1, [sp, #0]
 800fcc4:	b1f0      	cbz	r0, 800fd04 <__d2b+0x72>
 800fcc6:	9a01      	ldr	r2, [sp, #4]
 800fcc8:	f1c0 0320 	rsb	r3, r0, #32
 800fccc:	fa02 f303 	lsl.w	r3, r2, r3
 800fcd0:	430b      	orrs	r3, r1
 800fcd2:	40c2      	lsrs	r2, r0
 800fcd4:	617b      	str	r3, [r7, #20]
 800fcd6:	9201      	str	r2, [sp, #4]
 800fcd8:	9b01      	ldr	r3, [sp, #4]
 800fcda:	61bb      	str	r3, [r7, #24]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	bf14      	ite	ne
 800fce0:	2102      	movne	r1, #2
 800fce2:	2101      	moveq	r1, #1
 800fce4:	6139      	str	r1, [r7, #16]
 800fce6:	b1c4      	cbz	r4, 800fd1a <__d2b+0x88>
 800fce8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fcec:	4404      	add	r4, r0
 800fcee:	6034      	str	r4, [r6, #0]
 800fcf0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcf4:	6028      	str	r0, [r5, #0]
 800fcf6:	4638      	mov	r0, r7
 800fcf8:	b003      	add	sp, #12
 800fcfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd02:	e7d5      	b.n	800fcb0 <__d2b+0x1e>
 800fd04:	6179      	str	r1, [r7, #20]
 800fd06:	e7e7      	b.n	800fcd8 <__d2b+0x46>
 800fd08:	a801      	add	r0, sp, #4
 800fd0a:	f7ff fddb 	bl	800f8c4 <__lo0bits>
 800fd0e:	9b01      	ldr	r3, [sp, #4]
 800fd10:	617b      	str	r3, [r7, #20]
 800fd12:	2101      	movs	r1, #1
 800fd14:	6139      	str	r1, [r7, #16]
 800fd16:	3020      	adds	r0, #32
 800fd18:	e7e5      	b.n	800fce6 <__d2b+0x54>
 800fd1a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fd1e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd22:	6030      	str	r0, [r6, #0]
 800fd24:	6918      	ldr	r0, [r3, #16]
 800fd26:	f7ff fdae 	bl	800f886 <__hi0bits>
 800fd2a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fd2e:	e7e1      	b.n	800fcf4 <__d2b+0x62>

0800fd30 <_calloc_r>:
 800fd30:	b538      	push	{r3, r4, r5, lr}
 800fd32:	fb02 f401 	mul.w	r4, r2, r1
 800fd36:	4621      	mov	r1, r4
 800fd38:	f7fd fd5c 	bl	800d7f4 <_malloc_r>
 800fd3c:	4605      	mov	r5, r0
 800fd3e:	b118      	cbz	r0, 800fd48 <_calloc_r+0x18>
 800fd40:	4622      	mov	r2, r4
 800fd42:	2100      	movs	r1, #0
 800fd44:	f7fd fcff 	bl	800d746 <memset>
 800fd48:	4628      	mov	r0, r5
 800fd4a:	bd38      	pop	{r3, r4, r5, pc}

0800fd4c <_realloc_r>:
 800fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd4e:	4607      	mov	r7, r0
 800fd50:	4614      	mov	r4, r2
 800fd52:	460e      	mov	r6, r1
 800fd54:	b921      	cbnz	r1, 800fd60 <_realloc_r+0x14>
 800fd56:	4611      	mov	r1, r2
 800fd58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fd5c:	f7fd bd4a 	b.w	800d7f4 <_malloc_r>
 800fd60:	b922      	cbnz	r2, 800fd6c <_realloc_r+0x20>
 800fd62:	f7fd fcf9 	bl	800d758 <_free_r>
 800fd66:	4625      	mov	r5, r4
 800fd68:	4628      	mov	r0, r5
 800fd6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd6c:	f000 f9f0 	bl	8010150 <_malloc_usable_size_r>
 800fd70:	42a0      	cmp	r0, r4
 800fd72:	d20f      	bcs.n	800fd94 <_realloc_r+0x48>
 800fd74:	4621      	mov	r1, r4
 800fd76:	4638      	mov	r0, r7
 800fd78:	f7fd fd3c 	bl	800d7f4 <_malloc_r>
 800fd7c:	4605      	mov	r5, r0
 800fd7e:	2800      	cmp	r0, #0
 800fd80:	d0f2      	beq.n	800fd68 <_realloc_r+0x1c>
 800fd82:	4631      	mov	r1, r6
 800fd84:	4622      	mov	r2, r4
 800fd86:	f7fd fcd3 	bl	800d730 <memcpy>
 800fd8a:	4631      	mov	r1, r6
 800fd8c:	4638      	mov	r0, r7
 800fd8e:	f7fd fce3 	bl	800d758 <_free_r>
 800fd92:	e7e9      	b.n	800fd68 <_realloc_r+0x1c>
 800fd94:	4635      	mov	r5, r6
 800fd96:	e7e7      	b.n	800fd68 <_realloc_r+0x1c>

0800fd98 <__ssputs_r>:
 800fd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd9c:	688e      	ldr	r6, [r1, #8]
 800fd9e:	429e      	cmp	r6, r3
 800fda0:	4682      	mov	sl, r0
 800fda2:	460c      	mov	r4, r1
 800fda4:	4690      	mov	r8, r2
 800fda6:	4699      	mov	r9, r3
 800fda8:	d837      	bhi.n	800fe1a <__ssputs_r+0x82>
 800fdaa:	898a      	ldrh	r2, [r1, #12]
 800fdac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fdb0:	d031      	beq.n	800fe16 <__ssputs_r+0x7e>
 800fdb2:	6825      	ldr	r5, [r4, #0]
 800fdb4:	6909      	ldr	r1, [r1, #16]
 800fdb6:	1a6f      	subs	r7, r5, r1
 800fdb8:	6965      	ldr	r5, [r4, #20]
 800fdba:	2302      	movs	r3, #2
 800fdbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdc0:	fb95 f5f3 	sdiv	r5, r5, r3
 800fdc4:	f109 0301 	add.w	r3, r9, #1
 800fdc8:	443b      	add	r3, r7
 800fdca:	429d      	cmp	r5, r3
 800fdcc:	bf38      	it	cc
 800fdce:	461d      	movcc	r5, r3
 800fdd0:	0553      	lsls	r3, r2, #21
 800fdd2:	d530      	bpl.n	800fe36 <__ssputs_r+0x9e>
 800fdd4:	4629      	mov	r1, r5
 800fdd6:	f7fd fd0d 	bl	800d7f4 <_malloc_r>
 800fdda:	4606      	mov	r6, r0
 800fddc:	b950      	cbnz	r0, 800fdf4 <__ssputs_r+0x5c>
 800fdde:	230c      	movs	r3, #12
 800fde0:	f8ca 3000 	str.w	r3, [sl]
 800fde4:	89a3      	ldrh	r3, [r4, #12]
 800fde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fdea:	81a3      	strh	r3, [r4, #12]
 800fdec:	f04f 30ff 	mov.w	r0, #4294967295
 800fdf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fdf4:	463a      	mov	r2, r7
 800fdf6:	6921      	ldr	r1, [r4, #16]
 800fdf8:	f7fd fc9a 	bl	800d730 <memcpy>
 800fdfc:	89a3      	ldrh	r3, [r4, #12]
 800fdfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fe02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe06:	81a3      	strh	r3, [r4, #12]
 800fe08:	6126      	str	r6, [r4, #16]
 800fe0a:	6165      	str	r5, [r4, #20]
 800fe0c:	443e      	add	r6, r7
 800fe0e:	1bed      	subs	r5, r5, r7
 800fe10:	6026      	str	r6, [r4, #0]
 800fe12:	60a5      	str	r5, [r4, #8]
 800fe14:	464e      	mov	r6, r9
 800fe16:	454e      	cmp	r6, r9
 800fe18:	d900      	bls.n	800fe1c <__ssputs_r+0x84>
 800fe1a:	464e      	mov	r6, r9
 800fe1c:	4632      	mov	r2, r6
 800fe1e:	4641      	mov	r1, r8
 800fe20:	6820      	ldr	r0, [r4, #0]
 800fe22:	f7ff fc8f 	bl	800f744 <memmove>
 800fe26:	68a3      	ldr	r3, [r4, #8]
 800fe28:	1b9b      	subs	r3, r3, r6
 800fe2a:	60a3      	str	r3, [r4, #8]
 800fe2c:	6823      	ldr	r3, [r4, #0]
 800fe2e:	441e      	add	r6, r3
 800fe30:	6026      	str	r6, [r4, #0]
 800fe32:	2000      	movs	r0, #0
 800fe34:	e7dc      	b.n	800fdf0 <__ssputs_r+0x58>
 800fe36:	462a      	mov	r2, r5
 800fe38:	f7ff ff88 	bl	800fd4c <_realloc_r>
 800fe3c:	4606      	mov	r6, r0
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d1e2      	bne.n	800fe08 <__ssputs_r+0x70>
 800fe42:	6921      	ldr	r1, [r4, #16]
 800fe44:	4650      	mov	r0, sl
 800fe46:	f7fd fc87 	bl	800d758 <_free_r>
 800fe4a:	e7c8      	b.n	800fdde <__ssputs_r+0x46>

0800fe4c <_svfiprintf_r>:
 800fe4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe50:	461d      	mov	r5, r3
 800fe52:	898b      	ldrh	r3, [r1, #12]
 800fe54:	061f      	lsls	r7, r3, #24
 800fe56:	b09d      	sub	sp, #116	; 0x74
 800fe58:	4680      	mov	r8, r0
 800fe5a:	460c      	mov	r4, r1
 800fe5c:	4616      	mov	r6, r2
 800fe5e:	d50f      	bpl.n	800fe80 <_svfiprintf_r+0x34>
 800fe60:	690b      	ldr	r3, [r1, #16]
 800fe62:	b96b      	cbnz	r3, 800fe80 <_svfiprintf_r+0x34>
 800fe64:	2140      	movs	r1, #64	; 0x40
 800fe66:	f7fd fcc5 	bl	800d7f4 <_malloc_r>
 800fe6a:	6020      	str	r0, [r4, #0]
 800fe6c:	6120      	str	r0, [r4, #16]
 800fe6e:	b928      	cbnz	r0, 800fe7c <_svfiprintf_r+0x30>
 800fe70:	230c      	movs	r3, #12
 800fe72:	f8c8 3000 	str.w	r3, [r8]
 800fe76:	f04f 30ff 	mov.w	r0, #4294967295
 800fe7a:	e0c8      	b.n	801000e <_svfiprintf_r+0x1c2>
 800fe7c:	2340      	movs	r3, #64	; 0x40
 800fe7e:	6163      	str	r3, [r4, #20]
 800fe80:	2300      	movs	r3, #0
 800fe82:	9309      	str	r3, [sp, #36]	; 0x24
 800fe84:	2320      	movs	r3, #32
 800fe86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fe8a:	2330      	movs	r3, #48	; 0x30
 800fe8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fe90:	9503      	str	r5, [sp, #12]
 800fe92:	f04f 0b01 	mov.w	fp, #1
 800fe96:	4637      	mov	r7, r6
 800fe98:	463d      	mov	r5, r7
 800fe9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800fe9e:	b10b      	cbz	r3, 800fea4 <_svfiprintf_r+0x58>
 800fea0:	2b25      	cmp	r3, #37	; 0x25
 800fea2:	d13e      	bne.n	800ff22 <_svfiprintf_r+0xd6>
 800fea4:	ebb7 0a06 	subs.w	sl, r7, r6
 800fea8:	d00b      	beq.n	800fec2 <_svfiprintf_r+0x76>
 800feaa:	4653      	mov	r3, sl
 800feac:	4632      	mov	r2, r6
 800feae:	4621      	mov	r1, r4
 800feb0:	4640      	mov	r0, r8
 800feb2:	f7ff ff71 	bl	800fd98 <__ssputs_r>
 800feb6:	3001      	adds	r0, #1
 800feb8:	f000 80a4 	beq.w	8010004 <_svfiprintf_r+0x1b8>
 800febc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800febe:	4453      	add	r3, sl
 800fec0:	9309      	str	r3, [sp, #36]	; 0x24
 800fec2:	783b      	ldrb	r3, [r7, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f000 809d 	beq.w	8010004 <_svfiprintf_r+0x1b8>
 800feca:	2300      	movs	r3, #0
 800fecc:	f04f 32ff 	mov.w	r2, #4294967295
 800fed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fed4:	9304      	str	r3, [sp, #16]
 800fed6:	9307      	str	r3, [sp, #28]
 800fed8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fedc:	931a      	str	r3, [sp, #104]	; 0x68
 800fede:	462f      	mov	r7, r5
 800fee0:	2205      	movs	r2, #5
 800fee2:	f817 1b01 	ldrb.w	r1, [r7], #1
 800fee6:	4850      	ldr	r0, [pc, #320]	; (8010028 <_svfiprintf_r+0x1dc>)
 800fee8:	f7f0 f99a 	bl	8000220 <memchr>
 800feec:	9b04      	ldr	r3, [sp, #16]
 800feee:	b9d0      	cbnz	r0, 800ff26 <_svfiprintf_r+0xda>
 800fef0:	06d9      	lsls	r1, r3, #27
 800fef2:	bf44      	itt	mi
 800fef4:	2220      	movmi	r2, #32
 800fef6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800fefa:	071a      	lsls	r2, r3, #28
 800fefc:	bf44      	itt	mi
 800fefe:	222b      	movmi	r2, #43	; 0x2b
 800ff00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff04:	782a      	ldrb	r2, [r5, #0]
 800ff06:	2a2a      	cmp	r2, #42	; 0x2a
 800ff08:	d015      	beq.n	800ff36 <_svfiprintf_r+0xea>
 800ff0a:	9a07      	ldr	r2, [sp, #28]
 800ff0c:	462f      	mov	r7, r5
 800ff0e:	2000      	movs	r0, #0
 800ff10:	250a      	movs	r5, #10
 800ff12:	4639      	mov	r1, r7
 800ff14:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff18:	3b30      	subs	r3, #48	; 0x30
 800ff1a:	2b09      	cmp	r3, #9
 800ff1c:	d94d      	bls.n	800ffba <_svfiprintf_r+0x16e>
 800ff1e:	b1b8      	cbz	r0, 800ff50 <_svfiprintf_r+0x104>
 800ff20:	e00f      	b.n	800ff42 <_svfiprintf_r+0xf6>
 800ff22:	462f      	mov	r7, r5
 800ff24:	e7b8      	b.n	800fe98 <_svfiprintf_r+0x4c>
 800ff26:	4a40      	ldr	r2, [pc, #256]	; (8010028 <_svfiprintf_r+0x1dc>)
 800ff28:	1a80      	subs	r0, r0, r2
 800ff2a:	fa0b f000 	lsl.w	r0, fp, r0
 800ff2e:	4318      	orrs	r0, r3
 800ff30:	9004      	str	r0, [sp, #16]
 800ff32:	463d      	mov	r5, r7
 800ff34:	e7d3      	b.n	800fede <_svfiprintf_r+0x92>
 800ff36:	9a03      	ldr	r2, [sp, #12]
 800ff38:	1d11      	adds	r1, r2, #4
 800ff3a:	6812      	ldr	r2, [r2, #0]
 800ff3c:	9103      	str	r1, [sp, #12]
 800ff3e:	2a00      	cmp	r2, #0
 800ff40:	db01      	blt.n	800ff46 <_svfiprintf_r+0xfa>
 800ff42:	9207      	str	r2, [sp, #28]
 800ff44:	e004      	b.n	800ff50 <_svfiprintf_r+0x104>
 800ff46:	4252      	negs	r2, r2
 800ff48:	f043 0302 	orr.w	r3, r3, #2
 800ff4c:	9207      	str	r2, [sp, #28]
 800ff4e:	9304      	str	r3, [sp, #16]
 800ff50:	783b      	ldrb	r3, [r7, #0]
 800ff52:	2b2e      	cmp	r3, #46	; 0x2e
 800ff54:	d10c      	bne.n	800ff70 <_svfiprintf_r+0x124>
 800ff56:	787b      	ldrb	r3, [r7, #1]
 800ff58:	2b2a      	cmp	r3, #42	; 0x2a
 800ff5a:	d133      	bne.n	800ffc4 <_svfiprintf_r+0x178>
 800ff5c:	9b03      	ldr	r3, [sp, #12]
 800ff5e:	1d1a      	adds	r2, r3, #4
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	9203      	str	r2, [sp, #12]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	bfb8      	it	lt
 800ff68:	f04f 33ff 	movlt.w	r3, #4294967295
 800ff6c:	3702      	adds	r7, #2
 800ff6e:	9305      	str	r3, [sp, #20]
 800ff70:	4d2e      	ldr	r5, [pc, #184]	; (801002c <_svfiprintf_r+0x1e0>)
 800ff72:	7839      	ldrb	r1, [r7, #0]
 800ff74:	2203      	movs	r2, #3
 800ff76:	4628      	mov	r0, r5
 800ff78:	f7f0 f952 	bl	8000220 <memchr>
 800ff7c:	b138      	cbz	r0, 800ff8e <_svfiprintf_r+0x142>
 800ff7e:	2340      	movs	r3, #64	; 0x40
 800ff80:	1b40      	subs	r0, r0, r5
 800ff82:	fa03 f000 	lsl.w	r0, r3, r0
 800ff86:	9b04      	ldr	r3, [sp, #16]
 800ff88:	4303      	orrs	r3, r0
 800ff8a:	3701      	adds	r7, #1
 800ff8c:	9304      	str	r3, [sp, #16]
 800ff8e:	7839      	ldrb	r1, [r7, #0]
 800ff90:	4827      	ldr	r0, [pc, #156]	; (8010030 <_svfiprintf_r+0x1e4>)
 800ff92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ff96:	2206      	movs	r2, #6
 800ff98:	1c7e      	adds	r6, r7, #1
 800ff9a:	f7f0 f941 	bl	8000220 <memchr>
 800ff9e:	2800      	cmp	r0, #0
 800ffa0:	d038      	beq.n	8010014 <_svfiprintf_r+0x1c8>
 800ffa2:	4b24      	ldr	r3, [pc, #144]	; (8010034 <_svfiprintf_r+0x1e8>)
 800ffa4:	bb13      	cbnz	r3, 800ffec <_svfiprintf_r+0x1a0>
 800ffa6:	9b03      	ldr	r3, [sp, #12]
 800ffa8:	3307      	adds	r3, #7
 800ffaa:	f023 0307 	bic.w	r3, r3, #7
 800ffae:	3308      	adds	r3, #8
 800ffb0:	9303      	str	r3, [sp, #12]
 800ffb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffb4:	444b      	add	r3, r9
 800ffb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ffb8:	e76d      	b.n	800fe96 <_svfiprintf_r+0x4a>
 800ffba:	fb05 3202 	mla	r2, r5, r2, r3
 800ffbe:	2001      	movs	r0, #1
 800ffc0:	460f      	mov	r7, r1
 800ffc2:	e7a6      	b.n	800ff12 <_svfiprintf_r+0xc6>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	3701      	adds	r7, #1
 800ffc8:	9305      	str	r3, [sp, #20]
 800ffca:	4619      	mov	r1, r3
 800ffcc:	250a      	movs	r5, #10
 800ffce:	4638      	mov	r0, r7
 800ffd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffd4:	3a30      	subs	r2, #48	; 0x30
 800ffd6:	2a09      	cmp	r2, #9
 800ffd8:	d903      	bls.n	800ffe2 <_svfiprintf_r+0x196>
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d0c8      	beq.n	800ff70 <_svfiprintf_r+0x124>
 800ffde:	9105      	str	r1, [sp, #20]
 800ffe0:	e7c6      	b.n	800ff70 <_svfiprintf_r+0x124>
 800ffe2:	fb05 2101 	mla	r1, r5, r1, r2
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	4607      	mov	r7, r0
 800ffea:	e7f0      	b.n	800ffce <_svfiprintf_r+0x182>
 800ffec:	ab03      	add	r3, sp, #12
 800ffee:	9300      	str	r3, [sp, #0]
 800fff0:	4622      	mov	r2, r4
 800fff2:	4b11      	ldr	r3, [pc, #68]	; (8010038 <_svfiprintf_r+0x1ec>)
 800fff4:	a904      	add	r1, sp, #16
 800fff6:	4640      	mov	r0, r8
 800fff8:	f7fd fe2a 	bl	800dc50 <_printf_float>
 800fffc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8010000:	4681      	mov	r9, r0
 8010002:	d1d6      	bne.n	800ffb2 <_svfiprintf_r+0x166>
 8010004:	89a3      	ldrh	r3, [r4, #12]
 8010006:	065b      	lsls	r3, r3, #25
 8010008:	f53f af35 	bmi.w	800fe76 <_svfiprintf_r+0x2a>
 801000c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801000e:	b01d      	add	sp, #116	; 0x74
 8010010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010014:	ab03      	add	r3, sp, #12
 8010016:	9300      	str	r3, [sp, #0]
 8010018:	4622      	mov	r2, r4
 801001a:	4b07      	ldr	r3, [pc, #28]	; (8010038 <_svfiprintf_r+0x1ec>)
 801001c:	a904      	add	r1, sp, #16
 801001e:	4640      	mov	r0, r8
 8010020:	f7fe f8cc 	bl	800e1bc <_printf_i>
 8010024:	e7ea      	b.n	800fffc <_svfiprintf_r+0x1b0>
 8010026:	bf00      	nop
 8010028:	08012444 	.word	0x08012444
 801002c:	0801244a 	.word	0x0801244a
 8010030:	0801244e 	.word	0x0801244e
 8010034:	0800dc51 	.word	0x0800dc51
 8010038:	0800fd99 	.word	0x0800fd99

0801003c <_read_r>:
 801003c:	b538      	push	{r3, r4, r5, lr}
 801003e:	4c07      	ldr	r4, [pc, #28]	; (801005c <_read_r+0x20>)
 8010040:	4605      	mov	r5, r0
 8010042:	4608      	mov	r0, r1
 8010044:	4611      	mov	r1, r2
 8010046:	2200      	movs	r2, #0
 8010048:	6022      	str	r2, [r4, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	f7f3 fd0e 	bl	8003a6c <_read>
 8010050:	1c43      	adds	r3, r0, #1
 8010052:	d102      	bne.n	801005a <_read_r+0x1e>
 8010054:	6823      	ldr	r3, [r4, #0]
 8010056:	b103      	cbz	r3, 801005a <_read_r+0x1e>
 8010058:	602b      	str	r3, [r5, #0]
 801005a:	bd38      	pop	{r3, r4, r5, pc}
 801005c:	2000232c 	.word	0x2000232c

08010060 <_raise_r>:
 8010060:	291f      	cmp	r1, #31
 8010062:	b538      	push	{r3, r4, r5, lr}
 8010064:	4604      	mov	r4, r0
 8010066:	460d      	mov	r5, r1
 8010068:	d904      	bls.n	8010074 <_raise_r+0x14>
 801006a:	2316      	movs	r3, #22
 801006c:	6003      	str	r3, [r0, #0]
 801006e:	f04f 30ff 	mov.w	r0, #4294967295
 8010072:	bd38      	pop	{r3, r4, r5, pc}
 8010074:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010076:	b112      	cbz	r2, 801007e <_raise_r+0x1e>
 8010078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801007c:	b94b      	cbnz	r3, 8010092 <_raise_r+0x32>
 801007e:	4620      	mov	r0, r4
 8010080:	f000 f830 	bl	80100e4 <_getpid_r>
 8010084:	462a      	mov	r2, r5
 8010086:	4601      	mov	r1, r0
 8010088:	4620      	mov	r0, r4
 801008a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801008e:	f000 b817 	b.w	80100c0 <_kill_r>
 8010092:	2b01      	cmp	r3, #1
 8010094:	d00a      	beq.n	80100ac <_raise_r+0x4c>
 8010096:	1c59      	adds	r1, r3, #1
 8010098:	d103      	bne.n	80100a2 <_raise_r+0x42>
 801009a:	2316      	movs	r3, #22
 801009c:	6003      	str	r3, [r0, #0]
 801009e:	2001      	movs	r0, #1
 80100a0:	e7e7      	b.n	8010072 <_raise_r+0x12>
 80100a2:	2400      	movs	r4, #0
 80100a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100a8:	4628      	mov	r0, r5
 80100aa:	4798      	blx	r3
 80100ac:	2000      	movs	r0, #0
 80100ae:	e7e0      	b.n	8010072 <_raise_r+0x12>

080100b0 <raise>:
 80100b0:	4b02      	ldr	r3, [pc, #8]	; (80100bc <raise+0xc>)
 80100b2:	4601      	mov	r1, r0
 80100b4:	6818      	ldr	r0, [r3, #0]
 80100b6:	f7ff bfd3 	b.w	8010060 <_raise_r>
 80100ba:	bf00      	nop
 80100bc:	200001b0 	.word	0x200001b0

080100c0 <_kill_r>:
 80100c0:	b538      	push	{r3, r4, r5, lr}
 80100c2:	4c07      	ldr	r4, [pc, #28]	; (80100e0 <_kill_r+0x20>)
 80100c4:	2300      	movs	r3, #0
 80100c6:	4605      	mov	r5, r0
 80100c8:	4608      	mov	r0, r1
 80100ca:	4611      	mov	r1, r2
 80100cc:	6023      	str	r3, [r4, #0]
 80100ce:	f7f3 fcb3 	bl	8003a38 <_kill>
 80100d2:	1c43      	adds	r3, r0, #1
 80100d4:	d102      	bne.n	80100dc <_kill_r+0x1c>
 80100d6:	6823      	ldr	r3, [r4, #0]
 80100d8:	b103      	cbz	r3, 80100dc <_kill_r+0x1c>
 80100da:	602b      	str	r3, [r5, #0]
 80100dc:	bd38      	pop	{r3, r4, r5, pc}
 80100de:	bf00      	nop
 80100e0:	2000232c 	.word	0x2000232c

080100e4 <_getpid_r>:
 80100e4:	f7f3 bca0 	b.w	8003a28 <_getpid>

080100e8 <_fstat_r>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4c07      	ldr	r4, [pc, #28]	; (8010108 <_fstat_r+0x20>)
 80100ec:	2300      	movs	r3, #0
 80100ee:	4605      	mov	r5, r0
 80100f0:	4608      	mov	r0, r1
 80100f2:	4611      	mov	r1, r2
 80100f4:	6023      	str	r3, [r4, #0]
 80100f6:	f7f3 fcfe 	bl	8003af6 <_fstat>
 80100fa:	1c43      	adds	r3, r0, #1
 80100fc:	d102      	bne.n	8010104 <_fstat_r+0x1c>
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	b103      	cbz	r3, 8010104 <_fstat_r+0x1c>
 8010102:	602b      	str	r3, [r5, #0]
 8010104:	bd38      	pop	{r3, r4, r5, pc}
 8010106:	bf00      	nop
 8010108:	2000232c 	.word	0x2000232c

0801010c <_isatty_r>:
 801010c:	b538      	push	{r3, r4, r5, lr}
 801010e:	4c06      	ldr	r4, [pc, #24]	; (8010128 <_isatty_r+0x1c>)
 8010110:	2300      	movs	r3, #0
 8010112:	4605      	mov	r5, r0
 8010114:	4608      	mov	r0, r1
 8010116:	6023      	str	r3, [r4, #0]
 8010118:	f7f3 fcfd 	bl	8003b16 <_isatty>
 801011c:	1c43      	adds	r3, r0, #1
 801011e:	d102      	bne.n	8010126 <_isatty_r+0x1a>
 8010120:	6823      	ldr	r3, [r4, #0]
 8010122:	b103      	cbz	r3, 8010126 <_isatty_r+0x1a>
 8010124:	602b      	str	r3, [r5, #0]
 8010126:	bd38      	pop	{r3, r4, r5, pc}
 8010128:	2000232c 	.word	0x2000232c

0801012c <__ascii_mbtowc>:
 801012c:	b082      	sub	sp, #8
 801012e:	b901      	cbnz	r1, 8010132 <__ascii_mbtowc+0x6>
 8010130:	a901      	add	r1, sp, #4
 8010132:	b142      	cbz	r2, 8010146 <__ascii_mbtowc+0x1a>
 8010134:	b14b      	cbz	r3, 801014a <__ascii_mbtowc+0x1e>
 8010136:	7813      	ldrb	r3, [r2, #0]
 8010138:	600b      	str	r3, [r1, #0]
 801013a:	7812      	ldrb	r2, [r2, #0]
 801013c:	1c10      	adds	r0, r2, #0
 801013e:	bf18      	it	ne
 8010140:	2001      	movne	r0, #1
 8010142:	b002      	add	sp, #8
 8010144:	4770      	bx	lr
 8010146:	4610      	mov	r0, r2
 8010148:	e7fb      	b.n	8010142 <__ascii_mbtowc+0x16>
 801014a:	f06f 0001 	mvn.w	r0, #1
 801014e:	e7f8      	b.n	8010142 <__ascii_mbtowc+0x16>

08010150 <_malloc_usable_size_r>:
 8010150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010154:	1f18      	subs	r0, r3, #4
 8010156:	2b00      	cmp	r3, #0
 8010158:	bfbc      	itt	lt
 801015a:	580b      	ldrlt	r3, [r1, r0]
 801015c:	18c0      	addlt	r0, r0, r3
 801015e:	4770      	bx	lr

08010160 <__ascii_wctomb>:
 8010160:	b149      	cbz	r1, 8010176 <__ascii_wctomb+0x16>
 8010162:	2aff      	cmp	r2, #255	; 0xff
 8010164:	bf85      	ittet	hi
 8010166:	238a      	movhi	r3, #138	; 0x8a
 8010168:	6003      	strhi	r3, [r0, #0]
 801016a:	700a      	strbls	r2, [r1, #0]
 801016c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010170:	bf98      	it	ls
 8010172:	2001      	movls	r0, #1
 8010174:	4770      	bx	lr
 8010176:	4608      	mov	r0, r1
 8010178:	4770      	bx	lr
 801017a:	0000      	movs	r0, r0
 801017c:	0000      	movs	r0, r0
	...

08010180 <cos>:
 8010180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010182:	ec51 0b10 	vmov	r0, r1, d0
 8010186:	4a1e      	ldr	r2, [pc, #120]	; (8010200 <cos+0x80>)
 8010188:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801018c:	4293      	cmp	r3, r2
 801018e:	dc06      	bgt.n	801019e <cos+0x1e>
 8010190:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80101f8 <cos+0x78>
 8010194:	f000 fec8 	bl	8010f28 <__kernel_cos>
 8010198:	ec51 0b10 	vmov	r0, r1, d0
 801019c:	e007      	b.n	80101ae <cos+0x2e>
 801019e:	4a19      	ldr	r2, [pc, #100]	; (8010204 <cos+0x84>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	dd09      	ble.n	80101b8 <cos+0x38>
 80101a4:	ee10 2a10 	vmov	r2, s0
 80101a8:	460b      	mov	r3, r1
 80101aa:	f7f0 f88d 	bl	80002c8 <__aeabi_dsub>
 80101ae:	ec41 0b10 	vmov	d0, r0, r1
 80101b2:	b005      	add	sp, #20
 80101b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80101b8:	4668      	mov	r0, sp
 80101ba:	f000 fc11 	bl	80109e0 <__ieee754_rem_pio2>
 80101be:	f000 0003 	and.w	r0, r0, #3
 80101c2:	2801      	cmp	r0, #1
 80101c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80101c8:	ed9d 0b00 	vldr	d0, [sp]
 80101cc:	d007      	beq.n	80101de <cos+0x5e>
 80101ce:	2802      	cmp	r0, #2
 80101d0:	d00e      	beq.n	80101f0 <cos+0x70>
 80101d2:	2800      	cmp	r0, #0
 80101d4:	d0de      	beq.n	8010194 <cos+0x14>
 80101d6:	2001      	movs	r0, #1
 80101d8:	f001 faae 	bl	8011738 <__kernel_sin>
 80101dc:	e7dc      	b.n	8010198 <cos+0x18>
 80101de:	f001 faab 	bl	8011738 <__kernel_sin>
 80101e2:	ec53 2b10 	vmov	r2, r3, d0
 80101e6:	ee10 0a10 	vmov	r0, s0
 80101ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80101ee:	e7de      	b.n	80101ae <cos+0x2e>
 80101f0:	f000 fe9a 	bl	8010f28 <__kernel_cos>
 80101f4:	e7f5      	b.n	80101e2 <cos+0x62>
 80101f6:	bf00      	nop
	...
 8010200:	3fe921fb 	.word	0x3fe921fb
 8010204:	7fefffff 	.word	0x7fefffff

08010208 <sin>:
 8010208:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801020a:	ec51 0b10 	vmov	r0, r1, d0
 801020e:	4a20      	ldr	r2, [pc, #128]	; (8010290 <sin+0x88>)
 8010210:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010214:	4293      	cmp	r3, r2
 8010216:	dc07      	bgt.n	8010228 <sin+0x20>
 8010218:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010288 <sin+0x80>
 801021c:	2000      	movs	r0, #0
 801021e:	f001 fa8b 	bl	8011738 <__kernel_sin>
 8010222:	ec51 0b10 	vmov	r0, r1, d0
 8010226:	e007      	b.n	8010238 <sin+0x30>
 8010228:	4a1a      	ldr	r2, [pc, #104]	; (8010294 <sin+0x8c>)
 801022a:	4293      	cmp	r3, r2
 801022c:	dd09      	ble.n	8010242 <sin+0x3a>
 801022e:	ee10 2a10 	vmov	r2, s0
 8010232:	460b      	mov	r3, r1
 8010234:	f7f0 f848 	bl	80002c8 <__aeabi_dsub>
 8010238:	ec41 0b10 	vmov	d0, r0, r1
 801023c:	b005      	add	sp, #20
 801023e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010242:	4668      	mov	r0, sp
 8010244:	f000 fbcc 	bl	80109e0 <__ieee754_rem_pio2>
 8010248:	f000 0003 	and.w	r0, r0, #3
 801024c:	2801      	cmp	r0, #1
 801024e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010252:	ed9d 0b00 	vldr	d0, [sp]
 8010256:	d004      	beq.n	8010262 <sin+0x5a>
 8010258:	2802      	cmp	r0, #2
 801025a:	d005      	beq.n	8010268 <sin+0x60>
 801025c:	b970      	cbnz	r0, 801027c <sin+0x74>
 801025e:	2001      	movs	r0, #1
 8010260:	e7dd      	b.n	801021e <sin+0x16>
 8010262:	f000 fe61 	bl	8010f28 <__kernel_cos>
 8010266:	e7dc      	b.n	8010222 <sin+0x1a>
 8010268:	2001      	movs	r0, #1
 801026a:	f001 fa65 	bl	8011738 <__kernel_sin>
 801026e:	ec53 2b10 	vmov	r2, r3, d0
 8010272:	ee10 0a10 	vmov	r0, s0
 8010276:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801027a:	e7dd      	b.n	8010238 <sin+0x30>
 801027c:	f000 fe54 	bl	8010f28 <__kernel_cos>
 8010280:	e7f5      	b.n	801026e <sin+0x66>
 8010282:	bf00      	nop
 8010284:	f3af 8000 	nop.w
	...
 8010290:	3fe921fb 	.word	0x3fe921fb
 8010294:	7fefffff 	.word	0x7fefffff

08010298 <asin>:
 8010298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801029a:	ed2d 8b02 	vpush	{d8}
 801029e:	4e26      	ldr	r6, [pc, #152]	; (8010338 <asin+0xa0>)
 80102a0:	b08b      	sub	sp, #44	; 0x2c
 80102a2:	ec55 4b10 	vmov	r4, r5, d0
 80102a6:	f000 f8ab 	bl	8010400 <__ieee754_asin>
 80102aa:	f996 3000 	ldrsb.w	r3, [r6]
 80102ae:	eeb0 8a40 	vmov.f32	s16, s0
 80102b2:	eef0 8a60 	vmov.f32	s17, s1
 80102b6:	3301      	adds	r3, #1
 80102b8:	d036      	beq.n	8010328 <asin+0x90>
 80102ba:	4622      	mov	r2, r4
 80102bc:	462b      	mov	r3, r5
 80102be:	4620      	mov	r0, r4
 80102c0:	4629      	mov	r1, r5
 80102c2:	f7f0 fc53 	bl	8000b6c <__aeabi_dcmpun>
 80102c6:	4607      	mov	r7, r0
 80102c8:	bb70      	cbnz	r0, 8010328 <asin+0x90>
 80102ca:	ec45 4b10 	vmov	d0, r4, r5
 80102ce:	f001 fc8f 	bl	8011bf0 <fabs>
 80102d2:	2200      	movs	r2, #0
 80102d4:	4b19      	ldr	r3, [pc, #100]	; (801033c <asin+0xa4>)
 80102d6:	ec51 0b10 	vmov	r0, r1, d0
 80102da:	f7f0 fc3d 	bl	8000b58 <__aeabi_dcmpgt>
 80102de:	b318      	cbz	r0, 8010328 <asin+0x90>
 80102e0:	2301      	movs	r3, #1
 80102e2:	9300      	str	r3, [sp, #0]
 80102e4:	4816      	ldr	r0, [pc, #88]	; (8010340 <asin+0xa8>)
 80102e6:	4b17      	ldr	r3, [pc, #92]	; (8010344 <asin+0xac>)
 80102e8:	9301      	str	r3, [sp, #4]
 80102ea:	9708      	str	r7, [sp, #32]
 80102ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80102f0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80102f4:	f001 fd10 	bl	8011d18 <nan>
 80102f8:	f996 3000 	ldrsb.w	r3, [r6]
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	ed8d 0b06 	vstr	d0, [sp, #24]
 8010302:	d104      	bne.n	801030e <asin+0x76>
 8010304:	f7fd f9c8 	bl	800d698 <__errno>
 8010308:	2321      	movs	r3, #33	; 0x21
 801030a:	6003      	str	r3, [r0, #0]
 801030c:	e004      	b.n	8010318 <asin+0x80>
 801030e:	4668      	mov	r0, sp
 8010310:	f001 fcfe 	bl	8011d10 <matherr>
 8010314:	2800      	cmp	r0, #0
 8010316:	d0f5      	beq.n	8010304 <asin+0x6c>
 8010318:	9b08      	ldr	r3, [sp, #32]
 801031a:	b11b      	cbz	r3, 8010324 <asin+0x8c>
 801031c:	f7fd f9bc 	bl	800d698 <__errno>
 8010320:	9b08      	ldr	r3, [sp, #32]
 8010322:	6003      	str	r3, [r0, #0]
 8010324:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010328:	eeb0 0a48 	vmov.f32	s0, s16
 801032c:	eef0 0a68 	vmov.f32	s1, s17
 8010330:	b00b      	add	sp, #44	; 0x2c
 8010332:	ecbd 8b02 	vpop	{d8}
 8010336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010338:	20000380 	.word	0x20000380
 801033c:	3ff00000 	.word	0x3ff00000
 8010340:	0801243f 	.word	0x0801243f
 8010344:	080126ff 	.word	0x080126ff

08010348 <atan2>:
 8010348:	f000 ba6a 	b.w	8010820 <__ieee754_atan2>

0801034c <sqrt>:
 801034c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010350:	ed2d 8b02 	vpush	{d8}
 8010354:	b08b      	sub	sp, #44	; 0x2c
 8010356:	ec55 4b10 	vmov	r4, r5, d0
 801035a:	f000 fd33 	bl	8010dc4 <__ieee754_sqrt>
 801035e:	4b26      	ldr	r3, [pc, #152]	; (80103f8 <sqrt+0xac>)
 8010360:	eeb0 8a40 	vmov.f32	s16, s0
 8010364:	eef0 8a60 	vmov.f32	s17, s1
 8010368:	f993 6000 	ldrsb.w	r6, [r3]
 801036c:	1c73      	adds	r3, r6, #1
 801036e:	d02a      	beq.n	80103c6 <sqrt+0x7a>
 8010370:	4622      	mov	r2, r4
 8010372:	462b      	mov	r3, r5
 8010374:	4620      	mov	r0, r4
 8010376:	4629      	mov	r1, r5
 8010378:	f7f0 fbf8 	bl	8000b6c <__aeabi_dcmpun>
 801037c:	4607      	mov	r7, r0
 801037e:	bb10      	cbnz	r0, 80103c6 <sqrt+0x7a>
 8010380:	f04f 0800 	mov.w	r8, #0
 8010384:	f04f 0900 	mov.w	r9, #0
 8010388:	4642      	mov	r2, r8
 801038a:	464b      	mov	r3, r9
 801038c:	4620      	mov	r0, r4
 801038e:	4629      	mov	r1, r5
 8010390:	f7f0 fbc4 	bl	8000b1c <__aeabi_dcmplt>
 8010394:	b1b8      	cbz	r0, 80103c6 <sqrt+0x7a>
 8010396:	2301      	movs	r3, #1
 8010398:	9300      	str	r3, [sp, #0]
 801039a:	4b18      	ldr	r3, [pc, #96]	; (80103fc <sqrt+0xb0>)
 801039c:	9301      	str	r3, [sp, #4]
 801039e:	9708      	str	r7, [sp, #32]
 80103a0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80103a4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80103a8:	b9b6      	cbnz	r6, 80103d8 <sqrt+0x8c>
 80103aa:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80103ae:	4668      	mov	r0, sp
 80103b0:	f001 fcae 	bl	8011d10 <matherr>
 80103b4:	b1d0      	cbz	r0, 80103ec <sqrt+0xa0>
 80103b6:	9b08      	ldr	r3, [sp, #32]
 80103b8:	b11b      	cbz	r3, 80103c2 <sqrt+0x76>
 80103ba:	f7fd f96d 	bl	800d698 <__errno>
 80103be:	9b08      	ldr	r3, [sp, #32]
 80103c0:	6003      	str	r3, [r0, #0]
 80103c2:	ed9d 8b06 	vldr	d8, [sp, #24]
 80103c6:	eeb0 0a48 	vmov.f32	s0, s16
 80103ca:	eef0 0a68 	vmov.f32	s1, s17
 80103ce:	b00b      	add	sp, #44	; 0x2c
 80103d0:	ecbd 8b02 	vpop	{d8}
 80103d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103d8:	4642      	mov	r2, r8
 80103da:	464b      	mov	r3, r9
 80103dc:	4640      	mov	r0, r8
 80103de:	4649      	mov	r1, r9
 80103e0:	f7f0 fa54 	bl	800088c <__aeabi_ddiv>
 80103e4:	2e02      	cmp	r6, #2
 80103e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80103ea:	d1e0      	bne.n	80103ae <sqrt+0x62>
 80103ec:	f7fd f954 	bl	800d698 <__errno>
 80103f0:	2321      	movs	r3, #33	; 0x21
 80103f2:	6003      	str	r3, [r0, #0]
 80103f4:	e7df      	b.n	80103b6 <sqrt+0x6a>
 80103f6:	bf00      	nop
 80103f8:	20000380 	.word	0x20000380
 80103fc:	08012704 	.word	0x08012704

08010400 <__ieee754_asin>:
 8010400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010404:	ec55 4b10 	vmov	r4, r5, d0
 8010408:	4bcb      	ldr	r3, [pc, #812]	; (8010738 <__ieee754_asin+0x338>)
 801040a:	b087      	sub	sp, #28
 801040c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8010410:	429f      	cmp	r7, r3
 8010412:	9501      	str	r5, [sp, #4]
 8010414:	dd31      	ble.n	801047a <__ieee754_asin+0x7a>
 8010416:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801041a:	ee10 3a10 	vmov	r3, s0
 801041e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 8010422:	433b      	orrs	r3, r7
 8010424:	d117      	bne.n	8010456 <__ieee754_asin+0x56>
 8010426:	a3aa      	add	r3, pc, #680	; (adr r3, 80106d0 <__ieee754_asin+0x2d0>)
 8010428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042c:	ee10 0a10 	vmov	r0, s0
 8010430:	4629      	mov	r1, r5
 8010432:	f7f0 f901 	bl	8000638 <__aeabi_dmul>
 8010436:	a3a8      	add	r3, pc, #672	; (adr r3, 80106d8 <__ieee754_asin+0x2d8>)
 8010438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801043c:	4606      	mov	r6, r0
 801043e:	460f      	mov	r7, r1
 8010440:	4620      	mov	r0, r4
 8010442:	4629      	mov	r1, r5
 8010444:	f7f0 f8f8 	bl	8000638 <__aeabi_dmul>
 8010448:	4602      	mov	r2, r0
 801044a:	460b      	mov	r3, r1
 801044c:	4630      	mov	r0, r6
 801044e:	4639      	mov	r1, r7
 8010450:	f7ef ff3c 	bl	80002cc <__adddf3>
 8010454:	e00a      	b.n	801046c <__ieee754_asin+0x6c>
 8010456:	ee10 2a10 	vmov	r2, s0
 801045a:	462b      	mov	r3, r5
 801045c:	4620      	mov	r0, r4
 801045e:	4629      	mov	r1, r5
 8010460:	f7ef ff32 	bl	80002c8 <__aeabi_dsub>
 8010464:	4602      	mov	r2, r0
 8010466:	460b      	mov	r3, r1
 8010468:	f7f0 fa10 	bl	800088c <__aeabi_ddiv>
 801046c:	4604      	mov	r4, r0
 801046e:	460d      	mov	r5, r1
 8010470:	ec45 4b10 	vmov	d0, r4, r5
 8010474:	b007      	add	sp, #28
 8010476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801047a:	4bb0      	ldr	r3, [pc, #704]	; (801073c <__ieee754_asin+0x33c>)
 801047c:	429f      	cmp	r7, r3
 801047e:	dc11      	bgt.n	80104a4 <__ieee754_asin+0xa4>
 8010480:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8010484:	f280 80ae 	bge.w	80105e4 <__ieee754_asin+0x1e4>
 8010488:	a395      	add	r3, pc, #596	; (adr r3, 80106e0 <__ieee754_asin+0x2e0>)
 801048a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801048e:	ee10 0a10 	vmov	r0, s0
 8010492:	4629      	mov	r1, r5
 8010494:	f7ef ff1a 	bl	80002cc <__adddf3>
 8010498:	2200      	movs	r2, #0
 801049a:	4ba9      	ldr	r3, [pc, #676]	; (8010740 <__ieee754_asin+0x340>)
 801049c:	f7f0 fb5c 	bl	8000b58 <__aeabi_dcmpgt>
 80104a0:	2800      	cmp	r0, #0
 80104a2:	d1e5      	bne.n	8010470 <__ieee754_asin+0x70>
 80104a4:	ec45 4b10 	vmov	d0, r4, r5
 80104a8:	f001 fba2 	bl	8011bf0 <fabs>
 80104ac:	2000      	movs	r0, #0
 80104ae:	ec53 2b10 	vmov	r2, r3, d0
 80104b2:	49a3      	ldr	r1, [pc, #652]	; (8010740 <__ieee754_asin+0x340>)
 80104b4:	f7ef ff08 	bl	80002c8 <__aeabi_dsub>
 80104b8:	2200      	movs	r2, #0
 80104ba:	4ba2      	ldr	r3, [pc, #648]	; (8010744 <__ieee754_asin+0x344>)
 80104bc:	f7f0 f8bc 	bl	8000638 <__aeabi_dmul>
 80104c0:	a389      	add	r3, pc, #548	; (adr r3, 80106e8 <__ieee754_asin+0x2e8>)
 80104c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c6:	4604      	mov	r4, r0
 80104c8:	460d      	mov	r5, r1
 80104ca:	f7f0 f8b5 	bl	8000638 <__aeabi_dmul>
 80104ce:	a388      	add	r3, pc, #544	; (adr r3, 80106f0 <__ieee754_asin+0x2f0>)
 80104d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104d4:	f7ef fefa 	bl	80002cc <__adddf3>
 80104d8:	4622      	mov	r2, r4
 80104da:	462b      	mov	r3, r5
 80104dc:	f7f0 f8ac 	bl	8000638 <__aeabi_dmul>
 80104e0:	a385      	add	r3, pc, #532	; (adr r3, 80106f8 <__ieee754_asin+0x2f8>)
 80104e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104e6:	f7ef feef 	bl	80002c8 <__aeabi_dsub>
 80104ea:	4622      	mov	r2, r4
 80104ec:	462b      	mov	r3, r5
 80104ee:	f7f0 f8a3 	bl	8000638 <__aeabi_dmul>
 80104f2:	a383      	add	r3, pc, #524	; (adr r3, 8010700 <__ieee754_asin+0x300>)
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	f7ef fee8 	bl	80002cc <__adddf3>
 80104fc:	4622      	mov	r2, r4
 80104fe:	462b      	mov	r3, r5
 8010500:	f7f0 f89a 	bl	8000638 <__aeabi_dmul>
 8010504:	a380      	add	r3, pc, #512	; (adr r3, 8010708 <__ieee754_asin+0x308>)
 8010506:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050a:	f7ef fedd 	bl	80002c8 <__aeabi_dsub>
 801050e:	4622      	mov	r2, r4
 8010510:	462b      	mov	r3, r5
 8010512:	f7f0 f891 	bl	8000638 <__aeabi_dmul>
 8010516:	a37e      	add	r3, pc, #504	; (adr r3, 8010710 <__ieee754_asin+0x310>)
 8010518:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051c:	f7ef fed6 	bl	80002cc <__adddf3>
 8010520:	4622      	mov	r2, r4
 8010522:	462b      	mov	r3, r5
 8010524:	f7f0 f888 	bl	8000638 <__aeabi_dmul>
 8010528:	a37b      	add	r3, pc, #492	; (adr r3, 8010718 <__ieee754_asin+0x318>)
 801052a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801052e:	4680      	mov	r8, r0
 8010530:	4689      	mov	r9, r1
 8010532:	4620      	mov	r0, r4
 8010534:	4629      	mov	r1, r5
 8010536:	f7f0 f87f 	bl	8000638 <__aeabi_dmul>
 801053a:	a379      	add	r3, pc, #484	; (adr r3, 8010720 <__ieee754_asin+0x320>)
 801053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010540:	f7ef fec2 	bl	80002c8 <__aeabi_dsub>
 8010544:	4622      	mov	r2, r4
 8010546:	462b      	mov	r3, r5
 8010548:	f7f0 f876 	bl	8000638 <__aeabi_dmul>
 801054c:	a376      	add	r3, pc, #472	; (adr r3, 8010728 <__ieee754_asin+0x328>)
 801054e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010552:	f7ef febb 	bl	80002cc <__adddf3>
 8010556:	4622      	mov	r2, r4
 8010558:	462b      	mov	r3, r5
 801055a:	f7f0 f86d 	bl	8000638 <__aeabi_dmul>
 801055e:	a374      	add	r3, pc, #464	; (adr r3, 8010730 <__ieee754_asin+0x330>)
 8010560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010564:	f7ef feb0 	bl	80002c8 <__aeabi_dsub>
 8010568:	4622      	mov	r2, r4
 801056a:	462b      	mov	r3, r5
 801056c:	f7f0 f864 	bl	8000638 <__aeabi_dmul>
 8010570:	4b73      	ldr	r3, [pc, #460]	; (8010740 <__ieee754_asin+0x340>)
 8010572:	2200      	movs	r2, #0
 8010574:	f7ef feaa 	bl	80002cc <__adddf3>
 8010578:	ec45 4b10 	vmov	d0, r4, r5
 801057c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010580:	f000 fc20 	bl	8010dc4 <__ieee754_sqrt>
 8010584:	4b70      	ldr	r3, [pc, #448]	; (8010748 <__ieee754_asin+0x348>)
 8010586:	429f      	cmp	r7, r3
 8010588:	ec5b ab10 	vmov	sl, fp, d0
 801058c:	f340 80de 	ble.w	801074c <__ieee754_asin+0x34c>
 8010590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010594:	4640      	mov	r0, r8
 8010596:	4649      	mov	r1, r9
 8010598:	f7f0 f978 	bl	800088c <__aeabi_ddiv>
 801059c:	4652      	mov	r2, sl
 801059e:	465b      	mov	r3, fp
 80105a0:	f7f0 f84a 	bl	8000638 <__aeabi_dmul>
 80105a4:	4652      	mov	r2, sl
 80105a6:	465b      	mov	r3, fp
 80105a8:	f7ef fe90 	bl	80002cc <__adddf3>
 80105ac:	4602      	mov	r2, r0
 80105ae:	460b      	mov	r3, r1
 80105b0:	f7ef fe8c 	bl	80002cc <__adddf3>
 80105b4:	a348      	add	r3, pc, #288	; (adr r3, 80106d8 <__ieee754_asin+0x2d8>)
 80105b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ba:	f7ef fe85 	bl	80002c8 <__aeabi_dsub>
 80105be:	4602      	mov	r2, r0
 80105c0:	460b      	mov	r3, r1
 80105c2:	a143      	add	r1, pc, #268	; (adr r1, 80106d0 <__ieee754_asin+0x2d0>)
 80105c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80105c8:	f7ef fe7e 	bl	80002c8 <__aeabi_dsub>
 80105cc:	9b01      	ldr	r3, [sp, #4]
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	bfdc      	itt	le
 80105d2:	4602      	movle	r2, r0
 80105d4:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 80105d8:	4604      	mov	r4, r0
 80105da:	460d      	mov	r5, r1
 80105dc:	bfdc      	itt	le
 80105de:	4614      	movle	r4, r2
 80105e0:	461d      	movle	r5, r3
 80105e2:	e745      	b.n	8010470 <__ieee754_asin+0x70>
 80105e4:	ee10 2a10 	vmov	r2, s0
 80105e8:	ee10 0a10 	vmov	r0, s0
 80105ec:	462b      	mov	r3, r5
 80105ee:	4629      	mov	r1, r5
 80105f0:	f7f0 f822 	bl	8000638 <__aeabi_dmul>
 80105f4:	a33c      	add	r3, pc, #240	; (adr r3, 80106e8 <__ieee754_asin+0x2e8>)
 80105f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105fa:	4606      	mov	r6, r0
 80105fc:	460f      	mov	r7, r1
 80105fe:	f7f0 f81b 	bl	8000638 <__aeabi_dmul>
 8010602:	a33b      	add	r3, pc, #236	; (adr r3, 80106f0 <__ieee754_asin+0x2f0>)
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	f7ef fe60 	bl	80002cc <__adddf3>
 801060c:	4632      	mov	r2, r6
 801060e:	463b      	mov	r3, r7
 8010610:	f7f0 f812 	bl	8000638 <__aeabi_dmul>
 8010614:	a338      	add	r3, pc, #224	; (adr r3, 80106f8 <__ieee754_asin+0x2f8>)
 8010616:	e9d3 2300 	ldrd	r2, r3, [r3]
 801061a:	f7ef fe55 	bl	80002c8 <__aeabi_dsub>
 801061e:	4632      	mov	r2, r6
 8010620:	463b      	mov	r3, r7
 8010622:	f7f0 f809 	bl	8000638 <__aeabi_dmul>
 8010626:	a336      	add	r3, pc, #216	; (adr r3, 8010700 <__ieee754_asin+0x300>)
 8010628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062c:	f7ef fe4e 	bl	80002cc <__adddf3>
 8010630:	4632      	mov	r2, r6
 8010632:	463b      	mov	r3, r7
 8010634:	f7f0 f800 	bl	8000638 <__aeabi_dmul>
 8010638:	a333      	add	r3, pc, #204	; (adr r3, 8010708 <__ieee754_asin+0x308>)
 801063a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801063e:	f7ef fe43 	bl	80002c8 <__aeabi_dsub>
 8010642:	4632      	mov	r2, r6
 8010644:	463b      	mov	r3, r7
 8010646:	f7ef fff7 	bl	8000638 <__aeabi_dmul>
 801064a:	a331      	add	r3, pc, #196	; (adr r3, 8010710 <__ieee754_asin+0x310>)
 801064c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010650:	f7ef fe3c 	bl	80002cc <__adddf3>
 8010654:	4632      	mov	r2, r6
 8010656:	463b      	mov	r3, r7
 8010658:	f7ef ffee 	bl	8000638 <__aeabi_dmul>
 801065c:	a32e      	add	r3, pc, #184	; (adr r3, 8010718 <__ieee754_asin+0x318>)
 801065e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010662:	4680      	mov	r8, r0
 8010664:	4689      	mov	r9, r1
 8010666:	4630      	mov	r0, r6
 8010668:	4639      	mov	r1, r7
 801066a:	f7ef ffe5 	bl	8000638 <__aeabi_dmul>
 801066e:	a32c      	add	r3, pc, #176	; (adr r3, 8010720 <__ieee754_asin+0x320>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	f7ef fe28 	bl	80002c8 <__aeabi_dsub>
 8010678:	4632      	mov	r2, r6
 801067a:	463b      	mov	r3, r7
 801067c:	f7ef ffdc 	bl	8000638 <__aeabi_dmul>
 8010680:	a329      	add	r3, pc, #164	; (adr r3, 8010728 <__ieee754_asin+0x328>)
 8010682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010686:	f7ef fe21 	bl	80002cc <__adddf3>
 801068a:	4632      	mov	r2, r6
 801068c:	463b      	mov	r3, r7
 801068e:	f7ef ffd3 	bl	8000638 <__aeabi_dmul>
 8010692:	a327      	add	r3, pc, #156	; (adr r3, 8010730 <__ieee754_asin+0x330>)
 8010694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010698:	f7ef fe16 	bl	80002c8 <__aeabi_dsub>
 801069c:	4632      	mov	r2, r6
 801069e:	463b      	mov	r3, r7
 80106a0:	f7ef ffca 	bl	8000638 <__aeabi_dmul>
 80106a4:	2200      	movs	r2, #0
 80106a6:	4b26      	ldr	r3, [pc, #152]	; (8010740 <__ieee754_asin+0x340>)
 80106a8:	f7ef fe10 	bl	80002cc <__adddf3>
 80106ac:	4602      	mov	r2, r0
 80106ae:	460b      	mov	r3, r1
 80106b0:	4640      	mov	r0, r8
 80106b2:	4649      	mov	r1, r9
 80106b4:	f7f0 f8ea 	bl	800088c <__aeabi_ddiv>
 80106b8:	4622      	mov	r2, r4
 80106ba:	462b      	mov	r3, r5
 80106bc:	f7ef ffbc 	bl	8000638 <__aeabi_dmul>
 80106c0:	4602      	mov	r2, r0
 80106c2:	460b      	mov	r3, r1
 80106c4:	4620      	mov	r0, r4
 80106c6:	4629      	mov	r1, r5
 80106c8:	e6c2      	b.n	8010450 <__ieee754_asin+0x50>
 80106ca:	bf00      	nop
 80106cc:	f3af 8000 	nop.w
 80106d0:	54442d18 	.word	0x54442d18
 80106d4:	3ff921fb 	.word	0x3ff921fb
 80106d8:	33145c07 	.word	0x33145c07
 80106dc:	3c91a626 	.word	0x3c91a626
 80106e0:	8800759c 	.word	0x8800759c
 80106e4:	7e37e43c 	.word	0x7e37e43c
 80106e8:	0dfdf709 	.word	0x0dfdf709
 80106ec:	3f023de1 	.word	0x3f023de1
 80106f0:	7501b288 	.word	0x7501b288
 80106f4:	3f49efe0 	.word	0x3f49efe0
 80106f8:	b5688f3b 	.word	0xb5688f3b
 80106fc:	3fa48228 	.word	0x3fa48228
 8010700:	0e884455 	.word	0x0e884455
 8010704:	3fc9c155 	.word	0x3fc9c155
 8010708:	03eb6f7d 	.word	0x03eb6f7d
 801070c:	3fd4d612 	.word	0x3fd4d612
 8010710:	55555555 	.word	0x55555555
 8010714:	3fc55555 	.word	0x3fc55555
 8010718:	b12e9282 	.word	0xb12e9282
 801071c:	3fb3b8c5 	.word	0x3fb3b8c5
 8010720:	1b8d0159 	.word	0x1b8d0159
 8010724:	3fe6066c 	.word	0x3fe6066c
 8010728:	9c598ac8 	.word	0x9c598ac8
 801072c:	40002ae5 	.word	0x40002ae5
 8010730:	1c8a2d4b 	.word	0x1c8a2d4b
 8010734:	40033a27 	.word	0x40033a27
 8010738:	3fefffff 	.word	0x3fefffff
 801073c:	3fdfffff 	.word	0x3fdfffff
 8010740:	3ff00000 	.word	0x3ff00000
 8010744:	3fe00000 	.word	0x3fe00000
 8010748:	3fef3332 	.word	0x3fef3332
 801074c:	ee10 2a10 	vmov	r2, s0
 8010750:	ee10 0a10 	vmov	r0, s0
 8010754:	465b      	mov	r3, fp
 8010756:	4659      	mov	r1, fp
 8010758:	f7ef fdb8 	bl	80002cc <__adddf3>
 801075c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010760:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010764:	4640      	mov	r0, r8
 8010766:	4649      	mov	r1, r9
 8010768:	f7f0 f890 	bl	800088c <__aeabi_ddiv>
 801076c:	4602      	mov	r2, r0
 801076e:	460b      	mov	r3, r1
 8010770:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010774:	f7ef ff60 	bl	8000638 <__aeabi_dmul>
 8010778:	2600      	movs	r6, #0
 801077a:	4680      	mov	r8, r0
 801077c:	4689      	mov	r9, r1
 801077e:	4632      	mov	r2, r6
 8010780:	465b      	mov	r3, fp
 8010782:	4630      	mov	r0, r6
 8010784:	4659      	mov	r1, fp
 8010786:	f7ef ff57 	bl	8000638 <__aeabi_dmul>
 801078a:	4602      	mov	r2, r0
 801078c:	460b      	mov	r3, r1
 801078e:	4620      	mov	r0, r4
 8010790:	4629      	mov	r1, r5
 8010792:	f7ef fd99 	bl	80002c8 <__aeabi_dsub>
 8010796:	4632      	mov	r2, r6
 8010798:	4604      	mov	r4, r0
 801079a:	460d      	mov	r5, r1
 801079c:	465b      	mov	r3, fp
 801079e:	4650      	mov	r0, sl
 80107a0:	4659      	mov	r1, fp
 80107a2:	f7ef fd93 	bl	80002cc <__adddf3>
 80107a6:	4602      	mov	r2, r0
 80107a8:	460b      	mov	r3, r1
 80107aa:	4620      	mov	r0, r4
 80107ac:	4629      	mov	r1, r5
 80107ae:	f7f0 f86d 	bl	800088c <__aeabi_ddiv>
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	f7ef fd89 	bl	80002cc <__adddf3>
 80107ba:	4602      	mov	r2, r0
 80107bc:	460b      	mov	r3, r1
 80107be:	a114      	add	r1, pc, #80	; (adr r1, 8010810 <__ieee754_asin+0x410>)
 80107c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107c4:	f7ef fd80 	bl	80002c8 <__aeabi_dsub>
 80107c8:	4602      	mov	r2, r0
 80107ca:	460b      	mov	r3, r1
 80107cc:	4640      	mov	r0, r8
 80107ce:	4649      	mov	r1, r9
 80107d0:	f7ef fd7a 	bl	80002c8 <__aeabi_dsub>
 80107d4:	465f      	mov	r7, fp
 80107d6:	4604      	mov	r4, r0
 80107d8:	460d      	mov	r5, r1
 80107da:	4632      	mov	r2, r6
 80107dc:	465b      	mov	r3, fp
 80107de:	4630      	mov	r0, r6
 80107e0:	4639      	mov	r1, r7
 80107e2:	f7ef fd73 	bl	80002cc <__adddf3>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	a10b      	add	r1, pc, #44	; (adr r1, 8010818 <__ieee754_asin+0x418>)
 80107ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80107f0:	f7ef fd6a 	bl	80002c8 <__aeabi_dsub>
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	4620      	mov	r0, r4
 80107fa:	4629      	mov	r1, r5
 80107fc:	f7ef fd64 	bl	80002c8 <__aeabi_dsub>
 8010800:	4602      	mov	r2, r0
 8010802:	460b      	mov	r3, r1
 8010804:	a104      	add	r1, pc, #16	; (adr r1, 8010818 <__ieee754_asin+0x418>)
 8010806:	e9d1 0100 	ldrd	r0, r1, [r1]
 801080a:	e6dd      	b.n	80105c8 <__ieee754_asin+0x1c8>
 801080c:	f3af 8000 	nop.w
 8010810:	33145c07 	.word	0x33145c07
 8010814:	3c91a626 	.word	0x3c91a626
 8010818:	54442d18 	.word	0x54442d18
 801081c:	3fe921fb 	.word	0x3fe921fb

08010820 <__ieee754_atan2>:
 8010820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010824:	ec57 6b11 	vmov	r6, r7, d1
 8010828:	4273      	negs	r3, r6
 801082a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801082e:	4333      	orrs	r3, r6
 8010830:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 80109d8 <__ieee754_atan2+0x1b8>
 8010834:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010838:	4573      	cmp	r3, lr
 801083a:	ec51 0b10 	vmov	r0, r1, d0
 801083e:	ee11 8a10 	vmov	r8, s2
 8010842:	d80a      	bhi.n	801085a <__ieee754_atan2+0x3a>
 8010844:	4244      	negs	r4, r0
 8010846:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801084a:	4304      	orrs	r4, r0
 801084c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010850:	4574      	cmp	r4, lr
 8010852:	468c      	mov	ip, r1
 8010854:	ee10 9a10 	vmov	r9, s0
 8010858:	d907      	bls.n	801086a <__ieee754_atan2+0x4a>
 801085a:	4632      	mov	r2, r6
 801085c:	463b      	mov	r3, r7
 801085e:	f7ef fd35 	bl	80002cc <__adddf3>
 8010862:	ec41 0b10 	vmov	d0, r0, r1
 8010866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801086a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801086e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010872:	4334      	orrs	r4, r6
 8010874:	d103      	bne.n	801087e <__ieee754_atan2+0x5e>
 8010876:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801087a:	f001 b819 	b.w	80118b0 <atan>
 801087e:	17bc      	asrs	r4, r7, #30
 8010880:	f004 0402 	and.w	r4, r4, #2
 8010884:	ea53 0909 	orrs.w	r9, r3, r9
 8010888:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801088c:	d107      	bne.n	801089e <__ieee754_atan2+0x7e>
 801088e:	2c02      	cmp	r4, #2
 8010890:	d073      	beq.n	801097a <__ieee754_atan2+0x15a>
 8010892:	2c03      	cmp	r4, #3
 8010894:	d1e5      	bne.n	8010862 <__ieee754_atan2+0x42>
 8010896:	a13e      	add	r1, pc, #248	; (adr r1, 8010990 <__ieee754_atan2+0x170>)
 8010898:	e9d1 0100 	ldrd	r0, r1, [r1]
 801089c:	e7e1      	b.n	8010862 <__ieee754_atan2+0x42>
 801089e:	ea52 0808 	orrs.w	r8, r2, r8
 80108a2:	d106      	bne.n	80108b2 <__ieee754_atan2+0x92>
 80108a4:	f1bc 0f00 	cmp.w	ip, #0
 80108a8:	da6b      	bge.n	8010982 <__ieee754_atan2+0x162>
 80108aa:	a13b      	add	r1, pc, #236	; (adr r1, 8010998 <__ieee754_atan2+0x178>)
 80108ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108b0:	e7d7      	b.n	8010862 <__ieee754_atan2+0x42>
 80108b2:	4572      	cmp	r2, lr
 80108b4:	d120      	bne.n	80108f8 <__ieee754_atan2+0xd8>
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d111      	bne.n	80108de <__ieee754_atan2+0xbe>
 80108ba:	2c02      	cmp	r4, #2
 80108bc:	d007      	beq.n	80108ce <__ieee754_atan2+0xae>
 80108be:	2c03      	cmp	r4, #3
 80108c0:	d009      	beq.n	80108d6 <__ieee754_atan2+0xb6>
 80108c2:	2c01      	cmp	r4, #1
 80108c4:	d155      	bne.n	8010972 <__ieee754_atan2+0x152>
 80108c6:	a136      	add	r1, pc, #216	; (adr r1, 80109a0 <__ieee754_atan2+0x180>)
 80108c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108cc:	e7c9      	b.n	8010862 <__ieee754_atan2+0x42>
 80108ce:	a136      	add	r1, pc, #216	; (adr r1, 80109a8 <__ieee754_atan2+0x188>)
 80108d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108d4:	e7c5      	b.n	8010862 <__ieee754_atan2+0x42>
 80108d6:	a136      	add	r1, pc, #216	; (adr r1, 80109b0 <__ieee754_atan2+0x190>)
 80108d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80108dc:	e7c1      	b.n	8010862 <__ieee754_atan2+0x42>
 80108de:	2c02      	cmp	r4, #2
 80108e0:	d04b      	beq.n	801097a <__ieee754_atan2+0x15a>
 80108e2:	2c03      	cmp	r4, #3
 80108e4:	d0d7      	beq.n	8010896 <__ieee754_atan2+0x76>
 80108e6:	2c01      	cmp	r4, #1
 80108e8:	f04f 0000 	mov.w	r0, #0
 80108ec:	d102      	bne.n	80108f4 <__ieee754_atan2+0xd4>
 80108ee:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80108f2:	e7b6      	b.n	8010862 <__ieee754_atan2+0x42>
 80108f4:	2100      	movs	r1, #0
 80108f6:	e7b4      	b.n	8010862 <__ieee754_atan2+0x42>
 80108f8:	4573      	cmp	r3, lr
 80108fa:	d0d3      	beq.n	80108a4 <__ieee754_atan2+0x84>
 80108fc:	1a9b      	subs	r3, r3, r2
 80108fe:	151b      	asrs	r3, r3, #20
 8010900:	2b3c      	cmp	r3, #60	; 0x3c
 8010902:	dc1e      	bgt.n	8010942 <__ieee754_atan2+0x122>
 8010904:	2f00      	cmp	r7, #0
 8010906:	da01      	bge.n	801090c <__ieee754_atan2+0xec>
 8010908:	333c      	adds	r3, #60	; 0x3c
 801090a:	db1e      	blt.n	801094a <__ieee754_atan2+0x12a>
 801090c:	4632      	mov	r2, r6
 801090e:	463b      	mov	r3, r7
 8010910:	f7ef ffbc 	bl	800088c <__aeabi_ddiv>
 8010914:	ec41 0b10 	vmov	d0, r0, r1
 8010918:	f001 f96a 	bl	8011bf0 <fabs>
 801091c:	f000 ffc8 	bl	80118b0 <atan>
 8010920:	ec51 0b10 	vmov	r0, r1, d0
 8010924:	2c01      	cmp	r4, #1
 8010926:	d013      	beq.n	8010950 <__ieee754_atan2+0x130>
 8010928:	2c02      	cmp	r4, #2
 801092a:	d015      	beq.n	8010958 <__ieee754_atan2+0x138>
 801092c:	2c00      	cmp	r4, #0
 801092e:	d098      	beq.n	8010862 <__ieee754_atan2+0x42>
 8010930:	a321      	add	r3, pc, #132	; (adr r3, 80109b8 <__ieee754_atan2+0x198>)
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	f7ef fcc7 	bl	80002c8 <__aeabi_dsub>
 801093a:	a321      	add	r3, pc, #132	; (adr r3, 80109c0 <__ieee754_atan2+0x1a0>)
 801093c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010940:	e014      	b.n	801096c <__ieee754_atan2+0x14c>
 8010942:	a121      	add	r1, pc, #132	; (adr r1, 80109c8 <__ieee754_atan2+0x1a8>)
 8010944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010948:	e7ec      	b.n	8010924 <__ieee754_atan2+0x104>
 801094a:	2000      	movs	r0, #0
 801094c:	2100      	movs	r1, #0
 801094e:	e7e9      	b.n	8010924 <__ieee754_atan2+0x104>
 8010950:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010954:	4619      	mov	r1, r3
 8010956:	e784      	b.n	8010862 <__ieee754_atan2+0x42>
 8010958:	a317      	add	r3, pc, #92	; (adr r3, 80109b8 <__ieee754_atan2+0x198>)
 801095a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801095e:	f7ef fcb3 	bl	80002c8 <__aeabi_dsub>
 8010962:	4602      	mov	r2, r0
 8010964:	460b      	mov	r3, r1
 8010966:	a116      	add	r1, pc, #88	; (adr r1, 80109c0 <__ieee754_atan2+0x1a0>)
 8010968:	e9d1 0100 	ldrd	r0, r1, [r1]
 801096c:	f7ef fcac 	bl	80002c8 <__aeabi_dsub>
 8010970:	e777      	b.n	8010862 <__ieee754_atan2+0x42>
 8010972:	a117      	add	r1, pc, #92	; (adr r1, 80109d0 <__ieee754_atan2+0x1b0>)
 8010974:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010978:	e773      	b.n	8010862 <__ieee754_atan2+0x42>
 801097a:	a111      	add	r1, pc, #68	; (adr r1, 80109c0 <__ieee754_atan2+0x1a0>)
 801097c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010980:	e76f      	b.n	8010862 <__ieee754_atan2+0x42>
 8010982:	a111      	add	r1, pc, #68	; (adr r1, 80109c8 <__ieee754_atan2+0x1a8>)
 8010984:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010988:	e76b      	b.n	8010862 <__ieee754_atan2+0x42>
 801098a:	bf00      	nop
 801098c:	f3af 8000 	nop.w
 8010990:	54442d18 	.word	0x54442d18
 8010994:	c00921fb 	.word	0xc00921fb
 8010998:	54442d18 	.word	0x54442d18
 801099c:	bff921fb 	.word	0xbff921fb
 80109a0:	54442d18 	.word	0x54442d18
 80109a4:	bfe921fb 	.word	0xbfe921fb
 80109a8:	7f3321d2 	.word	0x7f3321d2
 80109ac:	4002d97c 	.word	0x4002d97c
 80109b0:	7f3321d2 	.word	0x7f3321d2
 80109b4:	c002d97c 	.word	0xc002d97c
 80109b8:	33145c07 	.word	0x33145c07
 80109bc:	3ca1a626 	.word	0x3ca1a626
 80109c0:	54442d18 	.word	0x54442d18
 80109c4:	400921fb 	.word	0x400921fb
 80109c8:	54442d18 	.word	0x54442d18
 80109cc:	3ff921fb 	.word	0x3ff921fb
 80109d0:	54442d18 	.word	0x54442d18
 80109d4:	3fe921fb 	.word	0x3fe921fb
 80109d8:	7ff00000 	.word	0x7ff00000
 80109dc:	00000000 	.word	0x00000000

080109e0 <__ieee754_rem_pio2>:
 80109e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109e4:	ec57 6b10 	vmov	r6, r7, d0
 80109e8:	4bc3      	ldr	r3, [pc, #780]	; (8010cf8 <__ieee754_rem_pio2+0x318>)
 80109ea:	b08d      	sub	sp, #52	; 0x34
 80109ec:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80109f0:	4598      	cmp	r8, r3
 80109f2:	4604      	mov	r4, r0
 80109f4:	9704      	str	r7, [sp, #16]
 80109f6:	dc07      	bgt.n	8010a08 <__ieee754_rem_pio2+0x28>
 80109f8:	2200      	movs	r2, #0
 80109fa:	2300      	movs	r3, #0
 80109fc:	ed84 0b00 	vstr	d0, [r4]
 8010a00:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010a04:	2500      	movs	r5, #0
 8010a06:	e027      	b.n	8010a58 <__ieee754_rem_pio2+0x78>
 8010a08:	4bbc      	ldr	r3, [pc, #752]	; (8010cfc <__ieee754_rem_pio2+0x31c>)
 8010a0a:	4598      	cmp	r8, r3
 8010a0c:	dc75      	bgt.n	8010afa <__ieee754_rem_pio2+0x11a>
 8010a0e:	9b04      	ldr	r3, [sp, #16]
 8010a10:	4dbb      	ldr	r5, [pc, #748]	; (8010d00 <__ieee754_rem_pio2+0x320>)
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	ee10 0a10 	vmov	r0, s0
 8010a18:	a3a9      	add	r3, pc, #676	; (adr r3, 8010cc0 <__ieee754_rem_pio2+0x2e0>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	4639      	mov	r1, r7
 8010a20:	dd36      	ble.n	8010a90 <__ieee754_rem_pio2+0xb0>
 8010a22:	f7ef fc51 	bl	80002c8 <__aeabi_dsub>
 8010a26:	45a8      	cmp	r8, r5
 8010a28:	4606      	mov	r6, r0
 8010a2a:	460f      	mov	r7, r1
 8010a2c:	d018      	beq.n	8010a60 <__ieee754_rem_pio2+0x80>
 8010a2e:	a3a6      	add	r3, pc, #664	; (adr r3, 8010cc8 <__ieee754_rem_pio2+0x2e8>)
 8010a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a34:	f7ef fc48 	bl	80002c8 <__aeabi_dsub>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	460b      	mov	r3, r1
 8010a3c:	e9c4 2300 	strd	r2, r3, [r4]
 8010a40:	4630      	mov	r0, r6
 8010a42:	4639      	mov	r1, r7
 8010a44:	f7ef fc40 	bl	80002c8 <__aeabi_dsub>
 8010a48:	a39f      	add	r3, pc, #636	; (adr r3, 8010cc8 <__ieee754_rem_pio2+0x2e8>)
 8010a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a4e:	f7ef fc3b 	bl	80002c8 <__aeabi_dsub>
 8010a52:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010a56:	2501      	movs	r5, #1
 8010a58:	4628      	mov	r0, r5
 8010a5a:	b00d      	add	sp, #52	; 0x34
 8010a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a60:	a39b      	add	r3, pc, #620	; (adr r3, 8010cd0 <__ieee754_rem_pio2+0x2f0>)
 8010a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a66:	f7ef fc2f 	bl	80002c8 <__aeabi_dsub>
 8010a6a:	a39b      	add	r3, pc, #620	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x2f8>)
 8010a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a70:	4606      	mov	r6, r0
 8010a72:	460f      	mov	r7, r1
 8010a74:	f7ef fc28 	bl	80002c8 <__aeabi_dsub>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	e9c4 2300 	strd	r2, r3, [r4]
 8010a80:	4630      	mov	r0, r6
 8010a82:	4639      	mov	r1, r7
 8010a84:	f7ef fc20 	bl	80002c8 <__aeabi_dsub>
 8010a88:	a393      	add	r3, pc, #588	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x2f8>)
 8010a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a8e:	e7de      	b.n	8010a4e <__ieee754_rem_pio2+0x6e>
 8010a90:	f7ef fc1c 	bl	80002cc <__adddf3>
 8010a94:	45a8      	cmp	r8, r5
 8010a96:	4606      	mov	r6, r0
 8010a98:	460f      	mov	r7, r1
 8010a9a:	d016      	beq.n	8010aca <__ieee754_rem_pio2+0xea>
 8010a9c:	a38a      	add	r3, pc, #552	; (adr r3, 8010cc8 <__ieee754_rem_pio2+0x2e8>)
 8010a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa2:	f7ef fc13 	bl	80002cc <__adddf3>
 8010aa6:	4602      	mov	r2, r0
 8010aa8:	460b      	mov	r3, r1
 8010aaa:	e9c4 2300 	strd	r2, r3, [r4]
 8010aae:	4630      	mov	r0, r6
 8010ab0:	4639      	mov	r1, r7
 8010ab2:	f7ef fc09 	bl	80002c8 <__aeabi_dsub>
 8010ab6:	a384      	add	r3, pc, #528	; (adr r3, 8010cc8 <__ieee754_rem_pio2+0x2e8>)
 8010ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010abc:	f7ef fc06 	bl	80002cc <__adddf3>
 8010ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8010ac4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ac8:	e7c6      	b.n	8010a58 <__ieee754_rem_pio2+0x78>
 8010aca:	a381      	add	r3, pc, #516	; (adr r3, 8010cd0 <__ieee754_rem_pio2+0x2f0>)
 8010acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad0:	f7ef fbfc 	bl	80002cc <__adddf3>
 8010ad4:	a380      	add	r3, pc, #512	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x2f8>)
 8010ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ada:	4606      	mov	r6, r0
 8010adc:	460f      	mov	r7, r1
 8010ade:	f7ef fbf5 	bl	80002cc <__adddf3>
 8010ae2:	4602      	mov	r2, r0
 8010ae4:	460b      	mov	r3, r1
 8010ae6:	e9c4 2300 	strd	r2, r3, [r4]
 8010aea:	4630      	mov	r0, r6
 8010aec:	4639      	mov	r1, r7
 8010aee:	f7ef fbeb 	bl	80002c8 <__aeabi_dsub>
 8010af2:	a379      	add	r3, pc, #484	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x2f8>)
 8010af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010af8:	e7e0      	b.n	8010abc <__ieee754_rem_pio2+0xdc>
 8010afa:	4b82      	ldr	r3, [pc, #520]	; (8010d04 <__ieee754_rem_pio2+0x324>)
 8010afc:	4598      	cmp	r8, r3
 8010afe:	f300 80d0 	bgt.w	8010ca2 <__ieee754_rem_pio2+0x2c2>
 8010b02:	f001 f875 	bl	8011bf0 <fabs>
 8010b06:	ec57 6b10 	vmov	r6, r7, d0
 8010b0a:	ee10 0a10 	vmov	r0, s0
 8010b0e:	a374      	add	r3, pc, #464	; (adr r3, 8010ce0 <__ieee754_rem_pio2+0x300>)
 8010b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b14:	4639      	mov	r1, r7
 8010b16:	f7ef fd8f 	bl	8000638 <__aeabi_dmul>
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	4b7a      	ldr	r3, [pc, #488]	; (8010d08 <__ieee754_rem_pio2+0x328>)
 8010b1e:	f7ef fbd5 	bl	80002cc <__adddf3>
 8010b22:	f7f0 f839 	bl	8000b98 <__aeabi_d2iz>
 8010b26:	4605      	mov	r5, r0
 8010b28:	f7ef fd1c 	bl	8000564 <__aeabi_i2d>
 8010b2c:	a364      	add	r3, pc, #400	; (adr r3, 8010cc0 <__ieee754_rem_pio2+0x2e0>)
 8010b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b36:	f7ef fd7f 	bl	8000638 <__aeabi_dmul>
 8010b3a:	4602      	mov	r2, r0
 8010b3c:	460b      	mov	r3, r1
 8010b3e:	4630      	mov	r0, r6
 8010b40:	4639      	mov	r1, r7
 8010b42:	f7ef fbc1 	bl	80002c8 <__aeabi_dsub>
 8010b46:	a360      	add	r3, pc, #384	; (adr r3, 8010cc8 <__ieee754_rem_pio2+0x2e8>)
 8010b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b4c:	4682      	mov	sl, r0
 8010b4e:	468b      	mov	fp, r1
 8010b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b54:	f7ef fd70 	bl	8000638 <__aeabi_dmul>
 8010b58:	2d1f      	cmp	r5, #31
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	460f      	mov	r7, r1
 8010b5e:	dc0c      	bgt.n	8010b7a <__ieee754_rem_pio2+0x19a>
 8010b60:	1e6a      	subs	r2, r5, #1
 8010b62:	4b6a      	ldr	r3, [pc, #424]	; (8010d0c <__ieee754_rem_pio2+0x32c>)
 8010b64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b68:	4543      	cmp	r3, r8
 8010b6a:	d006      	beq.n	8010b7a <__ieee754_rem_pio2+0x19a>
 8010b6c:	4632      	mov	r2, r6
 8010b6e:	463b      	mov	r3, r7
 8010b70:	4650      	mov	r0, sl
 8010b72:	4659      	mov	r1, fp
 8010b74:	f7ef fba8 	bl	80002c8 <__aeabi_dsub>
 8010b78:	e00e      	b.n	8010b98 <__ieee754_rem_pio2+0x1b8>
 8010b7a:	4632      	mov	r2, r6
 8010b7c:	463b      	mov	r3, r7
 8010b7e:	4650      	mov	r0, sl
 8010b80:	4659      	mov	r1, fp
 8010b82:	f7ef fba1 	bl	80002c8 <__aeabi_dsub>
 8010b86:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010b8a:	9305      	str	r3, [sp, #20]
 8010b8c:	9a05      	ldr	r2, [sp, #20]
 8010b8e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010b92:	1ad3      	subs	r3, r2, r3
 8010b94:	2b10      	cmp	r3, #16
 8010b96:	dc02      	bgt.n	8010b9e <__ieee754_rem_pio2+0x1be>
 8010b98:	e9c4 0100 	strd	r0, r1, [r4]
 8010b9c:	e039      	b.n	8010c12 <__ieee754_rem_pio2+0x232>
 8010b9e:	a34c      	add	r3, pc, #304	; (adr r3, 8010cd0 <__ieee754_rem_pio2+0x2f0>)
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ba8:	f7ef fd46 	bl	8000638 <__aeabi_dmul>
 8010bac:	4606      	mov	r6, r0
 8010bae:	460f      	mov	r7, r1
 8010bb0:	4602      	mov	r2, r0
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	4650      	mov	r0, sl
 8010bb6:	4659      	mov	r1, fp
 8010bb8:	f7ef fb86 	bl	80002c8 <__aeabi_dsub>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	4680      	mov	r8, r0
 8010bc2:	4689      	mov	r9, r1
 8010bc4:	4650      	mov	r0, sl
 8010bc6:	4659      	mov	r1, fp
 8010bc8:	f7ef fb7e 	bl	80002c8 <__aeabi_dsub>
 8010bcc:	4632      	mov	r2, r6
 8010bce:	463b      	mov	r3, r7
 8010bd0:	f7ef fb7a 	bl	80002c8 <__aeabi_dsub>
 8010bd4:	a340      	add	r3, pc, #256	; (adr r3, 8010cd8 <__ieee754_rem_pio2+0x2f8>)
 8010bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bda:	4606      	mov	r6, r0
 8010bdc:	460f      	mov	r7, r1
 8010bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010be2:	f7ef fd29 	bl	8000638 <__aeabi_dmul>
 8010be6:	4632      	mov	r2, r6
 8010be8:	463b      	mov	r3, r7
 8010bea:	f7ef fb6d 	bl	80002c8 <__aeabi_dsub>
 8010bee:	4602      	mov	r2, r0
 8010bf0:	460b      	mov	r3, r1
 8010bf2:	4606      	mov	r6, r0
 8010bf4:	460f      	mov	r7, r1
 8010bf6:	4640      	mov	r0, r8
 8010bf8:	4649      	mov	r1, r9
 8010bfa:	f7ef fb65 	bl	80002c8 <__aeabi_dsub>
 8010bfe:	9a05      	ldr	r2, [sp, #20]
 8010c00:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c04:	1ad3      	subs	r3, r2, r3
 8010c06:	2b31      	cmp	r3, #49	; 0x31
 8010c08:	dc20      	bgt.n	8010c4c <__ieee754_rem_pio2+0x26c>
 8010c0a:	e9c4 0100 	strd	r0, r1, [r4]
 8010c0e:	46c2      	mov	sl, r8
 8010c10:	46cb      	mov	fp, r9
 8010c12:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010c16:	4650      	mov	r0, sl
 8010c18:	4642      	mov	r2, r8
 8010c1a:	464b      	mov	r3, r9
 8010c1c:	4659      	mov	r1, fp
 8010c1e:	f7ef fb53 	bl	80002c8 <__aeabi_dsub>
 8010c22:	463b      	mov	r3, r7
 8010c24:	4632      	mov	r2, r6
 8010c26:	f7ef fb4f 	bl	80002c8 <__aeabi_dsub>
 8010c2a:	9b04      	ldr	r3, [sp, #16]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c32:	f6bf af11 	bge.w	8010a58 <__ieee754_rem_pio2+0x78>
 8010c36:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010c3a:	6063      	str	r3, [r4, #4]
 8010c3c:	f8c4 8000 	str.w	r8, [r4]
 8010c40:	60a0      	str	r0, [r4, #8]
 8010c42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c46:	60e3      	str	r3, [r4, #12]
 8010c48:	426d      	negs	r5, r5
 8010c4a:	e705      	b.n	8010a58 <__ieee754_rem_pio2+0x78>
 8010c4c:	a326      	add	r3, pc, #152	; (adr r3, 8010ce8 <__ieee754_rem_pio2+0x308>)
 8010c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c56:	f7ef fcef 	bl	8000638 <__aeabi_dmul>
 8010c5a:	4606      	mov	r6, r0
 8010c5c:	460f      	mov	r7, r1
 8010c5e:	4602      	mov	r2, r0
 8010c60:	460b      	mov	r3, r1
 8010c62:	4640      	mov	r0, r8
 8010c64:	4649      	mov	r1, r9
 8010c66:	f7ef fb2f 	bl	80002c8 <__aeabi_dsub>
 8010c6a:	4602      	mov	r2, r0
 8010c6c:	460b      	mov	r3, r1
 8010c6e:	4682      	mov	sl, r0
 8010c70:	468b      	mov	fp, r1
 8010c72:	4640      	mov	r0, r8
 8010c74:	4649      	mov	r1, r9
 8010c76:	f7ef fb27 	bl	80002c8 <__aeabi_dsub>
 8010c7a:	4632      	mov	r2, r6
 8010c7c:	463b      	mov	r3, r7
 8010c7e:	f7ef fb23 	bl	80002c8 <__aeabi_dsub>
 8010c82:	a31b      	add	r3, pc, #108	; (adr r3, 8010cf0 <__ieee754_rem_pio2+0x310>)
 8010c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c88:	4606      	mov	r6, r0
 8010c8a:	460f      	mov	r7, r1
 8010c8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010c90:	f7ef fcd2 	bl	8000638 <__aeabi_dmul>
 8010c94:	4632      	mov	r2, r6
 8010c96:	463b      	mov	r3, r7
 8010c98:	f7ef fb16 	bl	80002c8 <__aeabi_dsub>
 8010c9c:	4606      	mov	r6, r0
 8010c9e:	460f      	mov	r7, r1
 8010ca0:	e764      	b.n	8010b6c <__ieee754_rem_pio2+0x18c>
 8010ca2:	4b1b      	ldr	r3, [pc, #108]	; (8010d10 <__ieee754_rem_pio2+0x330>)
 8010ca4:	4598      	cmp	r8, r3
 8010ca6:	dd35      	ble.n	8010d14 <__ieee754_rem_pio2+0x334>
 8010ca8:	ee10 2a10 	vmov	r2, s0
 8010cac:	463b      	mov	r3, r7
 8010cae:	4630      	mov	r0, r6
 8010cb0:	4639      	mov	r1, r7
 8010cb2:	f7ef fb09 	bl	80002c8 <__aeabi_dsub>
 8010cb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010cba:	e9c4 0100 	strd	r0, r1, [r4]
 8010cbe:	e6a1      	b.n	8010a04 <__ieee754_rem_pio2+0x24>
 8010cc0:	54400000 	.word	0x54400000
 8010cc4:	3ff921fb 	.word	0x3ff921fb
 8010cc8:	1a626331 	.word	0x1a626331
 8010ccc:	3dd0b461 	.word	0x3dd0b461
 8010cd0:	1a600000 	.word	0x1a600000
 8010cd4:	3dd0b461 	.word	0x3dd0b461
 8010cd8:	2e037073 	.word	0x2e037073
 8010cdc:	3ba3198a 	.word	0x3ba3198a
 8010ce0:	6dc9c883 	.word	0x6dc9c883
 8010ce4:	3fe45f30 	.word	0x3fe45f30
 8010ce8:	2e000000 	.word	0x2e000000
 8010cec:	3ba3198a 	.word	0x3ba3198a
 8010cf0:	252049c1 	.word	0x252049c1
 8010cf4:	397b839a 	.word	0x397b839a
 8010cf8:	3fe921fb 	.word	0x3fe921fb
 8010cfc:	4002d97b 	.word	0x4002d97b
 8010d00:	3ff921fb 	.word	0x3ff921fb
 8010d04:	413921fb 	.word	0x413921fb
 8010d08:	3fe00000 	.word	0x3fe00000
 8010d0c:	0801270c 	.word	0x0801270c
 8010d10:	7fefffff 	.word	0x7fefffff
 8010d14:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010d18:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010d1c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010d20:	4630      	mov	r0, r6
 8010d22:	460f      	mov	r7, r1
 8010d24:	f7ef ff38 	bl	8000b98 <__aeabi_d2iz>
 8010d28:	f7ef fc1c 	bl	8000564 <__aeabi_i2d>
 8010d2c:	4602      	mov	r2, r0
 8010d2e:	460b      	mov	r3, r1
 8010d30:	4630      	mov	r0, r6
 8010d32:	4639      	mov	r1, r7
 8010d34:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010d38:	f7ef fac6 	bl	80002c8 <__aeabi_dsub>
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	4b1f      	ldr	r3, [pc, #124]	; (8010dbc <__ieee754_rem_pio2+0x3dc>)
 8010d40:	f7ef fc7a 	bl	8000638 <__aeabi_dmul>
 8010d44:	460f      	mov	r7, r1
 8010d46:	4606      	mov	r6, r0
 8010d48:	f7ef ff26 	bl	8000b98 <__aeabi_d2iz>
 8010d4c:	f7ef fc0a 	bl	8000564 <__aeabi_i2d>
 8010d50:	4602      	mov	r2, r0
 8010d52:	460b      	mov	r3, r1
 8010d54:	4630      	mov	r0, r6
 8010d56:	4639      	mov	r1, r7
 8010d58:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010d5c:	f7ef fab4 	bl	80002c8 <__aeabi_dsub>
 8010d60:	2200      	movs	r2, #0
 8010d62:	4b16      	ldr	r3, [pc, #88]	; (8010dbc <__ieee754_rem_pio2+0x3dc>)
 8010d64:	f7ef fc68 	bl	8000638 <__aeabi_dmul>
 8010d68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010d6c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8010d70:	f04f 0803 	mov.w	r8, #3
 8010d74:	2600      	movs	r6, #0
 8010d76:	2700      	movs	r7, #0
 8010d78:	4632      	mov	r2, r6
 8010d7a:	463b      	mov	r3, r7
 8010d7c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8010d84:	f7ef fec0 	bl	8000b08 <__aeabi_dcmpeq>
 8010d88:	b9b0      	cbnz	r0, 8010db8 <__ieee754_rem_pio2+0x3d8>
 8010d8a:	4b0d      	ldr	r3, [pc, #52]	; (8010dc0 <__ieee754_rem_pio2+0x3e0>)
 8010d8c:	9301      	str	r3, [sp, #4]
 8010d8e:	2302      	movs	r3, #2
 8010d90:	9300      	str	r3, [sp, #0]
 8010d92:	462a      	mov	r2, r5
 8010d94:	4643      	mov	r3, r8
 8010d96:	4621      	mov	r1, r4
 8010d98:	a806      	add	r0, sp, #24
 8010d9a:	f000 f98d 	bl	80110b8 <__kernel_rem_pio2>
 8010d9e:	9b04      	ldr	r3, [sp, #16]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	4605      	mov	r5, r0
 8010da4:	f6bf ae58 	bge.w	8010a58 <__ieee754_rem_pio2+0x78>
 8010da8:	6863      	ldr	r3, [r4, #4]
 8010daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010dae:	6063      	str	r3, [r4, #4]
 8010db0:	68e3      	ldr	r3, [r4, #12]
 8010db2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010db6:	e746      	b.n	8010c46 <__ieee754_rem_pio2+0x266>
 8010db8:	46d0      	mov	r8, sl
 8010dba:	e7dd      	b.n	8010d78 <__ieee754_rem_pio2+0x398>
 8010dbc:	41700000 	.word	0x41700000
 8010dc0:	0801278c 	.word	0x0801278c

08010dc4 <__ieee754_sqrt>:
 8010dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dc8:	4955      	ldr	r1, [pc, #340]	; (8010f20 <__ieee754_sqrt+0x15c>)
 8010dca:	ec55 4b10 	vmov	r4, r5, d0
 8010dce:	43a9      	bics	r1, r5
 8010dd0:	462b      	mov	r3, r5
 8010dd2:	462a      	mov	r2, r5
 8010dd4:	d112      	bne.n	8010dfc <__ieee754_sqrt+0x38>
 8010dd6:	ee10 2a10 	vmov	r2, s0
 8010dda:	ee10 0a10 	vmov	r0, s0
 8010dde:	4629      	mov	r1, r5
 8010de0:	f7ef fc2a 	bl	8000638 <__aeabi_dmul>
 8010de4:	4602      	mov	r2, r0
 8010de6:	460b      	mov	r3, r1
 8010de8:	4620      	mov	r0, r4
 8010dea:	4629      	mov	r1, r5
 8010dec:	f7ef fa6e 	bl	80002cc <__adddf3>
 8010df0:	4604      	mov	r4, r0
 8010df2:	460d      	mov	r5, r1
 8010df4:	ec45 4b10 	vmov	d0, r4, r5
 8010df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010dfc:	2d00      	cmp	r5, #0
 8010dfe:	ee10 0a10 	vmov	r0, s0
 8010e02:	4621      	mov	r1, r4
 8010e04:	dc0f      	bgt.n	8010e26 <__ieee754_sqrt+0x62>
 8010e06:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8010e0a:	4330      	orrs	r0, r6
 8010e0c:	d0f2      	beq.n	8010df4 <__ieee754_sqrt+0x30>
 8010e0e:	b155      	cbz	r5, 8010e26 <__ieee754_sqrt+0x62>
 8010e10:	ee10 2a10 	vmov	r2, s0
 8010e14:	4620      	mov	r0, r4
 8010e16:	4629      	mov	r1, r5
 8010e18:	f7ef fa56 	bl	80002c8 <__aeabi_dsub>
 8010e1c:	4602      	mov	r2, r0
 8010e1e:	460b      	mov	r3, r1
 8010e20:	f7ef fd34 	bl	800088c <__aeabi_ddiv>
 8010e24:	e7e4      	b.n	8010df0 <__ieee754_sqrt+0x2c>
 8010e26:	151b      	asrs	r3, r3, #20
 8010e28:	d073      	beq.n	8010f12 <__ieee754_sqrt+0x14e>
 8010e2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010e2e:	07dd      	lsls	r5, r3, #31
 8010e30:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8010e34:	bf48      	it	mi
 8010e36:	0fc8      	lsrmi	r0, r1, #31
 8010e38:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8010e3c:	bf44      	itt	mi
 8010e3e:	0049      	lslmi	r1, r1, #1
 8010e40:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8010e44:	2500      	movs	r5, #0
 8010e46:	1058      	asrs	r0, r3, #1
 8010e48:	0fcb      	lsrs	r3, r1, #31
 8010e4a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8010e4e:	0049      	lsls	r1, r1, #1
 8010e50:	2316      	movs	r3, #22
 8010e52:	462c      	mov	r4, r5
 8010e54:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8010e58:	19a7      	adds	r7, r4, r6
 8010e5a:	4297      	cmp	r7, r2
 8010e5c:	bfde      	ittt	le
 8010e5e:	19bc      	addle	r4, r7, r6
 8010e60:	1bd2      	suble	r2, r2, r7
 8010e62:	19ad      	addle	r5, r5, r6
 8010e64:	0fcf      	lsrs	r7, r1, #31
 8010e66:	3b01      	subs	r3, #1
 8010e68:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010e6c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010e70:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010e74:	d1f0      	bne.n	8010e58 <__ieee754_sqrt+0x94>
 8010e76:	f04f 0c20 	mov.w	ip, #32
 8010e7a:	469e      	mov	lr, r3
 8010e7c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010e80:	42a2      	cmp	r2, r4
 8010e82:	eb06 070e 	add.w	r7, r6, lr
 8010e86:	dc02      	bgt.n	8010e8e <__ieee754_sqrt+0xca>
 8010e88:	d112      	bne.n	8010eb0 <__ieee754_sqrt+0xec>
 8010e8a:	428f      	cmp	r7, r1
 8010e8c:	d810      	bhi.n	8010eb0 <__ieee754_sqrt+0xec>
 8010e8e:	2f00      	cmp	r7, #0
 8010e90:	eb07 0e06 	add.w	lr, r7, r6
 8010e94:	da42      	bge.n	8010f1c <__ieee754_sqrt+0x158>
 8010e96:	f1be 0f00 	cmp.w	lr, #0
 8010e9a:	db3f      	blt.n	8010f1c <__ieee754_sqrt+0x158>
 8010e9c:	f104 0801 	add.w	r8, r4, #1
 8010ea0:	1b12      	subs	r2, r2, r4
 8010ea2:	428f      	cmp	r7, r1
 8010ea4:	bf88      	it	hi
 8010ea6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8010eaa:	1bc9      	subs	r1, r1, r7
 8010eac:	4433      	add	r3, r6
 8010eae:	4644      	mov	r4, r8
 8010eb0:	0052      	lsls	r2, r2, #1
 8010eb2:	f1bc 0c01 	subs.w	ip, ip, #1
 8010eb6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8010eba:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010ebe:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010ec2:	d1dd      	bne.n	8010e80 <__ieee754_sqrt+0xbc>
 8010ec4:	430a      	orrs	r2, r1
 8010ec6:	d006      	beq.n	8010ed6 <__ieee754_sqrt+0x112>
 8010ec8:	1c5c      	adds	r4, r3, #1
 8010eca:	bf13      	iteet	ne
 8010ecc:	3301      	addne	r3, #1
 8010ece:	3501      	addeq	r5, #1
 8010ed0:	4663      	moveq	r3, ip
 8010ed2:	f023 0301 	bicne.w	r3, r3, #1
 8010ed6:	106a      	asrs	r2, r5, #1
 8010ed8:	085b      	lsrs	r3, r3, #1
 8010eda:	07e9      	lsls	r1, r5, #31
 8010edc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010ee0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8010ee4:	bf48      	it	mi
 8010ee6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010eea:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8010eee:	461c      	mov	r4, r3
 8010ef0:	e780      	b.n	8010df4 <__ieee754_sqrt+0x30>
 8010ef2:	0aca      	lsrs	r2, r1, #11
 8010ef4:	3815      	subs	r0, #21
 8010ef6:	0549      	lsls	r1, r1, #21
 8010ef8:	2a00      	cmp	r2, #0
 8010efa:	d0fa      	beq.n	8010ef2 <__ieee754_sqrt+0x12e>
 8010efc:	02d6      	lsls	r6, r2, #11
 8010efe:	d50a      	bpl.n	8010f16 <__ieee754_sqrt+0x152>
 8010f00:	f1c3 0420 	rsb	r4, r3, #32
 8010f04:	fa21 f404 	lsr.w	r4, r1, r4
 8010f08:	1e5d      	subs	r5, r3, #1
 8010f0a:	4099      	lsls	r1, r3
 8010f0c:	4322      	orrs	r2, r4
 8010f0e:	1b43      	subs	r3, r0, r5
 8010f10:	e78b      	b.n	8010e2a <__ieee754_sqrt+0x66>
 8010f12:	4618      	mov	r0, r3
 8010f14:	e7f0      	b.n	8010ef8 <__ieee754_sqrt+0x134>
 8010f16:	0052      	lsls	r2, r2, #1
 8010f18:	3301      	adds	r3, #1
 8010f1a:	e7ef      	b.n	8010efc <__ieee754_sqrt+0x138>
 8010f1c:	46a0      	mov	r8, r4
 8010f1e:	e7bf      	b.n	8010ea0 <__ieee754_sqrt+0xdc>
 8010f20:	7ff00000 	.word	0x7ff00000
 8010f24:	00000000 	.word	0x00000000

08010f28 <__kernel_cos>:
 8010f28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f2c:	ec59 8b10 	vmov	r8, r9, d0
 8010f30:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8010f34:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8010f38:	ed2d 8b02 	vpush	{d8}
 8010f3c:	eeb0 8a41 	vmov.f32	s16, s2
 8010f40:	eef0 8a61 	vmov.f32	s17, s3
 8010f44:	da07      	bge.n	8010f56 <__kernel_cos+0x2e>
 8010f46:	ee10 0a10 	vmov	r0, s0
 8010f4a:	4649      	mov	r1, r9
 8010f4c:	f7ef fe24 	bl	8000b98 <__aeabi_d2iz>
 8010f50:	2800      	cmp	r0, #0
 8010f52:	f000 8089 	beq.w	8011068 <__kernel_cos+0x140>
 8010f56:	4642      	mov	r2, r8
 8010f58:	464b      	mov	r3, r9
 8010f5a:	4640      	mov	r0, r8
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	f7ef fb6b 	bl	8000638 <__aeabi_dmul>
 8010f62:	2200      	movs	r2, #0
 8010f64:	4b4e      	ldr	r3, [pc, #312]	; (80110a0 <__kernel_cos+0x178>)
 8010f66:	4604      	mov	r4, r0
 8010f68:	460d      	mov	r5, r1
 8010f6a:	f7ef fb65 	bl	8000638 <__aeabi_dmul>
 8010f6e:	a340      	add	r3, pc, #256	; (adr r3, 8011070 <__kernel_cos+0x148>)
 8010f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f74:	4682      	mov	sl, r0
 8010f76:	468b      	mov	fp, r1
 8010f78:	4620      	mov	r0, r4
 8010f7a:	4629      	mov	r1, r5
 8010f7c:	f7ef fb5c 	bl	8000638 <__aeabi_dmul>
 8010f80:	a33d      	add	r3, pc, #244	; (adr r3, 8011078 <__kernel_cos+0x150>)
 8010f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f86:	f7ef f9a1 	bl	80002cc <__adddf3>
 8010f8a:	4622      	mov	r2, r4
 8010f8c:	462b      	mov	r3, r5
 8010f8e:	f7ef fb53 	bl	8000638 <__aeabi_dmul>
 8010f92:	a33b      	add	r3, pc, #236	; (adr r3, 8011080 <__kernel_cos+0x158>)
 8010f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f98:	f7ef f996 	bl	80002c8 <__aeabi_dsub>
 8010f9c:	4622      	mov	r2, r4
 8010f9e:	462b      	mov	r3, r5
 8010fa0:	f7ef fb4a 	bl	8000638 <__aeabi_dmul>
 8010fa4:	a338      	add	r3, pc, #224	; (adr r3, 8011088 <__kernel_cos+0x160>)
 8010fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010faa:	f7ef f98f 	bl	80002cc <__adddf3>
 8010fae:	4622      	mov	r2, r4
 8010fb0:	462b      	mov	r3, r5
 8010fb2:	f7ef fb41 	bl	8000638 <__aeabi_dmul>
 8010fb6:	a336      	add	r3, pc, #216	; (adr r3, 8011090 <__kernel_cos+0x168>)
 8010fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbc:	f7ef f984 	bl	80002c8 <__aeabi_dsub>
 8010fc0:	4622      	mov	r2, r4
 8010fc2:	462b      	mov	r3, r5
 8010fc4:	f7ef fb38 	bl	8000638 <__aeabi_dmul>
 8010fc8:	a333      	add	r3, pc, #204	; (adr r3, 8011098 <__kernel_cos+0x170>)
 8010fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fce:	f7ef f97d 	bl	80002cc <__adddf3>
 8010fd2:	4622      	mov	r2, r4
 8010fd4:	462b      	mov	r3, r5
 8010fd6:	f7ef fb2f 	bl	8000638 <__aeabi_dmul>
 8010fda:	4622      	mov	r2, r4
 8010fdc:	462b      	mov	r3, r5
 8010fde:	f7ef fb2b 	bl	8000638 <__aeabi_dmul>
 8010fe2:	ec53 2b18 	vmov	r2, r3, d8
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	460d      	mov	r5, r1
 8010fea:	4640      	mov	r0, r8
 8010fec:	4649      	mov	r1, r9
 8010fee:	f7ef fb23 	bl	8000638 <__aeabi_dmul>
 8010ff2:	460b      	mov	r3, r1
 8010ff4:	4602      	mov	r2, r0
 8010ff6:	4629      	mov	r1, r5
 8010ff8:	4620      	mov	r0, r4
 8010ffa:	f7ef f965 	bl	80002c8 <__aeabi_dsub>
 8010ffe:	4b29      	ldr	r3, [pc, #164]	; (80110a4 <__kernel_cos+0x17c>)
 8011000:	429e      	cmp	r6, r3
 8011002:	4680      	mov	r8, r0
 8011004:	4689      	mov	r9, r1
 8011006:	dc11      	bgt.n	801102c <__kernel_cos+0x104>
 8011008:	4602      	mov	r2, r0
 801100a:	460b      	mov	r3, r1
 801100c:	4650      	mov	r0, sl
 801100e:	4659      	mov	r1, fp
 8011010:	f7ef f95a 	bl	80002c8 <__aeabi_dsub>
 8011014:	460b      	mov	r3, r1
 8011016:	4924      	ldr	r1, [pc, #144]	; (80110a8 <__kernel_cos+0x180>)
 8011018:	4602      	mov	r2, r0
 801101a:	2000      	movs	r0, #0
 801101c:	f7ef f954 	bl	80002c8 <__aeabi_dsub>
 8011020:	ecbd 8b02 	vpop	{d8}
 8011024:	ec41 0b10 	vmov	d0, r0, r1
 8011028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801102c:	4b1f      	ldr	r3, [pc, #124]	; (80110ac <__kernel_cos+0x184>)
 801102e:	491e      	ldr	r1, [pc, #120]	; (80110a8 <__kernel_cos+0x180>)
 8011030:	429e      	cmp	r6, r3
 8011032:	bfcc      	ite	gt
 8011034:	4d1e      	ldrgt	r5, [pc, #120]	; (80110b0 <__kernel_cos+0x188>)
 8011036:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801103a:	2400      	movs	r4, #0
 801103c:	4622      	mov	r2, r4
 801103e:	462b      	mov	r3, r5
 8011040:	2000      	movs	r0, #0
 8011042:	f7ef f941 	bl	80002c8 <__aeabi_dsub>
 8011046:	4622      	mov	r2, r4
 8011048:	4606      	mov	r6, r0
 801104a:	460f      	mov	r7, r1
 801104c:	462b      	mov	r3, r5
 801104e:	4650      	mov	r0, sl
 8011050:	4659      	mov	r1, fp
 8011052:	f7ef f939 	bl	80002c8 <__aeabi_dsub>
 8011056:	4642      	mov	r2, r8
 8011058:	464b      	mov	r3, r9
 801105a:	f7ef f935 	bl	80002c8 <__aeabi_dsub>
 801105e:	4602      	mov	r2, r0
 8011060:	460b      	mov	r3, r1
 8011062:	4630      	mov	r0, r6
 8011064:	4639      	mov	r1, r7
 8011066:	e7d9      	b.n	801101c <__kernel_cos+0xf4>
 8011068:	2000      	movs	r0, #0
 801106a:	490f      	ldr	r1, [pc, #60]	; (80110a8 <__kernel_cos+0x180>)
 801106c:	e7d8      	b.n	8011020 <__kernel_cos+0xf8>
 801106e:	bf00      	nop
 8011070:	be8838d4 	.word	0xbe8838d4
 8011074:	bda8fae9 	.word	0xbda8fae9
 8011078:	bdb4b1c4 	.word	0xbdb4b1c4
 801107c:	3e21ee9e 	.word	0x3e21ee9e
 8011080:	809c52ad 	.word	0x809c52ad
 8011084:	3e927e4f 	.word	0x3e927e4f
 8011088:	19cb1590 	.word	0x19cb1590
 801108c:	3efa01a0 	.word	0x3efa01a0
 8011090:	16c15177 	.word	0x16c15177
 8011094:	3f56c16c 	.word	0x3f56c16c
 8011098:	5555554c 	.word	0x5555554c
 801109c:	3fa55555 	.word	0x3fa55555
 80110a0:	3fe00000 	.word	0x3fe00000
 80110a4:	3fd33332 	.word	0x3fd33332
 80110a8:	3ff00000 	.word	0x3ff00000
 80110ac:	3fe90000 	.word	0x3fe90000
 80110b0:	3fd20000 	.word	0x3fd20000
 80110b4:	00000000 	.word	0x00000000

080110b8 <__kernel_rem_pio2>:
 80110b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110bc:	ed2d 8b02 	vpush	{d8}
 80110c0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80110c4:	1ed4      	subs	r4, r2, #3
 80110c6:	9308      	str	r3, [sp, #32]
 80110c8:	9101      	str	r1, [sp, #4]
 80110ca:	4bc5      	ldr	r3, [pc, #788]	; (80113e0 <__kernel_rem_pio2+0x328>)
 80110cc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80110ce:	9009      	str	r0, [sp, #36]	; 0x24
 80110d0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110d4:	9304      	str	r3, [sp, #16]
 80110d6:	9b08      	ldr	r3, [sp, #32]
 80110d8:	3b01      	subs	r3, #1
 80110da:	9307      	str	r3, [sp, #28]
 80110dc:	2318      	movs	r3, #24
 80110de:	fb94 f4f3 	sdiv	r4, r4, r3
 80110e2:	f06f 0317 	mvn.w	r3, #23
 80110e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80110ea:	fb04 3303 	mla	r3, r4, r3, r3
 80110ee:	eb03 0a02 	add.w	sl, r3, r2
 80110f2:	9b04      	ldr	r3, [sp, #16]
 80110f4:	9a07      	ldr	r2, [sp, #28]
 80110f6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80113d0 <__kernel_rem_pio2+0x318>
 80110fa:	eb03 0802 	add.w	r8, r3, r2
 80110fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011100:	1aa7      	subs	r7, r4, r2
 8011102:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011106:	ae22      	add	r6, sp, #136	; 0x88
 8011108:	2500      	movs	r5, #0
 801110a:	4545      	cmp	r5, r8
 801110c:	dd13      	ble.n	8011136 <__kernel_rem_pio2+0x7e>
 801110e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80113d0 <__kernel_rem_pio2+0x318>
 8011112:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011116:	2600      	movs	r6, #0
 8011118:	9b04      	ldr	r3, [sp, #16]
 801111a:	429e      	cmp	r6, r3
 801111c:	dc32      	bgt.n	8011184 <__kernel_rem_pio2+0xcc>
 801111e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011120:	9302      	str	r3, [sp, #8]
 8011122:	9b08      	ldr	r3, [sp, #32]
 8011124:	199d      	adds	r5, r3, r6
 8011126:	ab22      	add	r3, sp, #136	; 0x88
 8011128:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801112c:	9306      	str	r3, [sp, #24]
 801112e:	ec59 8b18 	vmov	r8, r9, d8
 8011132:	2700      	movs	r7, #0
 8011134:	e01f      	b.n	8011176 <__kernel_rem_pio2+0xbe>
 8011136:	42ef      	cmn	r7, r5
 8011138:	d407      	bmi.n	801114a <__kernel_rem_pio2+0x92>
 801113a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801113e:	f7ef fa11 	bl	8000564 <__aeabi_i2d>
 8011142:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011146:	3501      	adds	r5, #1
 8011148:	e7df      	b.n	801110a <__kernel_rem_pio2+0x52>
 801114a:	ec51 0b18 	vmov	r0, r1, d8
 801114e:	e7f8      	b.n	8011142 <__kernel_rem_pio2+0x8a>
 8011150:	9906      	ldr	r1, [sp, #24]
 8011152:	9d02      	ldr	r5, [sp, #8]
 8011154:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011158:	9106      	str	r1, [sp, #24]
 801115a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801115e:	9502      	str	r5, [sp, #8]
 8011160:	f7ef fa6a 	bl	8000638 <__aeabi_dmul>
 8011164:	4602      	mov	r2, r0
 8011166:	460b      	mov	r3, r1
 8011168:	4640      	mov	r0, r8
 801116a:	4649      	mov	r1, r9
 801116c:	f7ef f8ae 	bl	80002cc <__adddf3>
 8011170:	3701      	adds	r7, #1
 8011172:	4680      	mov	r8, r0
 8011174:	4689      	mov	r9, r1
 8011176:	9b07      	ldr	r3, [sp, #28]
 8011178:	429f      	cmp	r7, r3
 801117a:	dde9      	ble.n	8011150 <__kernel_rem_pio2+0x98>
 801117c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011180:	3601      	adds	r6, #1
 8011182:	e7c9      	b.n	8011118 <__kernel_rem_pio2+0x60>
 8011184:	9b04      	ldr	r3, [sp, #16]
 8011186:	aa0e      	add	r2, sp, #56	; 0x38
 8011188:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801118c:	930c      	str	r3, [sp, #48]	; 0x30
 801118e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011190:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011194:	9c04      	ldr	r4, [sp, #16]
 8011196:	930b      	str	r3, [sp, #44]	; 0x2c
 8011198:	ab9a      	add	r3, sp, #616	; 0x268
 801119a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801119e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80111a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80111a6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80111aa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80111ae:	ab9a      	add	r3, sp, #616	; 0x268
 80111b0:	445b      	add	r3, fp
 80111b2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80111b6:	2500      	movs	r5, #0
 80111b8:	1b63      	subs	r3, r4, r5
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	dc78      	bgt.n	80112b0 <__kernel_rem_pio2+0x1f8>
 80111be:	4650      	mov	r0, sl
 80111c0:	ec49 8b10 	vmov	d0, r8, r9
 80111c4:	f000 fdb0 	bl	8011d28 <scalbn>
 80111c8:	ec57 6b10 	vmov	r6, r7, d0
 80111cc:	2200      	movs	r2, #0
 80111ce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80111d2:	ee10 0a10 	vmov	r0, s0
 80111d6:	4639      	mov	r1, r7
 80111d8:	f7ef fa2e 	bl	8000638 <__aeabi_dmul>
 80111dc:	ec41 0b10 	vmov	d0, r0, r1
 80111e0:	f000 fd12 	bl	8011c08 <floor>
 80111e4:	2200      	movs	r2, #0
 80111e6:	ec51 0b10 	vmov	r0, r1, d0
 80111ea:	4b7e      	ldr	r3, [pc, #504]	; (80113e4 <__kernel_rem_pio2+0x32c>)
 80111ec:	f7ef fa24 	bl	8000638 <__aeabi_dmul>
 80111f0:	4602      	mov	r2, r0
 80111f2:	460b      	mov	r3, r1
 80111f4:	4630      	mov	r0, r6
 80111f6:	4639      	mov	r1, r7
 80111f8:	f7ef f866 	bl	80002c8 <__aeabi_dsub>
 80111fc:	460f      	mov	r7, r1
 80111fe:	4606      	mov	r6, r0
 8011200:	f7ef fcca 	bl	8000b98 <__aeabi_d2iz>
 8011204:	9006      	str	r0, [sp, #24]
 8011206:	f7ef f9ad 	bl	8000564 <__aeabi_i2d>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	4630      	mov	r0, r6
 8011210:	4639      	mov	r1, r7
 8011212:	f7ef f859 	bl	80002c8 <__aeabi_dsub>
 8011216:	f1ba 0f00 	cmp.w	sl, #0
 801121a:	4606      	mov	r6, r0
 801121c:	460f      	mov	r7, r1
 801121e:	dd6c      	ble.n	80112fa <__kernel_rem_pio2+0x242>
 8011220:	1e62      	subs	r2, r4, #1
 8011222:	ab0e      	add	r3, sp, #56	; 0x38
 8011224:	f1ca 0118 	rsb	r1, sl, #24
 8011228:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801122c:	9d06      	ldr	r5, [sp, #24]
 801122e:	fa40 f301 	asr.w	r3, r0, r1
 8011232:	441d      	add	r5, r3
 8011234:	408b      	lsls	r3, r1
 8011236:	1ac0      	subs	r0, r0, r3
 8011238:	ab0e      	add	r3, sp, #56	; 0x38
 801123a:	9506      	str	r5, [sp, #24]
 801123c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011240:	f1ca 0317 	rsb	r3, sl, #23
 8011244:	fa40 f303 	asr.w	r3, r0, r3
 8011248:	9302      	str	r3, [sp, #8]
 801124a:	9b02      	ldr	r3, [sp, #8]
 801124c:	2b00      	cmp	r3, #0
 801124e:	dd62      	ble.n	8011316 <__kernel_rem_pio2+0x25e>
 8011250:	9b06      	ldr	r3, [sp, #24]
 8011252:	2200      	movs	r2, #0
 8011254:	3301      	adds	r3, #1
 8011256:	9306      	str	r3, [sp, #24]
 8011258:	4615      	mov	r5, r2
 801125a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801125e:	4294      	cmp	r4, r2
 8011260:	f300 8095 	bgt.w	801138e <__kernel_rem_pio2+0x2d6>
 8011264:	f1ba 0f00 	cmp.w	sl, #0
 8011268:	dd07      	ble.n	801127a <__kernel_rem_pio2+0x1c2>
 801126a:	f1ba 0f01 	cmp.w	sl, #1
 801126e:	f000 80a2 	beq.w	80113b6 <__kernel_rem_pio2+0x2fe>
 8011272:	f1ba 0f02 	cmp.w	sl, #2
 8011276:	f000 80c1 	beq.w	80113fc <__kernel_rem_pio2+0x344>
 801127a:	9b02      	ldr	r3, [sp, #8]
 801127c:	2b02      	cmp	r3, #2
 801127e:	d14a      	bne.n	8011316 <__kernel_rem_pio2+0x25e>
 8011280:	4632      	mov	r2, r6
 8011282:	463b      	mov	r3, r7
 8011284:	2000      	movs	r0, #0
 8011286:	4958      	ldr	r1, [pc, #352]	; (80113e8 <__kernel_rem_pio2+0x330>)
 8011288:	f7ef f81e 	bl	80002c8 <__aeabi_dsub>
 801128c:	4606      	mov	r6, r0
 801128e:	460f      	mov	r7, r1
 8011290:	2d00      	cmp	r5, #0
 8011292:	d040      	beq.n	8011316 <__kernel_rem_pio2+0x25e>
 8011294:	4650      	mov	r0, sl
 8011296:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80113d8 <__kernel_rem_pio2+0x320>
 801129a:	f000 fd45 	bl	8011d28 <scalbn>
 801129e:	4630      	mov	r0, r6
 80112a0:	4639      	mov	r1, r7
 80112a2:	ec53 2b10 	vmov	r2, r3, d0
 80112a6:	f7ef f80f 	bl	80002c8 <__aeabi_dsub>
 80112aa:	4606      	mov	r6, r0
 80112ac:	460f      	mov	r7, r1
 80112ae:	e032      	b.n	8011316 <__kernel_rem_pio2+0x25e>
 80112b0:	2200      	movs	r2, #0
 80112b2:	4b4e      	ldr	r3, [pc, #312]	; (80113ec <__kernel_rem_pio2+0x334>)
 80112b4:	4640      	mov	r0, r8
 80112b6:	4649      	mov	r1, r9
 80112b8:	f7ef f9be 	bl	8000638 <__aeabi_dmul>
 80112bc:	f7ef fc6c 	bl	8000b98 <__aeabi_d2iz>
 80112c0:	f7ef f950 	bl	8000564 <__aeabi_i2d>
 80112c4:	2200      	movs	r2, #0
 80112c6:	4b4a      	ldr	r3, [pc, #296]	; (80113f0 <__kernel_rem_pio2+0x338>)
 80112c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112cc:	f7ef f9b4 	bl	8000638 <__aeabi_dmul>
 80112d0:	4602      	mov	r2, r0
 80112d2:	460b      	mov	r3, r1
 80112d4:	4640      	mov	r0, r8
 80112d6:	4649      	mov	r1, r9
 80112d8:	f7ee fff6 	bl	80002c8 <__aeabi_dsub>
 80112dc:	f7ef fc5c 	bl	8000b98 <__aeabi_d2iz>
 80112e0:	ab0e      	add	r3, sp, #56	; 0x38
 80112e2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80112e6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80112ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80112ee:	f7ee ffed 	bl	80002cc <__adddf3>
 80112f2:	3501      	adds	r5, #1
 80112f4:	4680      	mov	r8, r0
 80112f6:	4689      	mov	r9, r1
 80112f8:	e75e      	b.n	80111b8 <__kernel_rem_pio2+0x100>
 80112fa:	d105      	bne.n	8011308 <__kernel_rem_pio2+0x250>
 80112fc:	1e63      	subs	r3, r4, #1
 80112fe:	aa0e      	add	r2, sp, #56	; 0x38
 8011300:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011304:	15c3      	asrs	r3, r0, #23
 8011306:	e79f      	b.n	8011248 <__kernel_rem_pio2+0x190>
 8011308:	2200      	movs	r2, #0
 801130a:	4b3a      	ldr	r3, [pc, #232]	; (80113f4 <__kernel_rem_pio2+0x33c>)
 801130c:	f7ef fc1a 	bl	8000b44 <__aeabi_dcmpge>
 8011310:	2800      	cmp	r0, #0
 8011312:	d139      	bne.n	8011388 <__kernel_rem_pio2+0x2d0>
 8011314:	9002      	str	r0, [sp, #8]
 8011316:	2200      	movs	r2, #0
 8011318:	2300      	movs	r3, #0
 801131a:	4630      	mov	r0, r6
 801131c:	4639      	mov	r1, r7
 801131e:	f7ef fbf3 	bl	8000b08 <__aeabi_dcmpeq>
 8011322:	2800      	cmp	r0, #0
 8011324:	f000 80c7 	beq.w	80114b6 <__kernel_rem_pio2+0x3fe>
 8011328:	1e65      	subs	r5, r4, #1
 801132a:	462b      	mov	r3, r5
 801132c:	2200      	movs	r2, #0
 801132e:	9904      	ldr	r1, [sp, #16]
 8011330:	428b      	cmp	r3, r1
 8011332:	da6a      	bge.n	801140a <__kernel_rem_pio2+0x352>
 8011334:	2a00      	cmp	r2, #0
 8011336:	f000 8088 	beq.w	801144a <__kernel_rem_pio2+0x392>
 801133a:	ab0e      	add	r3, sp, #56	; 0x38
 801133c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011340:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 80b4 	beq.w	80114b2 <__kernel_rem_pio2+0x3fa>
 801134a:	4650      	mov	r0, sl
 801134c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80113d8 <__kernel_rem_pio2+0x320>
 8011350:	f000 fcea 	bl	8011d28 <scalbn>
 8011354:	00ec      	lsls	r4, r5, #3
 8011356:	ab72      	add	r3, sp, #456	; 0x1c8
 8011358:	191e      	adds	r6, r3, r4
 801135a:	ec59 8b10 	vmov	r8, r9, d0
 801135e:	f106 0a08 	add.w	sl, r6, #8
 8011362:	462f      	mov	r7, r5
 8011364:	2f00      	cmp	r7, #0
 8011366:	f280 80df 	bge.w	8011528 <__kernel_rem_pio2+0x470>
 801136a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80113d0 <__kernel_rem_pio2+0x318>
 801136e:	f04f 0a00 	mov.w	sl, #0
 8011372:	eba5 030a 	sub.w	r3, r5, sl
 8011376:	2b00      	cmp	r3, #0
 8011378:	f2c0 810a 	blt.w	8011590 <__kernel_rem_pio2+0x4d8>
 801137c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80113f8 <__kernel_rem_pio2+0x340>
 8011380:	ec59 8b18 	vmov	r8, r9, d8
 8011384:	2700      	movs	r7, #0
 8011386:	e0f5      	b.n	8011574 <__kernel_rem_pio2+0x4bc>
 8011388:	2302      	movs	r3, #2
 801138a:	9302      	str	r3, [sp, #8]
 801138c:	e760      	b.n	8011250 <__kernel_rem_pio2+0x198>
 801138e:	ab0e      	add	r3, sp, #56	; 0x38
 8011390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011394:	b94d      	cbnz	r5, 80113aa <__kernel_rem_pio2+0x2f2>
 8011396:	b12b      	cbz	r3, 80113a4 <__kernel_rem_pio2+0x2ec>
 8011398:	a80e      	add	r0, sp, #56	; 0x38
 801139a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801139e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80113a2:	2301      	movs	r3, #1
 80113a4:	3201      	adds	r2, #1
 80113a6:	461d      	mov	r5, r3
 80113a8:	e759      	b.n	801125e <__kernel_rem_pio2+0x1a6>
 80113aa:	a80e      	add	r0, sp, #56	; 0x38
 80113ac:	1acb      	subs	r3, r1, r3
 80113ae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80113b2:	462b      	mov	r3, r5
 80113b4:	e7f6      	b.n	80113a4 <__kernel_rem_pio2+0x2ec>
 80113b6:	1e62      	subs	r2, r4, #1
 80113b8:	ab0e      	add	r3, sp, #56	; 0x38
 80113ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80113c2:	a90e      	add	r1, sp, #56	; 0x38
 80113c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80113c8:	e757      	b.n	801127a <__kernel_rem_pio2+0x1c2>
 80113ca:	bf00      	nop
 80113cc:	f3af 8000 	nop.w
	...
 80113dc:	3ff00000 	.word	0x3ff00000
 80113e0:	080128d8 	.word	0x080128d8
 80113e4:	40200000 	.word	0x40200000
 80113e8:	3ff00000 	.word	0x3ff00000
 80113ec:	3e700000 	.word	0x3e700000
 80113f0:	41700000 	.word	0x41700000
 80113f4:	3fe00000 	.word	0x3fe00000
 80113f8:	08012898 	.word	0x08012898
 80113fc:	1e62      	subs	r2, r4, #1
 80113fe:	ab0e      	add	r3, sp, #56	; 0x38
 8011400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011404:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011408:	e7db      	b.n	80113c2 <__kernel_rem_pio2+0x30a>
 801140a:	a90e      	add	r1, sp, #56	; 0x38
 801140c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011410:	3b01      	subs	r3, #1
 8011412:	430a      	orrs	r2, r1
 8011414:	e78b      	b.n	801132e <__kernel_rem_pio2+0x276>
 8011416:	3301      	adds	r3, #1
 8011418:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801141c:	2900      	cmp	r1, #0
 801141e:	d0fa      	beq.n	8011416 <__kernel_rem_pio2+0x35e>
 8011420:	9a08      	ldr	r2, [sp, #32]
 8011422:	4422      	add	r2, r4
 8011424:	00d2      	lsls	r2, r2, #3
 8011426:	a922      	add	r1, sp, #136	; 0x88
 8011428:	18e3      	adds	r3, r4, r3
 801142a:	9206      	str	r2, [sp, #24]
 801142c:	440a      	add	r2, r1
 801142e:	9302      	str	r3, [sp, #8]
 8011430:	f10b 0108 	add.w	r1, fp, #8
 8011434:	f102 0308 	add.w	r3, r2, #8
 8011438:	1c66      	adds	r6, r4, #1
 801143a:	910a      	str	r1, [sp, #40]	; 0x28
 801143c:	2500      	movs	r5, #0
 801143e:	930d      	str	r3, [sp, #52]	; 0x34
 8011440:	9b02      	ldr	r3, [sp, #8]
 8011442:	42b3      	cmp	r3, r6
 8011444:	da04      	bge.n	8011450 <__kernel_rem_pio2+0x398>
 8011446:	461c      	mov	r4, r3
 8011448:	e6a6      	b.n	8011198 <__kernel_rem_pio2+0xe0>
 801144a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801144c:	2301      	movs	r3, #1
 801144e:	e7e3      	b.n	8011418 <__kernel_rem_pio2+0x360>
 8011450:	9b06      	ldr	r3, [sp, #24]
 8011452:	18ef      	adds	r7, r5, r3
 8011454:	ab22      	add	r3, sp, #136	; 0x88
 8011456:	441f      	add	r7, r3
 8011458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801145a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801145e:	f7ef f881 	bl	8000564 <__aeabi_i2d>
 8011462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011464:	461c      	mov	r4, r3
 8011466:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011468:	e9c7 0100 	strd	r0, r1, [r7]
 801146c:	eb03 0b05 	add.w	fp, r3, r5
 8011470:	2700      	movs	r7, #0
 8011472:	f04f 0800 	mov.w	r8, #0
 8011476:	f04f 0900 	mov.w	r9, #0
 801147a:	9b07      	ldr	r3, [sp, #28]
 801147c:	429f      	cmp	r7, r3
 801147e:	dd08      	ble.n	8011492 <__kernel_rem_pio2+0x3da>
 8011480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011482:	aa72      	add	r2, sp, #456	; 0x1c8
 8011484:	18eb      	adds	r3, r5, r3
 8011486:	4413      	add	r3, r2
 8011488:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801148c:	3601      	adds	r6, #1
 801148e:	3508      	adds	r5, #8
 8011490:	e7d6      	b.n	8011440 <__kernel_rem_pio2+0x388>
 8011492:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011496:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801149a:	f7ef f8cd 	bl	8000638 <__aeabi_dmul>
 801149e:	4602      	mov	r2, r0
 80114a0:	460b      	mov	r3, r1
 80114a2:	4640      	mov	r0, r8
 80114a4:	4649      	mov	r1, r9
 80114a6:	f7ee ff11 	bl	80002cc <__adddf3>
 80114aa:	3701      	adds	r7, #1
 80114ac:	4680      	mov	r8, r0
 80114ae:	4689      	mov	r9, r1
 80114b0:	e7e3      	b.n	801147a <__kernel_rem_pio2+0x3c2>
 80114b2:	3d01      	subs	r5, #1
 80114b4:	e741      	b.n	801133a <__kernel_rem_pio2+0x282>
 80114b6:	f1ca 0000 	rsb	r0, sl, #0
 80114ba:	ec47 6b10 	vmov	d0, r6, r7
 80114be:	f000 fc33 	bl	8011d28 <scalbn>
 80114c2:	ec57 6b10 	vmov	r6, r7, d0
 80114c6:	2200      	movs	r2, #0
 80114c8:	4b99      	ldr	r3, [pc, #612]	; (8011730 <__kernel_rem_pio2+0x678>)
 80114ca:	ee10 0a10 	vmov	r0, s0
 80114ce:	4639      	mov	r1, r7
 80114d0:	f7ef fb38 	bl	8000b44 <__aeabi_dcmpge>
 80114d4:	b1f8      	cbz	r0, 8011516 <__kernel_rem_pio2+0x45e>
 80114d6:	2200      	movs	r2, #0
 80114d8:	4b96      	ldr	r3, [pc, #600]	; (8011734 <__kernel_rem_pio2+0x67c>)
 80114da:	4630      	mov	r0, r6
 80114dc:	4639      	mov	r1, r7
 80114de:	f7ef f8ab 	bl	8000638 <__aeabi_dmul>
 80114e2:	f7ef fb59 	bl	8000b98 <__aeabi_d2iz>
 80114e6:	4680      	mov	r8, r0
 80114e8:	f7ef f83c 	bl	8000564 <__aeabi_i2d>
 80114ec:	2200      	movs	r2, #0
 80114ee:	4b90      	ldr	r3, [pc, #576]	; (8011730 <__kernel_rem_pio2+0x678>)
 80114f0:	f7ef f8a2 	bl	8000638 <__aeabi_dmul>
 80114f4:	460b      	mov	r3, r1
 80114f6:	4602      	mov	r2, r0
 80114f8:	4639      	mov	r1, r7
 80114fa:	4630      	mov	r0, r6
 80114fc:	f7ee fee4 	bl	80002c8 <__aeabi_dsub>
 8011500:	f7ef fb4a 	bl	8000b98 <__aeabi_d2iz>
 8011504:	1c65      	adds	r5, r4, #1
 8011506:	ab0e      	add	r3, sp, #56	; 0x38
 8011508:	f10a 0a18 	add.w	sl, sl, #24
 801150c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011510:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011514:	e719      	b.n	801134a <__kernel_rem_pio2+0x292>
 8011516:	4630      	mov	r0, r6
 8011518:	4639      	mov	r1, r7
 801151a:	f7ef fb3d 	bl	8000b98 <__aeabi_d2iz>
 801151e:	ab0e      	add	r3, sp, #56	; 0x38
 8011520:	4625      	mov	r5, r4
 8011522:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011526:	e710      	b.n	801134a <__kernel_rem_pio2+0x292>
 8011528:	ab0e      	add	r3, sp, #56	; 0x38
 801152a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801152e:	f7ef f819 	bl	8000564 <__aeabi_i2d>
 8011532:	4642      	mov	r2, r8
 8011534:	464b      	mov	r3, r9
 8011536:	f7ef f87f 	bl	8000638 <__aeabi_dmul>
 801153a:	2200      	movs	r2, #0
 801153c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011540:	4b7c      	ldr	r3, [pc, #496]	; (8011734 <__kernel_rem_pio2+0x67c>)
 8011542:	4640      	mov	r0, r8
 8011544:	4649      	mov	r1, r9
 8011546:	f7ef f877 	bl	8000638 <__aeabi_dmul>
 801154a:	3f01      	subs	r7, #1
 801154c:	4680      	mov	r8, r0
 801154e:	4689      	mov	r9, r1
 8011550:	e708      	b.n	8011364 <__kernel_rem_pio2+0x2ac>
 8011552:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801155e:	f7ef f86b 	bl	8000638 <__aeabi_dmul>
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	4640      	mov	r0, r8
 8011568:	4649      	mov	r1, r9
 801156a:	f7ee feaf 	bl	80002cc <__adddf3>
 801156e:	3701      	adds	r7, #1
 8011570:	4680      	mov	r8, r0
 8011572:	4689      	mov	r9, r1
 8011574:	9b04      	ldr	r3, [sp, #16]
 8011576:	429f      	cmp	r7, r3
 8011578:	dc01      	bgt.n	801157e <__kernel_rem_pio2+0x4c6>
 801157a:	45ba      	cmp	sl, r7
 801157c:	dae9      	bge.n	8011552 <__kernel_rem_pio2+0x49a>
 801157e:	ab4a      	add	r3, sp, #296	; 0x128
 8011580:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011584:	e9c3 8900 	strd	r8, r9, [r3]
 8011588:	f10a 0a01 	add.w	sl, sl, #1
 801158c:	3e08      	subs	r6, #8
 801158e:	e6f0      	b.n	8011372 <__kernel_rem_pio2+0x2ba>
 8011590:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011592:	2b03      	cmp	r3, #3
 8011594:	d85b      	bhi.n	801164e <__kernel_rem_pio2+0x596>
 8011596:	e8df f003 	tbb	[pc, r3]
 801159a:	264a      	.short	0x264a
 801159c:	0226      	.short	0x0226
 801159e:	ab9a      	add	r3, sp, #616	; 0x268
 80115a0:	441c      	add	r4, r3
 80115a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80115a6:	46a2      	mov	sl, r4
 80115a8:	46ab      	mov	fp, r5
 80115aa:	f1bb 0f00 	cmp.w	fp, #0
 80115ae:	dc6c      	bgt.n	801168a <__kernel_rem_pio2+0x5d2>
 80115b0:	46a2      	mov	sl, r4
 80115b2:	46ab      	mov	fp, r5
 80115b4:	f1bb 0f01 	cmp.w	fp, #1
 80115b8:	f300 8086 	bgt.w	80116c8 <__kernel_rem_pio2+0x610>
 80115bc:	2000      	movs	r0, #0
 80115be:	2100      	movs	r1, #0
 80115c0:	2d01      	cmp	r5, #1
 80115c2:	f300 80a0 	bgt.w	8011706 <__kernel_rem_pio2+0x64e>
 80115c6:	9b02      	ldr	r3, [sp, #8]
 80115c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80115cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	f040 809e 	bne.w	8011712 <__kernel_rem_pio2+0x65a>
 80115d6:	9b01      	ldr	r3, [sp, #4]
 80115d8:	e9c3 7800 	strd	r7, r8, [r3]
 80115dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80115e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80115e4:	e033      	b.n	801164e <__kernel_rem_pio2+0x596>
 80115e6:	3408      	adds	r4, #8
 80115e8:	ab4a      	add	r3, sp, #296	; 0x128
 80115ea:	441c      	add	r4, r3
 80115ec:	462e      	mov	r6, r5
 80115ee:	2000      	movs	r0, #0
 80115f0:	2100      	movs	r1, #0
 80115f2:	2e00      	cmp	r6, #0
 80115f4:	da3a      	bge.n	801166c <__kernel_rem_pio2+0x5b4>
 80115f6:	9b02      	ldr	r3, [sp, #8]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d03d      	beq.n	8011678 <__kernel_rem_pio2+0x5c0>
 80115fc:	4602      	mov	r2, r0
 80115fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011602:	9c01      	ldr	r4, [sp, #4]
 8011604:	e9c4 2300 	strd	r2, r3, [r4]
 8011608:	4602      	mov	r2, r0
 801160a:	460b      	mov	r3, r1
 801160c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011610:	f7ee fe5a 	bl	80002c8 <__aeabi_dsub>
 8011614:	ae4c      	add	r6, sp, #304	; 0x130
 8011616:	2401      	movs	r4, #1
 8011618:	42a5      	cmp	r5, r4
 801161a:	da30      	bge.n	801167e <__kernel_rem_pio2+0x5c6>
 801161c:	9b02      	ldr	r3, [sp, #8]
 801161e:	b113      	cbz	r3, 8011626 <__kernel_rem_pio2+0x56e>
 8011620:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011624:	4619      	mov	r1, r3
 8011626:	9b01      	ldr	r3, [sp, #4]
 8011628:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801162c:	e00f      	b.n	801164e <__kernel_rem_pio2+0x596>
 801162e:	ab9a      	add	r3, sp, #616	; 0x268
 8011630:	441c      	add	r4, r3
 8011632:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011636:	2000      	movs	r0, #0
 8011638:	2100      	movs	r1, #0
 801163a:	2d00      	cmp	r5, #0
 801163c:	da10      	bge.n	8011660 <__kernel_rem_pio2+0x5a8>
 801163e:	9b02      	ldr	r3, [sp, #8]
 8011640:	b113      	cbz	r3, 8011648 <__kernel_rem_pio2+0x590>
 8011642:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011646:	4619      	mov	r1, r3
 8011648:	9b01      	ldr	r3, [sp, #4]
 801164a:	e9c3 0100 	strd	r0, r1, [r3]
 801164e:	9b06      	ldr	r3, [sp, #24]
 8011650:	f003 0007 	and.w	r0, r3, #7
 8011654:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011658:	ecbd 8b02 	vpop	{d8}
 801165c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011660:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011664:	f7ee fe32 	bl	80002cc <__adddf3>
 8011668:	3d01      	subs	r5, #1
 801166a:	e7e6      	b.n	801163a <__kernel_rem_pio2+0x582>
 801166c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011670:	f7ee fe2c 	bl	80002cc <__adddf3>
 8011674:	3e01      	subs	r6, #1
 8011676:	e7bc      	b.n	80115f2 <__kernel_rem_pio2+0x53a>
 8011678:	4602      	mov	r2, r0
 801167a:	460b      	mov	r3, r1
 801167c:	e7c1      	b.n	8011602 <__kernel_rem_pio2+0x54a>
 801167e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011682:	f7ee fe23 	bl	80002cc <__adddf3>
 8011686:	3401      	adds	r4, #1
 8011688:	e7c6      	b.n	8011618 <__kernel_rem_pio2+0x560>
 801168a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801168e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011692:	4640      	mov	r0, r8
 8011694:	ec53 2b17 	vmov	r2, r3, d7
 8011698:	4649      	mov	r1, r9
 801169a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801169e:	f7ee fe15 	bl	80002cc <__adddf3>
 80116a2:	4602      	mov	r2, r0
 80116a4:	460b      	mov	r3, r1
 80116a6:	4606      	mov	r6, r0
 80116a8:	460f      	mov	r7, r1
 80116aa:	4640      	mov	r0, r8
 80116ac:	4649      	mov	r1, r9
 80116ae:	f7ee fe0b 	bl	80002c8 <__aeabi_dsub>
 80116b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116b6:	f7ee fe09 	bl	80002cc <__adddf3>
 80116ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80116be:	e9ca 0100 	strd	r0, r1, [sl]
 80116c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80116c6:	e770      	b.n	80115aa <__kernel_rem_pio2+0x4f2>
 80116c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80116cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 80116d0:	4630      	mov	r0, r6
 80116d2:	ec53 2b17 	vmov	r2, r3, d7
 80116d6:	4639      	mov	r1, r7
 80116d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 80116dc:	f7ee fdf6 	bl	80002cc <__adddf3>
 80116e0:	4602      	mov	r2, r0
 80116e2:	460b      	mov	r3, r1
 80116e4:	4680      	mov	r8, r0
 80116e6:	4689      	mov	r9, r1
 80116e8:	4630      	mov	r0, r6
 80116ea:	4639      	mov	r1, r7
 80116ec:	f7ee fdec 	bl	80002c8 <__aeabi_dsub>
 80116f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80116f4:	f7ee fdea 	bl	80002cc <__adddf3>
 80116f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80116fc:	e9ca 0100 	strd	r0, r1, [sl]
 8011700:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011704:	e756      	b.n	80115b4 <__kernel_rem_pio2+0x4fc>
 8011706:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801170a:	f7ee fddf 	bl	80002cc <__adddf3>
 801170e:	3d01      	subs	r5, #1
 8011710:	e756      	b.n	80115c0 <__kernel_rem_pio2+0x508>
 8011712:	9b01      	ldr	r3, [sp, #4]
 8011714:	9a01      	ldr	r2, [sp, #4]
 8011716:	601f      	str	r7, [r3, #0]
 8011718:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 801171c:	605c      	str	r4, [r3, #4]
 801171e:	609d      	str	r5, [r3, #8]
 8011720:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011724:	60d3      	str	r3, [r2, #12]
 8011726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801172a:	6110      	str	r0, [r2, #16]
 801172c:	6153      	str	r3, [r2, #20]
 801172e:	e78e      	b.n	801164e <__kernel_rem_pio2+0x596>
 8011730:	41700000 	.word	0x41700000
 8011734:	3e700000 	.word	0x3e700000

08011738 <__kernel_sin>:
 8011738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173c:	ec55 4b10 	vmov	r4, r5, d0
 8011740:	b085      	sub	sp, #20
 8011742:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011746:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801174a:	ed8d 1b00 	vstr	d1, [sp]
 801174e:	9002      	str	r0, [sp, #8]
 8011750:	da06      	bge.n	8011760 <__kernel_sin+0x28>
 8011752:	ee10 0a10 	vmov	r0, s0
 8011756:	4629      	mov	r1, r5
 8011758:	f7ef fa1e 	bl	8000b98 <__aeabi_d2iz>
 801175c:	2800      	cmp	r0, #0
 801175e:	d051      	beq.n	8011804 <__kernel_sin+0xcc>
 8011760:	4622      	mov	r2, r4
 8011762:	462b      	mov	r3, r5
 8011764:	4620      	mov	r0, r4
 8011766:	4629      	mov	r1, r5
 8011768:	f7ee ff66 	bl	8000638 <__aeabi_dmul>
 801176c:	4682      	mov	sl, r0
 801176e:	468b      	mov	fp, r1
 8011770:	4602      	mov	r2, r0
 8011772:	460b      	mov	r3, r1
 8011774:	4620      	mov	r0, r4
 8011776:	4629      	mov	r1, r5
 8011778:	f7ee ff5e 	bl	8000638 <__aeabi_dmul>
 801177c:	a341      	add	r3, pc, #260	; (adr r3, 8011884 <__kernel_sin+0x14c>)
 801177e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011782:	4680      	mov	r8, r0
 8011784:	4689      	mov	r9, r1
 8011786:	4650      	mov	r0, sl
 8011788:	4659      	mov	r1, fp
 801178a:	f7ee ff55 	bl	8000638 <__aeabi_dmul>
 801178e:	a33f      	add	r3, pc, #252	; (adr r3, 801188c <__kernel_sin+0x154>)
 8011790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011794:	f7ee fd98 	bl	80002c8 <__aeabi_dsub>
 8011798:	4652      	mov	r2, sl
 801179a:	465b      	mov	r3, fp
 801179c:	f7ee ff4c 	bl	8000638 <__aeabi_dmul>
 80117a0:	a33c      	add	r3, pc, #240	; (adr r3, 8011894 <__kernel_sin+0x15c>)
 80117a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a6:	f7ee fd91 	bl	80002cc <__adddf3>
 80117aa:	4652      	mov	r2, sl
 80117ac:	465b      	mov	r3, fp
 80117ae:	f7ee ff43 	bl	8000638 <__aeabi_dmul>
 80117b2:	a33a      	add	r3, pc, #232	; (adr r3, 801189c <__kernel_sin+0x164>)
 80117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b8:	f7ee fd86 	bl	80002c8 <__aeabi_dsub>
 80117bc:	4652      	mov	r2, sl
 80117be:	465b      	mov	r3, fp
 80117c0:	f7ee ff3a 	bl	8000638 <__aeabi_dmul>
 80117c4:	a337      	add	r3, pc, #220	; (adr r3, 80118a4 <__kernel_sin+0x16c>)
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	f7ee fd7f 	bl	80002cc <__adddf3>
 80117ce:	9b02      	ldr	r3, [sp, #8]
 80117d0:	4606      	mov	r6, r0
 80117d2:	460f      	mov	r7, r1
 80117d4:	b9db      	cbnz	r3, 801180e <__kernel_sin+0xd6>
 80117d6:	4602      	mov	r2, r0
 80117d8:	460b      	mov	r3, r1
 80117da:	4650      	mov	r0, sl
 80117dc:	4659      	mov	r1, fp
 80117de:	f7ee ff2b 	bl	8000638 <__aeabi_dmul>
 80117e2:	a325      	add	r3, pc, #148	; (adr r3, 8011878 <__kernel_sin+0x140>)
 80117e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e8:	f7ee fd6e 	bl	80002c8 <__aeabi_dsub>
 80117ec:	4642      	mov	r2, r8
 80117ee:	464b      	mov	r3, r9
 80117f0:	f7ee ff22 	bl	8000638 <__aeabi_dmul>
 80117f4:	4602      	mov	r2, r0
 80117f6:	460b      	mov	r3, r1
 80117f8:	4620      	mov	r0, r4
 80117fa:	4629      	mov	r1, r5
 80117fc:	f7ee fd66 	bl	80002cc <__adddf3>
 8011800:	4604      	mov	r4, r0
 8011802:	460d      	mov	r5, r1
 8011804:	ec45 4b10 	vmov	d0, r4, r5
 8011808:	b005      	add	sp, #20
 801180a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801180e:	2200      	movs	r2, #0
 8011810:	4b1b      	ldr	r3, [pc, #108]	; (8011880 <__kernel_sin+0x148>)
 8011812:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011816:	f7ee ff0f 	bl	8000638 <__aeabi_dmul>
 801181a:	4632      	mov	r2, r6
 801181c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011820:	463b      	mov	r3, r7
 8011822:	4640      	mov	r0, r8
 8011824:	4649      	mov	r1, r9
 8011826:	f7ee ff07 	bl	8000638 <__aeabi_dmul>
 801182a:	4602      	mov	r2, r0
 801182c:	460b      	mov	r3, r1
 801182e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011832:	f7ee fd49 	bl	80002c8 <__aeabi_dsub>
 8011836:	4652      	mov	r2, sl
 8011838:	465b      	mov	r3, fp
 801183a:	f7ee fefd 	bl	8000638 <__aeabi_dmul>
 801183e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011842:	f7ee fd41 	bl	80002c8 <__aeabi_dsub>
 8011846:	a30c      	add	r3, pc, #48	; (adr r3, 8011878 <__kernel_sin+0x140>)
 8011848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801184c:	4606      	mov	r6, r0
 801184e:	460f      	mov	r7, r1
 8011850:	4640      	mov	r0, r8
 8011852:	4649      	mov	r1, r9
 8011854:	f7ee fef0 	bl	8000638 <__aeabi_dmul>
 8011858:	4602      	mov	r2, r0
 801185a:	460b      	mov	r3, r1
 801185c:	4630      	mov	r0, r6
 801185e:	4639      	mov	r1, r7
 8011860:	f7ee fd34 	bl	80002cc <__adddf3>
 8011864:	4602      	mov	r2, r0
 8011866:	460b      	mov	r3, r1
 8011868:	4620      	mov	r0, r4
 801186a:	4629      	mov	r1, r5
 801186c:	f7ee fd2c 	bl	80002c8 <__aeabi_dsub>
 8011870:	e7c6      	b.n	8011800 <__kernel_sin+0xc8>
 8011872:	bf00      	nop
 8011874:	f3af 8000 	nop.w
 8011878:	55555549 	.word	0x55555549
 801187c:	3fc55555 	.word	0x3fc55555
 8011880:	3fe00000 	.word	0x3fe00000
 8011884:	5acfd57c 	.word	0x5acfd57c
 8011888:	3de5d93a 	.word	0x3de5d93a
 801188c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011890:	3e5ae5e6 	.word	0x3e5ae5e6
 8011894:	57b1fe7d 	.word	0x57b1fe7d
 8011898:	3ec71de3 	.word	0x3ec71de3
 801189c:	19c161d5 	.word	0x19c161d5
 80118a0:	3f2a01a0 	.word	0x3f2a01a0
 80118a4:	1110f8a6 	.word	0x1110f8a6
 80118a8:	3f811111 	.word	0x3f811111
 80118ac:	00000000 	.word	0x00000000

080118b0 <atan>:
 80118b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118b4:	ec55 4b10 	vmov	r4, r5, d0
 80118b8:	4bc3      	ldr	r3, [pc, #780]	; (8011bc8 <atan+0x318>)
 80118ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80118be:	429e      	cmp	r6, r3
 80118c0:	46ab      	mov	fp, r5
 80118c2:	dd18      	ble.n	80118f6 <atan+0x46>
 80118c4:	4bc1      	ldr	r3, [pc, #772]	; (8011bcc <atan+0x31c>)
 80118c6:	429e      	cmp	r6, r3
 80118c8:	dc01      	bgt.n	80118ce <atan+0x1e>
 80118ca:	d109      	bne.n	80118e0 <atan+0x30>
 80118cc:	b144      	cbz	r4, 80118e0 <atan+0x30>
 80118ce:	4622      	mov	r2, r4
 80118d0:	462b      	mov	r3, r5
 80118d2:	4620      	mov	r0, r4
 80118d4:	4629      	mov	r1, r5
 80118d6:	f7ee fcf9 	bl	80002cc <__adddf3>
 80118da:	4604      	mov	r4, r0
 80118dc:	460d      	mov	r5, r1
 80118de:	e006      	b.n	80118ee <atan+0x3e>
 80118e0:	f1bb 0f00 	cmp.w	fp, #0
 80118e4:	f340 8131 	ble.w	8011b4a <atan+0x29a>
 80118e8:	a59b      	add	r5, pc, #620	; (adr r5, 8011b58 <atan+0x2a8>)
 80118ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80118ee:	ec45 4b10 	vmov	d0, r4, r5
 80118f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80118f6:	4bb6      	ldr	r3, [pc, #728]	; (8011bd0 <atan+0x320>)
 80118f8:	429e      	cmp	r6, r3
 80118fa:	dc14      	bgt.n	8011926 <atan+0x76>
 80118fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011900:	429e      	cmp	r6, r3
 8011902:	dc0d      	bgt.n	8011920 <atan+0x70>
 8011904:	a396      	add	r3, pc, #600	; (adr r3, 8011b60 <atan+0x2b0>)
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	ee10 0a10 	vmov	r0, s0
 801190e:	4629      	mov	r1, r5
 8011910:	f7ee fcdc 	bl	80002cc <__adddf3>
 8011914:	2200      	movs	r2, #0
 8011916:	4baf      	ldr	r3, [pc, #700]	; (8011bd4 <atan+0x324>)
 8011918:	f7ef f91e 	bl	8000b58 <__aeabi_dcmpgt>
 801191c:	2800      	cmp	r0, #0
 801191e:	d1e6      	bne.n	80118ee <atan+0x3e>
 8011920:	f04f 3aff 	mov.w	sl, #4294967295
 8011924:	e02b      	b.n	801197e <atan+0xce>
 8011926:	f000 f963 	bl	8011bf0 <fabs>
 801192a:	4bab      	ldr	r3, [pc, #684]	; (8011bd8 <atan+0x328>)
 801192c:	429e      	cmp	r6, r3
 801192e:	ec55 4b10 	vmov	r4, r5, d0
 8011932:	f300 80bf 	bgt.w	8011ab4 <atan+0x204>
 8011936:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801193a:	429e      	cmp	r6, r3
 801193c:	f300 80a0 	bgt.w	8011a80 <atan+0x1d0>
 8011940:	ee10 2a10 	vmov	r2, s0
 8011944:	ee10 0a10 	vmov	r0, s0
 8011948:	462b      	mov	r3, r5
 801194a:	4629      	mov	r1, r5
 801194c:	f7ee fcbe 	bl	80002cc <__adddf3>
 8011950:	2200      	movs	r2, #0
 8011952:	4ba0      	ldr	r3, [pc, #640]	; (8011bd4 <atan+0x324>)
 8011954:	f7ee fcb8 	bl	80002c8 <__aeabi_dsub>
 8011958:	2200      	movs	r2, #0
 801195a:	4606      	mov	r6, r0
 801195c:	460f      	mov	r7, r1
 801195e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011962:	4620      	mov	r0, r4
 8011964:	4629      	mov	r1, r5
 8011966:	f7ee fcb1 	bl	80002cc <__adddf3>
 801196a:	4602      	mov	r2, r0
 801196c:	460b      	mov	r3, r1
 801196e:	4630      	mov	r0, r6
 8011970:	4639      	mov	r1, r7
 8011972:	f7ee ff8b 	bl	800088c <__aeabi_ddiv>
 8011976:	f04f 0a00 	mov.w	sl, #0
 801197a:	4604      	mov	r4, r0
 801197c:	460d      	mov	r5, r1
 801197e:	4622      	mov	r2, r4
 8011980:	462b      	mov	r3, r5
 8011982:	4620      	mov	r0, r4
 8011984:	4629      	mov	r1, r5
 8011986:	f7ee fe57 	bl	8000638 <__aeabi_dmul>
 801198a:	4602      	mov	r2, r0
 801198c:	460b      	mov	r3, r1
 801198e:	4680      	mov	r8, r0
 8011990:	4689      	mov	r9, r1
 8011992:	f7ee fe51 	bl	8000638 <__aeabi_dmul>
 8011996:	a374      	add	r3, pc, #464	; (adr r3, 8011b68 <atan+0x2b8>)
 8011998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199c:	4606      	mov	r6, r0
 801199e:	460f      	mov	r7, r1
 80119a0:	f7ee fe4a 	bl	8000638 <__aeabi_dmul>
 80119a4:	a372      	add	r3, pc, #456	; (adr r3, 8011b70 <atan+0x2c0>)
 80119a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119aa:	f7ee fc8f 	bl	80002cc <__adddf3>
 80119ae:	4632      	mov	r2, r6
 80119b0:	463b      	mov	r3, r7
 80119b2:	f7ee fe41 	bl	8000638 <__aeabi_dmul>
 80119b6:	a370      	add	r3, pc, #448	; (adr r3, 8011b78 <atan+0x2c8>)
 80119b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119bc:	f7ee fc86 	bl	80002cc <__adddf3>
 80119c0:	4632      	mov	r2, r6
 80119c2:	463b      	mov	r3, r7
 80119c4:	f7ee fe38 	bl	8000638 <__aeabi_dmul>
 80119c8:	a36d      	add	r3, pc, #436	; (adr r3, 8011b80 <atan+0x2d0>)
 80119ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ce:	f7ee fc7d 	bl	80002cc <__adddf3>
 80119d2:	4632      	mov	r2, r6
 80119d4:	463b      	mov	r3, r7
 80119d6:	f7ee fe2f 	bl	8000638 <__aeabi_dmul>
 80119da:	a36b      	add	r3, pc, #428	; (adr r3, 8011b88 <atan+0x2d8>)
 80119dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e0:	f7ee fc74 	bl	80002cc <__adddf3>
 80119e4:	4632      	mov	r2, r6
 80119e6:	463b      	mov	r3, r7
 80119e8:	f7ee fe26 	bl	8000638 <__aeabi_dmul>
 80119ec:	a368      	add	r3, pc, #416	; (adr r3, 8011b90 <atan+0x2e0>)
 80119ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f2:	f7ee fc6b 	bl	80002cc <__adddf3>
 80119f6:	4642      	mov	r2, r8
 80119f8:	464b      	mov	r3, r9
 80119fa:	f7ee fe1d 	bl	8000638 <__aeabi_dmul>
 80119fe:	a366      	add	r3, pc, #408	; (adr r3, 8011b98 <atan+0x2e8>)
 8011a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a04:	4680      	mov	r8, r0
 8011a06:	4689      	mov	r9, r1
 8011a08:	4630      	mov	r0, r6
 8011a0a:	4639      	mov	r1, r7
 8011a0c:	f7ee fe14 	bl	8000638 <__aeabi_dmul>
 8011a10:	a363      	add	r3, pc, #396	; (adr r3, 8011ba0 <atan+0x2f0>)
 8011a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a16:	f7ee fc57 	bl	80002c8 <__aeabi_dsub>
 8011a1a:	4632      	mov	r2, r6
 8011a1c:	463b      	mov	r3, r7
 8011a1e:	f7ee fe0b 	bl	8000638 <__aeabi_dmul>
 8011a22:	a361      	add	r3, pc, #388	; (adr r3, 8011ba8 <atan+0x2f8>)
 8011a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a28:	f7ee fc4e 	bl	80002c8 <__aeabi_dsub>
 8011a2c:	4632      	mov	r2, r6
 8011a2e:	463b      	mov	r3, r7
 8011a30:	f7ee fe02 	bl	8000638 <__aeabi_dmul>
 8011a34:	a35e      	add	r3, pc, #376	; (adr r3, 8011bb0 <atan+0x300>)
 8011a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a3a:	f7ee fc45 	bl	80002c8 <__aeabi_dsub>
 8011a3e:	4632      	mov	r2, r6
 8011a40:	463b      	mov	r3, r7
 8011a42:	f7ee fdf9 	bl	8000638 <__aeabi_dmul>
 8011a46:	a35c      	add	r3, pc, #368	; (adr r3, 8011bb8 <atan+0x308>)
 8011a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4c:	f7ee fc3c 	bl	80002c8 <__aeabi_dsub>
 8011a50:	4632      	mov	r2, r6
 8011a52:	463b      	mov	r3, r7
 8011a54:	f7ee fdf0 	bl	8000638 <__aeabi_dmul>
 8011a58:	4602      	mov	r2, r0
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	4649      	mov	r1, r9
 8011a60:	f7ee fc34 	bl	80002cc <__adddf3>
 8011a64:	4622      	mov	r2, r4
 8011a66:	462b      	mov	r3, r5
 8011a68:	f7ee fde6 	bl	8000638 <__aeabi_dmul>
 8011a6c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	d14b      	bne.n	8011b0e <atan+0x25e>
 8011a76:	4620      	mov	r0, r4
 8011a78:	4629      	mov	r1, r5
 8011a7a:	f7ee fc25 	bl	80002c8 <__aeabi_dsub>
 8011a7e:	e72c      	b.n	80118da <atan+0x2a>
 8011a80:	ee10 0a10 	vmov	r0, s0
 8011a84:	2200      	movs	r2, #0
 8011a86:	4b53      	ldr	r3, [pc, #332]	; (8011bd4 <atan+0x324>)
 8011a88:	4629      	mov	r1, r5
 8011a8a:	f7ee fc1d 	bl	80002c8 <__aeabi_dsub>
 8011a8e:	2200      	movs	r2, #0
 8011a90:	4606      	mov	r6, r0
 8011a92:	460f      	mov	r7, r1
 8011a94:	4b4f      	ldr	r3, [pc, #316]	; (8011bd4 <atan+0x324>)
 8011a96:	4620      	mov	r0, r4
 8011a98:	4629      	mov	r1, r5
 8011a9a:	f7ee fc17 	bl	80002cc <__adddf3>
 8011a9e:	4602      	mov	r2, r0
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	4630      	mov	r0, r6
 8011aa4:	4639      	mov	r1, r7
 8011aa6:	f7ee fef1 	bl	800088c <__aeabi_ddiv>
 8011aaa:	f04f 0a01 	mov.w	sl, #1
 8011aae:	4604      	mov	r4, r0
 8011ab0:	460d      	mov	r5, r1
 8011ab2:	e764      	b.n	801197e <atan+0xce>
 8011ab4:	4b49      	ldr	r3, [pc, #292]	; (8011bdc <atan+0x32c>)
 8011ab6:	429e      	cmp	r6, r3
 8011ab8:	dc1d      	bgt.n	8011af6 <atan+0x246>
 8011aba:	ee10 0a10 	vmov	r0, s0
 8011abe:	2200      	movs	r2, #0
 8011ac0:	4b47      	ldr	r3, [pc, #284]	; (8011be0 <atan+0x330>)
 8011ac2:	4629      	mov	r1, r5
 8011ac4:	f7ee fc00 	bl	80002c8 <__aeabi_dsub>
 8011ac8:	2200      	movs	r2, #0
 8011aca:	4606      	mov	r6, r0
 8011acc:	460f      	mov	r7, r1
 8011ace:	4b44      	ldr	r3, [pc, #272]	; (8011be0 <atan+0x330>)
 8011ad0:	4620      	mov	r0, r4
 8011ad2:	4629      	mov	r1, r5
 8011ad4:	f7ee fdb0 	bl	8000638 <__aeabi_dmul>
 8011ad8:	2200      	movs	r2, #0
 8011ada:	4b3e      	ldr	r3, [pc, #248]	; (8011bd4 <atan+0x324>)
 8011adc:	f7ee fbf6 	bl	80002cc <__adddf3>
 8011ae0:	4602      	mov	r2, r0
 8011ae2:	460b      	mov	r3, r1
 8011ae4:	4630      	mov	r0, r6
 8011ae6:	4639      	mov	r1, r7
 8011ae8:	f7ee fed0 	bl	800088c <__aeabi_ddiv>
 8011aec:	f04f 0a02 	mov.w	sl, #2
 8011af0:	4604      	mov	r4, r0
 8011af2:	460d      	mov	r5, r1
 8011af4:	e743      	b.n	801197e <atan+0xce>
 8011af6:	462b      	mov	r3, r5
 8011af8:	ee10 2a10 	vmov	r2, s0
 8011afc:	2000      	movs	r0, #0
 8011afe:	4939      	ldr	r1, [pc, #228]	; (8011be4 <atan+0x334>)
 8011b00:	f7ee fec4 	bl	800088c <__aeabi_ddiv>
 8011b04:	f04f 0a03 	mov.w	sl, #3
 8011b08:	4604      	mov	r4, r0
 8011b0a:	460d      	mov	r5, r1
 8011b0c:	e737      	b.n	801197e <atan+0xce>
 8011b0e:	4b36      	ldr	r3, [pc, #216]	; (8011be8 <atan+0x338>)
 8011b10:	4e36      	ldr	r6, [pc, #216]	; (8011bec <atan+0x33c>)
 8011b12:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011b16:	4456      	add	r6, sl
 8011b18:	449a      	add	sl, r3
 8011b1a:	e9da 2300 	ldrd	r2, r3, [sl]
 8011b1e:	f7ee fbd3 	bl	80002c8 <__aeabi_dsub>
 8011b22:	4622      	mov	r2, r4
 8011b24:	462b      	mov	r3, r5
 8011b26:	f7ee fbcf 	bl	80002c8 <__aeabi_dsub>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011b32:	f7ee fbc9 	bl	80002c8 <__aeabi_dsub>
 8011b36:	f1bb 0f00 	cmp.w	fp, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	460d      	mov	r5, r1
 8011b3e:	f6bf aed6 	bge.w	80118ee <atan+0x3e>
 8011b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011b46:	461d      	mov	r5, r3
 8011b48:	e6d1      	b.n	80118ee <atan+0x3e>
 8011b4a:	a51d      	add	r5, pc, #116	; (adr r5, 8011bc0 <atan+0x310>)
 8011b4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011b50:	e6cd      	b.n	80118ee <atan+0x3e>
 8011b52:	bf00      	nop
 8011b54:	f3af 8000 	nop.w
 8011b58:	54442d18 	.word	0x54442d18
 8011b5c:	3ff921fb 	.word	0x3ff921fb
 8011b60:	8800759c 	.word	0x8800759c
 8011b64:	7e37e43c 	.word	0x7e37e43c
 8011b68:	e322da11 	.word	0xe322da11
 8011b6c:	3f90ad3a 	.word	0x3f90ad3a
 8011b70:	24760deb 	.word	0x24760deb
 8011b74:	3fa97b4b 	.word	0x3fa97b4b
 8011b78:	a0d03d51 	.word	0xa0d03d51
 8011b7c:	3fb10d66 	.word	0x3fb10d66
 8011b80:	c54c206e 	.word	0xc54c206e
 8011b84:	3fb745cd 	.word	0x3fb745cd
 8011b88:	920083ff 	.word	0x920083ff
 8011b8c:	3fc24924 	.word	0x3fc24924
 8011b90:	5555550d 	.word	0x5555550d
 8011b94:	3fd55555 	.word	0x3fd55555
 8011b98:	2c6a6c2f 	.word	0x2c6a6c2f
 8011b9c:	bfa2b444 	.word	0xbfa2b444
 8011ba0:	52defd9a 	.word	0x52defd9a
 8011ba4:	3fadde2d 	.word	0x3fadde2d
 8011ba8:	af749a6d 	.word	0xaf749a6d
 8011bac:	3fb3b0f2 	.word	0x3fb3b0f2
 8011bb0:	fe231671 	.word	0xfe231671
 8011bb4:	3fbc71c6 	.word	0x3fbc71c6
 8011bb8:	9998ebc4 	.word	0x9998ebc4
 8011bbc:	3fc99999 	.word	0x3fc99999
 8011bc0:	54442d18 	.word	0x54442d18
 8011bc4:	bff921fb 	.word	0xbff921fb
 8011bc8:	440fffff 	.word	0x440fffff
 8011bcc:	7ff00000 	.word	0x7ff00000
 8011bd0:	3fdbffff 	.word	0x3fdbffff
 8011bd4:	3ff00000 	.word	0x3ff00000
 8011bd8:	3ff2ffff 	.word	0x3ff2ffff
 8011bdc:	40037fff 	.word	0x40037fff
 8011be0:	3ff80000 	.word	0x3ff80000
 8011be4:	bff00000 	.word	0xbff00000
 8011be8:	08012908 	.word	0x08012908
 8011bec:	080128e8 	.word	0x080128e8

08011bf0 <fabs>:
 8011bf0:	ec51 0b10 	vmov	r0, r1, d0
 8011bf4:	ee10 2a10 	vmov	r2, s0
 8011bf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011bfc:	ec43 2b10 	vmov	d0, r2, r3
 8011c00:	4770      	bx	lr
 8011c02:	0000      	movs	r0, r0
 8011c04:	0000      	movs	r0, r0
	...

08011c08 <floor>:
 8011c08:	ec51 0b10 	vmov	r0, r1, d0
 8011c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c10:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011c14:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011c18:	2e13      	cmp	r6, #19
 8011c1a:	460c      	mov	r4, r1
 8011c1c:	ee10 5a10 	vmov	r5, s0
 8011c20:	4680      	mov	r8, r0
 8011c22:	dc34      	bgt.n	8011c8e <floor+0x86>
 8011c24:	2e00      	cmp	r6, #0
 8011c26:	da16      	bge.n	8011c56 <floor+0x4e>
 8011c28:	a335      	add	r3, pc, #212	; (adr r3, 8011d00 <floor+0xf8>)
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	f7ee fb4d 	bl	80002cc <__adddf3>
 8011c32:	2200      	movs	r2, #0
 8011c34:	2300      	movs	r3, #0
 8011c36:	f7ee ff8f 	bl	8000b58 <__aeabi_dcmpgt>
 8011c3a:	b148      	cbz	r0, 8011c50 <floor+0x48>
 8011c3c:	2c00      	cmp	r4, #0
 8011c3e:	da59      	bge.n	8011cf4 <floor+0xec>
 8011c40:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011c44:	4a30      	ldr	r2, [pc, #192]	; (8011d08 <floor+0x100>)
 8011c46:	432b      	orrs	r3, r5
 8011c48:	2500      	movs	r5, #0
 8011c4a:	42ab      	cmp	r3, r5
 8011c4c:	bf18      	it	ne
 8011c4e:	4614      	movne	r4, r2
 8011c50:	4621      	mov	r1, r4
 8011c52:	4628      	mov	r0, r5
 8011c54:	e025      	b.n	8011ca2 <floor+0x9a>
 8011c56:	4f2d      	ldr	r7, [pc, #180]	; (8011d0c <floor+0x104>)
 8011c58:	4137      	asrs	r7, r6
 8011c5a:	ea01 0307 	and.w	r3, r1, r7
 8011c5e:	4303      	orrs	r3, r0
 8011c60:	d01f      	beq.n	8011ca2 <floor+0x9a>
 8011c62:	a327      	add	r3, pc, #156	; (adr r3, 8011d00 <floor+0xf8>)
 8011c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c68:	f7ee fb30 	bl	80002cc <__adddf3>
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	2300      	movs	r3, #0
 8011c70:	f7ee ff72 	bl	8000b58 <__aeabi_dcmpgt>
 8011c74:	2800      	cmp	r0, #0
 8011c76:	d0eb      	beq.n	8011c50 <floor+0x48>
 8011c78:	2c00      	cmp	r4, #0
 8011c7a:	bfbe      	ittt	lt
 8011c7c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011c80:	fa43 f606 	asrlt.w	r6, r3, r6
 8011c84:	19a4      	addlt	r4, r4, r6
 8011c86:	ea24 0407 	bic.w	r4, r4, r7
 8011c8a:	2500      	movs	r5, #0
 8011c8c:	e7e0      	b.n	8011c50 <floor+0x48>
 8011c8e:	2e33      	cmp	r6, #51	; 0x33
 8011c90:	dd0b      	ble.n	8011caa <floor+0xa2>
 8011c92:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011c96:	d104      	bne.n	8011ca2 <floor+0x9a>
 8011c98:	ee10 2a10 	vmov	r2, s0
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	f7ee fb15 	bl	80002cc <__adddf3>
 8011ca2:	ec41 0b10 	vmov	d0, r0, r1
 8011ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011caa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011cae:	f04f 33ff 	mov.w	r3, #4294967295
 8011cb2:	fa23 f707 	lsr.w	r7, r3, r7
 8011cb6:	4207      	tst	r7, r0
 8011cb8:	d0f3      	beq.n	8011ca2 <floor+0x9a>
 8011cba:	a311      	add	r3, pc, #68	; (adr r3, 8011d00 <floor+0xf8>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	f7ee fb04 	bl	80002cc <__adddf3>
 8011cc4:	2200      	movs	r2, #0
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	f7ee ff46 	bl	8000b58 <__aeabi_dcmpgt>
 8011ccc:	2800      	cmp	r0, #0
 8011cce:	d0bf      	beq.n	8011c50 <floor+0x48>
 8011cd0:	2c00      	cmp	r4, #0
 8011cd2:	da02      	bge.n	8011cda <floor+0xd2>
 8011cd4:	2e14      	cmp	r6, #20
 8011cd6:	d103      	bne.n	8011ce0 <floor+0xd8>
 8011cd8:	3401      	adds	r4, #1
 8011cda:	ea25 0507 	bic.w	r5, r5, r7
 8011cde:	e7b7      	b.n	8011c50 <floor+0x48>
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011ce6:	fa03 f606 	lsl.w	r6, r3, r6
 8011cea:	4435      	add	r5, r6
 8011cec:	4545      	cmp	r5, r8
 8011cee:	bf38      	it	cc
 8011cf0:	18e4      	addcc	r4, r4, r3
 8011cf2:	e7f2      	b.n	8011cda <floor+0xd2>
 8011cf4:	2500      	movs	r5, #0
 8011cf6:	462c      	mov	r4, r5
 8011cf8:	e7aa      	b.n	8011c50 <floor+0x48>
 8011cfa:	bf00      	nop
 8011cfc:	f3af 8000 	nop.w
 8011d00:	8800759c 	.word	0x8800759c
 8011d04:	7e37e43c 	.word	0x7e37e43c
 8011d08:	bff00000 	.word	0xbff00000
 8011d0c:	000fffff 	.word	0x000fffff

08011d10 <matherr>:
 8011d10:	2000      	movs	r0, #0
 8011d12:	4770      	bx	lr
 8011d14:	0000      	movs	r0, r0
	...

08011d18 <nan>:
 8011d18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011d20 <nan+0x8>
 8011d1c:	4770      	bx	lr
 8011d1e:	bf00      	nop
 8011d20:	00000000 	.word	0x00000000
 8011d24:	7ff80000 	.word	0x7ff80000

08011d28 <scalbn>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	ec55 4b10 	vmov	r4, r5, d0
 8011d2e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011d32:	4606      	mov	r6, r0
 8011d34:	462b      	mov	r3, r5
 8011d36:	b9aa      	cbnz	r2, 8011d64 <scalbn+0x3c>
 8011d38:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011d3c:	4323      	orrs	r3, r4
 8011d3e:	d03b      	beq.n	8011db8 <scalbn+0x90>
 8011d40:	4b31      	ldr	r3, [pc, #196]	; (8011e08 <scalbn+0xe0>)
 8011d42:	4629      	mov	r1, r5
 8011d44:	2200      	movs	r2, #0
 8011d46:	ee10 0a10 	vmov	r0, s0
 8011d4a:	f7ee fc75 	bl	8000638 <__aeabi_dmul>
 8011d4e:	4b2f      	ldr	r3, [pc, #188]	; (8011e0c <scalbn+0xe4>)
 8011d50:	429e      	cmp	r6, r3
 8011d52:	4604      	mov	r4, r0
 8011d54:	460d      	mov	r5, r1
 8011d56:	da12      	bge.n	8011d7e <scalbn+0x56>
 8011d58:	a327      	add	r3, pc, #156	; (adr r3, 8011df8 <scalbn+0xd0>)
 8011d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5e:	f7ee fc6b 	bl	8000638 <__aeabi_dmul>
 8011d62:	e009      	b.n	8011d78 <scalbn+0x50>
 8011d64:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011d68:	428a      	cmp	r2, r1
 8011d6a:	d10c      	bne.n	8011d86 <scalbn+0x5e>
 8011d6c:	ee10 2a10 	vmov	r2, s0
 8011d70:	4620      	mov	r0, r4
 8011d72:	4629      	mov	r1, r5
 8011d74:	f7ee faaa 	bl	80002cc <__adddf3>
 8011d78:	4604      	mov	r4, r0
 8011d7a:	460d      	mov	r5, r1
 8011d7c:	e01c      	b.n	8011db8 <scalbn+0x90>
 8011d7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011d82:	460b      	mov	r3, r1
 8011d84:	3a36      	subs	r2, #54	; 0x36
 8011d86:	4432      	add	r2, r6
 8011d88:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011d8c:	428a      	cmp	r2, r1
 8011d8e:	dd0b      	ble.n	8011da8 <scalbn+0x80>
 8011d90:	ec45 4b11 	vmov	d1, r4, r5
 8011d94:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011e00 <scalbn+0xd8>
 8011d98:	f7fc fb22 	bl	800e3e0 <copysign>
 8011d9c:	a318      	add	r3, pc, #96	; (adr r3, 8011e00 <scalbn+0xd8>)
 8011d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011da2:	ec51 0b10 	vmov	r0, r1, d0
 8011da6:	e7da      	b.n	8011d5e <scalbn+0x36>
 8011da8:	2a00      	cmp	r2, #0
 8011daa:	dd08      	ble.n	8011dbe <scalbn+0x96>
 8011dac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011db0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011db4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011db8:	ec45 4b10 	vmov	d0, r4, r5
 8011dbc:	bd70      	pop	{r4, r5, r6, pc}
 8011dbe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011dc2:	da0d      	bge.n	8011de0 <scalbn+0xb8>
 8011dc4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011dc8:	429e      	cmp	r6, r3
 8011dca:	ec45 4b11 	vmov	d1, r4, r5
 8011dce:	dce1      	bgt.n	8011d94 <scalbn+0x6c>
 8011dd0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011df8 <scalbn+0xd0>
 8011dd4:	f7fc fb04 	bl	800e3e0 <copysign>
 8011dd8:	a307      	add	r3, pc, #28	; (adr r3, 8011df8 <scalbn+0xd0>)
 8011dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dde:	e7e0      	b.n	8011da2 <scalbn+0x7a>
 8011de0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011de4:	3236      	adds	r2, #54	; 0x36
 8011de6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011dea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011dee:	4620      	mov	r0, r4
 8011df0:	4629      	mov	r1, r5
 8011df2:	2200      	movs	r2, #0
 8011df4:	4b06      	ldr	r3, [pc, #24]	; (8011e10 <scalbn+0xe8>)
 8011df6:	e7b2      	b.n	8011d5e <scalbn+0x36>
 8011df8:	c2f8f359 	.word	0xc2f8f359
 8011dfc:	01a56e1f 	.word	0x01a56e1f
 8011e00:	8800759c 	.word	0x8800759c
 8011e04:	7e37e43c 	.word	0x7e37e43c
 8011e08:	43500000 	.word	0x43500000
 8011e0c:	ffff3cb0 	.word	0xffff3cb0
 8011e10:	3c900000 	.word	0x3c900000

08011e14 <_init>:
 8011e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e16:	bf00      	nop
 8011e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e1a:	bc08      	pop	{r3}
 8011e1c:	469e      	mov	lr, r3
 8011e1e:	4770      	bx	lr

08011e20 <_fini>:
 8011e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e22:	bf00      	nop
 8011e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e26:	bc08      	pop	{r3}
 8011e28:	469e      	mov	lr, r3
 8011e2a:	4770      	bx	lr
