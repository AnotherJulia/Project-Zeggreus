
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011f0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000af8  080120e0  080120e0  000220e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012bd8  08012bd8  00030384  2**0
                  CONTENTS
  4 .ARM          00000008  08012bd8  08012bd8  00022bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012be0  08012be0  00030384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012be0  08012be0  00022be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012be4  08012be4  00022be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000384  20000000  08012be8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fac  20000384  08012f6c  00030384  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002330  08012f6c  00032330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030384  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026325  00000000  00000000  000303b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ea9  00000000  00000000  000566d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b30  00000000  00000000  0005b588  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001910  00000000  00000000  0005d0b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000286d5  00000000  00000000  0005e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019dac  00000000  00000000  0008709d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd625  00000000  00000000  000a0e49  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e46e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008634  00000000  00000000  0017e4ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000384 	.word	0x20000384
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080120c4 	.word	0x080120c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000388 	.word	0x20000388
 800020c:	080120c4 	.word	0x080120c4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f003 fd0e 	bl	8004a10 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f007 f9b9 	bl	800837e <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f007 fb4e 	bl	80086c2 <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f003 fcea 	bl	8004a10 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f003 fccb 	bl	8004a10 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f006 ff3c 	bl	8007f04 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f007 fb0e 	bl	80086c2 <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f003 fcaa 	bl	8004a10 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f002 ff30 	bl	8003f70 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f002 ff28 	bl	8003f70 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f002 ff20 	bl	8003f70 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	665a      	str	r2, [r3, #100]	; 0x64

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	669a      	str	r2, [r3, #104]	; 0x68



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f002 ff12 	bl	8003f70 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f002 ff0a 	bl	8003f70 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f002 ff02 	bl	8003f70 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f002 fefa 	bl	8003f70 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f002 fef2 	bl	8003f70 <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f002 feef 	bl	8003f70 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f003 fc15 	bl	8004a10 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f007 f8c0 	bl	800837e <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f007 fa54 	bl	80086c2 <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f003 fbf0 	bl	8004a10 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	835a      	strh	r2, [r3, #26]
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	839a      	strh	r2, [r3, #28]
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	83da      	strh	r2, [r3, #30]

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	659a      	str	r2, [r3, #88]	; 0x58
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	661a      	str	r2, [r3, #96]	; 0x60

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a08 	vstr	s15, [r3, #32]
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af04      	add	r7, sp, #16
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    uint8_t txBuf[2] = {0x00, 0x00};
 8001508:	2300      	movs	r3, #0
 800150a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800150e:	2300      	movs	r3, #0
 8001510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	b299      	uxth	r1, r3
 800151e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	220d      	movs	r2, #13
 8001532:	f003 fcb9 	bl	8004ea8 <HAL_I2C_Mem_Read>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001548:	4413      	add	r3, r2
 800154a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 800154e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001556:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800155a:	2b10      	cmp	r3, #16
 800155c:	d001      	beq.n	8001562 <SPL06_Init+0x8e>

        return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e139      	b.n	80017d6 <SPL06_Init+0x302>

    }
    HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f002 fd04 	bl	8003f70 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	b299      	uxth	r1, r3
 8001578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2313      	movs	r3, #19
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	2210      	movs	r2, #16
 800158c:	f003 fc8c 	bl	8004ea8 <HAL_I2C_Mem_Read>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf0c      	ite	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	2300      	movne	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015a2:	4413      	add	r3, r2
 80015a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7c7b      	ldrb	r3, [r7, #17]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <SPL06_Init+0x10c>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015d4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80015d8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80015dc:	b21b      	sxth	r3, r3
 80015de:	e002      	b.n	80015e6 <SPL06_Init+0x112>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 80015ea:	7c7b      	ldrb	r3, [r7, #17]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7cbb      	ldrb	r3, [r7, #18]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001608:	b29b      	uxth	r3, r3
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <SPL06_Init+0x150>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001618:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800161c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001620:	b21b      	sxth	r3, r3
 8001622:	e002      	b.n	800162a <SPL06_Init+0x156>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	031a      	lsls	r2, r3, #12
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4313      	orrs	r3, r2
 8001638:	7d7a      	ldrb	r2, [r7, #21]
 800163a:	0912      	lsrs	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4313      	orrs	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <SPL06_Init+0x18c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800165a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800165e:	e001      	b.n	8001664 <SPL06_Init+0x190>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 8001668:	7d7b      	ldrb	r3, [r7, #21]
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001670:	7dbb      	ldrb	r3, [r7, #22]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4313      	orrs	r3, r2
 8001676:	7dfa      	ldrb	r2, [r7, #23]
 8001678:	4313      	orrs	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <SPL06_Init+0x1c6>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001694:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001698:	e001      	b.n	800169e <SPL06_Init+0x1ca>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80016a2:	7e3b      	ldrb	r3, [r7, #24]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	7e7b      	ldrb	r3, [r7, #25]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80016b4:	7ebb      	ldrb	r3, [r7, #26]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7efb      	ldrb	r3, [r7, #27]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80016c6:	7f3b      	ldrb	r3, [r7, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7f7b      	ldrb	r3, [r7, #29]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80016d8:	7fbb      	ldrb	r3, [r7, #30]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001700:	2019      	movs	r0, #25
 8001702:	f002 fc35 	bl	8003f70 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0x33;
 8001706:	2333      	movs	r3, #51	; 0x33
 8001708:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	b299      	uxth	r1, r3
 8001716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2301      	movs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2206      	movs	r2, #6
 800172a:	f003 fac3 	bl	8004cb4 <HAL_I2C_Mem_Write>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001740:	4413      	add	r3, r2
 8001742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f002 fc12 	bl	8003f70 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 800174c:	23b3      	movs	r3, #179	; 0xb3
 800174e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	b299      	uxth	r1, r3
 800175c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2207      	movs	r2, #7
 8001770:	f003 faa0 	bl	8004cb4 <HAL_I2C_Mem_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001786:	4413      	add	r3, r2
 8001788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f002 fbef 	bl	8003f70 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2301      	movs	r3, #1
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2208      	movs	r2, #8
 80017b6:	f003 fa7d 	bl	8004cb4 <HAL_I2C_Mem_Write>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017cc:	4413      	add	r3, r2
 80017ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80017d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3740      	adds	r7, #64	; 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80017ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80017ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80017f2:	edc7 1a02 	vstr	s3, [r7, #8]
 80017f6:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <Quaternion_set+0x2a>
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <Quaternion_set+0x4c>)
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <Quaternion_set+0x50>)
 8001802:	211b      	movs	r1, #27
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <Quaternion_set+0x54>)
 8001806:	f00c f883 	bl	800d910 <__assert_func>
    output->w = w;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	60da      	str	r2, [r3, #12]
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	080120e0 	.word	0x080120e0
 8001830:	08012618 	.word	0x08012618
 8001834:	080120f0 	.word	0x080120f0

08001838 <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <Quaternion_setIdentity+0x1a>
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <Quaternion_setIdentity+0x38>)
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <Quaternion_setIdentity+0x3c>)
 800184a:	2124      	movs	r1, #36	; 0x24
 800184c:	480a      	ldr	r0, [pc, #40]	; (8001878 <Quaternion_setIdentity+0x40>)
 800184e:	f00c f85f 	bl	800d910 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	eddf 1a09 	vldr	s3, [pc, #36]	; 800187c <Quaternion_setIdentity+0x44>
 8001858:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800187c <Quaternion_setIdentity+0x44>
 800185c:	eddf 0a07 	vldr	s1, [pc, #28]	; 800187c <Quaternion_setIdentity+0x44>
 8001860:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001864:	f7ff ffbc 	bl	80017e0 <Quaternion_set>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	0801210c 	.word	0x0801210c
 8001874:	08012628 	.word	0x08012628
 8001878:	080120f0 	.word	0x080120f0
 800187c:	00000000 	.word	0x00000000

08001880 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	ed93 7a01 	vldr	s14, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 6a02 	vldr	s13, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ed93 6a03 	vldr	s12, [r3, #12]
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	eef0 1a46 	vmov.f32	s3, s12
 80018a8:	eeb0 1a66 	vmov.f32	s2, s13
 80018ac:	eef0 0a47 	vmov.f32	s1, s14
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	f7ff ff94 	bl	80017e0 <Quaternion_set>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <Quaternion_toEulerZYX+0x1c>
 80018d0:	4b87      	ldr	r3, [pc, #540]	; (8001af0 <Quaternion_toEulerZYX+0x230>)
 80018d2:	4a88      	ldr	r2, [pc, #544]	; (8001af4 <Quaternion_toEulerZYX+0x234>)
 80018d4:	2185      	movs	r1, #133	; 0x85
 80018d6:	4888      	ldr	r0, [pc, #544]	; (8001af8 <Quaternion_toEulerZYX+0x238>)
 80018d8:	f00c f81a 	bl	800d910 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001900:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001904:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	ed93 7a01 	vldr	s14, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edd3 7a01 	vldr	s15, [r3, #4]
 8001914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 6a02 	vldr	s13, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	edd3 7a02 	vldr	s15, [r3, #8]
 8001924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	f7fe fcc8 	bl	80002cc <__adddf3>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	496c      	ldr	r1, [pc, #432]	; (8001afc <Quaternion_toEulerZYX+0x23c>)
 800194a:	f7fe fcbd 	bl	80002c8 <__aeabi_dsub>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4618      	mov	r0, r3
 8001954:	4621      	mov	r1, r4
 8001956:	f7ff f967 	bl	8000c28 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 800195e:	69f8      	ldr	r0, [r7, #28]
 8001960:	f7fe fe12 	bl	8000588 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	69b8      	ldr	r0, [r7, #24]
 800196a:	f7fe fe0d 	bl	8000588 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	ec43 2b11 	vmov	d1, r2, r3
 8001976:	ec45 4b10 	vmov	d0, r4, r5
 800197a:	f00e fe3d 	bl	80105f8 <atan2>
 800197e:	ec54 3b10 	vmov	r3, r4, d0
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f94f 	bl	8000c28 <__aeabi_d2f>
 800198a:	4602      	mov	r2, r0
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edd3 7a02 	vldr	s15, [r3, #8]
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b8:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 80019bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c0:	eef0 7ae7 	vabs.f32	s15, s15
 80019c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	db15      	blt.n	80019fe <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7fe fdd8 	bl	8000588 <__aeabi_f2d>
 80019d8:	4603      	mov	r3, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	ec44 3b11 	vmov	d1, r3, r4
 80019e0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001ae8 <Quaternion_toEulerZYX+0x228>
 80019e4:	f00c fe56 	bl	800e694 <copysign>
 80019e8:	ec52 1b10 	vmov	r1, r2, d0
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	1d1c      	adds	r4, r3, #4
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	f7ff f918 	bl	8000c28 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	6023      	str	r3, [r4, #0]
 80019fc:	e012      	b.n	8001a24 <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7fe fdc2 	bl	8000588 <__aeabi_f2d>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	ec44 3b10 	vmov	d0, r3, r4
 8001a0c:	f00e fd9c 	bl	8010548 <asin>
 8001a10:	ec52 1b10 	vmov	r1, r2, d0
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	1d1c      	adds	r4, r3, #4
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	f7ff f904 	bl	8000c28 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a4c:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	ee17 0a90 	vmov	r0, s15
 8001a78:	f7fe fd86 	bl	8000588 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	f7fe fc24 	bl	80002cc <__adddf3>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	491a      	ldr	r1, [pc, #104]	; (8001afc <Quaternion_toEulerZYX+0x23c>)
 8001a92:	f7fe fc19 	bl	80002c8 <__aeabi_dsub>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	f7ff f8c3 	bl	8000c28 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 8001aa6:	6938      	ldr	r0, [r7, #16]
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7fe fd69 	bl	8000588 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b11 	vmov	d1, r2, r3
 8001abe:	ec45 4b10 	vmov	d0, r4, r5
 8001ac2:	f00e fd99 	bl	80105f8 <atan2>
 8001ac6:	ec52 1b10 	vmov	r1, r2, d0
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f103 0408 	add.w	r4, r3, #8
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	f7ff f8a8 	bl	8000c28 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	6023      	str	r3, [r4, #0]
}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	54442d18 	.word	0x54442d18
 8001aec:	3ff921fb 	.word	0x3ff921fb
 8001af0:	080120e0 	.word	0x080120e0
 8001af4:	08012640 	.word	0x08012640
 8001af8:	080120f0 	.word	0x080120f0
 8001afc:	3ff00000 	.word	0x3ff00000

08001b00 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <Quaternion_conjugate+0x1c>
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <Quaternion_conjugate+0x5c>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <Quaternion_conjugate+0x60>)
 8001b14:	21b7      	movs	r1, #183	; 0xb7
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <Quaternion_conjugate+0x64>)
 8001b18:	f00b fefa 	bl	800d910 <__assert_func>
    output->w = q->w;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b2a:	eef1 7a67 	vneg.f32	s15, s15
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3a:	eef1 7a67 	vneg.f32	s15, s15
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b4a:	eef1 7a67 	vneg.f32	s15, s15
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	080120e0 	.word	0x080120e0
 8001b60:	08012658 	.word	0x08012658
 8001b64:	080120f0 	.word	0x080120f0

08001b68 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <Quaternion_multiply+0x1e>
 8001b7a:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <Quaternion_multiply+0x174>)
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <Quaternion_multiply+0x178>)
 8001b7e:	21d2      	movs	r1, #210	; 0xd2
 8001b80:	4858      	ldr	r0, [pc, #352]	; (8001ce4 <Quaternion_multiply+0x17c>)
 8001b82:	f00b fec5 	bl	800d910 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	edd3 6a00 	vldr	s13, [r3]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	ed93 7a00 	vldr	s14, [r3]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	461c      	mov	r4, r3
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001cd4:	bf00      	nop
 8001cd6:	3724      	adds	r7, #36	; 0x24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	080120e0 	.word	0x080120e0
 8001ce0:	08012670 	.word	0x08012670
 8001ce4:	080120f0 	.word	0x080120f0

08001ce8 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b092      	sub	sp, #72	; 0x48
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <Quaternion_rotate+0x1e>
 8001cfa:	4bbc      	ldr	r3, [pc, #752]	; (8001fec <Quaternion_rotate+0x304>)
 8001cfc:	4abc      	ldr	r2, [pc, #752]	; (8001ff0 <Quaternion_rotate+0x308>)
 8001cfe:	21e6      	movs	r1, #230	; 0xe6
 8001d00:	48bc      	ldr	r0, [pc, #752]	; (8001ff4 <Quaternion_rotate+0x30c>)
 8001d02:	f00b fe05 	bl	800d910 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d52:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	ed93 7a00 	vldr	s14, [r3]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001de0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3308      	adds	r3, #8
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001df8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	edd3 6a00 	vldr	s13, [r3]
 8001e12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8001e1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e3a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3308      	adds	r3, #8
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	edd3 6a00 	vldr	s13, [r3]
 8001e54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8001e5c:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001e72:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8001e76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	edd3 6a00 	vldr	s13, [r3]
 8001e90:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8001eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8001ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	edd3 6a00 	vldr	s13, [r3]
 8001ed2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	edd3 6a00 	vldr	s13, [r3]
 8001ee6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8001ef2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3308      	adds	r3, #8
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8001f06:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	edd3 6a00 	vldr	s13, [r3]
 8001f12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8001f1e:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8001f22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f34:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	edd3 6a00 	vldr	s13, [r3]
 8001f54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8001f60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8001f72:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	edd3 6a00 	vldr	s13, [r3]
 8001f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3304      	adds	r3, #4
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	edd3 6a00 	vldr	s13, [r3]
 8001faa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8001fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	edd3 6a00 	vldr	s13, [r3]
 8001fbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8001fca:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	601a      	str	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3748      	adds	r7, #72	; 0x48
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	080120e0 	.word	0x080120e0
 8001ff0:	08012684 	.word	0x08012684
 8001ff4:	080120f0 	.word	0x080120f0

08001ff8 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	ed87 0a02 	vstr	s0, [r7, #8]
 8002004:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3304      	adds	r3, #4
 8002024:	ed93 7a00 	vldr	s14, [r3]
 8002028:	edd7 7a02 	vldr	s15, [r7, #8]
 800202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002038:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3308      	adds	r3, #8
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	edd7 7a02 	vldr	s15, [r7, #8]
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002054:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002058:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800205c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002064:	edd7 6a08 	vldr	s13, [r7, #32]
 8002068:	edd7 7a08 	vldr	s15, [r7, #32]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	edd7 6a07 	vldr	s13, [r7, #28]
 8002078:	edd7 7a07 	vldr	s15, [r7, #28]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS) {
 8002088:	69b8      	ldr	r0, [r7, #24]
 800208a:	f7fe fa7d 	bl	8000588 <__aeabi_f2d>
 800208e:	a336      	add	r3, pc, #216	; (adr r3, 8002168 <Quaternion_fromRate+0x170>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fd60 	bl	8000b58 <__aeabi_dcmpgt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05c      	beq.n	8002158 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 800209e:	69b8      	ldr	r0, [r7, #24]
 80020a0:	f7fe fa72 	bl	8000588 <__aeabi_f2d>
 80020a4:	4603      	mov	r3, r0
 80020a6:	460c      	mov	r4, r1
 80020a8:	ec44 3b10 	vmov	d0, r3, r4
 80020ac:	f00e faa6 	bl	80105fc <sqrt>
 80020b0:	ec54 3b10 	vmov	r3, r4, d0
 80020b4:	4618      	mov	r0, r3
 80020b6:	4621      	mov	r1, r4
 80020b8:	f7fe fdb6 	bl	8000c28 <__aeabi_d2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 80020c0:	69b8      	ldr	r0, [r7, #24]
 80020c2:	f7fe fa61 	bl	8000588 <__aeabi_f2d>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	ec44 3b10 	vmov	d0, r3, r4
 80020ce:	f00e f9f3 	bl	80104b8 <sin>
 80020d2:	ec56 5b10 	vmov	r5, r6, d0
 80020d6:	69b8      	ldr	r0, [r7, #24]
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	4603      	mov	r3, r0
 80020de:	460c      	mov	r4, r1
 80020e0:	461a      	mov	r2, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	4628      	mov	r0, r5
 80020e6:	4631      	mov	r1, r6
 80020e8:	f7fe fbd0 	bl	800088c <__aeabi_ddiv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	4618      	mov	r0, r3
 80020f2:	4621      	mov	r1, r4
 80020f4:	f7fe fd98 	bl	8000c28 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 80020fc:	69b8      	ldr	r0, [r7, #24]
 80020fe:	f7fe fa43 	bl	8000588 <__aeabi_f2d>
 8002102:	4603      	mov	r3, r0
 8002104:	460c      	mov	r4, r1
 8002106:	ec44 3b10 	vmov	d0, r3, r4
 800210a:	f00e f991 	bl	8010430 <cos>
 800210e:	ec54 3b10 	vmov	r3, r4, d0
 8002112:	4618      	mov	r0, r3
 8002114:	4621      	mov	r1, r4
 8002116:	f7fe fd87 	bl	8000c28 <__aeabi_d2f>
 800211a:	4602      	mov	r2, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002120:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002124:	edd7 7a05 	vldr	s15, [r7, #20]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002132:	ed97 7a08 	vldr	s14, [r7, #32]
 8002136:	edd7 7a05 	vldr	s15, [r7, #20]
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002144:	ed97 7a07 	vldr	s14, [r7, #28]
 8002148:	edd7 7a05 	vldr	s15, [r7, #20]
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002156:	e002      	b.n	800215e <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fb6d 	bl	8001838 <Quaternion_setIdentity>
}
 800215e:	bf00      	nop
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002166:	bf00      	nop
 8002168:	e2308c3a 	.word	0xe2308c3a
 800216c:	3e45798e 	.word	0x3e45798e

08002170 <SetStandbyRC>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

void SetStandbyRC() {
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af02      	add	r7, sp, #8
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	703b      	strb	r3, [r7, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	707b      	strb	r3, [r7, #1]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800217e:	2200      	movs	r2, #0
 8002180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002184:	480b      	ldr	r0, [pc, #44]	; (80021b4 <SetStandbyRC+0x44>)
 8002186:	f002 fc43 	bl	8004a10 <HAL_GPIO_WritePin>
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, 2,
 800218a:	1d3a      	adds	r2, r7, #4
 800218c:	4639      	mov	r1, r7
 800218e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2302      	movs	r3, #2
 8002196:	4808      	ldr	r0, [pc, #32]	; (80021b8 <SetStandbyRC+0x48>)
 8002198:	f006 f8f1 	bl	800837e <HAL_SPI_TransmitReceive>
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80021a0:	2201      	movs	r2, #1
 80021a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <SetStandbyRC+0x44>)
 80021a8:	f002 fc32 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40020000 	.word	0x40020000
 80021b8:	200004a8 	.word	0x200004a8

080021bc <SetRfFrequency2>:
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, 4,
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
}

void SetRfFrequency2() {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af02      	add	r7, sp, #8
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <SetRfFrequency2+0x44>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	607b      	str	r3, [r7, #4]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80021c8:	2200      	movs	r2, #0
 80021ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ce:	480d      	ldr	r0, [pc, #52]	; (8002204 <SetRfFrequency2+0x48>)
 80021d0:	f002 fc1e 	bl	8004a10 <HAL_GPIO_WritePin>
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, 4,
 80021d4:	f107 0208 	add.w	r2, r7, #8
 80021d8:	1d39      	adds	r1, r7, #4
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	2304      	movs	r3, #4
 80021e2:	4809      	ldr	r0, [pc, #36]	; (8002208 <SetRfFrequency2+0x4c>)
 80021e4:	f006 f8cb 	bl	800837e <HAL_SPI_TransmitReceive>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f2:	4804      	ldr	r0, [pc, #16]	; (8002204 <SetRfFrequency2+0x48>)
 80021f4:	f002 fc0c 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80021f8:	bf00      	nop
 80021fa:	3710      	adds	r7, #16
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	08012138 	.word	0x08012138
 8002204:	40020000 	.word	0x40020000
 8002208:	200004a8 	.word	0x200004a8

0800220c <setPacketLora>:

void setPacketLora() {
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af02      	add	r7, sp, #8
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <setPacketLora+0x44>)
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	803b      	strh	r3, [r7, #0]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002218:	2200      	movs	r2, #0
 800221a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <setPacketLora+0x48>)
 8002220:	f002 fbf6 	bl	8004a10 <HAL_GPIO_WritePin>
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, 2,
 8002224:	1d3a      	adds	r2, r7, #4
 8002226:	4639      	mov	r1, r7
 8002228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800222c:	9300      	str	r3, [sp, #0]
 800222e:	2302      	movs	r3, #2
 8002230:	4809      	ldr	r0, [pc, #36]	; (8002258 <setPacketLora+0x4c>)
 8002232:	f006 f8a4 	bl	800837e <HAL_SPI_TransmitReceive>
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800223a:	2201      	movs	r2, #1
 800223c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002240:	4804      	ldr	r0, [pc, #16]	; (8002254 <setPacketLora+0x48>)
 8002242:	f002 fbe5 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	0801213c 	.word	0x0801213c
 8002254:	40020000 	.word	0x40020000
 8002258:	200004a8 	.word	0x200004a8

0800225c <SetTxParams>:

void SetTxParams(uint8_t power, uint8_t rampTime) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af02      	add	r7, sp, #8
 8002262:	4603      	mov	r3, r0
 8002264:	460a      	mov	r2, r1
 8002266:	71fb      	strb	r3, [r7, #7]
 8002268:	4613      	mov	r3, r2
 800226a:	71bb      	strb	r3, [r7, #6]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime};
 800226c:	238e      	movs	r3, #142	; 0x8e
 800226e:	723b      	strb	r3, [r7, #8]
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	727b      	strb	r3, [r7, #9]
 8002274:	79bb      	ldrb	r3, [r7, #6]
 8002276:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002278:	2200      	movs	r2, #0
 800227a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800227e:	480d      	ldr	r0, [pc, #52]	; (80022b4 <SetTxParams+0x58>)
 8002280:	f002 fbc6 	bl	8004a10 <HAL_GPIO_WritePin>
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, sizeof(loraTxBuf),
 8002284:	f107 020c 	add.w	r2, r7, #12
 8002288:	f107 0108 	add.w	r1, r7, #8
 800228c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2303      	movs	r3, #3
 8002294:	4808      	ldr	r0, [pc, #32]	; (80022b8 <SetTxParams+0x5c>)
 8002296:	f006 f872 	bl	800837e <HAL_SPI_TransmitReceive>
 800229a:	4603      	mov	r3, r0
 800229c:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <SetTxParams+0x58>)
 80022a6:	f002 fbb3 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80022aa:	bf00      	nop
 80022ac:	3710      	adds	r7, #16
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40020000 	.word	0x40020000
 80022b8:	200004a8 	.word	0x200004a8

080022bc <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 80022cc:	238f      	movs	r3, #143	; 0x8f
 80022ce:	723b      	strb	r3, [r7, #8]
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	727b      	strb	r3, [r7, #9]
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	72bb      	strb	r3, [r7, #10]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80022d8:	2200      	movs	r2, #0
 80022da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022de:	480d      	ldr	r0, [pc, #52]	; (8002314 <SetBufferBaseAddresses+0x58>)
 80022e0:	f002 fb96 	bl	8004a10 <HAL_GPIO_WritePin>
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, sizeof(loraTxBuf),
 80022e4:	f107 020c 	add.w	r2, r7, #12
 80022e8:	f107 0108 	add.w	r1, r7, #8
 80022ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2303      	movs	r3, #3
 80022f4:	4808      	ldr	r0, [pc, #32]	; (8002318 <SetBufferBaseAddresses+0x5c>)
 80022f6:	f006 f842 	bl	800837e <HAL_SPI_TransmitReceive>
 80022fa:	4603      	mov	r3, r0
 80022fc:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80022fe:	2201      	movs	r2, #1
 8002300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002304:	4803      	ldr	r0, [pc, #12]	; (8002314 <SetBufferBaseAddresses+0x58>)
 8002306:	f002 fb83 	bl	8004a10 <HAL_GPIO_WritePin>
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40020000 	.word	0x40020000
 8002318:	200004a8 	.word	0x200004a8

0800231c <SetModulationParams>:

void SetModulationParams(uint8_t modParam1, uint8_t modParam2, uint8_t modParam3) {
 800231c:	b580      	push	{r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af02      	add	r7, sp, #8
 8002322:	4603      	mov	r3, r0
 8002324:	71fb      	strb	r3, [r7, #7]
 8002326:	460b      	mov	r3, r1
 8002328:	71bb      	strb	r3, [r7, #6]
 800232a:	4613      	mov	r3, r2
 800232c:	717b      	strb	r3, [r7, #5]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3};
 800232e:	238b      	movs	r3, #139	; 0x8b
 8002330:	733b      	strb	r3, [r7, #12]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	737b      	strb	r3, [r7, #13]
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	73bb      	strb	r3, [r7, #14]
 800233a:	797b      	ldrb	r3, [r7, #5]
 800233c:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002344:	480c      	ldr	r0, [pc, #48]	; (8002378 <SetModulationParams+0x5c>)
 8002346:	f002 fb63 	bl	8004a10 <HAL_GPIO_WritePin>
    uint8_t loraRet = HAL_SPI_TransmitReceive(&hspi3, loraTxBuf, loraRxBuf, sizeof(loraTxBuf),
 800234a:	f107 0210 	add.w	r2, r7, #16
 800234e:	f107 010c 	add.w	r1, r7, #12
 8002352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2304      	movs	r3, #4
 800235a:	4808      	ldr	r0, [pc, #32]	; (800237c <SetModulationParams+0x60>)
 800235c:	f006 f80f 	bl	800837e <HAL_SPI_TransmitReceive>
 8002360:	4603      	mov	r3, r0
 8002362:	75fb      	strb	r3, [r7, #23]
            1000);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8002364:	2201      	movs	r2, #1
 8002366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800236a:	4803      	ldr	r0, [pc, #12]	; (8002378 <SetModulationParams+0x5c>)
 800236c:	f002 fb50 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8002370:	bf00      	nop
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	40020000 	.word	0x40020000
 800237c:	200004a8 	.word	0x200004a8

08002380 <SetPacketParamsLora>:

void SetPacketParamsLora(uint8_t param1, uint8_t param2, uint8_t param3, uint8_t param4, uint8_t param5) {
 8002380:	b590      	push	{r4, r7, lr}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	4604      	mov	r4, r0
 8002388:	4608      	mov	r0, r1
 800238a:	4611      	mov	r1, r2
 800238c:	461a      	mov	r2, r3
 800238e:	4623      	mov	r3, r4
 8002390:	71fb      	strb	r3, [r7, #7]
 8002392:	4603      	mov	r3, r0
 8002394:	71bb      	strb	r3, [r7, #6]
 8002396:	460b      	mov	r3, r1
 8002398:	717b      	strb	r3, [r7, #5]
 800239a:	4613      	mov	r3, r2
 800239c:	713b      	strb	r3, [r7, #4]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5};
 800239e:	238c      	movs	r3, #140	; 0x8c
 80023a0:	723b      	strb	r3, [r7, #8]
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	727b      	strb	r3, [r7, #9]
 80023a6:	79bb      	ldrb	r3, [r7, #6]
 80023a8:	72bb      	strb	r3, [r7, #10]
 80023aa:	797b      	ldrb	r3, [r7, #5]
 80023ac:	72fb      	strb	r3, [r7, #11]
 80023ae:	793b      	ldrb	r3, [r7, #4]
 80023b0:	733b      	strb	r3, [r7, #12]
 80023b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023b6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80023b8:	2200      	movs	r2, #0
 80023ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023be:	480a      	ldr	r0, [pc, #40]	; (80023e8 <SetPacketParamsLora+0x68>)
 80023c0:	f002 fb26 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, loraTxBuf, sizeof(loraTxBuf), 1000);
 80023c4:	f107 0108 	add.w	r1, r7, #8
 80023c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023cc:	2206      	movs	r2, #6
 80023ce:	4807      	ldr	r0, [pc, #28]	; (80023ec <SetPacketParamsLora+0x6c>)
 80023d0:	f005 fd98 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80023d4:	2201      	movs	r2, #1
 80023d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023da:	4803      	ldr	r0, [pc, #12]	; (80023e8 <SetPacketParamsLora+0x68>)
 80023dc:	f002 fb18 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	40020000 	.word	0x40020000
 80023ec:	200004a8 	.word	0x200004a8

080023f0 <WriteBuffer>:

void WriteBuffer(uint8_t offset, uint8_t *data, uint8_t size) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71bb      	strb	r3, [r7, #6]
    uint8_t loraTxBuf[] = {0x1A, offset};
 8002400:	231a      	movs	r3, #26
 8002402:	733b      	strb	r3, [r7, #12]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002408:	2200      	movs	r2, #0
 800240a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800240e:	480e      	ldr	r0, [pc, #56]	; (8002448 <WriteBuffer+0x58>)
 8002410:	f002 fafe 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, loraTxBuf, sizeof(loraTxBuf), 1000);
 8002414:	f107 010c 	add.w	r1, r7, #12
 8002418:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800241c:	2202      	movs	r2, #2
 800241e:	480b      	ldr	r0, [pc, #44]	; (800244c <WriteBuffer+0x5c>)
 8002420:	f005 fd70 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi3, data, size, 1000);
 8002424:	79bb      	ldrb	r3, [r7, #6]
 8002426:	b29a      	uxth	r2, r3
 8002428:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242c:	6839      	ldr	r1, [r7, #0]
 800242e:	4807      	ldr	r0, [pc, #28]	; (800244c <WriteBuffer+0x5c>)
 8002430:	f005 fd68 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <WriteBuffer+0x58>)
 800243c:	f002 fae8 	bl	8004a10 <HAL_GPIO_WritePin>

}
 8002440:	bf00      	nop
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40020000 	.word	0x40020000
 800244c:	200004a8 	.word	0x200004a8

08002450 <ReadBuffer>:


void ReadBuffer(uint8_t offset, uint8_t size, uint8_t *data) {
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0
 8002456:	4603      	mov	r3, r0
 8002458:	603a      	str	r2, [r7, #0]
 800245a:	71fb      	strb	r3, [r7, #7]
 800245c:	460b      	mov	r3, r1
 800245e:	71bb      	strb	r3, [r7, #6]
    uint8_t loraTxBuf[] = { 0x1B, offset};
 8002460:	231b      	movs	r3, #27
 8002462:	733b      	strb	r3, [r7, #12]
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002468:	2200      	movs	r2, #0
 800246a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800246e:	480e      	ldr	r0, [pc, #56]	; (80024a8 <ReadBuffer+0x58>)
 8002470:	f002 face 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, loraTxBuf, sizeof(loraTxBuf), 1000);
 8002474:	f107 010c 	add.w	r1, r7, #12
 8002478:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800247c:	2202      	movs	r2, #2
 800247e:	480b      	ldr	r0, [pc, #44]	; (80024ac <ReadBuffer+0x5c>)
 8002480:	f005 fd40 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi3, data, size, 1000);
 8002484:	79bb      	ldrb	r3, [r7, #6]
 8002486:	b29a      	uxth	r2, r3
 8002488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800248c:	6839      	ldr	r1, [r7, #0]
 800248e:	4807      	ldr	r0, [pc, #28]	; (80024ac <ReadBuffer+0x5c>)
 8002490:	f005 fe6c 	bl	800816c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8002494:	2201      	movs	r2, #1
 8002496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800249a:	4803      	ldr	r0, [pc, #12]	; (80024a8 <ReadBuffer+0x58>)
 800249c:	f002 fab8 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40020000 	.word	0x40020000
 80024ac:	200004a8 	.word	0x200004a8

080024b0 <SetDioIrqParams>:

void SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask ) {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4604      	mov	r4, r0
 80024b8:	4608      	mov	r0, r1
 80024ba:	4611      	mov	r1, r2
 80024bc:	461a      	mov	r2, r3
 80024be:	4623      	mov	r3, r4
 80024c0:	80fb      	strh	r3, [r7, #6]
 80024c2:	4603      	mov	r3, r0
 80024c4:	80bb      	strh	r3, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	807b      	strh	r3, [r7, #2]
 80024ca:	4613      	mov	r3, r2
 80024cc:	803b      	strh	r3, [r7, #0]
    uint8_t buf[9];
    buf[0] = 0x8D;
 80024ce:	238d      	movs	r3, #141	; 0x8d
 80024d0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( irqMask & 0x00FF );
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80024e2:	88bb      	ldrh	r3, [r7, #4]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	b29b      	uxth	r3, r3
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	73fb      	strb	r3, [r7, #15]
    buf[4] = ( uint8_t )( dio1Mask & 0x00FF );
 80024ec:	88bb      	ldrh	r3, [r7, #4]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	743b      	strb	r3, [r7, #16]
    buf[5] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	747b      	strb	r3, [r7, #17]
    buf[6] = ( uint8_t )( dio2Mask & 0x00FF );
 80024fc:	887b      	ldrh	r3, [r7, #2]
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	74bb      	strb	r3, [r7, #18]
    buf[7] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8002502:	883b      	ldrh	r3, [r7, #0]
 8002504:	0a1b      	lsrs	r3, r3, #8
 8002506:	b29b      	uxth	r3, r3
 8002508:	b2db      	uxtb	r3, r3
 800250a:	74fb      	strb	r3, [r7, #19]
    buf[8] = ( uint8_t )( dio3Mask & 0x00FF );
 800250c:	883b      	ldrh	r3, [r7, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	753b      	strb	r3, [r7, #20]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002512:	2200      	movs	r2, #0
 8002514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002518:	480a      	ldr	r0, [pc, #40]	; (8002544 <SetDioIrqParams+0x94>)
 800251a:	f002 fa79 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, buf, sizeof(buf), 1000);
 800251e:	f107 010c 	add.w	r1, r7, #12
 8002522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002526:	2209      	movs	r2, #9
 8002528:	4807      	ldr	r0, [pc, #28]	; (8002548 <SetDioIrqParams+0x98>)
 800252a:	f005 fceb 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800252e:	2201      	movs	r2, #1
 8002530:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002534:	4803      	ldr	r0, [pc, #12]	; (8002544 <SetDioIrqParams+0x94>)
 8002536:	f002 fa6b 	bl	8004a10 <HAL_GPIO_WritePin>
}
 800253a:	bf00      	nop
 800253c:	371c      	adds	r7, #28
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	40020000 	.word	0x40020000
 8002548:	200004a8 	.word	0x200004a8

0800254c <ClrIrqStatus>:

void ClrIrqStatus(uint16_t irqMask) {
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[3];
    buf[0] = 0X97;
 8002556:	2397      	movs	r3, #151	; 0x97
 8002558:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( ( uint16_t )irqMask >> 8 ) & 0x00FF );
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	0a1b      	lsrs	r3, r3, #8
 800255e:	b29b      	uxth	r3, r3
 8002560:	b2db      	uxtb	r3, r3
 8002562:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( uint16_t )irqMask & 0x00FF );
 8002564:	88fb      	ldrh	r3, [r7, #6]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800256a:	2200      	movs	r2, #0
 800256c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002570:	480a      	ldr	r0, [pc, #40]	; (800259c <ClrIrqStatus+0x50>)
 8002572:	f002 fa4d 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, buf, sizeof(buf), 1000);
 8002576:	f107 010c 	add.w	r1, r7, #12
 800257a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800257e:	2203      	movs	r2, #3
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <ClrIrqStatus+0x54>)
 8002582:	f005 fcbf 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8002586:	2201      	movs	r2, #1
 8002588:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <ClrIrqStatus+0x50>)
 800258e:	f002 fa3f 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40020000 	.word	0x40020000
 80025a0:	200004a8 	.word	0x200004a8

080025a4 <SetTx>:

void SetTx(uint8_t periodBase, uint16_t periodBaseCount) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	460a      	mov	r2, r1
 80025ae:	71fb      	strb	r3, [r7, #7]
 80025b0:	4613      	mov	r3, r2
 80025b2:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[4];
    buf[0] = 0X83;
 80025b4:	2383      	movs	r3, #131	; 0x83
 80025b6:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 80025b8:	79fb      	ldrb	r3, [r7, #7]
 80025ba:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( ( uint16_t )periodBaseCount >> 8 ) & 0x00FF );
 80025bc:	88bb      	ldrh	r3, [r7, #4]
 80025be:	0a1b      	lsrs	r3, r3, #8
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( ( uint16_t )periodBaseCount & 0x00FF );
 80025c6:	88bb      	ldrh	r3, [r7, #4]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 80025cc:	2200      	movs	r2, #0
 80025ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025d2:	480a      	ldr	r0, [pc, #40]	; (80025fc <SetTx+0x58>)
 80025d4:	f002 fa1c 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, buf, sizeof(buf), 1000);
 80025d8:	f107 010c 	add.w	r1, r7, #12
 80025dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e0:	2204      	movs	r2, #4
 80025e2:	4807      	ldr	r0, [pc, #28]	; (8002600 <SetTx+0x5c>)
 80025e4:	f005 fc8e 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025ee:	4803      	ldr	r0, [pc, #12]	; (80025fc <SetTx+0x58>)
 80025f0:	f002 fa0e 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40020000 	.word	0x40020000
 8002600:	200004a8 	.word	0x200004a8

08002604 <SetRx>:

void SetRx(uint8_t periodBase, uint16_t periodBaseCount) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	460a      	mov	r2, r1
 800260e:	71fb      	strb	r3, [r7, #7]
 8002610:	4613      	mov	r3, r2
 8002612:	80bb      	strh	r3, [r7, #4]
    uint8_t buf[4];
    buf[0] = 0X82;
 8002614:	2382      	movs	r3, #130	; 0x82
 8002616:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( ( uint16_t )periodBaseCount >> 8 ) & 0x00FF );
 800261c:	88bb      	ldrh	r3, [r7, #4]
 800261e:	0a1b      	lsrs	r3, r3, #8
 8002620:	b29b      	uxth	r3, r3
 8002622:	b2db      	uxtb	r3, r3
 8002624:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( ( uint16_t )periodBaseCount & 0x00FF );
 8002626:	88bb      	ldrh	r3, [r7, #4]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800262c:	2200      	movs	r2, #0
 800262e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002632:	480a      	ldr	r0, [pc, #40]	; (800265c <SetRx+0x58>)
 8002634:	f002 f9ec 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, buf, sizeof(buf), 1000);
 8002638:	f107 010c 	add.w	r1, r7, #12
 800263c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002640:	2204      	movs	r2, #4
 8002642:	4807      	ldr	r0, [pc, #28]	; (8002660 <SetRx+0x5c>)
 8002644:	f005 fc5e 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 8002648:	2201      	movs	r2, #1
 800264a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800264e:	4803      	ldr	r0, [pc, #12]	; (800265c <SetRx+0x58>)
 8002650:	f002 f9de 	bl	8004a10 <HAL_GPIO_WritePin>
}
 8002654:	bf00      	nop
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40020000 	.word	0x40020000
 8002660:	200004a8 	.word	0x200004a8

08002664 <WriteRegisterByte>:

void GetRxBufferStatus() {

}

void WriteRegisterByte(uint16_t address, uint8_t data) {
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	460a      	mov	r2, r1
 800266e:	80fb      	strh	r3, [r7, #6]
 8002670:	4613      	mov	r3, r2
 8002672:	717b      	strb	r3, [r7, #5]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 8002674:	2318      	movs	r3, #24
 8002676:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = ( uint8_t )( ( ( uint16_t )address >> 8 ) & 0x00FF );
 8002678:	88fb      	ldrh	r3, [r7, #6]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	b29b      	uxth	r3, r3
 800267e:	b2db      	uxtb	r3, r3
 8002680:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = ( uint8_t )( ( uint16_t )address & 0x00FF );
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 8002688:	797b      	ldrb	r3, [r7, #5]
 800268a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800268c:	2200      	movs	r2, #0
 800268e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002692:	480a      	ldr	r0, [pc, #40]	; (80026bc <WriteRegisterByte+0x58>)
 8002694:	f002 f9bc 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, loraTxBuf, sizeof(loraTxBuf), 1000);
 8002698:	f107 010c 	add.w	r1, r7, #12
 800269c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026a0:	2204      	movs	r2, #4
 80026a2:	4807      	ldr	r0, [pc, #28]	; (80026c0 <WriteRegisterByte+0x5c>)
 80026a4:	f005 fc2e 	bl	8007f04 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 80026a8:	2201      	movs	r2, #1
 80026aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026ae:	4803      	ldr	r0, [pc, #12]	; (80026bc <WriteRegisterByte+0x58>)
 80026b0:	f002 f9ae 	bl	8004a10 <HAL_GPIO_WritePin>
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40020000 	.word	0x40020000
 80026c0:	200004a8 	.word	0x200004a8

080026c4 <loraTesting>:



void loraTesting(uint8_t isTx) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08e      	sub	sp, #56	; 0x38
 80026c8:	af02      	add	r7, sp, #8
 80026ca:	4603      	mov	r3, r0
 80026cc:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 80026ce:	2200      	movs	r2, #0
 80026d0:	2140      	movs	r1, #64	; 0x40
 80026d2:	486e      	ldr	r0, [pc, #440]	; (800288c <loraTesting+0x1c8>)
 80026d4:	f002 f99c 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80026d8:	2002      	movs	r0, #2
 80026da:	f001 fc49 	bl	8003f70 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 80026de:	2201      	movs	r2, #1
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	486a      	ldr	r0, [pc, #424]	; (800288c <loraTesting+0x1c8>)
 80026e4:	f002 f994 	bl	8004a10 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 80026e8:	2002      	movs	r0, #2
 80026ea:	f001 fc41 	bl	8003f70 <HAL_Delay>

    SetStandbyRC();
 80026ee:	f7ff fd3f 	bl	8002170 <SetStandbyRC>
    HAL_Delay(3);
 80026f2:	2003      	movs	r0, #3
 80026f4:	f001 fc3c 	bl	8003f70 <HAL_Delay>
    setPacketLora();
 80026f8:	f7ff fd88 	bl	800220c <setPacketLora>
    HAL_Delay(2);
 80026fc:	2002      	movs	r0, #2
 80026fe:	f001 fc37 	bl	8003f70 <HAL_Delay>
    SetRfFrequency2();
 8002702:	f7ff fd5b 	bl	80021bc <SetRfFrequency2>
    HAL_Delay(2);
 8002706:	2002      	movs	r0, #2
 8002708:	f001 fc32 	bl	8003f70 <HAL_Delay>

    SetBufferBaseAddresses(0,0); // 127
 800270c:	2100      	movs	r1, #0
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff fdd4 	bl	80022bc <SetBufferBaseAddresses>
    HAL_Delay(1);
 8002714:	2001      	movs	r0, #1
 8002716:	f001 fc2b 	bl	8003f70 <HAL_Delay>
    SetModulationParams(0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5
 800271a:	2201      	movs	r2, #1
 800271c:	210a      	movs	r1, #10
 800271e:	2090      	movs	r0, #144	; 0x90
 8002720:	f7ff fdfc 	bl	800231c <SetModulationParams>
    HAL_Delay(1);
 8002724:	2001      	movs	r0, #1
 8002726:	f001 fc23 	bl	8003f70 <HAL_Delay>

    WriteRegisterByte( 0x925, 0x32 ); // must be used for SF9-12. Different for 5-8 (page 112)
 800272a:	2132      	movs	r1, #50	; 0x32
 800272c:	f640 1025 	movw	r0, #2341	; 0x925
 8002730:	f7ff ff98 	bl	8002664 <WriteRegisterByte>

    HAL_Delay(1);
 8002734:	2001      	movs	r0, #1
 8002736:	f001 fc1b 	bl	8003f70 <HAL_Delay>
    SetPacketParamsLora(12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 800273a:	2340      	movs	r3, #64	; 0x40
 800273c:	9300      	str	r3, [sp, #0]
 800273e:	2320      	movs	r3, #32
 8002740:	2220      	movs	r2, #32
 8002742:	2180      	movs	r1, #128	; 0x80
 8002744:	200c      	movs	r0, #12
 8002746:	f7ff fe1b 	bl	8002380 <SetPacketParamsLora>
    HAL_Delay(1);
 800274a:	2001      	movs	r0, #1
 800274c:	f001 fc10 	bl	8003f70 <HAL_Delay>
    // testing: set to -12 dBm

    if (isTx) {
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d057      	beq.n	8002806 <loraTesting+0x142>
        //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
        //SetTxParams(0x00, 0xE0); // lowest power -18dBm
        SetTxParams(31, 0xE0); // Highest power. 12.5 dBm
 8002756:	21e0      	movs	r1, #224	; 0xe0
 8002758:	201f      	movs	r0, #31
 800275a:	f7ff fd7f 	bl	800225c <SetTxParams>
        HAL_Delay(3);
 800275e:	2003      	movs	r0, #3
 8002760:	f001 fc06 	bl	8003f70 <HAL_Delay>

        uint8_t data[] = {0,0,0,0};
 8002764:	2300      	movs	r3, #0
 8002766:	62bb      	str	r3, [r7, #40]	; 0x28

        WriteBuffer(0, data, sizeof(data));
 8002768:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276c:	2204      	movs	r2, #4
 800276e:	4619      	mov	r1, r3
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff fe3d 	bl	80023f0 <WriteBuffer>
        HAL_Delay(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f001 fbfa 	bl	8003f70 <HAL_Delay>

        SetDioIrqParams(1,1,0,0); // txdone on gpio1
 800277c:	2300      	movs	r3, #0
 800277e:	2200      	movs	r2, #0
 8002780:	2101      	movs	r1, #1
 8002782:	2001      	movs	r0, #1
 8002784:	f7ff fe94 	bl	80024b0 <SetDioIrqParams>

        //SetTxContinuousWave();
        HAL_Delay(3);
 8002788:	2003      	movs	r0, #3
 800278a:	f001 fbf1 	bl	8003f70 <HAL_Delay>

        uint8_t ledon = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

        while (1) {
            ledon = !ledon;
 8002794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            //data[1] = (rand()%5) * 30;
            //data[2] = (rand()%5) * 30;
            //data[3] = (rand()%5) * 30;
            data[2] = ledon * 100;
 80027a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027aa:	461a      	mov	r2, r3
 80027ac:	0092      	lsls	r2, r2, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	0091      	lsls	r1, r2, #2
 80027b4:	461a      	mov	r2, r3
 80027b6:	460b      	mov	r3, r1
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            changeLed(data[1], data[2], data[3]);
 80027c2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80027c6:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80027ca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fdb6 	bl	8003340 <changeLed>

            WriteBuffer(0, data, sizeof(data));
 80027d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027d8:	2204      	movs	r2, #4
 80027da:	4619      	mov	r1, r3
 80027dc:	2000      	movs	r0, #0
 80027de:	f7ff fe07 	bl	80023f0 <WriteBuffer>
            HAL_Delay(1);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f001 fbc4 	bl	8003f70 <HAL_Delay>
            ClrIrqStatus(1); // clear txdone irq
 80027e8:	2001      	movs	r0, #1
 80027ea:	f7ff feaf 	bl	800254c <ClrIrqStatus>
            HAL_Delay(1);
 80027ee:	2001      	movs	r0, #1
 80027f0:	f001 fbbe 	bl	8003f70 <HAL_Delay>
            SetTx(0x02, 50); // time-out of 1ms * 50 = 50ms
 80027f4:	2132      	movs	r1, #50	; 0x32
 80027f6:	2002      	movs	r0, #2
 80027f8:	f7ff fed4 	bl	80025a4 <SetTx>
            //SetRfFrequency2();
            //HAL_Delay(5000);
            //SetRfFrequency();
            //changeLed(0, 100, 0);
            HAL_Delay(500);
 80027fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002800:	f001 fbb6 	bl	8003f70 <HAL_Delay>
            ledon = !ledon;
 8002804:	e7c6      	b.n	8002794 <loraTesting+0xd0>
        }
    }
    else {
        // rx mode
        SetDioIrqParams(1<<1, 1<<1, 0, 0); //rxdone on gpio1
 8002806:	2300      	movs	r3, #0
 8002808:	2200      	movs	r2, #0
 800280a:	2102      	movs	r1, #2
 800280c:	2002      	movs	r0, #2
 800280e:	f7ff fe4f 	bl	80024b0 <SetDioIrqParams>
        HAL_Delay(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f001 fbac 	bl	8003f70 <HAL_Delay>


        uint8_t data[32];
        data[0] = 60;
 8002818:	233c      	movs	r3, #60	; 0x3c
 800281a:	723b      	strb	r3, [r7, #8]
        data[1] = 60;
 800281c:	233c      	movs	r3, #60	; 0x3c
 800281e:	727b      	strb	r3, [r7, #9]
        data[2] = 60;
 8002820:	233c      	movs	r3, #60	; 0x3c
 8002822:	72bb      	strb	r3, [r7, #10]
        uint8_t rxStartBufferPointer = 1;
 8002824:	2301      	movs	r3, #1
 8002826:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

        changeLed(0, 100, 0);
 800282a:	2200      	movs	r2, #0
 800282c:	2164      	movs	r1, #100	; 0x64
 800282e:	2000      	movs	r0, #0
 8002830:	f000 fd86 	bl	8003340 <changeLed>
        uint8_t counter = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

        while (1) {

            //SetRx(0x00, 0xffff); // continous rx
            SetRx(0x00, 0); // No timeout
 800283a:	2100      	movs	r1, #0
 800283c:	2000      	movs	r0, #0
 800283e:	f7ff fee1 	bl	8002604 <SetRx>
            //SetRx(0x02, 200); // 200 ms timeout
            HAL_Delay(1);
 8002842:	2001      	movs	r0, #1
 8002844:	f001 fb94 	bl	8003f70 <HAL_Delay>
            // wait for reception:
            while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {}
 8002848:	bf00      	nop
 800284a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800284e:	4810      	ldr	r0, [pc, #64]	; (8002890 <loraTesting+0x1cc>)
 8002850:	f002 f8c6 	bl	80049e0 <HAL_GPIO_ReadPin>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f7      	beq.n	800284a <loraTesting+0x186>

            //GetPacketStatus(); // TODO
            ClrIrqStatus(1<<1); // clear rxdone Irq
 800285a:	2002      	movs	r0, #2
 800285c:	f7ff fe76 	bl	800254c <ClrIrqStatus>
            HAL_Delay(1);
 8002860:	2001      	movs	r0, #1
 8002862:	f001 fb85 	bl	8003f70 <HAL_Delay>
            //GetRxBufferStatus(); // TODO
            ReadBuffer(rxStartBufferPointer, 32, data);
 8002866:	f107 0208 	add.w	r2, r7, #8
 800286a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800286e:	2120      	movs	r1, #32
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fded 	bl	8002450 <ReadBuffer>
            changeLed(data[1], data[2], data[3]);
 8002876:	7a7b      	ldrb	r3, [r7, #9]
 8002878:	7ab9      	ldrb	r1, [r7, #10]
 800287a:	7afa      	ldrb	r2, [r7, #11]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd5f 	bl	8003340 <changeLed>

            HAL_Delay(10);
 8002882:	200a      	movs	r0, #10
 8002884:	f001 fb74 	bl	8003f70 <HAL_Delay>
            SetRx(0x00, 0); // No timeout
 8002888:	e7d7      	b.n	800283a <loraTesting+0x176>
 800288a:	bf00      	nop
 800288c:	40020400 	.word	0x40020400
 8002890:	40020800 	.word	0x40020800

08002894 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 8002898:	2214      	movs	r2, #20
 800289a:	2122      	movs	r1, #34	; 0x22
 800289c:	2064      	movs	r0, #100	; 0x64
 800289e:	f000 fd4f 	bl	8003340 <changeLed>

    changeLed(255, 0, 0);
 80028a2:	2200      	movs	r2, #0
 80028a4:	2100      	movs	r1, #0
 80028a6:	20ff      	movs	r0, #255	; 0xff
 80028a8:	f000 fd4a 	bl	8003340 <changeLed>
    playtone(1046, 100, 10);
 80028ac:	220a      	movs	r2, #10
 80028ae:	2164      	movs	r1, #100	; 0x64
 80028b0:	f240 4016 	movw	r0, #1046	; 0x416
 80028b4:	f000 fcc8 	bl	8003248 <playtone>
    HAL_Delay(100);
 80028b8:	2064      	movs	r0, #100	; 0x64
 80028ba:	f001 fb59 	bl	8003f70 <HAL_Delay>
    changeLed(0, 255, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	21ff      	movs	r1, #255	; 0xff
 80028c2:	2000      	movs	r0, #0
 80028c4:	f000 fd3c 	bl	8003340 <changeLed>
    playtone(1319, 100, 10);
 80028c8:	220a      	movs	r2, #10
 80028ca:	2164      	movs	r1, #100	; 0x64
 80028cc:	f240 5027 	movw	r0, #1319	; 0x527
 80028d0:	f000 fcba 	bl	8003248 <playtone>
    return;
 80028d4:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028dc:	b0fc      	sub	sp, #496	; 0x1f0
 80028de:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028e0:	f001 fad4 	bl	8003e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028e4:	f000 f920 	bl	8002b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028e8:	f000 fbdc 	bl	80030a4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80028ec:	f000 fb40 	bl	8002f70 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80028f0:	f00a fa9a 	bl	800ce28 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80028f4:	f000 fa6c 	bl	8002dd0 <MX_SPI2_Init>
  MX_SPI3_Init();
 80028f8:	f000 faa0 	bl	8002e3c <MX_SPI3_Init>
  MX_TIM2_Init();
 80028fc:	f000 fad4 	bl	8002ea8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8002900:	f000 fa30 	bl	8002d64 <MX_SPI1_Init>
  MX_FATFS_Init();
 8002904:	f008 f8ba 	bl	800aa7c <MX_FATFS_Init>
  MX_I2C3_Init();
 8002908:	f000 f9fe 	bl	8002d08 <MX_I2C3_Init>
  MX_ADC1_Init();
 800290c:	f000 f9a8 	bl	8002c60 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002910:	210c      	movs	r1, #12
 8002912:	487d      	ldr	r0, [pc, #500]	; (8002b08 <main+0x230>)
 8002914:	f006 f84a 	bl	80089ac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002918:	2104      	movs	r1, #4
 800291a:	487b      	ldr	r0, [pc, #492]	; (8002b08 <main+0x230>)
 800291c:	f006 f846 	bl	80089ac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002920:	2108      	movs	r1, #8
 8002922:	4879      	ldr	r0, [pc, #484]	; (8002b08 <main+0x230>)
 8002924:	f006 f842 	bl	80089ac <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002928:	2100      	movs	r1, #0
 800292a:	4877      	ldr	r0, [pc, #476]	; (8002b08 <main+0x230>)
 800292c:	f006 f83e 	bl	80089ac <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8002930:	210c      	movs	r1, #12
 8002932:	4876      	ldr	r0, [pc, #472]	; (8002b0c <main+0x234>)
 8002934:	f006 f83a 	bl	80089ac <HAL_TIM_PWM_Start>

    startupMusic();
 8002938:	f7ff ffac 	bl	8002894 <startupMusic>

    changeLed(90, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	205a      	movs	r0, #90	; 0x5a
 8002942:	f000 fcfd 	bl	8003340 <changeLed>

    htim3.Instance->CCR2 = 0;
 8002946:	4b70      	ldr	r3, [pc, #448]	; (8002b08 <main+0x230>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2200      	movs	r2, #0
 800294c:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800294e:	4b6e      	ldr	r3, [pc, #440]	; (8002b08 <main+0x230>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	22ff      	movs	r2, #255	; 0xff
 8002954:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8002956:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800295a:	f001 fb09 	bl	8003f70 <HAL_Delay>


    //BWtest();
    uint8_t is_tx = 0;
 800295e:	2300      	movs	r3, #0
 8002960:	f887 31cf 	strb.w	r3, [r7, #463]	; 0x1cf
    loraTesting(is_tx);
 8002964:	f897 31cf 	ldrb.w	r3, [r7, #463]	; 0x1cf
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff feab 	bl	80026c4 <loraTesting>
    //loraOrientation(is_tx);

    // LSM6dso setup
    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);
 800296e:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 8002972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002976:	4a66      	ldr	r2, [pc, #408]	; (8002b10 <main+0x238>)
 8002978:	4966      	ldr	r1, [pc, #408]	; (8002b14 <main+0x23c>)
 800297a:	f7fe fba5 	bl	80010c8 <LSM_init>
 800297e:	4603      	mov	r3, r0
 8002980:	f887 31ce 	strb.w	r3, [r7, #462]	; 0x1ce

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 8002984:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002988:	2277      	movs	r2, #119	; 0x77
 800298a:	4963      	ldr	r1, [pc, #396]	; (8002b18 <main+0x240>)
 800298c:	4618      	mov	r0, r3
 800298e:	f7fe fda1 	bl	80014d4 <SPL06_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 31cd 	strb.w	r3, [r7, #461]	; 0x1cd

    if (barostatus != 5) {
 8002998:	f897 31cd 	ldrb.w	r3, [r7, #461]	; 0x1cd
 800299c:	2b05      	cmp	r3, #5
 800299e:	d010      	beq.n	80029c2 <main+0xea>
        while (1) {

            HAL_Delay(100);
 80029a0:	2064      	movs	r0, #100	; 0x64
 80029a2:	f001 fae5 	bl	8003f70 <HAL_Delay>
            changeLed(100, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2064      	movs	r0, #100	; 0x64
 80029ac:	f000 fcc8 	bl	8003340 <changeLed>
            HAL_Delay(100);
 80029b0:	2064      	movs	r0, #100	; 0x64
 80029b2:	f001 fadd 	bl	8003f70 <HAL_Delay>
            changeLed(0, 0, 0);
 80029b6:	2200      	movs	r2, #0
 80029b8:	2100      	movs	r1, #0
 80029ba:	2000      	movs	r0, #0
 80029bc:	f000 fcc0 	bl	8003340 <changeLed>
            HAL_Delay(100);
 80029c0:	e7ee      	b.n	80029a0 <main+0xc8>
        }
    }

    //SDTesting();

    float yrot = 0;
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    uint32_t lasttime = HAL_GetTick();
 80029ca:	f001 fac5 	bl	8003f58 <HAL_GetTick>
 80029ce:	f8c7 01d4 	str.w	r0, [r7, #468]	; 0x1d4
    uint32_t nowtime = HAL_GetTick();
 80029d2:	f001 fac1 	bl	8003f58 <HAL_GetTick>
 80029d6:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
    float dt = 0;
 80029da:	f04f 0300 	mov.w	r3, #0
 80029de:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    uint16_t rawadc;

    Orientation ori;
    orientation_init(&ori);
 80029e2:	463b      	mov	r3, r7
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fd80 	bl	80034ea <orientation_init>
    uint32_t counter = 0;
 80029ea:	2300      	movs	r3, #0
 80029ec:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //SPL06_Read(&baro);
        LSM_pollsensors(&imu);
 80029f0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7fe fbe1 	bl	80011bc <LSM_pollsensors>
        //sprintf(printBuffer, "gx: %f, gy: %f, gz: %f\r\n", imu.gyroRPS[0], imu.gyroRPS[1], imu.gyroRPS[2]);
        //sprintf(printBuffer, "y:%f,o:%f,g:%f,V:%d\r\n", yrot, imu.gyroDPSOffset[1],
        //        imu.gyroDPS[1], rawadc);
        //sprintf(printBuffer, "T:%f\r\n", (float) (25 + (((rawadc - 943) * 3.3 / 4096.0)) / 0.0025));

        changeLed(0, 0, 100);
 80029fa:	2264      	movs	r2, #100	; 0x64
 80029fc:	2100      	movs	r1, #0
 80029fe:	2000      	movs	r0, #0
 8002a00:	f000 fc9e 	bl	8003340 <changeLed>
        nowtime = HAL_GetTick();
 8002a04:	f001 faa8 	bl	8003f58 <HAL_GetTick>
 8002a08:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
        dt = (nowtime - lasttime)/ 1000.0;
 8002a0c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8002a10:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fd94 	bl	8000544 <__aeabi_ui2d>
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b3e      	ldr	r3, [pc, #248]	; (8002b1c <main+0x244>)
 8002a22:	f7fd ff33 	bl	800088c <__aeabi_ddiv>
 8002a26:	4603      	mov	r3, r0
 8002a28:	460c      	mov	r4, r1
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4621      	mov	r1, r4
 8002a2e:	f7fe f8fb 	bl	8000c28 <__aeabi_d2f>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
        lasttime = nowtime;
 8002a38:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002a3c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

        orientation_setGyro(&ori, imu.gyroRPS);
 8002a40:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a44:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002a48:	463b      	mov	r3, r7
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fd7a 	bl	8003546 <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8002a52:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a56:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002a5a:	463b      	mov	r3, r7
 8002a5c:	4611      	mov	r1, r2
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 fd88 	bl	8003574 <orientation_setAcc>
        orientation_update(&ori, dt);
 8002a64:	463b      	mov	r3, r7
 8002a66:	ed97 0a70 	vldr	s0, [r7, #448]	; 0x1c0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f000 fd9c 	bl	80035a8 <orientation_update>

        //sprintf(printBuffer, "z:%f,y:%f,x:%f\r\n", ori.eulerZYX[0], ori.eulerZYX[1], ori.eulerZYX[2]);
        if (counter % 30 == 0) {
 8002a70:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <main+0x248>)
 8002a76:	fba3 2301 	umull	r2, r3, r3, r1
 8002a7a:	091a      	lsrs	r2, r3, #4
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	011b      	lsls	r3, r3, #4
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	1aca      	subs	r2, r1, r3
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	d135      	bne.n	8002af6 <main+0x21e>
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.orientationQuat.w,ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
 8002a8a:	463b      	mov	r3, r7
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fd7a 	bl	8000588 <__aeabi_f2d>
 8002a94:	4682      	mov	sl, r0
 8002a96:	468b      	mov	fp, r1
 8002a98:	463b      	mov	r3, r7
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd73 	bl	8000588 <__aeabi_f2d>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	463b      	mov	r3, r7
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd6c 	bl	8000588 <__aeabi_f2d>
 8002ab0:	4680      	mov	r8, r0
 8002ab2:	4689      	mov	r9, r1
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7fd fd65 	bl	8000588 <__aeabi_f2d>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8002ac6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002aca:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002ace:	e9cd 4500 	strd	r4, r5, [sp]
 8002ad2:	4652      	mov	r2, sl
 8002ad4:	465b      	mov	r3, fp
 8002ad6:	4913      	ldr	r1, [pc, #76]	; (8002b24 <main+0x24c>)
 8002ad8:	f00b fdfc 	bl	800e6d4 <siprintf>
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.horQuat.w,ori.horQuat.v[0],ori.horQuat.v[1],ori.horQuat.v[2]);
            //sprintf(printBuffer, "Counter: %d\r\n",counter);
            //sprintf(printBuffer, "gx: %d, gy: %d, gz: %d\r\n", imu.rawGyro[0], imu.rawGyro[1], imu.rawGyro[2]);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8002adc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fd fb95 	bl	8000210 <strlen>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8002aee:	4611      	mov	r1, r2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f00a fa6b 	bl	800cfcc <CDC_Transmit_FS>
        }
        counter++;
 8002af6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002afa:	3301      	adds	r3, #1
 8002afc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0



        HAL_Delay(1);
 8002b00:	2001      	movs	r0, #1
 8002b02:	f001 fa35 	bl	8003f70 <HAL_Delay>
        LSM_pollsensors(&imu);
 8002b06:	e773      	b.n	80029f0 <main+0x118>
 8002b08:	20000468 	.word	0x20000468
 8002b0c:	200005a0 	.word	0x200005a0
 8002b10:	40020400 	.word	0x40020400
 8002b14:	20000410 	.word	0x20000410
 8002b18:	200003bc 	.word	0x200003bc
 8002b1c:	408f4000 	.word	0x408f4000
 8002b20:	88888889 	.word	0x88888889
 8002b24:	08012140 	.word	0x08012140

08002b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0ac      	sub	sp, #176	; 0xb0
 8002b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002b32:	2234      	movs	r2, #52	; 0x34
 8002b34:	2100      	movs	r1, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f00a ff5f 	bl	800d9fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b3c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b4c:	f107 030c 	add.w	r3, r7, #12
 8002b50:	225c      	movs	r2, #92	; 0x5c
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f00a ff50 	bl	800d9fa <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60bb      	str	r3, [r7, #8]
 8002b5e:	4b3e      	ldr	r3, [pc, #248]	; (8002c58 <SystemClock_Config+0x130>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a3d      	ldr	r2, [pc, #244]	; (8002c58 <SystemClock_Config+0x130>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b3b      	ldr	r3, [pc, #236]	; (8002c58 <SystemClock_Config+0x130>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b76:	2300      	movs	r3, #0
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <SystemClock_Config+0x134>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a37      	ldr	r2, [pc, #220]	; (8002c5c <SystemClock_Config+0x134>)
 8002b80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <SystemClock_Config+0x134>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b8e:	607b      	str	r3, [r7, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b92:	2301      	movs	r3, #1
 8002b94:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002ba4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ba8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002bac:	2304      	movs	r3, #4
 8002bae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002bb2:	23b4      	movs	r3, #180	; 0xb4
 8002bb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bca:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f004 feda 	bl	8007988 <HAL_RCC_OscConfig>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002bda:	f000 fbcf 	bl	800337c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002bde:	f004 f8b3 	bl	8006d48 <HAL_PWREx_EnableOverDrive>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002be8:	f000 fbc8 	bl	800337c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bec:	230f      	movs	r3, #15
 8002bee:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002bf8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002bfc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002bfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c02:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c04:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002c08:	2105      	movs	r1, #5
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f004 f8ec 	bl	8006de8 <HAL_RCC_ClockConfig>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8002c16:	f000 fbb1 	bl	800337c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c1e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8002c20:	2304      	movs	r3, #4
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8002c24:	2360      	movs	r3, #96	; 0x60
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002c30:	2301      	movs	r3, #1
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8002c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002c38:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c3a:	f107 030c 	add.w	r3, r7, #12
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f004 f9d8 	bl	8006ff4 <HAL_RCCEx_PeriphCLKConfig>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <SystemClock_Config+0x126>
  {
    Error_Handler();
 8002c4a:	f000 fb97 	bl	800337c <Error_Handler>
  }
}
 8002c4e:	bf00      	nop
 8002c50:	37b0      	adds	r7, #176	; 0xb0
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	40007000 	.word	0x40007000

08002c60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c66:	463b      	mov	r3, r7
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c74:	4a21      	ldr	r2, [pc, #132]	; (8002cfc <MX_ADC1_Init+0x9c>)
 8002c76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002c78:	4b1f      	ldr	r3, [pc, #124]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002c86:	4b1c      	ldr	r3, [pc, #112]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c92:	4b19      	ldr	r3, [pc, #100]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c9a:	4b17      	ldr	r3, [pc, #92]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ca0:	4b15      	ldr	r3, [pc, #84]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002ca2:	4a17      	ldr	r2, [pc, #92]	; (8002d00 <MX_ADC1_Init+0xa0>)
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cba:	4b0f      	ldr	r3, [pc, #60]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cc0:	480d      	ldr	r0, [pc, #52]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002cc2:	f001 f977 	bl	8003fb4 <HAL_ADC_Init>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002ccc:	f000 fb56 	bl	800337c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <MX_ADC1_Init+0xa4>)
 8002cd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002cdc:	463b      	mov	r3, r7
 8002cde:	4619      	mov	r1, r3
 8002ce0:	4805      	ldr	r0, [pc, #20]	; (8002cf8 <MX_ADC1_Init+0x98>)
 8002ce2:	f001 f9ab 	bl	800403c <HAL_ADC_ConfigChannel>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002cec:	f000 fb46 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	20000500 	.word	0x20000500
 8002cfc:	40012000 	.word	0x40012000
 8002d00:	0f000001 	.word	0x0f000001
 8002d04:	10000012 	.word	0x10000012

08002d08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002d0c:	4b12      	ldr	r3, [pc, #72]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d0e:	4a13      	ldr	r2, [pc, #76]	; (8002d5c <MX_I2C3_Init+0x54>)
 8002d10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d14:	4a12      	ldr	r2, [pc, #72]	; (8002d60 <MX_I2C3_Init+0x58>)
 8002d16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d18:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002d1e:	4b0e      	ldr	r3, [pc, #56]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002d2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d2c:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d38:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d3e:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002d44:	4804      	ldr	r0, [pc, #16]	; (8002d58 <MX_I2C3_Init+0x50>)
 8002d46:	f001 fe7d 	bl	8004a44 <HAL_I2C_Init>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002d50:	f000 fb14 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002d54:	bf00      	nop
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	200003bc 	.word	0x200003bc
 8002d5c:	40005c00 	.word	0x40005c00
 8002d60:	000186a0 	.word	0x000186a0

08002d64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d6a:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <MX_SPI1_Init+0x68>)
 8002d6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002d6e:	4b16      	ldr	r3, [pc, #88]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002d76:	4b14      	ldr	r3, [pc, #80]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d7c:	4b12      	ldr	r3, [pc, #72]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d88:	4b0f      	ldr	r3, [pc, #60]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002d8e:	4b0e      	ldr	r3, [pc, #56]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002d96:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d98:	2238      	movs	r2, #56	; 0x38
 8002d9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da8:	4b07      	ldr	r3, [pc, #28]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002db0:	220a      	movs	r2, #10
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002db4:	4804      	ldr	r0, [pc, #16]	; (8002dc8 <MX_SPI1_Init+0x64>)
 8002db6:	f005 f841 	bl	8007e3c <HAL_SPI_Init>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002dc0:	f000 fadc 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002dc4:	bf00      	nop
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000548 	.word	0x20000548
 8002dcc:	40013000 	.word	0x40013000

08002dd0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <MX_SPI2_Init+0x68>)
 8002dd8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002ddc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002de0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002de8:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dee:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002df4:	4b0f      	ldr	r3, [pc, #60]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dfa:	4b0e      	ldr	r3, [pc, #56]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002dfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e00:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e02:	4b0c      	ldr	r3, [pc, #48]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002e04:	2210      	movs	r2, #16
 8002e06:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e08:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002e1a:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002e1c:	220a      	movs	r2, #10
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e20:	4804      	ldr	r0, [pc, #16]	; (8002e34 <MX_SPI2_Init+0x64>)
 8002e22:	f005 f80b 	bl	8007e3c <HAL_SPI_Init>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002e2c:	f000 faa6 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e30:	bf00      	nop
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	20000410 	.word	0x20000410
 8002e38:	40003800 	.word	0x40003800

08002e3c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e42:	4a18      	ldr	r2, [pc, #96]	; (8002ea4 <MX_SPI3_Init+0x68>)
 8002e44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e4e:	4b14      	ldr	r3, [pc, #80]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e54:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e60:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e66:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e70:	2210      	movs	r2, #16
 8002e72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e74:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e7a:	4b09      	ldr	r3, [pc, #36]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e80:	4b07      	ldr	r3, [pc, #28]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e88:	220a      	movs	r2, #10
 8002e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002e8c:	4804      	ldr	r0, [pc, #16]	; (8002ea0 <MX_SPI3_Init+0x64>)
 8002e8e:	f004 ffd5 	bl	8007e3c <HAL_SPI_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8002e98:	f000 fa70 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	200004a8 	.word	0x200004a8
 8002ea4:	40003c00 	.word	0x40003c00

08002ea8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08a      	sub	sp, #40	; 0x28
 8002eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002eae:	f107 0320 	add.w	r3, r7, #32
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eb8:	1d3b      	adds	r3, r7, #4
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	615a      	str	r2, [r3, #20]
 8002ec8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002ecc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ed0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8002ed2:	4b26      	ldr	r3, [pc, #152]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002ed4:	2259      	movs	r2, #89	; 0x59
 8002ed6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ed8:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002ee0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002ee4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eec:	4b1f      	ldr	r3, [pc, #124]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002ef2:	481e      	ldr	r0, [pc, #120]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002ef4:	f005 fd2f 	bl	8008956 <HAL_TIM_PWM_Init>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002efe:	f000 fa3d 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002f0a:	f107 0320 	add.w	r3, r7, #32
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4816      	ldr	r0, [pc, #88]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002f12:	f006 fa17 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002f1c:	f000 fa2e 	bl	800337c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f20:	2360      	movs	r3, #96	; 0x60
 8002f22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8002f24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f28:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	2200      	movs	r2, #0
 8002f36:	4619      	mov	r1, r3
 8002f38:	480c      	ldr	r0, [pc, #48]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002f3a:	f005 fd75 	bl	8008a28 <HAL_TIM_PWM_ConfigChannel>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002f44:	f000 fa1a 	bl	800337c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	220c      	movs	r2, #12
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4807      	ldr	r0, [pc, #28]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002f50:	f005 fd6a 	bl	8008a28 <HAL_TIM_PWM_ConfigChannel>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8002f5a:	f000 fa0f 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f5e:	4803      	ldr	r0, [pc, #12]	; (8002f6c <MX_TIM2_Init+0xc4>)
 8002f60:	f000 fdda 	bl	8003b18 <HAL_TIM_MspPostInit>

}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200005a0 	.word	0x200005a0

08002f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b08e      	sub	sp, #56	; 0x38
 8002f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	609a      	str	r2, [r3, #8]
 8002f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f84:	f107 0320 	add.w	r3, r7, #32
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
 8002f9c:	615a      	str	r2, [r3, #20]
 8002f9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002fa0:	4b3e      	ldr	r3, [pc, #248]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fa2:	4a3f      	ldr	r2, [pc, #252]	; (80030a0 <MX_TIM3_Init+0x130>)
 8002fa4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fa8:	2259      	movs	r2, #89	; 0x59
 8002faa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fac:	4b3b      	ldr	r3, [pc, #236]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8002fb2:	4b3a      	ldr	r3, [pc, #232]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fb8:	4b38      	ldr	r3, [pc, #224]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fbe:	4b37      	ldr	r3, [pc, #220]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002fc4:	4835      	ldr	r0, [pc, #212]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fc6:	f005 fc9b 	bl	8008900 <HAL_TIM_Base_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8002fd0:	f000 f9d4 	bl	800337c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002fde:	4619      	mov	r1, r3
 8002fe0:	482e      	ldr	r0, [pc, #184]	; (800309c <MX_TIM3_Init+0x12c>)
 8002fe2:	f005 fde7 	bl	8008bb4 <HAL_TIM_ConfigClockSource>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d001      	beq.n	8002ff0 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8002fec:	f000 f9c6 	bl	800337c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002ff0:	482a      	ldr	r0, [pc, #168]	; (800309c <MX_TIM3_Init+0x12c>)
 8002ff2:	f005 fcb0 	bl	8008956 <HAL_TIM_PWM_Init>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d001      	beq.n	8003000 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8002ffc:	f000 f9be 	bl	800337c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003000:	2300      	movs	r3, #0
 8003002:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003008:	f107 0320 	add.w	r3, r7, #32
 800300c:	4619      	mov	r1, r3
 800300e:	4823      	ldr	r0, [pc, #140]	; (800309c <MX_TIM3_Init+0x12c>)
 8003010:	f006 f998 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800301a:	f000 f9af 	bl	800337c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800301e:	2360      	movs	r3, #96	; 0x60
 8003020:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003026:	2302      	movs	r3, #2
 8003028:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800302a:	2300      	movs	r3, #0
 800302c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800302e:	1d3b      	adds	r3, r7, #4
 8003030:	2200      	movs	r2, #0
 8003032:	4619      	mov	r1, r3
 8003034:	4819      	ldr	r0, [pc, #100]	; (800309c <MX_TIM3_Init+0x12c>)
 8003036:	f005 fcf7 	bl	8008a28 <HAL_TIM_PWM_ConfigChannel>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003040:	f000 f99c 	bl	800337c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003044:	2300      	movs	r3, #0
 8003046:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	2204      	movs	r2, #4
 800304c:	4619      	mov	r1, r3
 800304e:	4813      	ldr	r0, [pc, #76]	; (800309c <MX_TIM3_Init+0x12c>)
 8003050:	f005 fcea 	bl	8008a28 <HAL_TIM_PWM_ConfigChannel>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800305a:	f000 f98f 	bl	800337c <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800305e:	2302      	movs	r3, #2
 8003060:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003062:	1d3b      	adds	r3, r7, #4
 8003064:	2208      	movs	r2, #8
 8003066:	4619      	mov	r1, r3
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <MX_TIM3_Init+0x12c>)
 800306a:	f005 fcdd 	bl	8008a28 <HAL_TIM_PWM_ConfigChannel>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003074:	f000 f982 	bl	800337c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003078:	1d3b      	adds	r3, r7, #4
 800307a:	220c      	movs	r2, #12
 800307c:	4619      	mov	r1, r3
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <MX_TIM3_Init+0x12c>)
 8003080:	f005 fcd2 	bl	8008a28 <HAL_TIM_PWM_ConfigChannel>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 800308a:	f000 f977 	bl	800337c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800308e:	4803      	ldr	r0, [pc, #12]	; (800309c <MX_TIM3_Init+0x12c>)
 8003090:	f000 fd42 	bl	8003b18 <HAL_TIM_MspPostInit>

}
 8003094:	bf00      	nop
 8003096:	3738      	adds	r7, #56	; 0x38
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	20000468 	.word	0x20000468
 80030a0:	40000400 	.word	0x40000400

080030a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b08a      	sub	sp, #40	; 0x28
 80030a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030aa:	f107 0314 	add.w	r3, r7, #20
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
 80030b4:	609a      	str	r2, [r3, #8]
 80030b6:	60da      	str	r2, [r3, #12]
 80030b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030ba:	2300      	movs	r3, #0
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	4b5d      	ldr	r3, [pc, #372]	; (8003234 <MX_GPIO_Init+0x190>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	4a5c      	ldr	r2, [pc, #368]	; (8003234 <MX_GPIO_Init+0x190>)
 80030c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030c8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ca:	4b5a      	ldr	r3, [pc, #360]	; (8003234 <MX_GPIO_Init+0x190>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b56      	ldr	r3, [pc, #344]	; (8003234 <MX_GPIO_Init+0x190>)
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4a55      	ldr	r2, [pc, #340]	; (8003234 <MX_GPIO_Init+0x190>)
 80030e0:	f043 0304 	orr.w	r3, r3, #4
 80030e4:	6313      	str	r3, [r2, #48]	; 0x30
 80030e6:	4b53      	ldr	r3, [pc, #332]	; (8003234 <MX_GPIO_Init+0x190>)
 80030e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ea:	f003 0304 	and.w	r3, r3, #4
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b4f      	ldr	r3, [pc, #316]	; (8003234 <MX_GPIO_Init+0x190>)
 80030f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fa:	4a4e      	ldr	r2, [pc, #312]	; (8003234 <MX_GPIO_Init+0x190>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6313      	str	r3, [r2, #48]	; 0x30
 8003102:	4b4c      	ldr	r3, [pc, #304]	; (8003234 <MX_GPIO_Init+0x190>)
 8003104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
 8003112:	4b48      	ldr	r3, [pc, #288]	; (8003234 <MX_GPIO_Init+0x190>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	4a47      	ldr	r2, [pc, #284]	; (8003234 <MX_GPIO_Init+0x190>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6313      	str	r3, [r2, #48]	; 0x30
 800311e:	4b45      	ldr	r3, [pc, #276]	; (8003234 <MX_GPIO_Init+0x190>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	607b      	str	r3, [r7, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800312a:	2300      	movs	r3, #0
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	4b41      	ldr	r3, [pc, #260]	; (8003234 <MX_GPIO_Init+0x190>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	4a40      	ldr	r2, [pc, #256]	; (8003234 <MX_GPIO_Init+0x190>)
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	6313      	str	r3, [r2, #48]	; 0x30
 800313a:	4b3e      	ldr	r3, [pc, #248]	; (8003234 <MX_GPIO_Init+0x190>)
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8003146:	2200      	movs	r2, #0
 8003148:	2110      	movs	r1, #16
 800314a:	483b      	ldr	r0, [pc, #236]	; (8003238 <MX_GPIO_Init+0x194>)
 800314c:	f001 fc60 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8003150:	2200      	movs	r2, #0
 8003152:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003156:	4839      	ldr	r0, [pc, #228]	; (800323c <MX_GPIO_Init+0x198>)
 8003158:	f001 fc5a 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800315c:	2200      	movs	r2, #0
 800315e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003162:	4837      	ldr	r0, [pc, #220]	; (8003240 <MX_GPIO_Init+0x19c>)
 8003164:	f001 fc54 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8003168:	2201      	movs	r2, #1
 800316a:	2140      	movs	r1, #64	; 0x40
 800316c:	4833      	ldr	r0, [pc, #204]	; (800323c <MX_GPIO_Init+0x198>)
 800316e:	f001 fc4f 	bl	8004a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003172:	2310      	movs	r3, #16
 8003174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003176:	2301      	movs	r3, #1
 8003178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	2300      	movs	r3, #0
 8003180:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	482b      	ldr	r0, [pc, #172]	; (8003238 <MX_GPIO_Init+0x194>)
 800318a:	f001 fa97 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 800318e:	2320      	movs	r3, #32
 8003190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003196:	2301      	movs	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 800319a:	f107 0314 	add.w	r3, r7, #20
 800319e:	4619      	mov	r1, r3
 80031a0:	4825      	ldr	r0, [pc, #148]	; (8003238 <MX_GPIO_Init+0x194>)
 80031a2:	f001 fa8b 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 80031a6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80031aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ac:	2301      	movs	r3, #1
 80031ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b0:	2300      	movs	r3, #0
 80031b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b4:	2300      	movs	r3, #0
 80031b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031b8:	f107 0314 	add.w	r3, r7, #20
 80031bc:	4619      	mov	r1, r3
 80031be:	481f      	ldr	r0, [pc, #124]	; (800323c <MX_GPIO_Init+0x198>)
 80031c0:	f001 fa7c 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 80031c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ca:	2301      	movs	r3, #1
 80031cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4619      	mov	r1, r3
 80031dc:	4818      	ldr	r0, [pc, #96]	; (8003240 <MX_GPIO_Init+0x19c>)
 80031de:	f001 fa6d 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 80031e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80031e8:	2300      	movs	r3, #0
 80031ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 80031f0:	f107 0314 	add.w	r3, r7, #20
 80031f4:	4619      	mov	r1, r3
 80031f6:	4810      	ldr	r0, [pc, #64]	; (8003238 <MX_GPIO_Init+0x194>)
 80031f8:	f001 fa60 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 80031fc:	2304      	movs	r3, #4
 80031fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003200:	2300      	movs	r3, #0
 8003202:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8003208:	f107 0314 	add.w	r3, r7, #20
 800320c:	4619      	mov	r1, r3
 800320e:	480d      	ldr	r0, [pc, #52]	; (8003244 <MX_GPIO_Init+0x1a0>)
 8003210:	f001 fa54 	bl	80046bc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8003214:	2310      	movs	r3, #16
 8003216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003220:	f107 0314 	add.w	r3, r7, #20
 8003224:	4619      	mov	r1, r3
 8003226:	4805      	ldr	r0, [pc, #20]	; (800323c <MX_GPIO_Init+0x198>)
 8003228:	f001 fa48 	bl	80046bc <HAL_GPIO_Init>

}
 800322c:	bf00      	nop
 800322e:	3728      	adds	r7, #40	; 0x28
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40023800 	.word	0x40023800
 8003238:	40020800 	.word	0x40020800
 800323c:	40020400 	.word	0x40020400
 8003240:	40020000 	.word	0x40020000
 8003244:	40020c00 	.word	0x40020c00

08003248 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8003248:	b590      	push	{r4, r7, lr}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]
 8003252:	460b      	mov	r3, r1
 8003254:	80bb      	strh	r3, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 800325a:	4b37      	ldr	r3, [pc, #220]	; (8003338 <playtone+0xf0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8003262:	4b35      	ldr	r3, [pc, #212]	; (8003338 <playtone+0xf0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003268:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <playtone+0xf0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fd f975 	bl	8000564 <__aeabi_i2d>
 800327a:	4603      	mov	r3, r0
 800327c:	460c      	mov	r4, r1
 800327e:	461a      	mov	r2, r3
 8003280:	4623      	mov	r3, r4
 8003282:	a12b      	add	r1, pc, #172	; (adr r1, 8003330 <playtone+0xe8>)
 8003284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003288:	f7fd fb00 	bl	800088c <__aeabi_ddiv>
 800328c:	4603      	mov	r3, r0
 800328e:	460c      	mov	r4, r1
 8003290:	4618      	mov	r0, r3
 8003292:	4621      	mov	r1, r4
 8003294:	f7fd fca8 	bl	8000be8 <__aeabi_d2uiz>
 8003298:	4603      	mov	r3, r0
 800329a:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 800329c:	4b26      	ldr	r3, [pc, #152]	; (8003338 <playtone+0xf0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2200      	movs	r2, #0
 80032a2:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <playtone+0xf0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	fb02 f203 	mul.w	r2, r2, r3
 80032b4:	4b20      	ldr	r3, [pc, #128]	; (8003338 <playtone+0xf0>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4920      	ldr	r1, [pc, #128]	; (800333c <playtone+0xf4>)
 80032ba:	fba1 1202 	umull	r1, r2, r1, r2
 80032be:	0992      	lsrs	r2, r2, #6
 80032c0:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 80032c2:	8afb      	ldrh	r3, [r7, #22]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	fb02 f203 	mul.w	r2, r2, r3
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <playtone+0xf0>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	0a12      	lsrs	r2, r2, #8
 80032d0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 80032d2:	8abb      	ldrh	r3, [r7, #20]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	fb02 f203 	mul.w	r2, r2, r3
 80032da:	4b17      	ldr	r3, [pc, #92]	; (8003338 <playtone+0xf0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	0a12      	lsrs	r2, r2, #8
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 80032e2:	8a7b      	ldrh	r3, [r7, #18]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	fb02 f203 	mul.w	r2, r2, r3
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <playtone+0xf0>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	0a12      	lsrs	r2, r2, #8
 80032f0:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 80032f2:	88bb      	ldrh	r3, [r7, #4]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fe3b 	bl	8003f70 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <playtone+0xf0>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2200      	movs	r2, #0
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8003302:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <playtone+0xf0>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <playtone+0xf0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	8afa      	ldrh	r2, [r7, #22]
 8003310:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8003312:	4b09      	ldr	r3, [pc, #36]	; (8003338 <playtone+0xf0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	8aba      	ldrh	r2, [r7, #20]
 8003318:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 800331a:	4b07      	ldr	r3, [pc, #28]	; (8003338 <playtone+0xf0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	8a7a      	ldrh	r2, [r7, #18]
 8003320:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop
 800332c:	f3af 8000 	nop.w
 8003330:	00000000 	.word	0x00000000
 8003334:	412e8480 	.word	0x412e8480
 8003338:	20000468 	.word	0x20000468
 800333c:	51eb851f 	.word	0x51eb851f

08003340 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	71fb      	strb	r3, [r7, #7]
 800334a:	460b      	mov	r3, r1
 800334c:	71bb      	strb	r3, [r7, #6]
 800334e:	4613      	mov	r3, r2
 8003350:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <changeLed+0x38>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	79fa      	ldrb	r2, [r7, #7]
 8003358:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 800335a:	4b07      	ldr	r3, [pc, #28]	; (8003378 <changeLed+0x38>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	79ba      	ldrb	r2, [r7, #6]
 8003360:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8003362:	4b05      	ldr	r3, [pc, #20]	; (8003378 <changeLed+0x38>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	797a      	ldrb	r2, [r7, #5]
 8003368:	641a      	str	r2, [r3, #64]	; 0x40

}
 800336a:	bf00      	nop
 800336c:	370c      	adds	r7, #12
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000468 	.word	0x20000468

0800337c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003380:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8003382:	e7fe      	b.n	8003382 <Error_Handler+0x6>

08003384 <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3304      	adds	r3, #4
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	3308      	adds	r3, #8
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3308      	adds	r3, #8
 80033a8:	edd3 6a00 	vldr	s13, [r3]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	3304      	adds	r3, #4
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	3308      	adds	r3, #8
 80033c6:	ed93 7a00 	vldr	s14, [r3]
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	edd3 6a00 	vldr	s13, [r3]
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	3308      	adds	r3, #8
 80033de:	edd3 7a00 	vldr	s15, [r3]
 80033e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	3304      	adds	r3, #4
 80033ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ee:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	ed93 7a00 	vldr	s14, [r3]
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	3304      	adds	r3, #4
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	3304      	adds	r3, #4
 8003408:	edd3 6a00 	vldr	s13, [r3]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	edd3 7a00 	vldr	s15, [r3]
 8003412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3308      	adds	r3, #8
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	edc3 7a00 	vstr	s15, [r3]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 800342e:	b480      	push	{r7}
 8003430:	b085      	sub	sp, #20
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	ed93 7a00 	vldr	s14, [r3]
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	edd3 7a00 	vldr	s15, [r3]
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	3304      	adds	r3, #4
 8003454:	ed93 7a00 	vldr	s14, [r3]
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	3304      	adds	r3, #4
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3304      	adds	r3, #4
 8003464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003468:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3308      	adds	r3, #8
 8003470:	ed93 7a00 	vldr	s14, [r3]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	3308      	adds	r3, #8
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3308      	adds	r3, #8
 8003480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003484:	edc3 7a00 	vstr	s15, [r3]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	ed93 7a00 	vldr	s14, [r3]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	edd3 7a00 	vldr	s15, [r3]
 80034a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	3304      	adds	r3, #4
 80034b0:	edd3 6a00 	vldr	s13, [r3]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	edd3 7a00 	vldr	s15, [r3]
 80034bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	3308      	adds	r3, #8
 80034c8:	edd3 6a00 	vldr	s13, [r3]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3308      	adds	r3, #8
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034d8:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80034dc:	eeb0 0a67 	vmov.f32	s0, s15
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <orientation_init>:

void orientation_init(Orientation *ori) {
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fe f99f 	bl	8001838 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3370      	adds	r3, #112	; 0x70
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe f99a 	bl	8001838 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3360      	adds	r3, #96	; 0x60
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe f995 	bl	8001838 <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f04f 0200 	mov.w	r2, #0
 800351c:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003524:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f04f 0200 	mov.w	r2, #0
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
 800354e:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[0];
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[1];
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[2];
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[0];
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[1];
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	685a      	ldr	r2, [r3, #4]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[2];
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	0000      	movs	r0, r0
 80035a4:	0000      	movs	r0, r0
	...

080035a8 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt) {
 80035a8:	b590      	push	{r4, r7, lr}
 80035aa:	b08f      	sub	sp, #60	; 0x3c
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	ed87 0a00 	vstr	s0, [r7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3348      	adds	r3, #72	; 0x48
 80035c0:	461a      	mov	r2, r3
 80035c2:	f7fe fb91 	bl	8001ce8 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	3354      	adds	r3, #84	; 0x54
 80035d0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80035d4:	4619      	mov	r1, r3
 80035d6:	f7ff fed5 	bl	8003384 <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3310      	adds	r3, #16
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f7fe fa8c 	bl	8001b00 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3310      	adds	r3, #16
 80035ec:	f107 021c 	add.w	r2, r7, #28
 80035f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7fe fb77 	bl	8001ce8 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fc ffc3 	bl	8000588 <__aeabi_f2d>
 8003602:	a347      	add	r3, pc, #284	; (adr r3, 8003720 <orientation_update+0x178>)
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f7fd f816 	bl	8000638 <__aeabi_dmul>
 800360c:	4603      	mov	r3, r0
 800360e:	460c      	mov	r4, r1
 8003610:	4618      	mov	r0, r3
 8003612:	4621      	mov	r1, r4
 8003614:	f7fd fb08 	bl	8000c28 <__aeabi_d2f>
 8003618:	4603      	mov	r3, r0
 800361a:	61fb      	str	r3, [r7, #28]
    correctionBody[1] = correctionBody[1] * 0.1;
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fc ffb2 	bl	8000588 <__aeabi_f2d>
 8003624:	a33e      	add	r3, pc, #248	; (adr r3, 8003720 <orientation_update+0x178>)
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	f7fd f805 	bl	8000638 <__aeabi_dmul>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	4618      	mov	r0, r3
 8003634:	4621      	mov	r1, r4
 8003636:	f7fd faf7 	bl	8000c28 <__aeabi_d2f>
 800363a:	4603      	mov	r3, r0
 800363c:	623b      	str	r3, [r7, #32]
    correctionBody[2] = correctionBody[2] * 0.1;
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ffa1 	bl	8000588 <__aeabi_f2d>
 8003646:	a336      	add	r3, pc, #216	; (adr r3, 8003720 <orientation_update+0x178>)
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f7fc fff4 	bl	8000638 <__aeabi_dmul>
 8003650:	4603      	mov	r3, r0
 8003652:	460c      	mov	r4, r1
 8003654:	4618      	mov	r0, r3
 8003656:	4621      	mov	r1, r4
 8003658:	f7fd fae6 	bl	8000c28 <__aeabi_d2f>
 800365c:	4603      	mov	r3, r0
 800365e:	627b      	str	r3, [r7, #36]	; 0x24

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	333c      	adds	r3, #60	; 0x3c
 8003664:	4618      	mov	r0, r3
 8003666:	f7ff ff15 	bl	8003494 <vector_lenSquared>
 800366a:	ee10 3a10 	vmov	r3, s0
 800366e:	4618      	mov	r0, r3
 8003670:	f7fc ff8a 	bl	8000588 <__aeabi_f2d>
 8003674:	a32c      	add	r3, pc, #176	; (adr r3, 8003728 <orientation_update+0x180>)
 8003676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367a:	f7fd f907 	bl	800088c <__aeabi_ddiv>
 800367e:	4603      	mov	r3, r0
 8003680:	460c      	mov	r4, r1
 8003682:	4618      	mov	r0, r3
 8003684:	4621      	mov	r1, r4
 8003686:	f7fd facf 	bl	8000c28 <__aeabi_d2f>
 800368a:	4603      	mov	r3, r0
 800368c:	637b      	str	r3, [r7, #52]	; 0x34
    if (GsSquared > 0.81 && GsSquared < 1.21) {
 800368e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003690:	f7fc ff7a 	bl	8000588 <__aeabi_f2d>
 8003694:	a326      	add	r3, pc, #152	; (adr r3, 8003730 <orientation_update+0x188>)
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f7fd fa5d 	bl	8000b58 <__aeabi_dcmpgt>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d015      	beq.n	80036d0 <orientation_update+0x128>
 80036a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036a6:	f7fc ff6f 	bl	8000588 <__aeabi_f2d>
 80036aa:	a323      	add	r3, pc, #140	; (adr r3, 8003738 <orientation_update+0x190>)
 80036ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b0:	f7fd fa34 	bl	8000b1c <__aeabi_dcmplt>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <orientation_update+0x128>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80036c6:	f107 031c 	add.w	r3, r7, #28
 80036ca:	4619      	mov	r1, r3
 80036cc:	f7ff feaf 	bl	800342e <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3320      	adds	r3, #32
 80036da:	4619      	mov	r1, r3
 80036dc:	ed97 0a00 	vldr	s0, [r7]
 80036e0:	4610      	mov	r0, r2
 80036e2:	f7fe fc89 	bl	8001ff8 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	3320      	adds	r3, #32
 80036ec:	f107 020c 	add.w	r2, r7, #12
 80036f0:	4619      	mov	r1, r3
 80036f2:	f7fe fa39 	bl	8001b68 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	f107 030c 	add.w	r3, r7, #12
 80036fc:	4611      	mov	r1, r2
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fe f8be 	bl	8001880 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3380      	adds	r3, #128	; 0x80
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7fe f8d7 	bl	80018c0 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8003712:	bf00      	nop
 8003714:	373c      	adds	r7, #60	; 0x3c
 8003716:	46bd      	mov	sp, r7
 8003718:	bd90      	pop	{r4, r7, pc}
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	9999999a 	.word	0x9999999a
 8003724:	3fb99999 	.word	0x3fb99999
 8003728:	9339d914 	.word	0x9339d914
 800372c:	40580ae7 	.word	0x40580ae7
 8003730:	1eb851ec 	.word	0x1eb851ec
 8003734:	3fe9eb85 	.word	0x3fe9eb85
 8003738:	f5c28f5c 	.word	0xf5c28f5c
 800373c:	3ff35c28 	.word	0x3ff35c28

08003740 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	4b10      	ldr	r3, [pc, #64]	; (800378c <HAL_MspInit+0x4c>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a0f      	ldr	r2, [pc, #60]	; (800378c <HAL_MspInit+0x4c>)
 8003750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b0d      	ldr	r3, [pc, #52]	; (800378c <HAL_MspInit+0x4c>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4b09      	ldr	r3, [pc, #36]	; (800378c <HAL_MspInit+0x4c>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	4a08      	ldr	r2, [pc, #32]	; (800378c <HAL_MspInit+0x4c>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	; 0x40
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_MspInit+0x4c>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	40023800 	.word	0x40023800

08003790 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	f107 0314 	add.w	r3, r7, #20
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	609a      	str	r2, [r3, #8]
 80037a4:	60da      	str	r2, [r3, #12]
 80037a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a17      	ldr	r2, [pc, #92]	; (800380c <HAL_ADC_MspInit+0x7c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d127      	bne.n	8003802 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037b2:	2300      	movs	r3, #0
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	4b16      	ldr	r3, [pc, #88]	; (8003810 <HAL_ADC_MspInit+0x80>)
 80037b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <HAL_ADC_MspInit+0x80>)
 80037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c0:	6453      	str	r3, [r2, #68]	; 0x44
 80037c2:	4b13      	ldr	r3, [pc, #76]	; (8003810 <HAL_ADC_MspInit+0x80>)
 80037c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ca:	613b      	str	r3, [r7, #16]
 80037cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	4b0f      	ldr	r3, [pc, #60]	; (8003810 <HAL_ADC_MspInit+0x80>)
 80037d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d6:	4a0e      	ldr	r2, [pc, #56]	; (8003810 <HAL_ADC_MspInit+0x80>)
 80037d8:	f043 0304 	orr.w	r3, r3, #4
 80037dc:	6313      	str	r3, [r2, #48]	; 0x30
 80037de:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <HAL_ADC_MspInit+0x80>)
 80037e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 80037ea:	2304      	movs	r3, #4
 80037ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037ee:	2303      	movs	r3, #3
 80037f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f2:	2300      	movs	r3, #0
 80037f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80037f6:	f107 0314 	add.w	r3, r7, #20
 80037fa:	4619      	mov	r1, r3
 80037fc:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_ADC_MspInit+0x84>)
 80037fe:	f000 ff5d 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003802:	bf00      	nop
 8003804:	3728      	adds	r7, #40	; 0x28
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	40012000 	.word	0x40012000
 8003810:	40023800 	.word	0x40023800
 8003814:	40020800 	.word	0x40020800

08003818 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b08a      	sub	sp, #40	; 0x28
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	609a      	str	r2, [r3, #8]
 800382c:	60da      	str	r2, [r3, #12]
 800382e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a29      	ldr	r2, [pc, #164]	; (80038dc <HAL_I2C_MspInit+0xc4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d14b      	bne.n	80038d2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a27      	ldr	r2, [pc, #156]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 8003844:	f043 0304 	orr.w	r3, r3, #4
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b25      	ldr	r3, [pc, #148]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0304 	and.w	r3, r3, #4
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a20      	ldr	r2, [pc, #128]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003872:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800387c:	2301      	movs	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003880:	2303      	movs	r3, #3
 8003882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003884:	2304      	movs	r3, #4
 8003886:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	4619      	mov	r1, r3
 800388e:	4815      	ldr	r0, [pc, #84]	; (80038e4 <HAL_I2C_MspInit+0xcc>)
 8003890:	f000 ff14 	bl	80046bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003898:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800389a:	2312      	movs	r3, #18
 800389c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800389e:	2301      	movs	r3, #1
 80038a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038a2:	2303      	movs	r3, #3
 80038a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80038a6:	2304      	movs	r3, #4
 80038a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038aa:	f107 0314 	add.w	r3, r7, #20
 80038ae:	4619      	mov	r1, r3
 80038b0:	480d      	ldr	r0, [pc, #52]	; (80038e8 <HAL_I2C_MspInit+0xd0>)
 80038b2:	f000 ff03 	bl	80046bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80038b6:	2300      	movs	r3, #0
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 80038bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038be:	4a08      	ldr	r2, [pc, #32]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 80038c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038c4:	6413      	str	r3, [r2, #64]	; 0x40
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <HAL_I2C_MspInit+0xc8>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80038d2:	bf00      	nop
 80038d4:	3728      	adds	r7, #40	; 0x28
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40005c00 	.word	0x40005c00
 80038e0:	40023800 	.word	0x40023800
 80038e4:	40020800 	.word	0x40020800
 80038e8:	40020000 	.word	0x40020000

080038ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08e      	sub	sp, #56	; 0x38
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	60da      	str	r2, [r3, #12]
 8003902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a5b      	ldr	r2, [pc, #364]	; (8003a78 <HAL_SPI_MspInit+0x18c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d12c      	bne.n	8003968 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	623b      	str	r3, [r7, #32]
 8003912:	4b5a      	ldr	r3, [pc, #360]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003916:	4a59      	ldr	r2, [pc, #356]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003918:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800391c:	6453      	str	r3, [r2, #68]	; 0x44
 800391e:	4b57      	ldr	r3, [pc, #348]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003926:	623b      	str	r3, [r7, #32]
 8003928:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	61fb      	str	r3, [r7, #28]
 8003944:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003946:	23e0      	movs	r3, #224	; 0xe0
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800394a:	2302      	movs	r3, #2
 800394c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003952:	2303      	movs	r3, #3
 8003954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003956:	2305      	movs	r3, #5
 8003958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800395a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800395e:	4619      	mov	r1, r3
 8003960:	4847      	ldr	r0, [pc, #284]	; (8003a80 <HAL_SPI_MspInit+0x194>)
 8003962:	f000 feab 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003966:	e082      	b.n	8003a6e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a45      	ldr	r2, [pc, #276]	; (8003a84 <HAL_SPI_MspInit+0x198>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d12d      	bne.n	80039ce <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	4b41      	ldr	r3, [pc, #260]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 800397c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b3e      	ldr	r3, [pc, #248]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
 8003992:	4b3a      	ldr	r3, [pc, #232]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003996:	4a39      	ldr	r2, [pc, #228]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003998:	f043 0302 	orr.w	r3, r3, #2
 800399c:	6313      	str	r3, [r2, #48]	; 0x30
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	617b      	str	r3, [r7, #20]
 80039a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80039aa:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039b8:	2303      	movs	r3, #3
 80039ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039bc:	2305      	movs	r3, #5
 80039be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039c4:	4619      	mov	r1, r3
 80039c6:	4830      	ldr	r0, [pc, #192]	; (8003a88 <HAL_SPI_MspInit+0x19c>)
 80039c8:	f000 fe78 	bl	80046bc <HAL_GPIO_Init>
}
 80039cc:	e04f      	b.n	8003a6e <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a2e      	ldr	r2, [pc, #184]	; (8003a8c <HAL_SPI_MspInit+0x1a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d14a      	bne.n	8003a6e <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80039d8:	2300      	movs	r3, #0
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	4b27      	ldr	r3, [pc, #156]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 80039de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e0:	4a26      	ldr	r2, [pc, #152]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 80039e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039e6:	6413      	str	r3, [r2, #64]	; 0x40
 80039e8:	4b24      	ldr	r3, [pc, #144]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 80039ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f0:	613b      	str	r3, [r7, #16]
 80039f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
 80039f8:	4b20      	ldr	r3, [pc, #128]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 80039fe:	f043 0304 	orr.w	r3, r3, #4
 8003a02:	6313      	str	r3, [r2, #48]	; 0x30
 8003a04:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a10:	2300      	movs	r3, #0
 8003a12:	60bb      	str	r3, [r7, #8]
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a18:	4a18      	ldr	r2, [pc, #96]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003a1a:	f043 0302 	orr.w	r3, r3, #2
 8003a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003a20:	4b16      	ldr	r3, [pc, #88]	; (8003a7c <HAL_SPI_MspInit+0x190>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003a2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a32:	2302      	movs	r3, #2
 8003a34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	2300      	movs	r3, #0
 8003a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a3e:	2306      	movs	r3, #6
 8003a40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a46:	4619      	mov	r1, r3
 8003a48:	4811      	ldr	r0, [pc, #68]	; (8003a90 <HAL_SPI_MspInit+0x1a4>)
 8003a4a:	f000 fe37 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003a4e:	2320      	movs	r3, #32
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a52:	2302      	movs	r3, #2
 8003a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a56:	2300      	movs	r3, #0
 8003a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a5e:	2306      	movs	r3, #6
 8003a60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a66:	4619      	mov	r1, r3
 8003a68:	4807      	ldr	r0, [pc, #28]	; (8003a88 <HAL_SPI_MspInit+0x19c>)
 8003a6a:	f000 fe27 	bl	80046bc <HAL_GPIO_Init>
}
 8003a6e:	bf00      	nop
 8003a70:	3738      	adds	r7, #56	; 0x38
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40013000 	.word	0x40013000
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	40020000 	.word	0x40020000
 8003a84:	40003800 	.word	0x40003800
 8003a88:	40020400 	.word	0x40020400
 8003a8c:	40003c00 	.word	0x40003c00
 8003a90:	40020800 	.word	0x40020800

08003a94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa4:	d10d      	bne.n	8003ac2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60fb      	str	r3, [r7, #12]
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a08      	ldr	r2, [pc, #32]	; (8003ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_TIM_PWM_MspInit+0x3c>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr
 8003ace:	bf00      	nop
 8003ad0:	40023800 	.word	0x40023800

08003ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0b      	ldr	r2, [pc, #44]	; (8003b10 <HAL_TIM_Base_MspInit+0x3c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d10d      	bne.n	8003b02 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <HAL_TIM_Base_MspInit+0x40>)
 8003aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aee:	4a09      	ldr	r2, [pc, #36]	; (8003b14 <HAL_TIM_Base_MspInit+0x40>)
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	4b07      	ldr	r3, [pc, #28]	; (8003b14 <HAL_TIM_Base_MspInit+0x40>)
 8003af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	60fb      	str	r3, [r7, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40023800 	.word	0x40023800

08003b18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08a      	sub	sp, #40	; 0x28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b20:	f107 0314 	add.w	r3, r7, #20
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
 8003b2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b38:	d11e      	bne.n	8003b78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	4b31      	ldr	r3, [pc, #196]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b42:	4a30      	ldr	r2, [pc, #192]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b44:	f043 0301 	orr.w	r3, r3, #1
 8003b48:	6313      	str	r3, [r2, #48]	; 0x30
 8003b4a:	4b2e      	ldr	r3, [pc, #184]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	613b      	str	r3, [r7, #16]
 8003b54:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8003b56:	2309      	movs	r3, #9
 8003b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003b66:	2301      	movs	r3, #1
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b6a:	f107 0314 	add.w	r3, r7, #20
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4825      	ldr	r0, [pc, #148]	; (8003c08 <HAL_TIM_MspPostInit+0xf0>)
 8003b72:	f000 fda3 	bl	80046bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003b76:	e041      	b.n	8003bfc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_TIM_MspPostInit+0xf4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d13c      	bne.n	8003bfc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60fb      	str	r3, [r7, #12]
 8003b86:	4b1f      	ldr	r3, [pc, #124]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	6313      	str	r3, [r2, #48]	; 0x30
 8003b92:	4b1c      	ldr	r3, [pc, #112]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b18      	ldr	r3, [pc, #96]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003ba8:	f043 0304 	orr.w	r3, r3, #4
 8003bac:	6313      	str	r3, [r2, #48]	; 0x30
 8003bae:	4b15      	ldr	r3, [pc, #84]	; (8003c04 <HAL_TIM_MspPostInit+0xec>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bce:	f107 0314 	add.w	r3, r7, #20
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	480e      	ldr	r0, [pc, #56]	; (8003c10 <HAL_TIM_MspPostInit+0xf8>)
 8003bd6:	f000 fd71 	bl	80046bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003bda:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be0:	2302      	movs	r3, #2
 8003be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be8:	2300      	movs	r3, #0
 8003bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003bec:	2302      	movs	r3, #2
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bf0:	f107 0314 	add.w	r3, r7, #20
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	4807      	ldr	r0, [pc, #28]	; (8003c14 <HAL_TIM_MspPostInit+0xfc>)
 8003bf8:	f000 fd60 	bl	80046bc <HAL_GPIO_Init>
}
 8003bfc:	bf00      	nop
 8003bfe:	3728      	adds	r7, #40	; 0x28
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	40023800 	.word	0x40023800
 8003c08:	40020000 	.word	0x40020000
 8003c0c:	40000400 	.word	0x40000400
 8003c10:	40020400 	.word	0x40020400
 8003c14:	40020800 	.word	0x40020800

08003c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c1c:	e7fe      	b.n	8003c1c <NMI_Handler+0x4>

08003c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c22:	e7fe      	b.n	8003c22 <HardFault_Handler+0x4>

08003c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c28:	e7fe      	b.n	8003c28 <MemManage_Handler+0x4>

08003c2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c2a:	b480      	push	{r7}
 8003c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c2e:	e7fe      	b.n	8003c2e <BusFault_Handler+0x4>

08003c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c34:	e7fe      	b.n	8003c34 <UsageFault_Handler+0x4>

08003c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c36:	b480      	push	{r7}
 8003c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c3a:	bf00      	nop
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr

08003c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c52:	b480      	push	{r7}
 8003c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c56:	bf00      	nop
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c64:	f000 f964 	bl	8003f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <OTG_FS_IRQHandler+0x10>)
 8003c72:	f001 fff1 	bl	8005c58 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20001f24 	.word	0x20001f24

08003c80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c80:	b480      	push	{r7}
 8003c82:	af00      	add	r7, sp, #0
	return 1;
 8003c84:	2301      	movs	r3, #1
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <_kill>:

int _kill(int pid, int sig)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c9a:	f009 fe57 	bl	800d94c <__errno>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	2316      	movs	r3, #22
 8003ca2:	6013      	str	r3, [r2, #0]
	return -1;
 8003ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <_exit>:

void _exit (int status)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ffe7 	bl	8003c90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003cc2:	e7fe      	b.n	8003cc2 <_exit+0x12>

08003cc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e00a      	b.n	8003cec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003cd6:	f3af 8000 	nop.w
 8003cda:	4601      	mov	r1, r0
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	60ba      	str	r2, [r7, #8]
 8003ce2:	b2ca      	uxtb	r2, r1
 8003ce4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	617b      	str	r3, [r7, #20]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	dbf0      	blt.n	8003cd6 <_read+0x12>
	}

return len;
 8003cf4:	687b      	ldr	r3, [r7, #4]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3718      	adds	r7, #24
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b086      	sub	sp, #24
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	e009      	b.n	8003d24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	60ba      	str	r2, [r7, #8]
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	3301      	adds	r3, #1
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	697a      	ldr	r2, [r7, #20]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	dbf1      	blt.n	8003d10 <_write+0x12>
	}
	return len;
 8003d2c:	687b      	ldr	r3, [r7, #4]
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}

08003d36 <_close>:

int _close(int file)
{
 8003d36:	b480      	push	{r7}
 8003d38:	b083      	sub	sp, #12
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	6078      	str	r0, [r7, #4]
	return -1;
 8003d3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
 8003d56:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d5e:	605a      	str	r2, [r3, #4]
	return 0;
 8003d60:	2300      	movs	r3, #0
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <_isatty>:

int _isatty(int file)
{
 8003d6e:	b480      	push	{r7}
 8003d70:	b083      	sub	sp, #12
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	return 1;
 8003d76:	2301      	movs	r3, #1
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b085      	sub	sp, #20
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
	return 0;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da8:	4a14      	ldr	r2, [pc, #80]	; (8003dfc <_sbrk+0x5c>)
 8003daa:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <_sbrk+0x60>)
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <_sbrk+0x64>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d102      	bne.n	8003dc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003dbc:	4b11      	ldr	r3, [pc, #68]	; (8003e04 <_sbrk+0x64>)
 8003dbe:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <_sbrk+0x68>)
 8003dc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dc2:	4b10      	ldr	r3, [pc, #64]	; (8003e04 <_sbrk+0x64>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4413      	add	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d207      	bcs.n	8003de0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dd0:	f009 fdbc 	bl	800d94c <__errno>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	230c      	movs	r3, #12
 8003dd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003dda:	f04f 33ff 	mov.w	r3, #4294967295
 8003dde:	e009      	b.n	8003df4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003de0:	4b08      	ldr	r3, [pc, #32]	; (8003e04 <_sbrk+0x64>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de6:	4b07      	ldr	r3, [pc, #28]	; (8003e04 <_sbrk+0x64>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4413      	add	r3, r2
 8003dee:	4a05      	ldr	r2, [pc, #20]	; (8003e04 <_sbrk+0x64>)
 8003df0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003df2:	68fb      	ldr	r3, [r7, #12]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3718      	adds	r7, #24
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20020000 	.word	0x20020000
 8003e00:	00000400 	.word	0x00000400
 8003e04:	200003a0 	.word	0x200003a0
 8003e08:	20002330 	.word	0x20002330

08003e0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e10:	4b08      	ldr	r3, [pc, #32]	; (8003e34 <SystemInit+0x28>)
 8003e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <SystemInit+0x28>)
 8003e18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <SystemInit+0x28>)
 8003e22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e26:	609a      	str	r2, [r3, #8]
#endif
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	e000ed00 	.word	0xe000ed00

08003e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e70 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e3c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e3e:	e003      	b.n	8003e48 <LoopCopyDataInit>

08003e40 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e42:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e44:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e46:	3104      	adds	r1, #4

08003e48 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003e48:	480b      	ldr	r0, [pc, #44]	; (8003e78 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003e4c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003e4e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003e50:	d3f6      	bcc.n	8003e40 <CopyDataInit>
  ldr  r2, =_sbss
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003e54:	e002      	b.n	8003e5c <LoopFillZerobss>

08003e56 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003e56:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003e58:	f842 3b04 	str.w	r3, [r2], #4

08003e5c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003e5c:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003e5e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003e60:	d3f9      	bcc.n	8003e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003e62:	f7ff ffd3 	bl	8003e0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e66:	f009 fd89 	bl	800d97c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e6a:	f7fe fd35 	bl	80028d8 <main>
  bx  lr    
 8003e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e70:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003e74:	08012be8 	.word	0x08012be8
  ldr  r0, =_sdata
 8003e78:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003e7c:	20000384 	.word	0x20000384
  ldr  r2, =_sbss
 8003e80:	20000384 	.word	0x20000384
  ldr  r3, = _ebss
 8003e84:	20002330 	.word	0x20002330

08003e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e88:	e7fe      	b.n	8003e88 <ADC_IRQHandler>
	...

08003e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003e90:	4b0e      	ldr	r3, [pc, #56]	; (8003ecc <HAL_Init+0x40>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <HAL_Init+0x40>)
 8003e96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003e9c:	4b0b      	ldr	r3, [pc, #44]	; (8003ecc <HAL_Init+0x40>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a0a      	ldr	r2, [pc, #40]	; (8003ecc <HAL_Init+0x40>)
 8003ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ea6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ea8:	4b08      	ldr	r3, [pc, #32]	; (8003ecc <HAL_Init+0x40>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a07      	ldr	r2, [pc, #28]	; (8003ecc <HAL_Init+0x40>)
 8003eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003eb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003eb4:	2003      	movs	r0, #3
 8003eb6:	f000 fbbf 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003eba:	2000      	movs	r0, #0
 8003ebc:	f000 f808 	bl	8003ed0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ec0:	f7ff fc3e 	bl	8003740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023c00 	.word	0x40023c00

08003ed0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ed8:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <HAL_InitTick+0x54>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b12      	ldr	r3, [pc, #72]	; (8003f28 <HAL_InitTick+0x58>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ee6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fbd7 	bl	80046a2 <HAL_SYSTICK_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00e      	b.n	8003f1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2b0f      	cmp	r3, #15
 8003f02:	d80a      	bhi.n	8003f1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f04:	2200      	movs	r2, #0
 8003f06:	6879      	ldr	r1, [r7, #4]
 8003f08:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0c:	f000 fb9f 	bl	800464e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f10:	4a06      	ldr	r2, [pc, #24]	; (8003f2c <HAL_InitTick+0x5c>)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e000      	b.n	8003f1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000000 	.word	0x20000000
 8003f28:	20000008 	.word	0x20000008
 8003f2c:	20000004 	.word	0x20000004

08003f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f34:	4b06      	ldr	r3, [pc, #24]	; (8003f50 <HAL_IncTick+0x20>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <HAL_IncTick+0x24>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4413      	add	r3, r2
 8003f40:	4a04      	ldr	r2, [pc, #16]	; (8003f54 <HAL_IncTick+0x24>)
 8003f42:	6013      	str	r3, [r2, #0]
}
 8003f44:	bf00      	nop
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	20000008 	.word	0x20000008
 8003f54:	200005e0 	.word	0x200005e0

08003f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_GetTick+0x14>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	200005e0 	.word	0x200005e0

08003f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff ffee 	bl	8003f58 <HAL_GetTick>
 8003f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d005      	beq.n	8003f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f8a:	4b09      	ldr	r3, [pc, #36]	; (8003fb0 <HAL_Delay+0x40>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4413      	add	r3, r2
 8003f94:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f96:	bf00      	nop
 8003f98:	f7ff ffde 	bl	8003f58 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d8f7      	bhi.n	8003f98 <HAL_Delay+0x28>
  {
  }
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	20000008 	.word	0x20000008

08003fb4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e033      	b.n	8004032 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d109      	bne.n	8003fe6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff fbdc 	bl	8003790 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d118      	bne.n	8004024 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ffa:	f023 0302 	bic.w	r3, r3, #2
 8003ffe:	f043 0202 	orr.w	r2, r3, #2
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f94a 	bl	80042a0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f023 0303 	bic.w	r3, r3, #3
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	; 0x40
 8004022:	e001      	b.n	8004028 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004030:	7bfb      	ldrb	r3, [r7, #15]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3710      	adds	r7, #16
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_ADC_ConfigChannel+0x1c>
 8004054:	2302      	movs	r3, #2
 8004056:	e113      	b.n	8004280 <HAL_ADC_ConfigChannel+0x244>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b09      	cmp	r3, #9
 8004066:	d925      	bls.n	80040b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68d9      	ldr	r1, [r3, #12]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	b29b      	uxth	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	3b1e      	subs	r3, #30
 800407e:	2207      	movs	r2, #7
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	43da      	mvns	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	400a      	ands	r2, r1
 800408c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68d9      	ldr	r1, [r3, #12]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	b29b      	uxth	r3, r3
 800409e:	4618      	mov	r0, r3
 80040a0:	4603      	mov	r3, r0
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4403      	add	r3, r0
 80040a6:	3b1e      	subs	r3, #30
 80040a8:	409a      	lsls	r2, r3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	60da      	str	r2, [r3, #12]
 80040b2:	e022      	b.n	80040fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6919      	ldr	r1, [r3, #16]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	2207      	movs	r2, #7
 80040ca:	fa02 f303 	lsl.w	r3, r2, r3
 80040ce:	43da      	mvns	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	400a      	ands	r2, r1
 80040d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6919      	ldr	r1, [r3, #16]
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	4618      	mov	r0, r3
 80040ea:	4603      	mov	r3, r0
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	4403      	add	r3, r0
 80040f0:	409a      	lsls	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	2b06      	cmp	r3, #6
 8004100:	d824      	bhi.n	800414c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	3b05      	subs	r3, #5
 8004114:	221f      	movs	r2, #31
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	43da      	mvns	r2, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	400a      	ands	r2, r1
 8004122:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	b29b      	uxth	r3, r3
 8004130:	4618      	mov	r0, r3
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	3b05      	subs	r3, #5
 800413e:	fa00 f203 	lsl.w	r2, r0, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	635a      	str	r2, [r3, #52]	; 0x34
 800414a:	e04c      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d824      	bhi.n	800419e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	685a      	ldr	r2, [r3, #4]
 800415e:	4613      	mov	r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	4413      	add	r3, r2
 8004164:	3b23      	subs	r3, #35	; 0x23
 8004166:	221f      	movs	r2, #31
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	43da      	mvns	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	400a      	ands	r2, r1
 8004174:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	b29b      	uxth	r3, r3
 8004182:	4618      	mov	r0, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4413      	add	r3, r2
 800418e:	3b23      	subs	r3, #35	; 0x23
 8004190:	fa00 f203 	lsl.w	r2, r0, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	430a      	orrs	r2, r1
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
 800419c:	e023      	b.n	80041e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	3b41      	subs	r3, #65	; 0x41
 80041b0:	221f      	movs	r2, #31
 80041b2:	fa02 f303 	lsl.w	r3, r2, r3
 80041b6:	43da      	mvns	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	400a      	ands	r2, r1
 80041be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	4618      	mov	r0, r3
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685a      	ldr	r2, [r3, #4]
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	3b41      	subs	r3, #65	; 0x41
 80041da:	fa00 f203 	lsl.w	r2, r0, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	430a      	orrs	r2, r1
 80041e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80041e6:	4b29      	ldr	r3, [pc, #164]	; (800428c <HAL_ADC_ConfigChannel+0x250>)
 80041e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a28      	ldr	r2, [pc, #160]	; (8004290 <HAL_ADC_ConfigChannel+0x254>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d10f      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x1d8>
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b12      	cmp	r3, #18
 80041fa:	d10b      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1d      	ldr	r2, [pc, #116]	; (8004290 <HAL_ADC_ConfigChannel+0x254>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d12b      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x23a>
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <HAL_ADC_ConfigChannel+0x258>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d003      	beq.n	8004230 <HAL_ADC_ConfigChannel+0x1f4>
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b11      	cmp	r3, #17
 800422e:	d122      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a11      	ldr	r2, [pc, #68]	; (8004294 <HAL_ADC_ConfigChannel+0x258>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d111      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004252:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_ADC_ConfigChannel+0x25c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a11      	ldr	r2, [pc, #68]	; (800429c <HAL_ADC_ConfigChannel+0x260>)
 8004258:	fba2 2303 	umull	r2, r3, r2, r3
 800425c:	0c9a      	lsrs	r2, r3, #18
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004268:	e002      	b.n	8004270 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	3b01      	subs	r3, #1
 800426e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f9      	bne.n	800426a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	40012300 	.word	0x40012300
 8004290:	40012000 	.word	0x40012000
 8004294:	10000012 	.word	0x10000012
 8004298:	20000000 	.word	0x20000000
 800429c:	431bde83 	.word	0x431bde83

080042a0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80042a8:	4b79      	ldr	r3, [pc, #484]	; (8004490 <ADC_Init+0x1f0>)
 80042aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80042d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	6859      	ldr	r1, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	021a      	lsls	r2, r3, #8
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80042f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689a      	ldr	r2, [r3, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800431a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6899      	ldr	r1, [r3, #8]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	430a      	orrs	r2, r1
 800432c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	4a58      	ldr	r2, [pc, #352]	; (8004494 <ADC_Init+0x1f4>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d022      	beq.n	800437e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004346:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6899      	ldr	r1, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	689a      	ldr	r2, [r3, #8]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6899      	ldr	r1, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	e00f      	b.n	800439e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	689a      	ldr	r2, [r3, #8]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800438c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800439c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689a      	ldr	r2, [r3, #8]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0202 	bic.w	r2, r2, #2
 80043ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6899      	ldr	r1, [r3, #8]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	7e1b      	ldrb	r3, [r3, #24]
 80043b8:	005a      	lsls	r2, r3, #1
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d01b      	beq.n	8004404 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80043ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	3b01      	subs	r3, #1
 80043f8:	035a      	lsls	r2, r3, #13
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	e007      	b.n	8004414 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004412:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	3b01      	subs	r3, #1
 8004430:	051a      	lsls	r2, r3, #20
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004448:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6899      	ldr	r1, [r3, #8]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004456:	025a      	lsls	r2, r3, #9
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6899      	ldr	r1, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	029a      	lsls	r2, r3, #10
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	430a      	orrs	r2, r1
 8004482:	609a      	str	r2, [r3, #8]
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40012300 	.word	0x40012300
 8004494:	0f000001 	.word	0x0f000001

08004498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ca:	4a04      	ldr	r2, [pc, #16]	; (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	60d3      	str	r3, [r2, #12]
}
 80044d0:	bf00      	nop
 80044d2:	3714      	adds	r7, #20
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e4:	4b04      	ldr	r3, [pc, #16]	; (80044f8 <__NVIC_GetPriorityGrouping+0x18>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0307 	and.w	r3, r3, #7
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db0b      	blt.n	8004526 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4907      	ldr	r1, [pc, #28]	; (8004534 <__NVIC_EnableIRQ+0x38>)
 8004516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e100 	.word	0xe000e100

08004538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db0a      	blt.n	8004562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	490c      	ldr	r1, [pc, #48]	; (8004584 <__NVIC_SetPriority+0x4c>)
 8004552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	440b      	add	r3, r1
 800455c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004560:	e00a      	b.n	8004578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4908      	ldr	r1, [pc, #32]	; (8004588 <__NVIC_SetPriority+0x50>)
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	3b04      	subs	r3, #4
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	440b      	add	r3, r1
 8004576:	761a      	strb	r2, [r3, #24]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	; 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf28      	it	cs
 80045aa:	2304      	movcs	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d902      	bls.n	80045bc <NVIC_EncodePriority+0x30>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3b03      	subs	r3, #3
 80045ba:	e000      	b.n	80045be <NVIC_EncodePriority+0x32>
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43d9      	mvns	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	4313      	orrs	r3, r2
         );
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	; 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004604:	d301      	bcc.n	800460a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004606:	2301      	movs	r3, #1
 8004608:	e00f      	b.n	800462a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460a:	4a0a      	ldr	r2, [pc, #40]	; (8004634 <SysTick_Config+0x40>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004612:	210f      	movs	r1, #15
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f7ff ff8e 	bl	8004538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <SysTick_Config+0x40>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004622:	4b04      	ldr	r3, [pc, #16]	; (8004634 <SysTick_Config+0x40>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000e010 	.word	0xe000e010

08004638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff29 	bl	8004498 <__NVIC_SetPriorityGrouping>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800465c:	2300      	movs	r3, #0
 800465e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004660:	f7ff ff3e 	bl	80044e0 <__NVIC_GetPriorityGrouping>
 8004664:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68b9      	ldr	r1, [r7, #8]
 800466a:	6978      	ldr	r0, [r7, #20]
 800466c:	f7ff ff8e 	bl	800458c <NVIC_EncodePriority>
 8004670:	4602      	mov	r2, r0
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff5d 	bl	8004538 <__NVIC_SetPriority>
}
 800467e:	bf00      	nop
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	4603      	mov	r3, r0
 800468e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004694:	4618      	mov	r0, r3
 8004696:	f7ff ff31 	bl	80044fc <__NVIC_EnableIRQ>
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b082      	sub	sp, #8
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7ff ffa2 	bl	80045f4 <SysTick_Config>
 80046b0:	4603      	mov	r3, r0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3708      	adds	r7, #8
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046bc:	b480      	push	{r7}
 80046be:	b089      	sub	sp, #36	; 0x24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ce:	2300      	movs	r3, #0
 80046d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	61fb      	str	r3, [r7, #28]
 80046d6:	e165      	b.n	80049a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046d8:	2201      	movs	r2, #1
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	fa02 f303 	lsl.w	r3, r2, r3
 80046e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	697a      	ldr	r2, [r7, #20]
 80046e8:	4013      	ands	r3, r2
 80046ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046ec:	693a      	ldr	r2, [r7, #16]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	f040 8154 	bne.w	800499e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d00b      	beq.n	8004716 <HAL_GPIO_Init+0x5a>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	2b02      	cmp	r3, #2
 8004704:	d007      	beq.n	8004716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800470a:	2b11      	cmp	r3, #17
 800470c:	d003      	beq.n	8004716 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b12      	cmp	r3, #18
 8004714:	d130      	bne.n	8004778 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	005b      	lsls	r3, r3, #1
 8004720:	2203      	movs	r2, #3
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43db      	mvns	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	4013      	ands	r3, r2
 800472c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800474c:	2201      	movs	r2, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	43db      	mvns	r3, r3
 8004756:	69ba      	ldr	r2, [r7, #24]
 8004758:	4013      	ands	r3, r2
 800475a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 0201 	and.w	r2, r3, #1
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	4313      	orrs	r3, r2
 8004770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d003      	beq.n	80047b8 <HAL_GPIO_Init+0xfc>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b12      	cmp	r3, #18
 80047b6:	d123      	bne.n	8004800 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	08da      	lsrs	r2, r3, #3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3208      	adds	r2, #8
 80047c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	220f      	movs	r2, #15
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	08da      	lsrs	r2, r3, #3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	3208      	adds	r2, #8
 80047fa:	69b9      	ldr	r1, [r7, #24]
 80047fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	005b      	lsls	r3, r3, #1
 800480a:	2203      	movs	r2, #3
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0203 	and.w	r2, r3, #3
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80ae 	beq.w	800499e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	4b5c      	ldr	r3, [pc, #368]	; (80049b8 <HAL_GPIO_Init+0x2fc>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484a:	4a5b      	ldr	r2, [pc, #364]	; (80049b8 <HAL_GPIO_Init+0x2fc>)
 800484c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004850:	6453      	str	r3, [r2, #68]	; 0x44
 8004852:	4b59      	ldr	r3, [pc, #356]	; (80049b8 <HAL_GPIO_Init+0x2fc>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800485e:	4a57      	ldr	r2, [pc, #348]	; (80049bc <HAL_GPIO_Init+0x300>)
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	089b      	lsrs	r3, r3, #2
 8004864:	3302      	adds	r3, #2
 8004866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f003 0303 	and.w	r3, r3, #3
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	220f      	movs	r2, #15
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	43db      	mvns	r3, r3
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	4013      	ands	r3, r2
 8004880:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a4e      	ldr	r2, [pc, #312]	; (80049c0 <HAL_GPIO_Init+0x304>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d025      	beq.n	80048d6 <HAL_GPIO_Init+0x21a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4d      	ldr	r2, [pc, #308]	; (80049c4 <HAL_GPIO_Init+0x308>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d01f      	beq.n	80048d2 <HAL_GPIO_Init+0x216>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4c      	ldr	r2, [pc, #304]	; (80049c8 <HAL_GPIO_Init+0x30c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d019      	beq.n	80048ce <HAL_GPIO_Init+0x212>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4b      	ldr	r2, [pc, #300]	; (80049cc <HAL_GPIO_Init+0x310>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_GPIO_Init+0x20e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4a      	ldr	r2, [pc, #296]	; (80049d0 <HAL_GPIO_Init+0x314>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00d      	beq.n	80048c6 <HAL_GPIO_Init+0x20a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a49      	ldr	r2, [pc, #292]	; (80049d4 <HAL_GPIO_Init+0x318>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d007      	beq.n	80048c2 <HAL_GPIO_Init+0x206>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a48      	ldr	r2, [pc, #288]	; (80049d8 <HAL_GPIO_Init+0x31c>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d101      	bne.n	80048be <HAL_GPIO_Init+0x202>
 80048ba:	2306      	movs	r3, #6
 80048bc:	e00c      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048be:	2307      	movs	r3, #7
 80048c0:	e00a      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048c2:	2305      	movs	r3, #5
 80048c4:	e008      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048c6:	2304      	movs	r3, #4
 80048c8:	e006      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048ca:	2303      	movs	r3, #3
 80048cc:	e004      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e002      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <HAL_GPIO_Init+0x21c>
 80048d6:	2300      	movs	r3, #0
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	f002 0203 	and.w	r2, r2, #3
 80048de:	0092      	lsls	r2, r2, #2
 80048e0:	4093      	lsls	r3, r2
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e8:	4934      	ldr	r1, [pc, #208]	; (80049bc <HAL_GPIO_Init+0x300>)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	089b      	lsrs	r3, r3, #2
 80048ee:	3302      	adds	r3, #2
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048f6:	4b39      	ldr	r3, [pc, #228]	; (80049dc <HAL_GPIO_Init+0x320>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800491a:	4a30      	ldr	r2, [pc, #192]	; (80049dc <HAL_GPIO_Init+0x320>)
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_GPIO_Init+0x320>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004944:	4a25      	ldr	r2, [pc, #148]	; (80049dc <HAL_GPIO_Init+0x320>)
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800494a:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_GPIO_Init+0x320>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800496e:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <HAL_GPIO_Init+0x320>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004974:	4b19      	ldr	r3, [pc, #100]	; (80049dc <HAL_GPIO_Init+0x320>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004998:	4a10      	ldr	r2, [pc, #64]	; (80049dc <HAL_GPIO_Init+0x320>)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	3301      	adds	r3, #1
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	2b0f      	cmp	r3, #15
 80049a8:	f67f ae96 	bls.w	80046d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049ac:	bf00      	nop
 80049ae:	3724      	adds	r7, #36	; 0x24
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40020000 	.word	0x40020000
 80049c4:	40020400 	.word	0x40020400
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40021400 	.word	0x40021400
 80049d8:	40021800 	.word	0x40021800
 80049dc:	40013c00 	.word	0x40013c00

080049e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	887b      	ldrh	r3, [r7, #2]
 80049f2:	4013      	ands	r3, r2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049f8:	2301      	movs	r3, #1
 80049fa:	73fb      	strb	r3, [r7, #15]
 80049fc:	e001      	b.n	8004a02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049fe:	2300      	movs	r3, #0
 8004a00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a20:	787b      	ldrb	r3, [r7, #1]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a26:	887a      	ldrh	r2, [r7, #2]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a2c:	e003      	b.n	8004a36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a2e:	887b      	ldrh	r3, [r7, #2]
 8004a30:	041a      	lsls	r2, r3, #16
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	619a      	str	r2, [r3, #24]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e11f      	b.n	8004c96 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f7fe fed4 	bl	8003818 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2224      	movs	r2, #36	; 0x24
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f022 0201 	bic.w	r2, r2, #1
 8004a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004aa8:	f002 fa90 	bl	8006fcc <HAL_RCC_GetPCLK1Freq>
 8004aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	4a7b      	ldr	r2, [pc, #492]	; (8004ca0 <HAL_I2C_Init+0x25c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d807      	bhi.n	8004ac8 <HAL_I2C_Init+0x84>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4a7a      	ldr	r2, [pc, #488]	; (8004ca4 <HAL_I2C_Init+0x260>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	bf94      	ite	ls
 8004ac0:	2301      	movls	r3, #1
 8004ac2:	2300      	movhi	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	e006      	b.n	8004ad6 <HAL_I2C_Init+0x92>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a77      	ldr	r2, [pc, #476]	; (8004ca8 <HAL_I2C_Init+0x264>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	bf94      	ite	ls
 8004ad0:	2301      	movls	r3, #1
 8004ad2:	2300      	movhi	r3, #0
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e0db      	b.n	8004c96 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4a72      	ldr	r2, [pc, #456]	; (8004cac <HAL_I2C_Init+0x268>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68ba      	ldr	r2, [r7, #8]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4a64      	ldr	r2, [pc, #400]	; (8004ca0 <HAL_I2C_Init+0x25c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d802      	bhi.n	8004b18 <HAL_I2C_Init+0xd4>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	3301      	adds	r3, #1
 8004b16:	e009      	b.n	8004b2c <HAL_I2C_Init+0xe8>
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b1e:	fb02 f303 	mul.w	r3, r2, r3
 8004b22:	4a63      	ldr	r2, [pc, #396]	; (8004cb0 <HAL_I2C_Init+0x26c>)
 8004b24:	fba2 2303 	umull	r2, r3, r2, r3
 8004b28:	099b      	lsrs	r3, r3, #6
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	687a      	ldr	r2, [r7, #4]
 8004b2e:	6812      	ldr	r2, [r2, #0]
 8004b30:	430b      	orrs	r3, r1
 8004b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4956      	ldr	r1, [pc, #344]	; (8004ca0 <HAL_I2C_Init+0x25c>)
 8004b48:	428b      	cmp	r3, r1
 8004b4a:	d80d      	bhi.n	8004b68 <HAL_I2C_Init+0x124>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	1e59      	subs	r1, r3, #1
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	bf38      	it	cc
 8004b64:	2304      	movcc	r3, #4
 8004b66:	e04f      	b.n	8004c08 <HAL_I2C_Init+0x1c4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d111      	bne.n	8004b94 <HAL_I2C_Init+0x150>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	1e58      	subs	r0, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6859      	ldr	r1, [r3, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	440b      	add	r3, r1
 8004b7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b82:	3301      	adds	r3, #1
 8004b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	bf0c      	ite	eq
 8004b8c:	2301      	moveq	r3, #1
 8004b8e:	2300      	movne	r3, #0
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	e012      	b.n	8004bba <HAL_I2C_Init+0x176>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	1e58      	subs	r0, r3, #1
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6859      	ldr	r1, [r3, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	0099      	lsls	r1, r3, #2
 8004ba4:	440b      	add	r3, r1
 8004ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004baa:	3301      	adds	r3, #1
 8004bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_I2C_Init+0x17e>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e022      	b.n	8004c08 <HAL_I2C_Init+0x1c4>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10e      	bne.n	8004be8 <HAL_I2C_Init+0x1a4>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1e58      	subs	r0, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6859      	ldr	r1, [r3, #4]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	005b      	lsls	r3, r3, #1
 8004bd6:	440b      	add	r3, r1
 8004bd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bdc:	3301      	adds	r3, #1
 8004bde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004be2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004be6:	e00f      	b.n	8004c08 <HAL_I2C_Init+0x1c4>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	1e58      	subs	r0, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6859      	ldr	r1, [r3, #4]
 8004bf0:	460b      	mov	r3, r1
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	0099      	lsls	r1, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	6809      	ldr	r1, [r1, #0]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6911      	ldr	r1, [r2, #16]
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	68d2      	ldr	r2, [r2, #12]
 8004c42:	4311      	orrs	r1, r2
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	6812      	ldr	r2, [r2, #0]
 8004c48:	430b      	orrs	r3, r1
 8004c4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695a      	ldr	r2, [r3, #20]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2220      	movs	r2, #32
 8004c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	000186a0 	.word	0x000186a0
 8004ca4:	001e847f 	.word	0x001e847f
 8004ca8:	003d08ff 	.word	0x003d08ff
 8004cac:	431bde83 	.word	0x431bde83
 8004cb0:	10624dd3 	.word	0x10624dd3

08004cb4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b088      	sub	sp, #32
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	813b      	strh	r3, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7ff f943 	bl	8003f58 <HAL_GetTick>
 8004cd2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	f040 80d9 	bne.w	8004e94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	9300      	str	r3, [sp, #0]
 8004ce6:	2319      	movs	r3, #25
 8004ce8:	2201      	movs	r2, #1
 8004cea:	496d      	ldr	r1, [pc, #436]	; (8004ea0 <HAL_I2C_Mem_Write+0x1ec>)
 8004cec:	68f8      	ldr	r0, [r7, #12]
 8004cee:	f000 fc7f 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d001      	beq.n	8004cfc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004cf8:	2302      	movs	r3, #2
 8004cfa:	e0cc      	b.n	8004e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_I2C_Mem_Write+0x56>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e0c5      	b.n	8004e96 <HAL_I2C_Mem_Write+0x1e2>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0301 	and.w	r3, r3, #1
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d007      	beq.n	8004d30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0201 	orr.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2221      	movs	r2, #33	; 0x21
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2240      	movs	r2, #64	; 0x40
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2200      	movs	r2, #0
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004d60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	4a4d      	ldr	r2, [pc, #308]	; (8004ea4 <HAL_I2C_Mem_Write+0x1f0>)
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d72:	88f8      	ldrh	r0, [r7, #6]
 8004d74:	893a      	ldrh	r2, [r7, #8]
 8004d76:	8979      	ldrh	r1, [r7, #10]
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	9301      	str	r3, [sp, #4]
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7e:	9300      	str	r3, [sp, #0]
 8004d80:	4603      	mov	r3, r0
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 fab6 	bl	80052f4 <I2C_RequestMemoryWrite>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d052      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e081      	b.n	8004e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 fd00 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d107      	bne.n	8004dba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004db8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e06b      	b.n	8004e96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	781a      	ldrb	r2, [r3, #0]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b01      	subs	r3, #1
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d11b      	bne.n	8004e34 <HAL_I2C_Mem_Write+0x180>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d017      	beq.n	8004e34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e08:	781a      	ldrb	r2, [r3, #0]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1aa      	bne.n	8004d92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fcec 	bl	800581e <I2C_WaitOnBTFFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00d      	beq.n	8004e68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	2b04      	cmp	r3, #4
 8004e52:	d107      	bne.n	8004e64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e016      	b.n	8004e96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2220      	movs	r2, #32
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	e000      	b.n	8004e96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e94:	2302      	movs	r3, #2
  }
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	00100002 	.word	0x00100002
 8004ea4:	ffff0000 	.word	0xffff0000

08004ea8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b08c      	sub	sp, #48	; 0x30
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	817b      	strh	r3, [r7, #10]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	813b      	strh	r3, [r7, #8]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ec2:	f7ff f849 	bl	8003f58 <HAL_GetTick>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b20      	cmp	r3, #32
 8004ed2:	f040 8208 	bne.w	80052e6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2319      	movs	r3, #25
 8004edc:	2201      	movs	r2, #1
 8004ede:	497b      	ldr	r1, [pc, #492]	; (80050cc <HAL_I2C_Mem_Read+0x224>)
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fb85 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d001      	beq.n	8004ef0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004eec:	2302      	movs	r3, #2
 8004eee:	e1fb      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_I2C_Mem_Read+0x56>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e1f4      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d007      	beq.n	8004f24 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f32:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2222      	movs	r2, #34	; 0x22
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2240      	movs	r2, #64	; 0x40
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004f54:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4a5b      	ldr	r2, [pc, #364]	; (80050d0 <HAL_I2C_Mem_Read+0x228>)
 8004f64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f66:	88f8      	ldrh	r0, [r7, #6]
 8004f68:	893a      	ldrh	r2, [r7, #8]
 8004f6a:	8979      	ldrh	r1, [r7, #10]
 8004f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	9300      	str	r3, [sp, #0]
 8004f74:	4603      	mov	r3, r0
 8004f76:	68f8      	ldr	r0, [r7, #12]
 8004f78:	f000 fa52 	bl	8005420 <I2C_RequestMemoryRead>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e1b0      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d113      	bne.n	8004fb6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f8e:	2300      	movs	r3, #0
 8004f90:	623b      	str	r3, [r7, #32]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	623b      	str	r3, [r7, #32]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	623b      	str	r3, [r7, #32]
 8004fa2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	e184      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d11b      	bne.n	8004ff6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	61fb      	str	r3, [r7, #28]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e164      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d11b      	bne.n	8005036 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800501c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800501e:	2300      	movs	r3, #0
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	61bb      	str	r3, [r7, #24]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	61bb      	str	r3, [r7, #24]
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	e144      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005036:	2300      	movs	r3, #0
 8005038:	617b      	str	r3, [r7, #20]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	617b      	str	r3, [r7, #20]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800504c:	e138      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005052:	2b03      	cmp	r3, #3
 8005054:	f200 80f1 	bhi.w	800523a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800505c:	2b01      	cmp	r3, #1
 800505e:	d123      	bne.n	80050a8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005062:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fc1b 	bl	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e139      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005090:	3b01      	subs	r3, #1
 8005092:	b29a      	uxth	r2, r3
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050a6:	e10b      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d14e      	bne.n	800514e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b6:	2200      	movs	r2, #0
 80050b8:	4906      	ldr	r1, [pc, #24]	; (80050d4 <HAL_I2C_Mem_Read+0x22c>)
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f000 fa98 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e10e      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
 80050ca:	bf00      	nop
 80050cc:	00100002 	.word	0x00100002
 80050d0:	ffff0000 	.word	0xffff0000
 80050d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	691a      	ldr	r2, [r3, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	b2d2      	uxtb	r2, r2
 80050f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	1c5a      	adds	r2, r3, #1
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005110:	b29b      	uxth	r3, r3
 8005112:	3b01      	subs	r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005142:	b29b      	uxth	r3, r3
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800514c:	e0b8      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005154:	2200      	movs	r2, #0
 8005156:	4966      	ldr	r1, [pc, #408]	; (80052f0 <HAL_I2C_Mem_Read+0x448>)
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 fa49 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0bf      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005176:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005182:	b2d2      	uxtb	r2, r2
 8005184:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	2200      	movs	r2, #0
 80051b2:	494f      	ldr	r1, [pc, #316]	; (80052f0 <HAL_I2C_Mem_Read+0x448>)
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 fa1b 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e091      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	1c5a      	adds	r2, r3, #1
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005222:	3b01      	subs	r3, #1
 8005224:	b29a      	uxth	r2, r3
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005238:	e042      	b.n	80052c0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800523a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800523c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800523e:	68f8      	ldr	r0, [r7, #12]
 8005240:	f000 fb2e 	bl	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e04c      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	691a      	ldr	r2, [r3, #16]
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005276:	b29b      	uxth	r3, r3
 8005278:	3b01      	subs	r3, #1
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b04      	cmp	r3, #4
 800528c:	d118      	bne.n	80052c0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	691a      	ldr	r2, [r3, #16]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	b2d2      	uxtb	r2, r2
 800529a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052aa:	3b01      	subs	r3, #1
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	f47f aec2 	bne.w	800504e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2220      	movs	r2, #32
 80052ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80052e2:	2300      	movs	r3, #0
 80052e4:	e000      	b.n	80052e8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80052e6:	2302      	movs	r3, #2
  }
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3728      	adds	r7, #40	; 0x28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	00010004 	.word	0x00010004

080052f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	4608      	mov	r0, r1
 80052fe:	4611      	mov	r1, r2
 8005300:	461a      	mov	r2, r3
 8005302:	4603      	mov	r3, r0
 8005304:	817b      	strh	r3, [r7, #10]
 8005306:	460b      	mov	r3, r1
 8005308:	813b      	strh	r3, [r7, #8]
 800530a:	4613      	mov	r3, r2
 800530c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800531c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	2200      	movs	r2, #0
 8005326:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	f000 f960 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00d      	beq.n	8005352 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005344:	d103      	bne.n	800534e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e05f      	b.n	8005412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005352:	897b      	ldrh	r3, [r7, #10]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	461a      	mov	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005360:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	6a3a      	ldr	r2, [r7, #32]
 8005366:	492d      	ldr	r1, [pc, #180]	; (800541c <I2C_RequestMemoryWrite+0x128>)
 8005368:	68f8      	ldr	r0, [r7, #12]
 800536a:	f000 f998 	bl	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e04c      	b.n	8005412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	617b      	str	r3, [r7, #20]
 800538c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	6a39      	ldr	r1, [r7, #32]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fa02 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00d      	beq.n	80053ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d107      	bne.n	80053b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e02b      	b.n	8005412 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80053ba:	88fb      	ldrh	r3, [r7, #6]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053c0:	893b      	ldrh	r3, [r7, #8]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	611a      	str	r2, [r3, #16]
 80053ca:	e021      	b.n	8005410 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053cc:	893b      	ldrh	r3, [r7, #8]
 80053ce:	0a1b      	lsrs	r3, r3, #8
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053dc:	6a39      	ldr	r1, [r7, #32]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f9dc 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00d      	beq.n	8005406 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	d107      	bne.n	8005402 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005400:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e005      	b.n	8005412 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005406:	893b      	ldrh	r3, [r7, #8]
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	00010002 	.word	0x00010002

08005420 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af02      	add	r7, sp, #8
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	461a      	mov	r2, r3
 800542e:	4603      	mov	r3, r0
 8005430:	817b      	strh	r3, [r7, #10]
 8005432:	460b      	mov	r3, r1
 8005434:	813b      	strh	r3, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005448:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005458:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	9300      	str	r3, [sp, #0]
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	2200      	movs	r2, #0
 8005462:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 f8c2 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00d      	beq.n	800548e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800547c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005480:	d103      	bne.n	800548a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005488:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e0aa      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	b2db      	uxtb	r3, r3
 8005492:	461a      	mov	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800549c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	6a3a      	ldr	r2, [r7, #32]
 80054a2:	4952      	ldr	r1, [pc, #328]	; (80055ec <I2C_RequestMemoryRead+0x1cc>)
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	f000 f8fa 	bl	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e097      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054b4:	2300      	movs	r3, #0
 80054b6:	617b      	str	r3, [r7, #20]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	617b      	str	r3, [r7, #20]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054cc:	6a39      	ldr	r1, [r7, #32]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 f964 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00d      	beq.n	80054f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054de:	2b04      	cmp	r3, #4
 80054e0:	d107      	bne.n	80054f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e076      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054f6:	88fb      	ldrh	r3, [r7, #6]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d105      	bne.n	8005508 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80054fc:	893b      	ldrh	r3, [r7, #8]
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	611a      	str	r2, [r3, #16]
 8005506:	e021      	b.n	800554c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005508:	893b      	ldrh	r3, [r7, #8]
 800550a:	0a1b      	lsrs	r3, r3, #8
 800550c:	b29b      	uxth	r3, r3
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005518:	6a39      	ldr	r1, [r7, #32]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 f93e 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00d      	beq.n	8005542 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800552a:	2b04      	cmp	r3, #4
 800552c:	d107      	bne.n	800553e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800553c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e050      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005542:	893b      	ldrh	r3, [r7, #8]
 8005544:	b2da      	uxtb	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	6a39      	ldr	r1, [r7, #32]
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f923 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00d      	beq.n	8005578 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005560:	2b04      	cmp	r3, #4
 8005562:	d107      	bne.n	8005574 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005572:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005574:	2301      	movs	r3, #1
 8005576:	e035      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005586:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	2200      	movs	r2, #0
 8005590:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f000 f82b 	bl	80055f0 <I2C_WaitOnFlagUntilTimeout>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00d      	beq.n	80055bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ae:	d103      	bne.n	80055b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e013      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80055bc:	897b      	ldrh	r3, [r7, #10]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ce:	6a3a      	ldr	r2, [r7, #32]
 80055d0:	4906      	ldr	r1, [pc, #24]	; (80055ec <I2C_RequestMemoryRead+0x1cc>)
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f863 	bl	800569e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d001      	beq.n	80055e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e000      	b.n	80055e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}
 80055ec:	00010002 	.word	0x00010002

080055f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4613      	mov	r3, r2
 80055fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005600:	e025      	b.n	800564e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005608:	d021      	beq.n	800564e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800560a:	f7fe fca5 	bl	8003f58 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d302      	bcc.n	8005620 <I2C_WaitOnFlagUntilTimeout+0x30>
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d116      	bne.n	800564e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2200      	movs	r2, #0
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2220      	movs	r2, #32
 800562a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	f043 0220 	orr.w	r2, r3, #32
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e023      	b.n	8005696 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	0c1b      	lsrs	r3, r3, #16
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b01      	cmp	r3, #1
 8005656:	d10d      	bne.n	8005674 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	43da      	mvns	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	4013      	ands	r3, r2
 8005664:	b29b      	uxth	r3, r3
 8005666:	2b00      	cmp	r3, #0
 8005668:	bf0c      	ite	eq
 800566a:	2301      	moveq	r3, #1
 800566c:	2300      	movne	r3, #0
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	e00c      	b.n	800568e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	43da      	mvns	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	4013      	ands	r3, r2
 8005680:	b29b      	uxth	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	bf0c      	ite	eq
 8005686:	2301      	moveq	r3, #1
 8005688:	2300      	movne	r3, #0
 800568a:	b2db      	uxtb	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	79fb      	ldrb	r3, [r7, #7]
 8005690:	429a      	cmp	r2, r3
 8005692:	d0b6      	beq.n	8005602 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
 80056aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056ac:	e051      	b.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056bc:	d123      	bne.n	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f2:	f043 0204 	orr.w	r2, r3, #4
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e046      	b.n	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d021      	beq.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800570e:	f7fe fc23 	bl	8003f58 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	429a      	cmp	r2, r3
 800571c:	d302      	bcc.n	8005724 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d116      	bne.n	8005752 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2200      	movs	r2, #0
 8005728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573e:	f043 0220 	orr.w	r2, r3, #32
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e020      	b.n	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b01      	cmp	r3, #1
 800575a:	d10c      	bne.n	8005776 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	43da      	mvns	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4013      	ands	r3, r2
 8005768:	b29b      	uxth	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	bf14      	ite	ne
 800576e:	2301      	movne	r3, #1
 8005770:	2300      	moveq	r3, #0
 8005772:	b2db      	uxtb	r3, r3
 8005774:	e00b      	b.n	800578e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	43da      	mvns	r2, r3
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4013      	ands	r3, r2
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b00      	cmp	r3, #0
 8005786:	bf14      	ite	ne
 8005788:	2301      	movne	r3, #1
 800578a:	2300      	moveq	r3, #0
 800578c:	b2db      	uxtb	r3, r3
 800578e:	2b00      	cmp	r3, #0
 8005790:	d18d      	bne.n	80056ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a8:	e02d      	b.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f8ce 	bl	800594c <I2C_IsAcknowledgeFailed>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e02d      	b.n	8005816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d021      	beq.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fe fbc9 	bl	8003f58 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d116      	bne.n	8005806 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e007      	b.n	8005816 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695b      	ldr	r3, [r3, #20]
 800580c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005810:	2b80      	cmp	r3, #128	; 0x80
 8005812:	d1ca      	bne.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800581e:	b580      	push	{r7, lr}
 8005820:	b084      	sub	sp, #16
 8005822:	af00      	add	r7, sp, #0
 8005824:	60f8      	str	r0, [r7, #12]
 8005826:	60b9      	str	r1, [r7, #8]
 8005828:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800582a:	e02d      	b.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 f88d 	bl	800594c <I2C_IsAcknowledgeFailed>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e02d      	b.n	8005898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d021      	beq.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005844:	f7fe fb88 	bl	8003f58 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	429a      	cmp	r2, r3
 8005852:	d302      	bcc.n	800585a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d116      	bne.n	8005888 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2220      	movs	r2, #32
 8005864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e007      	b.n	8005898 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	f003 0304 	and.w	r3, r3, #4
 8005892:	2b04      	cmp	r3, #4
 8005894:	d1ca      	bne.n	800582c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ac:	e042      	b.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	695b      	ldr	r3, [r3, #20]
 80058b4:	f003 0310 	and.w	r3, r3, #16
 80058b8:	2b10      	cmp	r3, #16
 80058ba:	d119      	bne.n	80058f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f06f 0210 	mvn.w	r2, #16
 80058c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2220      	movs	r2, #32
 80058d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e029      	b.n	8005944 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058f0:	f7fe fb32 	bl	8003f58 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d302      	bcc.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d116      	bne.n	8005934 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d1b5      	bne.n	80058ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005962:	d11b      	bne.n	800599c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800596c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f043 0204 	orr.w	r2, r3, #4
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e000      	b.n	800599e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	370c      	adds	r7, #12
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr

080059aa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80059aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059ac:	b08f      	sub	sp, #60	; 0x3c
 80059ae:	af0a      	add	r7, sp, #40	; 0x28
 80059b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e116      	b.n	8005bea <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d106      	bne.n	80059dc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f007 fc50 	bl	800d27c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2203      	movs	r2, #3
 80059e0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4618      	mov	r0, r3
 80059fc:	f003 fe33 	bl	8009666 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	603b      	str	r3, [r7, #0]
 8005a06:	687e      	ldr	r6, [r7, #4]
 8005a08:	466d      	mov	r5, sp
 8005a0a:	f106 0410 	add.w	r4, r6, #16
 8005a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005a1e:	1d33      	adds	r3, r6, #4
 8005a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005a22:	6838      	ldr	r0, [r7, #0]
 8005a24:	f003 fd0a 	bl	800943c <USB_CoreInit>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d005      	beq.n	8005a3a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2202      	movs	r2, #2
 8005a32:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e0d7      	b.n	8005bea <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2100      	movs	r1, #0
 8005a40:	4618      	mov	r0, r3
 8005a42:	f003 fe21 	bl	8009688 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
 8005a4a:	e04a      	b.n	8005ae2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a4c:	7bfa      	ldrb	r2, [r7, #15]
 8005a4e:	6879      	ldr	r1, [r7, #4]
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	1a9b      	subs	r3, r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	440b      	add	r3, r1
 8005a5a:	333d      	adds	r3, #61	; 0x3d
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a60:	7bfa      	ldrb	r2, [r7, #15]
 8005a62:	6879      	ldr	r1, [r7, #4]
 8005a64:	4613      	mov	r3, r2
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	1a9b      	subs	r3, r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	333c      	adds	r3, #60	; 0x3c
 8005a70:	7bfa      	ldrb	r2, [r7, #15]
 8005a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a74:	7bfa      	ldrb	r2, [r7, #15]
 8005a76:	7bfb      	ldrb	r3, [r7, #15]
 8005a78:	b298      	uxth	r0, r3
 8005a7a:	6879      	ldr	r1, [r7, #4]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	440b      	add	r3, r1
 8005a86:	3342      	adds	r3, #66	; 0x42
 8005a88:	4602      	mov	r2, r0
 8005a8a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a8c:	7bfa      	ldrb	r2, [r7, #15]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	00db      	lsls	r3, r3, #3
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	333f      	adds	r3, #63	; 0x3f
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005aa0:	7bfa      	ldrb	r2, [r7, #15]
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	1a9b      	subs	r3, r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	440b      	add	r3, r1
 8005aae:	3344      	adds	r3, #68	; 0x44
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005ab4:	7bfa      	ldrb	r2, [r7, #15]
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	1a9b      	subs	r3, r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	440b      	add	r3, r1
 8005ac2:	3348      	adds	r3, #72	; 0x48
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005ac8:	7bfa      	ldrb	r2, [r7, #15]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	1a9b      	subs	r3, r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3350      	adds	r3, #80	; 0x50
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
 8005ae2:	7bfa      	ldrb	r2, [r7, #15]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d3af      	bcc.n	8005a4c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005aec:	2300      	movs	r3, #0
 8005aee:	73fb      	strb	r3, [r7, #15]
 8005af0:	e044      	b.n	8005b7c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	1a9b      	subs	r3, r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	440b      	add	r3, r1
 8005b00:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005b08:	7bfa      	ldrb	r2, [r7, #15]
 8005b0a:	6879      	ldr	r1, [r7, #4]
 8005b0c:	4613      	mov	r3, r2
 8005b0e:	00db      	lsls	r3, r3, #3
 8005b10:	1a9b      	subs	r3, r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	440b      	add	r3, r1
 8005b16:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8005b1a:	7bfa      	ldrb	r2, [r7, #15]
 8005b1c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005b1e:	7bfa      	ldrb	r2, [r7, #15]
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	1a9b      	subs	r3, r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005b30:	2200      	movs	r2, #0
 8005b32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b34:	7bfa      	ldrb	r2, [r7, #15]
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	1a9b      	subs	r3, r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	440b      	add	r3, r1
 8005b42:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005b46:	2200      	movs	r2, #0
 8005b48:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b4a:	7bfa      	ldrb	r2, [r7, #15]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	1a9b      	subs	r3, r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	440b      	add	r3, r1
 8005b58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b60:	7bfa      	ldrb	r2, [r7, #15]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	4613      	mov	r3, r2
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	1a9b      	subs	r3, r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	440b      	add	r3, r1
 8005b6e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	7bfa      	ldrb	r2, [r7, #15]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d3b5      	bcc.n	8005af2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	687e      	ldr	r6, [r7, #4]
 8005b8e:	466d      	mov	r5, sp
 8005b90:	f106 0410 	add.w	r4, r6, #16
 8005b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005ba0:	e885 0003 	stmia.w	r5, {r0, r1}
 8005ba4:	1d33      	adds	r3, r6, #4
 8005ba6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005ba8:	6838      	ldr	r0, [r7, #0]
 8005baa:	f003 fd97 	bl	80096dc <USB_DevInit>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d005      	beq.n	8005bc0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e014      	b.n	8005bea <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d102      	bne.n	8005bde <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f001 f891 	bl	8006d00 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f004 fdd2 	bl	800a78c <USB_DevDisconnect>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d101      	bne.n	8005c0e <HAL_PCD_Start+0x1c>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	e020      	b.n	8005c50 <HAL_PCD_Start+0x5e>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d109      	bne.n	8005c32 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d005      	beq.n	8005c32 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4618      	mov	r0, r3
 8005c38:	f003 fd04 	bl	8009644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f004 fd82 	bl	800a74a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b08d      	sub	sp, #52	; 0x34
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c66:	6a3b      	ldr	r3, [r7, #32]
 8005c68:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f004 fe40 	bl	800a8f4 <USB_GetMode>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 83ca 	bne.w	8006410 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f004 fda4 	bl	800a7ce <USB_ReadInterrupts>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	f000 83c0 	beq.w	800640e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4618      	mov	r0, r3
 8005c94:	f004 fd9b 	bl	800a7ce <USB_ReadInterrupts>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b02      	cmp	r3, #2
 8005ca0:	d107      	bne.n	8005cb2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	695a      	ldr	r2, [r3, #20]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f002 0202 	and.w	r2, r2, #2
 8005cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f004 fd89 	bl	800a7ce <USB_ReadInterrupts>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d161      	bne.n	8005d8a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	699a      	ldr	r2, [r3, #24]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f022 0210 	bic.w	r2, r2, #16
 8005cd4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	1a9b      	subs	r3, r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	0c5b      	lsrs	r3, r3, #17
 8005cfa:	f003 030f 	and.w	r3, r3, #15
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d124      	bne.n	8005d4c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d035      	beq.n	8005d7a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	091b      	lsrs	r3, r3, #4
 8005d16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	461a      	mov	r2, r3
 8005d20:	6a38      	ldr	r0, [r7, #32]
 8005d22:	f004 fbef 	bl	800a504 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	091b      	lsrs	r3, r3, #4
 8005d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d32:	441a      	add	r2, r3
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	699a      	ldr	r2, [r3, #24]
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	091b      	lsrs	r3, r3, #4
 8005d40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d44:	441a      	add	r2, r3
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	619a      	str	r2, [r3, #24]
 8005d4a:	e016      	b.n	8005d7a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	0c5b      	lsrs	r3, r3, #17
 8005d50:	f003 030f 	and.w	r3, r3, #15
 8005d54:	2b06      	cmp	r3, #6
 8005d56:	d110      	bne.n	8005d7a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005d5e:	2208      	movs	r2, #8
 8005d60:	4619      	mov	r1, r3
 8005d62:	6a38      	ldr	r0, [r7, #32]
 8005d64:	f004 fbce 	bl	800a504 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	699a      	ldr	r2, [r3, #24]
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	091b      	lsrs	r3, r3, #4
 8005d70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d74:	441a      	add	r2, r3
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0210 	orr.w	r2, r2, #16
 8005d88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f004 fd1d 	bl	800a7ce <USB_ReadInterrupts>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005d9e:	d16e      	bne.n	8005e7e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f004 fd23 	bl	800a7f4 <USB_ReadDevAllOutEpInterrupt>
 8005dae:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005db0:	e062      	b.n	8005e78 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db4:	f003 0301 	and.w	r3, r3, #1
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d057      	beq.n	8005e6c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	4611      	mov	r1, r2
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f004 fd48 	bl	800a85c <USB_ReadDevOutEPInterrupt>
 8005dcc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00c      	beq.n	8005df2 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005de4:	461a      	mov	r2, r3
 8005de6:	2301      	movs	r3, #1
 8005de8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005dea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fddd 	bl	80069ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	f003 0308 	and.w	r3, r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00c      	beq.n	8005e16 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e08:	461a      	mov	r2, r3
 8005e0a:	2308      	movs	r3, #8
 8005e0c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 fed7 	bl	8006bc4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	f003 0310 	and.w	r3, r3, #16
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d008      	beq.n	8005e32 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e22:	015a      	lsls	r2, r3, #5
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	4413      	add	r3, r2
 8005e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	2310      	movs	r3, #16
 8005e30:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	f003 0320 	and.w	r3, r3, #32
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d008      	beq.n	8005e4e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e48:	461a      	mov	r2, r3
 8005e4a:	2320      	movs	r3, #32
 8005e4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e64:	461a      	mov	r2, r3
 8005e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e6a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	3301      	adds	r3, #1
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e74:	085b      	lsrs	r3, r3, #1
 8005e76:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d199      	bne.n	8005db2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f004 fca3 	bl	800a7ce <USB_ReadInterrupts>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e92:	f040 80c0 	bne.w	8006016 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f004 fcc4 	bl	800a828 <USB_ReadDevAllInEpInterrupt>
 8005ea0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005ea6:	e0b2      	b.n	800600e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80a7 	beq.w	8006002 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	b2d2      	uxtb	r2, r2
 8005ebc:	4611      	mov	r1, r2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f004 fcea 	bl	800a898 <USB_ReadDevInEPInterrupt>
 8005ec4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f003 0301 	and.w	r3, r3, #1
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d057      	beq.n	8005f80 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69f9      	ldr	r1, [r7, #28]
 8005eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f00:	461a      	mov	r2, r3
 8005f02:	2301      	movs	r3, #1
 8005f04:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d132      	bne.n	8005f74 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f12:	4613      	mov	r3, r2
 8005f14:	00db      	lsls	r3, r3, #3
 8005f16:	1a9b      	subs	r3, r3, r2
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	440b      	add	r3, r1
 8005f1c:	3348      	adds	r3, #72	; 0x48
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f24:	4613      	mov	r3, r2
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	1a9b      	subs	r3, r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4403      	add	r3, r0
 8005f2e:	3344      	adds	r3, #68	; 0x44
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4419      	add	r1, r3
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f38:	4613      	mov	r3, r2
 8005f3a:	00db      	lsls	r3, r3, #3
 8005f3c:	1a9b      	subs	r3, r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4403      	add	r3, r0
 8005f42:	3348      	adds	r3, #72	; 0x48
 8005f44:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d113      	bne.n	8005f74 <HAL_PCD_IRQHandler+0x31c>
 8005f4c:	6879      	ldr	r1, [r7, #4]
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f50:	4613      	mov	r3, r2
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	1a9b      	subs	r3, r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	3350      	adds	r3, #80	; 0x50
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d108      	bne.n	8005f74 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6818      	ldr	r0, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2101      	movs	r1, #1
 8005f70:	f004 fcf2 	bl	800a958 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	4619      	mov	r1, r3
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f007 f9ff 	bl	800d37e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d008      	beq.n	8005f9c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	015a      	lsls	r2, r3, #5
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	4413      	add	r3, r2
 8005f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f96:	461a      	mov	r2, r3
 8005f98:	2308      	movs	r3, #8
 8005f9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d008      	beq.n	8005fb8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	015a      	lsls	r2, r3, #5
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d008      	beq.n	8005fd4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	461a      	mov	r2, r3
 8005fd0:	2340      	movs	r3, #64	; 0x40
 8005fd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	f003 0302 	and.w	r3, r3, #2
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d008      	beq.n	8005ff0 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	461a      	mov	r2, r3
 8005fec:	2302      	movs	r3, #2
 8005fee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005ffa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fc48 	bl	8006892 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	3301      	adds	r3, #1
 8006006:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600a:	085b      	lsrs	r3, r3, #1
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800600e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	f47f af49 	bne.w	8005ea8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4618      	mov	r0, r3
 800601c:	f004 fbd7 	bl	800a7ce <USB_ReadInterrupts>
 8006020:	4603      	mov	r3, r0
 8006022:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800602a:	d122      	bne.n	8006072 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	69fa      	ldr	r2, [r7, #28]
 8006036:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800603a:	f023 0301 	bic.w	r3, r3, #1
 800603e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8006046:	2b01      	cmp	r3, #1
 8006048:	d108      	bne.n	800605c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006052:	2100      	movs	r1, #0
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f007 fbe1 	bl	800d81c <HAL_PCDEx_LPM_Callback>
 800605a:	e002      	b.n	8006062 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f007 fa05 	bl	800d46c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695a      	ldr	r2, [r3, #20]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006070:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f004 fba9 	bl	800a7ce <USB_ReadInterrupts>
 800607c:	4603      	mov	r3, r0
 800607e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006082:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006086:	d112      	bne.n	80060ae <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b01      	cmp	r3, #1
 8006096:	d102      	bne.n	800609e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f007 f9c1 	bl	800d420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80060ac:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f004 fb8b 	bl	800a7ce <USB_ReadInterrupts>
 80060b8:	4603      	mov	r3, r0
 80060ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c2:	d121      	bne.n	8006108 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80060d2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d111      	bne.n	8006102 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ec:	089b      	lsrs	r3, r3, #2
 80060ee:	f003 020f 	and.w	r2, r3, #15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80060f8:	2101      	movs	r1, #1
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f007 fb8e 	bl	800d81c <HAL_PCDEx_LPM_Callback>
 8006100:	e002      	b.n	8006108 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006102:	6878      	ldr	r0, [r7, #4]
 8006104:	f007 f98c 	bl	800d420 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f004 fb5e 	bl	800a7ce <USB_ReadInterrupts>
 8006112:	4603      	mov	r3, r0
 8006114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	f040 80c7 	bne.w	80062ae <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800612e:	f023 0301 	bic.w	r3, r3, #1
 8006132:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2110      	movs	r1, #16
 800613a:	4618      	mov	r0, r3
 800613c:	f003 fc2c 	bl	8009998 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006140:	2300      	movs	r3, #0
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006144:	e056      	b.n	80061f4 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	015a      	lsls	r2, r3, #5
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	4413      	add	r3, r2
 800614e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006152:	461a      	mov	r2, r3
 8006154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006158:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006178:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	015a      	lsls	r2, r3, #5
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	4413      	add	r3, r2
 8006182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618a:	0151      	lsls	r1, r2, #5
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	440a      	add	r2, r1
 8006190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006194:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006198:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800619a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619c:	015a      	lsls	r2, r3, #5
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a6:	461a      	mov	r2, r3
 80061a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061ac:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80061ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	69fa      	ldr	r2, [r7, #28]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80061cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d0:	015a      	lsls	r2, r3, #5
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	4413      	add	r3, r2
 80061d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061de:	0151      	lsls	r1, r2, #5
 80061e0:	69fa      	ldr	r2, [r7, #28]
 80061e2:	440a      	add	r2, r1
 80061e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061ec:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	3301      	adds	r3, #1
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d3a3      	bcc.n	8006146 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	69fa      	ldr	r2, [r7, #28]
 8006208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800620c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006210:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800622a:	f043 030b 	orr.w	r3, r3, #11
 800622e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	69fa      	ldr	r2, [r7, #28]
 800623c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006240:	f043 030b 	orr.w	r3, r3, #11
 8006244:	6453      	str	r3, [r2, #68]	; 0x44
 8006246:	e015      	b.n	8006274 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800624e:	695b      	ldr	r3, [r3, #20]
 8006250:	69fa      	ldr	r2, [r7, #28]
 8006252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800625a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800625e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	69fa      	ldr	r2, [r7, #28]
 800626a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800626e:	f043 030b 	orr.w	r3, r3, #11
 8006272:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006282:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006286:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006298:	461a      	mov	r2, r3
 800629a:	f004 fb5d 	bl	800a958 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	695a      	ldr	r2, [r3, #20]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80062ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4618      	mov	r0, r3
 80062b4:	f004 fa8b 	bl	800a7ce <USB_ReadInterrupts>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c2:	d124      	bne.n	800630e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f004 fb21 	bl	800a910 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f003 fbc1 	bl	8009a5a <USB_GetDevSpeed>
 80062d8:	4603      	mov	r3, r0
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681c      	ldr	r4, [r3, #0]
 80062e4:	f000 fe66 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 80062e8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	461a      	mov	r2, r3
 80062f2:	4620      	mov	r0, r4
 80062f4:	f003 f904 	bl	8009500 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f007 f868 	bl	800d3ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800630c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f004 fa5b 	bl	800a7ce <USB_ReadInterrupts>
 8006318:	4603      	mov	r3, r0
 800631a:	f003 0308 	and.w	r3, r3, #8
 800631e:	2b08      	cmp	r3, #8
 8006320:	d10a      	bne.n	8006338 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f007 f845 	bl	800d3b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	695a      	ldr	r2, [r3, #20]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f002 0208 	and.w	r2, r2, #8
 8006336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4618      	mov	r0, r3
 800633e:	f004 fa46 	bl	800a7ce <USB_ReadInterrupts>
 8006342:	4603      	mov	r3, r0
 8006344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800634c:	d10f      	bne.n	800636e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800634e:	2300      	movs	r3, #0
 8006350:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006354:	b2db      	uxtb	r3, r3
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f007 f8a7 	bl	800d4ac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	695a      	ldr	r2, [r3, #20]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800636c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f004 fa2b 	bl	800a7ce <USB_ReadInterrupts>
 8006378:	4603      	mov	r3, r0
 800637a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800637e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006382:	d10f      	bne.n	80063a4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638a:	b2db      	uxtb	r3, r3
 800638c:	4619      	mov	r1, r3
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f007 f87a 	bl	800d488 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	695a      	ldr	r2, [r3, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80063a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f004 fa10 	bl	800a7ce <USB_ReadInterrupts>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b8:	d10a      	bne.n	80063d0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f007 f888 	bl	800d4d0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80063ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f004 f9fa 	bl	800a7ce <USB_ReadInterrupts>
 80063da:	4603      	mov	r3, r0
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d115      	bne.n	8006410 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f007 f878 	bl	800d4ec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	6859      	ldr	r1, [r3, #4]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69ba      	ldr	r2, [r7, #24]
 8006408:	430a      	orrs	r2, r1
 800640a:	605a      	str	r2, [r3, #4]
 800640c:	e000      	b.n	8006410 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800640e:	bf00      	nop
    }
  }
}
 8006410:	3734      	adds	r7, #52	; 0x34
 8006412:	46bd      	mov	sp, r7
 8006414:	bd90      	pop	{r4, r7, pc}

08006416 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b082      	sub	sp, #8
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	460b      	mov	r3, r1
 8006420:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_PCD_SetAddress+0x1a>
 800642c:	2302      	movs	r3, #2
 800642e:	e013      	b.n	8006458 <HAL_PCD_SetAddress+0x42>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	78fa      	ldrb	r2, [r7, #3]
 800643c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	78fa      	ldrb	r2, [r7, #3]
 8006446:	4611      	mov	r1, r2
 8006448:	4618      	mov	r0, r3
 800644a:	f004 f958 	bl	800a6fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3708      	adds	r7, #8
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	4608      	mov	r0, r1
 800646a:	4611      	mov	r1, r2
 800646c:	461a      	mov	r2, r3
 800646e:	4603      	mov	r3, r0
 8006470:	70fb      	strb	r3, [r7, #3]
 8006472:	460b      	mov	r3, r1
 8006474:	803b      	strh	r3, [r7, #0]
 8006476:	4613      	mov	r3, r2
 8006478:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800647a:	2300      	movs	r3, #0
 800647c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800647e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006482:	2b00      	cmp	r3, #0
 8006484:	da0f      	bge.n	80064a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006486:	78fb      	ldrb	r3, [r7, #3]
 8006488:	f003 020f 	and.w	r2, r3, #15
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	1a9b      	subs	r3, r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	3338      	adds	r3, #56	; 0x38
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	3304      	adds	r3, #4
 800649c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2201      	movs	r2, #1
 80064a2:	705a      	strb	r2, [r3, #1]
 80064a4:	e00f      	b.n	80064c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80064a6:	78fb      	ldrb	r3, [r7, #3]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	4613      	mov	r3, r2
 80064ae:	00db      	lsls	r3, r3, #3
 80064b0:	1a9b      	subs	r3, r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4413      	add	r3, r2
 80064bc:	3304      	adds	r3, #4
 80064be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80064c6:	78fb      	ldrb	r3, [r7, #3]
 80064c8:	f003 030f 	and.w	r3, r3, #15
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80064d2:	883a      	ldrh	r2, [r7, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	78ba      	ldrb	r2, [r7, #2]
 80064dc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	785b      	ldrb	r3, [r3, #1]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80064f0:	78bb      	ldrb	r3, [r7, #2]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d102      	bne.n	80064fc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006502:	2b01      	cmp	r3, #1
 8006504:	d101      	bne.n	800650a <HAL_PCD_EP_Open+0xaa>
 8006506:	2302      	movs	r3, #2
 8006508:	e00e      	b.n	8006528 <HAL_PCD_EP_Open+0xc8>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2201      	movs	r2, #1
 800650e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	4618      	mov	r0, r3
 800651a:	f003 fac3 	bl	8009aa4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006526:	7afb      	ldrb	r3, [r7, #11]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3710      	adds	r7, #16
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800653c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da0f      	bge.n	8006564 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006544:	78fb      	ldrb	r3, [r7, #3]
 8006546:	f003 020f 	and.w	r2, r3, #15
 800654a:	4613      	mov	r3, r2
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	1a9b      	subs	r3, r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	3338      	adds	r3, #56	; 0x38
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	4413      	add	r3, r2
 8006558:	3304      	adds	r3, #4
 800655a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2201      	movs	r2, #1
 8006560:	705a      	strb	r2, [r3, #1]
 8006562:	e00f      	b.n	8006584 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	f003 020f 	and.w	r2, r3, #15
 800656a:	4613      	mov	r3, r2
 800656c:	00db      	lsls	r3, r3, #3
 800656e:	1a9b      	subs	r3, r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006584:	78fb      	ldrb	r3, [r7, #3]
 8006586:	f003 030f 	and.w	r3, r3, #15
 800658a:	b2da      	uxtb	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006596:	2b01      	cmp	r3, #1
 8006598:	d101      	bne.n	800659e <HAL_PCD_EP_Close+0x6e>
 800659a:	2302      	movs	r3, #2
 800659c:	e00e      	b.n	80065bc <HAL_PCD_EP_Close+0x8c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68f9      	ldr	r1, [r7, #12]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f003 fb01 	bl	8009bb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b086      	sub	sp, #24
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	607a      	str	r2, [r7, #4]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	460b      	mov	r3, r1
 80065d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80065d4:	7afb      	ldrb	r3, [r7, #11]
 80065d6:	f003 020f 	and.w	r2, r3, #15
 80065da:	4613      	mov	r3, r2
 80065dc:	00db      	lsls	r3, r3, #3
 80065de:	1a9b      	subs	r3, r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	3304      	adds	r3, #4
 80065ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	683a      	ldr	r2, [r7, #0]
 80065f8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	b2da      	uxtb	r2, r3
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	2b01      	cmp	r3, #1
 8006618:	d102      	bne.n	8006620 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	f003 030f 	and.w	r3, r3, #15
 8006626:	2b00      	cmp	r3, #0
 8006628:	d109      	bne.n	800663e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6818      	ldr	r0, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	b2db      	uxtb	r3, r3
 8006634:	461a      	mov	r2, r3
 8006636:	6979      	ldr	r1, [r7, #20]
 8006638:	f003 fddc 	bl	800a1f4 <USB_EP0StartXfer>
 800663c:	e008      	b.n	8006650 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6818      	ldr	r0, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	461a      	mov	r2, r3
 800664a:	6979      	ldr	r1, [r7, #20]
 800664c:	f003 fb8e 	bl	8009d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	460b      	mov	r3, r1
 8006664:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006666:	78fb      	ldrb	r3, [r7, #3]
 8006668:	f003 020f 	and.w	r2, r3, #15
 800666c:	6879      	ldr	r1, [r7, #4]
 800666e:	4613      	mov	r3, r2
 8006670:	00db      	lsls	r3, r3, #3
 8006672:	1a9b      	subs	r3, r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	440b      	add	r3, r1
 8006678:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800667c:	681b      	ldr	r3, [r3, #0]
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b086      	sub	sp, #24
 800668e:	af00      	add	r7, sp, #0
 8006690:	60f8      	str	r0, [r7, #12]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	460b      	mov	r3, r1
 8006698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800669a:	7afb      	ldrb	r3, [r7, #11]
 800669c:	f003 020f 	and.w	r2, r3, #15
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	3338      	adds	r3, #56	; 0x38
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	3304      	adds	r3, #4
 80066b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	683a      	ldr	r2, [r7, #0]
 80066bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2200      	movs	r2, #0
 80066c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	2201      	movs	r2, #1
 80066c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066ca:	7afb      	ldrb	r3, [r7, #11]
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d102      	bne.n	80066e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80066e4:	7afb      	ldrb	r3, [r7, #11]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d109      	bne.n	8006702 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	461a      	mov	r2, r3
 80066fa:	6979      	ldr	r1, [r7, #20]
 80066fc:	f003 fd7a 	bl	800a1f4 <USB_EP0StartXfer>
 8006700:	e008      	b.n	8006714 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6818      	ldr	r0, [r3, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	b2db      	uxtb	r3, r3
 800670c:	461a      	mov	r2, r3
 800670e:	6979      	ldr	r1, [r7, #20]
 8006710:	f003 fb2c 	bl	8009d6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]
 8006726:	460b      	mov	r3, r1
 8006728:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	f003 020f 	and.w	r2, r3, #15
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d901      	bls.n	800673c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e050      	b.n	80067de <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800673c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006740:	2b00      	cmp	r3, #0
 8006742:	da0f      	bge.n	8006764 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006744:	78fb      	ldrb	r3, [r7, #3]
 8006746:	f003 020f 	and.w	r2, r3, #15
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	3338      	adds	r3, #56	; 0x38
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	4413      	add	r3, r2
 8006758:	3304      	adds	r3, #4
 800675a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	705a      	strb	r2, [r3, #1]
 8006762:	e00d      	b.n	8006780 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	4613      	mov	r3, r2
 8006768:	00db      	lsls	r3, r3, #3
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	4413      	add	r3, r2
 8006776:	3304      	adds	r3, #4
 8006778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2201      	movs	r2, #1
 8006784:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	f003 030f 	and.w	r3, r3, #15
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006798:	2b01      	cmp	r3, #1
 800679a:	d101      	bne.n	80067a0 <HAL_PCD_EP_SetStall+0x82>
 800679c:	2302      	movs	r3, #2
 800679e:	e01e      	b.n	80067de <HAL_PCD_EP_SetStall+0xc0>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68f9      	ldr	r1, [r7, #12]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f003 fed1 	bl	800a556 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	b2d9      	uxtb	r1, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80067ce:	461a      	mov	r2, r3
 80067d0:	f004 f8c2 	bl	800a958 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3710      	adds	r7, #16
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}

080067e6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067e6:	b580      	push	{r7, lr}
 80067e8:	b084      	sub	sp, #16
 80067ea:	af00      	add	r7, sp, #0
 80067ec:	6078      	str	r0, [r7, #4]
 80067ee:	460b      	mov	r3, r1
 80067f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80067f2:	78fb      	ldrb	r3, [r7, #3]
 80067f4:	f003 020f 	and.w	r2, r3, #15
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d901      	bls.n	8006804 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e042      	b.n	800688a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006808:	2b00      	cmp	r3, #0
 800680a:	da0f      	bge.n	800682c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800680c:	78fb      	ldrb	r3, [r7, #3]
 800680e:	f003 020f 	and.w	r2, r3, #15
 8006812:	4613      	mov	r3, r2
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	1a9b      	subs	r3, r3, r2
 8006818:	009b      	lsls	r3, r3, #2
 800681a:	3338      	adds	r3, #56	; 0x38
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	4413      	add	r3, r2
 8006820:	3304      	adds	r3, #4
 8006822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	705a      	strb	r2, [r3, #1]
 800682a:	e00f      	b.n	800684c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	f003 020f 	and.w	r2, r3, #15
 8006832:	4613      	mov	r3, r2
 8006834:	00db      	lsls	r3, r3, #3
 8006836:	1a9b      	subs	r3, r3, r2
 8006838:	009b      	lsls	r3, r3, #2
 800683a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	3304      	adds	r3, #4
 8006844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2200      	movs	r2, #0
 800684a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	f003 030f 	and.w	r3, r3, #15
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_PCD_EP_ClrStall+0x86>
 8006868:	2302      	movs	r3, #2
 800686a:	e00e      	b.n	800688a <HAL_PCD_EP_ClrStall+0xa4>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68f9      	ldr	r1, [r7, #12]
 800687a:	4618      	mov	r0, r3
 800687c:	f003 fed9 	bl	800a632 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b08a      	sub	sp, #40	; 0x28
 8006896:	af02      	add	r7, sp, #8
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	1a9b      	subs	r3, r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	3338      	adds	r3, #56	; 0x38
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	3304      	adds	r3, #4
 80068b8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	699a      	ldr	r2, [r3, #24]
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	429a      	cmp	r2, r3
 80068c4:	d901      	bls.n	80068ca <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e06c      	b.n	80069a4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d902      	bls.n	80068e6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	3303      	adds	r3, #3
 80068ea:	089b      	lsrs	r3, r3, #2
 80068ec:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80068ee:	e02b      	b.n	8006948 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	695a      	ldr	r2, [r3, #20]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	69fa      	ldr	r2, [r7, #28]
 8006902:	429a      	cmp	r2, r3
 8006904:	d902      	bls.n	800690c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3303      	adds	r3, #3
 8006910:	089b      	lsrs	r3, r3, #2
 8006912:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	68d9      	ldr	r1, [r3, #12]
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006924:	b2db      	uxtb	r3, r3
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	4603      	mov	r3, r0
 800692a:	6978      	ldr	r0, [r7, #20]
 800692c:	f003 fdb5 	bl	800a49a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	68da      	ldr	r2, [r3, #12]
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	441a      	add	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	015a      	lsls	r2, r3, #5
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	4413      	add	r3, r2
 8006950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	b29b      	uxth	r3, r3
 8006958:	69ba      	ldr	r2, [r7, #24]
 800695a:	429a      	cmp	r2, r3
 800695c:	d809      	bhi.n	8006972 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006966:	429a      	cmp	r2, r3
 8006968:	d203      	bcs.n	8006972 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	695b      	ldr	r3, [r3, #20]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1be      	bne.n	80068f0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	695a      	ldr	r2, [r3, #20]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	429a      	cmp	r2, r3
 800697c:	d811      	bhi.n	80069a2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	2201      	movs	r2, #1
 8006986:	fa02 f303 	lsl.w	r3, r2, r3
 800698a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	43db      	mvns	r3, r3
 8006998:	6939      	ldr	r1, [r7, #16]
 800699a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800699e:	4013      	ands	r3, r2
 80069a0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	333c      	adds	r3, #60	; 0x3c
 80069c4:	3304      	adds	r3, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	015a      	lsls	r2, r3, #5
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	4413      	add	r3, r2
 80069d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	f040 80a0 	bne.w	8006b24 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	f003 0308 	and.w	r3, r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d015      	beq.n	8006a1a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	4a72      	ldr	r2, [pc, #456]	; (8006bbc <PCD_EP_OutXfrComplete_int+0x210>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	f240 80dd 	bls.w	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80d7 	beq.w	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	015a      	lsls	r2, r3, #5
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a10:	461a      	mov	r2, r3
 8006a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a16:	6093      	str	r3, [r2, #8]
 8006a18:	e0cb      	b.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	f003 0320 	and.w	r3, r3, #32
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	015a      	lsls	r2, r3, #5
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a30:	461a      	mov	r2, r3
 8006a32:	2320      	movs	r3, #32
 8006a34:	6093      	str	r3, [r2, #8]
 8006a36:	e0bc      	b.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	f040 80b7 	bne.w	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	4a5d      	ldr	r2, [pc, #372]	; (8006bbc <PCD_EP_OutXfrComplete_int+0x210>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d90f      	bls.n	8006a6c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d00a      	beq.n	8006a6c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a62:	461a      	mov	r2, r3
 8006a64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a68:	6093      	str	r3, [r2, #8]
 8006a6a:	e0a2      	b.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	4613      	mov	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	1a9b      	subs	r3, r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006a7e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	0159      	lsls	r1, r3, #5
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	440b      	add	r3, r1
 8006a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8006a92:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	683a      	ldr	r2, [r7, #0]
 8006a98:	4613      	mov	r3, r2
 8006a9a:	00db      	lsls	r3, r3, #3
 8006a9c:	1a9b      	subs	r3, r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4403      	add	r3, r0
 8006aa2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006aa6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006aa8:	6879      	ldr	r1, [r7, #4]
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	4613      	mov	r3, r2
 8006aae:	00db      	lsls	r3, r3, #3
 8006ab0:	1a9b      	subs	r3, r3, r2
 8006ab2:	009b      	lsls	r3, r3, #2
 8006ab4:	440b      	add	r3, r1
 8006ab6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	1a9b      	subs	r3, r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	4403      	add	r3, r0
 8006aca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4419      	add	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	1a9b      	subs	r3, r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4403      	add	r3, r0
 8006ae0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ae4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d114      	bne.n	8006b16 <PCD_EP_OutXfrComplete_int+0x16a>
 8006aec:	6879      	ldr	r1, [r7, #4]
 8006aee:	683a      	ldr	r2, [r7, #0]
 8006af0:	4613      	mov	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	1a9b      	subs	r3, r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d108      	bne.n	8006b16 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2101      	movs	r1, #1
 8006b12:	f003 ff21 	bl	800a958 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f006 fc13 	bl	800d348 <HAL_PCD_DataOutStageCallback>
 8006b22:	e046      	b.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4a26      	ldr	r2, [pc, #152]	; (8006bc0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d124      	bne.n	8006b76 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	461a      	mov	r2, r3
 8006b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b48:	6093      	str	r3, [r2, #8]
 8006b4a:	e032      	b.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	f003 0320 	and.w	r3, r3, #32
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d008      	beq.n	8006b68 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	015a      	lsls	r2, r3, #5
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b62:	461a      	mov	r2, r3
 8006b64:	2320      	movs	r3, #32
 8006b66:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f006 fbea 	bl	800d348 <HAL_PCD_DataOutStageCallback>
 8006b74:	e01d      	b.n	8006bb2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d114      	bne.n	8006ba6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8006b7c:	6879      	ldr	r1, [r7, #4]
 8006b7e:	683a      	ldr	r2, [r7, #0]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	1a9b      	subs	r3, r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	440b      	add	r3, r1
 8006b8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d108      	bne.n	8006ba6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	2100      	movs	r1, #0
 8006ba2:	f003 fed9 	bl	800a958 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f006 fbcb 	bl	800d348 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}
 8006bbc:	4f54300a 	.word	0x4f54300a
 8006bc0:	4f54310a 	.word	0x4f54310a

08006bc4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	333c      	adds	r3, #60	; 0x3c
 8006bdc:	3304      	adds	r3, #4
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d90e      	bls.n	8006c18 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d009      	beq.n	8006c18 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	015a      	lsls	r2, r3, #5
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c10:	461a      	mov	r2, r3
 8006c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c16:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f006 fb83 	bl	800d324 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a0a      	ldr	r2, [pc, #40]	; (8006c4c <PCD_EP_OutSetupPacket_int+0x88>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d90c      	bls.n	8006c40 <PCD_EP_OutSetupPacket_int+0x7c>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d108      	bne.n	8006c40 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	f003 fe8c 	bl	800a958 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006c40:	2300      	movs	r3, #0
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	4f54300a 	.word	0x4f54300a

08006c50 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c66:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006c68:	78fb      	ldrb	r3, [r7, #3]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d107      	bne.n	8006c7e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006c6e:	883b      	ldrh	r3, [r7, #0]
 8006c70:	0419      	lsls	r1, r3, #16
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	430a      	orrs	r2, r1
 8006c7a:	629a      	str	r2, [r3, #40]	; 0x28
 8006c7c:	e028      	b.n	8006cd0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c84:	0c1b      	lsrs	r3, r3, #16
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	4413      	add	r3, r2
 8006c8a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]
 8006c90:	e00d      	b.n	8006cae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	7bfb      	ldrb	r3, [r7, #15]
 8006c98:	3340      	adds	r3, #64	; 0x40
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	0c1b      	lsrs	r3, r3, #16
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	3301      	adds	r3, #1
 8006cac:	73fb      	strb	r3, [r7, #15]
 8006cae:	7bfa      	ldrb	r2, [r7, #15]
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d3ec      	bcc.n	8006c92 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006cb8:	883b      	ldrh	r3, [r7, #0]
 8006cba:	0418      	lsls	r0, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4302      	orrs	r2, r0
 8006cc8:	3340      	adds	r3, #64	; 0x40
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	440b      	add	r3, r1
 8006cce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3714      	adds	r7, #20
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	887a      	ldrh	r2, [r7, #2]
 8006cf0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b085      	sub	sp, #20
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2201      	movs	r2, #1
 8006d12:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d32:	f043 0303 	orr.w	r3, r3, #3
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006d52:	2300      	movs	r3, #0
 8006d54:	603b      	str	r3, [r7, #0]
 8006d56:	4b20      	ldr	r3, [pc, #128]	; (8006dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	4a1f      	ldr	r2, [pc, #124]	; (8006dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d60:	6413      	str	r3, [r2, #64]	; 0x40
 8006d62:	4b1d      	ldr	r3, [pc, #116]	; (8006dd8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006d6e:	4b1b      	ldr	r3, [pc, #108]	; (8006ddc <HAL_PWREx_EnableOverDrive+0x94>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d74:	f7fd f8f0 	bl	8003f58 <HAL_GetTick>
 8006d78:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d7a:	e009      	b.n	8006d90 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006d7c:	f7fd f8ec 	bl	8003f58 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d8a:	d901      	bls.n	8006d90 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8006d8c:	2303      	movs	r3, #3
 8006d8e:	e01f      	b.n	8006dd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006d90:	4b13      	ldr	r3, [pc, #76]	; (8006de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d9c:	d1ee      	bne.n	8006d7c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006da4:	f7fd f8d8 	bl	8003f58 <HAL_GetTick>
 8006da8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006daa:	e009      	b.n	8006dc0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006dac:	f7fd f8d4 	bl	8003f58 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006dba:	d901      	bls.n	8006dc0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	e007      	b.n	8006dd0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006dc0:	4b07      	ldr	r3, [pc, #28]	; (8006de0 <HAL_PWREx_EnableOverDrive+0x98>)
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006dcc:	d1ee      	bne.n	8006dac <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8006dce:	2300      	movs	r3, #0
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40023800 	.word	0x40023800
 8006ddc:	420e0040 	.word	0x420e0040
 8006de0:	40007000 	.word	0x40007000
 8006de4:	420e0044 	.word	0x420e0044

08006de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b084      	sub	sp, #16
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0cc      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dfc:	4b68      	ldr	r3, [pc, #416]	; (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 030f 	and.w	r3, r3, #15
 8006e04:	683a      	ldr	r2, [r7, #0]
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d90c      	bls.n	8006e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e0a:	4b65      	ldr	r3, [pc, #404]	; (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e0c:	683a      	ldr	r2, [r7, #0]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e12:	4b63      	ldr	r3, [pc, #396]	; (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 030f 	and.w	r3, r3, #15
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d001      	beq.n	8006e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	e0b8      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d020      	beq.n	8006e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d005      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e3c:	4b59      	ldr	r3, [pc, #356]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4a58      	ldr	r2, [pc, #352]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d005      	beq.n	8006e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e54:	4b53      	ldr	r3, [pc, #332]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	4a52      	ldr	r2, [pc, #328]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e60:	4b50      	ldr	r3, [pc, #320]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	494d      	ldr	r1, [pc, #308]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d044      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d107      	bne.n	8006e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e86:	4b47      	ldr	r3, [pc, #284]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d119      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e07f      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea6:	4b3f      	ldr	r3, [pc, #252]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e06f      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb6:	4b3b      	ldr	r3, [pc, #236]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e067      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006ec6:	4b37      	ldr	r3, [pc, #220]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	f023 0203 	bic.w	r2, r3, #3
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4934      	ldr	r1, [pc, #208]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ed8:	f7fd f83e 	bl	8003f58 <HAL_GetTick>
 8006edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ede:	e00a      	b.n	8006ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ee0:	f7fd f83a 	bl	8003f58 <HAL_GetTick>
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d901      	bls.n	8006ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e04f      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ef6:	4b2b      	ldr	r3, [pc, #172]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 020c 	and.w	r2, r3, #12
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d1eb      	bne.n	8006ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 030f 	and.w	r3, r3, #15
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d20c      	bcs.n	8006f30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f16:	4b22      	ldr	r3, [pc, #136]	; (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f1e:	4b20      	ldr	r3, [pc, #128]	; (8006fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f003 030f 	and.w	r3, r3, #15
 8006f26:	683a      	ldr	r2, [r7, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d001      	beq.n	8006f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e032      	b.n	8006f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0304 	and.w	r3, r3, #4
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d008      	beq.n	8006f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f3c:	4b19      	ldr	r3, [pc, #100]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4916      	ldr	r1, [pc, #88]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0308 	and.w	r3, r3, #8
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d009      	beq.n	8006f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f5a:	4b12      	ldr	r3, [pc, #72]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	490e      	ldr	r1, [pc, #56]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f6e:	f000 fb6b 	bl	8007648 <HAL_RCC_GetSysClockFreq>
 8006f72:	4601      	mov	r1, r0
 8006f74:	4b0b      	ldr	r3, [pc, #44]	; (8006fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	091b      	lsrs	r3, r3, #4
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	4a0a      	ldr	r2, [pc, #40]	; (8006fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8006f80:	5cd3      	ldrb	r3, [r2, r3]
 8006f82:	fa21 f303 	lsr.w	r3, r1, r3
 8006f86:	4a09      	ldr	r2, [pc, #36]	; (8006fac <HAL_RCC_ClockConfig+0x1c4>)
 8006f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f8a:	4b09      	ldr	r3, [pc, #36]	; (8006fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fc ff9e 	bl	8003ed0 <HAL_InitTick>

  return HAL_OK;
 8006f94:	2300      	movs	r3, #0
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3710      	adds	r7, #16
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40023c00 	.word	0x40023c00
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	08012698 	.word	0x08012698
 8006fac:	20000000 	.word	0x20000000
 8006fb0:	20000004 	.word	0x20000004

08006fb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006fb8:	4b03      	ldr	r3, [pc, #12]	; (8006fc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006fba:	681b      	ldr	r3, [r3, #0]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000000 	.word	0x20000000

08006fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006fd0:	f7ff fff0 	bl	8006fb4 <HAL_RCC_GetHCLKFreq>
 8006fd4:	4601      	mov	r1, r0
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	0a9b      	lsrs	r3, r3, #10
 8006fdc:	f003 0307 	and.w	r3, r3, #7
 8006fe0:	4a03      	ldr	r2, [pc, #12]	; (8006ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fe2:	5cd3      	ldrb	r3, [r2, r3]
 8006fe4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	40023800 	.word	0x40023800
 8006ff0:	080126a8 	.word	0x080126a8

08006ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08c      	sub	sp, #48	; 0x30
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007004:	2300      	movs	r3, #0
 8007006:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800700c:	2300      	movs	r3, #0
 800700e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007014:	2300      	movs	r3, #0
 8007016:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007018:	2300      	movs	r3, #0
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0301 	and.w	r3, r3, #1
 8007028:	2b00      	cmp	r3, #0
 800702a:	d010      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800702c:	4b6f      	ldr	r3, [pc, #444]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800702e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007032:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703a:	496c      	ldr	r1, [pc, #432]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800703c:	4313      	orrs	r3, r2
 800703e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800704a:	2301      	movs	r3, #1
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d010      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800705a:	4b64      	ldr	r3, [pc, #400]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800705c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007060:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007068:	4960      	ldr	r1, [pc, #384]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800706a:	4313      	orrs	r3, r2
 800706c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007078:	2301      	movs	r3, #1
 800707a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b00      	cmp	r3, #0
 8007086:	d017      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007088:	4b58      	ldr	r3, [pc, #352]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800708a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007096:	4955      	ldr	r1, [pc, #340]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007098:	4313      	orrs	r3, r2
 800709a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070a6:	d101      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80070a8:	2301      	movs	r3, #1
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d101      	bne.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80070b4:	2301      	movs	r3, #1
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0308 	and.w	r3, r3, #8
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d017      	beq.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80070c4:	4b49      	ldr	r3, [pc, #292]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ca:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d2:	4946      	ldr	r1, [pc, #280]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070e2:	d101      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80070e4:	2301      	movs	r3, #1
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d101      	bne.n	80070f4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80070f0:	2301      	movs	r3, #1
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0320 	and.w	r3, r3, #32
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	f000 808a 	beq.w	8007216 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007102:	2300      	movs	r3, #0
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	4b39      	ldr	r3, [pc, #228]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	4a38      	ldr	r2, [pc, #224]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800710c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007110:	6413      	str	r3, [r2, #64]	; 0x40
 8007112:	4b36      	ldr	r3, [pc, #216]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800711a:	60bb      	str	r3, [r7, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800711e:	4b34      	ldr	r3, [pc, #208]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a33      	ldr	r2, [pc, #204]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007128:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800712a:	f7fc ff15 	bl	8003f58 <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007132:	f7fc ff11 	bl	8003f58 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e278      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007144:	4b2a      	ldr	r3, [pc, #168]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0f0      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007150:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007158:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d02f      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007168:	6a3a      	ldr	r2, [r7, #32]
 800716a:	429a      	cmp	r2, r3
 800716c:	d028      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800716e:	4b1f      	ldr	r3, [pc, #124]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007176:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007178:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800717e:	4b1d      	ldr	r3, [pc, #116]	; (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007180:	2200      	movs	r2, #0
 8007182:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007184:	4a19      	ldr	r2, [pc, #100]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800718a:	4b18      	ldr	r3, [pc, #96]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800718c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b01      	cmp	r3, #1
 8007194:	d114      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007196:	f7fc fedf 	bl	8003f58 <HAL_GetTick>
 800719a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800719c:	e00a      	b.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800719e:	f7fc fedb 	bl	8003f58 <HAL_GetTick>
 80071a2:	4602      	mov	r2, r0
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a6:	1ad3      	subs	r3, r2, r3
 80071a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d901      	bls.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e240      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071b4:	4b0d      	ldr	r3, [pc, #52]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	f003 0302 	and.w	r3, r3, #2
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0ee      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071cc:	d114      	bne.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80071de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e2:	4902      	ldr	r1, [pc, #8]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	608b      	str	r3, [r1, #8]
 80071e8:	e00c      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800
 80071f0:	40007000 	.word	0x40007000
 80071f4:	42470e40 	.word	0x42470e40
 80071f8:	4b4a      	ldr	r3, [pc, #296]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4a49      	ldr	r2, [pc, #292]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80071fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007202:	6093      	str	r3, [r2, #8]
 8007204:	4b47      	ldr	r3, [pc, #284]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007206:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007210:	4944      	ldr	r1, [pc, #272]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007212:	4313      	orrs	r3, r2
 8007214:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0310 	and.w	r3, r3, #16
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007228:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800722a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007238:	4b3a      	ldr	r3, [pc, #232]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800723a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800723e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007246:	4937      	ldr	r1, [pc, #220]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007248:	4313      	orrs	r3, r2
 800724a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00a      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800725a:	4b32      	ldr	r3, [pc, #200]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800725c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007260:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007268:	492e      	ldr	r1, [pc, #184]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800726a:	4313      	orrs	r3, r2
 800726c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007278:	2b00      	cmp	r3, #0
 800727a:	d011      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800727e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007282:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800728a:	4926      	ldr	r1, [pc, #152]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800729a:	d101      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800729c:	2301      	movs	r3, #1
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00a      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80072ac:	4b1d      	ldr	r3, [pc, #116]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	491a      	ldr	r1, [pc, #104]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d011      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80072ce:	4b15      	ldr	r3, [pc, #84]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072dc:	4911      	ldr	r1, [pc, #68]	; (8007324 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ec:	d101      	bne.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80072ee:	2301      	movs	r3, #1
 80072f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80072f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d005      	beq.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007300:	f040 80ff 	bne.w	8007502 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007304:	4b09      	ldr	r3, [pc, #36]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800730a:	f7fc fe25 	bl	8003f58 <HAL_GetTick>
 800730e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007310:	e00e      	b.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007312:	f7fc fe21 	bl	8003f58 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d907      	bls.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	e188      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007324:	40023800 	.word	0x40023800
 8007328:	424711e0 	.word	0x424711e0
 800732c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007330:	4b7e      	ldr	r3, [pc, #504]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007338:	2b00      	cmp	r3, #0
 800733a:	d1ea      	bne.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d003      	beq.n	8007350 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d009      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007358:	2b00      	cmp	r3, #0
 800735a:	d028      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	2b00      	cmp	r3, #0
 8007362:	d124      	bne.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007364:	4b71      	ldr	r3, [pc, #452]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	3301      	adds	r3, #1
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007376:	4b6d      	ldr	r3, [pc, #436]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	019b      	lsls	r3, r3, #6
 800738e:	431a      	orrs	r2, r3
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	085b      	lsrs	r3, r3, #1
 8007394:	3b01      	subs	r3, #1
 8007396:	041b      	lsls	r3, r3, #16
 8007398:	431a      	orrs	r2, r3
 800739a:	69bb      	ldr	r3, [r7, #24]
 800739c:	061b      	lsls	r3, r3, #24
 800739e:	431a      	orrs	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	695b      	ldr	r3, [r3, #20]
 80073a4:	071b      	lsls	r3, r3, #28
 80073a6:	4961      	ldr	r1, [pc, #388]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f003 0304 	and.w	r3, r3, #4
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073c2:	d00a      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d035      	beq.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d8:	d130      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80073da:	4b54      	ldr	r3, [pc, #336]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80073dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e0:	0c1b      	lsrs	r3, r3, #16
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	3301      	adds	r3, #1
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073ec:	4b4f      	ldr	r3, [pc, #316]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80073ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f2:	0f1b      	lsrs	r3, r3, #28
 80073f4:	f003 0307 	and.w	r3, r3, #7
 80073f8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	019b      	lsls	r3, r3, #6
 8007404:	431a      	orrs	r2, r3
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	085b      	lsrs	r3, r3, #1
 800740a:	3b01      	subs	r3, #1
 800740c:	041b      	lsls	r3, r3, #16
 800740e:	431a      	orrs	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	691b      	ldr	r3, [r3, #16]
 8007414:	061b      	lsls	r3, r3, #24
 8007416:	431a      	orrs	r2, r3
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	071b      	lsls	r3, r3, #28
 800741c:	4943      	ldr	r1, [pc, #268]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007424:	4b41      	ldr	r3, [pc, #260]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007426:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800742a:	f023 021f 	bic.w	r2, r3, #31
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	3b01      	subs	r3, #1
 8007434:	493d      	ldr	r1, [pc, #244]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007436:	4313      	orrs	r3, r2
 8007438:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007444:	2b00      	cmp	r3, #0
 8007446:	d029      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800744c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007450:	d124      	bne.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007452:	4b36      	ldr	r3, [pc, #216]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007458:	0c1b      	lsrs	r3, r3, #16
 800745a:	f003 0303 	and.w	r3, r3, #3
 800745e:	3301      	adds	r3, #1
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007464:	4b31      	ldr	r3, [pc, #196]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800746a:	0f1b      	lsrs	r3, r3, #28
 800746c:	f003 0307 	and.w	r3, r3, #7
 8007470:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	019b      	lsls	r3, r3, #6
 800747c:	431a      	orrs	r2, r3
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68db      	ldr	r3, [r3, #12]
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	3b01      	subs	r3, #1
 8007486:	041b      	lsls	r3, r3, #16
 8007488:	431a      	orrs	r2, r3
 800748a:	69bb      	ldr	r3, [r7, #24]
 800748c:	061b      	lsls	r3, r3, #24
 800748e:	431a      	orrs	r2, r3
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	071b      	lsls	r3, r3, #28
 8007494:	4925      	ldr	r1, [pc, #148]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d016      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	019b      	lsls	r3, r3, #6
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	085b      	lsrs	r3, r3, #1
 80074ba:	3b01      	subs	r3, #1
 80074bc:	041b      	lsls	r3, r3, #16
 80074be:	431a      	orrs	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	431a      	orrs	r2, r3
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	695b      	ldr	r3, [r3, #20]
 80074cc:	071b      	lsls	r3, r3, #28
 80074ce:	4917      	ldr	r1, [pc, #92]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074d6:	4b16      	ldr	r3, [pc, #88]	; (8007530 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80074d8:	2201      	movs	r2, #1
 80074da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074dc:	f7fc fd3c 	bl	8003f58 <HAL_GetTick>
 80074e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074e2:	e008      	b.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80074e4:	f7fc fd38 	bl	8003f58 <HAL_GetTick>
 80074e8:	4602      	mov	r2, r0
 80074ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ec:	1ad3      	subs	r3, r2, r3
 80074ee:	2b02      	cmp	r3, #2
 80074f0:	d901      	bls.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f2:	2303      	movs	r3, #3
 80074f4:	e09f      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074f6:	4b0d      	ldr	r3, [pc, #52]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d0f0      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8007502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007504:	2b01      	cmp	r3, #1
 8007506:	f040 8095 	bne.w	8007634 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800750a:	4b0a      	ldr	r3, [pc, #40]	; (8007534 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007510:	f7fc fd22 	bl	8003f58 <HAL_GetTick>
 8007514:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007516:	e00f      	b.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007518:	f7fc fd1e 	bl	8003f58 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d908      	bls.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e085      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800752a:	bf00      	nop
 800752c:	40023800 	.word	0x40023800
 8007530:	42470068 	.word	0x42470068
 8007534:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007538:	4b41      	ldr	r3, [pc, #260]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007544:	d0e8      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	2b00      	cmp	r3, #0
 8007558:	d009      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8007562:	2b00      	cmp	r3, #0
 8007564:	d02b      	beq.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	2b00      	cmp	r3, #0
 800756c:	d127      	bne.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800756e:	4b34      	ldr	r3, [pc, #208]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	0c1b      	lsrs	r3, r3, #16
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	3301      	adds	r3, #1
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	699a      	ldr	r2, [r3, #24]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	69db      	ldr	r3, [r3, #28]
 8007588:	019b      	lsls	r3, r3, #6
 800758a:	431a      	orrs	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	085b      	lsrs	r3, r3, #1
 8007590:	3b01      	subs	r3, #1
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800759a:	061b      	lsls	r3, r3, #24
 800759c:	4928      	ldr	r1, [pc, #160]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80075a4:	4b26      	ldr	r3, [pc, #152]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b2:	3b01      	subs	r3, #1
 80075b4:	021b      	lsls	r3, r3, #8
 80075b6:	4922      	ldr	r1, [pc, #136]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d01d      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075d2:	d118      	bne.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075d4:	4b1a      	ldr	r3, [pc, #104]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80075d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075da:	0e1b      	lsrs	r3, r3, #24
 80075dc:	f003 030f 	and.w	r3, r3, #15
 80075e0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	69db      	ldr	r3, [r3, #28]
 80075ea:	019b      	lsls	r3, r3, #6
 80075ec:	431a      	orrs	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6a1b      	ldr	r3, [r3, #32]
 80075f2:	085b      	lsrs	r3, r3, #1
 80075f4:	3b01      	subs	r3, #1
 80075f6:	041b      	lsls	r3, r3, #16
 80075f8:	431a      	orrs	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	061b      	lsls	r3, r3, #24
 80075fe:	4910      	ldr	r1, [pc, #64]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007600:	4313      	orrs	r3, r2
 8007602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007606:	4b0f      	ldr	r3, [pc, #60]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8007608:	2201      	movs	r2, #1
 800760a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800760c:	f7fc fca4 	bl	8003f58 <HAL_GetTick>
 8007610:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8007614:	f7fc fca0 	bl	8003f58 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b02      	cmp	r3, #2
 8007620:	d901      	bls.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e007      	b.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800762e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007632:	d1ef      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3730      	adds	r7, #48	; 0x30
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40023800 	.word	0x40023800
 8007644:	42470070 	.word	0x42470070

08007648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800764e:	2300      	movs	r3, #0
 8007650:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007662:	4bc6      	ldr	r3, [pc, #792]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b0c      	cmp	r3, #12
 800766c:	f200 817e 	bhi.w	800796c <HAL_RCC_GetSysClockFreq+0x324>
 8007670:	a201      	add	r2, pc, #4	; (adr r2, 8007678 <HAL_RCC_GetSysClockFreq+0x30>)
 8007672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007676:	bf00      	nop
 8007678:	080076ad 	.word	0x080076ad
 800767c:	0800796d 	.word	0x0800796d
 8007680:	0800796d 	.word	0x0800796d
 8007684:	0800796d 	.word	0x0800796d
 8007688:	080076b3 	.word	0x080076b3
 800768c:	0800796d 	.word	0x0800796d
 8007690:	0800796d 	.word	0x0800796d
 8007694:	0800796d 	.word	0x0800796d
 8007698:	080076b9 	.word	0x080076b9
 800769c:	0800796d 	.word	0x0800796d
 80076a0:	0800796d 	.word	0x0800796d
 80076a4:	0800796d 	.word	0x0800796d
 80076a8:	08007815 	.word	0x08007815
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076ac:	4bb4      	ldr	r3, [pc, #720]	; (8007980 <HAL_RCC_GetSysClockFreq+0x338>)
 80076ae:	613b      	str	r3, [r7, #16]
       break;
 80076b0:	e15f      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076b2:	4bb4      	ldr	r3, [pc, #720]	; (8007984 <HAL_RCC_GetSysClockFreq+0x33c>)
 80076b4:	613b      	str	r3, [r7, #16]
      break;
 80076b6:	e15c      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076b8:	4bb0      	ldr	r3, [pc, #704]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076c0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076c2:	4bae      	ldr	r3, [pc, #696]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d04a      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ce:	4bab      	ldr	r3, [pc, #684]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	099b      	lsrs	r3, r3, #6
 80076d4:	f04f 0400 	mov.w	r4, #0
 80076d8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80076dc:	f04f 0200 	mov.w	r2, #0
 80076e0:	ea03 0501 	and.w	r5, r3, r1
 80076e4:	ea04 0602 	and.w	r6, r4, r2
 80076e8:	4629      	mov	r1, r5
 80076ea:	4632      	mov	r2, r6
 80076ec:	f04f 0300 	mov.w	r3, #0
 80076f0:	f04f 0400 	mov.w	r4, #0
 80076f4:	0154      	lsls	r4, r2, #5
 80076f6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80076fa:	014b      	lsls	r3, r1, #5
 80076fc:	4619      	mov	r1, r3
 80076fe:	4622      	mov	r2, r4
 8007700:	1b49      	subs	r1, r1, r5
 8007702:	eb62 0206 	sbc.w	r2, r2, r6
 8007706:	f04f 0300 	mov.w	r3, #0
 800770a:	f04f 0400 	mov.w	r4, #0
 800770e:	0194      	lsls	r4, r2, #6
 8007710:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007714:	018b      	lsls	r3, r1, #6
 8007716:	1a5b      	subs	r3, r3, r1
 8007718:	eb64 0402 	sbc.w	r4, r4, r2
 800771c:	f04f 0100 	mov.w	r1, #0
 8007720:	f04f 0200 	mov.w	r2, #0
 8007724:	00e2      	lsls	r2, r4, #3
 8007726:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800772a:	00d9      	lsls	r1, r3, #3
 800772c:	460b      	mov	r3, r1
 800772e:	4614      	mov	r4, r2
 8007730:	195b      	adds	r3, r3, r5
 8007732:	eb44 0406 	adc.w	r4, r4, r6
 8007736:	f04f 0100 	mov.w	r1, #0
 800773a:	f04f 0200 	mov.w	r2, #0
 800773e:	0262      	lsls	r2, r4, #9
 8007740:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8007744:	0259      	lsls	r1, r3, #9
 8007746:	460b      	mov	r3, r1
 8007748:	4614      	mov	r4, r2
 800774a:	4618      	mov	r0, r3
 800774c:	4621      	mov	r1, r4
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f04f 0400 	mov.w	r4, #0
 8007754:	461a      	mov	r2, r3
 8007756:	4623      	mov	r3, r4
 8007758:	f7f9 fab6 	bl	8000cc8 <__aeabi_uldivmod>
 800775c:	4603      	mov	r3, r0
 800775e:	460c      	mov	r4, r1
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	e049      	b.n	80077f8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007764:	4b85      	ldr	r3, [pc, #532]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	099b      	lsrs	r3, r3, #6
 800776a:	f04f 0400 	mov.w	r4, #0
 800776e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007772:	f04f 0200 	mov.w	r2, #0
 8007776:	ea03 0501 	and.w	r5, r3, r1
 800777a:	ea04 0602 	and.w	r6, r4, r2
 800777e:	4629      	mov	r1, r5
 8007780:	4632      	mov	r2, r6
 8007782:	f04f 0300 	mov.w	r3, #0
 8007786:	f04f 0400 	mov.w	r4, #0
 800778a:	0154      	lsls	r4, r2, #5
 800778c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007790:	014b      	lsls	r3, r1, #5
 8007792:	4619      	mov	r1, r3
 8007794:	4622      	mov	r2, r4
 8007796:	1b49      	subs	r1, r1, r5
 8007798:	eb62 0206 	sbc.w	r2, r2, r6
 800779c:	f04f 0300 	mov.w	r3, #0
 80077a0:	f04f 0400 	mov.w	r4, #0
 80077a4:	0194      	lsls	r4, r2, #6
 80077a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80077aa:	018b      	lsls	r3, r1, #6
 80077ac:	1a5b      	subs	r3, r3, r1
 80077ae:	eb64 0402 	sbc.w	r4, r4, r2
 80077b2:	f04f 0100 	mov.w	r1, #0
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	00e2      	lsls	r2, r4, #3
 80077bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80077c0:	00d9      	lsls	r1, r3, #3
 80077c2:	460b      	mov	r3, r1
 80077c4:	4614      	mov	r4, r2
 80077c6:	195b      	adds	r3, r3, r5
 80077c8:	eb44 0406 	adc.w	r4, r4, r6
 80077cc:	f04f 0100 	mov.w	r1, #0
 80077d0:	f04f 0200 	mov.w	r2, #0
 80077d4:	02a2      	lsls	r2, r4, #10
 80077d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80077da:	0299      	lsls	r1, r3, #10
 80077dc:	460b      	mov	r3, r1
 80077de:	4614      	mov	r4, r2
 80077e0:	4618      	mov	r0, r3
 80077e2:	4621      	mov	r1, r4
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f04f 0400 	mov.w	r4, #0
 80077ea:	461a      	mov	r2, r3
 80077ec:	4623      	mov	r3, r4
 80077ee:	f7f9 fa6b 	bl	8000cc8 <__aeabi_uldivmod>
 80077f2:	4603      	mov	r3, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f8:	4b60      	ldr	r3, [pc, #384]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	0c1b      	lsrs	r3, r3, #16
 80077fe:	f003 0303 	and.w	r3, r3, #3
 8007802:	3301      	adds	r3, #1
 8007804:	005b      	lsls	r3, r3, #1
 8007806:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007810:	613b      	str	r3, [r7, #16]
      break;
 8007812:	e0ae      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007814:	4b59      	ldr	r3, [pc, #356]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800781c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800781e:	4b57      	ldr	r3, [pc, #348]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d04a      	beq.n	80078c0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800782a:	4b54      	ldr	r3, [pc, #336]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	099b      	lsrs	r3, r3, #6
 8007830:	f04f 0400 	mov.w	r4, #0
 8007834:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007838:	f04f 0200 	mov.w	r2, #0
 800783c:	ea03 0501 	and.w	r5, r3, r1
 8007840:	ea04 0602 	and.w	r6, r4, r2
 8007844:	4629      	mov	r1, r5
 8007846:	4632      	mov	r2, r6
 8007848:	f04f 0300 	mov.w	r3, #0
 800784c:	f04f 0400 	mov.w	r4, #0
 8007850:	0154      	lsls	r4, r2, #5
 8007852:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007856:	014b      	lsls	r3, r1, #5
 8007858:	4619      	mov	r1, r3
 800785a:	4622      	mov	r2, r4
 800785c:	1b49      	subs	r1, r1, r5
 800785e:	eb62 0206 	sbc.w	r2, r2, r6
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	f04f 0400 	mov.w	r4, #0
 800786a:	0194      	lsls	r4, r2, #6
 800786c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007870:	018b      	lsls	r3, r1, #6
 8007872:	1a5b      	subs	r3, r3, r1
 8007874:	eb64 0402 	sbc.w	r4, r4, r2
 8007878:	f04f 0100 	mov.w	r1, #0
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	00e2      	lsls	r2, r4, #3
 8007882:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007886:	00d9      	lsls	r1, r3, #3
 8007888:	460b      	mov	r3, r1
 800788a:	4614      	mov	r4, r2
 800788c:	195b      	adds	r3, r3, r5
 800788e:	eb44 0406 	adc.w	r4, r4, r6
 8007892:	f04f 0100 	mov.w	r1, #0
 8007896:	f04f 0200 	mov.w	r2, #0
 800789a:	0262      	lsls	r2, r4, #9
 800789c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80078a0:	0259      	lsls	r1, r3, #9
 80078a2:	460b      	mov	r3, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	4618      	mov	r0, r3
 80078a8:	4621      	mov	r1, r4
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f04f 0400 	mov.w	r4, #0
 80078b0:	461a      	mov	r2, r3
 80078b2:	4623      	mov	r3, r4
 80078b4:	f7f9 fa08 	bl	8000cc8 <__aeabi_uldivmod>
 80078b8:	4603      	mov	r3, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	617b      	str	r3, [r7, #20]
 80078be:	e049      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078c0:	4b2e      	ldr	r3, [pc, #184]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	099b      	lsrs	r3, r3, #6
 80078c6:	f04f 0400 	mov.w	r4, #0
 80078ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 80078ce:	f04f 0200 	mov.w	r2, #0
 80078d2:	ea03 0501 	and.w	r5, r3, r1
 80078d6:	ea04 0602 	and.w	r6, r4, r2
 80078da:	4629      	mov	r1, r5
 80078dc:	4632      	mov	r2, r6
 80078de:	f04f 0300 	mov.w	r3, #0
 80078e2:	f04f 0400 	mov.w	r4, #0
 80078e6:	0154      	lsls	r4, r2, #5
 80078e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80078ec:	014b      	lsls	r3, r1, #5
 80078ee:	4619      	mov	r1, r3
 80078f0:	4622      	mov	r2, r4
 80078f2:	1b49      	subs	r1, r1, r5
 80078f4:	eb62 0206 	sbc.w	r2, r2, r6
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	f04f 0400 	mov.w	r4, #0
 8007900:	0194      	lsls	r4, r2, #6
 8007902:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007906:	018b      	lsls	r3, r1, #6
 8007908:	1a5b      	subs	r3, r3, r1
 800790a:	eb64 0402 	sbc.w	r4, r4, r2
 800790e:	f04f 0100 	mov.w	r1, #0
 8007912:	f04f 0200 	mov.w	r2, #0
 8007916:	00e2      	lsls	r2, r4, #3
 8007918:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800791c:	00d9      	lsls	r1, r3, #3
 800791e:	460b      	mov	r3, r1
 8007920:	4614      	mov	r4, r2
 8007922:	195b      	adds	r3, r3, r5
 8007924:	eb44 0406 	adc.w	r4, r4, r6
 8007928:	f04f 0100 	mov.w	r1, #0
 800792c:	f04f 0200 	mov.w	r2, #0
 8007930:	02a2      	lsls	r2, r4, #10
 8007932:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007936:	0299      	lsls	r1, r3, #10
 8007938:	460b      	mov	r3, r1
 800793a:	4614      	mov	r4, r2
 800793c:	4618      	mov	r0, r3
 800793e:	4621      	mov	r1, r4
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	f04f 0400 	mov.w	r4, #0
 8007946:	461a      	mov	r2, r3
 8007948:	4623      	mov	r3, r4
 800794a:	f7f9 f9bd 	bl	8000cc8 <__aeabi_uldivmod>
 800794e:	4603      	mov	r3, r0
 8007950:	460c      	mov	r4, r1
 8007952:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <HAL_RCC_GetSysClockFreq+0x334>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	0f1b      	lsrs	r3, r3, #28
 800795a:	f003 0307 	and.w	r3, r3, #7
 800795e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8007960:	697a      	ldr	r2, [r7, #20]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	fbb2 f3f3 	udiv	r3, r2, r3
 8007968:	613b      	str	r3, [r7, #16]
      break;
 800796a:	e002      	b.n	8007972 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800796c:	4b04      	ldr	r3, [pc, #16]	; (8007980 <HAL_RCC_GetSysClockFreq+0x338>)
 800796e:	613b      	str	r3, [r7, #16]
      break;
 8007970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007972:	693b      	ldr	r3, [r7, #16]
}
 8007974:	4618      	mov	r0, r3
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800797c:	40023800 	.word	0x40023800
 8007980:	00f42400 	.word	0x00f42400
 8007984:	007a1200 	.word	0x007a1200

08007988 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007990:	2300      	movs	r3, #0
 8007992:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	f000 8083 	beq.w	8007aa8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079a2:	4b95      	ldr	r3, [pc, #596]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b04      	cmp	r3, #4
 80079ac:	d019      	beq.n	80079e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079ae:	4b92      	ldr	r3, [pc, #584]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80079b6:	2b08      	cmp	r3, #8
 80079b8:	d106      	bne.n	80079c8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079ba:	4b8f      	ldr	r3, [pc, #572]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c6:	d00c      	beq.n	80079e2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079c8:	4b8b      	ldr	r3, [pc, #556]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80079d0:	2b0c      	cmp	r3, #12
 80079d2:	d112      	bne.n	80079fa <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079d4:	4b88      	ldr	r3, [pc, #544]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079e0:	d10b      	bne.n	80079fa <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079e2:	4b85      	ldr	r3, [pc, #532]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d05b      	beq.n	8007aa6 <HAL_RCC_OscConfig+0x11e>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d157      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e216      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a02:	d106      	bne.n	8007a12 <HAL_RCC_OscConfig+0x8a>
 8007a04:	4b7c      	ldr	r3, [pc, #496]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a7b      	ldr	r2, [pc, #492]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	e01d      	b.n	8007a4e <HAL_RCC_OscConfig+0xc6>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a1a:	d10c      	bne.n	8007a36 <HAL_RCC_OscConfig+0xae>
 8007a1c:	4b76      	ldr	r3, [pc, #472]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a75      	ldr	r2, [pc, #468]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a26:	6013      	str	r3, [r2, #0]
 8007a28:	4b73      	ldr	r3, [pc, #460]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a72      	ldr	r2, [pc, #456]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a32:	6013      	str	r3, [r2, #0]
 8007a34:	e00b      	b.n	8007a4e <HAL_RCC_OscConfig+0xc6>
 8007a36:	4b70      	ldr	r3, [pc, #448]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a6f      	ldr	r2, [pc, #444]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a40:	6013      	str	r3, [r2, #0]
 8007a42:	4b6d      	ldr	r3, [pc, #436]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a6c      	ldr	r2, [pc, #432]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a48:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a4c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d013      	beq.n	8007a7e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a56:	f7fc fa7f 	bl	8003f58 <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a5e:	f7fc fa7b 	bl	8003f58 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b64      	cmp	r3, #100	; 0x64
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e1db      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a70:	4b61      	ldr	r3, [pc, #388]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0xd6>
 8007a7c:	e014      	b.n	8007aa8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a7e:	f7fc fa6b 	bl	8003f58 <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a86:	f7fc fa67 	bl	8003f58 <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b64      	cmp	r3, #100	; 0x64
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e1c7      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a98:	4b57      	ldr	r3, [pc, #348]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d1f0      	bne.n	8007a86 <HAL_RCC_OscConfig+0xfe>
 8007aa4:	e000      	b.n	8007aa8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aa6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0302 	and.w	r3, r3, #2
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d06f      	beq.n	8007b94 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ab4:	4b50      	ldr	r3, [pc, #320]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 030c 	and.w	r3, r3, #12
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d017      	beq.n	8007af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ac0:	4b4d      	ldr	r3, [pc, #308]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d105      	bne.n	8007ad8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007acc:	4b4a      	ldr	r3, [pc, #296]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00b      	beq.n	8007af0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ad8:	4b47      	ldr	r3, [pc, #284]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	d11c      	bne.n	8007b1e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ae4:	4b44      	ldr	r3, [pc, #272]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007af0:	4b41      	ldr	r3, [pc, #260]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0302 	and.w	r3, r3, #2
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_RCC_OscConfig+0x180>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d001      	beq.n	8007b08 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e18f      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b08:	4b3b      	ldr	r3, [pc, #236]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	4938      	ldr	r1, [pc, #224]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b1c:	e03a      	b.n	8007b94 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d020      	beq.n	8007b68 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b26:	4b35      	ldr	r3, [pc, #212]	; (8007bfc <HAL_RCC_OscConfig+0x274>)
 8007b28:	2201      	movs	r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fc fa14 	bl	8003f58 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b34:	f7fc fa10 	bl	8003f58 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b02      	cmp	r3, #2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e170      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b46:	4b2c      	ldr	r3, [pc, #176]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f0      	beq.n	8007b34 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b52:	4b29      	ldr	r3, [pc, #164]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	691b      	ldr	r3, [r3, #16]
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4925      	ldr	r1, [pc, #148]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	600b      	str	r3, [r1, #0]
 8007b66:	e015      	b.n	8007b94 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b68:	4b24      	ldr	r3, [pc, #144]	; (8007bfc <HAL_RCC_OscConfig+0x274>)
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6e:	f7fc f9f3 	bl	8003f58 <HAL_GetTick>
 8007b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b74:	e008      	b.n	8007b88 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b76:	f7fc f9ef 	bl	8003f58 <HAL_GetTick>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	1ad3      	subs	r3, r2, r3
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d901      	bls.n	8007b88 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e14f      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b88:	4b1b      	ldr	r3, [pc, #108]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d1f0      	bne.n	8007b76 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f003 0308 	and.w	r3, r3, #8
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d037      	beq.n	8007c10 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	695b      	ldr	r3, [r3, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d016      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ba8:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <HAL_RCC_OscConfig+0x278>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bae:	f7fc f9d3 	bl	8003f58 <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007bb6:	f7fc f9cf 	bl	8003f58 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e12f      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	; (8007bf8 <HAL_RCC_OscConfig+0x270>)
 8007bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x22e>
 8007bd4:	e01c      	b.n	8007c10 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bd6:	4b0a      	ldr	r3, [pc, #40]	; (8007c00 <HAL_RCC_OscConfig+0x278>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bdc:	f7fc f9bc 	bl	8003f58 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be2:	e00f      	b.n	8007c04 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007be4:	f7fc f9b8 	bl	8003f58 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d908      	bls.n	8007c04 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e118      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
 8007bf6:	bf00      	nop
 8007bf8:	40023800 	.word	0x40023800
 8007bfc:	42470000 	.word	0x42470000
 8007c00:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c04:	4b8a      	ldr	r3, [pc, #552]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c08:	f003 0302 	and.w	r3, r3, #2
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e9      	bne.n	8007be4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0304 	and.w	r3, r3, #4
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 8097 	beq.w	8007d4c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c22:	4b83      	ldr	r3, [pc, #524]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d10f      	bne.n	8007c4e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	4b7f      	ldr	r3, [pc, #508]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	4a7e      	ldr	r2, [pc, #504]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c3c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c3e:	4b7c      	ldr	r3, [pc, #496]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c4e:	4b79      	ldr	r3, [pc, #484]	; (8007e34 <HAL_RCC_OscConfig+0x4ac>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d118      	bne.n	8007c8c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c5a:	4b76      	ldr	r3, [pc, #472]	; (8007e34 <HAL_RCC_OscConfig+0x4ac>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a75      	ldr	r2, [pc, #468]	; (8007e34 <HAL_RCC_OscConfig+0x4ac>)
 8007c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c66:	f7fc f977 	bl	8003f58 <HAL_GetTick>
 8007c6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c6c:	e008      	b.n	8007c80 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c6e:	f7fc f973 	bl	8003f58 <HAL_GetTick>
 8007c72:	4602      	mov	r2, r0
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	1ad3      	subs	r3, r2, r3
 8007c78:	2b02      	cmp	r3, #2
 8007c7a:	d901      	bls.n	8007c80 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c7c:	2303      	movs	r3, #3
 8007c7e:	e0d3      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c80:	4b6c      	ldr	r3, [pc, #432]	; (8007e34 <HAL_RCC_OscConfig+0x4ac>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0f0      	beq.n	8007c6e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d106      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x31a>
 8007c94:	4b66      	ldr	r3, [pc, #408]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c98:	4a65      	ldr	r2, [pc, #404]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	6713      	str	r3, [r2, #112]	; 0x70
 8007ca0:	e01c      	b.n	8007cdc <HAL_RCC_OscConfig+0x354>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	d10c      	bne.n	8007cc4 <HAL_RCC_OscConfig+0x33c>
 8007caa:	4b61      	ldr	r3, [pc, #388]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	4a60      	ldr	r2, [pc, #384]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cb0:	f043 0304 	orr.w	r3, r3, #4
 8007cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb6:	4b5e      	ldr	r3, [pc, #376]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cba:	4a5d      	ldr	r2, [pc, #372]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cbc:	f043 0301 	orr.w	r3, r3, #1
 8007cc0:	6713      	str	r3, [r2, #112]	; 0x70
 8007cc2:	e00b      	b.n	8007cdc <HAL_RCC_OscConfig+0x354>
 8007cc4:	4b5a      	ldr	r3, [pc, #360]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc8:	4a59      	ldr	r2, [pc, #356]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cca:	f023 0301 	bic.w	r3, r3, #1
 8007cce:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd0:	4b57      	ldr	r3, [pc, #348]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	4a56      	ldr	r2, [pc, #344]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007cd6:	f023 0304 	bic.w	r3, r3, #4
 8007cda:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d015      	beq.n	8007d10 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce4:	f7fc f938 	bl	8003f58 <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cea:	e00a      	b.n	8007d02 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cec:	f7fc f934 	bl	8003f58 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d901      	bls.n	8007d02 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8007cfe:	2303      	movs	r3, #3
 8007d00:	e092      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d02:	4b4b      	ldr	r3, [pc, #300]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d06:	f003 0302 	and.w	r3, r3, #2
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d0ee      	beq.n	8007cec <HAL_RCC_OscConfig+0x364>
 8007d0e:	e014      	b.n	8007d3a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d10:	f7fc f922 	bl	8003f58 <HAL_GetTick>
 8007d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d16:	e00a      	b.n	8007d2e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d18:	f7fc f91e 	bl	8003f58 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	693b      	ldr	r3, [r7, #16]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d901      	bls.n	8007d2e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8007d2a:	2303      	movs	r3, #3
 8007d2c:	e07c      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d2e:	4b40      	ldr	r3, [pc, #256]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	f003 0302 	and.w	r3, r3, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1ee      	bne.n	8007d18 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d3a:	7dfb      	ldrb	r3, [r7, #23]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d105      	bne.n	8007d4c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d40:	4b3b      	ldr	r3, [pc, #236]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d44:	4a3a      	ldr	r2, [pc, #232]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007d46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d4a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	699b      	ldr	r3, [r3, #24]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d068      	beq.n	8007e26 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d54:	4b36      	ldr	r3, [pc, #216]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f003 030c 	and.w	r3, r3, #12
 8007d5c:	2b08      	cmp	r3, #8
 8007d5e:	d060      	beq.n	8007e22 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	699b      	ldr	r3, [r3, #24]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d145      	bne.n	8007df4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d68:	4b33      	ldr	r3, [pc, #204]	; (8007e38 <HAL_RCC_OscConfig+0x4b0>)
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d6e:	f7fc f8f3 	bl	8003f58 <HAL_GetTick>
 8007d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d74:	e008      	b.n	8007d88 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d76:	f7fc f8ef 	bl	8003f58 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e04f      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d88:	4b29      	ldr	r3, [pc, #164]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f0      	bne.n	8007d76 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	69da      	ldr	r2, [r3, #28]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a1b      	ldr	r3, [r3, #32]
 8007d9c:	431a      	orrs	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	019b      	lsls	r3, r3, #6
 8007da4:	431a      	orrs	r2, r3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	085b      	lsrs	r3, r3, #1
 8007dac:	3b01      	subs	r3, #1
 8007dae:	041b      	lsls	r3, r3, #16
 8007db0:	431a      	orrs	r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	061b      	lsls	r3, r3, #24
 8007db8:	431a      	orrs	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	071b      	lsls	r3, r3, #28
 8007dc0:	491b      	ldr	r1, [pc, #108]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dc6:	4b1c      	ldr	r3, [pc, #112]	; (8007e38 <HAL_RCC_OscConfig+0x4b0>)
 8007dc8:	2201      	movs	r2, #1
 8007dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dcc:	f7fc f8c4 	bl	8003f58 <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd4:	f7fc f8c0 	bl	8003f58 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e020      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007de6:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0f0      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x44c>
 8007df2:	e018      	b.n	8007e26 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <HAL_RCC_OscConfig+0x4b0>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dfa:	f7fc f8ad 	bl	8003f58 <HAL_GetTick>
 8007dfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e00:	e008      	b.n	8007e14 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e02:	f7fc f8a9 	bl	8003f58 <HAL_GetTick>
 8007e06:	4602      	mov	r2, r0
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	1ad3      	subs	r3, r2, r3
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d901      	bls.n	8007e14 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e009      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e14:	4b06      	ldr	r3, [pc, #24]	; (8007e30 <HAL_RCC_OscConfig+0x4a8>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1f0      	bne.n	8007e02 <HAL_RCC_OscConfig+0x47a>
 8007e20:	e001      	b.n	8007e26 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40023800 	.word	0x40023800
 8007e34:	40007000 	.word	0x40007000
 8007e38:	42470060 	.word	0x42470060

08007e3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b082      	sub	sp, #8
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e056      	b.n	8007efc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d106      	bne.n	8007e6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7fb fd3f 	bl	80038ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2202      	movs	r2, #2
 8007e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	431a      	orrs	r2, r3
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	691b      	ldr	r3, [r3, #16]
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	431a      	orrs	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	699b      	ldr	r3, [r3, #24]
 8007ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	ea42 0103 	orr.w	r1, r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	699b      	ldr	r3, [r3, #24]
 8007eca:	0c1b      	lsrs	r3, r3, #16
 8007ecc:	f003 0104 	and.w	r1, r3, #4
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	69da      	ldr	r2, [r3, #28]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007eea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3708      	adds	r7, #8
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b088      	sub	sp, #32
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	603b      	str	r3, [r7, #0]
 8007f10:	4613      	mov	r3, r2
 8007f12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d101      	bne.n	8007f26 <HAL_SPI_Transmit+0x22>
 8007f22:	2302      	movs	r3, #2
 8007f24:	e11e      	b.n	8008164 <HAL_SPI_Transmit+0x260>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f2e:	f7fc f813 	bl	8003f58 <HAL_GetTick>
 8007f32:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f34:	88fb      	ldrh	r3, [r7, #6]
 8007f36:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d002      	beq.n	8007f4a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f44:	2302      	movs	r3, #2
 8007f46:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f48:	e103      	b.n	8008152 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_SPI_Transmit+0x52>
 8007f50:	88fb      	ldrh	r3, [r7, #6]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d102      	bne.n	8007f5c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f5a:	e0fa      	b.n	8008152 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2203      	movs	r2, #3
 8007f60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68ba      	ldr	r2, [r7, #8]
 8007f6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	88fa      	ldrh	r2, [r7, #6]
 8007f74:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	88fa      	ldrh	r2, [r7, #6]
 8007f7a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa2:	d107      	bne.n	8007fb4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007fb2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fbe:	2b40      	cmp	r3, #64	; 0x40
 8007fc0:	d007      	beq.n	8007fd2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fda:	d14b      	bne.n	8008074 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_SPI_Transmit+0xe6>
 8007fe4:	8afb      	ldrh	r3, [r7, #22]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d13e      	bne.n	8008068 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffa:	1c9a      	adds	r2, r3, #2
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008004:	b29b      	uxth	r3, r3
 8008006:	3b01      	subs	r3, #1
 8008008:	b29a      	uxth	r2, r3
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800800e:	e02b      	b.n	8008068 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	f003 0302 	and.w	r3, r3, #2
 800801a:	2b02      	cmp	r3, #2
 800801c:	d112      	bne.n	8008044 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008022:	881a      	ldrh	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	1c9a      	adds	r2, r3, #2
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008038:	b29b      	uxth	r3, r3
 800803a:	3b01      	subs	r3, #1
 800803c:	b29a      	uxth	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	86da      	strh	r2, [r3, #54]	; 0x36
 8008042:	e011      	b.n	8008068 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008044:	f7fb ff88 	bl	8003f58 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	429a      	cmp	r2, r3
 8008052:	d803      	bhi.n	800805c <HAL_SPI_Transmit+0x158>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800805a:	d102      	bne.n	8008062 <HAL_SPI_Transmit+0x15e>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d102      	bne.n	8008068 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008066:	e074      	b.n	8008152 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800806c:	b29b      	uxth	r3, r3
 800806e:	2b00      	cmp	r3, #0
 8008070:	d1ce      	bne.n	8008010 <HAL_SPI_Transmit+0x10c>
 8008072:	e04c      	b.n	800810e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <HAL_SPI_Transmit+0x17e>
 800807c:	8afb      	ldrh	r3, [r7, #22]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d140      	bne.n	8008104 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	7812      	ldrb	r2, [r2, #0]
 800808e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	1c5a      	adds	r2, r3, #1
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29a      	uxth	r2, r3
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80080a8:	e02c      	b.n	8008104 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 0302 	and.w	r3, r3, #2
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d113      	bne.n	80080e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	330c      	adds	r3, #12
 80080c2:	7812      	ldrb	r2, [r2, #0]
 80080c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	1c5a      	adds	r2, r3, #1
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	3b01      	subs	r3, #1
 80080d8:	b29a      	uxth	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80080de:	e011      	b.n	8008104 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080e0:	f7fb ff3a 	bl	8003f58 <HAL_GetTick>
 80080e4:	4602      	mov	r2, r0
 80080e6:	69bb      	ldr	r3, [r7, #24]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	683a      	ldr	r2, [r7, #0]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d803      	bhi.n	80080f8 <HAL_SPI_Transmit+0x1f4>
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d102      	bne.n	80080fe <HAL_SPI_Transmit+0x1fa>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d102      	bne.n	8008104 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008102:	e026      	b.n	8008152 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1cd      	bne.n	80080aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	68f8      	ldr	r0, [r7, #12]
 8008114:	f000 fbb2 	bl	800887c <SPI_EndRxTxTransaction>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d002      	beq.n	8008124 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2220      	movs	r2, #32
 8008122:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800812c:	2300      	movs	r3, #0
 800812e:	613b      	str	r3, [r7, #16]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	613b      	str	r3, [r7, #16]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	2b00      	cmp	r3, #0
 8008148:	d002      	beq.n	8008150 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	77fb      	strb	r3, [r7, #31]
 800814e:	e000      	b.n	8008152 <HAL_SPI_Transmit+0x24e>
  }

error:
 8008150:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008162:	7ffb      	ldrb	r3, [r7, #31]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af02      	add	r7, sp, #8
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800817c:	2300      	movs	r3, #0
 800817e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008188:	d112      	bne.n	80081b0 <HAL_SPI_Receive+0x44>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10e      	bne.n	80081b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2204      	movs	r2, #4
 8008196:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800819a:	88fa      	ldrh	r2, [r7, #6]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	4613      	mov	r3, r2
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	68b9      	ldr	r1, [r7, #8]
 80081a6:	68f8      	ldr	r0, [r7, #12]
 80081a8:	f000 f8e9 	bl	800837e <HAL_SPI_TransmitReceive>
 80081ac:	4603      	mov	r3, r0
 80081ae:	e0e2      	b.n	8008376 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_SPI_Receive+0x52>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e0db      	b.n	8008376 <HAL_SPI_Receive+0x20a>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80081c6:	f7fb fec7 	bl	8003f58 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d002      	beq.n	80081de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80081d8:	2302      	movs	r3, #2
 80081da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081dc:	e0c2      	b.n	8008364 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d002      	beq.n	80081ea <HAL_SPI_Receive+0x7e>
 80081e4:	88fb      	ldrh	r3, [r7, #6]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d102      	bne.n	80081f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80081ee:	e0b9      	b.n	8008364 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2204      	movs	r2, #4
 80081f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2200      	movs	r2, #0
 80081fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	88fa      	ldrh	r2, [r7, #6]
 8008208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	88fa      	ldrh	r2, [r7, #6]
 800820e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2200      	movs	r2, #0
 8008214:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2200      	movs	r2, #0
 8008226:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008236:	d107      	bne.n	8008248 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008246:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d007      	beq.n	8008266 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681a      	ldr	r2, [r3, #0]
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008264:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d162      	bne.n	8008334 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800826e:	e02e      	b.n	80082ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b01      	cmp	r3, #1
 800827c:	d115      	bne.n	80082aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f103 020c 	add.w	r2, r3, #12
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	7812      	ldrb	r2, [r2, #0]
 800828c:	b2d2      	uxtb	r2, r2
 800828e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008294:	1c5a      	adds	r2, r3, #1
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800829e:	b29b      	uxth	r3, r3
 80082a0:	3b01      	subs	r3, #1
 80082a2:	b29a      	uxth	r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80082a8:	e011      	b.n	80082ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082aa:	f7fb fe55 	bl	8003f58 <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	683a      	ldr	r2, [r7, #0]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d803      	bhi.n	80082c2 <HAL_SPI_Receive+0x156>
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c0:	d102      	bne.n	80082c8 <HAL_SPI_Receive+0x15c>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80082cc:	e04a      	b.n	8008364 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082d2:	b29b      	uxth	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d1cb      	bne.n	8008270 <HAL_SPI_Receive+0x104>
 80082d8:	e031      	b.n	800833e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f003 0301 	and.w	r3, r3, #1
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d113      	bne.n	8008310 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68da      	ldr	r2, [r3, #12]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	b292      	uxth	r2, r2
 80082f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fa:	1c9a      	adds	r2, r3, #2
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008304:	b29b      	uxth	r3, r3
 8008306:	3b01      	subs	r3, #1
 8008308:	b29a      	uxth	r2, r3
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800830e:	e011      	b.n	8008334 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008310:	f7fb fe22 	bl	8003f58 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d803      	bhi.n	8008328 <HAL_SPI_Receive+0x1bc>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008326:	d102      	bne.n	800832e <HAL_SPI_Receive+0x1c2>
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008332:	e017      	b.n	8008364 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008338:	b29b      	uxth	r3, r3
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1cd      	bne.n	80082da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800833e:	693a      	ldr	r2, [r7, #16]
 8008340:	6839      	ldr	r1, [r7, #0]
 8008342:	68f8      	ldr	r0, [r7, #12]
 8008344:	f000 fa35 	bl	80087b2 <SPI_EndRxTransaction>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2220      	movs	r2, #32
 8008352:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008358:	2b00      	cmp	r3, #0
 800835a:	d002      	beq.n	8008362 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
 8008360:	e000      	b.n	8008364 <HAL_SPI_Receive+0x1f8>
  }

error :
 8008362:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008374:	7dfb      	ldrb	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b08c      	sub	sp, #48	; 0x30
 8008382:	af00      	add	r7, sp, #0
 8008384:	60f8      	str	r0, [r7, #12]
 8008386:	60b9      	str	r1, [r7, #8]
 8008388:	607a      	str	r2, [r7, #4]
 800838a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800838c:	2301      	movs	r3, #1
 800838e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_SPI_TransmitReceive+0x26>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e18a      	b.n	80086ba <HAL_SPI_TransmitReceive+0x33c>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083ac:	f7fb fdd4 	bl	8003f58 <HAL_GetTick>
 80083b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80083c2:	887b      	ldrh	r3, [r7, #2]
 80083c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80083c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ca:	2b01      	cmp	r3, #1
 80083cc:	d00f      	beq.n	80083ee <HAL_SPI_TransmitReceive+0x70>
 80083ce:	69fb      	ldr	r3, [r7, #28]
 80083d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80083d4:	d107      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <HAL_SPI_TransmitReceive+0x68>
 80083de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083e2:	2b04      	cmp	r3, #4
 80083e4:	d003      	beq.n	80083ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
 80083e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80083ec:	e15b      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x82>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <HAL_SPI_TransmitReceive+0x82>
 80083fa:	887b      	ldrh	r3, [r7, #2]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008406:	e14e      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b04      	cmp	r3, #4
 8008412:	d003      	beq.n	800841c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	2205      	movs	r2, #5
 8008418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2200      	movs	r2, #0
 8008420:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	887a      	ldrh	r2, [r7, #2]
 800842c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	887a      	ldrh	r2, [r7, #2]
 8008432:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	887a      	ldrh	r2, [r7, #2]
 800843e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	887a      	ldrh	r2, [r7, #2]
 8008444:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2200      	movs	r2, #0
 800844a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	d007      	beq.n	8008470 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800846e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008478:	d178      	bne.n	800856c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d002      	beq.n	8008488 <HAL_SPI_TransmitReceive+0x10a>
 8008482:	8b7b      	ldrh	r3, [r7, #26]
 8008484:	2b01      	cmp	r3, #1
 8008486:	d166      	bne.n	8008556 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	881a      	ldrh	r2, [r3, #0]
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008498:	1c9a      	adds	r2, r3, #2
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	3b01      	subs	r3, #1
 80084a6:	b29a      	uxth	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80084ac:	e053      	b.n	8008556 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d11b      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x176>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d016      	beq.n	80084f4 <HAL_SPI_TransmitReceive+0x176>
 80084c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d113      	bne.n	80084f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	881a      	ldrh	r2, [r3, #0]
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	1c9a      	adds	r2, r3, #2
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	3b01      	subs	r3, #1
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689b      	ldr	r3, [r3, #8]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d119      	bne.n	8008536 <HAL_SPI_TransmitReceive+0x1b8>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008506:	b29b      	uxth	r3, r3
 8008508:	2b00      	cmp	r3, #0
 800850a:	d014      	beq.n	8008536 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68da      	ldr	r2, [r3, #12]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	b292      	uxth	r2, r2
 8008518:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800851e:	1c9a      	adds	r2, r3, #2
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29a      	uxth	r2, r3
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008532:	2301      	movs	r3, #1
 8008534:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008536:	f7fb fd0f 	bl	8003f58 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008542:	429a      	cmp	r2, r3
 8008544:	d807      	bhi.n	8008556 <HAL_SPI_TransmitReceive+0x1d8>
 8008546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800854c:	d003      	beq.n	8008556 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008554:	e0a7      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800855a:	b29b      	uxth	r3, r3
 800855c:	2b00      	cmp	r3, #0
 800855e:	d1a6      	bne.n	80084ae <HAL_SPI_TransmitReceive+0x130>
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008564:	b29b      	uxth	r3, r3
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1a1      	bne.n	80084ae <HAL_SPI_TransmitReceive+0x130>
 800856a:	e07c      	b.n	8008666 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d002      	beq.n	800857a <HAL_SPI_TransmitReceive+0x1fc>
 8008574:	8b7b      	ldrh	r3, [r7, #26]
 8008576:	2b01      	cmp	r3, #1
 8008578:	d16b      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	7812      	ldrb	r2, [r2, #0]
 8008586:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858c:	1c5a      	adds	r2, r3, #1
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085a0:	e057      	b.n	8008652 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f003 0302 	and.w	r3, r3, #2
 80085ac:	2b02      	cmp	r3, #2
 80085ae:	d11c      	bne.n	80085ea <HAL_SPI_TransmitReceive+0x26c>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d017      	beq.n	80085ea <HAL_SPI_TransmitReceive+0x26c>
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	2b01      	cmp	r3, #1
 80085be:	d114      	bne.n	80085ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	330c      	adds	r3, #12
 80085ca:	7812      	ldrb	r2, [r2, #0]
 80085cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085dc:	b29b      	uxth	r3, r3
 80085de:	3b01      	subs	r3, #1
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80085e6:	2300      	movs	r3, #0
 80085e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d119      	bne.n	800862c <HAL_SPI_TransmitReceive+0x2ae>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d014      	beq.n	800862c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008614:	1c5a      	adds	r2, r3, #1
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800861e:	b29b      	uxth	r3, r3
 8008620:	3b01      	subs	r3, #1
 8008622:	b29a      	uxth	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008628:	2301      	movs	r3, #1
 800862a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800862c:	f7fb fc94 	bl	8003f58 <HAL_GetTick>
 8008630:	4602      	mov	r2, r0
 8008632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008634:	1ad3      	subs	r3, r2, r3
 8008636:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008638:	429a      	cmp	r2, r3
 800863a:	d803      	bhi.n	8008644 <HAL_SPI_TransmitReceive+0x2c6>
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008642:	d102      	bne.n	800864a <HAL_SPI_TransmitReceive+0x2cc>
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	2b00      	cmp	r3, #0
 8008648:	d103      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800864a:	2303      	movs	r3, #3
 800864c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008650:	e029      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008656:	b29b      	uxth	r3, r3
 8008658:	2b00      	cmp	r3, #0
 800865a:	d1a2      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x224>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008660:	b29b      	uxth	r3, r3
 8008662:	2b00      	cmp	r3, #0
 8008664:	d19d      	bne.n	80085a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008668:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800866a:	68f8      	ldr	r0, [r7, #12]
 800866c:	f000 f906 	bl	800887c <SPI_EndRxTxTransaction>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d006      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008676:	2301      	movs	r3, #1
 8008678:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2220      	movs	r2, #32
 8008680:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008682:	e010      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10b      	bne.n	80086a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	617b      	str	r3, [r7, #20]
 80086a0:	697b      	ldr	r3, [r7, #20]
 80086a2:	e000      	b.n	80086a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80086a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80086b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3730      	adds	r7, #48	; 0x30
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086d0:	b2db      	uxtb	r3, r3
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	60f8      	str	r0, [r7, #12]
 80086e6:	60b9      	str	r1, [r7, #8]
 80086e8:	603b      	str	r3, [r7, #0]
 80086ea:	4613      	mov	r3, r2
 80086ec:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80086ee:	e04c      	b.n	800878a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086f6:	d048      	beq.n	800878a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80086f8:	f7fb fc2e 	bl	8003f58 <HAL_GetTick>
 80086fc:	4602      	mov	r2, r0
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	1ad3      	subs	r3, r2, r3
 8008702:	683a      	ldr	r2, [r7, #0]
 8008704:	429a      	cmp	r2, r3
 8008706:	d902      	bls.n	800870e <SPI_WaitFlagStateUntilTimeout+0x30>
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d13d      	bne.n	800878a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800871c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	685b      	ldr	r3, [r3, #4]
 8008722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008726:	d111      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008730:	d004      	beq.n	800873c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	689b      	ldr	r3, [r3, #8]
 8008736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800873a:	d107      	bne.n	800874c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800874a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008750:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008754:	d10f      	bne.n	8008776 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008774:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e00f      	b.n	80087aa <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4013      	ands	r3, r2
 8008794:	68ba      	ldr	r2, [r7, #8]
 8008796:	429a      	cmp	r2, r3
 8008798:	bf0c      	ite	eq
 800879a:	2301      	moveq	r3, #1
 800879c:	2300      	movne	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	461a      	mov	r2, r3
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d1a3      	bne.n	80086f0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b086      	sub	sp, #24
 80087b6:	af02      	add	r7, sp, #8
 80087b8:	60f8      	str	r0, [r7, #12]
 80087ba:	60b9      	str	r1, [r7, #8]
 80087bc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087c6:	d111      	bne.n	80087ec <SPI_EndRxTransaction+0x3a>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087d0:	d004      	beq.n	80087dc <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087da:	d107      	bne.n	80087ec <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	681a      	ldr	r2, [r3, #0]
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087ea:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80087f4:	d12a      	bne.n	800884c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087fe:	d012      	beq.n	8008826 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2200      	movs	r2, #0
 8008808:	2180      	movs	r1, #128	; 0x80
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f7ff ff67 	bl	80086de <SPI_WaitFlagStateUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d02d      	beq.n	8008872 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800881a:	f043 0220 	orr.w	r2, r3, #32
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008822:	2303      	movs	r3, #3
 8008824:	e026      	b.n	8008874 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	2200      	movs	r2, #0
 800882e:	2101      	movs	r1, #1
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f7ff ff54 	bl	80086de <SPI_WaitFlagStateUntilTimeout>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01a      	beq.n	8008872 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008840:	f043 0220 	orr.w	r2, r3, #32
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008848:	2303      	movs	r3, #3
 800884a:	e013      	b.n	8008874 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	2200      	movs	r2, #0
 8008854:	2101      	movs	r1, #1
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7ff ff41 	bl	80086de <SPI_WaitFlagStateUntilTimeout>
 800885c:	4603      	mov	r3, r0
 800885e:	2b00      	cmp	r3, #0
 8008860:	d007      	beq.n	8008872 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	f043 0220 	orr.w	r2, r3, #32
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e000      	b.n	8008874 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008872:	2300      	movs	r3, #0
}
 8008874:	4618      	mov	r0, r3
 8008876:	3710      	adds	r7, #16
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af02      	add	r7, sp, #8
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	60b9      	str	r1, [r7, #8]
 8008886:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008888:	4b1b      	ldr	r3, [pc, #108]	; (80088f8 <SPI_EndRxTxTransaction+0x7c>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a1b      	ldr	r2, [pc, #108]	; (80088fc <SPI_EndRxTxTransaction+0x80>)
 800888e:	fba2 2303 	umull	r2, r3, r2, r3
 8008892:	0d5b      	lsrs	r3, r3, #21
 8008894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008898:	fb02 f303 	mul.w	r3, r2, r3
 800889c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088a6:	d112      	bne.n	80088ce <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	9300      	str	r3, [sp, #0]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	2180      	movs	r1, #128	; 0x80
 80088b2:	68f8      	ldr	r0, [r7, #12]
 80088b4:	f7ff ff13 	bl	80086de <SPI_WaitFlagStateUntilTimeout>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d016      	beq.n	80088ec <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c2:	f043 0220 	orr.w	r2, r3, #32
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e00f      	b.n	80088ee <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d00a      	beq.n	80088ea <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	3b01      	subs	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088e4:	2b80      	cmp	r3, #128	; 0x80
 80088e6:	d0f2      	beq.n	80088ce <SPI_EndRxTxTransaction+0x52>
 80088e8:	e000      	b.n	80088ec <SPI_EndRxTxTransaction+0x70>
        break;
 80088ea:	bf00      	nop
  }

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000000 	.word	0x20000000
 80088fc:	165e9f81 	.word	0x165e9f81

08008900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b082      	sub	sp, #8
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d101      	bne.n	8008912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e01d      	b.n	800894e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d106      	bne.n	800892c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7fb f8d4 	bl	8003ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2202      	movs	r2, #2
 8008930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	3304      	adds	r3, #4
 800893c:	4619      	mov	r1, r3
 800893e:	4610      	mov	r0, r2
 8008940:	f000 f9f0 	bl	8008d24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b082      	sub	sp, #8
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d101      	bne.n	8008968 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e01d      	b.n	80089a4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d106      	bne.n	8008982 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7fb f889 	bl	8003a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2202      	movs	r2, #2
 8008986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	3304      	adds	r3, #4
 8008992:	4619      	mov	r1, r3
 8008994:	4610      	mov	r0, r2
 8008996:	f000 f9c5 	bl	8008d24 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3708      	adds	r7, #8
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	2201      	movs	r2, #1
 80089bc:	6839      	ldr	r1, [r7, #0]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fc9a 	bl	80092f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a15      	ldr	r2, [pc, #84]	; (8008a20 <HAL_TIM_PWM_Start+0x74>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d004      	beq.n	80089d8 <HAL_TIM_PWM_Start+0x2c>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a14      	ldr	r2, [pc, #80]	; (8008a24 <HAL_TIM_PWM_Start+0x78>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d101      	bne.n	80089dc <HAL_TIM_PWM_Start+0x30>
 80089d8:	2301      	movs	r3, #1
 80089da:	e000      	b.n	80089de <HAL_TIM_PWM_Start+0x32>
 80089dc:	2300      	movs	r3, #0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d007      	beq.n	80089f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	689b      	ldr	r3, [r3, #8]
 80089f8:	f003 0307 	and.w	r3, r3, #7
 80089fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	2b06      	cmp	r3, #6
 8008a02:	d007      	beq.n	8008a14 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	40010000 	.word	0x40010000
 8008a24:	40010400 	.word	0x40010400

08008a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b084      	sub	sp, #16
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	60f8      	str	r0, [r7, #12]
 8008a30:	60b9      	str	r1, [r7, #8]
 8008a32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d101      	bne.n	8008a42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008a3e:	2302      	movs	r3, #2
 8008a40:	e0b4      	b.n	8008bac <HAL_TIM_PWM_ConfigChannel+0x184>
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2201      	movs	r2, #1
 8008a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2202      	movs	r2, #2
 8008a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2b0c      	cmp	r3, #12
 8008a56:	f200 809f 	bhi.w	8008b98 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a95 	.word	0x08008a95
 8008a64:	08008b99 	.word	0x08008b99
 8008a68:	08008b99 	.word	0x08008b99
 8008a6c:	08008b99 	.word	0x08008b99
 8008a70:	08008ad5 	.word	0x08008ad5
 8008a74:	08008b99 	.word	0x08008b99
 8008a78:	08008b99 	.word	0x08008b99
 8008a7c:	08008b99 	.word	0x08008b99
 8008a80:	08008b17 	.word	0x08008b17
 8008a84:	08008b99 	.word	0x08008b99
 8008a88:	08008b99 	.word	0x08008b99
 8008a8c:	08008b99 	.word	0x08008b99
 8008a90:	08008b57 	.word	0x08008b57
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 f9e2 	bl	8008e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	699a      	ldr	r2, [r3, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0208 	orr.w	r2, r2, #8
 8008aae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	699a      	ldr	r2, [r3, #24]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0204 	bic.w	r2, r2, #4
 8008abe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6999      	ldr	r1, [r3, #24]
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	691a      	ldr	r2, [r3, #16]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	619a      	str	r2, [r3, #24]
      break;
 8008ad2:	e062      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fa32 	bl	8008f44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	699a      	ldr	r2, [r3, #24]
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	699a      	ldr	r2, [r3, #24]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6999      	ldr	r1, [r3, #24]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	021a      	lsls	r2, r3, #8
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	619a      	str	r2, [r3, #24]
      break;
 8008b14:	e041      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68b9      	ldr	r1, [r7, #8]
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 fa87 	bl	8009030 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69da      	ldr	r2, [r3, #28]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0208 	orr.w	r2, r2, #8
 8008b30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69da      	ldr	r2, [r3, #28]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f022 0204 	bic.w	r2, r2, #4
 8008b40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	69d9      	ldr	r1, [r3, #28]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	691a      	ldr	r2, [r3, #16]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	430a      	orrs	r2, r1
 8008b52:	61da      	str	r2, [r3, #28]
      break;
 8008b54:	e021      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68b9      	ldr	r1, [r7, #8]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fadb 	bl	8009118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	69da      	ldr	r2, [r3, #28]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	69da      	ldr	r2, [r3, #28]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	69d9      	ldr	r1, [r3, #28]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	691b      	ldr	r3, [r3, #16]
 8008b8c:	021a      	lsls	r2, r3, #8
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	430a      	orrs	r2, r1
 8008b94:	61da      	str	r2, [r3, #28]
      break;
 8008b96:	e000      	b.n	8008b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8008b98:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008baa:	2300      	movs	r3, #0
}
 8008bac:	4618      	mov	r0, r3
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d101      	bne.n	8008bcc <HAL_TIM_ConfigClockSource+0x18>
 8008bc8:	2302      	movs	r3, #2
 8008bca:	e0a6      	b.n	8008d1a <HAL_TIM_ConfigClockSource+0x166>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008bea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008bf2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b40      	cmp	r3, #64	; 0x40
 8008c02:	d067      	beq.n	8008cd4 <HAL_TIM_ConfigClockSource+0x120>
 8008c04:	2b40      	cmp	r3, #64	; 0x40
 8008c06:	d80b      	bhi.n	8008c20 <HAL_TIM_ConfigClockSource+0x6c>
 8008c08:	2b10      	cmp	r3, #16
 8008c0a:	d073      	beq.n	8008cf4 <HAL_TIM_ConfigClockSource+0x140>
 8008c0c:	2b10      	cmp	r3, #16
 8008c0e:	d802      	bhi.n	8008c16 <HAL_TIM_ConfigClockSource+0x62>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d06f      	beq.n	8008cf4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008c14:	e078      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d06c      	beq.n	8008cf4 <HAL_TIM_ConfigClockSource+0x140>
 8008c1a:	2b30      	cmp	r3, #48	; 0x30
 8008c1c:	d06a      	beq.n	8008cf4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008c1e:	e073      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c20:	2b70      	cmp	r3, #112	; 0x70
 8008c22:	d00d      	beq.n	8008c40 <HAL_TIM_ConfigClockSource+0x8c>
 8008c24:	2b70      	cmp	r3, #112	; 0x70
 8008c26:	d804      	bhi.n	8008c32 <HAL_TIM_ConfigClockSource+0x7e>
 8008c28:	2b50      	cmp	r3, #80	; 0x50
 8008c2a:	d033      	beq.n	8008c94 <HAL_TIM_ConfigClockSource+0xe0>
 8008c2c:	2b60      	cmp	r3, #96	; 0x60
 8008c2e:	d041      	beq.n	8008cb4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008c30:	e06a      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c36:	d066      	beq.n	8008d06 <HAL_TIM_ConfigClockSource+0x152>
 8008c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c3c:	d017      	beq.n	8008c6e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008c3e:	e063      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6818      	ldr	r0, [r3, #0]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	6899      	ldr	r1, [r3, #8]
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	f000 fb32 	bl	80092b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008c62:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	609a      	str	r2, [r3, #8]
      break;
 8008c6c:	e04c      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6818      	ldr	r0, [r3, #0]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	6899      	ldr	r1, [r3, #8]
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	685a      	ldr	r2, [r3, #4]
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	f000 fb1b 	bl	80092b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c90:	609a      	str	r2, [r3, #8]
      break;
 8008c92:	e039      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6818      	ldr	r0, [r3, #0]
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	6859      	ldr	r1, [r3, #4]
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	f000 fa8f 	bl	80091c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2150      	movs	r1, #80	; 0x50
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fae8 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 8008cb2:	e029      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	6859      	ldr	r1, [r3, #4]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	68db      	ldr	r3, [r3, #12]
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	f000 faae 	bl	8009222 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	2160      	movs	r1, #96	; 0x60
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f000 fad8 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 8008cd2:	e019      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6818      	ldr	r0, [r3, #0]
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	6859      	ldr	r1, [r3, #4]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	f000 fa6f 	bl	80091c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	2140      	movs	r1, #64	; 0x40
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fac8 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 8008cf2:	e009      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	4610      	mov	r0, r2
 8008d00:	f000 fabf 	bl	8009282 <TIM_ITRx_SetConfig>
      break;
 8008d04:	e000      	b.n	8008d08 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8008d06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3710      	adds	r7, #16
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}
	...

08008d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a40      	ldr	r2, [pc, #256]	; (8008e38 <TIM_Base_SetConfig+0x114>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d013      	beq.n	8008d64 <TIM_Base_SetConfig+0x40>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d42:	d00f      	beq.n	8008d64 <TIM_Base_SetConfig+0x40>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a3d      	ldr	r2, [pc, #244]	; (8008e3c <TIM_Base_SetConfig+0x118>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d00b      	beq.n	8008d64 <TIM_Base_SetConfig+0x40>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a3c      	ldr	r2, [pc, #240]	; (8008e40 <TIM_Base_SetConfig+0x11c>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d007      	beq.n	8008d64 <TIM_Base_SetConfig+0x40>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a3b      	ldr	r2, [pc, #236]	; (8008e44 <TIM_Base_SetConfig+0x120>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d003      	beq.n	8008d64 <TIM_Base_SetConfig+0x40>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a3a      	ldr	r2, [pc, #232]	; (8008e48 <TIM_Base_SetConfig+0x124>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d108      	bne.n	8008d76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a2f      	ldr	r2, [pc, #188]	; (8008e38 <TIM_Base_SetConfig+0x114>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d02b      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d84:	d027      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a2c      	ldr	r2, [pc, #176]	; (8008e3c <TIM_Base_SetConfig+0x118>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d023      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a2b      	ldr	r2, [pc, #172]	; (8008e40 <TIM_Base_SetConfig+0x11c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d01f      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a2a      	ldr	r2, [pc, #168]	; (8008e44 <TIM_Base_SetConfig+0x120>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d01b      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a29      	ldr	r2, [pc, #164]	; (8008e48 <TIM_Base_SetConfig+0x124>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d017      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a28      	ldr	r2, [pc, #160]	; (8008e4c <TIM_Base_SetConfig+0x128>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d013      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a27      	ldr	r2, [pc, #156]	; (8008e50 <TIM_Base_SetConfig+0x12c>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00f      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a26      	ldr	r2, [pc, #152]	; (8008e54 <TIM_Base_SetConfig+0x130>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00b      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a25      	ldr	r2, [pc, #148]	; (8008e58 <TIM_Base_SetConfig+0x134>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d007      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a24      	ldr	r2, [pc, #144]	; (8008e5c <TIM_Base_SetConfig+0x138>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_Base_SetConfig+0xb2>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a23      	ldr	r2, [pc, #140]	; (8008e60 <TIM_Base_SetConfig+0x13c>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d108      	bne.n	8008de8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a0a      	ldr	r2, [pc, #40]	; (8008e38 <TIM_Base_SetConfig+0x114>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_Base_SetConfig+0xf8>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a0c      	ldr	r2, [pc, #48]	; (8008e48 <TIM_Base_SetConfig+0x124>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d103      	bne.n	8008e24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	691a      	ldr	r2, [r3, #16]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	615a      	str	r2, [r3, #20]
}
 8008e2a:	bf00      	nop
 8008e2c:	3714      	adds	r7, #20
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e34:	4770      	bx	lr
 8008e36:	bf00      	nop
 8008e38:	40010000 	.word	0x40010000
 8008e3c:	40000400 	.word	0x40000400
 8008e40:	40000800 	.word	0x40000800
 8008e44:	40000c00 	.word	0x40000c00
 8008e48:	40010400 	.word	0x40010400
 8008e4c:	40014000 	.word	0x40014000
 8008e50:	40014400 	.word	0x40014400
 8008e54:	40014800 	.word	0x40014800
 8008e58:	40001800 	.word	0x40001800
 8008e5c:	40001c00 	.word	0x40001c00
 8008e60:	40002000 	.word	0x40002000

08008e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	f023 0201 	bic.w	r2, r3, #1
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f023 0302 	bic.w	r3, r3, #2
 8008eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a20      	ldr	r2, [pc, #128]	; (8008f3c <TIM_OC1_SetConfig+0xd8>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d003      	beq.n	8008ec8 <TIM_OC1_SetConfig+0x64>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a1f      	ldr	r2, [pc, #124]	; (8008f40 <TIM_OC1_SetConfig+0xdc>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d10c      	bne.n	8008ee2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f023 0308 	bic.w	r3, r3, #8
 8008ece:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	697a      	ldr	r2, [r7, #20]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	f023 0304 	bic.w	r3, r3, #4
 8008ee0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a15      	ldr	r2, [pc, #84]	; (8008f3c <TIM_OC1_SetConfig+0xd8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d003      	beq.n	8008ef2 <TIM_OC1_SetConfig+0x8e>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a14      	ldr	r2, [pc, #80]	; (8008f40 <TIM_OC1_SetConfig+0xdc>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d111      	bne.n	8008f16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	693a      	ldr	r2, [r7, #16]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	693a      	ldr	r2, [r7, #16]
 8008f1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68fa      	ldr	r2, [r7, #12]
 8008f20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	685a      	ldr	r2, [r3, #4]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	621a      	str	r2, [r3, #32]
}
 8008f30:	bf00      	nop
 8008f32:	371c      	adds	r7, #28
 8008f34:	46bd      	mov	sp, r7
 8008f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3a:	4770      	bx	lr
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40010400 	.word	0x40010400

08008f44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b087      	sub	sp, #28
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	f023 0210 	bic.w	r2, r3, #16
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6a1b      	ldr	r3, [r3, #32]
 8008f5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	699b      	ldr	r3, [r3, #24]
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	021b      	lsls	r3, r3, #8
 8008f82:	68fa      	ldr	r2, [r7, #12]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f023 0320 	bic.w	r3, r3, #32
 8008f8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	011b      	lsls	r3, r3, #4
 8008f96:	697a      	ldr	r2, [r7, #20]
 8008f98:	4313      	orrs	r3, r2
 8008f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a22      	ldr	r2, [pc, #136]	; (8009028 <TIM_OC2_SetConfig+0xe4>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d003      	beq.n	8008fac <TIM_OC2_SetConfig+0x68>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a21      	ldr	r2, [pc, #132]	; (800902c <TIM_OC2_SetConfig+0xe8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d10d      	bne.n	8008fc8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	011b      	lsls	r3, r3, #4
 8008fba:	697a      	ldr	r2, [r7, #20]
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a17      	ldr	r2, [pc, #92]	; (8009028 <TIM_OC2_SetConfig+0xe4>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d003      	beq.n	8008fd8 <TIM_OC2_SetConfig+0x94>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a16      	ldr	r2, [pc, #88]	; (800902c <TIM_OC2_SetConfig+0xe8>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d113      	bne.n	8009000 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fde:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	695b      	ldr	r3, [r3, #20]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	699b      	ldr	r3, [r3, #24]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	621a      	str	r2, [r3, #32]
}
 800901a:	bf00      	nop
 800901c:	371c      	adds	r7, #28
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	40010000 	.word	0x40010000
 800902c:	40010400 	.word	0x40010400

08009030 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009030:	b480      	push	{r7}
 8009032:	b087      	sub	sp, #28
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
 8009038:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a1b      	ldr	r3, [r3, #32]
 800904a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	69db      	ldr	r3, [r3, #28]
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800905e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 0303 	bic.w	r3, r3, #3
 8009066:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4313      	orrs	r3, r2
 8009070:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009078:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	021b      	lsls	r3, r3, #8
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a21      	ldr	r2, [pc, #132]	; (8009110 <TIM_OC3_SetConfig+0xe0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d003      	beq.n	8009096 <TIM_OC3_SetConfig+0x66>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a20      	ldr	r2, [pc, #128]	; (8009114 <TIM_OC3_SetConfig+0xe4>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d10d      	bne.n	80090b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800909c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	68db      	ldr	r3, [r3, #12]
 80090a2:	021b      	lsls	r3, r3, #8
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a16      	ldr	r2, [pc, #88]	; (8009110 <TIM_OC3_SetConfig+0xe0>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d003      	beq.n	80090c2 <TIM_OC3_SetConfig+0x92>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a15      	ldr	r2, [pc, #84]	; (8009114 <TIM_OC3_SetConfig+0xe4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d113      	bne.n	80090ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	4313      	orrs	r3, r2
 80090dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	699b      	ldr	r3, [r3, #24]
 80090e2:	011b      	lsls	r3, r3, #4
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	621a      	str	r2, [r3, #32]
}
 8009104:	bf00      	nop
 8009106:	371c      	adds	r7, #28
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	40010000 	.word	0x40010000
 8009114:	40010400 	.word	0x40010400

08009118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a1b      	ldr	r3, [r3, #32]
 8009126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a1b      	ldr	r3, [r3, #32]
 8009132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69db      	ldr	r3, [r3, #28]
 800913e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800914e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	021b      	lsls	r3, r3, #8
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	4313      	orrs	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	031b      	lsls	r3, r3, #12
 800916a:	693a      	ldr	r2, [r7, #16]
 800916c:	4313      	orrs	r3, r2
 800916e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	4a12      	ldr	r2, [pc, #72]	; (80091bc <TIM_OC4_SetConfig+0xa4>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d003      	beq.n	8009180 <TIM_OC4_SetConfig+0x68>
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4a11      	ldr	r2, [pc, #68]	; (80091c0 <TIM_OC4_SetConfig+0xa8>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d109      	bne.n	8009194 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009186:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	695b      	ldr	r3, [r3, #20]
 800918c:	019b      	lsls	r3, r3, #6
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	4313      	orrs	r3, r2
 8009192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	697a      	ldr	r2, [r7, #20]
 8009198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685a      	ldr	r2, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	621a      	str	r2, [r3, #32]
}
 80091ae:	bf00      	nop
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40010400 	.word	0x40010400

080091c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	6a1b      	ldr	r3, [r3, #32]
 80091da:	f023 0201 	bic.w	r2, r3, #1
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80091ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f023 030a 	bic.w	r3, r3, #10
 8009200:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009202:	697a      	ldr	r2, [r7, #20]
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
 8009208:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	621a      	str	r2, [r3, #32]
}
 8009216:	bf00      	nop
 8009218:	371c      	adds	r7, #28
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009222:	b480      	push	{r7}
 8009224:	b087      	sub	sp, #28
 8009226:	af00      	add	r7, sp, #0
 8009228:	60f8      	str	r0, [r7, #12]
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0210 	bic.w	r2, r3, #16
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6a1b      	ldr	r3, [r3, #32]
 8009244:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800924c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	031b      	lsls	r3, r3, #12
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800925e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	011b      	lsls	r3, r3, #4
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	4313      	orrs	r3, r2
 8009268:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	693a      	ldr	r2, [r7, #16]
 8009274:	621a      	str	r2, [r3, #32]
}
 8009276:	bf00      	nop
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009282:	b480      	push	{r7}
 8009284:	b085      	sub	sp, #20
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
 800928a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	689b      	ldr	r3, [r3, #8]
 8009290:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009298:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800929a:	683a      	ldr	r2, [r7, #0]
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	4313      	orrs	r3, r2
 80092a0:	f043 0307 	orr.w	r3, r3, #7
 80092a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	609a      	str	r2, [r3, #8]
}
 80092ac:	bf00      	nop
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
 80092c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80092d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	021a      	lsls	r2, r3, #8
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	431a      	orrs	r2, r3
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	4313      	orrs	r3, r2
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	609a      	str	r2, [r3, #8]
}
 80092ec:	bf00      	nop
 80092ee:	371c      	adds	r7, #28
 80092f0:	46bd      	mov	sp, r7
 80092f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f6:	4770      	bx	lr

080092f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	2201      	movs	r2, #1
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a1a      	ldr	r2, [r3, #32]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a1a      	ldr	r2, [r3, #32]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	fa01 f303 	lsl.w	r3, r1, r3
 8009330:	431a      	orrs	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	621a      	str	r2, [r3, #32]
}
 8009336:	bf00      	nop
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009358:	2302      	movs	r3, #2
 800935a:	e05a      	b.n	8009412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a21      	ldr	r2, [pc, #132]	; (8009420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d022      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093a8:	d01d      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1d      	ldr	r2, [pc, #116]	; (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d018      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1b      	ldr	r2, [pc, #108]	; (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1a      	ldr	r2, [pc, #104]	; (800942c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00e      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a18      	ldr	r2, [pc, #96]	; (8009430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a17      	ldr	r2, [pc, #92]	; (8009434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a15      	ldr	r2, [pc, #84]	; (8009438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d10c      	bne.n	8009400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40010000 	.word	0x40010000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40010400 	.word	0x40010400
 8009434:	40014000 	.word	0x40014000
 8009438:	40001800 	.word	0x40001800

0800943c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800943c:	b084      	sub	sp, #16
 800943e:	b580      	push	{r7, lr}
 8009440:	b084      	sub	sp, #16
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	f107 001c 	add.w	r0, r7, #28
 800944a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	2b01      	cmp	r3, #1
 8009452:	d122      	bne.n	800949a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009458:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009468:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800947c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800947e:	2b01      	cmp	r3, #1
 8009480:	d105      	bne.n	800948e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f001 fac0 	bl	800aa14 <USB_CoreReset>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]
 8009498:	e01a      	b.n	80094d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fab4 	bl	800aa14 <USB_CoreReset>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
 80094c2:	e005      	b.n	80094d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d10b      	bne.n	80094ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f043 0206 	orr.w	r2, r3, #6
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	689b      	ldr	r3, [r3, #8]
 80094e6:	f043 0220 	orr.w	r2, r3, #32
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3710      	adds	r7, #16
 80094f4:	46bd      	mov	sp, r7
 80094f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094fa:	b004      	add	sp, #16
 80094fc:	4770      	bx	lr
	...

08009500 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
 8009506:	60f8      	str	r0, [r7, #12]
 8009508:	60b9      	str	r1, [r7, #8]
 800950a:	4613      	mov	r3, r2
 800950c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800950e:	79fb      	ldrb	r3, [r7, #7]
 8009510:	2b02      	cmp	r3, #2
 8009512:	d165      	bne.n	80095e0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4a41      	ldr	r2, [pc, #260]	; (800961c <USB_SetTurnaroundTime+0x11c>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d906      	bls.n	800952a <USB_SetTurnaroundTime+0x2a>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	4a40      	ldr	r2, [pc, #256]	; (8009620 <USB_SetTurnaroundTime+0x120>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d802      	bhi.n	800952a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009524:	230f      	movs	r3, #15
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e062      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4a3c      	ldr	r2, [pc, #240]	; (8009620 <USB_SetTurnaroundTime+0x120>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d906      	bls.n	8009540 <USB_SetTurnaroundTime+0x40>
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	4a3b      	ldr	r2, [pc, #236]	; (8009624 <USB_SetTurnaroundTime+0x124>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d802      	bhi.n	8009540 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800953a:	230e      	movs	r3, #14
 800953c:	617b      	str	r3, [r7, #20]
 800953e:	e057      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4a38      	ldr	r2, [pc, #224]	; (8009624 <USB_SetTurnaroundTime+0x124>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d906      	bls.n	8009556 <USB_SetTurnaroundTime+0x56>
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	4a37      	ldr	r2, [pc, #220]	; (8009628 <USB_SetTurnaroundTime+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d802      	bhi.n	8009556 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009550:	230d      	movs	r3, #13
 8009552:	617b      	str	r3, [r7, #20]
 8009554:	e04c      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a33      	ldr	r2, [pc, #204]	; (8009628 <USB_SetTurnaroundTime+0x128>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d906      	bls.n	800956c <USB_SetTurnaroundTime+0x6c>
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	4a32      	ldr	r2, [pc, #200]	; (800962c <USB_SetTurnaroundTime+0x12c>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d802      	bhi.n	800956c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009566:	230c      	movs	r3, #12
 8009568:	617b      	str	r3, [r7, #20]
 800956a:	e041      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4a2f      	ldr	r2, [pc, #188]	; (800962c <USB_SetTurnaroundTime+0x12c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d906      	bls.n	8009582 <USB_SetTurnaroundTime+0x82>
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	4a2e      	ldr	r2, [pc, #184]	; (8009630 <USB_SetTurnaroundTime+0x130>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d802      	bhi.n	8009582 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800957c:	230b      	movs	r3, #11
 800957e:	617b      	str	r3, [r7, #20]
 8009580:	e036      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <USB_SetTurnaroundTime+0x130>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d906      	bls.n	8009598 <USB_SetTurnaroundTime+0x98>
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	4a29      	ldr	r2, [pc, #164]	; (8009634 <USB_SetTurnaroundTime+0x134>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d802      	bhi.n	8009598 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009592:	230a      	movs	r3, #10
 8009594:	617b      	str	r3, [r7, #20]
 8009596:	e02b      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4a26      	ldr	r2, [pc, #152]	; (8009634 <USB_SetTurnaroundTime+0x134>)
 800959c:	4293      	cmp	r3, r2
 800959e:	d906      	bls.n	80095ae <USB_SetTurnaroundTime+0xae>
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	4a25      	ldr	r2, [pc, #148]	; (8009638 <USB_SetTurnaroundTime+0x138>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d802      	bhi.n	80095ae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80095a8:	2309      	movs	r3, #9
 80095aa:	617b      	str	r3, [r7, #20]
 80095ac:	e020      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	4a21      	ldr	r2, [pc, #132]	; (8009638 <USB_SetTurnaroundTime+0x138>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d906      	bls.n	80095c4 <USB_SetTurnaroundTime+0xc4>
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	4a20      	ldr	r2, [pc, #128]	; (800963c <USB_SetTurnaroundTime+0x13c>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d802      	bhi.n	80095c4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095be:	2308      	movs	r3, #8
 80095c0:	617b      	str	r3, [r7, #20]
 80095c2:	e015      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	4a1d      	ldr	r2, [pc, #116]	; (800963c <USB_SetTurnaroundTime+0x13c>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d906      	bls.n	80095da <USB_SetTurnaroundTime+0xda>
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	4a1c      	ldr	r2, [pc, #112]	; (8009640 <USB_SetTurnaroundTime+0x140>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d802      	bhi.n	80095da <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80095d4:	2307      	movs	r3, #7
 80095d6:	617b      	str	r3, [r7, #20]
 80095d8:	e00a      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80095da:	2306      	movs	r3, #6
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e007      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80095e6:	2309      	movs	r3, #9
 80095e8:	617b      	str	r3, [r7, #20]
 80095ea:	e001      	b.n	80095f0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80095ec:	2309      	movs	r3, #9
 80095ee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	68da      	ldr	r2, [r3, #12]
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	029b      	lsls	r3, r3, #10
 8009604:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009608:	431a      	orrs	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	00d8acbf 	.word	0x00d8acbf
 8009620:	00e4e1bf 	.word	0x00e4e1bf
 8009624:	00f423ff 	.word	0x00f423ff
 8009628:	0106737f 	.word	0x0106737f
 800962c:	011a499f 	.word	0x011a499f
 8009630:	01312cff 	.word	0x01312cff
 8009634:	014ca43f 	.word	0x014ca43f
 8009638:	016e35ff 	.word	0x016e35ff
 800963c:	01a6ab1f 	.word	0x01a6ab1f
 8009640:	01e847ff 	.word	0x01e847ff

08009644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	f043 0201 	orr.w	r2, r3, #1
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	370c      	adds	r7, #12
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr

08009666 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009666:	b480      	push	{r7}
 8009668:	b083      	sub	sp, #12
 800966a:	af00      	add	r7, sp, #0
 800966c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f023 0201 	bic.w	r2, r3, #1
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b082      	sub	sp, #8
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	460b      	mov	r3, r1
 8009692:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	68db      	ldr	r3, [r3, #12]
 8009698:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80096a0:	78fb      	ldrb	r3, [r7, #3]
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d106      	bne.n	80096b4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	68db      	ldr	r3, [r3, #12]
 80096aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	60da      	str	r2, [r3, #12]
 80096b2:	e00b      	b.n	80096cc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d106      	bne.n	80096c8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	68db      	ldr	r3, [r3, #12]
 80096be:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60da      	str	r2, [r3, #12]
 80096c6:	e001      	b.n	80096cc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e003      	b.n	80096d4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80096cc:	2032      	movs	r0, #50	; 0x32
 80096ce:	f7fa fc4f 	bl	8003f70 <HAL_Delay>

  return HAL_OK;
 80096d2:	2300      	movs	r3, #0
}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096dc:	b084      	sub	sp, #16
 80096de:	b580      	push	{r7, lr}
 80096e0:	b086      	sub	sp, #24
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80096ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096f6:	2300      	movs	r3, #0
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	e009      	b.n	8009710 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	3340      	adds	r3, #64	; 0x40
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	2200      	movs	r2, #0
 8009708:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	3301      	adds	r3, #1
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	2b0e      	cmp	r3, #14
 8009714:	d9f2      	bls.n	80096fc <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d11c      	bne.n	8009756 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800972a:	f043 0302 	orr.w	r3, r3, #2
 800972e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	601a      	str	r2, [r3, #0]
 8009754:	e005      	b.n	8009762 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009768:	461a      	mov	r2, r3
 800976a:	2300      	movs	r3, #0
 800976c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009774:	4619      	mov	r1, r3
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800977c:	461a      	mov	r2, r3
 800977e:	680b      	ldr	r3, [r1, #0]
 8009780:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009784:	2b01      	cmp	r3, #1
 8009786:	d10c      	bne.n	80097a2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800978a:	2b00      	cmp	r3, #0
 800978c:	d104      	bne.n	8009798 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800978e:	2100      	movs	r1, #0
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f949 	bl	8009a28 <USB_SetDevSpeed>
 8009796:	e008      	b.n	80097aa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009798:	2101      	movs	r1, #1
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f944 	bl	8009a28 <USB_SetDevSpeed>
 80097a0:	e003      	b.n	80097aa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097a2:	2103      	movs	r1, #3
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f93f 	bl	8009a28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097aa:	2110      	movs	r1, #16
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 f8f3 	bl	8009998 <USB_FlushTxFifo>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d001      	beq.n	80097bc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f911 	bl	80099e4 <USB_FlushRxFifo>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d2:	461a      	mov	r2, r3
 80097d4:	2300      	movs	r3, #0
 80097d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097de:	461a      	mov	r2, r3
 80097e0:	2300      	movs	r3, #0
 80097e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ea:	461a      	mov	r2, r3
 80097ec:	2300      	movs	r3, #0
 80097ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097f0:	2300      	movs	r3, #0
 80097f2:	613b      	str	r3, [r7, #16]
 80097f4:	e043      	b.n	800987e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009808:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800980c:	d118      	bne.n	8009840 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10a      	bne.n	800982a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009820:	461a      	mov	r2, r3
 8009822:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009826:	6013      	str	r3, [r2, #0]
 8009828:	e013      	b.n	8009852 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	015a      	lsls	r2, r3, #5
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	4413      	add	r3, r2
 8009832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009836:	461a      	mov	r2, r3
 8009838:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800983c:	6013      	str	r3, [r2, #0]
 800983e:	e008      	b.n	8009852 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	015a      	lsls	r2, r3, #5
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	4413      	add	r3, r2
 8009848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800984c:	461a      	mov	r2, r3
 800984e:	2300      	movs	r3, #0
 8009850:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	015a      	lsls	r2, r3, #5
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	4413      	add	r3, r2
 800985a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985e:	461a      	mov	r2, r3
 8009860:	2300      	movs	r3, #0
 8009862:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	015a      	lsls	r2, r3, #5
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	4413      	add	r3, r2
 800986c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009870:	461a      	mov	r2, r3
 8009872:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009876:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	3301      	adds	r3, #1
 800987c:	613b      	str	r3, [r7, #16]
 800987e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	429a      	cmp	r2, r3
 8009884:	d3b7      	bcc.n	80097f6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009886:	2300      	movs	r3, #0
 8009888:	613b      	str	r3, [r7, #16]
 800988a:	e043      	b.n	8009914 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	015a      	lsls	r2, r3, #5
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	4413      	add	r3, r2
 8009894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800989e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098a2:	d118      	bne.n	80098d6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10a      	bne.n	80098c0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	015a      	lsls	r2, r3, #5
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	4413      	add	r3, r2
 80098b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b6:	461a      	mov	r2, r3
 80098b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098bc:	6013      	str	r3, [r2, #0]
 80098be:	e013      	b.n	80098e8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098cc:	461a      	mov	r2, r3
 80098ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	e008      	b.n	80098e8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	015a      	lsls	r2, r3, #5
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	4413      	add	r3, r2
 80098de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e2:	461a      	mov	r2, r3
 80098e4:	2300      	movs	r3, #0
 80098e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f4:	461a      	mov	r2, r3
 80098f6:	2300      	movs	r3, #0
 80098f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	4413      	add	r3, r2
 8009902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009906:	461a      	mov	r2, r3
 8009908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800990c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	3301      	adds	r3, #1
 8009912:	613b      	str	r3, [r7, #16]
 8009914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009916:	693a      	ldr	r2, [r7, #16]
 8009918:	429a      	cmp	r2, r3
 800991a:	d3b7      	bcc.n	800988c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	691b      	ldr	r3, [r3, #16]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800992a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800992e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800993c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	2b00      	cmp	r3, #0
 8009942:	d105      	bne.n	8009950 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	699b      	ldr	r3, [r3, #24]
 8009948:	f043 0210 	orr.w	r2, r3, #16
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699a      	ldr	r2, [r3, #24]
 8009954:	4b0f      	ldr	r3, [pc, #60]	; (8009994 <USB_DevInit+0x2b8>)
 8009956:	4313      	orrs	r3, r2
 8009958:	687a      	ldr	r2, [r7, #4]
 800995a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995e:	2b00      	cmp	r3, #0
 8009960:	d005      	beq.n	800996e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	f043 0208 	orr.w	r2, r3, #8
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800996e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009970:	2b01      	cmp	r3, #1
 8009972:	d107      	bne.n	8009984 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	699b      	ldr	r3, [r3, #24]
 8009978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800997c:	f043 0304 	orr.w	r3, r3, #4
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009984:	7dfb      	ldrb	r3, [r7, #23]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3718      	adds	r7, #24
 800998a:	46bd      	mov	sp, r7
 800998c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009990:	b004      	add	sp, #16
 8009992:	4770      	bx	lr
 8009994:	803c3800 	.word	0x803c3800

08009998 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009998:	b480      	push	{r7}
 800999a:	b085      	sub	sp, #20
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80099a2:	2300      	movs	r3, #0
 80099a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	019b      	lsls	r3, r3, #6
 80099aa:	f043 0220 	orr.w	r2, r3, #32
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	3301      	adds	r3, #1
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4a09      	ldr	r2, [pc, #36]	; (80099e0 <USB_FlushTxFifo+0x48>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d901      	bls.n	80099c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80099c0:	2303      	movs	r3, #3
 80099c2:	e006      	b.n	80099d2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	f003 0320 	and.w	r3, r3, #32
 80099cc:	2b20      	cmp	r3, #32
 80099ce:	d0f0      	beq.n	80099b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3714      	adds	r7, #20
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
 80099de:	bf00      	nop
 80099e0:	00030d40 	.word	0x00030d40

080099e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b085      	sub	sp, #20
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2210      	movs	r2, #16
 80099f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	3301      	adds	r3, #1
 80099fa:	60fb      	str	r3, [r7, #12]
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4a09      	ldr	r2, [pc, #36]	; (8009a24 <USB_FlushRxFifo+0x40>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d901      	bls.n	8009a08 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e006      	b.n	8009a16 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	f003 0310 	and.w	r3, r3, #16
 8009a10:	2b10      	cmp	r3, #16
 8009a12:	d0f0      	beq.n	80099f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop
 8009a24:	00030d40 	.word	0x00030d40

08009a28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	460b      	mov	r3, r1
 8009a32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	78fb      	ldrb	r3, [r7, #3]
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a4c:	2300      	movs	r3, #0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr

08009a5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b087      	sub	sp, #28
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	f003 0306 	and.w	r3, r3, #6
 8009a72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d102      	bne.n	8009a80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	75fb      	strb	r3, [r7, #23]
 8009a7e:	e00a      	b.n	8009a96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2b02      	cmp	r3, #2
 8009a84:	d002      	beq.n	8009a8c <USB_GetDevSpeed+0x32>
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2b06      	cmp	r3, #6
 8009a8a:	d102      	bne.n	8009a92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009a8c:	2302      	movs	r3, #2
 8009a8e:	75fb      	strb	r3, [r7, #23]
 8009a90:	e001      	b.n	8009a96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009a92:	230f      	movs	r3, #15
 8009a94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a98:	4618      	mov	r0, r3
 8009a9a:	371c      	adds	r7, #28
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa2:	4770      	bx	lr

08009aa4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ab2:	683b      	ldr	r3, [r7, #0]
 8009ab4:	781b      	ldrb	r3, [r3, #0]
 8009ab6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	785b      	ldrb	r3, [r3, #1]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d13a      	bne.n	8009b36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ac6:	69da      	ldr	r2, [r3, #28]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	f003 030f 	and.w	r3, r3, #15
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	68f9      	ldr	r1, [r7, #12]
 8009ada:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d155      	bne.n	8009ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	015a      	lsls	r2, r3, #5
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4413      	add	r3, r2
 8009b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	78db      	ldrb	r3, [r3, #3]
 8009b12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	059b      	lsls	r3, r3, #22
 8009b1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	0151      	lsls	r1, r2, #5
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	440a      	add	r2, r1
 8009b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b32:	6013      	str	r3, [r2, #0]
 8009b34:	e036      	b.n	8009ba4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3c:	69da      	ldr	r2, [r3, #28]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f003 030f 	and.w	r3, r3, #15
 8009b46:	2101      	movs	r1, #1
 8009b48:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4c:	041b      	lsls	r3, r3, #16
 8009b4e:	68f9      	ldr	r1, [r7, #12]
 8009b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b54:	4313      	orrs	r3, r2
 8009b56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d11a      	bne.n	8009ba4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	015a      	lsls	r2, r3, #5
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4413      	add	r3, r2
 8009b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	78db      	ldrb	r3, [r3, #3]
 8009b88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b8a:	430b      	orrs	r3, r1
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	0151      	lsls	r1, r2, #5
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	440a      	add	r2, r1
 8009b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ba2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3714      	adds	r7, #20
 8009baa:	46bd      	mov	sp, r7
 8009bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb0:	4770      	bx	lr
	...

08009bb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
 8009bbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d161      	bne.n	8009c94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009be6:	d11f      	bne.n	8009c28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	015a      	lsls	r2, r3, #5
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4413      	add	r3, r2
 8009bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68ba      	ldr	r2, [r7, #8]
 8009bf8:	0151      	lsls	r1, r2, #5
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	440a      	add	r2, r1
 8009bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	0151      	lsls	r1, r2, #5
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	440a      	add	r2, r1
 8009c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	781b      	ldrb	r3, [r3, #0]
 8009c34:	f003 030f 	and.w	r3, r3, #15
 8009c38:	2101      	movs	r1, #1
 8009c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	43db      	mvns	r3, r3
 8009c42:	68f9      	ldr	r1, [r7, #12]
 8009c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c48:	4013      	ands	r3, r2
 8009c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c52:	69da      	ldr	r2, [r3, #28]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	f003 030f 	and.w	r3, r3, #15
 8009c5c:	2101      	movs	r1, #1
 8009c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c62:	b29b      	uxth	r3, r3
 8009c64:	43db      	mvns	r3, r3
 8009c66:	68f9      	ldr	r1, [r7, #12]
 8009c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c6c:	4013      	ands	r3, r2
 8009c6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	015a      	lsls	r2, r3, #5
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c7c:	681a      	ldr	r2, [r3, #0]
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	0159      	lsls	r1, r3, #5
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	440b      	add	r3, r1
 8009c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	4b35      	ldr	r3, [pc, #212]	; (8009d64 <USB_DeactivateEndpoint+0x1b0>)
 8009c8e:	4013      	ands	r3, r2
 8009c90:	600b      	str	r3, [r1, #0]
 8009c92:	e060      	b.n	8009d56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ca6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009caa:	d11f      	bne.n	8009cec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	0151      	lsls	r1, r2, #5
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	440a      	add	r2, r1
 8009cc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009cca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	0151      	lsls	r1, r2, #5
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	440a      	add	r2, r1
 8009ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	781b      	ldrb	r3, [r3, #0]
 8009cf8:	f003 030f 	and.w	r3, r3, #15
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009d02:	041b      	lsls	r3, r3, #16
 8009d04:	43db      	mvns	r3, r3
 8009d06:	68f9      	ldr	r1, [r7, #12]
 8009d08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d16:	69da      	ldr	r2, [r3, #28]
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	f003 030f 	and.w	r3, r3, #15
 8009d20:	2101      	movs	r1, #1
 8009d22:	fa01 f303 	lsl.w	r3, r1, r3
 8009d26:	041b      	lsls	r3, r3, #16
 8009d28:	43db      	mvns	r3, r3
 8009d2a:	68f9      	ldr	r1, [r7, #12]
 8009d2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d30:	4013      	ands	r3, r2
 8009d32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	015a      	lsls	r2, r3, #5
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4413      	add	r3, r2
 8009d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	0159      	lsls	r1, r3, #5
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	440b      	add	r3, r1
 8009d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4e:	4619      	mov	r1, r3
 8009d50:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <USB_DeactivateEndpoint+0x1b4>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	ec337800 	.word	0xec337800
 8009d68:	eff37800 	.word	0xeff37800

08009d6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b08a      	sub	sp, #40	; 0x28
 8009d70:	af02      	add	r7, sp, #8
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	785b      	ldrb	r3, [r3, #1]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	f040 815c 	bne.w	800a046 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	695b      	ldr	r3, [r3, #20]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d132      	bne.n	8009dfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	015a      	lsls	r2, r3, #5
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	69ba      	ldr	r2, [r7, #24]
 8009da6:	0151      	lsls	r1, r2, #5
 8009da8:	69fa      	ldr	r2, [r7, #28]
 8009daa:	440a      	add	r2, r1
 8009dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009db0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009db4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009db8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	015a      	lsls	r2, r3, #5
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	4413      	add	r3, r2
 8009dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	69ba      	ldr	r2, [r7, #24]
 8009dca:	0151      	lsls	r1, r2, #5
 8009dcc:	69fa      	ldr	r2, [r7, #28]
 8009dce:	440a      	add	r2, r1
 8009dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	69ba      	ldr	r2, [r7, #24]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	69fa      	ldr	r2, [r7, #28]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009df4:	0cdb      	lsrs	r3, r3, #19
 8009df6:	04db      	lsls	r3, r3, #19
 8009df8:	6113      	str	r3, [r2, #16]
 8009dfa:	e074      	b.n	8009ee6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dfc:	69bb      	ldr	r3, [r7, #24]
 8009dfe:	015a      	lsls	r2, r3, #5
 8009e00:	69fb      	ldr	r3, [r7, #28]
 8009e02:	4413      	add	r3, r2
 8009e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	69ba      	ldr	r2, [r7, #24]
 8009e0c:	0151      	lsls	r1, r2, #5
 8009e0e:	69fa      	ldr	r2, [r7, #28]
 8009e10:	440a      	add	r2, r1
 8009e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e16:	0cdb      	lsrs	r3, r3, #19
 8009e18:	04db      	lsls	r3, r3, #19
 8009e1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4c:	691a      	ldr	r2, [r3, #16]
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6959      	ldr	r1, [r3, #20]
 8009e52:	68bb      	ldr	r3, [r7, #8]
 8009e54:	689b      	ldr	r3, [r3, #8]
 8009e56:	440b      	add	r3, r1
 8009e58:	1e59      	subs	r1, r3, #1
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e62:	04d9      	lsls	r1, r3, #19
 8009e64:	4b9d      	ldr	r3, [pc, #628]	; (800a0dc <USB_EPStartXfer+0x370>)
 8009e66:	400b      	ands	r3, r1
 8009e68:	69b9      	ldr	r1, [r7, #24]
 8009e6a:	0148      	lsls	r0, r1, #5
 8009e6c:	69f9      	ldr	r1, [r7, #28]
 8009e6e:	4401      	add	r1, r0
 8009e70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e74:	4313      	orrs	r3, r2
 8009e76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e84:	691a      	ldr	r2, [r3, #16]
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e8e:	69b9      	ldr	r1, [r7, #24]
 8009e90:	0148      	lsls	r0, r1, #5
 8009e92:	69f9      	ldr	r1, [r7, #28]
 8009e94:	4401      	add	r1, r0
 8009e96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009e9a:	4313      	orrs	r3, r2
 8009e9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	78db      	ldrb	r3, [r3, #3]
 8009ea2:	2b01      	cmp	r3, #1
 8009ea4:	d11f      	bne.n	8009ee6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	015a      	lsls	r2, r3, #5
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	4413      	add	r3, r2
 8009eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eb2:	691b      	ldr	r3, [r3, #16]
 8009eb4:	69ba      	ldr	r2, [r7, #24]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	69fa      	ldr	r2, [r7, #28]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ec0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009ec4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed2:	691b      	ldr	r3, [r3, #16]
 8009ed4:	69ba      	ldr	r2, [r7, #24]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	69fa      	ldr	r2, [r7, #28]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ee0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ee4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009ee6:	79fb      	ldrb	r3, [r7, #7]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d14b      	bne.n	8009f84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	691b      	ldr	r3, [r3, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d009      	beq.n	8009f08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	461a      	mov	r2, r3
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	78db      	ldrb	r3, [r3, #3]
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d128      	bne.n	8009f62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f16:	689b      	ldr	r3, [r3, #8]
 8009f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d110      	bne.n	8009f42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f20:	69bb      	ldr	r3, [r7, #24]
 8009f22:	015a      	lsls	r2, r3, #5
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	4413      	add	r3, r2
 8009f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	69ba      	ldr	r2, [r7, #24]
 8009f30:	0151      	lsls	r1, r2, #5
 8009f32:	69fa      	ldr	r2, [r7, #28]
 8009f34:	440a      	add	r2, r1
 8009f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f3e:	6013      	str	r3, [r2, #0]
 8009f40:	e00f      	b.n	8009f62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	0151      	lsls	r1, r2, #5
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	440a      	add	r2, r1
 8009f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f62:	69bb      	ldr	r3, [r7, #24]
 8009f64:	015a      	lsls	r2, r3, #5
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	4413      	add	r3, r2
 8009f6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	69ba      	ldr	r2, [r7, #24]
 8009f72:	0151      	lsls	r1, r2, #5
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	440a      	add	r2, r1
 8009f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f80:	6013      	str	r3, [r2, #0]
 8009f82:	e12f      	b.n	800a1e4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f84:	69bb      	ldr	r3, [r7, #24]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	69ba      	ldr	r2, [r7, #24]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	69fa      	ldr	r2, [r7, #28]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009fa2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	78db      	ldrb	r3, [r3, #3]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d015      	beq.n	8009fd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	695b      	ldr	r3, [r3, #20]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 8117 	beq.w	800a1e4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	f003 030f 	and.w	r3, r3, #15
 8009fc6:	2101      	movs	r1, #1
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	69f9      	ldr	r1, [r7, #28]
 8009fce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	634b      	str	r3, [r1, #52]	; 0x34
 8009fd6:	e105      	b.n	800a1e4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fde:	689b      	ldr	r3, [r3, #8]
 8009fe0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d110      	bne.n	800a00a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	015a      	lsls	r2, r3, #5
 8009fec:	69fb      	ldr	r3, [r7, #28]
 8009fee:	4413      	add	r3, r2
 8009ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	69ba      	ldr	r2, [r7, #24]
 8009ff8:	0151      	lsls	r1, r2, #5
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	440a      	add	r2, r1
 8009ffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a002:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	e00f      	b.n	800a02a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	015a      	lsls	r2, r3, #5
 800a00e:	69fb      	ldr	r3, [r7, #28]
 800a010:	4413      	add	r3, r2
 800a012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	69ba      	ldr	r2, [r7, #24]
 800a01a:	0151      	lsls	r1, r2, #5
 800a01c:	69fa      	ldr	r2, [r7, #28]
 800a01e:	440a      	add	r2, r1
 800a020:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a028:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	68d9      	ldr	r1, [r3, #12]
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	781a      	ldrb	r2, [r3, #0]
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	695b      	ldr	r3, [r3, #20]
 800a036:	b298      	uxth	r0, r3
 800a038:	79fb      	ldrb	r3, [r7, #7]
 800a03a:	9300      	str	r3, [sp, #0]
 800a03c:	4603      	mov	r3, r0
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f000 fa2b 	bl	800a49a <USB_WritePacket>
 800a044:	e0ce      	b.n	800a1e4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	015a      	lsls	r2, r3, #5
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	4413      	add	r3, r2
 800a04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	69ba      	ldr	r2, [r7, #24]
 800a056:	0151      	lsls	r1, r2, #5
 800a058:	69fa      	ldr	r2, [r7, #28]
 800a05a:	440a      	add	r2, r1
 800a05c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a060:	0cdb      	lsrs	r3, r3, #19
 800a062:	04db      	lsls	r3, r3, #19
 800a064:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	015a      	lsls	r2, r3, #5
 800a06a:	69fb      	ldr	r3, [r7, #28]
 800a06c:	4413      	add	r3, r2
 800a06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	69ba      	ldr	r2, [r7, #24]
 800a076:	0151      	lsls	r1, r2, #5
 800a078:	69fa      	ldr	r2, [r7, #28]
 800a07a:	440a      	add	r2, r1
 800a07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a080:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a084:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a088:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	695b      	ldr	r3, [r3, #20]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d126      	bne.n	800a0e0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	015a      	lsls	r2, r3, #5
 800a096:	69fb      	ldr	r3, [r7, #28]
 800a098:	4413      	add	r3, r2
 800a09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a09e:	691a      	ldr	r2, [r3, #16]
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0a8:	69b9      	ldr	r1, [r7, #24]
 800a0aa:	0148      	lsls	r0, r1, #5
 800a0ac:	69f9      	ldr	r1, [r7, #28]
 800a0ae:	4401      	add	r1, r0
 800a0b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a0b8:	69bb      	ldr	r3, [r7, #24]
 800a0ba:	015a      	lsls	r2, r3, #5
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	4413      	add	r3, r2
 800a0c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0c4:	691b      	ldr	r3, [r3, #16]
 800a0c6:	69ba      	ldr	r2, [r7, #24]
 800a0c8:	0151      	lsls	r1, r2, #5
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	440a      	add	r2, r1
 800a0ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a0d6:	6113      	str	r3, [r2, #16]
 800a0d8:	e036      	b.n	800a148 <USB_EPStartXfer+0x3dc>
 800a0da:	bf00      	nop
 800a0dc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	695a      	ldr	r2, [r3, #20]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	1e5a      	subs	r2, r3, #1
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	015a      	lsls	r2, r3, #5
 800a0fa:	69fb      	ldr	r3, [r7, #28]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	8afb      	ldrh	r3, [r7, #22]
 800a106:	04d9      	lsls	r1, r3, #19
 800a108:	4b39      	ldr	r3, [pc, #228]	; (800a1f0 <USB_EPStartXfer+0x484>)
 800a10a:	400b      	ands	r3, r1
 800a10c:	69b9      	ldr	r1, [r7, #24]
 800a10e:	0148      	lsls	r0, r1, #5
 800a110:	69f9      	ldr	r1, [r7, #28]
 800a112:	4401      	add	r1, r0
 800a114:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a118:	4313      	orrs	r3, r2
 800a11a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800a11c:	69bb      	ldr	r3, [r7, #24]
 800a11e:	015a      	lsls	r2, r3, #5
 800a120:	69fb      	ldr	r3, [r7, #28]
 800a122:	4413      	add	r3, r2
 800a124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a128:	691a      	ldr	r2, [r3, #16]
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	8af9      	ldrh	r1, [r7, #22]
 800a130:	fb01 f303 	mul.w	r3, r1, r3
 800a134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a138:	69b9      	ldr	r1, [r7, #24]
 800a13a:	0148      	lsls	r0, r1, #5
 800a13c:	69f9      	ldr	r1, [r7, #28]
 800a13e:	4401      	add	r1, r0
 800a140:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a144:	4313      	orrs	r3, r2
 800a146:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d10d      	bne.n	800a16a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a14e:	68bb      	ldr	r3, [r7, #8]
 800a150:	68db      	ldr	r3, [r3, #12]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d009      	beq.n	800a16a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a156:	68bb      	ldr	r3, [r7, #8]
 800a158:	68d9      	ldr	r1, [r3, #12]
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	015a      	lsls	r2, r3, #5
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	4413      	add	r3, r2
 800a162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a166:	460a      	mov	r2, r1
 800a168:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	78db      	ldrb	r3, [r3, #3]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d128      	bne.n	800a1c4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a172:	69fb      	ldr	r3, [r7, #28]
 800a174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a178:	689b      	ldr	r3, [r3, #8]
 800a17a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d110      	bne.n	800a1a4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	015a      	lsls	r2, r3, #5
 800a186:	69fb      	ldr	r3, [r7, #28]
 800a188:	4413      	add	r3, r2
 800a18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69ba      	ldr	r2, [r7, #24]
 800a192:	0151      	lsls	r1, r2, #5
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	440a      	add	r2, r1
 800a198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a19c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1a0:	6013      	str	r3, [r2, #0]
 800a1a2:	e00f      	b.n	800a1c4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	69ba      	ldr	r2, [r7, #24]
 800a1d4:	0151      	lsls	r1, r2, #5
 800a1d6:	69fa      	ldr	r2, [r7, #28]
 800a1d8:	440a      	add	r2, r1
 800a1da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	1ff80000 	.word	0x1ff80000

0800a1f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	4613      	mov	r3, r2
 800a200:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	2b01      	cmp	r3, #1
 800a212:	f040 80cd 	bne.w	800a3b0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d132      	bne.n	800a284 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	0151      	lsls	r1, r2, #5
 800a230:	697a      	ldr	r2, [r7, #20]
 800a232:	440a      	add	r2, r1
 800a234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a238:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a23c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a240:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24e:	691b      	ldr	r3, [r3, #16]
 800a250:	693a      	ldr	r2, [r7, #16]
 800a252:	0151      	lsls	r1, r2, #5
 800a254:	697a      	ldr	r2, [r7, #20]
 800a256:	440a      	add	r2, r1
 800a258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a25c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a260:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	015a      	lsls	r2, r3, #5
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	4413      	add	r3, r2
 800a26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	693a      	ldr	r2, [r7, #16]
 800a272:	0151      	lsls	r1, r2, #5
 800a274:	697a      	ldr	r2, [r7, #20]
 800a276:	440a      	add	r2, r1
 800a278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a27c:	0cdb      	lsrs	r3, r3, #19
 800a27e:	04db      	lsls	r3, r3, #19
 800a280:	6113      	str	r3, [r2, #16]
 800a282:	e04e      	b.n	800a322 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	015a      	lsls	r2, r3, #5
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	4413      	add	r3, r2
 800a28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a290:	691b      	ldr	r3, [r3, #16]
 800a292:	693a      	ldr	r2, [r7, #16]
 800a294:	0151      	lsls	r1, r2, #5
 800a296:	697a      	ldr	r2, [r7, #20]
 800a298:	440a      	add	r2, r1
 800a29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a29e:	0cdb      	lsrs	r3, r3, #19
 800a2a0:	04db      	lsls	r3, r3, #19
 800a2a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	015a      	lsls	r2, r3, #5
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	4413      	add	r3, r2
 800a2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	693a      	ldr	r2, [r7, #16]
 800a2b4:	0151      	lsls	r1, r2, #5
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	440a      	add	r2, r1
 800a2ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	695a      	ldr	r2, [r3, #20]
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	689b      	ldr	r3, [r3, #8]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d903      	bls.n	800a2dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	689a      	ldr	r2, [r3, #8]
 800a2d8:	68bb      	ldr	r3, [r7, #8]
 800a2da:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	693a      	ldr	r2, [r7, #16]
 800a2ec:	0151      	lsls	r1, r2, #5
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	440a      	add	r2, r1
 800a2f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a308:	691a      	ldr	r2, [r3, #16]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	695b      	ldr	r3, [r3, #20]
 800a30e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a312:	6939      	ldr	r1, [r7, #16]
 800a314:	0148      	lsls	r0, r1, #5
 800a316:	6979      	ldr	r1, [r7, #20]
 800a318:	4401      	add	r1, r0
 800a31a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a31e:	4313      	orrs	r3, r2
 800a320:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a322:	79fb      	ldrb	r3, [r7, #7]
 800a324:	2b01      	cmp	r3, #1
 800a326:	d11e      	bne.n	800a366 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	691b      	ldr	r3, [r3, #16]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d009      	beq.n	800a344 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	015a      	lsls	r2, r3, #5
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	4413      	add	r3, r2
 800a338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a33c:	461a      	mov	r2, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	691b      	ldr	r3, [r3, #16]
 800a342:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	015a      	lsls	r2, r3, #5
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	4413      	add	r3, r2
 800a34c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	693a      	ldr	r2, [r7, #16]
 800a354:	0151      	lsls	r1, r2, #5
 800a356:	697a      	ldr	r2, [r7, #20]
 800a358:	440a      	add	r2, r1
 800a35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a35e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	e092      	b.n	800a48c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	015a      	lsls	r2, r3, #5
 800a36a:	697b      	ldr	r3, [r7, #20]
 800a36c:	4413      	add	r3, r2
 800a36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	693a      	ldr	r2, [r7, #16]
 800a376:	0151      	lsls	r1, r2, #5
 800a378:	697a      	ldr	r2, [r7, #20]
 800a37a:	440a      	add	r2, r1
 800a37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a380:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a384:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d07e      	beq.n	800a48c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	2101      	movs	r1, #1
 800a3a0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3a4:	6979      	ldr	r1, [r7, #20]
 800a3a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	634b      	str	r3, [r1, #52]	; 0x34
 800a3ae:	e06d      	b.n	800a48c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	015a      	lsls	r2, r3, #5
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3bc:	691b      	ldr	r3, [r3, #16]
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	0151      	lsls	r1, r2, #5
 800a3c2:	697a      	ldr	r2, [r7, #20]
 800a3c4:	440a      	add	r2, r1
 800a3c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ca:	0cdb      	lsrs	r3, r3, #19
 800a3cc:	04db      	lsls	r3, r3, #19
 800a3ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	015a      	lsls	r2, r3, #5
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	4413      	add	r3, r2
 800a3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	0151      	lsls	r1, r2, #5
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	440a      	add	r2, r1
 800a3e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a3ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a3f2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	695b      	ldr	r3, [r3, #20]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d003      	beq.n	800a404 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	689a      	ldr	r2, [r3, #8]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	015a      	lsls	r2, r3, #5
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	4413      	add	r3, r2
 800a40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a410:	691b      	ldr	r3, [r3, #16]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	0151      	lsls	r1, r2, #5
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	440a      	add	r2, r1
 800a41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a41e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	015a      	lsls	r2, r3, #5
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	4413      	add	r3, r2
 800a42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a430:	691a      	ldr	r2, [r3, #16]
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a43a:	6939      	ldr	r1, [r7, #16]
 800a43c:	0148      	lsls	r0, r1, #5
 800a43e:	6979      	ldr	r1, [r7, #20]
 800a440:	4401      	add	r1, r0
 800a442:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a446:	4313      	orrs	r3, r2
 800a448:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	2b01      	cmp	r3, #1
 800a44e:	d10d      	bne.n	800a46c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d009      	beq.n	800a46c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	68d9      	ldr	r1, [r3, #12]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a468:	460a      	mov	r2, r1
 800a46a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	015a      	lsls	r2, r3, #5
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	4413      	add	r3, r2
 800a474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	0151      	lsls	r1, r2, #5
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	440a      	add	r2, r1
 800a482:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a48a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	371c      	adds	r7, #28
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr

0800a49a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a49a:	b480      	push	{r7}
 800a49c:	b089      	sub	sp, #36	; 0x24
 800a49e:	af00      	add	r7, sp, #0
 800a4a0:	60f8      	str	r0, [r7, #12]
 800a4a2:	60b9      	str	r1, [r7, #8]
 800a4a4:	4611      	mov	r1, r2
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	460b      	mov	r3, r1
 800a4aa:	71fb      	strb	r3, [r7, #7]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a4b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d11a      	bne.n	800a4f6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a4c0:	88bb      	ldrh	r3, [r7, #4]
 800a4c2:	3303      	adds	r3, #3
 800a4c4:	089b      	lsrs	r3, r3, #2
 800a4c6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	61bb      	str	r3, [r7, #24]
 800a4cc:	e00f      	b.n	800a4ee <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a4ce:	79fb      	ldrb	r3, [r7, #7]
 800a4d0:	031a      	lsls	r2, r3, #12
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4da:	461a      	mov	r2, r3
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	61bb      	str	r3, [r7, #24]
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d3eb      	bcc.n	800a4ce <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3724      	adds	r7, #36	; 0x24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a504:	b480      	push	{r7}
 800a506:	b089      	sub	sp, #36	; 0x24
 800a508:	af00      	add	r7, sp, #0
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	60b9      	str	r1, [r7, #8]
 800a50e:	4613      	mov	r3, r2
 800a510:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a51a:	88fb      	ldrh	r3, [r7, #6]
 800a51c:	3303      	adds	r3, #3
 800a51e:	089b      	lsrs	r3, r3, #2
 800a520:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a522:	2300      	movs	r3, #0
 800a524:	61bb      	str	r3, [r7, #24]
 800a526:	e00b      	b.n	800a540 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a528:	697b      	ldr	r3, [r7, #20]
 800a52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	601a      	str	r2, [r3, #0]
    pDest++;
 800a534:	69fb      	ldr	r3, [r7, #28]
 800a536:	3304      	adds	r3, #4
 800a538:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	3301      	adds	r3, #1
 800a53e:	61bb      	str	r3, [r7, #24]
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	429a      	cmp	r2, r3
 800a546:	d3ef      	bcc.n	800a528 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a548:	69fb      	ldr	r3, [r7, #28]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3724      	adds	r7, #36	; 0x24
 800a54e:	46bd      	mov	sp, r7
 800a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a554:	4770      	bx	lr

0800a556 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a556:	b480      	push	{r7}
 800a558:	b085      	sub	sp, #20
 800a55a:	af00      	add	r7, sp, #0
 800a55c:	6078      	str	r0, [r7, #4]
 800a55e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d12c      	bne.n	800a5cc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	db12      	blt.n	800a5aa <USB_EPSetStall+0x54>
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d00f      	beq.n	800a5aa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	015a      	lsls	r2, r3, #5
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	4413      	add	r3, r2
 800a592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	68ba      	ldr	r2, [r7, #8]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5a8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	015a      	lsls	r2, r3, #5
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	4413      	add	r3, r2
 800a5b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	68ba      	ldr	r2, [r7, #8]
 800a5ba:	0151      	lsls	r1, r2, #5
 800a5bc:	68fa      	ldr	r2, [r7, #12]
 800a5be:	440a      	add	r2, r1
 800a5c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a5c8:	6013      	str	r3, [r2, #0]
 800a5ca:	e02b      	b.n	800a624 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	015a      	lsls	r2, r3, #5
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	4413      	add	r3, r2
 800a5d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	db12      	blt.n	800a604 <USB_EPSetStall+0xae>
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d00f      	beq.n	800a604 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	015a      	lsls	r2, r3, #5
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	4413      	add	r3, r2
 800a5ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	68ba      	ldr	r2, [r7, #8]
 800a5f4:	0151      	lsls	r1, r2, #5
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	440a      	add	r2, r1
 800a5fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a5fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a602:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	015a      	lsls	r2, r3, #5
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	4413      	add	r3, r2
 800a60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	0151      	lsls	r1, r2, #5
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	440a      	add	r2, r1
 800a61a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a61e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a622:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a632:	b480      	push	{r7}
 800a634:	b085      	sub	sp, #20
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	785b      	ldrb	r3, [r3, #1]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d128      	bne.n	800a6a0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	015a      	lsls	r2, r3, #5
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4413      	add	r3, r2
 800a656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	0151      	lsls	r1, r2, #5
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	440a      	add	r2, r1
 800a664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a668:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a66c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	78db      	ldrb	r3, [r3, #3]
 800a672:	2b03      	cmp	r3, #3
 800a674:	d003      	beq.n	800a67e <USB_EPClearStall+0x4c>
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	78db      	ldrb	r3, [r3, #3]
 800a67a:	2b02      	cmp	r3, #2
 800a67c:	d138      	bne.n	800a6f0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	015a      	lsls	r2, r3, #5
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	4413      	add	r3, r2
 800a686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	0151      	lsls	r1, r2, #5
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	440a      	add	r2, r1
 800a694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a69c:	6013      	str	r3, [r2, #0]
 800a69e:	e027      	b.n	800a6f0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68ba      	ldr	r2, [r7, #8]
 800a6b0:	0151      	lsls	r1, r2, #5
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	440a      	add	r2, r1
 800a6b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a6be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	78db      	ldrb	r3, [r3, #3]
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d003      	beq.n	800a6d0 <USB_EPClearStall+0x9e>
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	78db      	ldrb	r3, [r3, #3]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d10f      	bne.n	800a6f0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	015a      	lsls	r2, r3, #5
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	0151      	lsls	r1, r2, #5
 800a6e2:	68fa      	ldr	r2, [r7, #12]
 800a6e4:	440a      	add	r2, r1
 800a6e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ee:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6f0:	2300      	movs	r3, #0
}
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	3714      	adds	r7, #20
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	460b      	mov	r3, r1
 800a708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68fa      	ldr	r2, [r7, #12]
 800a718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a71c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a720:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	78fb      	ldrb	r3, [r7, #3]
 800a72c:	011b      	lsls	r3, r3, #4
 800a72e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a732:	68f9      	ldr	r1, [r7, #12]
 800a734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a738:	4313      	orrs	r3, r2
 800a73a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a73c:	2300      	movs	r3, #0
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3714      	adds	r7, #20
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	68fa      	ldr	r2, [r7, #12]
 800a760:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	68fa      	ldr	r2, [r7, #12]
 800a774:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a778:	f023 0302 	bic.w	r3, r3, #2
 800a77c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3714      	adds	r7, #20
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b085      	sub	sp, #20
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	68fa      	ldr	r2, [r7, #12]
 800a7a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a7a6:	f023 0303 	bic.w	r3, r3, #3
 800a7aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	68fa      	ldr	r2, [r7, #12]
 800a7b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7ba:	f043 0302 	orr.w	r3, r3, #2
 800a7be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	3714      	adds	r7, #20
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7cc:	4770      	bx	lr

0800a7ce <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a7ce:	b480      	push	{r7}
 800a7d0:	b085      	sub	sp, #20
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	699b      	ldr	r3, [r3, #24]
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3714      	adds	r7, #20
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a806:	699b      	ldr	r3, [r3, #24]
 800a808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a810:	69db      	ldr	r3, [r3, #28]
 800a812:	68ba      	ldr	r2, [r7, #8]
 800a814:	4013      	ands	r3, r2
 800a816:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	0c1b      	lsrs	r3, r3, #16
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a828:	b480      	push	{r7}
 800a82a:	b085      	sub	sp, #20
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a844:	69db      	ldr	r3, [r3, #28]
 800a846:	68ba      	ldr	r2, [r7, #8]
 800a848:	4013      	ands	r3, r2
 800a84a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	b29b      	uxth	r3, r3
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr

0800a85c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b085      	sub	sp, #20
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a86c:	78fb      	ldrb	r3, [r7, #3]
 800a86e:	015a      	lsls	r2, r3, #5
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	4413      	add	r3, r2
 800a874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	4013      	ands	r3, r2
 800a888:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a88a:	68bb      	ldr	r3, [r7, #8]
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3714      	adds	r7, #20
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr

0800a898 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ae:	691b      	ldr	r3, [r3, #16]
 800a8b0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ba:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8bc:	78fb      	ldrb	r3, [r7, #3]
 800a8be:	f003 030f 	and.w	r3, r3, #15
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c8:	01db      	lsls	r3, r3, #7
 800a8ca:	b2db      	uxtb	r3, r3
 800a8cc:	693a      	ldr	r2, [r7, #16]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8d2:	78fb      	ldrb	r3, [r7, #3]
 800a8d4:	015a      	lsls	r2, r3, #5
 800a8d6:	697b      	ldr	r3, [r7, #20]
 800a8d8:	4413      	add	r3, r2
 800a8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8de:	689b      	ldr	r3, [r3, #8]
 800a8e0:	693a      	ldr	r2, [r7, #16]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8e6:	68bb      	ldr	r3, [r7, #8]
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f2:	4770      	bx	lr

0800a8f4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	695b      	ldr	r3, [r3, #20]
 800a900:	f003 0301 	and.w	r3, r3, #1
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a92a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a92e:	f023 0307 	bic.w	r3, r3, #7
 800a932:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	68fa      	ldr	r2, [r7, #12]
 800a93e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a942:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a946:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
	...

0800a958 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a958:	b480      	push	{r7}
 800a95a:	b087      	sub	sp, #28
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	60f8      	str	r0, [r7, #12]
 800a960:	460b      	mov	r3, r1
 800a962:	607a      	str	r2, [r7, #4]
 800a964:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	333c      	adds	r3, #60	; 0x3c
 800a96e:	3304      	adds	r3, #4
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a974:	693b      	ldr	r3, [r7, #16]
 800a976:	4a26      	ldr	r2, [pc, #152]	; (800aa10 <USB_EP0_OutStart+0xb8>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d90a      	bls.n	800a992 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a98c:	d101      	bne.n	800a992 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a98e:	2300      	movs	r3, #0
 800a990:	e037      	b.n	800aa02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a998:	461a      	mov	r2, r3
 800a99a:	2300      	movs	r3, #0
 800a99c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	697a      	ldr	r2, [r7, #20]
 800a9a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a9b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9b2:	697b      	ldr	r3, [r7, #20]
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	697a      	ldr	r2, [r7, #20]
 800a9bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9c0:	f043 0318 	orr.w	r3, r3, #24
 800a9c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9c6:	697b      	ldr	r3, [r7, #20]
 800a9c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9d4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a9d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9da:	7afb      	ldrb	r3, [r7, #11]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d10f      	bne.n	800aa00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a9fa:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a9fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa00:	2300      	movs	r3, #0
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	371c      	adds	r7, #28
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	4f54300a 	.word	0x4f54300a

0800aa14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa14:	b480      	push	{r7}
 800aa16:	b085      	sub	sp, #20
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	60fb      	str	r3, [r7, #12]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	4a13      	ldr	r2, [pc, #76]	; (800aa78 <USB_CoreReset+0x64>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d901      	bls.n	800aa32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e01b      	b.n	800aa6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	daf2      	bge.n	800aa20 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	f043 0201 	orr.w	r2, r3, #1
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	60fb      	str	r3, [r7, #12]
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4a09      	ldr	r2, [pc, #36]	; (800aa78 <USB_CoreReset+0x64>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d901      	bls.n	800aa5c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	e006      	b.n	800aa6a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	f003 0301 	and.w	r3, r3, #1
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d0f0      	beq.n	800aa4a <USB_CoreReset+0x36>

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	00030d40 	.word	0x00030d40

0800aa7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa80:	4904      	ldr	r1, [pc, #16]	; (800aa94 <MX_FATFS_Init+0x18>)
 800aa82:	4805      	ldr	r0, [pc, #20]	; (800aa98 <MX_FATFS_Init+0x1c>)
 800aa84:	f002 f9c0 	bl	800ce08 <FATFS_LinkDriver>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	4b03      	ldr	r3, [pc, #12]	; (800aa9c <MX_FATFS_Init+0x20>)
 800aa8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa90:	bf00      	nop
 800aa92:	bd80      	pop	{r7, pc}
 800aa94:	200005e4 	.word	0x200005e4
 800aa98:	2000000c 	.word	0x2000000c
 800aa9c:	200005e8 	.word	0x200005e8

0800aaa0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b082      	sub	sp, #8
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800aaaa:	79fb      	ldrb	r3, [r7, #7]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f000 f9d7 	bl	800ae60 <USER_SPI_initialize>
 800aab2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3708      	adds	r7, #8
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	4603      	mov	r3, r0
 800aac4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f000 fab3 	bl	800b034 <USER_SPI_status>
 800aace:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3708      	adds	r7, #8
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b084      	sub	sp, #16
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	603b      	str	r3, [r7, #0]
 800aae4:	4603      	mov	r3, r0
 800aae6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800aae8:	7bf8      	ldrb	r0, [r7, #15]
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	68b9      	ldr	r1, [r7, #8]
 800aaf0:	f000 fab6 	bl	800b060 <USER_SPI_read>
 800aaf4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3710      	adds	r7, #16
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}

0800aafe <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aafe:	b580      	push	{r7, lr}
 800ab00:	b084      	sub	sp, #16
 800ab02:	af00      	add	r7, sp, #0
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]
 800ab08:	603b      	str	r3, [r7, #0]
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800ab0e:	7bf8      	ldrb	r0, [r7, #15]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	68b9      	ldr	r1, [r7, #8]
 800ab16:	f000 fb09 	bl	800b12c <USER_SPI_write>
 800ab1a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	603a      	str	r2, [r7, #0]
 800ab2e:	71fb      	strb	r3, [r7, #7]
 800ab30:	460b      	mov	r3, r1
 800ab32:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800ab34:	79b9      	ldrb	r1, [r7, #6]
 800ab36:	79fb      	ldrb	r3, [r7, #7]
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	f000 fb72 	bl	800b224 <USER_SPI_ioctl>
 800ab40:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3708      	adds	r7, #8
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
	...

0800ab4c <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800ab54:	f7f9 fa00 	bl	8003f58 <HAL_GetTick>
 800ab58:	4602      	mov	r2, r0
 800ab5a:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <SPI_Timer_On+0x20>)
 800ab5c:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800ab5e:	4a04      	ldr	r2, [pc, #16]	; (800ab70 <SPI_Timer_On+0x24>)
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6013      	str	r3, [r2, #0]
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}
 800ab6c:	20000a4c 	.word	0x20000a4c
 800ab70:	20000a50 	.word	0x20000a50

0800ab74 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800ab74:	b580      	push	{r7, lr}
 800ab76:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800ab78:	f7f9 f9ee 	bl	8003f58 <HAL_GetTick>
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	4b06      	ldr	r3, [pc, #24]	; (800ab98 <SPI_Timer_Status+0x24>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	1ad2      	subs	r2, r2, r3
 800ab84:	4b05      	ldr	r3, [pc, #20]	; (800ab9c <SPI_Timer_Status+0x28>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	bf34      	ite	cc
 800ab8c:	2301      	movcc	r3, #1
 800ab8e:	2300      	movcs	r3, #0
 800ab90:	b2db      	uxtb	r3, r3
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	bd80      	pop	{r7, pc}
 800ab96:	bf00      	nop
 800ab98:	20000a4c 	.word	0x20000a4c
 800ab9c:	20000a50 	.word	0x20000a50

0800aba0 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b086      	sub	sp, #24
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	4603      	mov	r3, r0
 800aba8:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800abaa:	f107 020f 	add.w	r2, r7, #15
 800abae:	1df9      	adds	r1, r7, #7
 800abb0:	2332      	movs	r3, #50	; 0x32
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	2301      	movs	r3, #1
 800abb6:	4804      	ldr	r0, [pc, #16]	; (800abc8 <xchg_spi+0x28>)
 800abb8:	f7fd fbe1 	bl	800837e <HAL_SPI_TransmitReceive>
    return rxDat;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000548 	.word	0x20000548

0800abcc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800abcc:	b590      	push	{r4, r7, lr}
 800abce:	b085      	sub	sp, #20
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800abd6:	2300      	movs	r3, #0
 800abd8:	60fb      	str	r3, [r7, #12]
 800abda:	e00a      	b.n	800abf2 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	18d4      	adds	r4, r2, r3
 800abe2:	20ff      	movs	r0, #255	; 0xff
 800abe4:	f7ff ffdc 	bl	800aba0 <xchg_spi>
 800abe8:	4603      	mov	r3, r0
 800abea:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
 800abf2:	68fa      	ldr	r2, [r7, #12]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d3f0      	bcc.n	800abdc <rcvr_spi_multi+0x10>
    }
}
 800abfa:	bf00      	nop
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd90      	pop	{r4, r7, pc}

0800ac02 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b084      	sub	sp, #16
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]
 800ac10:	e009      	b.n	800ac26 <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	4413      	add	r3, r2
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff ffc0 	bl	800aba0 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	3301      	adds	r3, #1
 800ac24:	60fb      	str	r3, [r7, #12]
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d3f1      	bcc.n	800ac12 <xmit_spi_multi+0x10>
    }
}
 800ac2e:	bf00      	nop
 800ac30:	3710      	adds	r7, #16
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}

0800ac36 <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800ac36:	b580      	push	{r7, lr}
 800ac38:	b086      	sub	sp, #24
 800ac3a:	af00      	add	r7, sp, #0
 800ac3c:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800ac3e:	f7f9 f98b 	bl	8003f58 <HAL_GetTick>
 800ac42:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800ac48:	20ff      	movs	r0, #255	; 0xff
 800ac4a:	f7ff ffa9 	bl	800aba0 <xchg_spi>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	2bff      	cmp	r3, #255	; 0xff
 800ac56:	d007      	beq.n	800ac68 <wait_ready+0x32>
 800ac58:	f7f9 f97e 	bl	8003f58 <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	693a      	ldr	r2, [r7, #16]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	d8ef      	bhi.n	800ac48 <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	2bff      	cmp	r3, #255	; 0xff
 800ac6c:	bf0c      	ite	eq
 800ac6e:	2301      	moveq	r3, #1
 800ac70:	2300      	movne	r3, #0
 800ac72:	b2db      	uxtb	r3, r3
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3718      	adds	r7, #24
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800ac80:	2201      	movs	r2, #1
 800ac82:	2110      	movs	r1, #16
 800ac84:	4803      	ldr	r0, [pc, #12]	; (800ac94 <despiselect+0x18>)
 800ac86:	f7f9 fec3 	bl	8004a10 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800ac8a:	20ff      	movs	r0, #255	; 0xff
 800ac8c:	f7ff ff88 	bl	800aba0 <xchg_spi>

}
 800ac90:	bf00      	nop
 800ac92:	bd80      	pop	{r7, pc}
 800ac94:	40020800 	.word	0x40020800

0800ac98 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	2110      	movs	r1, #16
 800aca0:	4809      	ldr	r0, [pc, #36]	; (800acc8 <spiselect+0x30>)
 800aca2:	f7f9 feb5 	bl	8004a10 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800aca6:	20ff      	movs	r0, #255	; 0xff
 800aca8:	f7ff ff7a 	bl	800aba0 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800acac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800acb0:	f7ff ffc1 	bl	800ac36 <wait_ready>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <spiselect+0x26>
 800acba:	2301      	movs	r3, #1
 800acbc:	e002      	b.n	800acc4 <spiselect+0x2c>

    despiselect();
 800acbe:	f7ff ffdd 	bl	800ac7c <despiselect>
    return 0;   /* Timeout */
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	40020800 	.word	0x40020800

0800accc <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800acd6:	20c8      	movs	r0, #200	; 0xc8
 800acd8:	f7ff ff38 	bl	800ab4c <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800acdc:	20ff      	movs	r0, #255	; 0xff
 800acde:	f7ff ff5f 	bl	800aba0 <xchg_spi>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	2bff      	cmp	r3, #255	; 0xff
 800acea:	d104      	bne.n	800acf6 <rcvr_datablock+0x2a>
 800acec:	f7ff ff42 	bl	800ab74 <SPI_Timer_Status>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d1f2      	bne.n	800acdc <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800acf6:	7bfb      	ldrb	r3, [r7, #15]
 800acf8:	2bfe      	cmp	r3, #254	; 0xfe
 800acfa:	d001      	beq.n	800ad00 <rcvr_datablock+0x34>
 800acfc:	2300      	movs	r3, #0
 800acfe:	e00a      	b.n	800ad16 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff ff62 	bl	800abcc <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800ad08:	20ff      	movs	r0, #255	; 0xff
 800ad0a:	f7ff ff49 	bl	800aba0 <xchg_spi>
 800ad0e:	20ff      	movs	r0, #255	; 0xff
 800ad10:	f7ff ff46 	bl	800aba0 <xchg_spi>

    return 1;                       /* Function succeeded */
 800ad14:	2301      	movs	r3, #1
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b084      	sub	sp, #16
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	6078      	str	r0, [r7, #4]
 800ad26:	460b      	mov	r3, r1
 800ad28:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800ad2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ad2e:	f7ff ff82 	bl	800ac36 <wait_ready>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d101      	bne.n	800ad3c <xmit_datablock+0x1e>
 800ad38:	2300      	movs	r3, #0
 800ad3a:	e01e      	b.n	800ad7a <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800ad3c:	78fb      	ldrb	r3, [r7, #3]
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7ff ff2e 	bl	800aba0 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800ad44:	78fb      	ldrb	r3, [r7, #3]
 800ad46:	2bfd      	cmp	r3, #253	; 0xfd
 800ad48:	d016      	beq.n	800ad78 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800ad4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f7ff ff57 	bl	800ac02 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800ad54:	20ff      	movs	r0, #255	; 0xff
 800ad56:	f7ff ff23 	bl	800aba0 <xchg_spi>
 800ad5a:	20ff      	movs	r0, #255	; 0xff
 800ad5c:	f7ff ff20 	bl	800aba0 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800ad60:	20ff      	movs	r0, #255	; 0xff
 800ad62:	f7ff ff1d 	bl	800aba0 <xchg_spi>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	f003 031f 	and.w	r3, r3, #31
 800ad70:	2b05      	cmp	r3, #5
 800ad72:	d001      	beq.n	800ad78 <xmit_datablock+0x5a>
 800ad74:	2300      	movs	r3, #0
 800ad76:	e000      	b.n	800ad7a <xmit_datablock+0x5c>
    }
    return 1;
 800ad78:	2301      	movs	r3, #1
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3710      	adds	r7, #16
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}

0800ad82 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800ad82:	b580      	push	{r7, lr}
 800ad84:	b084      	sub	sp, #16
 800ad86:	af00      	add	r7, sp, #0
 800ad88:	4603      	mov	r3, r0
 800ad8a:	6039      	str	r1, [r7, #0]
 800ad8c:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800ad8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	da0e      	bge.n	800adb4 <send_cmd+0x32>
        cmd &= 0x7F;
 800ad96:	79fb      	ldrb	r3, [r7, #7]
 800ad98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad9c:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800ad9e:	2100      	movs	r1, #0
 800ada0:	2037      	movs	r0, #55	; 0x37
 800ada2:	f7ff ffee 	bl	800ad82 <send_cmd>
 800ada6:	4603      	mov	r3, r0
 800ada8:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800adaa:	7bbb      	ldrb	r3, [r7, #14]
 800adac:	2b01      	cmp	r3, #1
 800adae:	d901      	bls.n	800adb4 <send_cmd+0x32>
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
 800adb2:	e051      	b.n	800ae58 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	2b0c      	cmp	r3, #12
 800adb8:	d008      	beq.n	800adcc <send_cmd+0x4a>
        despiselect();
 800adba:	f7ff ff5f 	bl	800ac7c <despiselect>
        if (!spiselect()) return 0xFF;
 800adbe:	f7ff ff6b 	bl	800ac98 <spiselect>
 800adc2:	4603      	mov	r3, r0
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d101      	bne.n	800adcc <send_cmd+0x4a>
 800adc8:	23ff      	movs	r3, #255	; 0xff
 800adca:	e045      	b.n	800ae58 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800adcc:	79fb      	ldrb	r3, [r7, #7]
 800adce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800add2:	b2db      	uxtb	r3, r3
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff fee3 	bl	800aba0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	0e1b      	lsrs	r3, r3, #24
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	4618      	mov	r0, r3
 800ade2:	f7ff fedd 	bl	800aba0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	0c1b      	lsrs	r3, r3, #16
 800adea:	b2db      	uxtb	r3, r3
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fed7 	bl	800aba0 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	0a1b      	lsrs	r3, r3, #8
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff fed1 	bl	800aba0 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	b2db      	uxtb	r3, r3
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff fecc 	bl	800aba0 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d101      	bne.n	800ae16 <send_cmd+0x94>
 800ae12:	2395      	movs	r3, #149	; 0x95
 800ae14:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	2b08      	cmp	r3, #8
 800ae1a:	d101      	bne.n	800ae20 <send_cmd+0x9e>
 800ae1c:	2387      	movs	r3, #135	; 0x87
 800ae1e:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f7ff febc 	bl	800aba0 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800ae28:	79fb      	ldrb	r3, [r7, #7]
 800ae2a:	2b0c      	cmp	r3, #12
 800ae2c:	d102      	bne.n	800ae34 <send_cmd+0xb2>
 800ae2e:	20ff      	movs	r0, #255	; 0xff
 800ae30:	f7ff feb6 	bl	800aba0 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800ae34:	230a      	movs	r3, #10
 800ae36:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800ae38:	20ff      	movs	r0, #255	; 0xff
 800ae3a:	f7ff feb1 	bl	800aba0 <xchg_spi>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800ae42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	da05      	bge.n	800ae56 <send_cmd+0xd4>
 800ae4a:	7bfb      	ldrb	r3, [r7, #15]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	73fb      	strb	r3, [r7, #15]
 800ae50:	7bfb      	ldrb	r3, [r7, #15]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1f0      	bne.n	800ae38 <send_cmd+0xb6>

    return res;                         /* Return received response */
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3710      	adds	r7, #16
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800ae60:	b590      	push	{r4, r7, lr}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	4603      	mov	r3, r0
 800ae68:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800ae6a:	79fb      	ldrb	r3, [r7, #7]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <USER_SPI_initialize+0x14>
 800ae70:	2301      	movs	r3, #1
 800ae72:	e0d4      	b.n	800b01e <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800ae74:	4b6c      	ldr	r3, [pc, #432]	; (800b028 <USER_SPI_initialize+0x1c8>)
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	b2db      	uxtb	r3, r3
 800ae7a:	f003 0302 	and.w	r3, r3, #2
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <USER_SPI_initialize+0x2a>
 800ae82:	4b69      	ldr	r3, [pc, #420]	; (800b028 <USER_SPI_initialize+0x1c8>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	b2db      	uxtb	r3, r3
 800ae88:	e0c9      	b.n	800b01e <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800ae8a:	4b68      	ldr	r3, [pc, #416]	; (800b02c <USER_SPI_initialize+0x1cc>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	4b66      	ldr	r3, [pc, #408]	; (800b02c <USER_SPI_initialize+0x1cc>)
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800ae98:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800ae9a:	230a      	movs	r3, #10
 800ae9c:	73fb      	strb	r3, [r7, #15]
 800ae9e:	e005      	b.n	800aeac <USER_SPI_initialize+0x4c>
 800aea0:	20ff      	movs	r0, #255	; 0xff
 800aea2:	f7ff fe7d 	bl	800aba0 <xchg_spi>
 800aea6:	7bfb      	ldrb	r3, [r7, #15]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	73fb      	strb	r3, [r7, #15]
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d1f6      	bne.n	800aea0 <USER_SPI_initialize+0x40>

    ty = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800aeb6:	2100      	movs	r1, #0
 800aeb8:	2000      	movs	r0, #0
 800aeba:	f7ff ff62 	bl	800ad82 <send_cmd>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	f040 808b 	bne.w	800afdc <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800aec6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aeca:	f7ff fe3f 	bl	800ab4c <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800aece:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aed2:	2008      	movs	r0, #8
 800aed4:	f7ff ff55 	bl	800ad82 <send_cmd>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d151      	bne.n	800af82 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800aede:	2300      	movs	r3, #0
 800aee0:	73fb      	strb	r3, [r7, #15]
 800aee2:	e00d      	b.n	800af00 <USER_SPI_initialize+0xa0>
 800aee4:	7bfc      	ldrb	r4, [r7, #15]
 800aee6:	20ff      	movs	r0, #255	; 0xff
 800aee8:	f7ff fe5a 	bl	800aba0 <xchg_spi>
 800aeec:	4603      	mov	r3, r0
 800aeee:	461a      	mov	r2, r3
 800aef0:	f107 0310 	add.w	r3, r7, #16
 800aef4:	4423      	add	r3, r4
 800aef6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800aefa:	7bfb      	ldrb	r3, [r7, #15]
 800aefc:	3301      	adds	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]
 800af00:	7bfb      	ldrb	r3, [r7, #15]
 800af02:	2b03      	cmp	r3, #3
 800af04:	d9ee      	bls.n	800aee4 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800af06:	7abb      	ldrb	r3, [r7, #10]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	d167      	bne.n	800afdc <USER_SPI_initialize+0x17c>
 800af0c:	7afb      	ldrb	r3, [r7, #11]
 800af0e:	2baa      	cmp	r3, #170	; 0xaa
 800af10:	d164      	bne.n	800afdc <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800af12:	bf00      	nop
 800af14:	f7ff fe2e 	bl	800ab74 <SPI_Timer_Status>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d007      	beq.n	800af2e <USER_SPI_initialize+0xce>
 800af1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800af22:	20a9      	movs	r0, #169	; 0xa9
 800af24:	f7ff ff2d 	bl	800ad82 <send_cmd>
 800af28:	4603      	mov	r3, r0
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f2      	bne.n	800af14 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800af2e:	f7ff fe21 	bl	800ab74 <SPI_Timer_Status>
 800af32:	4603      	mov	r3, r0
 800af34:	2b00      	cmp	r3, #0
 800af36:	d051      	beq.n	800afdc <USER_SPI_initialize+0x17c>
 800af38:	2100      	movs	r1, #0
 800af3a:	203a      	movs	r0, #58	; 0x3a
 800af3c:	f7ff ff21 	bl	800ad82 <send_cmd>
 800af40:	4603      	mov	r3, r0
 800af42:	2b00      	cmp	r3, #0
 800af44:	d14a      	bne.n	800afdc <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
 800af4a:	e00d      	b.n	800af68 <USER_SPI_initialize+0x108>
 800af4c:	7bfc      	ldrb	r4, [r7, #15]
 800af4e:	20ff      	movs	r0, #255	; 0xff
 800af50:	f7ff fe26 	bl	800aba0 <xchg_spi>
 800af54:	4603      	mov	r3, r0
 800af56:	461a      	mov	r2, r3
 800af58:	f107 0310 	add.w	r3, r7, #16
 800af5c:	4423      	add	r3, r4
 800af5e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800af62:	7bfb      	ldrb	r3, [r7, #15]
 800af64:	3301      	adds	r3, #1
 800af66:	73fb      	strb	r3, [r7, #15]
 800af68:	7bfb      	ldrb	r3, [r7, #15]
 800af6a:	2b03      	cmp	r3, #3
 800af6c:	d9ee      	bls.n	800af4c <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800af6e:	7a3b      	ldrb	r3, [r7, #8]
 800af70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af74:	2b00      	cmp	r3, #0
 800af76:	d001      	beq.n	800af7c <USER_SPI_initialize+0x11c>
 800af78:	230c      	movs	r3, #12
 800af7a:	e000      	b.n	800af7e <USER_SPI_initialize+0x11e>
 800af7c:	2304      	movs	r3, #4
 800af7e:	737b      	strb	r3, [r7, #13]
 800af80:	e02c      	b.n	800afdc <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800af82:	2100      	movs	r1, #0
 800af84:	20a9      	movs	r0, #169	; 0xa9
 800af86:	f7ff fefc 	bl	800ad82 <send_cmd>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d804      	bhi.n	800af9a <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800af90:	2302      	movs	r3, #2
 800af92:	737b      	strb	r3, [r7, #13]
 800af94:	23a9      	movs	r3, #169	; 0xa9
 800af96:	73bb      	strb	r3, [r7, #14]
 800af98:	e003      	b.n	800afa2 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800af9a:	2301      	movs	r3, #1
 800af9c:	737b      	strb	r3, [r7, #13]
 800af9e:	2301      	movs	r3, #1
 800afa0:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800afa2:	bf00      	nop
 800afa4:	f7ff fde6 	bl	800ab74 <SPI_Timer_Status>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d007      	beq.n	800afbe <USER_SPI_initialize+0x15e>
 800afae:	7bbb      	ldrb	r3, [r7, #14]
 800afb0:	2100      	movs	r1, #0
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7ff fee5 	bl	800ad82 <send_cmd>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1f2      	bne.n	800afa4 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800afbe:	f7ff fdd9 	bl	800ab74 <SPI_Timer_Status>
 800afc2:	4603      	mov	r3, r0
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d007      	beq.n	800afd8 <USER_SPI_initialize+0x178>
 800afc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800afcc:	2010      	movs	r0, #16
 800afce:	f7ff fed8 	bl	800ad82 <send_cmd>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d001      	beq.n	800afdc <USER_SPI_initialize+0x17c>
                ty = 0;
 800afd8:	2300      	movs	r3, #0
 800afda:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800afdc:	4a14      	ldr	r2, [pc, #80]	; (800b030 <USER_SPI_initialize+0x1d0>)
 800afde:	7b7b      	ldrb	r3, [r7, #13]
 800afe0:	7013      	strb	r3, [r2, #0]
    despiselect();
 800afe2:	f7ff fe4b 	bl	800ac7c <despiselect>

    if (ty) {           /* OK */
 800afe6:	7b7b      	ldrb	r3, [r7, #13]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d012      	beq.n	800b012 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800afec:	4b0f      	ldr	r3, [pc, #60]	; (800b02c <USER_SPI_initialize+0x1cc>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <USER_SPI_initialize+0x1cc>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f042 0220 	orr.w	r2, r2, #32
 800affe:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800b000:	4b09      	ldr	r3, [pc, #36]	; (800b028 <USER_SPI_initialize+0x1c8>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	b2db      	uxtb	r3, r3
 800b006:	f023 0301 	bic.w	r3, r3, #1
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	4b06      	ldr	r3, [pc, #24]	; (800b028 <USER_SPI_initialize+0x1c8>)
 800b00e:	701a      	strb	r2, [r3, #0]
 800b010:	e002      	b.n	800b018 <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800b012:	4b05      	ldr	r3, [pc, #20]	; (800b028 <USER_SPI_initialize+0x1c8>)
 800b014:	2201      	movs	r2, #1
 800b016:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800b018:	4b03      	ldr	r3, [pc, #12]	; (800b028 <USER_SPI_initialize+0x1c8>)
 800b01a:	781b      	ldrb	r3, [r3, #0]
 800b01c:	b2db      	uxtb	r3, r3
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	bd90      	pop	{r4, r7, pc}
 800b026:	bf00      	nop
 800b028:	20000020 	.word	0x20000020
 800b02c:	20000548 	.word	0x20000548
 800b030:	200003a4 	.word	0x200003a4

0800b034 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d001      	beq.n	800b048 <USER_SPI_status+0x14>
 800b044:	2301      	movs	r3, #1
 800b046:	e002      	b.n	800b04e <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800b048:	4b04      	ldr	r3, [pc, #16]	; (800b05c <USER_SPI_status+0x28>)
 800b04a:	781b      	ldrb	r3, [r3, #0]
 800b04c:	b2db      	uxtb	r3, r3
}
 800b04e:	4618      	mov	r0, r3
 800b050:	370c      	adds	r7, #12
 800b052:	46bd      	mov	sp, r7
 800b054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b058:	4770      	bx	lr
 800b05a:	bf00      	nop
 800b05c:	20000020 	.word	0x20000020

0800b060 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60b9      	str	r1, [r7, #8]
 800b068:	607a      	str	r2, [r7, #4]
 800b06a:	603b      	str	r3, [r7, #0]
 800b06c:	4603      	mov	r3, r0
 800b06e:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b00      	cmp	r3, #0
 800b074:	d102      	bne.n	800b07c <USER_SPI_read+0x1c>
 800b076:	683b      	ldr	r3, [r7, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d101      	bne.n	800b080 <USER_SPI_read+0x20>
 800b07c:	2304      	movs	r3, #4
 800b07e:	e04d      	b.n	800b11c <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800b080:	4b28      	ldr	r3, [pc, #160]	; (800b124 <USER_SPI_read+0xc4>)
 800b082:	781b      	ldrb	r3, [r3, #0]
 800b084:	b2db      	uxtb	r3, r3
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d001      	beq.n	800b092 <USER_SPI_read+0x32>
 800b08e:	2303      	movs	r3, #3
 800b090:	e044      	b.n	800b11c <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800b092:	4b25      	ldr	r3, [pc, #148]	; (800b128 <USER_SPI_read+0xc8>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	f003 0308 	and.w	r3, r3, #8
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d102      	bne.n	800b0a4 <USER_SPI_read+0x44>
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	025b      	lsls	r3, r3, #9
 800b0a2:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	2b01      	cmp	r3, #1
 800b0a8:	d111      	bne.n	800b0ce <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800b0aa:	6879      	ldr	r1, [r7, #4]
 800b0ac:	2011      	movs	r0, #17
 800b0ae:	f7ff fe68 	bl	800ad82 <send_cmd>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d129      	bne.n	800b10c <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800b0b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0bc:	68b8      	ldr	r0, [r7, #8]
 800b0be:	f7ff fe05 	bl	800accc <rcvr_datablock>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d021      	beq.n	800b10c <USER_SPI_read+0xac>
            count = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	603b      	str	r3, [r7, #0]
 800b0cc:	e01e      	b.n	800b10c <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800b0ce:	6879      	ldr	r1, [r7, #4]
 800b0d0:	2012      	movs	r0, #18
 800b0d2:	f7ff fe56 	bl	800ad82 <send_cmd>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d117      	bne.n	800b10c <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800b0dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0e0:	68b8      	ldr	r0, [r7, #8]
 800b0e2:	f7ff fdf3 	bl	800accc <rcvr_datablock>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00a      	beq.n	800b102 <USER_SPI_read+0xa2>
                buff += 512;
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b0f2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	3b01      	subs	r3, #1
 800b0f8:	603b      	str	r3, [r7, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1ed      	bne.n	800b0dc <USER_SPI_read+0x7c>
 800b100:	e000      	b.n	800b104 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800b102:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800b104:	2100      	movs	r1, #0
 800b106:	200c      	movs	r0, #12
 800b108:	f7ff fe3b 	bl	800ad82 <send_cmd>
        }
    }
    despiselect();
 800b10c:	f7ff fdb6 	bl	800ac7c <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	bf14      	ite	ne
 800b116:	2301      	movne	r3, #1
 800b118:	2300      	moveq	r3, #0
 800b11a:	b2db      	uxtb	r3, r3
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3710      	adds	r7, #16
 800b120:	46bd      	mov	sp, r7
 800b122:	bd80      	pop	{r7, pc}
 800b124:	20000020 	.word	0x20000020
 800b128:	200003a4 	.word	0x200003a4

0800b12c <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b084      	sub	sp, #16
 800b130:	af00      	add	r7, sp, #0
 800b132:	60b9      	str	r1, [r7, #8]
 800b134:	607a      	str	r2, [r7, #4]
 800b136:	603b      	str	r3, [r7, #0]
 800b138:	4603      	mov	r3, r0
 800b13a:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800b13c:	7bfb      	ldrb	r3, [r7, #15]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d102      	bne.n	800b148 <USER_SPI_write+0x1c>
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d101      	bne.n	800b14c <USER_SPI_write+0x20>
 800b148:	2304      	movs	r3, #4
 800b14a:	e063      	b.n	800b214 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800b14c:	4b33      	ldr	r3, [pc, #204]	; (800b21c <USER_SPI_write+0xf0>)
 800b14e:	781b      	ldrb	r3, [r3, #0]
 800b150:	b2db      	uxtb	r3, r3
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <USER_SPI_write+0x32>
 800b15a:	2303      	movs	r3, #3
 800b15c:	e05a      	b.n	800b214 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800b15e:	4b2f      	ldr	r3, [pc, #188]	; (800b21c <USER_SPI_write+0xf0>)
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	b2db      	uxtb	r3, r3
 800b164:	f003 0304 	and.w	r3, r3, #4
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <USER_SPI_write+0x44>
 800b16c:	2302      	movs	r3, #2
 800b16e:	e051      	b.n	800b214 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800b170:	4b2b      	ldr	r3, [pc, #172]	; (800b220 <USER_SPI_write+0xf4>)
 800b172:	781b      	ldrb	r3, [r3, #0]
 800b174:	f003 0308 	and.w	r3, r3, #8
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d102      	bne.n	800b182 <USER_SPI_write+0x56>
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	025b      	lsls	r3, r3, #9
 800b180:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b01      	cmp	r3, #1
 800b186:	d110      	bne.n	800b1aa <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800b188:	6879      	ldr	r1, [r7, #4]
 800b18a:	2018      	movs	r0, #24
 800b18c:	f7ff fdf9 	bl	800ad82 <send_cmd>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d136      	bne.n	800b204 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800b196:	21fe      	movs	r1, #254	; 0xfe
 800b198:	68b8      	ldr	r0, [r7, #8]
 800b19a:	f7ff fdc0 	bl	800ad1e <xmit_datablock>
 800b19e:	4603      	mov	r3, r0
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d02f      	beq.n	800b204 <USER_SPI_write+0xd8>
            count = 0;
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	e02c      	b.n	800b204 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800b1aa:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <USER_SPI_write+0xf4>)
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	f003 0306 	and.w	r3, r3, #6
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d003      	beq.n	800b1be <USER_SPI_write+0x92>
 800b1b6:	6839      	ldr	r1, [r7, #0]
 800b1b8:	2097      	movs	r0, #151	; 0x97
 800b1ba:	f7ff fde2 	bl	800ad82 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	2019      	movs	r0, #25
 800b1c2:	f7ff fdde 	bl	800ad82 <send_cmd>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d11b      	bne.n	800b204 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800b1cc:	21fc      	movs	r1, #252	; 0xfc
 800b1ce:	68b8      	ldr	r0, [r7, #8]
 800b1d0:	f7ff fda5 	bl	800ad1e <xmit_datablock>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <USER_SPI_write+0xc4>
                buff += 512;
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b1e0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	603b      	str	r3, [r7, #0]
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1ee      	bne.n	800b1cc <USER_SPI_write+0xa0>
 800b1ee:	e000      	b.n	800b1f2 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800b1f0:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800b1f2:	21fd      	movs	r1, #253	; 0xfd
 800b1f4:	2000      	movs	r0, #0
 800b1f6:	f7ff fd92 	bl	800ad1e <xmit_datablock>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <USER_SPI_write+0xd8>
 800b200:	2301      	movs	r3, #1
 800b202:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800b204:	f7ff fd3a 	bl	800ac7c <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	bf14      	ite	ne
 800b20e:	2301      	movne	r3, #1
 800b210:	2300      	moveq	r3, #0
 800b212:	b2db      	uxtb	r3, r3
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}
 800b21c:	20000020 	.word	0x20000020
 800b220:	200003a4 	.word	0x200003a4

0800b224 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b08c      	sub	sp, #48	; 0x30
 800b228:	af00      	add	r7, sp, #0
 800b22a:	4603      	mov	r3, r0
 800b22c:	603a      	str	r2, [r7, #0]
 800b22e:	71fb      	strb	r3, [r7, #7]
 800b230:	460b      	mov	r3, r1
 800b232:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <USER_SPI_ioctl+0x1a>
 800b23a:	2304      	movs	r3, #4
 800b23c:	e15a      	b.n	800b4f4 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800b23e:	4baf      	ldr	r3, [pc, #700]	; (800b4fc <USER_SPI_ioctl+0x2d8>)
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	b2db      	uxtb	r3, r3
 800b244:	f003 0301 	and.w	r3, r3, #1
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d001      	beq.n	800b250 <USER_SPI_ioctl+0x2c>
 800b24c:	2303      	movs	r3, #3
 800b24e:	e151      	b.n	800b4f4 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800b250:	2301      	movs	r3, #1
 800b252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800b256:	79bb      	ldrb	r3, [r7, #6]
 800b258:	2b04      	cmp	r3, #4
 800b25a:	f200 8136 	bhi.w	800b4ca <USER_SPI_ioctl+0x2a6>
 800b25e:	a201      	add	r2, pc, #4	; (adr r2, 800b264 <USER_SPI_ioctl+0x40>)
 800b260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b264:	0800b279 	.word	0x0800b279
 800b268:	0800b28d 	.word	0x0800b28d
 800b26c:	0800b4cb 	.word	0x0800b4cb
 800b270:	0800b339 	.word	0x0800b339
 800b274:	0800b42f 	.word	0x0800b42f
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800b278:	f7ff fd0e 	bl	800ac98 <spiselect>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	f000 8127 	beq.w	800b4d2 <USER_SPI_ioctl+0x2ae>
 800b284:	2300      	movs	r3, #0
 800b286:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800b28a:	e122      	b.n	800b4d2 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800b28c:	2100      	movs	r1, #0
 800b28e:	2009      	movs	r0, #9
 800b290:	f7ff fd77 	bl	800ad82 <send_cmd>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	f040 811d 	bne.w	800b4d6 <USER_SPI_ioctl+0x2b2>
 800b29c:	f107 030c 	add.w	r3, r7, #12
 800b2a0:	2110      	movs	r1, #16
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7ff fd12 	bl	800accc <rcvr_datablock>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	f000 8113 	beq.w	800b4d6 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800b2b0:	7b3b      	ldrb	r3, [r7, #12]
 800b2b2:	099b      	lsrs	r3, r3, #6
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	2b01      	cmp	r3, #1
 800b2b8:	d111      	bne.n	800b2de <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800b2ba:	7d7b      	ldrb	r3, [r7, #21]
 800b2bc:	461a      	mov	r2, r3
 800b2be:	7d3b      	ldrb	r3, [r7, #20]
 800b2c0:	021b      	lsls	r3, r3, #8
 800b2c2:	4413      	add	r3, r2
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	7cfb      	ldrb	r3, [r7, #19]
 800b2c8:	041b      	lsls	r3, r3, #16
 800b2ca:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800b2ce:	4413      	add	r3, r2
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800b2d4:	69fb      	ldr	r3, [r7, #28]
 800b2d6:	029a      	lsls	r2, r3, #10
 800b2d8:	683b      	ldr	r3, [r7, #0]
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	e028      	b.n	800b330 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800b2de:	7c7b      	ldrb	r3, [r7, #17]
 800b2e0:	f003 030f 	and.w	r3, r3, #15
 800b2e4:	b2da      	uxtb	r2, r3
 800b2e6:	7dbb      	ldrb	r3, [r7, #22]
 800b2e8:	09db      	lsrs	r3, r3, #7
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	4413      	add	r3, r2
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	7d7b      	ldrb	r3, [r7, #21]
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	b2db      	uxtb	r3, r3
 800b2f6:	f003 0306 	and.w	r3, r3, #6
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	4413      	add	r3, r2
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	3302      	adds	r3, #2
 800b302:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800b306:	7d3b      	ldrb	r3, [r7, #20]
 800b308:	099b      	lsrs	r3, r3, #6
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	461a      	mov	r2, r3
 800b30e:	7cfb      	ldrb	r3, [r7, #19]
 800b310:	009b      	lsls	r3, r3, #2
 800b312:	441a      	add	r2, r3
 800b314:	7cbb      	ldrb	r3, [r7, #18]
 800b316:	029b      	lsls	r3, r3, #10
 800b318:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b31c:	4413      	add	r3, r2
 800b31e:	3301      	adds	r3, #1
 800b320:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800b322:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b326:	3b09      	subs	r3, #9
 800b328:	69fa      	ldr	r2, [r7, #28]
 800b32a:	409a      	lsls	r2, r3
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800b336:	e0ce      	b.n	800b4d6 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800b338:	4b71      	ldr	r3, [pc, #452]	; (800b500 <USER_SPI_ioctl+0x2dc>)
 800b33a:	781b      	ldrb	r3, [r3, #0]
 800b33c:	f003 0304 	and.w	r3, r3, #4
 800b340:	2b00      	cmp	r3, #0
 800b342:	d031      	beq.n	800b3a8 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800b344:	2100      	movs	r1, #0
 800b346:	208d      	movs	r0, #141	; 0x8d
 800b348:	f7ff fd1b 	bl	800ad82 <send_cmd>
 800b34c:	4603      	mov	r3, r0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	f040 80c3 	bne.w	800b4da <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800b354:	20ff      	movs	r0, #255	; 0xff
 800b356:	f7ff fc23 	bl	800aba0 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800b35a:	f107 030c 	add.w	r3, r7, #12
 800b35e:	2110      	movs	r1, #16
 800b360:	4618      	mov	r0, r3
 800b362:	f7ff fcb3 	bl	800accc <rcvr_datablock>
 800b366:	4603      	mov	r3, r0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	f000 80b6 	beq.w	800b4da <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800b36e:	2330      	movs	r3, #48	; 0x30
 800b370:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b374:	e007      	b.n	800b386 <USER_SPI_ioctl+0x162>
 800b376:	20ff      	movs	r0, #255	; 0xff
 800b378:	f7ff fc12 	bl	800aba0 <xchg_spi>
 800b37c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b380:	3b01      	subs	r3, #1
 800b382:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800b386:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d1f3      	bne.n	800b376 <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800b38e:	7dbb      	ldrb	r3, [r7, #22]
 800b390:	091b      	lsrs	r3, r3, #4
 800b392:	b2db      	uxtb	r3, r3
 800b394:	461a      	mov	r2, r3
 800b396:	2310      	movs	r3, #16
 800b398:	fa03 f202 	lsl.w	r2, r3, r2
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800b3a6:	e098      	b.n	800b4da <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800b3a8:	2100      	movs	r1, #0
 800b3aa:	2009      	movs	r0, #9
 800b3ac:	f7ff fce9 	bl	800ad82 <send_cmd>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	f040 8091 	bne.w	800b4da <USER_SPI_ioctl+0x2b6>
 800b3b8:	f107 030c 	add.w	r3, r7, #12
 800b3bc:	2110      	movs	r1, #16
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff fc84 	bl	800accc <rcvr_datablock>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	f000 8087 	beq.w	800b4da <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800b3cc:	4b4c      	ldr	r3, [pc, #304]	; (800b500 <USER_SPI_ioctl+0x2dc>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	f003 0302 	and.w	r3, r3, #2
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d012      	beq.n	800b3fe <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800b3d8:	7dbb      	ldrb	r3, [r7, #22]
 800b3da:	005b      	lsls	r3, r3, #1
 800b3dc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b3e0:	7dfa      	ldrb	r2, [r7, #23]
 800b3e2:	09d2      	lsrs	r2, r2, #7
 800b3e4:	b2d2      	uxtb	r2, r2
 800b3e6:	4413      	add	r3, r2
 800b3e8:	1c5a      	adds	r2, r3, #1
 800b3ea:	7e7b      	ldrb	r3, [r7, #25]
 800b3ec:	099b      	lsrs	r3, r3, #6
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	601a      	str	r2, [r3, #0]
 800b3fc:	e013      	b.n	800b426 <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800b3fe:	7dbb      	ldrb	r3, [r7, #22]
 800b400:	109b      	asrs	r3, r3, #2
 800b402:	b29b      	uxth	r3, r3
 800b404:	f003 031f 	and.w	r3, r3, #31
 800b408:	3301      	adds	r3, #1
 800b40a:	7dfa      	ldrb	r2, [r7, #23]
 800b40c:	00d2      	lsls	r2, r2, #3
 800b40e:	f002 0218 	and.w	r2, r2, #24
 800b412:	7df9      	ldrb	r1, [r7, #23]
 800b414:	0949      	lsrs	r1, r1, #5
 800b416:	b2c9      	uxtb	r1, r1
 800b418:	440a      	add	r2, r1
 800b41a:	3201      	adds	r2, #1
 800b41c:	fb02 f303 	mul.w	r3, r2, r3
 800b420:	461a      	mov	r2, r3
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800b42c:	e055      	b.n	800b4da <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800b42e:	4b34      	ldr	r3, [pc, #208]	; (800b500 <USER_SPI_ioctl+0x2dc>)
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	f003 0306 	and.w	r3, r3, #6
 800b436:	2b00      	cmp	r3, #0
 800b438:	d051      	beq.n	800b4de <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800b43a:	f107 020c 	add.w	r2, r7, #12
 800b43e:	79fb      	ldrb	r3, [r7, #7]
 800b440:	210b      	movs	r1, #11
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff feee 	bl	800b224 <USER_SPI_ioctl>
 800b448:	4603      	mov	r3, r0
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d149      	bne.n	800b4e2 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800b44e:	7b3b      	ldrb	r3, [r7, #12]
 800b450:	099b      	lsrs	r3, r3, #6
 800b452:	b2db      	uxtb	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d104      	bne.n	800b462 <USER_SPI_ioctl+0x23e>
 800b458:	7dbb      	ldrb	r3, [r7, #22]
 800b45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d041      	beq.n	800b4e6 <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	623b      	str	r3, [r7, #32]
 800b466:	6a3b      	ldr	r3, [r7, #32]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b46c:	6a3b      	ldr	r3, [r7, #32]
 800b46e:	685b      	ldr	r3, [r3, #4]
 800b470:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800b472:	4b23      	ldr	r3, [pc, #140]	; (800b500 <USER_SPI_ioctl+0x2dc>)
 800b474:	781b      	ldrb	r3, [r3, #0]
 800b476:	f003 0308 	and.w	r3, r3, #8
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d105      	bne.n	800b48a <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b480:	025b      	lsls	r3, r3, #9
 800b482:	62bb      	str	r3, [r7, #40]	; 0x28
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	025b      	lsls	r3, r3, #9
 800b488:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800b48a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b48c:	2020      	movs	r0, #32
 800b48e:	f7ff fc78 	bl	800ad82 <send_cmd>
 800b492:	4603      	mov	r3, r0
 800b494:	2b00      	cmp	r3, #0
 800b496:	d128      	bne.n	800b4ea <USER_SPI_ioctl+0x2c6>
 800b498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b49a:	2021      	movs	r0, #33	; 0x21
 800b49c:	f7ff fc71 	bl	800ad82 <send_cmd>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d121      	bne.n	800b4ea <USER_SPI_ioctl+0x2c6>
 800b4a6:	2100      	movs	r1, #0
 800b4a8:	2026      	movs	r0, #38	; 0x26
 800b4aa:	f7ff fc6a 	bl	800ad82 <send_cmd>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11a      	bne.n	800b4ea <USER_SPI_ioctl+0x2c6>
 800b4b4:	f247 5030 	movw	r0, #30000	; 0x7530
 800b4b8:	f7ff fbbd 	bl	800ac36 <wait_ready>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d013      	beq.n	800b4ea <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800b4c8:	e00f      	b.n	800b4ea <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800b4ca:	2304      	movs	r3, #4
 800b4cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b4d0:	e00c      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        break;
 800b4d2:	bf00      	nop
 800b4d4:	e00a      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        break;
 800b4d6:	bf00      	nop
 800b4d8:	e008      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        break;
 800b4da:	bf00      	nop
 800b4dc:	e006      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800b4de:	bf00      	nop
 800b4e0:	e004      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800b4e2:	bf00      	nop
 800b4e4:	e002      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800b4e6:	bf00      	nop
 800b4e8:	e000      	b.n	800b4ec <USER_SPI_ioctl+0x2c8>
        break;
 800b4ea:	bf00      	nop
    }

    despiselect();
 800b4ec:	f7ff fbc6 	bl	800ac7c <despiselect>

    return res;
 800b4f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3730      	adds	r7, #48	; 0x30
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	20000020 	.word	0x20000020
 800b500:	200003a4 	.word	0x200003a4

0800b504 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	460b      	mov	r3, r1
 800b50e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b510:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b514:	f002 fa56 	bl	800d9c4 <malloc>
 800b518:	4603      	mov	r3, r0
 800b51a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d105      	bne.n	800b52e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2200      	movs	r2, #0
 800b526:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b52a:	2302      	movs	r3, #2
 800b52c:	e066      	b.n	800b5fc <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	7c1b      	ldrb	r3, [r3, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d119      	bne.n	800b572 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b53e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b542:	2202      	movs	r2, #2
 800b544:	2181      	movs	r1, #129	; 0x81
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f002 f845 	bl	800d5d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2201      	movs	r2, #1
 800b550:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b552:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b556:	2202      	movs	r2, #2
 800b558:	2101      	movs	r1, #1
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f002 f83b 	bl	800d5d6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2210      	movs	r2, #16
 800b56c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b570:	e016      	b.n	800b5a0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b572:	2340      	movs	r3, #64	; 0x40
 800b574:	2202      	movs	r2, #2
 800b576:	2181      	movs	r1, #129	; 0x81
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f002 f82c 	bl	800d5d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2201      	movs	r2, #1
 800b582:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b584:	2340      	movs	r3, #64	; 0x40
 800b586:	2202      	movs	r2, #2
 800b588:	2101      	movs	r1, #1
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f002 f823 	bl	800d5d6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2210      	movs	r2, #16
 800b59c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b5a0:	2308      	movs	r3, #8
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	2182      	movs	r1, #130	; 0x82
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f002 f815 	bl	800d5d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2201      	movs	r2, #1
 800b5b0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	7c1b      	ldrb	r3, [r3, #16]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d109      	bne.n	800b5ea <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5e0:	2101      	movs	r1, #1
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	f002 f8e6 	bl	800d7b4 <USBD_LL_PrepareReceive>
 800b5e8:	e007      	b.n	800b5fa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5f0:	2340      	movs	r3, #64	; 0x40
 800b5f2:	2101      	movs	r1, #1
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f002 f8dd 	bl	800d7b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b084      	sub	sp, #16
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
 800b60c:	460b      	mov	r3, r1
 800b60e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b610:	2300      	movs	r3, #0
 800b612:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b614:	2181      	movs	r1, #129	; 0x81
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f002 f803 	bl	800d622 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b622:	2101      	movs	r1, #1
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f001 fffc 	bl	800d622 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b632:	2182      	movs	r1, #130	; 0x82
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 fff4 	bl	800d622 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2200      	movs	r2, #0
 800b63e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2200      	movs	r2, #0
 800b646:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00e      	beq.n	800b672 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b664:	4618      	mov	r0, r3
 800b666:	f002 f9b5 	bl	800d9d4 <free>
    pdev->pClassData = NULL;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b672:	7bfb      	ldrb	r3, [r7, #15]
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b086      	sub	sp, #24
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b68c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b696:	2300      	movs	r3, #0
 800b698:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b69a:	683b      	ldr	r3, [r7, #0]
 800b69c:	781b      	ldrb	r3, [r3, #0]
 800b69e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d03a      	beq.n	800b71c <USBD_CDC_Setup+0xa0>
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	f040 8097 	bne.w	800b7da <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b6ac:	683b      	ldr	r3, [r7, #0]
 800b6ae:	88db      	ldrh	r3, [r3, #6]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d029      	beq.n	800b708 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	b25b      	sxtb	r3, r3
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	da11      	bge.n	800b6e2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	683a      	ldr	r2, [r7, #0]
 800b6c8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b6ca:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	88d2      	ldrh	r2, [r2, #6]
 800b6d0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b6d2:	6939      	ldr	r1, [r7, #16]
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	88db      	ldrh	r3, [r3, #6]
 800b6d8:	461a      	mov	r2, r3
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f001 fac7 	bl	800cc6e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b6e0:	e082      	b.n	800b7e8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	785a      	ldrb	r2, [r3, #1]
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	88db      	ldrh	r3, [r3, #6]
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	693b      	ldr	r3, [r7, #16]
 800b6f4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b6f8:	6939      	ldr	r1, [r7, #16]
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	88db      	ldrh	r3, [r3, #6]
 800b6fe:	461a      	mov	r2, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f001 fae0 	bl	800ccc6 <USBD_CtlPrepareRx>
    break;
 800b706:	e06f      	b.n	800b7e8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	7850      	ldrb	r0, [r2, #1]
 800b714:	2200      	movs	r2, #0
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	4798      	blx	r3
    break;
 800b71a:	e065      	b.n	800b7e8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	2b0b      	cmp	r3, #11
 800b722:	d84f      	bhi.n	800b7c4 <USBD_CDC_Setup+0x148>
 800b724:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <USBD_CDC_Setup+0xb0>)
 800b726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72a:	bf00      	nop
 800b72c:	0800b75d 	.word	0x0800b75d
 800b730:	0800b7d3 	.word	0x0800b7d3
 800b734:	0800b7c5 	.word	0x0800b7c5
 800b738:	0800b7c5 	.word	0x0800b7c5
 800b73c:	0800b7c5 	.word	0x0800b7c5
 800b740:	0800b7c5 	.word	0x0800b7c5
 800b744:	0800b7c5 	.word	0x0800b7c5
 800b748:	0800b7c5 	.word	0x0800b7c5
 800b74c:	0800b7c5 	.word	0x0800b7c5
 800b750:	0800b7c5 	.word	0x0800b7c5
 800b754:	0800b785 	.word	0x0800b785
 800b758:	0800b7ad 	.word	0x0800b7ad
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b762:	2b03      	cmp	r3, #3
 800b764:	d107      	bne.n	800b776 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b766:	f107 030c 	add.w	r3, r7, #12
 800b76a:	2202      	movs	r2, #2
 800b76c:	4619      	mov	r1, r3
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f001 fa7d 	bl	800cc6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b774:	e030      	b.n	800b7d8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b776:	6839      	ldr	r1, [r7, #0]
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f001 fa07 	bl	800cb8c <USBD_CtlError>
        ret = USBD_FAIL;
 800b77e:	2303      	movs	r3, #3
 800b780:	75fb      	strb	r3, [r7, #23]
      break;
 800b782:	e029      	b.n	800b7d8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b78a:	2b03      	cmp	r3, #3
 800b78c:	d107      	bne.n	800b79e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b78e:	f107 030f 	add.w	r3, r7, #15
 800b792:	2201      	movs	r2, #1
 800b794:	4619      	mov	r1, r3
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f001 fa69 	bl	800cc6e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b79c:	e01c      	b.n	800b7d8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b79e:	6839      	ldr	r1, [r7, #0]
 800b7a0:	6878      	ldr	r0, [r7, #4]
 800b7a2:	f001 f9f3 	bl	800cb8c <USBD_CtlError>
        ret = USBD_FAIL;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	75fb      	strb	r3, [r7, #23]
      break;
 800b7aa:	e015      	b.n	800b7d8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d00f      	beq.n	800b7d6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b7b6:	6839      	ldr	r1, [r7, #0]
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f001 f9e7 	bl	800cb8c <USBD_CtlError>
        ret = USBD_FAIL;
 800b7be:	2303      	movs	r3, #3
 800b7c0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b7c2:	e008      	b.n	800b7d6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f001 f9e0 	bl	800cb8c <USBD_CtlError>
      ret = USBD_FAIL;
 800b7cc:	2303      	movs	r3, #3
 800b7ce:	75fb      	strb	r3, [r7, #23]
      break;
 800b7d0:	e002      	b.n	800b7d8 <USBD_CDC_Setup+0x15c>
      break;
 800b7d2:	bf00      	nop
 800b7d4:	e008      	b.n	800b7e8 <USBD_CDC_Setup+0x16c>
      break;
 800b7d6:	bf00      	nop
    }
    break;
 800b7d8:	e006      	b.n	800b7e8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b7da:	6839      	ldr	r1, [r7, #0]
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 f9d5 	bl	800cb8c <USBD_CtlError>
    ret = USBD_FAIL;
 800b7e2:	2303      	movs	r3, #3
 800b7e4:	75fb      	strb	r3, [r7, #23]
    break;
 800b7e6:	bf00      	nop
  }

  return (uint8_t)ret;
 800b7e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3718      	adds	r7, #24
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop

0800b7f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b806:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b812:	2303      	movs	r3, #3
 800b814:	e049      	b.n	800b8aa <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b81c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b81e:	78fa      	ldrb	r2, [r7, #3]
 800b820:	6879      	ldr	r1, [r7, #4]
 800b822:	4613      	mov	r3, r2
 800b824:	009b      	lsls	r3, r3, #2
 800b826:	4413      	add	r3, r2
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	440b      	add	r3, r1
 800b82c:	3318      	adds	r3, #24
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d029      	beq.n	800b888 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b834:	78fa      	ldrb	r2, [r7, #3]
 800b836:	6879      	ldr	r1, [r7, #4]
 800b838:	4613      	mov	r3, r2
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	4413      	add	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	440b      	add	r3, r1
 800b842:	3318      	adds	r3, #24
 800b844:	681a      	ldr	r2, [r3, #0]
 800b846:	78f9      	ldrb	r1, [r7, #3]
 800b848:	68f8      	ldr	r0, [r7, #12]
 800b84a:	460b      	mov	r3, r1
 800b84c:	00db      	lsls	r3, r3, #3
 800b84e:	1a5b      	subs	r3, r3, r1
 800b850:	009b      	lsls	r3, r3, #2
 800b852:	4403      	add	r3, r0
 800b854:	3344      	adds	r3, #68	; 0x44
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	fbb2 f1f3 	udiv	r1, r2, r3
 800b85c:	fb03 f301 	mul.w	r3, r3, r1
 800b860:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b862:	2b00      	cmp	r3, #0
 800b864:	d110      	bne.n	800b888 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b866:	78fa      	ldrb	r2, [r7, #3]
 800b868:	6879      	ldr	r1, [r7, #4]
 800b86a:	4613      	mov	r3, r2
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4413      	add	r3, r2
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	440b      	add	r3, r1
 800b874:	3318      	adds	r3, #24
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b87a:	78f9      	ldrb	r1, [r7, #3]
 800b87c:	2300      	movs	r3, #0
 800b87e:	2200      	movs	r2, #0
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f001 ff76 	bl	800d772 <USBD_LL_Transmit>
 800b886:	e00f      	b.n	800b8a8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	2200      	movs	r2, #0
 800b88c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	68ba      	ldr	r2, [r7, #8]
 800b89a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b89e:	68ba      	ldr	r2, [r7, #8]
 800b8a0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b8a4:	78fa      	ldrb	r2, [r7, #3]
 800b8a6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b8a8:	2300      	movs	r3, #0
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3710      	adds	r7, #16
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd80      	pop	{r7, pc}

0800b8b2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b8b2:	b580      	push	{r7, lr}
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d101      	bne.n	800b8d4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b8d0:	2303      	movs	r3, #3
 800b8d2:	e015      	b.n	800b900 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f001 ff8c 	bl	800d7f6 <USBD_LL_GetRxDataSize>
 800b8de:	4602      	mov	r2, r0
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b8ec:	68db      	ldr	r3, [r3, #12]
 800b8ee:	68fa      	ldr	r2, [r7, #12]
 800b8f0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b8f4:	68fa      	ldr	r2, [r7, #12]
 800b8f6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b8fe:	2300      	movs	r3, #0
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b916:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d015      	beq.n	800b94e <USBD_CDC_EP0_RxReady+0x46>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b928:	2bff      	cmp	r3, #255	; 0xff
 800b92a:	d010      	beq.n	800b94e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b93a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b942:	b292      	uxth	r2, r2
 800b944:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	22ff      	movs	r2, #255	; 0xff
 800b94a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3710      	adds	r7, #16
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b958:	b480      	push	{r7}
 800b95a:	b083      	sub	sp, #12
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2243      	movs	r2, #67	; 0x43
 800b964:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b966:	4b03      	ldr	r3, [pc, #12]	; (800b974 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr
 800b974:	200000ac 	.word	0x200000ac

0800b978 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b978:	b480      	push	{r7}
 800b97a:	b083      	sub	sp, #12
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2243      	movs	r2, #67	; 0x43
 800b984:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b986:	4b03      	ldr	r3, [pc, #12]	; (800b994 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b988:	4618      	mov	r0, r3
 800b98a:	370c      	adds	r7, #12
 800b98c:	46bd      	mov	sp, r7
 800b98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b992:	4770      	bx	lr
 800b994:	20000068 	.word	0x20000068

0800b998 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b998:	b480      	push	{r7}
 800b99a:	b083      	sub	sp, #12
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2243      	movs	r2, #67	; 0x43
 800b9a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b9a6:	4b03      	ldr	r3, [pc, #12]	; (800b9b4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	370c      	adds	r7, #12
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	200000f0 	.word	0x200000f0

0800b9b8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	220a      	movs	r2, #10
 800b9c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b9c6:	4b03      	ldr	r3, [pc, #12]	; (800b9d4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	20000024 	.word	0x20000024

0800b9d8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b083      	sub	sp, #12
 800b9dc:	af00      	add	r7, sp, #0
 800b9de:	6078      	str	r0, [r7, #4]
 800b9e0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d101      	bne.n	800b9ec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b9e8:	2303      	movs	r3, #3
 800b9ea:	e004      	b.n	800b9f6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b9f4:	2300      	movs	r3, #0
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b087      	sub	sp, #28
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba14:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ba16:	697b      	ldr	r3, [r7, #20]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	687a      	ldr	r2, [r7, #4]
 800ba22:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ba26:	2300      	movs	r3, #0
}
 800ba28:	4618      	mov	r0, r3
 800ba2a:	371c      	adds	r7, #28
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b085      	sub	sp, #20
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
 800ba3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba44:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	683a      	ldr	r2, [r7, #0]
 800ba4a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba6a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d101      	bne.n	800ba7e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e01a      	b.n	800bab4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d114      	bne.n	800bab2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800baa6:	2181      	movs	r1, #129	; 0x81
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fe62 	bl	800d772 <USBD_LL_Transmit>

    ret = USBD_OK;
 800baae:	2300      	movs	r3, #0
 800bab0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b084      	sub	sp, #16
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800baca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d101      	bne.n	800bada <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800bad6:	2303      	movs	r3, #3
 800bad8:	e016      	b.n	800bb08 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	7c1b      	ldrb	r3, [r3, #16]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d109      	bne.n	800baf6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baec:	2101      	movs	r1, #1
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	f001 fe60 	bl	800d7b4 <USBD_LL_PrepareReceive>
 800baf4:	e007      	b.n	800bb06 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bafc:	2340      	movs	r3, #64	; 0x40
 800bafe:	2101      	movs	r1, #1
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f001 fe57 	bl	800d7b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb06:	2300      	movs	r3, #0
}
 800bb08:	4618      	mov	r0, r3
 800bb0a:	3710      	adds	r7, #16
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bd80      	pop	{r7, pc}

0800bb10 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b086      	sub	sp, #24
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	60f8      	str	r0, [r7, #12]
 800bb18:	60b9      	str	r1, [r7, #8]
 800bb1a:	4613      	mov	r3, r2
 800bb1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d101      	bne.n	800bb28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bb24:	2303      	movs	r3, #3
 800bb26:	e025      	b.n	800bb74 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	2200      	movs	r2, #0
 800bb36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2200      	movs	r2, #0
 800bb48:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	68ba      	ldr	r2, [r7, #8]
 800bb56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2201      	movs	r2, #1
 800bb5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	79fa      	ldrb	r2, [r7, #7]
 800bb66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f001 fccd 	bl	800d508 <USBD_LL_Init>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	75fb      	strb	r3, [r7, #23]

  return ret;
 800bb72:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3718      	adds	r7, #24
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	bd80      	pop	{r7, pc}

0800bb7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b084      	sub	sp, #16
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bb86:	2300      	movs	r3, #0
 800bb88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d101      	bne.n	800bb94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800bb90:	2303      	movs	r3, #3
 800bb92:	e010      	b.n	800bbb6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bba4:	f107 020e 	add.w	r2, r7, #14
 800bba8:	4610      	mov	r0, r2
 800bbaa:	4798      	blx	r3
 800bbac:	4602      	mov	r2, r0
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3710      	adds	r7, #16
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b082      	sub	sp, #8
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800bbc6:	6878      	ldr	r0, [r7, #4]
 800bbc8:	f001 fcea 	bl	800d5a0 <USBD_LL_Start>
 800bbcc:	4603      	mov	r3, r0
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3708      	adds	r7, #8
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b083      	sub	sp, #12
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b084      	sub	sp, #16
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	460b      	mov	r3, r1
 800bbf6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bbf8:	2303      	movs	r3, #3
 800bbfa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d009      	beq.n	800bc1a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	78fa      	ldrb	r2, [r7, #3]
 800bc10:	4611      	mov	r1, r2
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	4798      	blx	r3
 800bc16:	4603      	mov	r3, r0
 800bc18:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800bc1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b082      	sub	sp, #8
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc40:	685b      	ldr	r3, [r3, #4]
 800bc42:	78fa      	ldrb	r2, [r7, #3]
 800bc44:	4611      	mov	r1, r2
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	4798      	blx	r3
  }

  return USBD_OK;
 800bc4a:	2300      	movs	r3, #0
}
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b084      	sub	sp, #16
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bc64:	6839      	ldr	r1, [r7, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 ff56 	bl	800cb18 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800bc7a:	461a      	mov	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bc88:	f003 031f 	and.w	r3, r3, #31
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d00e      	beq.n	800bcae <USBD_LL_SetupStage+0x5a>
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d302      	bcc.n	800bc9a <USBD_LL_SetupStage+0x46>
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d014      	beq.n	800bcc2 <USBD_LL_SetupStage+0x6e>
 800bc98:	e01d      	b.n	800bcd6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bca0:	4619      	mov	r1, r3
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f000 fa18 	bl	800c0d8 <USBD_StdDevReq>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bcac:	e020      	b.n	800bcf0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	6878      	ldr	r0, [r7, #4]
 800bcb8:	f000 fa7c 	bl	800c1b4 <USBD_StdItfReq>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	73fb      	strb	r3, [r7, #15]
      break;
 800bcc0:	e016      	b.n	800bcf0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800bcc8:	4619      	mov	r1, r3
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 fab8 	bl	800c240 <USBD_StdEPReq>
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	73fb      	strb	r3, [r7, #15]
      break;
 800bcd4:	e00c      	b.n	800bcf0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bcdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 fcbb 	bl	800d660 <USBD_LL_StallEP>
 800bcea:	4603      	mov	r3, r0
 800bcec:	73fb      	strb	r3, [r7, #15]
      break;
 800bcee:	bf00      	nop
  }

  return ret;
 800bcf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3710      	adds	r7, #16
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b086      	sub	sp, #24
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	60f8      	str	r0, [r7, #12]
 800bd02:	460b      	mov	r3, r1
 800bd04:	607a      	str	r2, [r7, #4]
 800bd06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bd08:	7afb      	ldrb	r3, [r7, #11]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d137      	bne.n	800bd7e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bd14:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd1c:	2b03      	cmp	r3, #3
 800bd1e:	d14a      	bne.n	800bdb6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	689a      	ldr	r2, [r3, #8]
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d913      	bls.n	800bd54 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bd2c:	693b      	ldr	r3, [r7, #16]
 800bd2e:	689a      	ldr	r2, [r3, #8]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	68db      	ldr	r3, [r3, #12]
 800bd34:	1ad2      	subs	r2, r2, r3
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bd3a:	693b      	ldr	r3, [r7, #16]
 800bd3c:	68da      	ldr	r2, [r3, #12]
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	4293      	cmp	r3, r2
 800bd44:	bf28      	it	cs
 800bd46:	4613      	movcs	r3, r2
 800bd48:	461a      	mov	r2, r3
 800bd4a:	6879      	ldr	r1, [r7, #4]
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 ffd7 	bl	800cd00 <USBD_CtlContinueRx>
 800bd52:	e030      	b.n	800bdb6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d00a      	beq.n	800bd76 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd66:	2b03      	cmp	r3, #3
 800bd68:	d105      	bne.n	800bd76 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800bd76:	68f8      	ldr	r0, [r7, #12]
 800bd78:	f000 ffd3 	bl	800cd22 <USBD_CtlSendStatus>
 800bd7c:	e01b      	b.n	800bdb6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d013      	beq.n	800bdb2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bd90:	2b03      	cmp	r3, #3
 800bd92:	d10e      	bne.n	800bdb2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	7afa      	ldrb	r2, [r7, #11]
 800bd9e:	4611      	mov	r1, r2
 800bda0:	68f8      	ldr	r0, [r7, #12]
 800bda2:	4798      	blx	r3
 800bda4:	4603      	mov	r3, r0
 800bda6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bda8:	7dfb      	ldrb	r3, [r7, #23]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d003      	beq.n	800bdb6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800bdae:	7dfb      	ldrb	r3, [r7, #23]
 800bdb0:	e002      	b.n	800bdb8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e000      	b.n	800bdb8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b086      	sub	sp, #24
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	60f8      	str	r0, [r7, #12]
 800bdc8:	460b      	mov	r3, r1
 800bdca:	607a      	str	r2, [r7, #4]
 800bdcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800bdce:	7afb      	ldrb	r3, [r7, #11]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d16a      	bne.n	800beaa <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	3314      	adds	r3, #20
 800bdd8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d155      	bne.n	800be90 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	689a      	ldr	r2, [r3, #8]
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d914      	bls.n	800be1a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	689a      	ldr	r2, [r3, #8]
 800bdf4:	693b      	ldr	r3, [r7, #16]
 800bdf6:	68db      	ldr	r3, [r3, #12]
 800bdf8:	1ad2      	subs	r2, r2, r3
 800bdfa:	693b      	ldr	r3, [r7, #16]
 800bdfc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	461a      	mov	r2, r3
 800be04:	6879      	ldr	r1, [r7, #4]
 800be06:	68f8      	ldr	r0, [r7, #12]
 800be08:	f000 ff4c 	bl	800cca4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be0c:	2300      	movs	r3, #0
 800be0e:	2200      	movs	r2, #0
 800be10:	2100      	movs	r1, #0
 800be12:	68f8      	ldr	r0, [r7, #12]
 800be14:	f001 fcce 	bl	800d7b4 <USBD_LL_PrepareReceive>
 800be18:	e03a      	b.n	800be90 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	68da      	ldr	r2, [r3, #12]
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	689b      	ldr	r3, [r3, #8]
 800be22:	429a      	cmp	r2, r3
 800be24:	d11c      	bne.n	800be60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	685a      	ldr	r2, [r3, #4]
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800be2e:	429a      	cmp	r2, r3
 800be30:	d316      	bcc.n	800be60 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	685a      	ldr	r2, [r3, #4]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d20f      	bcs.n	800be60 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800be40:	2200      	movs	r2, #0
 800be42:	2100      	movs	r1, #0
 800be44:	68f8      	ldr	r0, [r7, #12]
 800be46:	f000 ff2d 	bl	800cca4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2200      	movs	r2, #0
 800be4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be52:	2300      	movs	r3, #0
 800be54:	2200      	movs	r2, #0
 800be56:	2100      	movs	r1, #0
 800be58:	68f8      	ldr	r0, [r7, #12]
 800be5a:	f001 fcab 	bl	800d7b4 <USBD_LL_PrepareReceive>
 800be5e:	e017      	b.n	800be90 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be66:	68db      	ldr	r3, [r3, #12]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d00a      	beq.n	800be82 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800be72:	2b03      	cmp	r3, #3
 800be74:	d105      	bne.n	800be82 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be7c:	68db      	ldr	r3, [r3, #12]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be82:	2180      	movs	r1, #128	; 0x80
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f001 fbeb 	bl	800d660 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f000 ff5c 	bl	800cd48 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800be96:	2b01      	cmp	r3, #1
 800be98:	d123      	bne.n	800bee2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800be9a:	68f8      	ldr	r0, [r7, #12]
 800be9c:	f7ff fe9b 	bl	800bbd6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2200      	movs	r2, #0
 800bea4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bea8:	e01b      	b.n	800bee2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beb0:	695b      	ldr	r3, [r3, #20]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d013      	beq.n	800bede <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bebc:	2b03      	cmp	r3, #3
 800bebe:	d10e      	bne.n	800bede <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bec6:	695b      	ldr	r3, [r3, #20]
 800bec8:	7afa      	ldrb	r2, [r7, #11]
 800beca:	4611      	mov	r1, r2
 800becc:	68f8      	ldr	r0, [r7, #12]
 800bece:	4798      	blx	r3
 800bed0:	4603      	mov	r3, r0
 800bed2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800bed4:	7dfb      	ldrb	r3, [r7, #23]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d003      	beq.n	800bee2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800beda:	7dfb      	ldrb	r3, [r7, #23]
 800bedc:	e002      	b.n	800bee4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bede:	2303      	movs	r3, #3
 800bee0:	e000      	b.n	800bee4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800bee2:	2300      	movs	r3, #0
}
 800bee4:	4618      	mov	r0, r3
 800bee6:	3718      	adds	r7, #24
 800bee8:	46bd      	mov	sp, r7
 800beea:	bd80      	pop	{r7, pc}

0800beec <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2201      	movs	r2, #1
 800bef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d009      	beq.n	800bf30 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	6852      	ldr	r2, [r2, #4]
 800bf28:	b2d2      	uxtb	r2, r2
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf30:	2340      	movs	r3, #64	; 0x40
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f001 fb4d 	bl	800d5d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2240      	movs	r2, #64	; 0x40
 800bf48:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf4c:	2340      	movs	r3, #64	; 0x40
 800bf4e:	2200      	movs	r2, #0
 800bf50:	2180      	movs	r1, #128	; 0x80
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f001 fb3f 	bl	800d5d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2201      	movs	r2, #1
 800bf5c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2240      	movs	r2, #64	; 0x40
 800bf62:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bf64:	2300      	movs	r3, #0
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3708      	adds	r7, #8
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	bd80      	pop	{r7, pc}

0800bf6e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b083      	sub	sp, #12
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
 800bf76:	460b      	mov	r3, r1
 800bf78:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	78fa      	ldrb	r2, [r7, #3]
 800bf7e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	370c      	adds	r7, #12
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr

0800bf8e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bf8e:	b480      	push	{r7}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2204      	movs	r2, #4
 800bfa6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d105      	bne.n	800bfd6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bfd6:	2300      	movs	r3, #0
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bff2:	2b03      	cmp	r3, #3
 800bff4:	d10b      	bne.n	800c00e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bffc:	69db      	ldr	r3, [r3, #28]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d005      	beq.n	800c00e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c008:	69db      	ldr	r3, [r3, #28]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c018:	b480      	push	{r7}
 800c01a:	b083      	sub	sp, #12
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
 800c020:	460b      	mov	r3, r1
 800c022:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c024:	2300      	movs	r3, #0
}
 800c026:	4618      	mov	r0, r3
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
 800c03a:	460b      	mov	r3, r1
 800c03c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	370c      	adds	r7, #12
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c062:	b580      	push	{r7, lr}
 800c064:	b082      	sub	sp, #8
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2201      	movs	r2, #1
 800c06e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d009      	beq.n	800c090 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	6852      	ldr	r2, [r2, #4]
 800c088:	b2d2      	uxtb	r2, r2
 800c08a:	4611      	mov	r1, r2
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	4798      	blx	r3
  }

  return USBD_OK;
 800c090:	2300      	movs	r3, #0
}
 800c092:	4618      	mov	r0, r3
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}

0800c09a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c09a:	b480      	push	{r7}
 800c09c:	b087      	sub	sp, #28
 800c09e:	af00      	add	r7, sp, #0
 800c0a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	781b      	ldrb	r3, [r3, #0]
 800c0b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c0b8:	8a3b      	ldrh	r3, [r7, #16]
 800c0ba:	021b      	lsls	r3, r3, #8
 800c0bc:	b21a      	sxth	r2, r3
 800c0be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	b21b      	sxth	r3, r3
 800c0c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c0c8:	89fb      	ldrh	r3, [r7, #14]
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	371c      	adds	r7, #28
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr
	...

0800c0d8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
 800c0e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0ee:	2b20      	cmp	r3, #32
 800c0f0:	d004      	beq.n	800c0fc <USBD_StdDevReq+0x24>
 800c0f2:	2b40      	cmp	r3, #64	; 0x40
 800c0f4:	d002      	beq.n	800c0fc <USBD_StdDevReq+0x24>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <USBD_StdDevReq+0x38>
 800c0fa:	e050      	b.n	800c19e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	6839      	ldr	r1, [r7, #0]
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	4798      	blx	r3
 800c10a:	4603      	mov	r3, r0
 800c10c:	73fb      	strb	r3, [r7, #15]
    break;
 800c10e:	e04b      	b.n	800c1a8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	785b      	ldrb	r3, [r3, #1]
 800c114:	2b09      	cmp	r3, #9
 800c116:	d83c      	bhi.n	800c192 <USBD_StdDevReq+0xba>
 800c118:	a201      	add	r2, pc, #4	; (adr r2, 800c120 <USBD_StdDevReq+0x48>)
 800c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11e:	bf00      	nop
 800c120:	0800c175 	.word	0x0800c175
 800c124:	0800c189 	.word	0x0800c189
 800c128:	0800c193 	.word	0x0800c193
 800c12c:	0800c17f 	.word	0x0800c17f
 800c130:	0800c193 	.word	0x0800c193
 800c134:	0800c153 	.word	0x0800c153
 800c138:	0800c149 	.word	0x0800c149
 800c13c:	0800c193 	.word	0x0800c193
 800c140:	0800c16b 	.word	0x0800c16b
 800c144:	0800c15d 	.word	0x0800c15d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 f9ce 	bl	800c4ec <USBD_GetDescriptor>
      break;
 800c150:	e024      	b.n	800c19c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800c152:	6839      	ldr	r1, [r7, #0]
 800c154:	6878      	ldr	r0, [r7, #4]
 800c156:	f000 fb5d 	bl	800c814 <USBD_SetAddress>
      break;
 800c15a:	e01f      	b.n	800c19c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fb9a 	bl	800c898 <USBD_SetConfig>
 800c164:	4603      	mov	r3, r0
 800c166:	73fb      	strb	r3, [r7, #15]
      break;
 800c168:	e018      	b.n	800c19c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fc37 	bl	800c9e0 <USBD_GetConfig>
      break;
 800c172:	e013      	b.n	800c19c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fc66 	bl	800ca48 <USBD_GetStatus>
      break;
 800c17c:	e00e      	b.n	800c19c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fc94 	bl	800caae <USBD_SetFeature>
      break;
 800c186:	e009      	b.n	800c19c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fca3 	bl	800cad6 <USBD_ClrFeature>
      break;
 800c190:	e004      	b.n	800c19c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fcf9 	bl	800cb8c <USBD_CtlError>
      break;
 800c19a:	bf00      	nop
    }
    break;
 800c19c:	e004      	b.n	800c1a8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800c19e:	6839      	ldr	r1, [r7, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 fcf3 	bl	800cb8c <USBD_CtlError>
    break;
 800c1a6:	bf00      	nop
  }

  return ret;
 800c1a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop

0800c1b4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b4:	b580      	push	{r7, lr}
 800c1b6:	b084      	sub	sp, #16
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
 800c1bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1ca:	2b20      	cmp	r3, #32
 800c1cc:	d003      	beq.n	800c1d6 <USBD_StdItfReq+0x22>
 800c1ce:	2b40      	cmp	r3, #64	; 0x40
 800c1d0:	d001      	beq.n	800c1d6 <USBD_StdItfReq+0x22>
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d12a      	bne.n	800c22c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	2b02      	cmp	r3, #2
 800c1e0:	d81d      	bhi.n	800c21e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	889b      	ldrh	r3, [r3, #4]
 800c1e6:	b2db      	uxtb	r3, r3
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d813      	bhi.n	800c214 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	6839      	ldr	r1, [r7, #0]
 800c1f6:	6878      	ldr	r0, [r7, #4]
 800c1f8:	4798      	blx	r3
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	88db      	ldrh	r3, [r3, #6]
 800c202:	2b00      	cmp	r3, #0
 800c204:	d110      	bne.n	800c228 <USBD_StdItfReq+0x74>
 800c206:	7bfb      	ldrb	r3, [r7, #15]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10d      	bne.n	800c228 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 fd88 	bl	800cd22 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800c212:	e009      	b.n	800c228 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800c214:	6839      	ldr	r1, [r7, #0]
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fcb8 	bl	800cb8c <USBD_CtlError>
      break;
 800c21c:	e004      	b.n	800c228 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f000 fcb3 	bl	800cb8c <USBD_CtlError>
      break;
 800c226:	e000      	b.n	800c22a <USBD_StdItfReq+0x76>
      break;
 800c228:	bf00      	nop
    }
    break;
 800c22a:	e004      	b.n	800c236 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 fcac 	bl	800cb8c <USBD_CtlError>
    break;
 800c234:	bf00      	nop
  }

  return ret;
 800c236:	7bfb      	ldrb	r3, [r7, #15]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3710      	adds	r7, #16
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c24a:	2300      	movs	r3, #0
 800c24c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	889b      	ldrh	r3, [r3, #4]
 800c252:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	781b      	ldrb	r3, [r3, #0]
 800c258:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c25c:	2b20      	cmp	r3, #32
 800c25e:	d004      	beq.n	800c26a <USBD_StdEPReq+0x2a>
 800c260:	2b40      	cmp	r3, #64	; 0x40
 800c262:	d002      	beq.n	800c26a <USBD_StdEPReq+0x2a>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00a      	beq.n	800c27e <USBD_StdEPReq+0x3e>
 800c268:	e135      	b.n	800c4d6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c270:	689b      	ldr	r3, [r3, #8]
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	4798      	blx	r3
 800c278:	4603      	mov	r3, r0
 800c27a:	73fb      	strb	r3, [r7, #15]
    break;
 800c27c:	e130      	b.n	800c4e0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	785b      	ldrb	r3, [r3, #1]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d03e      	beq.n	800c304 <USBD_StdEPReq+0xc4>
 800c286:	2b03      	cmp	r3, #3
 800c288:	d002      	beq.n	800c290 <USBD_StdEPReq+0x50>
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d077      	beq.n	800c37e <USBD_StdEPReq+0x13e>
 800c28e:	e11c      	b.n	800c4ca <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c296:	2b02      	cmp	r3, #2
 800c298:	d002      	beq.n	800c2a0 <USBD_StdEPReq+0x60>
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d015      	beq.n	800c2ca <USBD_StdEPReq+0x8a>
 800c29e:	e02b      	b.n	800c2f8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2a0:	7bbb      	ldrb	r3, [r7, #14]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d00c      	beq.n	800c2c0 <USBD_StdEPReq+0x80>
 800c2a6:	7bbb      	ldrb	r3, [r7, #14]
 800c2a8:	2b80      	cmp	r3, #128	; 0x80
 800c2aa:	d009      	beq.n	800c2c0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2ac:	7bbb      	ldrb	r3, [r7, #14]
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	6878      	ldr	r0, [r7, #4]
 800c2b2:	f001 f9d5 	bl	800d660 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c2b6:	2180      	movs	r1, #128	; 0x80
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	f001 f9d1 	bl	800d660 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c2be:	e020      	b.n	800c302 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800c2c0:	6839      	ldr	r1, [r7, #0]
 800c2c2:	6878      	ldr	r0, [r7, #4]
 800c2c4:	f000 fc62 	bl	800cb8c <USBD_CtlError>
        break;
 800c2c8:	e01b      	b.n	800c302 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	885b      	ldrh	r3, [r3, #2]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d10e      	bne.n	800c2f0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c2d2:	7bbb      	ldrb	r3, [r7, #14]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00b      	beq.n	800c2f0 <USBD_StdEPReq+0xb0>
 800c2d8:	7bbb      	ldrb	r3, [r7, #14]
 800c2da:	2b80      	cmp	r3, #128	; 0x80
 800c2dc:	d008      	beq.n	800c2f0 <USBD_StdEPReq+0xb0>
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	88db      	ldrh	r3, [r3, #6]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d104      	bne.n	800c2f0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f001 f9b8 	bl	800d660 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f000 fd16 	bl	800cd22 <USBD_CtlSendStatus>

        break;
 800c2f6:	e004      	b.n	800c302 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800c2f8:	6839      	ldr	r1, [r7, #0]
 800c2fa:	6878      	ldr	r0, [r7, #4]
 800c2fc:	f000 fc46 	bl	800cb8c <USBD_CtlError>
        break;
 800c300:	bf00      	nop
      }
      break;
 800c302:	e0e7      	b.n	800c4d4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d002      	beq.n	800c314 <USBD_StdEPReq+0xd4>
 800c30e:	2b03      	cmp	r3, #3
 800c310:	d015      	beq.n	800c33e <USBD_StdEPReq+0xfe>
 800c312:	e02d      	b.n	800c370 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c314:	7bbb      	ldrb	r3, [r7, #14]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d00c      	beq.n	800c334 <USBD_StdEPReq+0xf4>
 800c31a:	7bbb      	ldrb	r3, [r7, #14]
 800c31c:	2b80      	cmp	r3, #128	; 0x80
 800c31e:	d009      	beq.n	800c334 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800c320:	7bbb      	ldrb	r3, [r7, #14]
 800c322:	4619      	mov	r1, r3
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f001 f99b 	bl	800d660 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c32a:	2180      	movs	r1, #128	; 0x80
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f001 f997 	bl	800d660 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800c332:	e023      	b.n	800c37c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800c334:	6839      	ldr	r1, [r7, #0]
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fc28 	bl	800cb8c <USBD_CtlError>
        break;
 800c33c:	e01e      	b.n	800c37c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800c33e:	683b      	ldr	r3, [r7, #0]
 800c340:	885b      	ldrh	r3, [r3, #2]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d119      	bne.n	800c37a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800c346:	7bbb      	ldrb	r3, [r7, #14]
 800c348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d004      	beq.n	800c35a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c350:	7bbb      	ldrb	r3, [r7, #14]
 800c352:	4619      	mov	r1, r3
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f001 f9a2 	bl	800d69e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800c35a:	6878      	ldr	r0, [r7, #4]
 800c35c:	f000 fce1 	bl	800cd22 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c366:	689b      	ldr	r3, [r3, #8]
 800c368:	6839      	ldr	r1, [r7, #0]
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	4798      	blx	r3
        }
        break;
 800c36e:	e004      	b.n	800c37a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800c370:	6839      	ldr	r1, [r7, #0]
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f000 fc0a 	bl	800cb8c <USBD_CtlError>
        break;
 800c378:	e000      	b.n	800c37c <USBD_StdEPReq+0x13c>
        break;
 800c37a:	bf00      	nop
      }
      break;
 800c37c:	e0aa      	b.n	800c4d4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c384:	2b02      	cmp	r3, #2
 800c386:	d002      	beq.n	800c38e <USBD_StdEPReq+0x14e>
 800c388:	2b03      	cmp	r3, #3
 800c38a:	d032      	beq.n	800c3f2 <USBD_StdEPReq+0x1b2>
 800c38c:	e097      	b.n	800c4be <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c38e:	7bbb      	ldrb	r3, [r7, #14]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d007      	beq.n	800c3a4 <USBD_StdEPReq+0x164>
 800c394:	7bbb      	ldrb	r3, [r7, #14]
 800c396:	2b80      	cmp	r3, #128	; 0x80
 800c398:	d004      	beq.n	800c3a4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800c39a:	6839      	ldr	r1, [r7, #0]
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 fbf5 	bl	800cb8c <USBD_CtlError>
          break;
 800c3a2:	e091      	b.n	800c4c8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	da0b      	bge.n	800c3c4 <USBD_StdEPReq+0x184>
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	009b      	lsls	r3, r3, #2
 800c3b6:	4413      	add	r3, r2
 800c3b8:	009b      	lsls	r3, r3, #2
 800c3ba:	3310      	adds	r3, #16
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	4413      	add	r3, r2
 800c3c0:	3304      	adds	r3, #4
 800c3c2:	e00b      	b.n	800c3dc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c3c4:	7bbb      	ldrb	r3, [r7, #14]
 800c3c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	009b      	lsls	r3, r3, #2
 800c3d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	4413      	add	r3, r2
 800c3da:	3304      	adds	r3, #4
 800c3dc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	4619      	mov	r1, r3
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fc3f 	bl	800cc6e <USBD_CtlSendData>
        break;
 800c3f0:	e06a      	b.n	800c4c8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800c3f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	da11      	bge.n	800c41e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	f003 020f 	and.w	r2, r3, #15
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	4613      	mov	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	440b      	add	r3, r1
 800c40c:	3324      	adds	r3, #36	; 0x24
 800c40e:	881b      	ldrh	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d117      	bne.n	800c444 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c414:	6839      	ldr	r1, [r7, #0]
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fbb8 	bl	800cb8c <USBD_CtlError>
            break;
 800c41c:	e054      	b.n	800c4c8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c41e:	7bbb      	ldrb	r3, [r7, #14]
 800c420:	f003 020f 	and.w	r2, r3, #15
 800c424:	6879      	ldr	r1, [r7, #4]
 800c426:	4613      	mov	r3, r2
 800c428:	009b      	lsls	r3, r3, #2
 800c42a:	4413      	add	r3, r2
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	440b      	add	r3, r1
 800c430:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c434:	881b      	ldrh	r3, [r3, #0]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d104      	bne.n	800c444 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 fba5 	bl	800cb8c <USBD_CtlError>
            break;
 800c442:	e041      	b.n	800c4c8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c444:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	da0b      	bge.n	800c464 <USBD_StdEPReq+0x224>
 800c44c:	7bbb      	ldrb	r3, [r7, #14]
 800c44e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c452:	4613      	mov	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	4413      	add	r3, r2
 800c458:	009b      	lsls	r3, r3, #2
 800c45a:	3310      	adds	r3, #16
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	4413      	add	r3, r2
 800c460:	3304      	adds	r3, #4
 800c462:	e00b      	b.n	800c47c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c464:	7bbb      	ldrb	r3, [r7, #14]
 800c466:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c46a:	4613      	mov	r3, r2
 800c46c:	009b      	lsls	r3, r3, #2
 800c46e:	4413      	add	r3, r2
 800c470:	009b      	lsls	r3, r3, #2
 800c472:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4413      	add	r3, r2
 800c47a:	3304      	adds	r3, #4
 800c47c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c47e:	7bbb      	ldrb	r3, [r7, #14]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d002      	beq.n	800c48a <USBD_StdEPReq+0x24a>
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	2b80      	cmp	r3, #128	; 0x80
 800c488:	d103      	bne.n	800c492 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	2200      	movs	r2, #0
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	e00e      	b.n	800c4b0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c492:	7bbb      	ldrb	r3, [r7, #14]
 800c494:	4619      	mov	r1, r3
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f001 f920 	bl	800d6dc <USBD_LL_IsStallEP>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d003      	beq.n	800c4aa <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	2201      	movs	r2, #1
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	e002      	b.n	800c4b0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	4619      	mov	r1, r3
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fbd9 	bl	800cc6e <USBD_CtlSendData>
          break;
 800c4bc:	e004      	b.n	800c4c8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f000 fb63 	bl	800cb8c <USBD_CtlError>
        break;
 800c4c6:	bf00      	nop
      }
      break;
 800c4c8:	e004      	b.n	800c4d4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fb5d 	bl	800cb8c <USBD_CtlError>
      break;
 800c4d2:	bf00      	nop
    }
    break;
 800c4d4:	e004      	b.n	800c4e0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c4d6:	6839      	ldr	r1, [r7, #0]
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fb57 	bl	800cb8c <USBD_CtlError>
    break;
 800c4de:	bf00      	nop
  }

  return ret;
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}
	...

0800c4ec <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c4fe:	2300      	movs	r3, #0
 800c500:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	885b      	ldrh	r3, [r3, #2]
 800c506:	0a1b      	lsrs	r3, r3, #8
 800c508:	b29b      	uxth	r3, r3
 800c50a:	3b01      	subs	r3, #1
 800c50c:	2b0e      	cmp	r3, #14
 800c50e:	f200 8152 	bhi.w	800c7b6 <USBD_GetDescriptor+0x2ca>
 800c512:	a201      	add	r2, pc, #4	; (adr r2, 800c518 <USBD_GetDescriptor+0x2c>)
 800c514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c518:	0800c589 	.word	0x0800c589
 800c51c:	0800c5a1 	.word	0x0800c5a1
 800c520:	0800c5e1 	.word	0x0800c5e1
 800c524:	0800c7b7 	.word	0x0800c7b7
 800c528:	0800c7b7 	.word	0x0800c7b7
 800c52c:	0800c757 	.word	0x0800c757
 800c530:	0800c783 	.word	0x0800c783
 800c534:	0800c7b7 	.word	0x0800c7b7
 800c538:	0800c7b7 	.word	0x0800c7b7
 800c53c:	0800c7b7 	.word	0x0800c7b7
 800c540:	0800c7b7 	.word	0x0800c7b7
 800c544:	0800c7b7 	.word	0x0800c7b7
 800c548:	0800c7b7 	.word	0x0800c7b7
 800c54c:	0800c7b7 	.word	0x0800c7b7
 800c550:	0800c555 	.word	0x0800c555
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	69db      	ldr	r3, [r3, #28]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	69db      	ldr	r3, [r3, #28]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c576:	e126      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fb06 	bl	800cb8c <USBD_CtlError>
      err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
    break;
 800c586:	e11e      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	687a      	ldr	r2, [r7, #4]
 800c592:	7c12      	ldrb	r2, [r2, #16]
 800c594:	f107 0108 	add.w	r1, r7, #8
 800c598:	4610      	mov	r0, r2
 800c59a:	4798      	blx	r3
 800c59c:	60f8      	str	r0, [r7, #12]
    break;
 800c59e:	e112      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	7c1b      	ldrb	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d10d      	bne.n	800c5c4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b0:	f107 0208 	add.w	r2, r7, #8
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	2202      	movs	r2, #2
 800c5c0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c5c2:	e100      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5cc:	f107 0208 	add.w	r2, r7, #8
 800c5d0:	4610      	mov	r0, r2
 800c5d2:	4798      	blx	r3
 800c5d4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	3301      	adds	r3, #1
 800c5da:	2202      	movs	r2, #2
 800c5dc:	701a      	strb	r2, [r3, #0]
    break;
 800c5de:	e0f2      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	885b      	ldrh	r3, [r3, #2]
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b05      	cmp	r3, #5
 800c5e8:	f200 80ac 	bhi.w	800c744 <USBD_GetDescriptor+0x258>
 800c5ec:	a201      	add	r2, pc, #4	; (adr r2, 800c5f4 <USBD_GetDescriptor+0x108>)
 800c5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f2:	bf00      	nop
 800c5f4:	0800c60d 	.word	0x0800c60d
 800c5f8:	0800c641 	.word	0x0800c641
 800c5fc:	0800c675 	.word	0x0800c675
 800c600:	0800c6a9 	.word	0x0800c6a9
 800c604:	0800c6dd 	.word	0x0800c6dd
 800c608:	0800c711 	.word	0x0800c711
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00b      	beq.n	800c630 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	7c12      	ldrb	r2, [r2, #16]
 800c624:	f107 0108 	add.w	r1, r7, #8
 800c628:	4610      	mov	r0, r2
 800c62a:	4798      	blx	r3
 800c62c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c62e:	e091      	b.n	800c754 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c630:	6839      	ldr	r1, [r7, #0]
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 faaa 	bl	800cb8c <USBD_CtlError>
        err++;
 800c638:	7afb      	ldrb	r3, [r7, #11]
 800c63a:	3301      	adds	r3, #1
 800c63c:	72fb      	strb	r3, [r7, #11]
      break;
 800c63e:	e089      	b.n	800c754 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d00b      	beq.n	800c664 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	7c12      	ldrb	r2, [r2, #16]
 800c658:	f107 0108 	add.w	r1, r7, #8
 800c65c:	4610      	mov	r0, r2
 800c65e:	4798      	blx	r3
 800c660:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c662:	e077      	b.n	800c754 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c664:	6839      	ldr	r1, [r7, #0]
 800c666:	6878      	ldr	r0, [r7, #4]
 800c668:	f000 fa90 	bl	800cb8c <USBD_CtlError>
        err++;
 800c66c:	7afb      	ldrb	r3, [r7, #11]
 800c66e:	3301      	adds	r3, #1
 800c670:	72fb      	strb	r3, [r7, #11]
      break;
 800c672:	e06f      	b.n	800c754 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00b      	beq.n	800c698 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	7c12      	ldrb	r2, [r2, #16]
 800c68c:	f107 0108 	add.w	r1, r7, #8
 800c690:	4610      	mov	r0, r2
 800c692:	4798      	blx	r3
 800c694:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c696:	e05d      	b.n	800c754 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c698:	6839      	ldr	r1, [r7, #0]
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 fa76 	bl	800cb8c <USBD_CtlError>
        err++;
 800c6a0:	7afb      	ldrb	r3, [r7, #11]
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	72fb      	strb	r3, [r7, #11]
      break;
 800c6a6:	e055      	b.n	800c754 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ae:	691b      	ldr	r3, [r3, #16]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00b      	beq.n	800c6cc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ba:	691b      	ldr	r3, [r3, #16]
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	7c12      	ldrb	r2, [r2, #16]
 800c6c0:	f107 0108 	add.w	r1, r7, #8
 800c6c4:	4610      	mov	r0, r2
 800c6c6:	4798      	blx	r3
 800c6c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6ca:	e043      	b.n	800c754 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c6cc:	6839      	ldr	r1, [r7, #0]
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 fa5c 	bl	800cb8c <USBD_CtlError>
        err++;
 800c6d4:	7afb      	ldrb	r3, [r7, #11]
 800c6d6:	3301      	adds	r3, #1
 800c6d8:	72fb      	strb	r3, [r7, #11]
      break;
 800c6da:	e03b      	b.n	800c754 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6e2:	695b      	ldr	r3, [r3, #20]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d00b      	beq.n	800c700 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ee:	695b      	ldr	r3, [r3, #20]
 800c6f0:	687a      	ldr	r2, [r7, #4]
 800c6f2:	7c12      	ldrb	r2, [r2, #16]
 800c6f4:	f107 0108 	add.w	r1, r7, #8
 800c6f8:	4610      	mov	r0, r2
 800c6fa:	4798      	blx	r3
 800c6fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c6fe:	e029      	b.n	800c754 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c700:	6839      	ldr	r1, [r7, #0]
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 fa42 	bl	800cb8c <USBD_CtlError>
        err++;
 800c708:	7afb      	ldrb	r3, [r7, #11]
 800c70a:	3301      	adds	r3, #1
 800c70c:	72fb      	strb	r3, [r7, #11]
      break;
 800c70e:	e021      	b.n	800c754 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c716:	699b      	ldr	r3, [r3, #24]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d00b      	beq.n	800c734 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c722:	699b      	ldr	r3, [r3, #24]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	7c12      	ldrb	r2, [r2, #16]
 800c728:	f107 0108 	add.w	r1, r7, #8
 800c72c:	4610      	mov	r0, r2
 800c72e:	4798      	blx	r3
 800c730:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c732:	e00f      	b.n	800c754 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 fa28 	bl	800cb8c <USBD_CtlError>
        err++;
 800c73c:	7afb      	ldrb	r3, [r7, #11]
 800c73e:	3301      	adds	r3, #1
 800c740:	72fb      	strb	r3, [r7, #11]
      break;
 800c742:	e007      	b.n	800c754 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c744:	6839      	ldr	r1, [r7, #0]
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa20 	bl	800cb8c <USBD_CtlError>
      err++;
 800c74c:	7afb      	ldrb	r3, [r7, #11]
 800c74e:	3301      	adds	r3, #1
 800c750:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c752:	bf00      	nop
    }
    break;
 800c754:	e037      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	7c1b      	ldrb	r3, [r3, #16]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d109      	bne.n	800c772 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c766:	f107 0208 	add.w	r2, r7, #8
 800c76a:	4610      	mov	r0, r2
 800c76c:	4798      	blx	r3
 800c76e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c770:	e029      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6878      	ldr	r0, [r7, #4]
 800c776:	f000 fa09 	bl	800cb8c <USBD_CtlError>
      err++;
 800c77a:	7afb      	ldrb	r3, [r7, #11]
 800c77c:	3301      	adds	r3, #1
 800c77e:	72fb      	strb	r3, [r7, #11]
    break;
 800c780:	e021      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	7c1b      	ldrb	r3, [r3, #16]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d10d      	bne.n	800c7a6 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c792:	f107 0208 	add.w	r2, r7, #8
 800c796:	4610      	mov	r0, r2
 800c798:	4798      	blx	r3
 800c79a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	2207      	movs	r2, #7
 800c7a2:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c7a4:	e00f      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c7a6:	6839      	ldr	r1, [r7, #0]
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f000 f9ef 	bl	800cb8c <USBD_CtlError>
      err++;
 800c7ae:	7afb      	ldrb	r3, [r7, #11]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	72fb      	strb	r3, [r7, #11]
    break;
 800c7b4:	e007      	b.n	800c7c6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c7b6:	6839      	ldr	r1, [r7, #0]
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f9e7 	bl	800cb8c <USBD_CtlError>
    err++;
 800c7be:	7afb      	ldrb	r3, [r7, #11]
 800c7c0:	3301      	adds	r3, #1
 800c7c2:	72fb      	strb	r3, [r7, #11]
    break;
 800c7c4:	bf00      	nop
  }

  if (err != 0U)
 800c7c6:	7afb      	ldrb	r3, [r7, #11]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d11e      	bne.n	800c80a <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	88db      	ldrh	r3, [r3, #6]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d016      	beq.n	800c802 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c7d4:	893b      	ldrh	r3, [r7, #8]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00e      	beq.n	800c7f8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	88da      	ldrh	r2, [r3, #6]
 800c7de:	893b      	ldrh	r3, [r7, #8]
 800c7e0:	4293      	cmp	r3, r2
 800c7e2:	bf28      	it	cs
 800c7e4:	4613      	movcs	r3, r2
 800c7e6:	b29b      	uxth	r3, r3
 800c7e8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7ea:	893b      	ldrh	r3, [r7, #8]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	68f9      	ldr	r1, [r7, #12]
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 fa3c 	bl	800cc6e <USBD_CtlSendData>
 800c7f6:	e009      	b.n	800c80c <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f9c6 	bl	800cb8c <USBD_CtlError>
 800c800:	e004      	b.n	800c80c <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fa8d 	bl	800cd22 <USBD_CtlSendStatus>
 800c808:	e000      	b.n	800c80c <USBD_GetDescriptor+0x320>
    return;
 800c80a:	bf00      	nop
    }
  }
}
 800c80c:	3710      	adds	r7, #16
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop

0800c814 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	889b      	ldrh	r3, [r3, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d130      	bne.n	800c888 <USBD_SetAddress+0x74>
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	88db      	ldrh	r3, [r3, #6]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d12c      	bne.n	800c888 <USBD_SetAddress+0x74>
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	885b      	ldrh	r3, [r3, #2]
 800c832:	2b7f      	cmp	r3, #127	; 0x7f
 800c834:	d828      	bhi.n	800c888 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	885b      	ldrh	r3, [r3, #2]
 800c83a:	b2db      	uxtb	r3, r3
 800c83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c840:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d104      	bne.n	800c856 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c84c:	6839      	ldr	r1, [r7, #0]
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 f99c 	bl	800cb8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c854:	e01c      	b.n	800c890 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	7bfa      	ldrb	r2, [r7, #15]
 800c85a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	4619      	mov	r1, r3
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 ff66 	bl	800d734 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f000 fa5a 	bl	800cd22 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c86e:	7bfb      	ldrb	r3, [r7, #15]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d004      	beq.n	800c87e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2202      	movs	r2, #2
 800c878:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c87c:	e008      	b.n	800c890 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2201      	movs	r2, #1
 800c882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c886:	e003      	b.n	800c890 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c888:	6839      	ldr	r1, [r7, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	f000 f97e 	bl	800cb8c <USBD_CtlError>
  }
}
 800c890:	bf00      	nop
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	885b      	ldrh	r3, [r3, #2]
 800c8aa:	b2da      	uxtb	r2, r3
 800c8ac:	4b4b      	ldr	r3, [pc, #300]	; (800c9dc <USBD_SetConfig+0x144>)
 800c8ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c8b0:	4b4a      	ldr	r3, [pc, #296]	; (800c9dc <USBD_SetConfig+0x144>)
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	d905      	bls.n	800c8c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c8b8:	6839      	ldr	r1, [r7, #0]
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f000 f966 	bl	800cb8c <USBD_CtlError>
    return USBD_FAIL;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e087      	b.n	800c9d4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8ca:	2b02      	cmp	r3, #2
 800c8cc:	d002      	beq.n	800c8d4 <USBD_SetConfig+0x3c>
 800c8ce:	2b03      	cmp	r3, #3
 800c8d0:	d025      	beq.n	800c91e <USBD_SetConfig+0x86>
 800c8d2:	e071      	b.n	800c9b8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c8d4:	4b41      	ldr	r3, [pc, #260]	; (800c9dc <USBD_SetConfig+0x144>)
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d01c      	beq.n	800c916 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c8dc:	4b3f      	ldr	r3, [pc, #252]	; (800c9dc <USBD_SetConfig+0x144>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c8e6:	4b3d      	ldr	r3, [pc, #244]	; (800c9dc <USBD_SetConfig+0x144>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f7ff f97d 	bl	800bbec <USBD_SetClassConfig>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c8f6:	7bfb      	ldrb	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d004      	beq.n	800c906 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f944 	bl	800cb8c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c904:	e065      	b.n	800c9d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f000 fa0b 	bl	800cd22 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2203      	movs	r2, #3
 800c910:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c914:	e05d      	b.n	800c9d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c916:	6878      	ldr	r0, [r7, #4]
 800c918:	f000 fa03 	bl	800cd22 <USBD_CtlSendStatus>
    break;
 800c91c:	e059      	b.n	800c9d2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c91e:	4b2f      	ldr	r3, [pc, #188]	; (800c9dc <USBD_SetConfig+0x144>)
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d112      	bne.n	800c94c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2202      	movs	r2, #2
 800c92a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c92e:	4b2b      	ldr	r3, [pc, #172]	; (800c9dc <USBD_SetConfig+0x144>)
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	461a      	mov	r2, r3
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c938:	4b28      	ldr	r3, [pc, #160]	; (800c9dc <USBD_SetConfig+0x144>)
 800c93a:	781b      	ldrb	r3, [r3, #0]
 800c93c:	4619      	mov	r1, r3
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f7ff f970 	bl	800bc24 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f000 f9ec 	bl	800cd22 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c94a:	e042      	b.n	800c9d2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c94c:	4b23      	ldr	r3, [pc, #140]	; (800c9dc <USBD_SetConfig+0x144>)
 800c94e:	781b      	ldrb	r3, [r3, #0]
 800c950:	461a      	mov	r2, r3
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d02a      	beq.n	800c9b0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	685b      	ldr	r3, [r3, #4]
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	4619      	mov	r1, r3
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f7ff f95e 	bl	800bc24 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c968:	4b1c      	ldr	r3, [pc, #112]	; (800c9dc <USBD_SetConfig+0x144>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	461a      	mov	r2, r3
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c972:	4b1a      	ldr	r3, [pc, #104]	; (800c9dc <USBD_SetConfig+0x144>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	4619      	mov	r1, r3
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f7ff f937 	bl	800bbec <USBD_SetClassConfig>
 800c97e:	4603      	mov	r3, r0
 800c980:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d00f      	beq.n	800c9a8 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c988:	6839      	ldr	r1, [r7, #0]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f8fe 	bl	800cb8c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	685b      	ldr	r3, [r3, #4]
 800c994:	b2db      	uxtb	r3, r3
 800c996:	4619      	mov	r1, r3
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff f943 	bl	800bc24 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2202      	movs	r2, #2
 800c9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c9a6:	e014      	b.n	800c9d2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f9ba 	bl	800cd22 <USBD_CtlSendStatus>
    break;
 800c9ae:	e010      	b.n	800c9d2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f000 f9b6 	bl	800cd22 <USBD_CtlSendStatus>
    break;
 800c9b6:	e00c      	b.n	800c9d2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c9b8:	6839      	ldr	r1, [r7, #0]
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f8e6 	bl	800cb8c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9c0:	4b06      	ldr	r3, [pc, #24]	; (800c9dc <USBD_SetConfig+0x144>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f7ff f92c 	bl	800bc24 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c9d0:	bf00      	nop
  }

  return ret;
 800c9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	3710      	adds	r7, #16
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	200003a5 	.word	0x200003a5

0800c9e0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	88db      	ldrh	r3, [r3, #6]
 800c9ee:	2b01      	cmp	r3, #1
 800c9f0:	d004      	beq.n	800c9fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f8c9 	bl	800cb8c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c9fa:	e021      	b.n	800ca40 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	db17      	blt.n	800ca36 <USBD_GetConfig+0x56>
 800ca06:	2b02      	cmp	r3, #2
 800ca08:	dd02      	ble.n	800ca10 <USBD_GetConfig+0x30>
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d00b      	beq.n	800ca26 <USBD_GetConfig+0x46>
 800ca0e:	e012      	b.n	800ca36 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	3308      	adds	r3, #8
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4619      	mov	r1, r3
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 f925 	bl	800cc6e <USBD_CtlSendData>
      break;
 800ca24:	e00c      	b.n	800ca40 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	3304      	adds	r3, #4
 800ca2a:	2201      	movs	r2, #1
 800ca2c:	4619      	mov	r1, r3
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f000 f91d 	bl	800cc6e <USBD_CtlSendData>
      break;
 800ca34:	e004      	b.n	800ca40 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ca36:	6839      	ldr	r1, [r7, #0]
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f000 f8a7 	bl	800cb8c <USBD_CtlError>
      break;
 800ca3e:	bf00      	nop
}
 800ca40:	bf00      	nop
 800ca42:	3708      	adds	r7, #8
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca58:	3b01      	subs	r3, #1
 800ca5a:	2b02      	cmp	r3, #2
 800ca5c:	d81e      	bhi.n	800ca9c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	88db      	ldrh	r3, [r3, #6]
 800ca62:	2b02      	cmp	r3, #2
 800ca64:	d004      	beq.n	800ca70 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800ca66:	6839      	ldr	r1, [r7, #0]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f88f 	bl	800cb8c <USBD_CtlError>
      break;
 800ca6e:	e01a      	b.n	800caa6 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	2201      	movs	r2, #1
 800ca74:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d005      	beq.n	800ca8c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	f043 0202 	orr.w	r2, r3, #2
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	330c      	adds	r3, #12
 800ca90:	2202      	movs	r2, #2
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f8ea 	bl	800cc6e <USBD_CtlSendData>
    break;
 800ca9a:	e004      	b.n	800caa6 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ca9c:	6839      	ldr	r1, [r7, #0]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 f874 	bl	800cb8c <USBD_CtlError>
    break;
 800caa4:	bf00      	nop
  }
}
 800caa6:	bf00      	nop
 800caa8:	3708      	adds	r7, #8
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b082      	sub	sp, #8
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	885b      	ldrh	r3, [r3, #2]
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d106      	bne.n	800cace <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f000 f92a 	bl	800cd22 <USBD_CtlSendStatus>
  }
}
 800cace:	bf00      	nop
 800cad0:	3708      	adds	r7, #8
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b082      	sub	sp, #8
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cae6:	3b01      	subs	r3, #1
 800cae8:	2b02      	cmp	r3, #2
 800caea:	d80b      	bhi.n	800cb04 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	885b      	ldrh	r3, [r3, #2]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d10c      	bne.n	800cb0e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cafc:	6878      	ldr	r0, [r7, #4]
 800cafe:	f000 f910 	bl	800cd22 <USBD_CtlSendStatus>
      }
      break;
 800cb02:	e004      	b.n	800cb0e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cb04:	6839      	ldr	r1, [r7, #0]
 800cb06:	6878      	ldr	r0, [r7, #4]
 800cb08:	f000 f840 	bl	800cb8c <USBD_CtlError>
      break;
 800cb0c:	e000      	b.n	800cb10 <USBD_ClrFeature+0x3a>
      break;
 800cb0e:	bf00      	nop
  }
}
 800cb10:	bf00      	nop
 800cb12:	3708      	adds	r7, #8
 800cb14:	46bd      	mov	sp, r7
 800cb16:	bd80      	pop	{r7, pc}

0800cb18 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b084      	sub	sp, #16
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
 800cb20:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	781a      	ldrb	r2, [r3, #0]
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3301      	adds	r3, #1
 800cb32:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	781a      	ldrb	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff faa9 	bl	800c09a <SWAPBYTE>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3301      	adds	r3, #1
 800cb54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	3301      	adds	r3, #1
 800cb5a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f7ff fa9c 	bl	800c09a <SWAPBYTE>
 800cb62:	4603      	mov	r3, r0
 800cb64:	461a      	mov	r2, r3
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3301      	adds	r3, #1
 800cb74:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cb76:	68f8      	ldr	r0, [r7, #12]
 800cb78:	f7ff fa8f 	bl	800c09a <SWAPBYTE>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	461a      	mov	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	80da      	strh	r2, [r3, #6]
}
 800cb84:	bf00      	nop
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb96:	2180      	movs	r1, #128	; 0x80
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f000 fd61 	bl	800d660 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cb9e:	2100      	movs	r1, #0
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f000 fd5d 	bl	800d660 <USBD_LL_StallEP>
}
 800cba6:	bf00      	nop
 800cba8:	3708      	adds	r7, #8
 800cbaa:	46bd      	mov	sp, r7
 800cbac:	bd80      	pop	{r7, pc}

0800cbae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cbae:	b580      	push	{r7, lr}
 800cbb0:	b086      	sub	sp, #24
 800cbb2:	af00      	add	r7, sp, #0
 800cbb4:	60f8      	str	r0, [r7, #12]
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cbba:	2300      	movs	r3, #0
 800cbbc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d036      	beq.n	800cc32 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cbc8:	6938      	ldr	r0, [r7, #16]
 800cbca:	f000 f836 	bl	800cc3a <USBD_GetLen>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	b29b      	uxth	r3, r3
 800cbd4:	005b      	lsls	r3, r3, #1
 800cbd6:	b29a      	uxth	r2, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cbdc:	7dfb      	ldrb	r3, [r7, #23]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	687a      	ldr	r2, [r7, #4]
 800cbe4:	7812      	ldrb	r2, [r2, #0]
 800cbe6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbe8:	7dfb      	ldrb	r3, [r7, #23]
 800cbea:	3301      	adds	r3, #1
 800cbec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cbee:	7dfb      	ldrb	r3, [r7, #23]
 800cbf0:	68ba      	ldr	r2, [r7, #8]
 800cbf2:	4413      	add	r3, r2
 800cbf4:	2203      	movs	r2, #3
 800cbf6:	701a      	strb	r2, [r3, #0]
  idx++;
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800cbfe:	e013      	b.n	800cc28 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800cc00:	7dfb      	ldrb	r3, [r7, #23]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	4413      	add	r3, r2
 800cc06:	693a      	ldr	r2, [r7, #16]
 800cc08:	7812      	ldrb	r2, [r2, #0]
 800cc0a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	613b      	str	r3, [r7, #16]
    idx++;
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
 800cc14:	3301      	adds	r3, #1
 800cc16:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
 800cc1a:	68ba      	ldr	r2, [r7, #8]
 800cc1c:	4413      	add	r3, r2
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
    idx++;
 800cc22:	7dfb      	ldrb	r3, [r7, #23]
 800cc24:	3301      	adds	r3, #1
 800cc26:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e7      	bne.n	800cc00 <USBD_GetString+0x52>
 800cc30:	e000      	b.n	800cc34 <USBD_GetString+0x86>
    return;
 800cc32:	bf00      	nop
  }
}
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cc3a:	b480      	push	{r7}
 800cc3c:	b085      	sub	sp, #20
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cc4a:	e005      	b.n	800cc58 <USBD_GetLen+0x1e>
  {
    len++;
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cc52:	68bb      	ldr	r3, [r7, #8]
 800cc54:	3301      	adds	r3, #1
 800cc56:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cc58:	68bb      	ldr	r3, [r7, #8]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d1f5      	bne.n	800cc4c <USBD_GetLen+0x12>
  }

  return len;
 800cc60:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3714      	adds	r7, #20
 800cc66:	46bd      	mov	sp, r7
 800cc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6c:	4770      	bx	lr

0800cc6e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	60f8      	str	r0, [r7, #12]
 800cc76:	60b9      	str	r1, [r7, #8]
 800cc78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2202      	movs	r2, #2
 800cc7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	68ba      	ldr	r2, [r7, #8]
 800cc92:	2100      	movs	r1, #0
 800cc94:	68f8      	ldr	r0, [r7, #12]
 800cc96:	f000 fd6c 	bl	800d772 <USBD_LL_Transmit>

  return USBD_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3710      	adds	r7, #16
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f000 fd5b 	bl	800d772 <USBD_LL_Transmit>

  return USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	60f8      	str	r0, [r7, #12]
 800ccce:	60b9      	str	r1, [r7, #8]
 800ccd0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2203      	movs	r2, #3
 800ccd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	687a      	ldr	r2, [r7, #4]
 800cce6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68ba      	ldr	r2, [r7, #8]
 800ccee:	2100      	movs	r1, #0
 800ccf0:	68f8      	ldr	r0, [r7, #12]
 800ccf2:	f000 fd5f 	bl	800d7b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccf6:	2300      	movs	r3, #0
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3710      	adds	r7, #16
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	bd80      	pop	{r7, pc}

0800cd00 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cd00:	b580      	push	{r7, lr}
 800cd02:	b084      	sub	sp, #16
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68ba      	ldr	r2, [r7, #8]
 800cd10:	2100      	movs	r1, #0
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 fd4e 	bl	800d7b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3710      	adds	r7, #16
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2204      	movs	r2, #4
 800cd2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cd32:	2300      	movs	r3, #0
 800cd34:	2200      	movs	r2, #0
 800cd36:	2100      	movs	r1, #0
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fd1a 	bl	800d772 <USBD_LL_Transmit>

  return USBD_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3708      	adds	r7, #8
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	2205      	movs	r2, #5
 800cd54:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd58:	2300      	movs	r3, #0
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	2100      	movs	r1, #0
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fd28 	bl	800d7b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd64:	2300      	movs	r3, #0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}
	...

0800cd70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b087      	sub	sp, #28
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	60f8      	str	r0, [r7, #12]
 800cd78:	60b9      	str	r1, [r7, #8]
 800cd7a:	4613      	mov	r3, r2
 800cd7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800cd7e:	2301      	movs	r3, #1
 800cd80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800cd82:	2300      	movs	r3, #0
 800cd84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800cd86:	4b1f      	ldr	r3, [pc, #124]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cd88:	7a5b      	ldrb	r3, [r3, #9]
 800cd8a:	b2db      	uxtb	r3, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d131      	bne.n	800cdf4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800cd90:	4b1c      	ldr	r3, [pc, #112]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cd92:	7a5b      	ldrb	r3, [r3, #9]
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	461a      	mov	r2, r3
 800cd98:	4b1a      	ldr	r3, [pc, #104]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cd9a:	2100      	movs	r1, #0
 800cd9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800cd9e:	4b19      	ldr	r3, [pc, #100]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cda0:	7a5b      	ldrb	r3, [r3, #9]
 800cda2:	b2db      	uxtb	r3, r3
 800cda4:	4a17      	ldr	r2, [pc, #92]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cda6:	009b      	lsls	r3, r3, #2
 800cda8:	4413      	add	r3, r2
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800cdae:	4b15      	ldr	r3, [pc, #84]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cdb0:	7a5b      	ldrb	r3, [r3, #9]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	4b13      	ldr	r3, [pc, #76]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cdb8:	4413      	add	r3, r2
 800cdba:	79fa      	ldrb	r2, [r7, #7]
 800cdbc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800cdbe:	4b11      	ldr	r3, [pc, #68]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cdc0:	7a5b      	ldrb	r3, [r3, #9]
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	1c5a      	adds	r2, r3, #1
 800cdc6:	b2d1      	uxtb	r1, r2
 800cdc8:	4a0e      	ldr	r2, [pc, #56]	; (800ce04 <FATFS_LinkDriverEx+0x94>)
 800cdca:	7251      	strb	r1, [r2, #9]
 800cdcc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800cdce:	7dbb      	ldrb	r3, [r7, #22]
 800cdd0:	3330      	adds	r3, #48	; 0x30
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	3301      	adds	r3, #1
 800cddc:	223a      	movs	r2, #58	; 0x3a
 800cdde:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	3302      	adds	r3, #2
 800cde4:	222f      	movs	r2, #47	; 0x2f
 800cde6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800cde8:	68bb      	ldr	r3, [r7, #8]
 800cdea:	3303      	adds	r3, #3
 800cdec:	2200      	movs	r2, #0
 800cdee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800cdf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	371c      	adds	r7, #28
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	200003a8 	.word	0x200003a8

0800ce08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
 800ce10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ce12:	2200      	movs	r2, #0
 800ce14:	6839      	ldr	r1, [r7, #0]
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	f7ff ffaa 	bl	800cd70 <FATFS_LinkDriverEx>
 800ce1c:	4603      	mov	r3, r0
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3708      	adds	r7, #8
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
	...

0800ce28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	4912      	ldr	r1, [pc, #72]	; (800ce78 <MX_USB_DEVICE_Init+0x50>)
 800ce30:	4812      	ldr	r0, [pc, #72]	; (800ce7c <MX_USB_DEVICE_Init+0x54>)
 800ce32:	f7fe fe6d 	bl	800bb10 <USBD_Init>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d001      	beq.n	800ce40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce3c:	f7f6 fa9e 	bl	800337c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce40:	490f      	ldr	r1, [pc, #60]	; (800ce80 <MX_USB_DEVICE_Init+0x58>)
 800ce42:	480e      	ldr	r0, [pc, #56]	; (800ce7c <MX_USB_DEVICE_Init+0x54>)
 800ce44:	f7fe fe9a 	bl	800bb7c <USBD_RegisterClass>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d001      	beq.n	800ce52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce4e:	f7f6 fa95 	bl	800337c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce52:	490c      	ldr	r1, [pc, #48]	; (800ce84 <MX_USB_DEVICE_Init+0x5c>)
 800ce54:	4809      	ldr	r0, [pc, #36]	; (800ce7c <MX_USB_DEVICE_Init+0x54>)
 800ce56:	f7fe fdbf 	bl	800b9d8 <USBD_CDC_RegisterInterface>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d001      	beq.n	800ce64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce60:	f7f6 fa8c 	bl	800337c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce64:	4805      	ldr	r0, [pc, #20]	; (800ce7c <MX_USB_DEVICE_Init+0x54>)
 800ce66:	f7fe feaa 	bl	800bbbe <USBD_Start>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d001      	beq.n	800ce74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce70:	f7f6 fa84 	bl	800337c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce74:	bf00      	nop
 800ce76:	bd80      	pop	{r7, pc}
 800ce78:	20000150 	.word	0x20000150
 800ce7c:	20000a54 	.word	0x20000a54
 800ce80:	20000030 	.word	0x20000030
 800ce84:	2000013c 	.word	0x2000013c

0800ce88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	4905      	ldr	r1, [pc, #20]	; (800cea4 <CDC_Init_FS+0x1c>)
 800ce90:	4805      	ldr	r0, [pc, #20]	; (800cea8 <CDC_Init_FS+0x20>)
 800ce92:	f7fe fdb6 	bl	800ba02 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce96:	4905      	ldr	r1, [pc, #20]	; (800ceac <CDC_Init_FS+0x24>)
 800ce98:	4803      	ldr	r0, [pc, #12]	; (800cea8 <CDC_Init_FS+0x20>)
 800ce9a:	f7fe fdcb 	bl	800ba34 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cea0:	4618      	mov	r0, r3
 800cea2:	bd80      	pop	{r7, pc}
 800cea4:	20001524 	.word	0x20001524
 800cea8:	20000a54 	.word	0x20000a54
 800ceac:	20000d24 	.word	0x20000d24

0800ceb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ceb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	4603      	mov	r3, r0
 800cec8:	6039      	str	r1, [r7, #0]
 800ceca:	71fb      	strb	r3, [r7, #7]
 800cecc:	4613      	mov	r3, r2
 800cece:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ced0:	79fb      	ldrb	r3, [r7, #7]
 800ced2:	2b23      	cmp	r3, #35	; 0x23
 800ced4:	d85c      	bhi.n	800cf90 <CDC_Control_FS+0xd0>
 800ced6:	a201      	add	r2, pc, #4	; (adr r2, 800cedc <CDC_Control_FS+0x1c>)
 800ced8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cedc:	0800cf91 	.word	0x0800cf91
 800cee0:	0800cf91 	.word	0x0800cf91
 800cee4:	0800cf91 	.word	0x0800cf91
 800cee8:	0800cf91 	.word	0x0800cf91
 800ceec:	0800cf91 	.word	0x0800cf91
 800cef0:	0800cf91 	.word	0x0800cf91
 800cef4:	0800cf91 	.word	0x0800cf91
 800cef8:	0800cf91 	.word	0x0800cf91
 800cefc:	0800cf91 	.word	0x0800cf91
 800cf00:	0800cf91 	.word	0x0800cf91
 800cf04:	0800cf91 	.word	0x0800cf91
 800cf08:	0800cf91 	.word	0x0800cf91
 800cf0c:	0800cf91 	.word	0x0800cf91
 800cf10:	0800cf91 	.word	0x0800cf91
 800cf14:	0800cf91 	.word	0x0800cf91
 800cf18:	0800cf91 	.word	0x0800cf91
 800cf1c:	0800cf91 	.word	0x0800cf91
 800cf20:	0800cf91 	.word	0x0800cf91
 800cf24:	0800cf91 	.word	0x0800cf91
 800cf28:	0800cf91 	.word	0x0800cf91
 800cf2c:	0800cf91 	.word	0x0800cf91
 800cf30:	0800cf91 	.word	0x0800cf91
 800cf34:	0800cf91 	.word	0x0800cf91
 800cf38:	0800cf91 	.word	0x0800cf91
 800cf3c:	0800cf91 	.word	0x0800cf91
 800cf40:	0800cf91 	.word	0x0800cf91
 800cf44:	0800cf91 	.word	0x0800cf91
 800cf48:	0800cf91 	.word	0x0800cf91
 800cf4c:	0800cf91 	.word	0x0800cf91
 800cf50:	0800cf91 	.word	0x0800cf91
 800cf54:	0800cf91 	.word	0x0800cf91
 800cf58:	0800cf91 	.word	0x0800cf91
 800cf5c:	0800cf6d 	.word	0x0800cf6d
 800cf60:	0800cf7f 	.word	0x0800cf7f
 800cf64:	0800cf91 	.word	0x0800cf91
 800cf68:	0800cf91 	.word	0x0800cf91
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800cf6c:	4b0c      	ldr	r3, [pc, #48]	; (800cfa0 <CDC_Control_FS+0xe0>)
 800cf6e:	683a      	ldr	r2, [r7, #0]
 800cf70:	6810      	ldr	r0, [r2, #0]
 800cf72:	6018      	str	r0, [r3, #0]
 800cf74:	8891      	ldrh	r1, [r2, #4]
 800cf76:	7992      	ldrb	r2, [r2, #6]
 800cf78:	8099      	strh	r1, [r3, #4]
 800cf7a:	719a      	strb	r2, [r3, #6]
    break;
 800cf7c:	e009      	b.n	800cf92 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	4a07      	ldr	r2, [pc, #28]	; (800cfa0 <CDC_Control_FS+0xe0>)
 800cf82:	6810      	ldr	r0, [r2, #0]
 800cf84:	6018      	str	r0, [r3, #0]
 800cf86:	8891      	ldrh	r1, [r2, #4]
 800cf88:	7992      	ldrb	r2, [r2, #6]
 800cf8a:	8099      	strh	r1, [r3, #4]
 800cf8c:	719a      	strb	r2, [r3, #6]
    break;
 800cf8e:	e000      	b.n	800cf92 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf90:	bf00      	nop
  }

  return (USBD_OK);
 800cf92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	370c      	adds	r7, #12
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9e:	4770      	bx	lr
 800cfa0:	20000134 	.word	0x20000134

0800cfa4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b082      	sub	sp, #8
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cfae:	6879      	ldr	r1, [r7, #4]
 800cfb0:	4805      	ldr	r0, [pc, #20]	; (800cfc8 <CDC_Receive_FS+0x24>)
 800cfb2:	f7fe fd3f 	bl	800ba34 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cfb6:	4804      	ldr	r0, [pc, #16]	; (800cfc8 <CDC_Receive_FS+0x24>)
 800cfb8:	f7fe fd80 	bl	800babc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cfbc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cfbe:	4618      	mov	r0, r3
 800cfc0:	3708      	adds	r7, #8
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	20000a54 	.word	0x20000a54

0800cfcc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b084      	sub	sp, #16
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cfd8:	2300      	movs	r3, #0
 800cfda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <CDC_Transmit_FS+0x48>)
 800cfde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfe2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d001      	beq.n	800cff2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cfee:	2301      	movs	r3, #1
 800cff0:	e00b      	b.n	800d00a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cff2:	887b      	ldrh	r3, [r7, #2]
 800cff4:	461a      	mov	r2, r3
 800cff6:	6879      	ldr	r1, [r7, #4]
 800cff8:	4806      	ldr	r0, [pc, #24]	; (800d014 <CDC_Transmit_FS+0x48>)
 800cffa:	f7fe fd02 	bl	800ba02 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cffe:	4805      	ldr	r0, [pc, #20]	; (800d014 <CDC_Transmit_FS+0x48>)
 800d000:	f7fe fd2c 	bl	800ba5c <USBD_CDC_TransmitPacket>
 800d004:	4603      	mov	r3, r0
 800d006:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d008:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
 800d012:	bf00      	nop
 800d014:	20000a54 	.word	0x20000a54

0800d018 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d018:	b480      	push	{r7}
 800d01a:	b087      	sub	sp, #28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	60f8      	str	r0, [r7, #12]
 800d020:	60b9      	str	r1, [r7, #8]
 800d022:	4613      	mov	r3, r2
 800d024:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d02a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d02e:	4618      	mov	r0, r3
 800d030:	371c      	adds	r7, #28
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
	...

0800d03c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	4603      	mov	r3, r0
 800d044:	6039      	str	r1, [r7, #0]
 800d046:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	2212      	movs	r2, #18
 800d04c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d04e:	4b03      	ldr	r3, [pc, #12]	; (800d05c <USBD_FS_DeviceDescriptor+0x20>)
}
 800d050:	4618      	mov	r0, r3
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr
 800d05c:	20000170 	.word	0x20000170

0800d060 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d060:	b480      	push	{r7}
 800d062:	b083      	sub	sp, #12
 800d064:	af00      	add	r7, sp, #0
 800d066:	4603      	mov	r3, r0
 800d068:	6039      	str	r1, [r7, #0]
 800d06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d06c:	683b      	ldr	r3, [r7, #0]
 800d06e:	2204      	movs	r2, #4
 800d070:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d072:	4b03      	ldr	r3, [pc, #12]	; (800d080 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d074:	4618      	mov	r0, r3
 800d076:	370c      	adds	r7, #12
 800d078:	46bd      	mov	sp, r7
 800d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d07e:	4770      	bx	lr
 800d080:	20000190 	.word	0x20000190

0800d084 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	6039      	str	r1, [r7, #0]
 800d08e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d105      	bne.n	800d0a2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d096:	683a      	ldr	r2, [r7, #0]
 800d098:	4907      	ldr	r1, [pc, #28]	; (800d0b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d09a:	4808      	ldr	r0, [pc, #32]	; (800d0bc <USBD_FS_ProductStrDescriptor+0x38>)
 800d09c:	f7ff fd87 	bl	800cbae <USBD_GetString>
 800d0a0:	e004      	b.n	800d0ac <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0a2:	683a      	ldr	r2, [r7, #0]
 800d0a4:	4904      	ldr	r1, [pc, #16]	; (800d0b8 <USBD_FS_ProductStrDescriptor+0x34>)
 800d0a6:	4805      	ldr	r0, [pc, #20]	; (800d0bc <USBD_FS_ProductStrDescriptor+0x38>)
 800d0a8:	f7ff fd81 	bl	800cbae <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0ac:	4b02      	ldr	r3, [pc, #8]	; (800d0b8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d0ae:	4618      	mov	r0, r3
 800d0b0:	3708      	adds	r7, #8
 800d0b2:	46bd      	mov	sp, r7
 800d0b4:	bd80      	pop	{r7, pc}
 800d0b6:	bf00      	nop
 800d0b8:	20001d24 	.word	0x20001d24
 800d0bc:	080125d0 	.word	0x080125d0

0800d0c0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	6039      	str	r1, [r7, #0]
 800d0ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d0cc:	683a      	ldr	r2, [r7, #0]
 800d0ce:	4904      	ldr	r1, [pc, #16]	; (800d0e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d0d0:	4804      	ldr	r0, [pc, #16]	; (800d0e4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d0d2:	f7ff fd6c 	bl	800cbae <USBD_GetString>
  return USBD_StrDesc;
 800d0d6:	4b02      	ldr	r3, [pc, #8]	; (800d0e0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3708      	adds	r7, #8
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	20001d24 	.word	0x20001d24
 800d0e4:	080125e8 	.word	0x080125e8

0800d0e8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b082      	sub	sp, #8
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	6039      	str	r1, [r7, #0]
 800d0f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	221a      	movs	r2, #26
 800d0f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d0fa:	f000 f855 	bl	800d1a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d0fe:	4b02      	ldr	r3, [pc, #8]	; (800d108 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d100:	4618      	mov	r0, r3
 800d102:	3708      	adds	r7, #8
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	20000194 	.word	0x20000194

0800d10c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	6039      	str	r1, [r7, #0]
 800d116:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d118:	79fb      	ldrb	r3, [r7, #7]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d105      	bne.n	800d12a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d11e:	683a      	ldr	r2, [r7, #0]
 800d120:	4907      	ldr	r1, [pc, #28]	; (800d140 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d122:	4808      	ldr	r0, [pc, #32]	; (800d144 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d124:	f7ff fd43 	bl	800cbae <USBD_GetString>
 800d128:	e004      	b.n	800d134 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d12a:	683a      	ldr	r2, [r7, #0]
 800d12c:	4904      	ldr	r1, [pc, #16]	; (800d140 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d12e:	4805      	ldr	r0, [pc, #20]	; (800d144 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d130:	f7ff fd3d 	bl	800cbae <USBD_GetString>
  }
  return USBD_StrDesc;
 800d134:	4b02      	ldr	r3, [pc, #8]	; (800d140 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d136:	4618      	mov	r0, r3
 800d138:	3708      	adds	r7, #8
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop
 800d140:	20001d24 	.word	0x20001d24
 800d144:	080125fc 	.word	0x080125fc

0800d148 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b082      	sub	sp, #8
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	4603      	mov	r3, r0
 800d150:	6039      	str	r1, [r7, #0]
 800d152:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d154:	79fb      	ldrb	r3, [r7, #7]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d105      	bne.n	800d166 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d15a:	683a      	ldr	r2, [r7, #0]
 800d15c:	4907      	ldr	r1, [pc, #28]	; (800d17c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d15e:	4808      	ldr	r0, [pc, #32]	; (800d180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d160:	f7ff fd25 	bl	800cbae <USBD_GetString>
 800d164:	e004      	b.n	800d170 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d166:	683a      	ldr	r2, [r7, #0]
 800d168:	4904      	ldr	r1, [pc, #16]	; (800d17c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d16a:	4805      	ldr	r0, [pc, #20]	; (800d180 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d16c:	f7ff fd1f 	bl	800cbae <USBD_GetString>
  }
  return USBD_StrDesc;
 800d170:	4b02      	ldr	r3, [pc, #8]	; (800d17c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bd80      	pop	{r7, pc}
 800d17a:	bf00      	nop
 800d17c:	20001d24 	.word	0x20001d24
 800d180:	08012608 	.word	0x08012608

0800d184 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	4603      	mov	r3, r0
 800d18c:	6039      	str	r1, [r7, #0]
 800d18e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	220c      	movs	r2, #12
 800d194:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d196:	4b03      	ldr	r3, [pc, #12]	; (800d1a4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d198:	4618      	mov	r0, r3
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	20000184 	.word	0x20000184

0800d1a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b084      	sub	sp, #16
 800d1ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d1ae:	4b0f      	ldr	r3, [pc, #60]	; (800d1ec <Get_SerialNum+0x44>)
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1b4:	4b0e      	ldr	r3, [pc, #56]	; (800d1f0 <Get_SerialNum+0x48>)
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d1ba:	4b0e      	ldr	r3, [pc, #56]	; (800d1f4 <Get_SerialNum+0x4c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d009      	beq.n	800d1e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d1ce:	2208      	movs	r2, #8
 800d1d0:	4909      	ldr	r1, [pc, #36]	; (800d1f8 <Get_SerialNum+0x50>)
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f000 f814 	bl	800d200 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d1d8:	2204      	movs	r2, #4
 800d1da:	4908      	ldr	r1, [pc, #32]	; (800d1fc <Get_SerialNum+0x54>)
 800d1dc:	68b8      	ldr	r0, [r7, #8]
 800d1de:	f000 f80f 	bl	800d200 <IntToUnicode>
  }
}
 800d1e2:	bf00      	nop
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
 800d1ea:	bf00      	nop
 800d1ec:	1fff7a10 	.word	0x1fff7a10
 800d1f0:	1fff7a14 	.word	0x1fff7a14
 800d1f4:	1fff7a18 	.word	0x1fff7a18
 800d1f8:	20000196 	.word	0x20000196
 800d1fc:	200001a6 	.word	0x200001a6

0800d200 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d200:	b480      	push	{r7}
 800d202:	b087      	sub	sp, #28
 800d204:	af00      	add	r7, sp, #0
 800d206:	60f8      	str	r0, [r7, #12]
 800d208:	60b9      	str	r1, [r7, #8]
 800d20a:	4613      	mov	r3, r2
 800d20c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d20e:	2300      	movs	r3, #0
 800d210:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d212:	2300      	movs	r3, #0
 800d214:	75fb      	strb	r3, [r7, #23]
 800d216:	e027      	b.n	800d268 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	0f1b      	lsrs	r3, r3, #28
 800d21c:	2b09      	cmp	r3, #9
 800d21e:	d80b      	bhi.n	800d238 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	0f1b      	lsrs	r3, r3, #28
 800d224:	b2da      	uxtb	r2, r3
 800d226:	7dfb      	ldrb	r3, [r7, #23]
 800d228:	005b      	lsls	r3, r3, #1
 800d22a:	4619      	mov	r1, r3
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	440b      	add	r3, r1
 800d230:	3230      	adds	r2, #48	; 0x30
 800d232:	b2d2      	uxtb	r2, r2
 800d234:	701a      	strb	r2, [r3, #0]
 800d236:	e00a      	b.n	800d24e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	0f1b      	lsrs	r3, r3, #28
 800d23c:	b2da      	uxtb	r2, r3
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
 800d240:	005b      	lsls	r3, r3, #1
 800d242:	4619      	mov	r1, r3
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	440b      	add	r3, r1
 800d248:	3237      	adds	r2, #55	; 0x37
 800d24a:	b2d2      	uxtb	r2, r2
 800d24c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	011b      	lsls	r3, r3, #4
 800d252:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d254:	7dfb      	ldrb	r3, [r7, #23]
 800d256:	005b      	lsls	r3, r3, #1
 800d258:	3301      	adds	r3, #1
 800d25a:	68ba      	ldr	r2, [r7, #8]
 800d25c:	4413      	add	r3, r2
 800d25e:	2200      	movs	r2, #0
 800d260:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d262:	7dfb      	ldrb	r3, [r7, #23]
 800d264:	3301      	adds	r3, #1
 800d266:	75fb      	strb	r3, [r7, #23]
 800d268:	7dfa      	ldrb	r2, [r7, #23]
 800d26a:	79fb      	ldrb	r3, [r7, #7]
 800d26c:	429a      	cmp	r2, r3
 800d26e:	d3d3      	bcc.n	800d218 <IntToUnicode+0x18>
  }
}
 800d270:	bf00      	nop
 800d272:	371c      	adds	r7, #28
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b08a      	sub	sp, #40	; 0x28
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d284:	f107 0314 	add.w	r3, r7, #20
 800d288:	2200      	movs	r2, #0
 800d28a:	601a      	str	r2, [r3, #0]
 800d28c:	605a      	str	r2, [r3, #4]
 800d28e:	609a      	str	r2, [r3, #8]
 800d290:	60da      	str	r2, [r3, #12]
 800d292:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d29c:	d13a      	bne.n	800d314 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d29e:	2300      	movs	r3, #0
 800d2a0:	613b      	str	r3, [r7, #16]
 800d2a2:	4b1e      	ldr	r3, [pc, #120]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a6:	4a1d      	ldr	r2, [pc, #116]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2a8:	f043 0301 	orr.w	r3, r3, #1
 800d2ac:	6313      	str	r3, [r2, #48]	; 0x30
 800d2ae:	4b1b      	ldr	r3, [pc, #108]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b2:	f003 0301 	and.w	r3, r3, #1
 800d2b6:	613b      	str	r3, [r7, #16]
 800d2b8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d2ba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d2be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2c0:	2302      	movs	r3, #2
 800d2c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2c8:	2303      	movs	r3, #3
 800d2ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d2cc:	230a      	movs	r3, #10
 800d2ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2d0:	f107 0314 	add.w	r3, r7, #20
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	4812      	ldr	r0, [pc, #72]	; (800d320 <HAL_PCD_MspInit+0xa4>)
 800d2d8:	f7f7 f9f0 	bl	80046bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d2dc:	4b0f      	ldr	r3, [pc, #60]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e0:	4a0e      	ldr	r2, [pc, #56]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2e6:	6353      	str	r3, [r2, #52]	; 0x34
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	4b0b      	ldr	r3, [pc, #44]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2f0:	4a0a      	ldr	r2, [pc, #40]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2f6:	6453      	str	r3, [r2, #68]	; 0x44
 800d2f8:	4b08      	ldr	r3, [pc, #32]	; (800d31c <HAL_PCD_MspInit+0xa0>)
 800d2fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d300:	60fb      	str	r3, [r7, #12]
 800d302:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d304:	2200      	movs	r2, #0
 800d306:	2100      	movs	r1, #0
 800d308:	2043      	movs	r0, #67	; 0x43
 800d30a:	f7f7 f9a0 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d30e:	2043      	movs	r0, #67	; 0x43
 800d310:	f7f7 f9b9 	bl	8004686 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d314:	bf00      	nop
 800d316:	3728      	adds	r7, #40	; 0x28
 800d318:	46bd      	mov	sp, r7
 800d31a:	bd80      	pop	{r7, pc}
 800d31c:	40023800 	.word	0x40023800
 800d320:	40020000 	.word	0x40020000

0800d324 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d338:	4619      	mov	r1, r3
 800d33a:	4610      	mov	r0, r2
 800d33c:	f7fe fc8a 	bl	800bc54 <USBD_LL_SetupStage>
}
 800d340:	bf00      	nop
 800d342:	3708      	adds	r7, #8
 800d344:	46bd      	mov	sp, r7
 800d346:	bd80      	pop	{r7, pc}

0800d348 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b082      	sub	sp, #8
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	460b      	mov	r3, r1
 800d352:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d35a:	78fa      	ldrb	r2, [r7, #3]
 800d35c:	6879      	ldr	r1, [r7, #4]
 800d35e:	4613      	mov	r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	009b      	lsls	r3, r3, #2
 800d366:	440b      	add	r3, r1
 800d368:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	78fb      	ldrb	r3, [r7, #3]
 800d370:	4619      	mov	r1, r3
 800d372:	f7fe fcc2 	bl	800bcfa <USBD_LL_DataOutStage>
}
 800d376:	bf00      	nop
 800d378:	3708      	adds	r7, #8
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}

0800d37e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d37e:	b580      	push	{r7, lr}
 800d380:	b082      	sub	sp, #8
 800d382:	af00      	add	r7, sp, #0
 800d384:	6078      	str	r0, [r7, #4]
 800d386:	460b      	mov	r3, r1
 800d388:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d390:	78fa      	ldrb	r2, [r7, #3]
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	4613      	mov	r3, r2
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	1a9b      	subs	r3, r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	3348      	adds	r3, #72	; 0x48
 800d3a0:	681a      	ldr	r2, [r3, #0]
 800d3a2:	78fb      	ldrb	r3, [r7, #3]
 800d3a4:	4619      	mov	r1, r3
 800d3a6:	f7fe fd0b 	bl	800bdc0 <USBD_LL_DataInStage>
}
 800d3aa:	bf00      	nop
 800d3ac:	3708      	adds	r7, #8
 800d3ae:	46bd      	mov	sp, r7
 800d3b0:	bd80      	pop	{r7, pc}

0800d3b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3b2:	b580      	push	{r7, lr}
 800d3b4:	b082      	sub	sp, #8
 800d3b6:	af00      	add	r7, sp, #0
 800d3b8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f7fe fe0f 	bl	800bfe4 <USBD_LL_SOF>
}
 800d3c6:	bf00      	nop
 800d3c8:	3708      	adds	r7, #8
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}

0800d3ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3ce:	b580      	push	{r7, lr}
 800d3d0:	b084      	sub	sp, #16
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d102      	bne.n	800d3e8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	73fb      	strb	r3, [r7, #15]
 800d3e6:	e008      	b.n	800d3fa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	2b02      	cmp	r3, #2
 800d3ee:	d102      	bne.n	800d3f6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	73fb      	strb	r3, [r7, #15]
 800d3f4:	e001      	b.n	800d3fa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d3f6:	f7f5 ffc1 	bl	800337c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d400:	7bfa      	ldrb	r2, [r7, #15]
 800d402:	4611      	mov	r1, r2
 800d404:	4618      	mov	r0, r3
 800d406:	f7fe fdb2 	bl	800bf6e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d410:	4618      	mov	r0, r3
 800d412:	f7fe fd6b 	bl	800beec <USBD_LL_Reset>
}
 800d416:	bf00      	nop
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
	...

0800d420 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b082      	sub	sp, #8
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fe fdad 	bl	800bf8e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	6812      	ldr	r2, [r2, #0]
 800d442:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d446:	f043 0301 	orr.w	r3, r3, #1
 800d44a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6a1b      	ldr	r3, [r3, #32]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d005      	beq.n	800d460 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d454:	4b04      	ldr	r3, [pc, #16]	; (800d468 <HAL_PCD_SuspendCallback+0x48>)
 800d456:	691b      	ldr	r3, [r3, #16]
 800d458:	4a03      	ldr	r2, [pc, #12]	; (800d468 <HAL_PCD_SuspendCallback+0x48>)
 800d45a:	f043 0306 	orr.w	r3, r3, #6
 800d45e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d460:	bf00      	nop
 800d462:	3708      	adds	r7, #8
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}
 800d468:	e000ed00 	.word	0xe000ed00

0800d46c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d47a:	4618      	mov	r0, r3
 800d47c:	f7fe fd9c 	bl	800bfb8 <USBD_LL_Resume>
}
 800d480:	bf00      	nop
 800d482:	3708      	adds	r7, #8
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d49a:	78fa      	ldrb	r2, [r7, #3]
 800d49c:	4611      	mov	r1, r2
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7fe fdc7 	bl	800c032 <USBD_LL_IsoOUTIncomplete>
}
 800d4a4:	bf00      	nop
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b082      	sub	sp, #8
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d4be:	78fa      	ldrb	r2, [r7, #3]
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f7fe fda8 	bl	800c018 <USBD_LL_IsoINIncomplete>
}
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b082      	sub	sp, #8
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f7fe fdb4 	bl	800c04c <USBD_LL_DevConnected>
}
 800d4e4:	bf00      	nop
 800d4e6:	3708      	adds	r7, #8
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b082      	sub	sp, #8
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7fe fdb1 	bl	800c062 <USBD_LL_DevDisconnected>
}
 800d500:	bf00      	nop
 800d502:	3708      	adds	r7, #8
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b082      	sub	sp, #8
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	781b      	ldrb	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d13c      	bne.n	800d592 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d518:	4a20      	ldr	r2, [pc, #128]	; (800d59c <USBD_LL_Init+0x94>)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a1e      	ldr	r2, [pc, #120]	; (800d59c <USBD_LL_Init+0x94>)
 800d524:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d528:	4b1c      	ldr	r3, [pc, #112]	; (800d59c <USBD_LL_Init+0x94>)
 800d52a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d52e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800d530:	4b1a      	ldr	r3, [pc, #104]	; (800d59c <USBD_LL_Init+0x94>)
 800d532:	2206      	movs	r2, #6
 800d534:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d536:	4b19      	ldr	r3, [pc, #100]	; (800d59c <USBD_LL_Init+0x94>)
 800d538:	2202      	movs	r2, #2
 800d53a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d53c:	4b17      	ldr	r3, [pc, #92]	; (800d59c <USBD_LL_Init+0x94>)
 800d53e:	2200      	movs	r2, #0
 800d540:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d542:	4b16      	ldr	r3, [pc, #88]	; (800d59c <USBD_LL_Init+0x94>)
 800d544:	2202      	movs	r2, #2
 800d546:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d548:	4b14      	ldr	r3, [pc, #80]	; (800d59c <USBD_LL_Init+0x94>)
 800d54a:	2200      	movs	r2, #0
 800d54c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d54e:	4b13      	ldr	r3, [pc, #76]	; (800d59c <USBD_LL_Init+0x94>)
 800d550:	2200      	movs	r2, #0
 800d552:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d554:	4b11      	ldr	r3, [pc, #68]	; (800d59c <USBD_LL_Init+0x94>)
 800d556:	2200      	movs	r2, #0
 800d558:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d55a:	4b10      	ldr	r3, [pc, #64]	; (800d59c <USBD_LL_Init+0x94>)
 800d55c:	2200      	movs	r2, #0
 800d55e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d560:	4b0e      	ldr	r3, [pc, #56]	; (800d59c <USBD_LL_Init+0x94>)
 800d562:	2200      	movs	r2, #0
 800d564:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d566:	480d      	ldr	r0, [pc, #52]	; (800d59c <USBD_LL_Init+0x94>)
 800d568:	f7f8 fa1f 	bl	80059aa <HAL_PCD_Init>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d001      	beq.n	800d576 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d572:	f7f5 ff03 	bl	800337c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d576:	2180      	movs	r1, #128	; 0x80
 800d578:	4808      	ldr	r0, [pc, #32]	; (800d59c <USBD_LL_Init+0x94>)
 800d57a:	f7f9 fbb0 	bl	8006cde <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d57e:	2240      	movs	r2, #64	; 0x40
 800d580:	2100      	movs	r1, #0
 800d582:	4806      	ldr	r0, [pc, #24]	; (800d59c <USBD_LL_Init+0x94>)
 800d584:	f7f9 fb64 	bl	8006c50 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d588:	2280      	movs	r2, #128	; 0x80
 800d58a:	2101      	movs	r1, #1
 800d58c:	4803      	ldr	r0, [pc, #12]	; (800d59c <USBD_LL_Init+0x94>)
 800d58e:	f7f9 fb5f 	bl	8006c50 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3708      	adds	r7, #8
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}
 800d59c:	20001f24 	.word	0x20001f24

0800d5a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b084      	sub	sp, #16
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7f8 fb1b 	bl	8005bf2 <HAL_PCD_Start>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f000 f978 	bl	800d8b8 <USBD_Get_USB_Status>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}

0800d5d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d5d6:	b580      	push	{r7, lr}
 800d5d8:	b084      	sub	sp, #16
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
 800d5de:	4608      	mov	r0, r1
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	461a      	mov	r2, r3
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	70fb      	strb	r3, [r7, #3]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70bb      	strb	r3, [r7, #2]
 800d5ec:	4613      	mov	r3, r2
 800d5ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d5fe:	78bb      	ldrb	r3, [r7, #2]
 800d600:	883a      	ldrh	r2, [r7, #0]
 800d602:	78f9      	ldrb	r1, [r7, #3]
 800d604:	f7f8 ff2c 	bl	8006460 <HAL_PCD_EP_Open>
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	4618      	mov	r0, r3
 800d610:	f000 f952 	bl	800d8b8 <USBD_Get_USB_Status>
 800d614:	4603      	mov	r3, r0
 800d616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d618:	7bbb      	ldrb	r3, [r7, #14]
}
 800d61a:	4618      	mov	r0, r3
 800d61c:	3710      	adds	r7, #16
 800d61e:	46bd      	mov	sp, r7
 800d620:	bd80      	pop	{r7, pc}

0800d622 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	460b      	mov	r3, r1
 800d62c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d62e:	2300      	movs	r3, #0
 800d630:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d632:	2300      	movs	r3, #0
 800d634:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d63c:	78fa      	ldrb	r2, [r7, #3]
 800d63e:	4611      	mov	r1, r2
 800d640:	4618      	mov	r0, r3
 800d642:	f7f8 ff75 	bl	8006530 <HAL_PCD_EP_Close>
 800d646:	4603      	mov	r3, r0
 800d648:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d64a:	7bfb      	ldrb	r3, [r7, #15]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 f933 	bl	800d8b8 <USBD_Get_USB_Status>
 800d652:	4603      	mov	r3, r0
 800d654:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d656:	7bbb      	ldrb	r3, [r7, #14]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	460b      	mov	r3, r1
 800d66a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d670:	2300      	movs	r3, #0
 800d672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d67a:	78fa      	ldrb	r2, [r7, #3]
 800d67c:	4611      	mov	r1, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f7f9 f84d 	bl	800671e <HAL_PCD_EP_SetStall>
 800d684:	4603      	mov	r3, r0
 800d686:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	4618      	mov	r0, r3
 800d68c:	f000 f914 	bl	800d8b8 <USBD_Get_USB_Status>
 800d690:	4603      	mov	r3, r0
 800d692:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d694:	7bbb      	ldrb	r3, [r7, #14]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	6078      	str	r0, [r7, #4]
 800d6a6:	460b      	mov	r3, r1
 800d6a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d6b8:	78fa      	ldrb	r2, [r7, #3]
 800d6ba:	4611      	mov	r1, r2
 800d6bc:	4618      	mov	r0, r3
 800d6be:	f7f9 f892 	bl	80067e6 <HAL_PCD_EP_ClrStall>
 800d6c2:	4603      	mov	r3, r0
 800d6c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6c6:	7bfb      	ldrb	r3, [r7, #15]
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f000 f8f5 	bl	800d8b8 <USBD_Get_USB_Status>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3710      	adds	r7, #16
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b085      	sub	sp, #20
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d6ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da0b      	bge.n	800d710 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6f8:	78fb      	ldrb	r3, [r7, #3]
 800d6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6fe:	68f9      	ldr	r1, [r7, #12]
 800d700:	4613      	mov	r3, r2
 800d702:	00db      	lsls	r3, r3, #3
 800d704:	1a9b      	subs	r3, r3, r2
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	440b      	add	r3, r1
 800d70a:	333e      	adds	r3, #62	; 0x3e
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	e00b      	b.n	800d728 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d716:	68f9      	ldr	r1, [r7, #12]
 800d718:	4613      	mov	r3, r2
 800d71a:	00db      	lsls	r3, r3, #3
 800d71c:	1a9b      	subs	r3, r3, r2
 800d71e:	009b      	lsls	r3, r3, #2
 800d720:	440b      	add	r3, r1
 800d722:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d726:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3714      	adds	r7, #20
 800d72c:	46bd      	mov	sp, r7
 800d72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d732:	4770      	bx	lr

0800d734 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b084      	sub	sp, #16
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	460b      	mov	r3, r1
 800d73e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d744:	2300      	movs	r3, #0
 800d746:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d74e:	78fa      	ldrb	r2, [r7, #3]
 800d750:	4611      	mov	r1, r2
 800d752:	4618      	mov	r0, r3
 800d754:	f7f8 fe5f 	bl	8006416 <HAL_PCD_SetAddress>
 800d758:	4603      	mov	r3, r0
 800d75a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d75c:	7bfb      	ldrb	r3, [r7, #15]
 800d75e:	4618      	mov	r0, r3
 800d760:	f000 f8aa 	bl	800d8b8 <USBD_Get_USB_Status>
 800d764:	4603      	mov	r3, r0
 800d766:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d768:	7bbb      	ldrb	r3, [r7, #14]
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	3710      	adds	r7, #16
 800d76e:	46bd      	mov	sp, r7
 800d770:	bd80      	pop	{r7, pc}

0800d772 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d772:	b580      	push	{r7, lr}
 800d774:	b086      	sub	sp, #24
 800d776:	af00      	add	r7, sp, #0
 800d778:	60f8      	str	r0, [r7, #12]
 800d77a:	607a      	str	r2, [r7, #4]
 800d77c:	603b      	str	r3, [r7, #0]
 800d77e:	460b      	mov	r3, r1
 800d780:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d782:	2300      	movs	r3, #0
 800d784:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d786:	2300      	movs	r3, #0
 800d788:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d790:	7af9      	ldrb	r1, [r7, #11]
 800d792:	683b      	ldr	r3, [r7, #0]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	f7f8 ff78 	bl	800668a <HAL_PCD_EP_Transmit>
 800d79a:	4603      	mov	r3, r0
 800d79c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	f000 f889 	bl	800d8b8 <USBD_Get_USB_Status>
 800d7a6:	4603      	mov	r3, r0
 800d7a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7aa:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3718      	adds	r7, #24
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b086      	sub	sp, #24
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	60f8      	str	r0, [r7, #12]
 800d7bc:	607a      	str	r2, [r7, #4]
 800d7be:	603b      	str	r3, [r7, #0]
 800d7c0:	460b      	mov	r3, r1
 800d7c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800d7d2:	7af9      	ldrb	r1, [r7, #11]
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	f7f8 fef4 	bl	80065c4 <HAL_PCD_EP_Receive>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7e0:	7dfb      	ldrb	r3, [r7, #23]
 800d7e2:	4618      	mov	r0, r3
 800d7e4:	f000 f868 	bl	800d8b8 <USBD_Get_USB_Status>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7ec:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	3718      	adds	r7, #24
 800d7f2:	46bd      	mov	sp, r7
 800d7f4:	bd80      	pop	{r7, pc}

0800d7f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7f6:	b580      	push	{r7, lr}
 800d7f8:	b082      	sub	sp, #8
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	6078      	str	r0, [r7, #4]
 800d7fe:	460b      	mov	r3, r1
 800d800:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d808:	78fa      	ldrb	r2, [r7, #3]
 800d80a:	4611      	mov	r1, r2
 800d80c:	4618      	mov	r0, r3
 800d80e:	f7f8 ff24 	bl	800665a <HAL_PCD_EP_GetRxCount>
 800d812:	4603      	mov	r3, r0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3708      	adds	r7, #8
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	460b      	mov	r3, r1
 800d826:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800d828:	78fb      	ldrb	r3, [r7, #3]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d002      	beq.n	800d834 <HAL_PCDEx_LPM_Callback+0x18>
 800d82e:	2b01      	cmp	r3, #1
 800d830:	d01f      	beq.n	800d872 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800d832:	e03b      	b.n	800d8ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	6a1b      	ldr	r3, [r3, #32]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d007      	beq.n	800d84c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800d83c:	f7f5 f974 	bl	8002b28 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d840:	4b1c      	ldr	r3, [pc, #112]	; (800d8b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	4a1b      	ldr	r2, [pc, #108]	; (800d8b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d846:	f023 0306 	bic.w	r3, r3, #6
 800d84a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	687a      	ldr	r2, [r7, #4]
 800d858:	6812      	ldr	r2, [r2, #0]
 800d85a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d85e:	f023 0301 	bic.w	r3, r3, #1
 800d862:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d86a:	4618      	mov	r0, r3
 800d86c:	f7fe fba4 	bl	800bfb8 <USBD_LL_Resume>
    break;
 800d870:	e01c      	b.n	800d8ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	6812      	ldr	r2, [r2, #0]
 800d880:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d884:	f043 0301 	orr.w	r3, r3, #1
 800d888:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d890:	4618      	mov	r0, r3
 800d892:	f7fe fb7c 	bl	800bf8e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a1b      	ldr	r3, [r3, #32]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d005      	beq.n	800d8aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d89e:	4b05      	ldr	r3, [pc, #20]	; (800d8b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d8a0:	691b      	ldr	r3, [r3, #16]
 800d8a2:	4a04      	ldr	r2, [pc, #16]	; (800d8b4 <HAL_PCDEx_LPM_Callback+0x98>)
 800d8a4:	f043 0306 	orr.w	r3, r3, #6
 800d8a8:	6113      	str	r3, [r2, #16]
    break;
 800d8aa:	bf00      	nop
}
 800d8ac:	bf00      	nop
 800d8ae:	3708      	adds	r7, #8
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	e000ed00 	.word	0xe000ed00

0800d8b8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d8b8:	b480      	push	{r7}
 800d8ba:	b085      	sub	sp, #20
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	4603      	mov	r3, r0
 800d8c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d8c6:	79fb      	ldrb	r3, [r7, #7]
 800d8c8:	2b03      	cmp	r3, #3
 800d8ca:	d817      	bhi.n	800d8fc <USBD_Get_USB_Status+0x44>
 800d8cc:	a201      	add	r2, pc, #4	; (adr r2, 800d8d4 <USBD_Get_USB_Status+0x1c>)
 800d8ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8d2:	bf00      	nop
 800d8d4:	0800d8e5 	.word	0x0800d8e5
 800d8d8:	0800d8eb 	.word	0x0800d8eb
 800d8dc:	0800d8f1 	.word	0x0800d8f1
 800d8e0:	0800d8f7 	.word	0x0800d8f7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d8e8:	e00b      	b.n	800d902 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d8ea:	2303      	movs	r3, #3
 800d8ec:	73fb      	strb	r3, [r7, #15]
    break;
 800d8ee:	e008      	b.n	800d902 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8f4:	e005      	b.n	800d902 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	73fb      	strb	r3, [r7, #15]
    break;
 800d8fa:	e002      	b.n	800d902 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	73fb      	strb	r3, [r7, #15]
    break;
 800d900:	bf00      	nop
  }
  return usb_status;
 800d902:	7bfb      	ldrb	r3, [r7, #15]
}
 800d904:	4618      	mov	r0, r3
 800d906:	3714      	adds	r7, #20
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <__assert_func>:
 800d910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d912:	461c      	mov	r4, r3
 800d914:	4b09      	ldr	r3, [pc, #36]	; (800d93c <__assert_func+0x2c>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	4605      	mov	r5, r0
 800d91a:	68d8      	ldr	r0, [r3, #12]
 800d91c:	b152      	cbz	r2, 800d934 <__assert_func+0x24>
 800d91e:	4b08      	ldr	r3, [pc, #32]	; (800d940 <__assert_func+0x30>)
 800d920:	9100      	str	r1, [sp, #0]
 800d922:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800d926:	4907      	ldr	r1, [pc, #28]	; (800d944 <__assert_func+0x34>)
 800d928:	462b      	mov	r3, r5
 800d92a:	4622      	mov	r2, r4
 800d92c:	f000 f814 	bl	800d958 <fiprintf>
 800d930:	f001 f806 	bl	800e940 <abort>
 800d934:	4b04      	ldr	r3, [pc, #16]	; (800d948 <__assert_func+0x38>)
 800d936:	461a      	mov	r2, r3
 800d938:	e7f2      	b.n	800d920 <__assert_func+0x10>
 800d93a:	bf00      	nop
 800d93c:	200001b0 	.word	0x200001b0
 800d940:	080126b0 	.word	0x080126b0
 800d944:	080126bd 	.word	0x080126bd
 800d948:	080126eb 	.word	0x080126eb

0800d94c <__errno>:
 800d94c:	4b01      	ldr	r3, [pc, #4]	; (800d954 <__errno+0x8>)
 800d94e:	6818      	ldr	r0, [r3, #0]
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	200001b0 	.word	0x200001b0

0800d958 <fiprintf>:
 800d958:	b40e      	push	{r1, r2, r3}
 800d95a:	b503      	push	{r0, r1, lr}
 800d95c:	4601      	mov	r1, r0
 800d95e:	ab03      	add	r3, sp, #12
 800d960:	4805      	ldr	r0, [pc, #20]	; (800d978 <fiprintf+0x20>)
 800d962:	f853 2b04 	ldr.w	r2, [r3], #4
 800d966:	6800      	ldr	r0, [r0, #0]
 800d968:	9301      	str	r3, [sp, #4]
 800d96a:	f000 f921 	bl	800dbb0 <_vfiprintf_r>
 800d96e:	b002      	add	sp, #8
 800d970:	f85d eb04 	ldr.w	lr, [sp], #4
 800d974:	b003      	add	sp, #12
 800d976:	4770      	bx	lr
 800d978:	200001b0 	.word	0x200001b0

0800d97c <__libc_init_array>:
 800d97c:	b570      	push	{r4, r5, r6, lr}
 800d97e:	4e0d      	ldr	r6, [pc, #52]	; (800d9b4 <__libc_init_array+0x38>)
 800d980:	4c0d      	ldr	r4, [pc, #52]	; (800d9b8 <__libc_init_array+0x3c>)
 800d982:	1ba4      	subs	r4, r4, r6
 800d984:	10a4      	asrs	r4, r4, #2
 800d986:	2500      	movs	r5, #0
 800d988:	42a5      	cmp	r5, r4
 800d98a:	d109      	bne.n	800d9a0 <__libc_init_array+0x24>
 800d98c:	4e0b      	ldr	r6, [pc, #44]	; (800d9bc <__libc_init_array+0x40>)
 800d98e:	4c0c      	ldr	r4, [pc, #48]	; (800d9c0 <__libc_init_array+0x44>)
 800d990:	f004 fb98 	bl	80120c4 <_init>
 800d994:	1ba4      	subs	r4, r4, r6
 800d996:	10a4      	asrs	r4, r4, #2
 800d998:	2500      	movs	r5, #0
 800d99a:	42a5      	cmp	r5, r4
 800d99c:	d105      	bne.n	800d9aa <__libc_init_array+0x2e>
 800d99e:	bd70      	pop	{r4, r5, r6, pc}
 800d9a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d9a4:	4798      	blx	r3
 800d9a6:	3501      	adds	r5, #1
 800d9a8:	e7ee      	b.n	800d988 <__libc_init_array+0xc>
 800d9aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d9ae:	4798      	blx	r3
 800d9b0:	3501      	adds	r5, #1
 800d9b2:	e7f2      	b.n	800d99a <__libc_init_array+0x1e>
 800d9b4:	08012be0 	.word	0x08012be0
 800d9b8:	08012be0 	.word	0x08012be0
 800d9bc:	08012be0 	.word	0x08012be0
 800d9c0:	08012be4 	.word	0x08012be4

0800d9c4 <malloc>:
 800d9c4:	4b02      	ldr	r3, [pc, #8]	; (800d9d0 <malloc+0xc>)
 800d9c6:	4601      	mov	r1, r0
 800d9c8:	6818      	ldr	r0, [r3, #0]
 800d9ca:	f000 b86d 	b.w	800daa8 <_malloc_r>
 800d9ce:	bf00      	nop
 800d9d0:	200001b0 	.word	0x200001b0

0800d9d4 <free>:
 800d9d4:	4b02      	ldr	r3, [pc, #8]	; (800d9e0 <free+0xc>)
 800d9d6:	4601      	mov	r1, r0
 800d9d8:	6818      	ldr	r0, [r3, #0]
 800d9da:	f000 b817 	b.w	800da0c <_free_r>
 800d9de:	bf00      	nop
 800d9e0:	200001b0 	.word	0x200001b0

0800d9e4 <memcpy>:
 800d9e4:	b510      	push	{r4, lr}
 800d9e6:	1e43      	subs	r3, r0, #1
 800d9e8:	440a      	add	r2, r1
 800d9ea:	4291      	cmp	r1, r2
 800d9ec:	d100      	bne.n	800d9f0 <memcpy+0xc>
 800d9ee:	bd10      	pop	{r4, pc}
 800d9f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9f8:	e7f7      	b.n	800d9ea <memcpy+0x6>

0800d9fa <memset>:
 800d9fa:	4402      	add	r2, r0
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d100      	bne.n	800da04 <memset+0xa>
 800da02:	4770      	bx	lr
 800da04:	f803 1b01 	strb.w	r1, [r3], #1
 800da08:	e7f9      	b.n	800d9fe <memset+0x4>
	...

0800da0c <_free_r>:
 800da0c:	b538      	push	{r3, r4, r5, lr}
 800da0e:	4605      	mov	r5, r0
 800da10:	2900      	cmp	r1, #0
 800da12:	d045      	beq.n	800daa0 <_free_r+0x94>
 800da14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da18:	1f0c      	subs	r4, r1, #4
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	bfb8      	it	lt
 800da1e:	18e4      	addlt	r4, r4, r3
 800da20:	f002 f801 	bl	800fa26 <__malloc_lock>
 800da24:	4a1f      	ldr	r2, [pc, #124]	; (800daa4 <_free_r+0x98>)
 800da26:	6813      	ldr	r3, [r2, #0]
 800da28:	4610      	mov	r0, r2
 800da2a:	b933      	cbnz	r3, 800da3a <_free_r+0x2e>
 800da2c:	6063      	str	r3, [r4, #4]
 800da2e:	6014      	str	r4, [r2, #0]
 800da30:	4628      	mov	r0, r5
 800da32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da36:	f001 bff7 	b.w	800fa28 <__malloc_unlock>
 800da3a:	42a3      	cmp	r3, r4
 800da3c:	d90c      	bls.n	800da58 <_free_r+0x4c>
 800da3e:	6821      	ldr	r1, [r4, #0]
 800da40:	1862      	adds	r2, r4, r1
 800da42:	4293      	cmp	r3, r2
 800da44:	bf04      	itt	eq
 800da46:	681a      	ldreq	r2, [r3, #0]
 800da48:	685b      	ldreq	r3, [r3, #4]
 800da4a:	6063      	str	r3, [r4, #4]
 800da4c:	bf04      	itt	eq
 800da4e:	1852      	addeq	r2, r2, r1
 800da50:	6022      	streq	r2, [r4, #0]
 800da52:	6004      	str	r4, [r0, #0]
 800da54:	e7ec      	b.n	800da30 <_free_r+0x24>
 800da56:	4613      	mov	r3, r2
 800da58:	685a      	ldr	r2, [r3, #4]
 800da5a:	b10a      	cbz	r2, 800da60 <_free_r+0x54>
 800da5c:	42a2      	cmp	r2, r4
 800da5e:	d9fa      	bls.n	800da56 <_free_r+0x4a>
 800da60:	6819      	ldr	r1, [r3, #0]
 800da62:	1858      	adds	r0, r3, r1
 800da64:	42a0      	cmp	r0, r4
 800da66:	d10b      	bne.n	800da80 <_free_r+0x74>
 800da68:	6820      	ldr	r0, [r4, #0]
 800da6a:	4401      	add	r1, r0
 800da6c:	1858      	adds	r0, r3, r1
 800da6e:	4282      	cmp	r2, r0
 800da70:	6019      	str	r1, [r3, #0]
 800da72:	d1dd      	bne.n	800da30 <_free_r+0x24>
 800da74:	6810      	ldr	r0, [r2, #0]
 800da76:	6852      	ldr	r2, [r2, #4]
 800da78:	605a      	str	r2, [r3, #4]
 800da7a:	4401      	add	r1, r0
 800da7c:	6019      	str	r1, [r3, #0]
 800da7e:	e7d7      	b.n	800da30 <_free_r+0x24>
 800da80:	d902      	bls.n	800da88 <_free_r+0x7c>
 800da82:	230c      	movs	r3, #12
 800da84:	602b      	str	r3, [r5, #0]
 800da86:	e7d3      	b.n	800da30 <_free_r+0x24>
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	1821      	adds	r1, r4, r0
 800da8c:	428a      	cmp	r2, r1
 800da8e:	bf04      	itt	eq
 800da90:	6811      	ldreq	r1, [r2, #0]
 800da92:	6852      	ldreq	r2, [r2, #4]
 800da94:	6062      	str	r2, [r4, #4]
 800da96:	bf04      	itt	eq
 800da98:	1809      	addeq	r1, r1, r0
 800da9a:	6021      	streq	r1, [r4, #0]
 800da9c:	605c      	str	r4, [r3, #4]
 800da9e:	e7c7      	b.n	800da30 <_free_r+0x24>
 800daa0:	bd38      	pop	{r3, r4, r5, pc}
 800daa2:	bf00      	nop
 800daa4:	200003b4 	.word	0x200003b4

0800daa8 <_malloc_r>:
 800daa8:	b570      	push	{r4, r5, r6, lr}
 800daaa:	1ccd      	adds	r5, r1, #3
 800daac:	f025 0503 	bic.w	r5, r5, #3
 800dab0:	3508      	adds	r5, #8
 800dab2:	2d0c      	cmp	r5, #12
 800dab4:	bf38      	it	cc
 800dab6:	250c      	movcc	r5, #12
 800dab8:	2d00      	cmp	r5, #0
 800daba:	4606      	mov	r6, r0
 800dabc:	db01      	blt.n	800dac2 <_malloc_r+0x1a>
 800dabe:	42a9      	cmp	r1, r5
 800dac0:	d903      	bls.n	800daca <_malloc_r+0x22>
 800dac2:	230c      	movs	r3, #12
 800dac4:	6033      	str	r3, [r6, #0]
 800dac6:	2000      	movs	r0, #0
 800dac8:	bd70      	pop	{r4, r5, r6, pc}
 800daca:	f001 ffac 	bl	800fa26 <__malloc_lock>
 800dace:	4a21      	ldr	r2, [pc, #132]	; (800db54 <_malloc_r+0xac>)
 800dad0:	6814      	ldr	r4, [r2, #0]
 800dad2:	4621      	mov	r1, r4
 800dad4:	b991      	cbnz	r1, 800dafc <_malloc_r+0x54>
 800dad6:	4c20      	ldr	r4, [pc, #128]	; (800db58 <_malloc_r+0xb0>)
 800dad8:	6823      	ldr	r3, [r4, #0]
 800dada:	b91b      	cbnz	r3, 800dae4 <_malloc_r+0x3c>
 800dadc:	4630      	mov	r0, r6
 800dade:	f000 fde9 	bl	800e6b4 <_sbrk_r>
 800dae2:	6020      	str	r0, [r4, #0]
 800dae4:	4629      	mov	r1, r5
 800dae6:	4630      	mov	r0, r6
 800dae8:	f000 fde4 	bl	800e6b4 <_sbrk_r>
 800daec:	1c43      	adds	r3, r0, #1
 800daee:	d124      	bne.n	800db3a <_malloc_r+0x92>
 800daf0:	230c      	movs	r3, #12
 800daf2:	6033      	str	r3, [r6, #0]
 800daf4:	4630      	mov	r0, r6
 800daf6:	f001 ff97 	bl	800fa28 <__malloc_unlock>
 800dafa:	e7e4      	b.n	800dac6 <_malloc_r+0x1e>
 800dafc:	680b      	ldr	r3, [r1, #0]
 800dafe:	1b5b      	subs	r3, r3, r5
 800db00:	d418      	bmi.n	800db34 <_malloc_r+0x8c>
 800db02:	2b0b      	cmp	r3, #11
 800db04:	d90f      	bls.n	800db26 <_malloc_r+0x7e>
 800db06:	600b      	str	r3, [r1, #0]
 800db08:	50cd      	str	r5, [r1, r3]
 800db0a:	18cc      	adds	r4, r1, r3
 800db0c:	4630      	mov	r0, r6
 800db0e:	f001 ff8b 	bl	800fa28 <__malloc_unlock>
 800db12:	f104 000b 	add.w	r0, r4, #11
 800db16:	1d23      	adds	r3, r4, #4
 800db18:	f020 0007 	bic.w	r0, r0, #7
 800db1c:	1ac3      	subs	r3, r0, r3
 800db1e:	d0d3      	beq.n	800dac8 <_malloc_r+0x20>
 800db20:	425a      	negs	r2, r3
 800db22:	50e2      	str	r2, [r4, r3]
 800db24:	e7d0      	b.n	800dac8 <_malloc_r+0x20>
 800db26:	428c      	cmp	r4, r1
 800db28:	684b      	ldr	r3, [r1, #4]
 800db2a:	bf16      	itet	ne
 800db2c:	6063      	strne	r3, [r4, #4]
 800db2e:	6013      	streq	r3, [r2, #0]
 800db30:	460c      	movne	r4, r1
 800db32:	e7eb      	b.n	800db0c <_malloc_r+0x64>
 800db34:	460c      	mov	r4, r1
 800db36:	6849      	ldr	r1, [r1, #4]
 800db38:	e7cc      	b.n	800dad4 <_malloc_r+0x2c>
 800db3a:	1cc4      	adds	r4, r0, #3
 800db3c:	f024 0403 	bic.w	r4, r4, #3
 800db40:	42a0      	cmp	r0, r4
 800db42:	d005      	beq.n	800db50 <_malloc_r+0xa8>
 800db44:	1a21      	subs	r1, r4, r0
 800db46:	4630      	mov	r0, r6
 800db48:	f000 fdb4 	bl	800e6b4 <_sbrk_r>
 800db4c:	3001      	adds	r0, #1
 800db4e:	d0cf      	beq.n	800daf0 <_malloc_r+0x48>
 800db50:	6025      	str	r5, [r4, #0]
 800db52:	e7db      	b.n	800db0c <_malloc_r+0x64>
 800db54:	200003b4 	.word	0x200003b4
 800db58:	200003b8 	.word	0x200003b8

0800db5c <__sfputc_r>:
 800db5c:	6893      	ldr	r3, [r2, #8]
 800db5e:	3b01      	subs	r3, #1
 800db60:	2b00      	cmp	r3, #0
 800db62:	b410      	push	{r4}
 800db64:	6093      	str	r3, [r2, #8]
 800db66:	da08      	bge.n	800db7a <__sfputc_r+0x1e>
 800db68:	6994      	ldr	r4, [r2, #24]
 800db6a:	42a3      	cmp	r3, r4
 800db6c:	db01      	blt.n	800db72 <__sfputc_r+0x16>
 800db6e:	290a      	cmp	r1, #10
 800db70:	d103      	bne.n	800db7a <__sfputc_r+0x1e>
 800db72:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db76:	f000 be11 	b.w	800e79c <__swbuf_r>
 800db7a:	6813      	ldr	r3, [r2, #0]
 800db7c:	1c58      	adds	r0, r3, #1
 800db7e:	6010      	str	r0, [r2, #0]
 800db80:	7019      	strb	r1, [r3, #0]
 800db82:	4608      	mov	r0, r1
 800db84:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <__sfputs_r>:
 800db8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db8c:	4606      	mov	r6, r0
 800db8e:	460f      	mov	r7, r1
 800db90:	4614      	mov	r4, r2
 800db92:	18d5      	adds	r5, r2, r3
 800db94:	42ac      	cmp	r4, r5
 800db96:	d101      	bne.n	800db9c <__sfputs_r+0x12>
 800db98:	2000      	movs	r0, #0
 800db9a:	e007      	b.n	800dbac <__sfputs_r+0x22>
 800db9c:	463a      	mov	r2, r7
 800db9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba2:	4630      	mov	r0, r6
 800dba4:	f7ff ffda 	bl	800db5c <__sfputc_r>
 800dba8:	1c43      	adds	r3, r0, #1
 800dbaa:	d1f3      	bne.n	800db94 <__sfputs_r+0xa>
 800dbac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dbb0 <_vfiprintf_r>:
 800dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	b09d      	sub	sp, #116	; 0x74
 800dbb8:	4617      	mov	r7, r2
 800dbba:	461d      	mov	r5, r3
 800dbbc:	4606      	mov	r6, r0
 800dbbe:	b118      	cbz	r0, 800dbc8 <_vfiprintf_r+0x18>
 800dbc0:	6983      	ldr	r3, [r0, #24]
 800dbc2:	b90b      	cbnz	r3, 800dbc8 <_vfiprintf_r+0x18>
 800dbc4:	f001 fe08 	bl	800f7d8 <__sinit>
 800dbc8:	4b7c      	ldr	r3, [pc, #496]	; (800ddbc <_vfiprintf_r+0x20c>)
 800dbca:	429c      	cmp	r4, r3
 800dbcc:	d158      	bne.n	800dc80 <_vfiprintf_r+0xd0>
 800dbce:	6874      	ldr	r4, [r6, #4]
 800dbd0:	89a3      	ldrh	r3, [r4, #12]
 800dbd2:	0718      	lsls	r0, r3, #28
 800dbd4:	d55e      	bpl.n	800dc94 <_vfiprintf_r+0xe4>
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d05b      	beq.n	800dc94 <_vfiprintf_r+0xe4>
 800dbdc:	2300      	movs	r3, #0
 800dbde:	9309      	str	r3, [sp, #36]	; 0x24
 800dbe0:	2320      	movs	r3, #32
 800dbe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbe6:	2330      	movs	r3, #48	; 0x30
 800dbe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbec:	9503      	str	r5, [sp, #12]
 800dbee:	f04f 0b01 	mov.w	fp, #1
 800dbf2:	46b8      	mov	r8, r7
 800dbf4:	4645      	mov	r5, r8
 800dbf6:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dbfa:	b10b      	cbz	r3, 800dc00 <_vfiprintf_r+0x50>
 800dbfc:	2b25      	cmp	r3, #37	; 0x25
 800dbfe:	d154      	bne.n	800dcaa <_vfiprintf_r+0xfa>
 800dc00:	ebb8 0a07 	subs.w	sl, r8, r7
 800dc04:	d00b      	beq.n	800dc1e <_vfiprintf_r+0x6e>
 800dc06:	4653      	mov	r3, sl
 800dc08:	463a      	mov	r2, r7
 800dc0a:	4621      	mov	r1, r4
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7ff ffbc 	bl	800db8a <__sfputs_r>
 800dc12:	3001      	adds	r0, #1
 800dc14:	f000 80c2 	beq.w	800dd9c <_vfiprintf_r+0x1ec>
 800dc18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc1a:	4453      	add	r3, sl
 800dc1c:	9309      	str	r3, [sp, #36]	; 0x24
 800dc1e:	f898 3000 	ldrb.w	r3, [r8]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	f000 80ba 	beq.w	800dd9c <_vfiprintf_r+0x1ec>
 800dc28:	2300      	movs	r3, #0
 800dc2a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc32:	9304      	str	r3, [sp, #16]
 800dc34:	9307      	str	r3, [sp, #28]
 800dc36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc3a:	931a      	str	r3, [sp, #104]	; 0x68
 800dc3c:	46a8      	mov	r8, r5
 800dc3e:	2205      	movs	r2, #5
 800dc40:	f818 1b01 	ldrb.w	r1, [r8], #1
 800dc44:	485e      	ldr	r0, [pc, #376]	; (800ddc0 <_vfiprintf_r+0x210>)
 800dc46:	f7f2 faeb 	bl	8000220 <memchr>
 800dc4a:	9b04      	ldr	r3, [sp, #16]
 800dc4c:	bb78      	cbnz	r0, 800dcae <_vfiprintf_r+0xfe>
 800dc4e:	06d9      	lsls	r1, r3, #27
 800dc50:	bf44      	itt	mi
 800dc52:	2220      	movmi	r2, #32
 800dc54:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc58:	071a      	lsls	r2, r3, #28
 800dc5a:	bf44      	itt	mi
 800dc5c:	222b      	movmi	r2, #43	; 0x2b
 800dc5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800dc62:	782a      	ldrb	r2, [r5, #0]
 800dc64:	2a2a      	cmp	r2, #42	; 0x2a
 800dc66:	d02a      	beq.n	800dcbe <_vfiprintf_r+0x10e>
 800dc68:	9a07      	ldr	r2, [sp, #28]
 800dc6a:	46a8      	mov	r8, r5
 800dc6c:	2000      	movs	r0, #0
 800dc6e:	250a      	movs	r5, #10
 800dc70:	4641      	mov	r1, r8
 800dc72:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc76:	3b30      	subs	r3, #48	; 0x30
 800dc78:	2b09      	cmp	r3, #9
 800dc7a:	d969      	bls.n	800dd50 <_vfiprintf_r+0x1a0>
 800dc7c:	b360      	cbz	r0, 800dcd8 <_vfiprintf_r+0x128>
 800dc7e:	e024      	b.n	800dcca <_vfiprintf_r+0x11a>
 800dc80:	4b50      	ldr	r3, [pc, #320]	; (800ddc4 <_vfiprintf_r+0x214>)
 800dc82:	429c      	cmp	r4, r3
 800dc84:	d101      	bne.n	800dc8a <_vfiprintf_r+0xda>
 800dc86:	68b4      	ldr	r4, [r6, #8]
 800dc88:	e7a2      	b.n	800dbd0 <_vfiprintf_r+0x20>
 800dc8a:	4b4f      	ldr	r3, [pc, #316]	; (800ddc8 <_vfiprintf_r+0x218>)
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	bf08      	it	eq
 800dc90:	68f4      	ldreq	r4, [r6, #12]
 800dc92:	e79d      	b.n	800dbd0 <_vfiprintf_r+0x20>
 800dc94:	4621      	mov	r1, r4
 800dc96:	4630      	mov	r0, r6
 800dc98:	f000 fde4 	bl	800e864 <__swsetup_r>
 800dc9c:	2800      	cmp	r0, #0
 800dc9e:	d09d      	beq.n	800dbdc <_vfiprintf_r+0x2c>
 800dca0:	f04f 30ff 	mov.w	r0, #4294967295
 800dca4:	b01d      	add	sp, #116	; 0x74
 800dca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcaa:	46a8      	mov	r8, r5
 800dcac:	e7a2      	b.n	800dbf4 <_vfiprintf_r+0x44>
 800dcae:	4a44      	ldr	r2, [pc, #272]	; (800ddc0 <_vfiprintf_r+0x210>)
 800dcb0:	1a80      	subs	r0, r0, r2
 800dcb2:	fa0b f000 	lsl.w	r0, fp, r0
 800dcb6:	4318      	orrs	r0, r3
 800dcb8:	9004      	str	r0, [sp, #16]
 800dcba:	4645      	mov	r5, r8
 800dcbc:	e7be      	b.n	800dc3c <_vfiprintf_r+0x8c>
 800dcbe:	9a03      	ldr	r2, [sp, #12]
 800dcc0:	1d11      	adds	r1, r2, #4
 800dcc2:	6812      	ldr	r2, [r2, #0]
 800dcc4:	9103      	str	r1, [sp, #12]
 800dcc6:	2a00      	cmp	r2, #0
 800dcc8:	db01      	blt.n	800dcce <_vfiprintf_r+0x11e>
 800dcca:	9207      	str	r2, [sp, #28]
 800dccc:	e004      	b.n	800dcd8 <_vfiprintf_r+0x128>
 800dcce:	4252      	negs	r2, r2
 800dcd0:	f043 0302 	orr.w	r3, r3, #2
 800dcd4:	9207      	str	r2, [sp, #28]
 800dcd6:	9304      	str	r3, [sp, #16]
 800dcd8:	f898 3000 	ldrb.w	r3, [r8]
 800dcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800dcde:	d10e      	bne.n	800dcfe <_vfiprintf_r+0x14e>
 800dce0:	f898 3001 	ldrb.w	r3, [r8, #1]
 800dce4:	2b2a      	cmp	r3, #42	; 0x2a
 800dce6:	d138      	bne.n	800dd5a <_vfiprintf_r+0x1aa>
 800dce8:	9b03      	ldr	r3, [sp, #12]
 800dcea:	1d1a      	adds	r2, r3, #4
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	9203      	str	r2, [sp, #12]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	bfb8      	it	lt
 800dcf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcf8:	f108 0802 	add.w	r8, r8, #2
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	4d33      	ldr	r5, [pc, #204]	; (800ddcc <_vfiprintf_r+0x21c>)
 800dd00:	f898 1000 	ldrb.w	r1, [r8]
 800dd04:	2203      	movs	r2, #3
 800dd06:	4628      	mov	r0, r5
 800dd08:	f7f2 fa8a 	bl	8000220 <memchr>
 800dd0c:	b140      	cbz	r0, 800dd20 <_vfiprintf_r+0x170>
 800dd0e:	2340      	movs	r3, #64	; 0x40
 800dd10:	1b40      	subs	r0, r0, r5
 800dd12:	fa03 f000 	lsl.w	r0, r3, r0
 800dd16:	9b04      	ldr	r3, [sp, #16]
 800dd18:	4303      	orrs	r3, r0
 800dd1a:	f108 0801 	add.w	r8, r8, #1
 800dd1e:	9304      	str	r3, [sp, #16]
 800dd20:	f898 1000 	ldrb.w	r1, [r8]
 800dd24:	482a      	ldr	r0, [pc, #168]	; (800ddd0 <_vfiprintf_r+0x220>)
 800dd26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dd2a:	2206      	movs	r2, #6
 800dd2c:	f108 0701 	add.w	r7, r8, #1
 800dd30:	f7f2 fa76 	bl	8000220 <memchr>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d037      	beq.n	800dda8 <_vfiprintf_r+0x1f8>
 800dd38:	4b26      	ldr	r3, [pc, #152]	; (800ddd4 <_vfiprintf_r+0x224>)
 800dd3a:	bb1b      	cbnz	r3, 800dd84 <_vfiprintf_r+0x1d4>
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	3307      	adds	r3, #7
 800dd40:	f023 0307 	bic.w	r3, r3, #7
 800dd44:	3308      	adds	r3, #8
 800dd46:	9303      	str	r3, [sp, #12]
 800dd48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd4a:	444b      	add	r3, r9
 800dd4c:	9309      	str	r3, [sp, #36]	; 0x24
 800dd4e:	e750      	b.n	800dbf2 <_vfiprintf_r+0x42>
 800dd50:	fb05 3202 	mla	r2, r5, r2, r3
 800dd54:	2001      	movs	r0, #1
 800dd56:	4688      	mov	r8, r1
 800dd58:	e78a      	b.n	800dc70 <_vfiprintf_r+0xc0>
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f108 0801 	add.w	r8, r8, #1
 800dd60:	9305      	str	r3, [sp, #20]
 800dd62:	4619      	mov	r1, r3
 800dd64:	250a      	movs	r5, #10
 800dd66:	4640      	mov	r0, r8
 800dd68:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd6c:	3a30      	subs	r2, #48	; 0x30
 800dd6e:	2a09      	cmp	r2, #9
 800dd70:	d903      	bls.n	800dd7a <_vfiprintf_r+0x1ca>
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d0c3      	beq.n	800dcfe <_vfiprintf_r+0x14e>
 800dd76:	9105      	str	r1, [sp, #20]
 800dd78:	e7c1      	b.n	800dcfe <_vfiprintf_r+0x14e>
 800dd7a:	fb05 2101 	mla	r1, r5, r1, r2
 800dd7e:	2301      	movs	r3, #1
 800dd80:	4680      	mov	r8, r0
 800dd82:	e7f0      	b.n	800dd66 <_vfiprintf_r+0x1b6>
 800dd84:	ab03      	add	r3, sp, #12
 800dd86:	9300      	str	r3, [sp, #0]
 800dd88:	4622      	mov	r2, r4
 800dd8a:	4b13      	ldr	r3, [pc, #76]	; (800ddd8 <_vfiprintf_r+0x228>)
 800dd8c:	a904      	add	r1, sp, #16
 800dd8e:	4630      	mov	r0, r6
 800dd90:	f000 f8b8 	bl	800df04 <_printf_float>
 800dd94:	f1b0 3fff 	cmp.w	r0, #4294967295
 800dd98:	4681      	mov	r9, r0
 800dd9a:	d1d5      	bne.n	800dd48 <_vfiprintf_r+0x198>
 800dd9c:	89a3      	ldrh	r3, [r4, #12]
 800dd9e:	065b      	lsls	r3, r3, #25
 800dda0:	f53f af7e 	bmi.w	800dca0 <_vfiprintf_r+0xf0>
 800dda4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dda6:	e77d      	b.n	800dca4 <_vfiprintf_r+0xf4>
 800dda8:	ab03      	add	r3, sp, #12
 800ddaa:	9300      	str	r3, [sp, #0]
 800ddac:	4622      	mov	r2, r4
 800ddae:	4b0a      	ldr	r3, [pc, #40]	; (800ddd8 <_vfiprintf_r+0x228>)
 800ddb0:	a904      	add	r1, sp, #16
 800ddb2:	4630      	mov	r0, r6
 800ddb4:	f000 fb5c 	bl	800e470 <_printf_i>
 800ddb8:	e7ec      	b.n	800dd94 <_vfiprintf_r+0x1e4>
 800ddba:	bf00      	nop
 800ddbc:	08012764 	.word	0x08012764
 800ddc0:	080126f0 	.word	0x080126f0
 800ddc4:	08012784 	.word	0x08012784
 800ddc8:	08012744 	.word	0x08012744
 800ddcc:	080126f6 	.word	0x080126f6
 800ddd0:	080126fa 	.word	0x080126fa
 800ddd4:	0800df05 	.word	0x0800df05
 800ddd8:	0800db8b 	.word	0x0800db8b

0800dddc <__cvt>:
 800dddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dde0:	ec55 4b10 	vmov	r4, r5, d0
 800dde4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800dde6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ddea:	2d00      	cmp	r5, #0
 800ddec:	460e      	mov	r6, r1
 800ddee:	4691      	mov	r9, r2
 800ddf0:	4619      	mov	r1, r3
 800ddf2:	bfb8      	it	lt
 800ddf4:	4622      	movlt	r2, r4
 800ddf6:	462b      	mov	r3, r5
 800ddf8:	f027 0720 	bic.w	r7, r7, #32
 800ddfc:	bfbb      	ittet	lt
 800ddfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de02:	461d      	movlt	r5, r3
 800de04:	2300      	movge	r3, #0
 800de06:	232d      	movlt	r3, #45	; 0x2d
 800de08:	bfb8      	it	lt
 800de0a:	4614      	movlt	r4, r2
 800de0c:	2f46      	cmp	r7, #70	; 0x46
 800de0e:	700b      	strb	r3, [r1, #0]
 800de10:	d004      	beq.n	800de1c <__cvt+0x40>
 800de12:	2f45      	cmp	r7, #69	; 0x45
 800de14:	d100      	bne.n	800de18 <__cvt+0x3c>
 800de16:	3601      	adds	r6, #1
 800de18:	2102      	movs	r1, #2
 800de1a:	e000      	b.n	800de1e <__cvt+0x42>
 800de1c:	2103      	movs	r1, #3
 800de1e:	ab03      	add	r3, sp, #12
 800de20:	9301      	str	r3, [sp, #4]
 800de22:	ab02      	add	r3, sp, #8
 800de24:	9300      	str	r3, [sp, #0]
 800de26:	4632      	mov	r2, r6
 800de28:	4653      	mov	r3, sl
 800de2a:	ec45 4b10 	vmov	d0, r4, r5
 800de2e:	f000 fe2b 	bl	800ea88 <_dtoa_r>
 800de32:	2f47      	cmp	r7, #71	; 0x47
 800de34:	4680      	mov	r8, r0
 800de36:	d102      	bne.n	800de3e <__cvt+0x62>
 800de38:	f019 0f01 	tst.w	r9, #1
 800de3c:	d026      	beq.n	800de8c <__cvt+0xb0>
 800de3e:	2f46      	cmp	r7, #70	; 0x46
 800de40:	eb08 0906 	add.w	r9, r8, r6
 800de44:	d111      	bne.n	800de6a <__cvt+0x8e>
 800de46:	f898 3000 	ldrb.w	r3, [r8]
 800de4a:	2b30      	cmp	r3, #48	; 0x30
 800de4c:	d10a      	bne.n	800de64 <__cvt+0x88>
 800de4e:	2200      	movs	r2, #0
 800de50:	2300      	movs	r3, #0
 800de52:	4620      	mov	r0, r4
 800de54:	4629      	mov	r1, r5
 800de56:	f7f2 fe57 	bl	8000b08 <__aeabi_dcmpeq>
 800de5a:	b918      	cbnz	r0, 800de64 <__cvt+0x88>
 800de5c:	f1c6 0601 	rsb	r6, r6, #1
 800de60:	f8ca 6000 	str.w	r6, [sl]
 800de64:	f8da 3000 	ldr.w	r3, [sl]
 800de68:	4499      	add	r9, r3
 800de6a:	2200      	movs	r2, #0
 800de6c:	2300      	movs	r3, #0
 800de6e:	4620      	mov	r0, r4
 800de70:	4629      	mov	r1, r5
 800de72:	f7f2 fe49 	bl	8000b08 <__aeabi_dcmpeq>
 800de76:	b938      	cbnz	r0, 800de88 <__cvt+0xac>
 800de78:	2230      	movs	r2, #48	; 0x30
 800de7a:	9b03      	ldr	r3, [sp, #12]
 800de7c:	454b      	cmp	r3, r9
 800de7e:	d205      	bcs.n	800de8c <__cvt+0xb0>
 800de80:	1c59      	adds	r1, r3, #1
 800de82:	9103      	str	r1, [sp, #12]
 800de84:	701a      	strb	r2, [r3, #0]
 800de86:	e7f8      	b.n	800de7a <__cvt+0x9e>
 800de88:	f8cd 900c 	str.w	r9, [sp, #12]
 800de8c:	9b03      	ldr	r3, [sp, #12]
 800de8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de90:	eba3 0308 	sub.w	r3, r3, r8
 800de94:	4640      	mov	r0, r8
 800de96:	6013      	str	r3, [r2, #0]
 800de98:	b004      	add	sp, #16
 800de9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800de9e <__exponent>:
 800de9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dea0:	2900      	cmp	r1, #0
 800dea2:	4604      	mov	r4, r0
 800dea4:	bfba      	itte	lt
 800dea6:	4249      	neglt	r1, r1
 800dea8:	232d      	movlt	r3, #45	; 0x2d
 800deaa:	232b      	movge	r3, #43	; 0x2b
 800deac:	2909      	cmp	r1, #9
 800deae:	f804 2b02 	strb.w	r2, [r4], #2
 800deb2:	7043      	strb	r3, [r0, #1]
 800deb4:	dd20      	ble.n	800def8 <__exponent+0x5a>
 800deb6:	f10d 0307 	add.w	r3, sp, #7
 800deba:	461f      	mov	r7, r3
 800debc:	260a      	movs	r6, #10
 800debe:	fb91 f5f6 	sdiv	r5, r1, r6
 800dec2:	fb06 1115 	mls	r1, r6, r5, r1
 800dec6:	3130      	adds	r1, #48	; 0x30
 800dec8:	2d09      	cmp	r5, #9
 800deca:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dece:	f103 32ff 	add.w	r2, r3, #4294967295
 800ded2:	4629      	mov	r1, r5
 800ded4:	dc09      	bgt.n	800deea <__exponent+0x4c>
 800ded6:	3130      	adds	r1, #48	; 0x30
 800ded8:	3b02      	subs	r3, #2
 800deda:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dede:	42bb      	cmp	r3, r7
 800dee0:	4622      	mov	r2, r4
 800dee2:	d304      	bcc.n	800deee <__exponent+0x50>
 800dee4:	1a10      	subs	r0, r2, r0
 800dee6:	b003      	add	sp, #12
 800dee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deea:	4613      	mov	r3, r2
 800deec:	e7e7      	b.n	800debe <__exponent+0x20>
 800deee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800def2:	f804 2b01 	strb.w	r2, [r4], #1
 800def6:	e7f2      	b.n	800dede <__exponent+0x40>
 800def8:	2330      	movs	r3, #48	; 0x30
 800defa:	4419      	add	r1, r3
 800defc:	7083      	strb	r3, [r0, #2]
 800defe:	1d02      	adds	r2, r0, #4
 800df00:	70c1      	strb	r1, [r0, #3]
 800df02:	e7ef      	b.n	800dee4 <__exponent+0x46>

0800df04 <_printf_float>:
 800df04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df08:	b08d      	sub	sp, #52	; 0x34
 800df0a:	460c      	mov	r4, r1
 800df0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800df10:	4616      	mov	r6, r2
 800df12:	461f      	mov	r7, r3
 800df14:	4605      	mov	r5, r0
 800df16:	f001 fce9 	bl	800f8ec <_localeconv_r>
 800df1a:	6803      	ldr	r3, [r0, #0]
 800df1c:	9304      	str	r3, [sp, #16]
 800df1e:	4618      	mov	r0, r3
 800df20:	f7f2 f976 	bl	8000210 <strlen>
 800df24:	2300      	movs	r3, #0
 800df26:	930a      	str	r3, [sp, #40]	; 0x28
 800df28:	f8d8 3000 	ldr.w	r3, [r8]
 800df2c:	9005      	str	r0, [sp, #20]
 800df2e:	3307      	adds	r3, #7
 800df30:	f023 0307 	bic.w	r3, r3, #7
 800df34:	f103 0208 	add.w	r2, r3, #8
 800df38:	f894 a018 	ldrb.w	sl, [r4, #24]
 800df3c:	f8d4 b000 	ldr.w	fp, [r4]
 800df40:	f8c8 2000 	str.w	r2, [r8]
 800df44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800df4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800df50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800df54:	9307      	str	r3, [sp, #28]
 800df56:	f8cd 8018 	str.w	r8, [sp, #24]
 800df5a:	f04f 32ff 	mov.w	r2, #4294967295
 800df5e:	4ba7      	ldr	r3, [pc, #668]	; (800e1fc <_printf_float+0x2f8>)
 800df60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df64:	f7f2 fe02 	bl	8000b6c <__aeabi_dcmpun>
 800df68:	bb70      	cbnz	r0, 800dfc8 <_printf_float+0xc4>
 800df6a:	f04f 32ff 	mov.w	r2, #4294967295
 800df6e:	4ba3      	ldr	r3, [pc, #652]	; (800e1fc <_printf_float+0x2f8>)
 800df70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800df74:	f7f2 fddc 	bl	8000b30 <__aeabi_dcmple>
 800df78:	bb30      	cbnz	r0, 800dfc8 <_printf_float+0xc4>
 800df7a:	2200      	movs	r2, #0
 800df7c:	2300      	movs	r3, #0
 800df7e:	4640      	mov	r0, r8
 800df80:	4649      	mov	r1, r9
 800df82:	f7f2 fdcb 	bl	8000b1c <__aeabi_dcmplt>
 800df86:	b110      	cbz	r0, 800df8e <_printf_float+0x8a>
 800df88:	232d      	movs	r3, #45	; 0x2d
 800df8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df8e:	4a9c      	ldr	r2, [pc, #624]	; (800e200 <_printf_float+0x2fc>)
 800df90:	4b9c      	ldr	r3, [pc, #624]	; (800e204 <_printf_float+0x300>)
 800df92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800df96:	bf8c      	ite	hi
 800df98:	4690      	movhi	r8, r2
 800df9a:	4698      	movls	r8, r3
 800df9c:	2303      	movs	r3, #3
 800df9e:	f02b 0204 	bic.w	r2, fp, #4
 800dfa2:	6123      	str	r3, [r4, #16]
 800dfa4:	6022      	str	r2, [r4, #0]
 800dfa6:	f04f 0900 	mov.w	r9, #0
 800dfaa:	9700      	str	r7, [sp, #0]
 800dfac:	4633      	mov	r3, r6
 800dfae:	aa0b      	add	r2, sp, #44	; 0x2c
 800dfb0:	4621      	mov	r1, r4
 800dfb2:	4628      	mov	r0, r5
 800dfb4:	f000 f9e6 	bl	800e384 <_printf_common>
 800dfb8:	3001      	adds	r0, #1
 800dfba:	f040 808d 	bne.w	800e0d8 <_printf_float+0x1d4>
 800dfbe:	f04f 30ff 	mov.w	r0, #4294967295
 800dfc2:	b00d      	add	sp, #52	; 0x34
 800dfc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc8:	4642      	mov	r2, r8
 800dfca:	464b      	mov	r3, r9
 800dfcc:	4640      	mov	r0, r8
 800dfce:	4649      	mov	r1, r9
 800dfd0:	f7f2 fdcc 	bl	8000b6c <__aeabi_dcmpun>
 800dfd4:	b110      	cbz	r0, 800dfdc <_printf_float+0xd8>
 800dfd6:	4a8c      	ldr	r2, [pc, #560]	; (800e208 <_printf_float+0x304>)
 800dfd8:	4b8c      	ldr	r3, [pc, #560]	; (800e20c <_printf_float+0x308>)
 800dfda:	e7da      	b.n	800df92 <_printf_float+0x8e>
 800dfdc:	6861      	ldr	r1, [r4, #4]
 800dfde:	1c4b      	adds	r3, r1, #1
 800dfe0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dfe4:	a80a      	add	r0, sp, #40	; 0x28
 800dfe6:	d13e      	bne.n	800e066 <_printf_float+0x162>
 800dfe8:	2306      	movs	r3, #6
 800dfea:	6063      	str	r3, [r4, #4]
 800dfec:	2300      	movs	r3, #0
 800dfee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dff2:	ab09      	add	r3, sp, #36	; 0x24
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	ec49 8b10 	vmov	d0, r8, r9
 800dffa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dffe:	6022      	str	r2, [r4, #0]
 800e000:	f8cd a004 	str.w	sl, [sp, #4]
 800e004:	6861      	ldr	r1, [r4, #4]
 800e006:	4628      	mov	r0, r5
 800e008:	f7ff fee8 	bl	800dddc <__cvt>
 800e00c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e010:	2b47      	cmp	r3, #71	; 0x47
 800e012:	4680      	mov	r8, r0
 800e014:	d109      	bne.n	800e02a <_printf_float+0x126>
 800e016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e018:	1cd8      	adds	r0, r3, #3
 800e01a:	db02      	blt.n	800e022 <_printf_float+0x11e>
 800e01c:	6862      	ldr	r2, [r4, #4]
 800e01e:	4293      	cmp	r3, r2
 800e020:	dd47      	ble.n	800e0b2 <_printf_float+0x1ae>
 800e022:	f1aa 0a02 	sub.w	sl, sl, #2
 800e026:	fa5f fa8a 	uxtb.w	sl, sl
 800e02a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e02e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e030:	d824      	bhi.n	800e07c <_printf_float+0x178>
 800e032:	3901      	subs	r1, #1
 800e034:	4652      	mov	r2, sl
 800e036:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e03a:	9109      	str	r1, [sp, #36]	; 0x24
 800e03c:	f7ff ff2f 	bl	800de9e <__exponent>
 800e040:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e042:	1813      	adds	r3, r2, r0
 800e044:	2a01      	cmp	r2, #1
 800e046:	4681      	mov	r9, r0
 800e048:	6123      	str	r3, [r4, #16]
 800e04a:	dc02      	bgt.n	800e052 <_printf_float+0x14e>
 800e04c:	6822      	ldr	r2, [r4, #0]
 800e04e:	07d1      	lsls	r1, r2, #31
 800e050:	d501      	bpl.n	800e056 <_printf_float+0x152>
 800e052:	3301      	adds	r3, #1
 800e054:	6123      	str	r3, [r4, #16]
 800e056:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0a5      	beq.n	800dfaa <_printf_float+0xa6>
 800e05e:	232d      	movs	r3, #45	; 0x2d
 800e060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e064:	e7a1      	b.n	800dfaa <_printf_float+0xa6>
 800e066:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e06a:	f000 8177 	beq.w	800e35c <_printf_float+0x458>
 800e06e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e072:	d1bb      	bne.n	800dfec <_printf_float+0xe8>
 800e074:	2900      	cmp	r1, #0
 800e076:	d1b9      	bne.n	800dfec <_printf_float+0xe8>
 800e078:	2301      	movs	r3, #1
 800e07a:	e7b6      	b.n	800dfea <_printf_float+0xe6>
 800e07c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e080:	d119      	bne.n	800e0b6 <_printf_float+0x1b2>
 800e082:	2900      	cmp	r1, #0
 800e084:	6863      	ldr	r3, [r4, #4]
 800e086:	dd0c      	ble.n	800e0a2 <_printf_float+0x19e>
 800e088:	6121      	str	r1, [r4, #16]
 800e08a:	b913      	cbnz	r3, 800e092 <_printf_float+0x18e>
 800e08c:	6822      	ldr	r2, [r4, #0]
 800e08e:	07d2      	lsls	r2, r2, #31
 800e090:	d502      	bpl.n	800e098 <_printf_float+0x194>
 800e092:	3301      	adds	r3, #1
 800e094:	440b      	add	r3, r1
 800e096:	6123      	str	r3, [r4, #16]
 800e098:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e09a:	65a3      	str	r3, [r4, #88]	; 0x58
 800e09c:	f04f 0900 	mov.w	r9, #0
 800e0a0:	e7d9      	b.n	800e056 <_printf_float+0x152>
 800e0a2:	b913      	cbnz	r3, 800e0aa <_printf_float+0x1a6>
 800e0a4:	6822      	ldr	r2, [r4, #0]
 800e0a6:	07d0      	lsls	r0, r2, #31
 800e0a8:	d501      	bpl.n	800e0ae <_printf_float+0x1aa>
 800e0aa:	3302      	adds	r3, #2
 800e0ac:	e7f3      	b.n	800e096 <_printf_float+0x192>
 800e0ae:	2301      	movs	r3, #1
 800e0b0:	e7f1      	b.n	800e096 <_printf_float+0x192>
 800e0b2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e0b6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	db05      	blt.n	800e0ca <_printf_float+0x1c6>
 800e0be:	6822      	ldr	r2, [r4, #0]
 800e0c0:	6123      	str	r3, [r4, #16]
 800e0c2:	07d1      	lsls	r1, r2, #31
 800e0c4:	d5e8      	bpl.n	800e098 <_printf_float+0x194>
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	e7e5      	b.n	800e096 <_printf_float+0x192>
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	bfd4      	ite	le
 800e0ce:	f1c3 0302 	rsble	r3, r3, #2
 800e0d2:	2301      	movgt	r3, #1
 800e0d4:	4413      	add	r3, r2
 800e0d6:	e7de      	b.n	800e096 <_printf_float+0x192>
 800e0d8:	6823      	ldr	r3, [r4, #0]
 800e0da:	055a      	lsls	r2, r3, #21
 800e0dc:	d407      	bmi.n	800e0ee <_printf_float+0x1ea>
 800e0de:	6923      	ldr	r3, [r4, #16]
 800e0e0:	4642      	mov	r2, r8
 800e0e2:	4631      	mov	r1, r6
 800e0e4:	4628      	mov	r0, r5
 800e0e6:	47b8      	blx	r7
 800e0e8:	3001      	adds	r0, #1
 800e0ea:	d12b      	bne.n	800e144 <_printf_float+0x240>
 800e0ec:	e767      	b.n	800dfbe <_printf_float+0xba>
 800e0ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e0f2:	f240 80dc 	bls.w	800e2ae <_printf_float+0x3aa>
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e0fe:	f7f2 fd03 	bl	8000b08 <__aeabi_dcmpeq>
 800e102:	2800      	cmp	r0, #0
 800e104:	d033      	beq.n	800e16e <_printf_float+0x26a>
 800e106:	2301      	movs	r3, #1
 800e108:	4a41      	ldr	r2, [pc, #260]	; (800e210 <_printf_float+0x30c>)
 800e10a:	4631      	mov	r1, r6
 800e10c:	4628      	mov	r0, r5
 800e10e:	47b8      	blx	r7
 800e110:	3001      	adds	r0, #1
 800e112:	f43f af54 	beq.w	800dfbe <_printf_float+0xba>
 800e116:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e11a:	429a      	cmp	r2, r3
 800e11c:	db02      	blt.n	800e124 <_printf_float+0x220>
 800e11e:	6823      	ldr	r3, [r4, #0]
 800e120:	07d8      	lsls	r0, r3, #31
 800e122:	d50f      	bpl.n	800e144 <_printf_float+0x240>
 800e124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e128:	4631      	mov	r1, r6
 800e12a:	4628      	mov	r0, r5
 800e12c:	47b8      	blx	r7
 800e12e:	3001      	adds	r0, #1
 800e130:	f43f af45 	beq.w	800dfbe <_printf_float+0xba>
 800e134:	f04f 0800 	mov.w	r8, #0
 800e138:	f104 091a 	add.w	r9, r4, #26
 800e13c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e13e:	3b01      	subs	r3, #1
 800e140:	4543      	cmp	r3, r8
 800e142:	dc09      	bgt.n	800e158 <_printf_float+0x254>
 800e144:	6823      	ldr	r3, [r4, #0]
 800e146:	079b      	lsls	r3, r3, #30
 800e148:	f100 8103 	bmi.w	800e352 <_printf_float+0x44e>
 800e14c:	68e0      	ldr	r0, [r4, #12]
 800e14e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e150:	4298      	cmp	r0, r3
 800e152:	bfb8      	it	lt
 800e154:	4618      	movlt	r0, r3
 800e156:	e734      	b.n	800dfc2 <_printf_float+0xbe>
 800e158:	2301      	movs	r3, #1
 800e15a:	464a      	mov	r2, r9
 800e15c:	4631      	mov	r1, r6
 800e15e:	4628      	mov	r0, r5
 800e160:	47b8      	blx	r7
 800e162:	3001      	adds	r0, #1
 800e164:	f43f af2b 	beq.w	800dfbe <_printf_float+0xba>
 800e168:	f108 0801 	add.w	r8, r8, #1
 800e16c:	e7e6      	b.n	800e13c <_printf_float+0x238>
 800e16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e170:	2b00      	cmp	r3, #0
 800e172:	dc2b      	bgt.n	800e1cc <_printf_float+0x2c8>
 800e174:	2301      	movs	r3, #1
 800e176:	4a26      	ldr	r2, [pc, #152]	; (800e210 <_printf_float+0x30c>)
 800e178:	4631      	mov	r1, r6
 800e17a:	4628      	mov	r0, r5
 800e17c:	47b8      	blx	r7
 800e17e:	3001      	adds	r0, #1
 800e180:	f43f af1d 	beq.w	800dfbe <_printf_float+0xba>
 800e184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e186:	b923      	cbnz	r3, 800e192 <_printf_float+0x28e>
 800e188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e18a:	b913      	cbnz	r3, 800e192 <_printf_float+0x28e>
 800e18c:	6823      	ldr	r3, [r4, #0]
 800e18e:	07d9      	lsls	r1, r3, #31
 800e190:	d5d8      	bpl.n	800e144 <_printf_float+0x240>
 800e192:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e196:	4631      	mov	r1, r6
 800e198:	4628      	mov	r0, r5
 800e19a:	47b8      	blx	r7
 800e19c:	3001      	adds	r0, #1
 800e19e:	f43f af0e 	beq.w	800dfbe <_printf_float+0xba>
 800e1a2:	f04f 0900 	mov.w	r9, #0
 800e1a6:	f104 0a1a 	add.w	sl, r4, #26
 800e1aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ac:	425b      	negs	r3, r3
 800e1ae:	454b      	cmp	r3, r9
 800e1b0:	dc01      	bgt.n	800e1b6 <_printf_float+0x2b2>
 800e1b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1b4:	e794      	b.n	800e0e0 <_printf_float+0x1dc>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	4652      	mov	r2, sl
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	4628      	mov	r0, r5
 800e1be:	47b8      	blx	r7
 800e1c0:	3001      	adds	r0, #1
 800e1c2:	f43f aefc 	beq.w	800dfbe <_printf_float+0xba>
 800e1c6:	f109 0901 	add.w	r9, r9, #1
 800e1ca:	e7ee      	b.n	800e1aa <_printf_float+0x2a6>
 800e1cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e1ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	bfa8      	it	ge
 800e1d4:	461a      	movge	r2, r3
 800e1d6:	2a00      	cmp	r2, #0
 800e1d8:	4691      	mov	r9, r2
 800e1da:	dd07      	ble.n	800e1ec <_printf_float+0x2e8>
 800e1dc:	4613      	mov	r3, r2
 800e1de:	4631      	mov	r1, r6
 800e1e0:	4642      	mov	r2, r8
 800e1e2:	4628      	mov	r0, r5
 800e1e4:	47b8      	blx	r7
 800e1e6:	3001      	adds	r0, #1
 800e1e8:	f43f aee9 	beq.w	800dfbe <_printf_float+0xba>
 800e1ec:	f104 031a 	add.w	r3, r4, #26
 800e1f0:	f04f 0b00 	mov.w	fp, #0
 800e1f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e1f8:	9306      	str	r3, [sp, #24]
 800e1fa:	e015      	b.n	800e228 <_printf_float+0x324>
 800e1fc:	7fefffff 	.word	0x7fefffff
 800e200:	08012705 	.word	0x08012705
 800e204:	08012701 	.word	0x08012701
 800e208:	0801270d 	.word	0x0801270d
 800e20c:	08012709 	.word	0x08012709
 800e210:	08012711 	.word	0x08012711
 800e214:	2301      	movs	r3, #1
 800e216:	9a06      	ldr	r2, [sp, #24]
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	f43f aecd 	beq.w	800dfbe <_printf_float+0xba>
 800e224:	f10b 0b01 	add.w	fp, fp, #1
 800e228:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e22c:	ebaa 0309 	sub.w	r3, sl, r9
 800e230:	455b      	cmp	r3, fp
 800e232:	dcef      	bgt.n	800e214 <_printf_float+0x310>
 800e234:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e238:	429a      	cmp	r2, r3
 800e23a:	44d0      	add	r8, sl
 800e23c:	db15      	blt.n	800e26a <_printf_float+0x366>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	07da      	lsls	r2, r3, #31
 800e242:	d412      	bmi.n	800e26a <_printf_float+0x366>
 800e244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e246:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e248:	eba3 020a 	sub.w	r2, r3, sl
 800e24c:	eba3 0a01 	sub.w	sl, r3, r1
 800e250:	4592      	cmp	sl, r2
 800e252:	bfa8      	it	ge
 800e254:	4692      	movge	sl, r2
 800e256:	f1ba 0f00 	cmp.w	sl, #0
 800e25a:	dc0e      	bgt.n	800e27a <_printf_float+0x376>
 800e25c:	f04f 0800 	mov.w	r8, #0
 800e260:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e264:	f104 091a 	add.w	r9, r4, #26
 800e268:	e019      	b.n	800e29e <_printf_float+0x39a>
 800e26a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e26e:	4631      	mov	r1, r6
 800e270:	4628      	mov	r0, r5
 800e272:	47b8      	blx	r7
 800e274:	3001      	adds	r0, #1
 800e276:	d1e5      	bne.n	800e244 <_printf_float+0x340>
 800e278:	e6a1      	b.n	800dfbe <_printf_float+0xba>
 800e27a:	4653      	mov	r3, sl
 800e27c:	4642      	mov	r2, r8
 800e27e:	4631      	mov	r1, r6
 800e280:	4628      	mov	r0, r5
 800e282:	47b8      	blx	r7
 800e284:	3001      	adds	r0, #1
 800e286:	d1e9      	bne.n	800e25c <_printf_float+0x358>
 800e288:	e699      	b.n	800dfbe <_printf_float+0xba>
 800e28a:	2301      	movs	r3, #1
 800e28c:	464a      	mov	r2, r9
 800e28e:	4631      	mov	r1, r6
 800e290:	4628      	mov	r0, r5
 800e292:	47b8      	blx	r7
 800e294:	3001      	adds	r0, #1
 800e296:	f43f ae92 	beq.w	800dfbe <_printf_float+0xba>
 800e29a:	f108 0801 	add.w	r8, r8, #1
 800e29e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2a2:	1a9b      	subs	r3, r3, r2
 800e2a4:	eba3 030a 	sub.w	r3, r3, sl
 800e2a8:	4543      	cmp	r3, r8
 800e2aa:	dcee      	bgt.n	800e28a <_printf_float+0x386>
 800e2ac:	e74a      	b.n	800e144 <_printf_float+0x240>
 800e2ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e2b0:	2a01      	cmp	r2, #1
 800e2b2:	dc01      	bgt.n	800e2b8 <_printf_float+0x3b4>
 800e2b4:	07db      	lsls	r3, r3, #31
 800e2b6:	d53a      	bpl.n	800e32e <_printf_float+0x42a>
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	4642      	mov	r2, r8
 800e2bc:	4631      	mov	r1, r6
 800e2be:	4628      	mov	r0, r5
 800e2c0:	47b8      	blx	r7
 800e2c2:	3001      	adds	r0, #1
 800e2c4:	f43f ae7b 	beq.w	800dfbe <_printf_float+0xba>
 800e2c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e2cc:	4631      	mov	r1, r6
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	47b8      	blx	r7
 800e2d2:	3001      	adds	r0, #1
 800e2d4:	f108 0801 	add.w	r8, r8, #1
 800e2d8:	f43f ae71 	beq.w	800dfbe <_printf_float+0xba>
 800e2dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f103 3aff 	add.w	sl, r3, #4294967295
 800e2e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f7f2 fc0d 	bl	8000b08 <__aeabi_dcmpeq>
 800e2ee:	b9c8      	cbnz	r0, 800e324 <_printf_float+0x420>
 800e2f0:	4653      	mov	r3, sl
 800e2f2:	4642      	mov	r2, r8
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	4628      	mov	r0, r5
 800e2f8:	47b8      	blx	r7
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	d10e      	bne.n	800e31c <_printf_float+0x418>
 800e2fe:	e65e      	b.n	800dfbe <_printf_float+0xba>
 800e300:	2301      	movs	r3, #1
 800e302:	4652      	mov	r2, sl
 800e304:	4631      	mov	r1, r6
 800e306:	4628      	mov	r0, r5
 800e308:	47b8      	blx	r7
 800e30a:	3001      	adds	r0, #1
 800e30c:	f43f ae57 	beq.w	800dfbe <_printf_float+0xba>
 800e310:	f108 0801 	add.w	r8, r8, #1
 800e314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e316:	3b01      	subs	r3, #1
 800e318:	4543      	cmp	r3, r8
 800e31a:	dcf1      	bgt.n	800e300 <_printf_float+0x3fc>
 800e31c:	464b      	mov	r3, r9
 800e31e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e322:	e6de      	b.n	800e0e2 <_printf_float+0x1de>
 800e324:	f04f 0800 	mov.w	r8, #0
 800e328:	f104 0a1a 	add.w	sl, r4, #26
 800e32c:	e7f2      	b.n	800e314 <_printf_float+0x410>
 800e32e:	2301      	movs	r3, #1
 800e330:	e7df      	b.n	800e2f2 <_printf_float+0x3ee>
 800e332:	2301      	movs	r3, #1
 800e334:	464a      	mov	r2, r9
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	f43f ae3e 	beq.w	800dfbe <_printf_float+0xba>
 800e342:	f108 0801 	add.w	r8, r8, #1
 800e346:	68e3      	ldr	r3, [r4, #12]
 800e348:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e34a:	1a9b      	subs	r3, r3, r2
 800e34c:	4543      	cmp	r3, r8
 800e34e:	dcf0      	bgt.n	800e332 <_printf_float+0x42e>
 800e350:	e6fc      	b.n	800e14c <_printf_float+0x248>
 800e352:	f04f 0800 	mov.w	r8, #0
 800e356:	f104 0919 	add.w	r9, r4, #25
 800e35a:	e7f4      	b.n	800e346 <_printf_float+0x442>
 800e35c:	2900      	cmp	r1, #0
 800e35e:	f43f ae8b 	beq.w	800e078 <_printf_float+0x174>
 800e362:	2300      	movs	r3, #0
 800e364:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e368:	ab09      	add	r3, sp, #36	; 0x24
 800e36a:	9300      	str	r3, [sp, #0]
 800e36c:	ec49 8b10 	vmov	d0, r8, r9
 800e370:	6022      	str	r2, [r4, #0]
 800e372:	f8cd a004 	str.w	sl, [sp, #4]
 800e376:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e37a:	4628      	mov	r0, r5
 800e37c:	f7ff fd2e 	bl	800dddc <__cvt>
 800e380:	4680      	mov	r8, r0
 800e382:	e648      	b.n	800e016 <_printf_float+0x112>

0800e384 <_printf_common>:
 800e384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e388:	4691      	mov	r9, r2
 800e38a:	461f      	mov	r7, r3
 800e38c:	688a      	ldr	r2, [r1, #8]
 800e38e:	690b      	ldr	r3, [r1, #16]
 800e390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e394:	4293      	cmp	r3, r2
 800e396:	bfb8      	it	lt
 800e398:	4613      	movlt	r3, r2
 800e39a:	f8c9 3000 	str.w	r3, [r9]
 800e39e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3a2:	4606      	mov	r6, r0
 800e3a4:	460c      	mov	r4, r1
 800e3a6:	b112      	cbz	r2, 800e3ae <_printf_common+0x2a>
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	f8c9 3000 	str.w	r3, [r9]
 800e3ae:	6823      	ldr	r3, [r4, #0]
 800e3b0:	0699      	lsls	r1, r3, #26
 800e3b2:	bf42      	ittt	mi
 800e3b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e3b8:	3302      	addmi	r3, #2
 800e3ba:	f8c9 3000 	strmi.w	r3, [r9]
 800e3be:	6825      	ldr	r5, [r4, #0]
 800e3c0:	f015 0506 	ands.w	r5, r5, #6
 800e3c4:	d107      	bne.n	800e3d6 <_printf_common+0x52>
 800e3c6:	f104 0a19 	add.w	sl, r4, #25
 800e3ca:	68e3      	ldr	r3, [r4, #12]
 800e3cc:	f8d9 2000 	ldr.w	r2, [r9]
 800e3d0:	1a9b      	subs	r3, r3, r2
 800e3d2:	42ab      	cmp	r3, r5
 800e3d4:	dc28      	bgt.n	800e428 <_printf_common+0xa4>
 800e3d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e3da:	6822      	ldr	r2, [r4, #0]
 800e3dc:	3300      	adds	r3, #0
 800e3de:	bf18      	it	ne
 800e3e0:	2301      	movne	r3, #1
 800e3e2:	0692      	lsls	r2, r2, #26
 800e3e4:	d42d      	bmi.n	800e442 <_printf_common+0xbe>
 800e3e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3ea:	4639      	mov	r1, r7
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	47c0      	blx	r8
 800e3f0:	3001      	adds	r0, #1
 800e3f2:	d020      	beq.n	800e436 <_printf_common+0xb2>
 800e3f4:	6823      	ldr	r3, [r4, #0]
 800e3f6:	68e5      	ldr	r5, [r4, #12]
 800e3f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e3fc:	f003 0306 	and.w	r3, r3, #6
 800e400:	2b04      	cmp	r3, #4
 800e402:	bf08      	it	eq
 800e404:	1aad      	subeq	r5, r5, r2
 800e406:	68a3      	ldr	r3, [r4, #8]
 800e408:	6922      	ldr	r2, [r4, #16]
 800e40a:	bf0c      	ite	eq
 800e40c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e410:	2500      	movne	r5, #0
 800e412:	4293      	cmp	r3, r2
 800e414:	bfc4      	itt	gt
 800e416:	1a9b      	subgt	r3, r3, r2
 800e418:	18ed      	addgt	r5, r5, r3
 800e41a:	f04f 0900 	mov.w	r9, #0
 800e41e:	341a      	adds	r4, #26
 800e420:	454d      	cmp	r5, r9
 800e422:	d11a      	bne.n	800e45a <_printf_common+0xd6>
 800e424:	2000      	movs	r0, #0
 800e426:	e008      	b.n	800e43a <_printf_common+0xb6>
 800e428:	2301      	movs	r3, #1
 800e42a:	4652      	mov	r2, sl
 800e42c:	4639      	mov	r1, r7
 800e42e:	4630      	mov	r0, r6
 800e430:	47c0      	blx	r8
 800e432:	3001      	adds	r0, #1
 800e434:	d103      	bne.n	800e43e <_printf_common+0xba>
 800e436:	f04f 30ff 	mov.w	r0, #4294967295
 800e43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e43e:	3501      	adds	r5, #1
 800e440:	e7c3      	b.n	800e3ca <_printf_common+0x46>
 800e442:	18e1      	adds	r1, r4, r3
 800e444:	1c5a      	adds	r2, r3, #1
 800e446:	2030      	movs	r0, #48	; 0x30
 800e448:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e44c:	4422      	add	r2, r4
 800e44e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e452:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e456:	3302      	adds	r3, #2
 800e458:	e7c5      	b.n	800e3e6 <_printf_common+0x62>
 800e45a:	2301      	movs	r3, #1
 800e45c:	4622      	mov	r2, r4
 800e45e:	4639      	mov	r1, r7
 800e460:	4630      	mov	r0, r6
 800e462:	47c0      	blx	r8
 800e464:	3001      	adds	r0, #1
 800e466:	d0e6      	beq.n	800e436 <_printf_common+0xb2>
 800e468:	f109 0901 	add.w	r9, r9, #1
 800e46c:	e7d8      	b.n	800e420 <_printf_common+0x9c>
	...

0800e470 <_printf_i>:
 800e470:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e474:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e478:	460c      	mov	r4, r1
 800e47a:	7e09      	ldrb	r1, [r1, #24]
 800e47c:	b085      	sub	sp, #20
 800e47e:	296e      	cmp	r1, #110	; 0x6e
 800e480:	4617      	mov	r7, r2
 800e482:	4606      	mov	r6, r0
 800e484:	4698      	mov	r8, r3
 800e486:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e488:	f000 80b3 	beq.w	800e5f2 <_printf_i+0x182>
 800e48c:	d822      	bhi.n	800e4d4 <_printf_i+0x64>
 800e48e:	2963      	cmp	r1, #99	; 0x63
 800e490:	d036      	beq.n	800e500 <_printf_i+0x90>
 800e492:	d80a      	bhi.n	800e4aa <_printf_i+0x3a>
 800e494:	2900      	cmp	r1, #0
 800e496:	f000 80b9 	beq.w	800e60c <_printf_i+0x19c>
 800e49a:	2958      	cmp	r1, #88	; 0x58
 800e49c:	f000 8083 	beq.w	800e5a6 <_printf_i+0x136>
 800e4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e4a8:	e032      	b.n	800e510 <_printf_i+0xa0>
 800e4aa:	2964      	cmp	r1, #100	; 0x64
 800e4ac:	d001      	beq.n	800e4b2 <_printf_i+0x42>
 800e4ae:	2969      	cmp	r1, #105	; 0x69
 800e4b0:	d1f6      	bne.n	800e4a0 <_printf_i+0x30>
 800e4b2:	6820      	ldr	r0, [r4, #0]
 800e4b4:	6813      	ldr	r3, [r2, #0]
 800e4b6:	0605      	lsls	r5, r0, #24
 800e4b8:	f103 0104 	add.w	r1, r3, #4
 800e4bc:	d52a      	bpl.n	800e514 <_printf_i+0xa4>
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	6011      	str	r1, [r2, #0]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	da03      	bge.n	800e4ce <_printf_i+0x5e>
 800e4c6:	222d      	movs	r2, #45	; 0x2d
 800e4c8:	425b      	negs	r3, r3
 800e4ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e4ce:	486f      	ldr	r0, [pc, #444]	; (800e68c <_printf_i+0x21c>)
 800e4d0:	220a      	movs	r2, #10
 800e4d2:	e039      	b.n	800e548 <_printf_i+0xd8>
 800e4d4:	2973      	cmp	r1, #115	; 0x73
 800e4d6:	f000 809d 	beq.w	800e614 <_printf_i+0x1a4>
 800e4da:	d808      	bhi.n	800e4ee <_printf_i+0x7e>
 800e4dc:	296f      	cmp	r1, #111	; 0x6f
 800e4de:	d020      	beq.n	800e522 <_printf_i+0xb2>
 800e4e0:	2970      	cmp	r1, #112	; 0x70
 800e4e2:	d1dd      	bne.n	800e4a0 <_printf_i+0x30>
 800e4e4:	6823      	ldr	r3, [r4, #0]
 800e4e6:	f043 0320 	orr.w	r3, r3, #32
 800e4ea:	6023      	str	r3, [r4, #0]
 800e4ec:	e003      	b.n	800e4f6 <_printf_i+0x86>
 800e4ee:	2975      	cmp	r1, #117	; 0x75
 800e4f0:	d017      	beq.n	800e522 <_printf_i+0xb2>
 800e4f2:	2978      	cmp	r1, #120	; 0x78
 800e4f4:	d1d4      	bne.n	800e4a0 <_printf_i+0x30>
 800e4f6:	2378      	movs	r3, #120	; 0x78
 800e4f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e4fc:	4864      	ldr	r0, [pc, #400]	; (800e690 <_printf_i+0x220>)
 800e4fe:	e055      	b.n	800e5ac <_printf_i+0x13c>
 800e500:	6813      	ldr	r3, [r2, #0]
 800e502:	1d19      	adds	r1, r3, #4
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	6011      	str	r1, [r2, #0]
 800e508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e50c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e510:	2301      	movs	r3, #1
 800e512:	e08c      	b.n	800e62e <_printf_i+0x1be>
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	6011      	str	r1, [r2, #0]
 800e518:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e51c:	bf18      	it	ne
 800e51e:	b21b      	sxthne	r3, r3
 800e520:	e7cf      	b.n	800e4c2 <_printf_i+0x52>
 800e522:	6813      	ldr	r3, [r2, #0]
 800e524:	6825      	ldr	r5, [r4, #0]
 800e526:	1d18      	adds	r0, r3, #4
 800e528:	6010      	str	r0, [r2, #0]
 800e52a:	0628      	lsls	r0, r5, #24
 800e52c:	d501      	bpl.n	800e532 <_printf_i+0xc2>
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	e002      	b.n	800e538 <_printf_i+0xc8>
 800e532:	0668      	lsls	r0, r5, #25
 800e534:	d5fb      	bpl.n	800e52e <_printf_i+0xbe>
 800e536:	881b      	ldrh	r3, [r3, #0]
 800e538:	4854      	ldr	r0, [pc, #336]	; (800e68c <_printf_i+0x21c>)
 800e53a:	296f      	cmp	r1, #111	; 0x6f
 800e53c:	bf14      	ite	ne
 800e53e:	220a      	movne	r2, #10
 800e540:	2208      	moveq	r2, #8
 800e542:	2100      	movs	r1, #0
 800e544:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e548:	6865      	ldr	r5, [r4, #4]
 800e54a:	60a5      	str	r5, [r4, #8]
 800e54c:	2d00      	cmp	r5, #0
 800e54e:	f2c0 8095 	blt.w	800e67c <_printf_i+0x20c>
 800e552:	6821      	ldr	r1, [r4, #0]
 800e554:	f021 0104 	bic.w	r1, r1, #4
 800e558:	6021      	str	r1, [r4, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d13d      	bne.n	800e5da <_printf_i+0x16a>
 800e55e:	2d00      	cmp	r5, #0
 800e560:	f040 808e 	bne.w	800e680 <_printf_i+0x210>
 800e564:	4665      	mov	r5, ip
 800e566:	2a08      	cmp	r2, #8
 800e568:	d10b      	bne.n	800e582 <_printf_i+0x112>
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	07db      	lsls	r3, r3, #31
 800e56e:	d508      	bpl.n	800e582 <_printf_i+0x112>
 800e570:	6923      	ldr	r3, [r4, #16]
 800e572:	6862      	ldr	r2, [r4, #4]
 800e574:	429a      	cmp	r2, r3
 800e576:	bfde      	ittt	le
 800e578:	2330      	movle	r3, #48	; 0x30
 800e57a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e57e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e582:	ebac 0305 	sub.w	r3, ip, r5
 800e586:	6123      	str	r3, [r4, #16]
 800e588:	f8cd 8000 	str.w	r8, [sp]
 800e58c:	463b      	mov	r3, r7
 800e58e:	aa03      	add	r2, sp, #12
 800e590:	4621      	mov	r1, r4
 800e592:	4630      	mov	r0, r6
 800e594:	f7ff fef6 	bl	800e384 <_printf_common>
 800e598:	3001      	adds	r0, #1
 800e59a:	d14d      	bne.n	800e638 <_printf_i+0x1c8>
 800e59c:	f04f 30ff 	mov.w	r0, #4294967295
 800e5a0:	b005      	add	sp, #20
 800e5a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5a6:	4839      	ldr	r0, [pc, #228]	; (800e68c <_printf_i+0x21c>)
 800e5a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e5ac:	6813      	ldr	r3, [r2, #0]
 800e5ae:	6821      	ldr	r1, [r4, #0]
 800e5b0:	1d1d      	adds	r5, r3, #4
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	6015      	str	r5, [r2, #0]
 800e5b6:	060a      	lsls	r2, r1, #24
 800e5b8:	d50b      	bpl.n	800e5d2 <_printf_i+0x162>
 800e5ba:	07ca      	lsls	r2, r1, #31
 800e5bc:	bf44      	itt	mi
 800e5be:	f041 0120 	orrmi.w	r1, r1, #32
 800e5c2:	6021      	strmi	r1, [r4, #0]
 800e5c4:	b91b      	cbnz	r3, 800e5ce <_printf_i+0x15e>
 800e5c6:	6822      	ldr	r2, [r4, #0]
 800e5c8:	f022 0220 	bic.w	r2, r2, #32
 800e5cc:	6022      	str	r2, [r4, #0]
 800e5ce:	2210      	movs	r2, #16
 800e5d0:	e7b7      	b.n	800e542 <_printf_i+0xd2>
 800e5d2:	064d      	lsls	r5, r1, #25
 800e5d4:	bf48      	it	mi
 800e5d6:	b29b      	uxthmi	r3, r3
 800e5d8:	e7ef      	b.n	800e5ba <_printf_i+0x14a>
 800e5da:	4665      	mov	r5, ip
 800e5dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800e5e0:	fb02 3311 	mls	r3, r2, r1, r3
 800e5e4:	5cc3      	ldrb	r3, [r0, r3]
 800e5e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e5ea:	460b      	mov	r3, r1
 800e5ec:	2900      	cmp	r1, #0
 800e5ee:	d1f5      	bne.n	800e5dc <_printf_i+0x16c>
 800e5f0:	e7b9      	b.n	800e566 <_printf_i+0xf6>
 800e5f2:	6813      	ldr	r3, [r2, #0]
 800e5f4:	6825      	ldr	r5, [r4, #0]
 800e5f6:	6961      	ldr	r1, [r4, #20]
 800e5f8:	1d18      	adds	r0, r3, #4
 800e5fa:	6010      	str	r0, [r2, #0]
 800e5fc:	0628      	lsls	r0, r5, #24
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	d501      	bpl.n	800e606 <_printf_i+0x196>
 800e602:	6019      	str	r1, [r3, #0]
 800e604:	e002      	b.n	800e60c <_printf_i+0x19c>
 800e606:	066a      	lsls	r2, r5, #25
 800e608:	d5fb      	bpl.n	800e602 <_printf_i+0x192>
 800e60a:	8019      	strh	r1, [r3, #0]
 800e60c:	2300      	movs	r3, #0
 800e60e:	6123      	str	r3, [r4, #16]
 800e610:	4665      	mov	r5, ip
 800e612:	e7b9      	b.n	800e588 <_printf_i+0x118>
 800e614:	6813      	ldr	r3, [r2, #0]
 800e616:	1d19      	adds	r1, r3, #4
 800e618:	6011      	str	r1, [r2, #0]
 800e61a:	681d      	ldr	r5, [r3, #0]
 800e61c:	6862      	ldr	r2, [r4, #4]
 800e61e:	2100      	movs	r1, #0
 800e620:	4628      	mov	r0, r5
 800e622:	f7f1 fdfd 	bl	8000220 <memchr>
 800e626:	b108      	cbz	r0, 800e62c <_printf_i+0x1bc>
 800e628:	1b40      	subs	r0, r0, r5
 800e62a:	6060      	str	r0, [r4, #4]
 800e62c:	6863      	ldr	r3, [r4, #4]
 800e62e:	6123      	str	r3, [r4, #16]
 800e630:	2300      	movs	r3, #0
 800e632:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e636:	e7a7      	b.n	800e588 <_printf_i+0x118>
 800e638:	6923      	ldr	r3, [r4, #16]
 800e63a:	462a      	mov	r2, r5
 800e63c:	4639      	mov	r1, r7
 800e63e:	4630      	mov	r0, r6
 800e640:	47c0      	blx	r8
 800e642:	3001      	adds	r0, #1
 800e644:	d0aa      	beq.n	800e59c <_printf_i+0x12c>
 800e646:	6823      	ldr	r3, [r4, #0]
 800e648:	079b      	lsls	r3, r3, #30
 800e64a:	d413      	bmi.n	800e674 <_printf_i+0x204>
 800e64c:	68e0      	ldr	r0, [r4, #12]
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	4298      	cmp	r0, r3
 800e652:	bfb8      	it	lt
 800e654:	4618      	movlt	r0, r3
 800e656:	e7a3      	b.n	800e5a0 <_printf_i+0x130>
 800e658:	2301      	movs	r3, #1
 800e65a:	464a      	mov	r2, r9
 800e65c:	4639      	mov	r1, r7
 800e65e:	4630      	mov	r0, r6
 800e660:	47c0      	blx	r8
 800e662:	3001      	adds	r0, #1
 800e664:	d09a      	beq.n	800e59c <_printf_i+0x12c>
 800e666:	3501      	adds	r5, #1
 800e668:	68e3      	ldr	r3, [r4, #12]
 800e66a:	9a03      	ldr	r2, [sp, #12]
 800e66c:	1a9b      	subs	r3, r3, r2
 800e66e:	42ab      	cmp	r3, r5
 800e670:	dcf2      	bgt.n	800e658 <_printf_i+0x1e8>
 800e672:	e7eb      	b.n	800e64c <_printf_i+0x1dc>
 800e674:	2500      	movs	r5, #0
 800e676:	f104 0919 	add.w	r9, r4, #25
 800e67a:	e7f5      	b.n	800e668 <_printf_i+0x1f8>
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d1ac      	bne.n	800e5da <_printf_i+0x16a>
 800e680:	7803      	ldrb	r3, [r0, #0]
 800e682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e68a:	e76c      	b.n	800e566 <_printf_i+0xf6>
 800e68c:	08012713 	.word	0x08012713
 800e690:	08012724 	.word	0x08012724

0800e694 <copysign>:
 800e694:	ec51 0b10 	vmov	r0, r1, d0
 800e698:	ee11 0a90 	vmov	r0, s3
 800e69c:	ee10 2a10 	vmov	r2, s0
 800e6a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800e6a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800e6a8:	ea41 0300 	orr.w	r3, r1, r0
 800e6ac:	ec43 2b10 	vmov	d0, r2, r3
 800e6b0:	4770      	bx	lr
	...

0800e6b4 <_sbrk_r>:
 800e6b4:	b538      	push	{r3, r4, r5, lr}
 800e6b6:	4c06      	ldr	r4, [pc, #24]	; (800e6d0 <_sbrk_r+0x1c>)
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	4608      	mov	r0, r1
 800e6be:	6023      	str	r3, [r4, #0]
 800e6c0:	f7f5 fb6e 	bl	8003da0 <_sbrk>
 800e6c4:	1c43      	adds	r3, r0, #1
 800e6c6:	d102      	bne.n	800e6ce <_sbrk_r+0x1a>
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	b103      	cbz	r3, 800e6ce <_sbrk_r+0x1a>
 800e6cc:	602b      	str	r3, [r5, #0]
 800e6ce:	bd38      	pop	{r3, r4, r5, pc}
 800e6d0:	2000232c 	.word	0x2000232c

0800e6d4 <siprintf>:
 800e6d4:	b40e      	push	{r1, r2, r3}
 800e6d6:	b500      	push	{lr}
 800e6d8:	b09c      	sub	sp, #112	; 0x70
 800e6da:	ab1d      	add	r3, sp, #116	; 0x74
 800e6dc:	9002      	str	r0, [sp, #8]
 800e6de:	9006      	str	r0, [sp, #24]
 800e6e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e6e4:	4809      	ldr	r0, [pc, #36]	; (800e70c <siprintf+0x38>)
 800e6e6:	9107      	str	r1, [sp, #28]
 800e6e8:	9104      	str	r1, [sp, #16]
 800e6ea:	4909      	ldr	r1, [pc, #36]	; (800e710 <siprintf+0x3c>)
 800e6ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6f0:	9105      	str	r1, [sp, #20]
 800e6f2:	6800      	ldr	r0, [r0, #0]
 800e6f4:	9301      	str	r3, [sp, #4]
 800e6f6:	a902      	add	r1, sp, #8
 800e6f8:	f001 fd00 	bl	80100fc <_svfiprintf_r>
 800e6fc:	9b02      	ldr	r3, [sp, #8]
 800e6fe:	2200      	movs	r2, #0
 800e700:	701a      	strb	r2, [r3, #0]
 800e702:	b01c      	add	sp, #112	; 0x70
 800e704:	f85d eb04 	ldr.w	lr, [sp], #4
 800e708:	b003      	add	sp, #12
 800e70a:	4770      	bx	lr
 800e70c:	200001b0 	.word	0x200001b0
 800e710:	ffff0208 	.word	0xffff0208

0800e714 <__sread>:
 800e714:	b510      	push	{r4, lr}
 800e716:	460c      	mov	r4, r1
 800e718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71c:	f001 fde6 	bl	80102ec <_read_r>
 800e720:	2800      	cmp	r0, #0
 800e722:	bfab      	itete	ge
 800e724:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e726:	89a3      	ldrhlt	r3, [r4, #12]
 800e728:	181b      	addge	r3, r3, r0
 800e72a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e72e:	bfac      	ite	ge
 800e730:	6563      	strge	r3, [r4, #84]	; 0x54
 800e732:	81a3      	strhlt	r3, [r4, #12]
 800e734:	bd10      	pop	{r4, pc}

0800e736 <__swrite>:
 800e736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e73a:	461f      	mov	r7, r3
 800e73c:	898b      	ldrh	r3, [r1, #12]
 800e73e:	05db      	lsls	r3, r3, #23
 800e740:	4605      	mov	r5, r0
 800e742:	460c      	mov	r4, r1
 800e744:	4616      	mov	r6, r2
 800e746:	d505      	bpl.n	800e754 <__swrite+0x1e>
 800e748:	2302      	movs	r3, #2
 800e74a:	2200      	movs	r2, #0
 800e74c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e750:	f001 f8da 	bl	800f908 <_lseek_r>
 800e754:	89a3      	ldrh	r3, [r4, #12]
 800e756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e75a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e75e:	81a3      	strh	r3, [r4, #12]
 800e760:	4632      	mov	r2, r6
 800e762:	463b      	mov	r3, r7
 800e764:	4628      	mov	r0, r5
 800e766:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e76a:	f000 b869 	b.w	800e840 <_write_r>

0800e76e <__sseek>:
 800e76e:	b510      	push	{r4, lr}
 800e770:	460c      	mov	r4, r1
 800e772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e776:	f001 f8c7 	bl	800f908 <_lseek_r>
 800e77a:	1c43      	adds	r3, r0, #1
 800e77c:	89a3      	ldrh	r3, [r4, #12]
 800e77e:	bf15      	itete	ne
 800e780:	6560      	strne	r0, [r4, #84]	; 0x54
 800e782:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e786:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strheq	r3, [r4, #12]
 800e78c:	bf18      	it	ne
 800e78e:	81a3      	strhne	r3, [r4, #12]
 800e790:	bd10      	pop	{r4, pc}

0800e792 <__sclose>:
 800e792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e796:	f000 b8db 	b.w	800e950 <_close_r>
	...

0800e79c <__swbuf_r>:
 800e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e79e:	460e      	mov	r6, r1
 800e7a0:	4614      	mov	r4, r2
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	b118      	cbz	r0, 800e7ae <__swbuf_r+0x12>
 800e7a6:	6983      	ldr	r3, [r0, #24]
 800e7a8:	b90b      	cbnz	r3, 800e7ae <__swbuf_r+0x12>
 800e7aa:	f001 f815 	bl	800f7d8 <__sinit>
 800e7ae:	4b21      	ldr	r3, [pc, #132]	; (800e834 <__swbuf_r+0x98>)
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	d12a      	bne.n	800e80a <__swbuf_r+0x6e>
 800e7b4:	686c      	ldr	r4, [r5, #4]
 800e7b6:	69a3      	ldr	r3, [r4, #24]
 800e7b8:	60a3      	str	r3, [r4, #8]
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	071a      	lsls	r2, r3, #28
 800e7be:	d52e      	bpl.n	800e81e <__swbuf_r+0x82>
 800e7c0:	6923      	ldr	r3, [r4, #16]
 800e7c2:	b363      	cbz	r3, 800e81e <__swbuf_r+0x82>
 800e7c4:	6923      	ldr	r3, [r4, #16]
 800e7c6:	6820      	ldr	r0, [r4, #0]
 800e7c8:	1ac0      	subs	r0, r0, r3
 800e7ca:	6963      	ldr	r3, [r4, #20]
 800e7cc:	b2f6      	uxtb	r6, r6
 800e7ce:	4283      	cmp	r3, r0
 800e7d0:	4637      	mov	r7, r6
 800e7d2:	dc04      	bgt.n	800e7de <__swbuf_r+0x42>
 800e7d4:	4621      	mov	r1, r4
 800e7d6:	4628      	mov	r0, r5
 800e7d8:	f000 ff94 	bl	800f704 <_fflush_r>
 800e7dc:	bb28      	cbnz	r0, 800e82a <__swbuf_r+0x8e>
 800e7de:	68a3      	ldr	r3, [r4, #8]
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	60a3      	str	r3, [r4, #8]
 800e7e4:	6823      	ldr	r3, [r4, #0]
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	6022      	str	r2, [r4, #0]
 800e7ea:	701e      	strb	r6, [r3, #0]
 800e7ec:	6963      	ldr	r3, [r4, #20]
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	4283      	cmp	r3, r0
 800e7f2:	d004      	beq.n	800e7fe <__swbuf_r+0x62>
 800e7f4:	89a3      	ldrh	r3, [r4, #12]
 800e7f6:	07db      	lsls	r3, r3, #31
 800e7f8:	d519      	bpl.n	800e82e <__swbuf_r+0x92>
 800e7fa:	2e0a      	cmp	r6, #10
 800e7fc:	d117      	bne.n	800e82e <__swbuf_r+0x92>
 800e7fe:	4621      	mov	r1, r4
 800e800:	4628      	mov	r0, r5
 800e802:	f000 ff7f 	bl	800f704 <_fflush_r>
 800e806:	b190      	cbz	r0, 800e82e <__swbuf_r+0x92>
 800e808:	e00f      	b.n	800e82a <__swbuf_r+0x8e>
 800e80a:	4b0b      	ldr	r3, [pc, #44]	; (800e838 <__swbuf_r+0x9c>)
 800e80c:	429c      	cmp	r4, r3
 800e80e:	d101      	bne.n	800e814 <__swbuf_r+0x78>
 800e810:	68ac      	ldr	r4, [r5, #8]
 800e812:	e7d0      	b.n	800e7b6 <__swbuf_r+0x1a>
 800e814:	4b09      	ldr	r3, [pc, #36]	; (800e83c <__swbuf_r+0xa0>)
 800e816:	429c      	cmp	r4, r3
 800e818:	bf08      	it	eq
 800e81a:	68ec      	ldreq	r4, [r5, #12]
 800e81c:	e7cb      	b.n	800e7b6 <__swbuf_r+0x1a>
 800e81e:	4621      	mov	r1, r4
 800e820:	4628      	mov	r0, r5
 800e822:	f000 f81f 	bl	800e864 <__swsetup_r>
 800e826:	2800      	cmp	r0, #0
 800e828:	d0cc      	beq.n	800e7c4 <__swbuf_r+0x28>
 800e82a:	f04f 37ff 	mov.w	r7, #4294967295
 800e82e:	4638      	mov	r0, r7
 800e830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e832:	bf00      	nop
 800e834:	08012764 	.word	0x08012764
 800e838:	08012784 	.word	0x08012784
 800e83c:	08012744 	.word	0x08012744

0800e840 <_write_r>:
 800e840:	b538      	push	{r3, r4, r5, lr}
 800e842:	4c07      	ldr	r4, [pc, #28]	; (800e860 <_write_r+0x20>)
 800e844:	4605      	mov	r5, r0
 800e846:	4608      	mov	r0, r1
 800e848:	4611      	mov	r1, r2
 800e84a:	2200      	movs	r2, #0
 800e84c:	6022      	str	r2, [r4, #0]
 800e84e:	461a      	mov	r2, r3
 800e850:	f7f5 fa55 	bl	8003cfe <_write>
 800e854:	1c43      	adds	r3, r0, #1
 800e856:	d102      	bne.n	800e85e <_write_r+0x1e>
 800e858:	6823      	ldr	r3, [r4, #0]
 800e85a:	b103      	cbz	r3, 800e85e <_write_r+0x1e>
 800e85c:	602b      	str	r3, [r5, #0]
 800e85e:	bd38      	pop	{r3, r4, r5, pc}
 800e860:	2000232c 	.word	0x2000232c

0800e864 <__swsetup_r>:
 800e864:	4b32      	ldr	r3, [pc, #200]	; (800e930 <__swsetup_r+0xcc>)
 800e866:	b570      	push	{r4, r5, r6, lr}
 800e868:	681d      	ldr	r5, [r3, #0]
 800e86a:	4606      	mov	r6, r0
 800e86c:	460c      	mov	r4, r1
 800e86e:	b125      	cbz	r5, 800e87a <__swsetup_r+0x16>
 800e870:	69ab      	ldr	r3, [r5, #24]
 800e872:	b913      	cbnz	r3, 800e87a <__swsetup_r+0x16>
 800e874:	4628      	mov	r0, r5
 800e876:	f000 ffaf 	bl	800f7d8 <__sinit>
 800e87a:	4b2e      	ldr	r3, [pc, #184]	; (800e934 <__swsetup_r+0xd0>)
 800e87c:	429c      	cmp	r4, r3
 800e87e:	d10f      	bne.n	800e8a0 <__swsetup_r+0x3c>
 800e880:	686c      	ldr	r4, [r5, #4]
 800e882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e886:	b29a      	uxth	r2, r3
 800e888:	0715      	lsls	r5, r2, #28
 800e88a:	d42c      	bmi.n	800e8e6 <__swsetup_r+0x82>
 800e88c:	06d0      	lsls	r0, r2, #27
 800e88e:	d411      	bmi.n	800e8b4 <__swsetup_r+0x50>
 800e890:	2209      	movs	r2, #9
 800e892:	6032      	str	r2, [r6, #0]
 800e894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e898:	81a3      	strh	r3, [r4, #12]
 800e89a:	f04f 30ff 	mov.w	r0, #4294967295
 800e89e:	e03e      	b.n	800e91e <__swsetup_r+0xba>
 800e8a0:	4b25      	ldr	r3, [pc, #148]	; (800e938 <__swsetup_r+0xd4>)
 800e8a2:	429c      	cmp	r4, r3
 800e8a4:	d101      	bne.n	800e8aa <__swsetup_r+0x46>
 800e8a6:	68ac      	ldr	r4, [r5, #8]
 800e8a8:	e7eb      	b.n	800e882 <__swsetup_r+0x1e>
 800e8aa:	4b24      	ldr	r3, [pc, #144]	; (800e93c <__swsetup_r+0xd8>)
 800e8ac:	429c      	cmp	r4, r3
 800e8ae:	bf08      	it	eq
 800e8b0:	68ec      	ldreq	r4, [r5, #12]
 800e8b2:	e7e6      	b.n	800e882 <__swsetup_r+0x1e>
 800e8b4:	0751      	lsls	r1, r2, #29
 800e8b6:	d512      	bpl.n	800e8de <__swsetup_r+0x7a>
 800e8b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8ba:	b141      	cbz	r1, 800e8ce <__swsetup_r+0x6a>
 800e8bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8c0:	4299      	cmp	r1, r3
 800e8c2:	d002      	beq.n	800e8ca <__swsetup_r+0x66>
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f7ff f8a1 	bl	800da0c <_free_r>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	6363      	str	r3, [r4, #52]	; 0x34
 800e8ce:	89a3      	ldrh	r3, [r4, #12]
 800e8d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e8d4:	81a3      	strh	r3, [r4, #12]
 800e8d6:	2300      	movs	r3, #0
 800e8d8:	6063      	str	r3, [r4, #4]
 800e8da:	6923      	ldr	r3, [r4, #16]
 800e8dc:	6023      	str	r3, [r4, #0]
 800e8de:	89a3      	ldrh	r3, [r4, #12]
 800e8e0:	f043 0308 	orr.w	r3, r3, #8
 800e8e4:	81a3      	strh	r3, [r4, #12]
 800e8e6:	6923      	ldr	r3, [r4, #16]
 800e8e8:	b94b      	cbnz	r3, 800e8fe <__swsetup_r+0x9a>
 800e8ea:	89a3      	ldrh	r3, [r4, #12]
 800e8ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e8f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e8f4:	d003      	beq.n	800e8fe <__swsetup_r+0x9a>
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	4630      	mov	r0, r6
 800e8fa:	f001 f83b 	bl	800f974 <__smakebuf_r>
 800e8fe:	89a2      	ldrh	r2, [r4, #12]
 800e900:	f012 0301 	ands.w	r3, r2, #1
 800e904:	d00c      	beq.n	800e920 <__swsetup_r+0xbc>
 800e906:	2300      	movs	r3, #0
 800e908:	60a3      	str	r3, [r4, #8]
 800e90a:	6963      	ldr	r3, [r4, #20]
 800e90c:	425b      	negs	r3, r3
 800e90e:	61a3      	str	r3, [r4, #24]
 800e910:	6923      	ldr	r3, [r4, #16]
 800e912:	b953      	cbnz	r3, 800e92a <__swsetup_r+0xc6>
 800e914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e918:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e91c:	d1ba      	bne.n	800e894 <__swsetup_r+0x30>
 800e91e:	bd70      	pop	{r4, r5, r6, pc}
 800e920:	0792      	lsls	r2, r2, #30
 800e922:	bf58      	it	pl
 800e924:	6963      	ldrpl	r3, [r4, #20]
 800e926:	60a3      	str	r3, [r4, #8]
 800e928:	e7f2      	b.n	800e910 <__swsetup_r+0xac>
 800e92a:	2000      	movs	r0, #0
 800e92c:	e7f7      	b.n	800e91e <__swsetup_r+0xba>
 800e92e:	bf00      	nop
 800e930:	200001b0 	.word	0x200001b0
 800e934:	08012764 	.word	0x08012764
 800e938:	08012784 	.word	0x08012784
 800e93c:	08012744 	.word	0x08012744

0800e940 <abort>:
 800e940:	b508      	push	{r3, lr}
 800e942:	2006      	movs	r0, #6
 800e944:	f001 fd0c 	bl	8010360 <raise>
 800e948:	2001      	movs	r0, #1
 800e94a:	f7f5 f9b1 	bl	8003cb0 <_exit>
	...

0800e950 <_close_r>:
 800e950:	b538      	push	{r3, r4, r5, lr}
 800e952:	4c06      	ldr	r4, [pc, #24]	; (800e96c <_close_r+0x1c>)
 800e954:	2300      	movs	r3, #0
 800e956:	4605      	mov	r5, r0
 800e958:	4608      	mov	r0, r1
 800e95a:	6023      	str	r3, [r4, #0]
 800e95c:	f7f5 f9eb 	bl	8003d36 <_close>
 800e960:	1c43      	adds	r3, r0, #1
 800e962:	d102      	bne.n	800e96a <_close_r+0x1a>
 800e964:	6823      	ldr	r3, [r4, #0]
 800e966:	b103      	cbz	r3, 800e96a <_close_r+0x1a>
 800e968:	602b      	str	r3, [r5, #0]
 800e96a:	bd38      	pop	{r3, r4, r5, pc}
 800e96c:	2000232c 	.word	0x2000232c

0800e970 <quorem>:
 800e970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e974:	6903      	ldr	r3, [r0, #16]
 800e976:	690c      	ldr	r4, [r1, #16]
 800e978:	42a3      	cmp	r3, r4
 800e97a:	4680      	mov	r8, r0
 800e97c:	f2c0 8082 	blt.w	800ea84 <quorem+0x114>
 800e980:	3c01      	subs	r4, #1
 800e982:	f101 0714 	add.w	r7, r1, #20
 800e986:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e98a:	f100 0614 	add.w	r6, r0, #20
 800e98e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e992:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e996:	eb06 030c 	add.w	r3, r6, ip
 800e99a:	3501      	adds	r5, #1
 800e99c:	eb07 090c 	add.w	r9, r7, ip
 800e9a0:	9301      	str	r3, [sp, #4]
 800e9a2:	fbb0 f5f5 	udiv	r5, r0, r5
 800e9a6:	b395      	cbz	r5, 800ea0e <quorem+0x9e>
 800e9a8:	f04f 0a00 	mov.w	sl, #0
 800e9ac:	4638      	mov	r0, r7
 800e9ae:	46b6      	mov	lr, r6
 800e9b0:	46d3      	mov	fp, sl
 800e9b2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e9b6:	b293      	uxth	r3, r2
 800e9b8:	fb05 a303 	mla	r3, r5, r3, sl
 800e9bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e9c0:	b29b      	uxth	r3, r3
 800e9c2:	ebab 0303 	sub.w	r3, fp, r3
 800e9c6:	0c12      	lsrs	r2, r2, #16
 800e9c8:	f8de b000 	ldr.w	fp, [lr]
 800e9cc:	fb05 a202 	mla	r2, r5, r2, sl
 800e9d0:	fa13 f38b 	uxtah	r3, r3, fp
 800e9d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e9d8:	fa1f fb82 	uxth.w	fp, r2
 800e9dc:	f8de 2000 	ldr.w	r2, [lr]
 800e9e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e9e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e9e8:	b29b      	uxth	r3, r3
 800e9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e9ee:	4581      	cmp	r9, r0
 800e9f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e9f4:	f84e 3b04 	str.w	r3, [lr], #4
 800e9f8:	d2db      	bcs.n	800e9b2 <quorem+0x42>
 800e9fa:	f856 300c 	ldr.w	r3, [r6, ip]
 800e9fe:	b933      	cbnz	r3, 800ea0e <quorem+0x9e>
 800ea00:	9b01      	ldr	r3, [sp, #4]
 800ea02:	3b04      	subs	r3, #4
 800ea04:	429e      	cmp	r6, r3
 800ea06:	461a      	mov	r2, r3
 800ea08:	d330      	bcc.n	800ea6c <quorem+0xfc>
 800ea0a:	f8c8 4010 	str.w	r4, [r8, #16]
 800ea0e:	4640      	mov	r0, r8
 800ea10:	f001 fa20 	bl	800fe54 <__mcmp>
 800ea14:	2800      	cmp	r0, #0
 800ea16:	db25      	blt.n	800ea64 <quorem+0xf4>
 800ea18:	3501      	adds	r5, #1
 800ea1a:	4630      	mov	r0, r6
 800ea1c:	f04f 0c00 	mov.w	ip, #0
 800ea20:	f857 2b04 	ldr.w	r2, [r7], #4
 800ea24:	f8d0 e000 	ldr.w	lr, [r0]
 800ea28:	b293      	uxth	r3, r2
 800ea2a:	ebac 0303 	sub.w	r3, ip, r3
 800ea2e:	0c12      	lsrs	r2, r2, #16
 800ea30:	fa13 f38e 	uxtah	r3, r3, lr
 800ea34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ea38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ea3c:	b29b      	uxth	r3, r3
 800ea3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ea42:	45b9      	cmp	r9, r7
 800ea44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ea48:	f840 3b04 	str.w	r3, [r0], #4
 800ea4c:	d2e8      	bcs.n	800ea20 <quorem+0xb0>
 800ea4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ea52:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ea56:	b92a      	cbnz	r2, 800ea64 <quorem+0xf4>
 800ea58:	3b04      	subs	r3, #4
 800ea5a:	429e      	cmp	r6, r3
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	d30b      	bcc.n	800ea78 <quorem+0x108>
 800ea60:	f8c8 4010 	str.w	r4, [r8, #16]
 800ea64:	4628      	mov	r0, r5
 800ea66:	b003      	add	sp, #12
 800ea68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea6c:	6812      	ldr	r2, [r2, #0]
 800ea6e:	3b04      	subs	r3, #4
 800ea70:	2a00      	cmp	r2, #0
 800ea72:	d1ca      	bne.n	800ea0a <quorem+0x9a>
 800ea74:	3c01      	subs	r4, #1
 800ea76:	e7c5      	b.n	800ea04 <quorem+0x94>
 800ea78:	6812      	ldr	r2, [r2, #0]
 800ea7a:	3b04      	subs	r3, #4
 800ea7c:	2a00      	cmp	r2, #0
 800ea7e:	d1ef      	bne.n	800ea60 <quorem+0xf0>
 800ea80:	3c01      	subs	r4, #1
 800ea82:	e7ea      	b.n	800ea5a <quorem+0xea>
 800ea84:	2000      	movs	r0, #0
 800ea86:	e7ee      	b.n	800ea66 <quorem+0xf6>

0800ea88 <_dtoa_r>:
 800ea88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea8c:	ec57 6b10 	vmov	r6, r7, d0
 800ea90:	b097      	sub	sp, #92	; 0x5c
 800ea92:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ea94:	9106      	str	r1, [sp, #24]
 800ea96:	4604      	mov	r4, r0
 800ea98:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea9a:	9312      	str	r3, [sp, #72]	; 0x48
 800ea9c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800eaa0:	e9cd 6700 	strd	r6, r7, [sp]
 800eaa4:	b93d      	cbnz	r5, 800eab6 <_dtoa_r+0x2e>
 800eaa6:	2010      	movs	r0, #16
 800eaa8:	f7fe ff8c 	bl	800d9c4 <malloc>
 800eaac:	6260      	str	r0, [r4, #36]	; 0x24
 800eaae:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800eab2:	6005      	str	r5, [r0, #0]
 800eab4:	60c5      	str	r5, [r0, #12]
 800eab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eab8:	6819      	ldr	r1, [r3, #0]
 800eaba:	b151      	cbz	r1, 800ead2 <_dtoa_r+0x4a>
 800eabc:	685a      	ldr	r2, [r3, #4]
 800eabe:	604a      	str	r2, [r1, #4]
 800eac0:	2301      	movs	r3, #1
 800eac2:	4093      	lsls	r3, r2
 800eac4:	608b      	str	r3, [r1, #8]
 800eac6:	4620      	mov	r0, r4
 800eac8:	f000 ffe3 	bl	800fa92 <_Bfree>
 800eacc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eace:	2200      	movs	r2, #0
 800ead0:	601a      	str	r2, [r3, #0]
 800ead2:	1e3b      	subs	r3, r7, #0
 800ead4:	bfbb      	ittet	lt
 800ead6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800eada:	9301      	strlt	r3, [sp, #4]
 800eadc:	2300      	movge	r3, #0
 800eade:	2201      	movlt	r2, #1
 800eae0:	bfac      	ite	ge
 800eae2:	f8c8 3000 	strge.w	r3, [r8]
 800eae6:	f8c8 2000 	strlt.w	r2, [r8]
 800eaea:	4baf      	ldr	r3, [pc, #700]	; (800eda8 <_dtoa_r+0x320>)
 800eaec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eaf0:	ea33 0308 	bics.w	r3, r3, r8
 800eaf4:	d114      	bne.n	800eb20 <_dtoa_r+0x98>
 800eaf6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eaf8:	f242 730f 	movw	r3, #9999	; 0x270f
 800eafc:	6013      	str	r3, [r2, #0]
 800eafe:	9b00      	ldr	r3, [sp, #0]
 800eb00:	b923      	cbnz	r3, 800eb0c <_dtoa_r+0x84>
 800eb02:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f000 8542 	beq.w	800f590 <_dtoa_r+0xb08>
 800eb0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb0e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800edbc <_dtoa_r+0x334>
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f000 8544 	beq.w	800f5a0 <_dtoa_r+0xb18>
 800eb18:	f10b 0303 	add.w	r3, fp, #3
 800eb1c:	f000 bd3e 	b.w	800f59c <_dtoa_r+0xb14>
 800eb20:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb24:	2200      	movs	r2, #0
 800eb26:	2300      	movs	r3, #0
 800eb28:	4630      	mov	r0, r6
 800eb2a:	4639      	mov	r1, r7
 800eb2c:	f7f1 ffec 	bl	8000b08 <__aeabi_dcmpeq>
 800eb30:	4681      	mov	r9, r0
 800eb32:	b168      	cbz	r0, 800eb50 <_dtoa_r+0xc8>
 800eb34:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800eb36:	2301      	movs	r3, #1
 800eb38:	6013      	str	r3, [r2, #0]
 800eb3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f000 8524 	beq.w	800f58a <_dtoa_r+0xb02>
 800eb42:	4b9a      	ldr	r3, [pc, #616]	; (800edac <_dtoa_r+0x324>)
 800eb44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800eb46:	f103 3bff 	add.w	fp, r3, #4294967295
 800eb4a:	6013      	str	r3, [r2, #0]
 800eb4c:	f000 bd28 	b.w	800f5a0 <_dtoa_r+0xb18>
 800eb50:	aa14      	add	r2, sp, #80	; 0x50
 800eb52:	a915      	add	r1, sp, #84	; 0x54
 800eb54:	ec47 6b10 	vmov	d0, r6, r7
 800eb58:	4620      	mov	r0, r4
 800eb5a:	f001 f9f2 	bl	800ff42 <__d2b>
 800eb5e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800eb62:	9004      	str	r0, [sp, #16]
 800eb64:	2d00      	cmp	r5, #0
 800eb66:	d07c      	beq.n	800ec62 <_dtoa_r+0x1da>
 800eb68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb6c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800eb70:	46b2      	mov	sl, r6
 800eb72:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800eb76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800eb7a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800eb7e:	2200      	movs	r2, #0
 800eb80:	4b8b      	ldr	r3, [pc, #556]	; (800edb0 <_dtoa_r+0x328>)
 800eb82:	4650      	mov	r0, sl
 800eb84:	4659      	mov	r1, fp
 800eb86:	f7f1 fb9f 	bl	80002c8 <__aeabi_dsub>
 800eb8a:	a381      	add	r3, pc, #516	; (adr r3, 800ed90 <_dtoa_r+0x308>)
 800eb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb90:	f7f1 fd52 	bl	8000638 <__aeabi_dmul>
 800eb94:	a380      	add	r3, pc, #512	; (adr r3, 800ed98 <_dtoa_r+0x310>)
 800eb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb9a:	f7f1 fb97 	bl	80002cc <__adddf3>
 800eb9e:	4606      	mov	r6, r0
 800eba0:	4628      	mov	r0, r5
 800eba2:	460f      	mov	r7, r1
 800eba4:	f7f1 fcde 	bl	8000564 <__aeabi_i2d>
 800eba8:	a37d      	add	r3, pc, #500	; (adr r3, 800eda0 <_dtoa_r+0x318>)
 800ebaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebae:	f7f1 fd43 	bl	8000638 <__aeabi_dmul>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	4630      	mov	r0, r6
 800ebb8:	4639      	mov	r1, r7
 800ebba:	f7f1 fb87 	bl	80002cc <__adddf3>
 800ebbe:	4606      	mov	r6, r0
 800ebc0:	460f      	mov	r7, r1
 800ebc2:	f7f1 ffe9 	bl	8000b98 <__aeabi_d2iz>
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	4682      	mov	sl, r0
 800ebca:	2300      	movs	r3, #0
 800ebcc:	4630      	mov	r0, r6
 800ebce:	4639      	mov	r1, r7
 800ebd0:	f7f1 ffa4 	bl	8000b1c <__aeabi_dcmplt>
 800ebd4:	b148      	cbz	r0, 800ebea <_dtoa_r+0x162>
 800ebd6:	4650      	mov	r0, sl
 800ebd8:	f7f1 fcc4 	bl	8000564 <__aeabi_i2d>
 800ebdc:	4632      	mov	r2, r6
 800ebde:	463b      	mov	r3, r7
 800ebe0:	f7f1 ff92 	bl	8000b08 <__aeabi_dcmpeq>
 800ebe4:	b908      	cbnz	r0, 800ebea <_dtoa_r+0x162>
 800ebe6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ebea:	f1ba 0f16 	cmp.w	sl, #22
 800ebee:	d859      	bhi.n	800eca4 <_dtoa_r+0x21c>
 800ebf0:	4970      	ldr	r1, [pc, #448]	; (800edb4 <_dtoa_r+0x32c>)
 800ebf2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ebf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebfa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebfe:	f7f1 ffab 	bl	8000b58 <__aeabi_dcmpgt>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d050      	beq.n	800eca8 <_dtoa_r+0x220>
 800ec06:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ec10:	1b5d      	subs	r5, r3, r5
 800ec12:	f1b5 0801 	subs.w	r8, r5, #1
 800ec16:	bf49      	itett	mi
 800ec18:	f1c5 0301 	rsbmi	r3, r5, #1
 800ec1c:	2300      	movpl	r3, #0
 800ec1e:	9305      	strmi	r3, [sp, #20]
 800ec20:	f04f 0800 	movmi.w	r8, #0
 800ec24:	bf58      	it	pl
 800ec26:	9305      	strpl	r3, [sp, #20]
 800ec28:	f1ba 0f00 	cmp.w	sl, #0
 800ec2c:	db3e      	blt.n	800ecac <_dtoa_r+0x224>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	44d0      	add	r8, sl
 800ec32:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ec36:	9307      	str	r3, [sp, #28]
 800ec38:	9b06      	ldr	r3, [sp, #24]
 800ec3a:	2b09      	cmp	r3, #9
 800ec3c:	f200 8090 	bhi.w	800ed60 <_dtoa_r+0x2d8>
 800ec40:	2b05      	cmp	r3, #5
 800ec42:	bfc4      	itt	gt
 800ec44:	3b04      	subgt	r3, #4
 800ec46:	9306      	strgt	r3, [sp, #24]
 800ec48:	9b06      	ldr	r3, [sp, #24]
 800ec4a:	f1a3 0302 	sub.w	r3, r3, #2
 800ec4e:	bfcc      	ite	gt
 800ec50:	2500      	movgt	r5, #0
 800ec52:	2501      	movle	r5, #1
 800ec54:	2b03      	cmp	r3, #3
 800ec56:	f200 808f 	bhi.w	800ed78 <_dtoa_r+0x2f0>
 800ec5a:	e8df f003 	tbb	[pc, r3]
 800ec5e:	7f7d      	.short	0x7f7d
 800ec60:	7131      	.short	0x7131
 800ec62:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800ec66:	441d      	add	r5, r3
 800ec68:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800ec6c:	2820      	cmp	r0, #32
 800ec6e:	dd13      	ble.n	800ec98 <_dtoa_r+0x210>
 800ec70:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800ec74:	9b00      	ldr	r3, [sp, #0]
 800ec76:	fa08 f800 	lsl.w	r8, r8, r0
 800ec7a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800ec7e:	fa23 f000 	lsr.w	r0, r3, r0
 800ec82:	ea48 0000 	orr.w	r0, r8, r0
 800ec86:	f7f1 fc5d 	bl	8000544 <__aeabi_ui2d>
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	4682      	mov	sl, r0
 800ec8e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800ec92:	3d01      	subs	r5, #1
 800ec94:	9313      	str	r3, [sp, #76]	; 0x4c
 800ec96:	e772      	b.n	800eb7e <_dtoa_r+0xf6>
 800ec98:	9b00      	ldr	r3, [sp, #0]
 800ec9a:	f1c0 0020 	rsb	r0, r0, #32
 800ec9e:	fa03 f000 	lsl.w	r0, r3, r0
 800eca2:	e7f0      	b.n	800ec86 <_dtoa_r+0x1fe>
 800eca4:	2301      	movs	r3, #1
 800eca6:	e7b1      	b.n	800ec0c <_dtoa_r+0x184>
 800eca8:	900f      	str	r0, [sp, #60]	; 0x3c
 800ecaa:	e7b0      	b.n	800ec0e <_dtoa_r+0x186>
 800ecac:	9b05      	ldr	r3, [sp, #20]
 800ecae:	eba3 030a 	sub.w	r3, r3, sl
 800ecb2:	9305      	str	r3, [sp, #20]
 800ecb4:	f1ca 0300 	rsb	r3, sl, #0
 800ecb8:	9307      	str	r3, [sp, #28]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	930e      	str	r3, [sp, #56]	; 0x38
 800ecbe:	e7bb      	b.n	800ec38 <_dtoa_r+0x1b0>
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	930a      	str	r3, [sp, #40]	; 0x28
 800ecc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	dd59      	ble.n	800ed7e <_dtoa_r+0x2f6>
 800ecca:	9302      	str	r3, [sp, #8]
 800eccc:	4699      	mov	r9, r3
 800ecce:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	6072      	str	r2, [r6, #4]
 800ecd4:	2204      	movs	r2, #4
 800ecd6:	f102 0014 	add.w	r0, r2, #20
 800ecda:	4298      	cmp	r0, r3
 800ecdc:	6871      	ldr	r1, [r6, #4]
 800ecde:	d953      	bls.n	800ed88 <_dtoa_r+0x300>
 800ece0:	4620      	mov	r0, r4
 800ece2:	f000 fea2 	bl	800fa2a <_Balloc>
 800ece6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ece8:	6030      	str	r0, [r6, #0]
 800ecea:	f1b9 0f0e 	cmp.w	r9, #14
 800ecee:	f8d3 b000 	ldr.w	fp, [r3]
 800ecf2:	f200 80e6 	bhi.w	800eec2 <_dtoa_r+0x43a>
 800ecf6:	2d00      	cmp	r5, #0
 800ecf8:	f000 80e3 	beq.w	800eec2 <_dtoa_r+0x43a>
 800ecfc:	ed9d 7b00 	vldr	d7, [sp]
 800ed00:	f1ba 0f00 	cmp.w	sl, #0
 800ed04:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ed08:	dd74      	ble.n	800edf4 <_dtoa_r+0x36c>
 800ed0a:	4a2a      	ldr	r2, [pc, #168]	; (800edb4 <_dtoa_r+0x32c>)
 800ed0c:	f00a 030f 	and.w	r3, sl, #15
 800ed10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed14:	ed93 7b00 	vldr	d7, [r3]
 800ed18:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ed1c:	06f0      	lsls	r0, r6, #27
 800ed1e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ed22:	d565      	bpl.n	800edf0 <_dtoa_r+0x368>
 800ed24:	4b24      	ldr	r3, [pc, #144]	; (800edb8 <_dtoa_r+0x330>)
 800ed26:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ed2a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ed2e:	f7f1 fdad 	bl	800088c <__aeabi_ddiv>
 800ed32:	e9cd 0100 	strd	r0, r1, [sp]
 800ed36:	f006 060f 	and.w	r6, r6, #15
 800ed3a:	2503      	movs	r5, #3
 800ed3c:	4f1e      	ldr	r7, [pc, #120]	; (800edb8 <_dtoa_r+0x330>)
 800ed3e:	e04c      	b.n	800edda <_dtoa_r+0x352>
 800ed40:	2301      	movs	r3, #1
 800ed42:	930a      	str	r3, [sp, #40]	; 0x28
 800ed44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed46:	4453      	add	r3, sl
 800ed48:	f103 0901 	add.w	r9, r3, #1
 800ed4c:	9302      	str	r3, [sp, #8]
 800ed4e:	464b      	mov	r3, r9
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	bfb8      	it	lt
 800ed54:	2301      	movlt	r3, #1
 800ed56:	e7ba      	b.n	800ecce <_dtoa_r+0x246>
 800ed58:	2300      	movs	r3, #0
 800ed5a:	e7b2      	b.n	800ecc2 <_dtoa_r+0x23a>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	e7f0      	b.n	800ed42 <_dtoa_r+0x2ba>
 800ed60:	2501      	movs	r5, #1
 800ed62:	2300      	movs	r3, #0
 800ed64:	9306      	str	r3, [sp, #24]
 800ed66:	950a      	str	r5, [sp, #40]	; 0x28
 800ed68:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6c:	9302      	str	r3, [sp, #8]
 800ed6e:	4699      	mov	r9, r3
 800ed70:	2200      	movs	r2, #0
 800ed72:	2312      	movs	r3, #18
 800ed74:	920b      	str	r2, [sp, #44]	; 0x2c
 800ed76:	e7aa      	b.n	800ecce <_dtoa_r+0x246>
 800ed78:	2301      	movs	r3, #1
 800ed7a:	930a      	str	r3, [sp, #40]	; 0x28
 800ed7c:	e7f4      	b.n	800ed68 <_dtoa_r+0x2e0>
 800ed7e:	2301      	movs	r3, #1
 800ed80:	9302      	str	r3, [sp, #8]
 800ed82:	4699      	mov	r9, r3
 800ed84:	461a      	mov	r2, r3
 800ed86:	e7f5      	b.n	800ed74 <_dtoa_r+0x2ec>
 800ed88:	3101      	adds	r1, #1
 800ed8a:	6071      	str	r1, [r6, #4]
 800ed8c:	0052      	lsls	r2, r2, #1
 800ed8e:	e7a2      	b.n	800ecd6 <_dtoa_r+0x24e>
 800ed90:	636f4361 	.word	0x636f4361
 800ed94:	3fd287a7 	.word	0x3fd287a7
 800ed98:	8b60c8b3 	.word	0x8b60c8b3
 800ed9c:	3fc68a28 	.word	0x3fc68a28
 800eda0:	509f79fb 	.word	0x509f79fb
 800eda4:	3fd34413 	.word	0x3fd34413
 800eda8:	7ff00000 	.word	0x7ff00000
 800edac:	08012712 	.word	0x08012712
 800edb0:	3ff80000 	.word	0x3ff80000
 800edb4:	080127d0 	.word	0x080127d0
 800edb8:	080127a8 	.word	0x080127a8
 800edbc:	0801273e 	.word	0x0801273e
 800edc0:	07f1      	lsls	r1, r6, #31
 800edc2:	d508      	bpl.n	800edd6 <_dtoa_r+0x34e>
 800edc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800edc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800edcc:	f7f1 fc34 	bl	8000638 <__aeabi_dmul>
 800edd0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800edd4:	3501      	adds	r5, #1
 800edd6:	1076      	asrs	r6, r6, #1
 800edd8:	3708      	adds	r7, #8
 800edda:	2e00      	cmp	r6, #0
 800eddc:	d1f0      	bne.n	800edc0 <_dtoa_r+0x338>
 800edde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ede2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ede6:	f7f1 fd51 	bl	800088c <__aeabi_ddiv>
 800edea:	e9cd 0100 	strd	r0, r1, [sp]
 800edee:	e01a      	b.n	800ee26 <_dtoa_r+0x39e>
 800edf0:	2502      	movs	r5, #2
 800edf2:	e7a3      	b.n	800ed3c <_dtoa_r+0x2b4>
 800edf4:	f000 80a0 	beq.w	800ef38 <_dtoa_r+0x4b0>
 800edf8:	f1ca 0600 	rsb	r6, sl, #0
 800edfc:	4b9f      	ldr	r3, [pc, #636]	; (800f07c <_dtoa_r+0x5f4>)
 800edfe:	4fa0      	ldr	r7, [pc, #640]	; (800f080 <_dtoa_r+0x5f8>)
 800ee00:	f006 020f 	and.w	r2, r6, #15
 800ee04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ee10:	f7f1 fc12 	bl	8000638 <__aeabi_dmul>
 800ee14:	e9cd 0100 	strd	r0, r1, [sp]
 800ee18:	1136      	asrs	r6, r6, #4
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	2502      	movs	r5, #2
 800ee1e:	2e00      	cmp	r6, #0
 800ee20:	d17f      	bne.n	800ef22 <_dtoa_r+0x49a>
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d1e1      	bne.n	800edea <_dtoa_r+0x362>
 800ee26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 8087 	beq.w	800ef3c <_dtoa_r+0x4b4>
 800ee2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ee32:	2200      	movs	r2, #0
 800ee34:	4b93      	ldr	r3, [pc, #588]	; (800f084 <_dtoa_r+0x5fc>)
 800ee36:	4630      	mov	r0, r6
 800ee38:	4639      	mov	r1, r7
 800ee3a:	f7f1 fe6f 	bl	8000b1c <__aeabi_dcmplt>
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	d07c      	beq.n	800ef3c <_dtoa_r+0x4b4>
 800ee42:	f1b9 0f00 	cmp.w	r9, #0
 800ee46:	d079      	beq.n	800ef3c <_dtoa_r+0x4b4>
 800ee48:	9b02      	ldr	r3, [sp, #8]
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	dd35      	ble.n	800eeba <_dtoa_r+0x432>
 800ee4e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ee52:	9308      	str	r3, [sp, #32]
 800ee54:	4639      	mov	r1, r7
 800ee56:	2200      	movs	r2, #0
 800ee58:	4b8b      	ldr	r3, [pc, #556]	; (800f088 <_dtoa_r+0x600>)
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7f1 fbec 	bl	8000638 <__aeabi_dmul>
 800ee60:	e9cd 0100 	strd	r0, r1, [sp]
 800ee64:	9f02      	ldr	r7, [sp, #8]
 800ee66:	3501      	adds	r5, #1
 800ee68:	4628      	mov	r0, r5
 800ee6a:	f7f1 fb7b 	bl	8000564 <__aeabi_i2d>
 800ee6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee72:	f7f1 fbe1 	bl	8000638 <__aeabi_dmul>
 800ee76:	2200      	movs	r2, #0
 800ee78:	4b84      	ldr	r3, [pc, #528]	; (800f08c <_dtoa_r+0x604>)
 800ee7a:	f7f1 fa27 	bl	80002cc <__adddf3>
 800ee7e:	4605      	mov	r5, r0
 800ee80:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ee84:	2f00      	cmp	r7, #0
 800ee86:	d15d      	bne.n	800ef44 <_dtoa_r+0x4bc>
 800ee88:	2200      	movs	r2, #0
 800ee8a:	4b81      	ldr	r3, [pc, #516]	; (800f090 <_dtoa_r+0x608>)
 800ee8c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee90:	f7f1 fa1a 	bl	80002c8 <__aeabi_dsub>
 800ee94:	462a      	mov	r2, r5
 800ee96:	4633      	mov	r3, r6
 800ee98:	e9cd 0100 	strd	r0, r1, [sp]
 800ee9c:	f7f1 fe5c 	bl	8000b58 <__aeabi_dcmpgt>
 800eea0:	2800      	cmp	r0, #0
 800eea2:	f040 8288 	bne.w	800f3b6 <_dtoa_r+0x92e>
 800eea6:	462a      	mov	r2, r5
 800eea8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eeac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eeb0:	f7f1 fe34 	bl	8000b1c <__aeabi_dcmplt>
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	f040 827c 	bne.w	800f3b2 <_dtoa_r+0x92a>
 800eeba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eebe:	e9cd 2300 	strd	r2, r3, [sp]
 800eec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	f2c0 8150 	blt.w	800f16a <_dtoa_r+0x6e2>
 800eeca:	f1ba 0f0e 	cmp.w	sl, #14
 800eece:	f300 814c 	bgt.w	800f16a <_dtoa_r+0x6e2>
 800eed2:	4b6a      	ldr	r3, [pc, #424]	; (800f07c <_dtoa_r+0x5f4>)
 800eed4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eed8:	ed93 7b00 	vldr	d7, [r3]
 800eedc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eede:	2b00      	cmp	r3, #0
 800eee0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800eee4:	f280 80d8 	bge.w	800f098 <_dtoa_r+0x610>
 800eee8:	f1b9 0f00 	cmp.w	r9, #0
 800eeec:	f300 80d4 	bgt.w	800f098 <_dtoa_r+0x610>
 800eef0:	f040 825e 	bne.w	800f3b0 <_dtoa_r+0x928>
 800eef4:	2200      	movs	r2, #0
 800eef6:	4b66      	ldr	r3, [pc, #408]	; (800f090 <_dtoa_r+0x608>)
 800eef8:	ec51 0b17 	vmov	r0, r1, d7
 800eefc:	f7f1 fb9c 	bl	8000638 <__aeabi_dmul>
 800ef00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef04:	f7f1 fe1e 	bl	8000b44 <__aeabi_dcmpge>
 800ef08:	464f      	mov	r7, r9
 800ef0a:	464e      	mov	r6, r9
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	f040 8234 	bne.w	800f37a <_dtoa_r+0x8f2>
 800ef12:	2331      	movs	r3, #49	; 0x31
 800ef14:	f10b 0501 	add.w	r5, fp, #1
 800ef18:	f88b 3000 	strb.w	r3, [fp]
 800ef1c:	f10a 0a01 	add.w	sl, sl, #1
 800ef20:	e22f      	b.n	800f382 <_dtoa_r+0x8fa>
 800ef22:	07f2      	lsls	r2, r6, #31
 800ef24:	d505      	bpl.n	800ef32 <_dtoa_r+0x4aa>
 800ef26:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef2a:	f7f1 fb85 	bl	8000638 <__aeabi_dmul>
 800ef2e:	3501      	adds	r5, #1
 800ef30:	2301      	movs	r3, #1
 800ef32:	1076      	asrs	r6, r6, #1
 800ef34:	3708      	adds	r7, #8
 800ef36:	e772      	b.n	800ee1e <_dtoa_r+0x396>
 800ef38:	2502      	movs	r5, #2
 800ef3a:	e774      	b.n	800ee26 <_dtoa_r+0x39e>
 800ef3c:	f8cd a020 	str.w	sl, [sp, #32]
 800ef40:	464f      	mov	r7, r9
 800ef42:	e791      	b.n	800ee68 <_dtoa_r+0x3e0>
 800ef44:	4b4d      	ldr	r3, [pc, #308]	; (800f07c <_dtoa_r+0x5f4>)
 800ef46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ef4a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ef4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d047      	beq.n	800efe4 <_dtoa_r+0x55c>
 800ef54:	4602      	mov	r2, r0
 800ef56:	460b      	mov	r3, r1
 800ef58:	2000      	movs	r0, #0
 800ef5a:	494e      	ldr	r1, [pc, #312]	; (800f094 <_dtoa_r+0x60c>)
 800ef5c:	f7f1 fc96 	bl	800088c <__aeabi_ddiv>
 800ef60:	462a      	mov	r2, r5
 800ef62:	4633      	mov	r3, r6
 800ef64:	f7f1 f9b0 	bl	80002c8 <__aeabi_dsub>
 800ef68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ef6c:	465d      	mov	r5, fp
 800ef6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef72:	f7f1 fe11 	bl	8000b98 <__aeabi_d2iz>
 800ef76:	4606      	mov	r6, r0
 800ef78:	f7f1 faf4 	bl	8000564 <__aeabi_i2d>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	460b      	mov	r3, r1
 800ef80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef84:	f7f1 f9a0 	bl	80002c8 <__aeabi_dsub>
 800ef88:	3630      	adds	r6, #48	; 0x30
 800ef8a:	f805 6b01 	strb.w	r6, [r5], #1
 800ef8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ef92:	e9cd 0100 	strd	r0, r1, [sp]
 800ef96:	f7f1 fdc1 	bl	8000b1c <__aeabi_dcmplt>
 800ef9a:	2800      	cmp	r0, #0
 800ef9c:	d163      	bne.n	800f066 <_dtoa_r+0x5de>
 800ef9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efa2:	2000      	movs	r0, #0
 800efa4:	4937      	ldr	r1, [pc, #220]	; (800f084 <_dtoa_r+0x5fc>)
 800efa6:	f7f1 f98f 	bl	80002c8 <__aeabi_dsub>
 800efaa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800efae:	f7f1 fdb5 	bl	8000b1c <__aeabi_dcmplt>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	f040 80b7 	bne.w	800f126 <_dtoa_r+0x69e>
 800efb8:	eba5 030b 	sub.w	r3, r5, fp
 800efbc:	429f      	cmp	r7, r3
 800efbe:	f77f af7c 	ble.w	800eeba <_dtoa_r+0x432>
 800efc2:	2200      	movs	r2, #0
 800efc4:	4b30      	ldr	r3, [pc, #192]	; (800f088 <_dtoa_r+0x600>)
 800efc6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800efca:	f7f1 fb35 	bl	8000638 <__aeabi_dmul>
 800efce:	2200      	movs	r2, #0
 800efd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800efd4:	4b2c      	ldr	r3, [pc, #176]	; (800f088 <_dtoa_r+0x600>)
 800efd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efda:	f7f1 fb2d 	bl	8000638 <__aeabi_dmul>
 800efde:	e9cd 0100 	strd	r0, r1, [sp]
 800efe2:	e7c4      	b.n	800ef6e <_dtoa_r+0x4e6>
 800efe4:	462a      	mov	r2, r5
 800efe6:	4633      	mov	r3, r6
 800efe8:	f7f1 fb26 	bl	8000638 <__aeabi_dmul>
 800efec:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800eff0:	eb0b 0507 	add.w	r5, fp, r7
 800eff4:	465e      	mov	r6, fp
 800eff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800effa:	f7f1 fdcd 	bl	8000b98 <__aeabi_d2iz>
 800effe:	4607      	mov	r7, r0
 800f000:	f7f1 fab0 	bl	8000564 <__aeabi_i2d>
 800f004:	3730      	adds	r7, #48	; 0x30
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f00e:	f7f1 f95b 	bl	80002c8 <__aeabi_dsub>
 800f012:	f806 7b01 	strb.w	r7, [r6], #1
 800f016:	42ae      	cmp	r6, r5
 800f018:	e9cd 0100 	strd	r0, r1, [sp]
 800f01c:	f04f 0200 	mov.w	r2, #0
 800f020:	d126      	bne.n	800f070 <_dtoa_r+0x5e8>
 800f022:	4b1c      	ldr	r3, [pc, #112]	; (800f094 <_dtoa_r+0x60c>)
 800f024:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f028:	f7f1 f950 	bl	80002cc <__adddf3>
 800f02c:	4602      	mov	r2, r0
 800f02e:	460b      	mov	r3, r1
 800f030:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f034:	f7f1 fd90 	bl	8000b58 <__aeabi_dcmpgt>
 800f038:	2800      	cmp	r0, #0
 800f03a:	d174      	bne.n	800f126 <_dtoa_r+0x69e>
 800f03c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f040:	2000      	movs	r0, #0
 800f042:	4914      	ldr	r1, [pc, #80]	; (800f094 <_dtoa_r+0x60c>)
 800f044:	f7f1 f940 	bl	80002c8 <__aeabi_dsub>
 800f048:	4602      	mov	r2, r0
 800f04a:	460b      	mov	r3, r1
 800f04c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f050:	f7f1 fd64 	bl	8000b1c <__aeabi_dcmplt>
 800f054:	2800      	cmp	r0, #0
 800f056:	f43f af30 	beq.w	800eeba <_dtoa_r+0x432>
 800f05a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f05e:	2b30      	cmp	r3, #48	; 0x30
 800f060:	f105 32ff 	add.w	r2, r5, #4294967295
 800f064:	d002      	beq.n	800f06c <_dtoa_r+0x5e4>
 800f066:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f06a:	e04a      	b.n	800f102 <_dtoa_r+0x67a>
 800f06c:	4615      	mov	r5, r2
 800f06e:	e7f4      	b.n	800f05a <_dtoa_r+0x5d2>
 800f070:	4b05      	ldr	r3, [pc, #20]	; (800f088 <_dtoa_r+0x600>)
 800f072:	f7f1 fae1 	bl	8000638 <__aeabi_dmul>
 800f076:	e9cd 0100 	strd	r0, r1, [sp]
 800f07a:	e7bc      	b.n	800eff6 <_dtoa_r+0x56e>
 800f07c:	080127d0 	.word	0x080127d0
 800f080:	080127a8 	.word	0x080127a8
 800f084:	3ff00000 	.word	0x3ff00000
 800f088:	40240000 	.word	0x40240000
 800f08c:	401c0000 	.word	0x401c0000
 800f090:	40140000 	.word	0x40140000
 800f094:	3fe00000 	.word	0x3fe00000
 800f098:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f09c:	465d      	mov	r5, fp
 800f09e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	f7f1 fbf1 	bl	800088c <__aeabi_ddiv>
 800f0aa:	f7f1 fd75 	bl	8000b98 <__aeabi_d2iz>
 800f0ae:	4680      	mov	r8, r0
 800f0b0:	f7f1 fa58 	bl	8000564 <__aeabi_i2d>
 800f0b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0b8:	f7f1 fabe 	bl	8000638 <__aeabi_dmul>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f0c8:	f7f1 f8fe 	bl	80002c8 <__aeabi_dsub>
 800f0cc:	f805 6b01 	strb.w	r6, [r5], #1
 800f0d0:	eba5 060b 	sub.w	r6, r5, fp
 800f0d4:	45b1      	cmp	r9, r6
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	460b      	mov	r3, r1
 800f0da:	d139      	bne.n	800f150 <_dtoa_r+0x6c8>
 800f0dc:	f7f1 f8f6 	bl	80002cc <__adddf3>
 800f0e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	460f      	mov	r7, r1
 800f0e8:	f7f1 fd36 	bl	8000b58 <__aeabi_dcmpgt>
 800f0ec:	b9c8      	cbnz	r0, 800f122 <_dtoa_r+0x69a>
 800f0ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	f7f1 fd07 	bl	8000b08 <__aeabi_dcmpeq>
 800f0fa:	b110      	cbz	r0, 800f102 <_dtoa_r+0x67a>
 800f0fc:	f018 0f01 	tst.w	r8, #1
 800f100:	d10f      	bne.n	800f122 <_dtoa_r+0x69a>
 800f102:	9904      	ldr	r1, [sp, #16]
 800f104:	4620      	mov	r0, r4
 800f106:	f000 fcc4 	bl	800fa92 <_Bfree>
 800f10a:	2300      	movs	r3, #0
 800f10c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f10e:	702b      	strb	r3, [r5, #0]
 800f110:	f10a 0301 	add.w	r3, sl, #1
 800f114:	6013      	str	r3, [r2, #0]
 800f116:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f118:	2b00      	cmp	r3, #0
 800f11a:	f000 8241 	beq.w	800f5a0 <_dtoa_r+0xb18>
 800f11e:	601d      	str	r5, [r3, #0]
 800f120:	e23e      	b.n	800f5a0 <_dtoa_r+0xb18>
 800f122:	f8cd a020 	str.w	sl, [sp, #32]
 800f126:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f12a:	2a39      	cmp	r2, #57	; 0x39
 800f12c:	f105 33ff 	add.w	r3, r5, #4294967295
 800f130:	d108      	bne.n	800f144 <_dtoa_r+0x6bc>
 800f132:	459b      	cmp	fp, r3
 800f134:	d10a      	bne.n	800f14c <_dtoa_r+0x6c4>
 800f136:	9b08      	ldr	r3, [sp, #32]
 800f138:	3301      	adds	r3, #1
 800f13a:	9308      	str	r3, [sp, #32]
 800f13c:	2330      	movs	r3, #48	; 0x30
 800f13e:	f88b 3000 	strb.w	r3, [fp]
 800f142:	465b      	mov	r3, fp
 800f144:	781a      	ldrb	r2, [r3, #0]
 800f146:	3201      	adds	r2, #1
 800f148:	701a      	strb	r2, [r3, #0]
 800f14a:	e78c      	b.n	800f066 <_dtoa_r+0x5de>
 800f14c:	461d      	mov	r5, r3
 800f14e:	e7ea      	b.n	800f126 <_dtoa_r+0x69e>
 800f150:	2200      	movs	r2, #0
 800f152:	4b9b      	ldr	r3, [pc, #620]	; (800f3c0 <_dtoa_r+0x938>)
 800f154:	f7f1 fa70 	bl	8000638 <__aeabi_dmul>
 800f158:	2200      	movs	r2, #0
 800f15a:	2300      	movs	r3, #0
 800f15c:	4606      	mov	r6, r0
 800f15e:	460f      	mov	r7, r1
 800f160:	f7f1 fcd2 	bl	8000b08 <__aeabi_dcmpeq>
 800f164:	2800      	cmp	r0, #0
 800f166:	d09a      	beq.n	800f09e <_dtoa_r+0x616>
 800f168:	e7cb      	b.n	800f102 <_dtoa_r+0x67a>
 800f16a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f16c:	2a00      	cmp	r2, #0
 800f16e:	f000 808b 	beq.w	800f288 <_dtoa_r+0x800>
 800f172:	9a06      	ldr	r2, [sp, #24]
 800f174:	2a01      	cmp	r2, #1
 800f176:	dc6e      	bgt.n	800f256 <_dtoa_r+0x7ce>
 800f178:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f17a:	2a00      	cmp	r2, #0
 800f17c:	d067      	beq.n	800f24e <_dtoa_r+0x7c6>
 800f17e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f182:	9f07      	ldr	r7, [sp, #28]
 800f184:	9d05      	ldr	r5, [sp, #20]
 800f186:	9a05      	ldr	r2, [sp, #20]
 800f188:	2101      	movs	r1, #1
 800f18a:	441a      	add	r2, r3
 800f18c:	4620      	mov	r0, r4
 800f18e:	9205      	str	r2, [sp, #20]
 800f190:	4498      	add	r8, r3
 800f192:	f000 fd1e 	bl	800fbd2 <__i2b>
 800f196:	4606      	mov	r6, r0
 800f198:	2d00      	cmp	r5, #0
 800f19a:	dd0c      	ble.n	800f1b6 <_dtoa_r+0x72e>
 800f19c:	f1b8 0f00 	cmp.w	r8, #0
 800f1a0:	dd09      	ble.n	800f1b6 <_dtoa_r+0x72e>
 800f1a2:	4545      	cmp	r5, r8
 800f1a4:	9a05      	ldr	r2, [sp, #20]
 800f1a6:	462b      	mov	r3, r5
 800f1a8:	bfa8      	it	ge
 800f1aa:	4643      	movge	r3, r8
 800f1ac:	1ad2      	subs	r2, r2, r3
 800f1ae:	9205      	str	r2, [sp, #20]
 800f1b0:	1aed      	subs	r5, r5, r3
 800f1b2:	eba8 0803 	sub.w	r8, r8, r3
 800f1b6:	9b07      	ldr	r3, [sp, #28]
 800f1b8:	b1eb      	cbz	r3, 800f1f6 <_dtoa_r+0x76e>
 800f1ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d067      	beq.n	800f290 <_dtoa_r+0x808>
 800f1c0:	b18f      	cbz	r7, 800f1e6 <_dtoa_r+0x75e>
 800f1c2:	4631      	mov	r1, r6
 800f1c4:	463a      	mov	r2, r7
 800f1c6:	4620      	mov	r0, r4
 800f1c8:	f000 fda2 	bl	800fd10 <__pow5mult>
 800f1cc:	9a04      	ldr	r2, [sp, #16]
 800f1ce:	4601      	mov	r1, r0
 800f1d0:	4606      	mov	r6, r0
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f000 fd06 	bl	800fbe4 <__multiply>
 800f1d8:	9904      	ldr	r1, [sp, #16]
 800f1da:	9008      	str	r0, [sp, #32]
 800f1dc:	4620      	mov	r0, r4
 800f1de:	f000 fc58 	bl	800fa92 <_Bfree>
 800f1e2:	9b08      	ldr	r3, [sp, #32]
 800f1e4:	9304      	str	r3, [sp, #16]
 800f1e6:	9b07      	ldr	r3, [sp, #28]
 800f1e8:	1bda      	subs	r2, r3, r7
 800f1ea:	d004      	beq.n	800f1f6 <_dtoa_r+0x76e>
 800f1ec:	9904      	ldr	r1, [sp, #16]
 800f1ee:	4620      	mov	r0, r4
 800f1f0:	f000 fd8e 	bl	800fd10 <__pow5mult>
 800f1f4:	9004      	str	r0, [sp, #16]
 800f1f6:	2101      	movs	r1, #1
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f000 fcea 	bl	800fbd2 <__i2b>
 800f1fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f200:	4607      	mov	r7, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	f000 81d0 	beq.w	800f5a8 <_dtoa_r+0xb20>
 800f208:	461a      	mov	r2, r3
 800f20a:	4601      	mov	r1, r0
 800f20c:	4620      	mov	r0, r4
 800f20e:	f000 fd7f 	bl	800fd10 <__pow5mult>
 800f212:	9b06      	ldr	r3, [sp, #24]
 800f214:	2b01      	cmp	r3, #1
 800f216:	4607      	mov	r7, r0
 800f218:	dc40      	bgt.n	800f29c <_dtoa_r+0x814>
 800f21a:	9b00      	ldr	r3, [sp, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d139      	bne.n	800f294 <_dtoa_r+0x80c>
 800f220:	9b01      	ldr	r3, [sp, #4]
 800f222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f226:	2b00      	cmp	r3, #0
 800f228:	d136      	bne.n	800f298 <_dtoa_r+0x810>
 800f22a:	9b01      	ldr	r3, [sp, #4]
 800f22c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f230:	0d1b      	lsrs	r3, r3, #20
 800f232:	051b      	lsls	r3, r3, #20
 800f234:	b12b      	cbz	r3, 800f242 <_dtoa_r+0x7ba>
 800f236:	9b05      	ldr	r3, [sp, #20]
 800f238:	3301      	adds	r3, #1
 800f23a:	9305      	str	r3, [sp, #20]
 800f23c:	f108 0801 	add.w	r8, r8, #1
 800f240:	2301      	movs	r3, #1
 800f242:	9307      	str	r3, [sp, #28]
 800f244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f246:	2b00      	cmp	r3, #0
 800f248:	d12a      	bne.n	800f2a0 <_dtoa_r+0x818>
 800f24a:	2001      	movs	r0, #1
 800f24c:	e030      	b.n	800f2b0 <_dtoa_r+0x828>
 800f24e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f250:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f254:	e795      	b.n	800f182 <_dtoa_r+0x6fa>
 800f256:	9b07      	ldr	r3, [sp, #28]
 800f258:	f109 37ff 	add.w	r7, r9, #4294967295
 800f25c:	42bb      	cmp	r3, r7
 800f25e:	bfbf      	itttt	lt
 800f260:	9b07      	ldrlt	r3, [sp, #28]
 800f262:	9707      	strlt	r7, [sp, #28]
 800f264:	1afa      	sublt	r2, r7, r3
 800f266:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f268:	bfbb      	ittet	lt
 800f26a:	189b      	addlt	r3, r3, r2
 800f26c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f26e:	1bdf      	subge	r7, r3, r7
 800f270:	2700      	movlt	r7, #0
 800f272:	f1b9 0f00 	cmp.w	r9, #0
 800f276:	bfb5      	itete	lt
 800f278:	9b05      	ldrlt	r3, [sp, #20]
 800f27a:	9d05      	ldrge	r5, [sp, #20]
 800f27c:	eba3 0509 	sublt.w	r5, r3, r9
 800f280:	464b      	movge	r3, r9
 800f282:	bfb8      	it	lt
 800f284:	2300      	movlt	r3, #0
 800f286:	e77e      	b.n	800f186 <_dtoa_r+0x6fe>
 800f288:	9f07      	ldr	r7, [sp, #28]
 800f28a:	9d05      	ldr	r5, [sp, #20]
 800f28c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f28e:	e783      	b.n	800f198 <_dtoa_r+0x710>
 800f290:	9a07      	ldr	r2, [sp, #28]
 800f292:	e7ab      	b.n	800f1ec <_dtoa_r+0x764>
 800f294:	2300      	movs	r3, #0
 800f296:	e7d4      	b.n	800f242 <_dtoa_r+0x7ba>
 800f298:	9b00      	ldr	r3, [sp, #0]
 800f29a:	e7d2      	b.n	800f242 <_dtoa_r+0x7ba>
 800f29c:	2300      	movs	r3, #0
 800f29e:	9307      	str	r3, [sp, #28]
 800f2a0:	693b      	ldr	r3, [r7, #16]
 800f2a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f2a6:	6918      	ldr	r0, [r3, #16]
 800f2a8:	f000 fc45 	bl	800fb36 <__hi0bits>
 800f2ac:	f1c0 0020 	rsb	r0, r0, #32
 800f2b0:	4440      	add	r0, r8
 800f2b2:	f010 001f 	ands.w	r0, r0, #31
 800f2b6:	d047      	beq.n	800f348 <_dtoa_r+0x8c0>
 800f2b8:	f1c0 0320 	rsb	r3, r0, #32
 800f2bc:	2b04      	cmp	r3, #4
 800f2be:	dd3b      	ble.n	800f338 <_dtoa_r+0x8b0>
 800f2c0:	9b05      	ldr	r3, [sp, #20]
 800f2c2:	f1c0 001c 	rsb	r0, r0, #28
 800f2c6:	4403      	add	r3, r0
 800f2c8:	9305      	str	r3, [sp, #20]
 800f2ca:	4405      	add	r5, r0
 800f2cc:	4480      	add	r8, r0
 800f2ce:	9b05      	ldr	r3, [sp, #20]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	dd05      	ble.n	800f2e0 <_dtoa_r+0x858>
 800f2d4:	461a      	mov	r2, r3
 800f2d6:	9904      	ldr	r1, [sp, #16]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	f000 fd67 	bl	800fdac <__lshift>
 800f2de:	9004      	str	r0, [sp, #16]
 800f2e0:	f1b8 0f00 	cmp.w	r8, #0
 800f2e4:	dd05      	ble.n	800f2f2 <_dtoa_r+0x86a>
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f000 fd5e 	bl	800fdac <__lshift>
 800f2f0:	4607      	mov	r7, r0
 800f2f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2f4:	b353      	cbz	r3, 800f34c <_dtoa_r+0x8c4>
 800f2f6:	4639      	mov	r1, r7
 800f2f8:	9804      	ldr	r0, [sp, #16]
 800f2fa:	f000 fdab 	bl	800fe54 <__mcmp>
 800f2fe:	2800      	cmp	r0, #0
 800f300:	da24      	bge.n	800f34c <_dtoa_r+0x8c4>
 800f302:	2300      	movs	r3, #0
 800f304:	220a      	movs	r2, #10
 800f306:	9904      	ldr	r1, [sp, #16]
 800f308:	4620      	mov	r0, r4
 800f30a:	f000 fbd9 	bl	800fac0 <__multadd>
 800f30e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f310:	9004      	str	r0, [sp, #16]
 800f312:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f316:	2b00      	cmp	r3, #0
 800f318:	f000 814d 	beq.w	800f5b6 <_dtoa_r+0xb2e>
 800f31c:	2300      	movs	r3, #0
 800f31e:	4631      	mov	r1, r6
 800f320:	220a      	movs	r2, #10
 800f322:	4620      	mov	r0, r4
 800f324:	f000 fbcc 	bl	800fac0 <__multadd>
 800f328:	9b02      	ldr	r3, [sp, #8]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	4606      	mov	r6, r0
 800f32e:	dc4f      	bgt.n	800f3d0 <_dtoa_r+0x948>
 800f330:	9b06      	ldr	r3, [sp, #24]
 800f332:	2b02      	cmp	r3, #2
 800f334:	dd4c      	ble.n	800f3d0 <_dtoa_r+0x948>
 800f336:	e011      	b.n	800f35c <_dtoa_r+0x8d4>
 800f338:	d0c9      	beq.n	800f2ce <_dtoa_r+0x846>
 800f33a:	9a05      	ldr	r2, [sp, #20]
 800f33c:	331c      	adds	r3, #28
 800f33e:	441a      	add	r2, r3
 800f340:	9205      	str	r2, [sp, #20]
 800f342:	441d      	add	r5, r3
 800f344:	4498      	add	r8, r3
 800f346:	e7c2      	b.n	800f2ce <_dtoa_r+0x846>
 800f348:	4603      	mov	r3, r0
 800f34a:	e7f6      	b.n	800f33a <_dtoa_r+0x8b2>
 800f34c:	f1b9 0f00 	cmp.w	r9, #0
 800f350:	dc38      	bgt.n	800f3c4 <_dtoa_r+0x93c>
 800f352:	9b06      	ldr	r3, [sp, #24]
 800f354:	2b02      	cmp	r3, #2
 800f356:	dd35      	ble.n	800f3c4 <_dtoa_r+0x93c>
 800f358:	f8cd 9008 	str.w	r9, [sp, #8]
 800f35c:	9b02      	ldr	r3, [sp, #8]
 800f35e:	b963      	cbnz	r3, 800f37a <_dtoa_r+0x8f2>
 800f360:	4639      	mov	r1, r7
 800f362:	2205      	movs	r2, #5
 800f364:	4620      	mov	r0, r4
 800f366:	f000 fbab 	bl	800fac0 <__multadd>
 800f36a:	4601      	mov	r1, r0
 800f36c:	4607      	mov	r7, r0
 800f36e:	9804      	ldr	r0, [sp, #16]
 800f370:	f000 fd70 	bl	800fe54 <__mcmp>
 800f374:	2800      	cmp	r0, #0
 800f376:	f73f adcc 	bgt.w	800ef12 <_dtoa_r+0x48a>
 800f37a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f37c:	465d      	mov	r5, fp
 800f37e:	ea6f 0a03 	mvn.w	sl, r3
 800f382:	f04f 0900 	mov.w	r9, #0
 800f386:	4639      	mov	r1, r7
 800f388:	4620      	mov	r0, r4
 800f38a:	f000 fb82 	bl	800fa92 <_Bfree>
 800f38e:	2e00      	cmp	r6, #0
 800f390:	f43f aeb7 	beq.w	800f102 <_dtoa_r+0x67a>
 800f394:	f1b9 0f00 	cmp.w	r9, #0
 800f398:	d005      	beq.n	800f3a6 <_dtoa_r+0x91e>
 800f39a:	45b1      	cmp	r9, r6
 800f39c:	d003      	beq.n	800f3a6 <_dtoa_r+0x91e>
 800f39e:	4649      	mov	r1, r9
 800f3a0:	4620      	mov	r0, r4
 800f3a2:	f000 fb76 	bl	800fa92 <_Bfree>
 800f3a6:	4631      	mov	r1, r6
 800f3a8:	4620      	mov	r0, r4
 800f3aa:	f000 fb72 	bl	800fa92 <_Bfree>
 800f3ae:	e6a8      	b.n	800f102 <_dtoa_r+0x67a>
 800f3b0:	2700      	movs	r7, #0
 800f3b2:	463e      	mov	r6, r7
 800f3b4:	e7e1      	b.n	800f37a <_dtoa_r+0x8f2>
 800f3b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f3ba:	463e      	mov	r6, r7
 800f3bc:	e5a9      	b.n	800ef12 <_dtoa_r+0x48a>
 800f3be:	bf00      	nop
 800f3c0:	40240000 	.word	0x40240000
 800f3c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c6:	f8cd 9008 	str.w	r9, [sp, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	f000 80fa 	beq.w	800f5c4 <_dtoa_r+0xb3c>
 800f3d0:	2d00      	cmp	r5, #0
 800f3d2:	dd05      	ble.n	800f3e0 <_dtoa_r+0x958>
 800f3d4:	4631      	mov	r1, r6
 800f3d6:	462a      	mov	r2, r5
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f000 fce7 	bl	800fdac <__lshift>
 800f3de:	4606      	mov	r6, r0
 800f3e0:	9b07      	ldr	r3, [sp, #28]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d04c      	beq.n	800f480 <_dtoa_r+0x9f8>
 800f3e6:	6871      	ldr	r1, [r6, #4]
 800f3e8:	4620      	mov	r0, r4
 800f3ea:	f000 fb1e 	bl	800fa2a <_Balloc>
 800f3ee:	6932      	ldr	r2, [r6, #16]
 800f3f0:	3202      	adds	r2, #2
 800f3f2:	4605      	mov	r5, r0
 800f3f4:	0092      	lsls	r2, r2, #2
 800f3f6:	f106 010c 	add.w	r1, r6, #12
 800f3fa:	300c      	adds	r0, #12
 800f3fc:	f7fe faf2 	bl	800d9e4 <memcpy>
 800f400:	2201      	movs	r2, #1
 800f402:	4629      	mov	r1, r5
 800f404:	4620      	mov	r0, r4
 800f406:	f000 fcd1 	bl	800fdac <__lshift>
 800f40a:	9b00      	ldr	r3, [sp, #0]
 800f40c:	f8cd b014 	str.w	fp, [sp, #20]
 800f410:	f003 0301 	and.w	r3, r3, #1
 800f414:	46b1      	mov	r9, r6
 800f416:	9307      	str	r3, [sp, #28]
 800f418:	4606      	mov	r6, r0
 800f41a:	4639      	mov	r1, r7
 800f41c:	9804      	ldr	r0, [sp, #16]
 800f41e:	f7ff faa7 	bl	800e970 <quorem>
 800f422:	4649      	mov	r1, r9
 800f424:	4605      	mov	r5, r0
 800f426:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f42a:	9804      	ldr	r0, [sp, #16]
 800f42c:	f000 fd12 	bl	800fe54 <__mcmp>
 800f430:	4632      	mov	r2, r6
 800f432:	9000      	str	r0, [sp, #0]
 800f434:	4639      	mov	r1, r7
 800f436:	4620      	mov	r0, r4
 800f438:	f000 fd26 	bl	800fe88 <__mdiff>
 800f43c:	68c3      	ldr	r3, [r0, #12]
 800f43e:	4602      	mov	r2, r0
 800f440:	bb03      	cbnz	r3, 800f484 <_dtoa_r+0x9fc>
 800f442:	4601      	mov	r1, r0
 800f444:	9008      	str	r0, [sp, #32]
 800f446:	9804      	ldr	r0, [sp, #16]
 800f448:	f000 fd04 	bl	800fe54 <__mcmp>
 800f44c:	9a08      	ldr	r2, [sp, #32]
 800f44e:	4603      	mov	r3, r0
 800f450:	4611      	mov	r1, r2
 800f452:	4620      	mov	r0, r4
 800f454:	9308      	str	r3, [sp, #32]
 800f456:	f000 fb1c 	bl	800fa92 <_Bfree>
 800f45a:	9b08      	ldr	r3, [sp, #32]
 800f45c:	b9a3      	cbnz	r3, 800f488 <_dtoa_r+0xa00>
 800f45e:	9a06      	ldr	r2, [sp, #24]
 800f460:	b992      	cbnz	r2, 800f488 <_dtoa_r+0xa00>
 800f462:	9a07      	ldr	r2, [sp, #28]
 800f464:	b982      	cbnz	r2, 800f488 <_dtoa_r+0xa00>
 800f466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f46a:	d029      	beq.n	800f4c0 <_dtoa_r+0xa38>
 800f46c:	9b00      	ldr	r3, [sp, #0]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	dd01      	ble.n	800f476 <_dtoa_r+0x9ee>
 800f472:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f476:	9b05      	ldr	r3, [sp, #20]
 800f478:	1c5d      	adds	r5, r3, #1
 800f47a:	f883 8000 	strb.w	r8, [r3]
 800f47e:	e782      	b.n	800f386 <_dtoa_r+0x8fe>
 800f480:	4630      	mov	r0, r6
 800f482:	e7c2      	b.n	800f40a <_dtoa_r+0x982>
 800f484:	2301      	movs	r3, #1
 800f486:	e7e3      	b.n	800f450 <_dtoa_r+0x9c8>
 800f488:	9a00      	ldr	r2, [sp, #0]
 800f48a:	2a00      	cmp	r2, #0
 800f48c:	db04      	blt.n	800f498 <_dtoa_r+0xa10>
 800f48e:	d125      	bne.n	800f4dc <_dtoa_r+0xa54>
 800f490:	9a06      	ldr	r2, [sp, #24]
 800f492:	bb1a      	cbnz	r2, 800f4dc <_dtoa_r+0xa54>
 800f494:	9a07      	ldr	r2, [sp, #28]
 800f496:	bb0a      	cbnz	r2, 800f4dc <_dtoa_r+0xa54>
 800f498:	2b00      	cmp	r3, #0
 800f49a:	ddec      	ble.n	800f476 <_dtoa_r+0x9ee>
 800f49c:	2201      	movs	r2, #1
 800f49e:	9904      	ldr	r1, [sp, #16]
 800f4a0:	4620      	mov	r0, r4
 800f4a2:	f000 fc83 	bl	800fdac <__lshift>
 800f4a6:	4639      	mov	r1, r7
 800f4a8:	9004      	str	r0, [sp, #16]
 800f4aa:	f000 fcd3 	bl	800fe54 <__mcmp>
 800f4ae:	2800      	cmp	r0, #0
 800f4b0:	dc03      	bgt.n	800f4ba <_dtoa_r+0xa32>
 800f4b2:	d1e0      	bne.n	800f476 <_dtoa_r+0x9ee>
 800f4b4:	f018 0f01 	tst.w	r8, #1
 800f4b8:	d0dd      	beq.n	800f476 <_dtoa_r+0x9ee>
 800f4ba:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f4be:	d1d8      	bne.n	800f472 <_dtoa_r+0x9ea>
 800f4c0:	9b05      	ldr	r3, [sp, #20]
 800f4c2:	9a05      	ldr	r2, [sp, #20]
 800f4c4:	1c5d      	adds	r5, r3, #1
 800f4c6:	2339      	movs	r3, #57	; 0x39
 800f4c8:	7013      	strb	r3, [r2, #0]
 800f4ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f4ce:	2b39      	cmp	r3, #57	; 0x39
 800f4d0:	f105 32ff 	add.w	r2, r5, #4294967295
 800f4d4:	d04f      	beq.n	800f576 <_dtoa_r+0xaee>
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	7013      	strb	r3, [r2, #0]
 800f4da:	e754      	b.n	800f386 <_dtoa_r+0x8fe>
 800f4dc:	9a05      	ldr	r2, [sp, #20]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	f102 0501 	add.w	r5, r2, #1
 800f4e4:	dd06      	ble.n	800f4f4 <_dtoa_r+0xa6c>
 800f4e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f4ea:	d0e9      	beq.n	800f4c0 <_dtoa_r+0xa38>
 800f4ec:	f108 0801 	add.w	r8, r8, #1
 800f4f0:	9b05      	ldr	r3, [sp, #20]
 800f4f2:	e7c2      	b.n	800f47a <_dtoa_r+0x9f2>
 800f4f4:	9a02      	ldr	r2, [sp, #8]
 800f4f6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f4fa:	eba5 030b 	sub.w	r3, r5, fp
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d021      	beq.n	800f546 <_dtoa_r+0xabe>
 800f502:	2300      	movs	r3, #0
 800f504:	220a      	movs	r2, #10
 800f506:	9904      	ldr	r1, [sp, #16]
 800f508:	4620      	mov	r0, r4
 800f50a:	f000 fad9 	bl	800fac0 <__multadd>
 800f50e:	45b1      	cmp	r9, r6
 800f510:	9004      	str	r0, [sp, #16]
 800f512:	f04f 0300 	mov.w	r3, #0
 800f516:	f04f 020a 	mov.w	r2, #10
 800f51a:	4649      	mov	r1, r9
 800f51c:	4620      	mov	r0, r4
 800f51e:	d105      	bne.n	800f52c <_dtoa_r+0xaa4>
 800f520:	f000 face 	bl	800fac0 <__multadd>
 800f524:	4681      	mov	r9, r0
 800f526:	4606      	mov	r6, r0
 800f528:	9505      	str	r5, [sp, #20]
 800f52a:	e776      	b.n	800f41a <_dtoa_r+0x992>
 800f52c:	f000 fac8 	bl	800fac0 <__multadd>
 800f530:	4631      	mov	r1, r6
 800f532:	4681      	mov	r9, r0
 800f534:	2300      	movs	r3, #0
 800f536:	220a      	movs	r2, #10
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 fac1 	bl	800fac0 <__multadd>
 800f53e:	4606      	mov	r6, r0
 800f540:	e7f2      	b.n	800f528 <_dtoa_r+0xaa0>
 800f542:	f04f 0900 	mov.w	r9, #0
 800f546:	2201      	movs	r2, #1
 800f548:	9904      	ldr	r1, [sp, #16]
 800f54a:	4620      	mov	r0, r4
 800f54c:	f000 fc2e 	bl	800fdac <__lshift>
 800f550:	4639      	mov	r1, r7
 800f552:	9004      	str	r0, [sp, #16]
 800f554:	f000 fc7e 	bl	800fe54 <__mcmp>
 800f558:	2800      	cmp	r0, #0
 800f55a:	dcb6      	bgt.n	800f4ca <_dtoa_r+0xa42>
 800f55c:	d102      	bne.n	800f564 <_dtoa_r+0xadc>
 800f55e:	f018 0f01 	tst.w	r8, #1
 800f562:	d1b2      	bne.n	800f4ca <_dtoa_r+0xa42>
 800f564:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f568:	2b30      	cmp	r3, #48	; 0x30
 800f56a:	f105 32ff 	add.w	r2, r5, #4294967295
 800f56e:	f47f af0a 	bne.w	800f386 <_dtoa_r+0x8fe>
 800f572:	4615      	mov	r5, r2
 800f574:	e7f6      	b.n	800f564 <_dtoa_r+0xadc>
 800f576:	4593      	cmp	fp, r2
 800f578:	d105      	bne.n	800f586 <_dtoa_r+0xafe>
 800f57a:	2331      	movs	r3, #49	; 0x31
 800f57c:	f10a 0a01 	add.w	sl, sl, #1
 800f580:	f88b 3000 	strb.w	r3, [fp]
 800f584:	e6ff      	b.n	800f386 <_dtoa_r+0x8fe>
 800f586:	4615      	mov	r5, r2
 800f588:	e79f      	b.n	800f4ca <_dtoa_r+0xa42>
 800f58a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f5f0 <_dtoa_r+0xb68>
 800f58e:	e007      	b.n	800f5a0 <_dtoa_r+0xb18>
 800f590:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f592:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f5f4 <_dtoa_r+0xb6c>
 800f596:	b11b      	cbz	r3, 800f5a0 <_dtoa_r+0xb18>
 800f598:	f10b 0308 	add.w	r3, fp, #8
 800f59c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f59e:	6013      	str	r3, [r2, #0]
 800f5a0:	4658      	mov	r0, fp
 800f5a2:	b017      	add	sp, #92	; 0x5c
 800f5a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5a8:	9b06      	ldr	r3, [sp, #24]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	f77f ae35 	ble.w	800f21a <_dtoa_r+0x792>
 800f5b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f5b2:	9307      	str	r3, [sp, #28]
 800f5b4:	e649      	b.n	800f24a <_dtoa_r+0x7c2>
 800f5b6:	9b02      	ldr	r3, [sp, #8]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	dc03      	bgt.n	800f5c4 <_dtoa_r+0xb3c>
 800f5bc:	9b06      	ldr	r3, [sp, #24]
 800f5be:	2b02      	cmp	r3, #2
 800f5c0:	f73f aecc 	bgt.w	800f35c <_dtoa_r+0x8d4>
 800f5c4:	465d      	mov	r5, fp
 800f5c6:	4639      	mov	r1, r7
 800f5c8:	9804      	ldr	r0, [sp, #16]
 800f5ca:	f7ff f9d1 	bl	800e970 <quorem>
 800f5ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f5d2:	f805 8b01 	strb.w	r8, [r5], #1
 800f5d6:	9a02      	ldr	r2, [sp, #8]
 800f5d8:	eba5 030b 	sub.w	r3, r5, fp
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	ddb0      	ble.n	800f542 <_dtoa_r+0xaba>
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	220a      	movs	r2, #10
 800f5e4:	9904      	ldr	r1, [sp, #16]
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	f000 fa6a 	bl	800fac0 <__multadd>
 800f5ec:	9004      	str	r0, [sp, #16]
 800f5ee:	e7ea      	b.n	800f5c6 <_dtoa_r+0xb3e>
 800f5f0:	08012711 	.word	0x08012711
 800f5f4:	08012735 	.word	0x08012735

0800f5f8 <__sflush_r>:
 800f5f8:	898a      	ldrh	r2, [r1, #12]
 800f5fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5fe:	4605      	mov	r5, r0
 800f600:	0710      	lsls	r0, r2, #28
 800f602:	460c      	mov	r4, r1
 800f604:	d458      	bmi.n	800f6b8 <__sflush_r+0xc0>
 800f606:	684b      	ldr	r3, [r1, #4]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	dc05      	bgt.n	800f618 <__sflush_r+0x20>
 800f60c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f60e:	2b00      	cmp	r3, #0
 800f610:	dc02      	bgt.n	800f618 <__sflush_r+0x20>
 800f612:	2000      	movs	r0, #0
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f61a:	2e00      	cmp	r6, #0
 800f61c:	d0f9      	beq.n	800f612 <__sflush_r+0x1a>
 800f61e:	2300      	movs	r3, #0
 800f620:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f624:	682f      	ldr	r7, [r5, #0]
 800f626:	6a21      	ldr	r1, [r4, #32]
 800f628:	602b      	str	r3, [r5, #0]
 800f62a:	d032      	beq.n	800f692 <__sflush_r+0x9a>
 800f62c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f62e:	89a3      	ldrh	r3, [r4, #12]
 800f630:	075a      	lsls	r2, r3, #29
 800f632:	d505      	bpl.n	800f640 <__sflush_r+0x48>
 800f634:	6863      	ldr	r3, [r4, #4]
 800f636:	1ac0      	subs	r0, r0, r3
 800f638:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f63a:	b10b      	cbz	r3, 800f640 <__sflush_r+0x48>
 800f63c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f63e:	1ac0      	subs	r0, r0, r3
 800f640:	2300      	movs	r3, #0
 800f642:	4602      	mov	r2, r0
 800f644:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f646:	6a21      	ldr	r1, [r4, #32]
 800f648:	4628      	mov	r0, r5
 800f64a:	47b0      	blx	r6
 800f64c:	1c43      	adds	r3, r0, #1
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	d106      	bne.n	800f660 <__sflush_r+0x68>
 800f652:	6829      	ldr	r1, [r5, #0]
 800f654:	291d      	cmp	r1, #29
 800f656:	d848      	bhi.n	800f6ea <__sflush_r+0xf2>
 800f658:	4a29      	ldr	r2, [pc, #164]	; (800f700 <__sflush_r+0x108>)
 800f65a:	40ca      	lsrs	r2, r1
 800f65c:	07d6      	lsls	r6, r2, #31
 800f65e:	d544      	bpl.n	800f6ea <__sflush_r+0xf2>
 800f660:	2200      	movs	r2, #0
 800f662:	6062      	str	r2, [r4, #4]
 800f664:	04d9      	lsls	r1, r3, #19
 800f666:	6922      	ldr	r2, [r4, #16]
 800f668:	6022      	str	r2, [r4, #0]
 800f66a:	d504      	bpl.n	800f676 <__sflush_r+0x7e>
 800f66c:	1c42      	adds	r2, r0, #1
 800f66e:	d101      	bne.n	800f674 <__sflush_r+0x7c>
 800f670:	682b      	ldr	r3, [r5, #0]
 800f672:	b903      	cbnz	r3, 800f676 <__sflush_r+0x7e>
 800f674:	6560      	str	r0, [r4, #84]	; 0x54
 800f676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f678:	602f      	str	r7, [r5, #0]
 800f67a:	2900      	cmp	r1, #0
 800f67c:	d0c9      	beq.n	800f612 <__sflush_r+0x1a>
 800f67e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f682:	4299      	cmp	r1, r3
 800f684:	d002      	beq.n	800f68c <__sflush_r+0x94>
 800f686:	4628      	mov	r0, r5
 800f688:	f7fe f9c0 	bl	800da0c <_free_r>
 800f68c:	2000      	movs	r0, #0
 800f68e:	6360      	str	r0, [r4, #52]	; 0x34
 800f690:	e7c0      	b.n	800f614 <__sflush_r+0x1c>
 800f692:	2301      	movs	r3, #1
 800f694:	4628      	mov	r0, r5
 800f696:	47b0      	blx	r6
 800f698:	1c41      	adds	r1, r0, #1
 800f69a:	d1c8      	bne.n	800f62e <__sflush_r+0x36>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d0c5      	beq.n	800f62e <__sflush_r+0x36>
 800f6a2:	2b1d      	cmp	r3, #29
 800f6a4:	d001      	beq.n	800f6aa <__sflush_r+0xb2>
 800f6a6:	2b16      	cmp	r3, #22
 800f6a8:	d101      	bne.n	800f6ae <__sflush_r+0xb6>
 800f6aa:	602f      	str	r7, [r5, #0]
 800f6ac:	e7b1      	b.n	800f612 <__sflush_r+0x1a>
 800f6ae:	89a3      	ldrh	r3, [r4, #12]
 800f6b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6b4:	81a3      	strh	r3, [r4, #12]
 800f6b6:	e7ad      	b.n	800f614 <__sflush_r+0x1c>
 800f6b8:	690f      	ldr	r7, [r1, #16]
 800f6ba:	2f00      	cmp	r7, #0
 800f6bc:	d0a9      	beq.n	800f612 <__sflush_r+0x1a>
 800f6be:	0793      	lsls	r3, r2, #30
 800f6c0:	680e      	ldr	r6, [r1, #0]
 800f6c2:	bf08      	it	eq
 800f6c4:	694b      	ldreq	r3, [r1, #20]
 800f6c6:	600f      	str	r7, [r1, #0]
 800f6c8:	bf18      	it	ne
 800f6ca:	2300      	movne	r3, #0
 800f6cc:	eba6 0807 	sub.w	r8, r6, r7
 800f6d0:	608b      	str	r3, [r1, #8]
 800f6d2:	f1b8 0f00 	cmp.w	r8, #0
 800f6d6:	dd9c      	ble.n	800f612 <__sflush_r+0x1a>
 800f6d8:	4643      	mov	r3, r8
 800f6da:	463a      	mov	r2, r7
 800f6dc:	6a21      	ldr	r1, [r4, #32]
 800f6de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f6e0:	4628      	mov	r0, r5
 800f6e2:	47b0      	blx	r6
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	dc06      	bgt.n	800f6f6 <__sflush_r+0xfe>
 800f6e8:	89a3      	ldrh	r3, [r4, #12]
 800f6ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6ee:	81a3      	strh	r3, [r4, #12]
 800f6f0:	f04f 30ff 	mov.w	r0, #4294967295
 800f6f4:	e78e      	b.n	800f614 <__sflush_r+0x1c>
 800f6f6:	4407      	add	r7, r0
 800f6f8:	eba8 0800 	sub.w	r8, r8, r0
 800f6fc:	e7e9      	b.n	800f6d2 <__sflush_r+0xda>
 800f6fe:	bf00      	nop
 800f700:	20400001 	.word	0x20400001

0800f704 <_fflush_r>:
 800f704:	b538      	push	{r3, r4, r5, lr}
 800f706:	690b      	ldr	r3, [r1, #16]
 800f708:	4605      	mov	r5, r0
 800f70a:	460c      	mov	r4, r1
 800f70c:	b1db      	cbz	r3, 800f746 <_fflush_r+0x42>
 800f70e:	b118      	cbz	r0, 800f718 <_fflush_r+0x14>
 800f710:	6983      	ldr	r3, [r0, #24]
 800f712:	b90b      	cbnz	r3, 800f718 <_fflush_r+0x14>
 800f714:	f000 f860 	bl	800f7d8 <__sinit>
 800f718:	4b0c      	ldr	r3, [pc, #48]	; (800f74c <_fflush_r+0x48>)
 800f71a:	429c      	cmp	r4, r3
 800f71c:	d109      	bne.n	800f732 <_fflush_r+0x2e>
 800f71e:	686c      	ldr	r4, [r5, #4]
 800f720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f724:	b17b      	cbz	r3, 800f746 <_fflush_r+0x42>
 800f726:	4621      	mov	r1, r4
 800f728:	4628      	mov	r0, r5
 800f72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f72e:	f7ff bf63 	b.w	800f5f8 <__sflush_r>
 800f732:	4b07      	ldr	r3, [pc, #28]	; (800f750 <_fflush_r+0x4c>)
 800f734:	429c      	cmp	r4, r3
 800f736:	d101      	bne.n	800f73c <_fflush_r+0x38>
 800f738:	68ac      	ldr	r4, [r5, #8]
 800f73a:	e7f1      	b.n	800f720 <_fflush_r+0x1c>
 800f73c:	4b05      	ldr	r3, [pc, #20]	; (800f754 <_fflush_r+0x50>)
 800f73e:	429c      	cmp	r4, r3
 800f740:	bf08      	it	eq
 800f742:	68ec      	ldreq	r4, [r5, #12]
 800f744:	e7ec      	b.n	800f720 <_fflush_r+0x1c>
 800f746:	2000      	movs	r0, #0
 800f748:	bd38      	pop	{r3, r4, r5, pc}
 800f74a:	bf00      	nop
 800f74c:	08012764 	.word	0x08012764
 800f750:	08012784 	.word	0x08012784
 800f754:	08012744 	.word	0x08012744

0800f758 <std>:
 800f758:	2300      	movs	r3, #0
 800f75a:	b510      	push	{r4, lr}
 800f75c:	4604      	mov	r4, r0
 800f75e:	e9c0 3300 	strd	r3, r3, [r0]
 800f762:	6083      	str	r3, [r0, #8]
 800f764:	8181      	strh	r1, [r0, #12]
 800f766:	6643      	str	r3, [r0, #100]	; 0x64
 800f768:	81c2      	strh	r2, [r0, #14]
 800f76a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f76e:	6183      	str	r3, [r0, #24]
 800f770:	4619      	mov	r1, r3
 800f772:	2208      	movs	r2, #8
 800f774:	305c      	adds	r0, #92	; 0x5c
 800f776:	f7fe f940 	bl	800d9fa <memset>
 800f77a:	4b05      	ldr	r3, [pc, #20]	; (800f790 <std+0x38>)
 800f77c:	6263      	str	r3, [r4, #36]	; 0x24
 800f77e:	4b05      	ldr	r3, [pc, #20]	; (800f794 <std+0x3c>)
 800f780:	62a3      	str	r3, [r4, #40]	; 0x28
 800f782:	4b05      	ldr	r3, [pc, #20]	; (800f798 <std+0x40>)
 800f784:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f786:	4b05      	ldr	r3, [pc, #20]	; (800f79c <std+0x44>)
 800f788:	6224      	str	r4, [r4, #32]
 800f78a:	6323      	str	r3, [r4, #48]	; 0x30
 800f78c:	bd10      	pop	{r4, pc}
 800f78e:	bf00      	nop
 800f790:	0800e715 	.word	0x0800e715
 800f794:	0800e737 	.word	0x0800e737
 800f798:	0800e76f 	.word	0x0800e76f
 800f79c:	0800e793 	.word	0x0800e793

0800f7a0 <_cleanup_r>:
 800f7a0:	4901      	ldr	r1, [pc, #4]	; (800f7a8 <_cleanup_r+0x8>)
 800f7a2:	f000 b885 	b.w	800f8b0 <_fwalk_reent>
 800f7a6:	bf00      	nop
 800f7a8:	0800f705 	.word	0x0800f705

0800f7ac <__sfmoreglue>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	1e4a      	subs	r2, r1, #1
 800f7b0:	2568      	movs	r5, #104	; 0x68
 800f7b2:	4355      	muls	r5, r2
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f7ba:	f7fe f975 	bl	800daa8 <_malloc_r>
 800f7be:	4604      	mov	r4, r0
 800f7c0:	b140      	cbz	r0, 800f7d4 <__sfmoreglue+0x28>
 800f7c2:	2100      	movs	r1, #0
 800f7c4:	e9c0 1600 	strd	r1, r6, [r0]
 800f7c8:	300c      	adds	r0, #12
 800f7ca:	60a0      	str	r0, [r4, #8]
 800f7cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f7d0:	f7fe f913 	bl	800d9fa <memset>
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	bd70      	pop	{r4, r5, r6, pc}

0800f7d8 <__sinit>:
 800f7d8:	6983      	ldr	r3, [r0, #24]
 800f7da:	b510      	push	{r4, lr}
 800f7dc:	4604      	mov	r4, r0
 800f7de:	bb33      	cbnz	r3, 800f82e <__sinit+0x56>
 800f7e0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f7e4:	6503      	str	r3, [r0, #80]	; 0x50
 800f7e6:	4b12      	ldr	r3, [pc, #72]	; (800f830 <__sinit+0x58>)
 800f7e8:	4a12      	ldr	r2, [pc, #72]	; (800f834 <__sinit+0x5c>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	6282      	str	r2, [r0, #40]	; 0x28
 800f7ee:	4298      	cmp	r0, r3
 800f7f0:	bf04      	itt	eq
 800f7f2:	2301      	moveq	r3, #1
 800f7f4:	6183      	streq	r3, [r0, #24]
 800f7f6:	f000 f81f 	bl	800f838 <__sfp>
 800f7fa:	6060      	str	r0, [r4, #4]
 800f7fc:	4620      	mov	r0, r4
 800f7fe:	f000 f81b 	bl	800f838 <__sfp>
 800f802:	60a0      	str	r0, [r4, #8]
 800f804:	4620      	mov	r0, r4
 800f806:	f000 f817 	bl	800f838 <__sfp>
 800f80a:	2200      	movs	r2, #0
 800f80c:	60e0      	str	r0, [r4, #12]
 800f80e:	2104      	movs	r1, #4
 800f810:	6860      	ldr	r0, [r4, #4]
 800f812:	f7ff ffa1 	bl	800f758 <std>
 800f816:	2201      	movs	r2, #1
 800f818:	2109      	movs	r1, #9
 800f81a:	68a0      	ldr	r0, [r4, #8]
 800f81c:	f7ff ff9c 	bl	800f758 <std>
 800f820:	2202      	movs	r2, #2
 800f822:	2112      	movs	r1, #18
 800f824:	68e0      	ldr	r0, [r4, #12]
 800f826:	f7ff ff97 	bl	800f758 <std>
 800f82a:	2301      	movs	r3, #1
 800f82c:	61a3      	str	r3, [r4, #24]
 800f82e:	bd10      	pop	{r4, pc}
 800f830:	080126ec 	.word	0x080126ec
 800f834:	0800f7a1 	.word	0x0800f7a1

0800f838 <__sfp>:
 800f838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f83a:	4b1b      	ldr	r3, [pc, #108]	; (800f8a8 <__sfp+0x70>)
 800f83c:	681e      	ldr	r6, [r3, #0]
 800f83e:	69b3      	ldr	r3, [r6, #24]
 800f840:	4607      	mov	r7, r0
 800f842:	b913      	cbnz	r3, 800f84a <__sfp+0x12>
 800f844:	4630      	mov	r0, r6
 800f846:	f7ff ffc7 	bl	800f7d8 <__sinit>
 800f84a:	3648      	adds	r6, #72	; 0x48
 800f84c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f850:	3b01      	subs	r3, #1
 800f852:	d503      	bpl.n	800f85c <__sfp+0x24>
 800f854:	6833      	ldr	r3, [r6, #0]
 800f856:	b133      	cbz	r3, 800f866 <__sfp+0x2e>
 800f858:	6836      	ldr	r6, [r6, #0]
 800f85a:	e7f7      	b.n	800f84c <__sfp+0x14>
 800f85c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f860:	b16d      	cbz	r5, 800f87e <__sfp+0x46>
 800f862:	3468      	adds	r4, #104	; 0x68
 800f864:	e7f4      	b.n	800f850 <__sfp+0x18>
 800f866:	2104      	movs	r1, #4
 800f868:	4638      	mov	r0, r7
 800f86a:	f7ff ff9f 	bl	800f7ac <__sfmoreglue>
 800f86e:	6030      	str	r0, [r6, #0]
 800f870:	2800      	cmp	r0, #0
 800f872:	d1f1      	bne.n	800f858 <__sfp+0x20>
 800f874:	230c      	movs	r3, #12
 800f876:	603b      	str	r3, [r7, #0]
 800f878:	4604      	mov	r4, r0
 800f87a:	4620      	mov	r0, r4
 800f87c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f87e:	4b0b      	ldr	r3, [pc, #44]	; (800f8ac <__sfp+0x74>)
 800f880:	6665      	str	r5, [r4, #100]	; 0x64
 800f882:	e9c4 5500 	strd	r5, r5, [r4]
 800f886:	60a5      	str	r5, [r4, #8]
 800f888:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f88c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f890:	2208      	movs	r2, #8
 800f892:	4629      	mov	r1, r5
 800f894:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f898:	f7fe f8af 	bl	800d9fa <memset>
 800f89c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f8a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f8a4:	e7e9      	b.n	800f87a <__sfp+0x42>
 800f8a6:	bf00      	nop
 800f8a8:	080126ec 	.word	0x080126ec
 800f8ac:	ffff0001 	.word	0xffff0001

0800f8b0 <_fwalk_reent>:
 800f8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8b4:	4680      	mov	r8, r0
 800f8b6:	4689      	mov	r9, r1
 800f8b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f8bc:	2600      	movs	r6, #0
 800f8be:	b914      	cbnz	r4, 800f8c6 <_fwalk_reent+0x16>
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8c6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f8ca:	3f01      	subs	r7, #1
 800f8cc:	d501      	bpl.n	800f8d2 <_fwalk_reent+0x22>
 800f8ce:	6824      	ldr	r4, [r4, #0]
 800f8d0:	e7f5      	b.n	800f8be <_fwalk_reent+0xe>
 800f8d2:	89ab      	ldrh	r3, [r5, #12]
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d907      	bls.n	800f8e8 <_fwalk_reent+0x38>
 800f8d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	d003      	beq.n	800f8e8 <_fwalk_reent+0x38>
 800f8e0:	4629      	mov	r1, r5
 800f8e2:	4640      	mov	r0, r8
 800f8e4:	47c8      	blx	r9
 800f8e6:	4306      	orrs	r6, r0
 800f8e8:	3568      	adds	r5, #104	; 0x68
 800f8ea:	e7ee      	b.n	800f8ca <_fwalk_reent+0x1a>

0800f8ec <_localeconv_r>:
 800f8ec:	4b04      	ldr	r3, [pc, #16]	; (800f900 <_localeconv_r+0x14>)
 800f8ee:	681b      	ldr	r3, [r3, #0]
 800f8f0:	6a18      	ldr	r0, [r3, #32]
 800f8f2:	4b04      	ldr	r3, [pc, #16]	; (800f904 <_localeconv_r+0x18>)
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	bf08      	it	eq
 800f8f8:	4618      	moveq	r0, r3
 800f8fa:	30f0      	adds	r0, #240	; 0xf0
 800f8fc:	4770      	bx	lr
 800f8fe:	bf00      	nop
 800f900:	200001b0 	.word	0x200001b0
 800f904:	20000214 	.word	0x20000214

0800f908 <_lseek_r>:
 800f908:	b538      	push	{r3, r4, r5, lr}
 800f90a:	4c07      	ldr	r4, [pc, #28]	; (800f928 <_lseek_r+0x20>)
 800f90c:	4605      	mov	r5, r0
 800f90e:	4608      	mov	r0, r1
 800f910:	4611      	mov	r1, r2
 800f912:	2200      	movs	r2, #0
 800f914:	6022      	str	r2, [r4, #0]
 800f916:	461a      	mov	r2, r3
 800f918:	f7f4 fa34 	bl	8003d84 <_lseek>
 800f91c:	1c43      	adds	r3, r0, #1
 800f91e:	d102      	bne.n	800f926 <_lseek_r+0x1e>
 800f920:	6823      	ldr	r3, [r4, #0]
 800f922:	b103      	cbz	r3, 800f926 <_lseek_r+0x1e>
 800f924:	602b      	str	r3, [r5, #0]
 800f926:	bd38      	pop	{r3, r4, r5, pc}
 800f928:	2000232c 	.word	0x2000232c

0800f92c <__swhatbuf_r>:
 800f92c:	b570      	push	{r4, r5, r6, lr}
 800f92e:	460e      	mov	r6, r1
 800f930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f934:	2900      	cmp	r1, #0
 800f936:	b096      	sub	sp, #88	; 0x58
 800f938:	4614      	mov	r4, r2
 800f93a:	461d      	mov	r5, r3
 800f93c:	da07      	bge.n	800f94e <__swhatbuf_r+0x22>
 800f93e:	2300      	movs	r3, #0
 800f940:	602b      	str	r3, [r5, #0]
 800f942:	89b3      	ldrh	r3, [r6, #12]
 800f944:	061a      	lsls	r2, r3, #24
 800f946:	d410      	bmi.n	800f96a <__swhatbuf_r+0x3e>
 800f948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f94c:	e00e      	b.n	800f96c <__swhatbuf_r+0x40>
 800f94e:	466a      	mov	r2, sp
 800f950:	f000 fd22 	bl	8010398 <_fstat_r>
 800f954:	2800      	cmp	r0, #0
 800f956:	dbf2      	blt.n	800f93e <__swhatbuf_r+0x12>
 800f958:	9a01      	ldr	r2, [sp, #4]
 800f95a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f95e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f962:	425a      	negs	r2, r3
 800f964:	415a      	adcs	r2, r3
 800f966:	602a      	str	r2, [r5, #0]
 800f968:	e7ee      	b.n	800f948 <__swhatbuf_r+0x1c>
 800f96a:	2340      	movs	r3, #64	; 0x40
 800f96c:	2000      	movs	r0, #0
 800f96e:	6023      	str	r3, [r4, #0]
 800f970:	b016      	add	sp, #88	; 0x58
 800f972:	bd70      	pop	{r4, r5, r6, pc}

0800f974 <__smakebuf_r>:
 800f974:	898b      	ldrh	r3, [r1, #12]
 800f976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f978:	079d      	lsls	r5, r3, #30
 800f97a:	4606      	mov	r6, r0
 800f97c:	460c      	mov	r4, r1
 800f97e:	d507      	bpl.n	800f990 <__smakebuf_r+0x1c>
 800f980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f984:	6023      	str	r3, [r4, #0]
 800f986:	6123      	str	r3, [r4, #16]
 800f988:	2301      	movs	r3, #1
 800f98a:	6163      	str	r3, [r4, #20]
 800f98c:	b002      	add	sp, #8
 800f98e:	bd70      	pop	{r4, r5, r6, pc}
 800f990:	ab01      	add	r3, sp, #4
 800f992:	466a      	mov	r2, sp
 800f994:	f7ff ffca 	bl	800f92c <__swhatbuf_r>
 800f998:	9900      	ldr	r1, [sp, #0]
 800f99a:	4605      	mov	r5, r0
 800f99c:	4630      	mov	r0, r6
 800f99e:	f7fe f883 	bl	800daa8 <_malloc_r>
 800f9a2:	b948      	cbnz	r0, 800f9b8 <__smakebuf_r+0x44>
 800f9a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f9a8:	059a      	lsls	r2, r3, #22
 800f9aa:	d4ef      	bmi.n	800f98c <__smakebuf_r+0x18>
 800f9ac:	f023 0303 	bic.w	r3, r3, #3
 800f9b0:	f043 0302 	orr.w	r3, r3, #2
 800f9b4:	81a3      	strh	r3, [r4, #12]
 800f9b6:	e7e3      	b.n	800f980 <__smakebuf_r+0xc>
 800f9b8:	4b0d      	ldr	r3, [pc, #52]	; (800f9f0 <__smakebuf_r+0x7c>)
 800f9ba:	62b3      	str	r3, [r6, #40]	; 0x28
 800f9bc:	89a3      	ldrh	r3, [r4, #12]
 800f9be:	6020      	str	r0, [r4, #0]
 800f9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9c4:	81a3      	strh	r3, [r4, #12]
 800f9c6:	9b00      	ldr	r3, [sp, #0]
 800f9c8:	6163      	str	r3, [r4, #20]
 800f9ca:	9b01      	ldr	r3, [sp, #4]
 800f9cc:	6120      	str	r0, [r4, #16]
 800f9ce:	b15b      	cbz	r3, 800f9e8 <__smakebuf_r+0x74>
 800f9d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f000 fcf1 	bl	80103bc <_isatty_r>
 800f9da:	b128      	cbz	r0, 800f9e8 <__smakebuf_r+0x74>
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	f023 0303 	bic.w	r3, r3, #3
 800f9e2:	f043 0301 	orr.w	r3, r3, #1
 800f9e6:	81a3      	strh	r3, [r4, #12]
 800f9e8:	89a3      	ldrh	r3, [r4, #12]
 800f9ea:	431d      	orrs	r5, r3
 800f9ec:	81a5      	strh	r5, [r4, #12]
 800f9ee:	e7cd      	b.n	800f98c <__smakebuf_r+0x18>
 800f9f0:	0800f7a1 	.word	0x0800f7a1

0800f9f4 <memmove>:
 800f9f4:	4288      	cmp	r0, r1
 800f9f6:	b510      	push	{r4, lr}
 800f9f8:	eb01 0302 	add.w	r3, r1, r2
 800f9fc:	d807      	bhi.n	800fa0e <memmove+0x1a>
 800f9fe:	1e42      	subs	r2, r0, #1
 800fa00:	4299      	cmp	r1, r3
 800fa02:	d00a      	beq.n	800fa1a <memmove+0x26>
 800fa04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa08:	f802 4f01 	strb.w	r4, [r2, #1]!
 800fa0c:	e7f8      	b.n	800fa00 <memmove+0xc>
 800fa0e:	4283      	cmp	r3, r0
 800fa10:	d9f5      	bls.n	800f9fe <memmove+0xa>
 800fa12:	1881      	adds	r1, r0, r2
 800fa14:	1ad2      	subs	r2, r2, r3
 800fa16:	42d3      	cmn	r3, r2
 800fa18:	d100      	bne.n	800fa1c <memmove+0x28>
 800fa1a:	bd10      	pop	{r4, pc}
 800fa1c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fa20:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800fa24:	e7f7      	b.n	800fa16 <memmove+0x22>

0800fa26 <__malloc_lock>:
 800fa26:	4770      	bx	lr

0800fa28 <__malloc_unlock>:
 800fa28:	4770      	bx	lr

0800fa2a <_Balloc>:
 800fa2a:	b570      	push	{r4, r5, r6, lr}
 800fa2c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa2e:	4604      	mov	r4, r0
 800fa30:	460e      	mov	r6, r1
 800fa32:	b93d      	cbnz	r5, 800fa44 <_Balloc+0x1a>
 800fa34:	2010      	movs	r0, #16
 800fa36:	f7fd ffc5 	bl	800d9c4 <malloc>
 800fa3a:	6260      	str	r0, [r4, #36]	; 0x24
 800fa3c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa40:	6005      	str	r5, [r0, #0]
 800fa42:	60c5      	str	r5, [r0, #12]
 800fa44:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800fa46:	68eb      	ldr	r3, [r5, #12]
 800fa48:	b183      	cbz	r3, 800fa6c <_Balloc+0x42>
 800fa4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa4c:	68db      	ldr	r3, [r3, #12]
 800fa4e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800fa52:	b9b8      	cbnz	r0, 800fa84 <_Balloc+0x5a>
 800fa54:	2101      	movs	r1, #1
 800fa56:	fa01 f506 	lsl.w	r5, r1, r6
 800fa5a:	1d6a      	adds	r2, r5, #5
 800fa5c:	0092      	lsls	r2, r2, #2
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 fabe 	bl	800ffe0 <_calloc_r>
 800fa64:	b160      	cbz	r0, 800fa80 <_Balloc+0x56>
 800fa66:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800fa6a:	e00e      	b.n	800fa8a <_Balloc+0x60>
 800fa6c:	2221      	movs	r2, #33	; 0x21
 800fa6e:	2104      	movs	r1, #4
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fab5 	bl	800ffe0 <_calloc_r>
 800fa76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa78:	60e8      	str	r0, [r5, #12]
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d1e4      	bne.n	800fa4a <_Balloc+0x20>
 800fa80:	2000      	movs	r0, #0
 800fa82:	bd70      	pop	{r4, r5, r6, pc}
 800fa84:	6802      	ldr	r2, [r0, #0]
 800fa86:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fa90:	e7f7      	b.n	800fa82 <_Balloc+0x58>

0800fa92 <_Bfree>:
 800fa92:	b570      	push	{r4, r5, r6, lr}
 800fa94:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800fa96:	4606      	mov	r6, r0
 800fa98:	460d      	mov	r5, r1
 800fa9a:	b93c      	cbnz	r4, 800faac <_Bfree+0x1a>
 800fa9c:	2010      	movs	r0, #16
 800fa9e:	f7fd ff91 	bl	800d9c4 <malloc>
 800faa2:	6270      	str	r0, [r6, #36]	; 0x24
 800faa4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800faa8:	6004      	str	r4, [r0, #0]
 800faaa:	60c4      	str	r4, [r0, #12]
 800faac:	b13d      	cbz	r5, 800fabe <_Bfree+0x2c>
 800faae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800fab0:	686a      	ldr	r2, [r5, #4]
 800fab2:	68db      	ldr	r3, [r3, #12]
 800fab4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fab8:	6029      	str	r1, [r5, #0]
 800faba:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800fabe:	bd70      	pop	{r4, r5, r6, pc}

0800fac0 <__multadd>:
 800fac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fac4:	690d      	ldr	r5, [r1, #16]
 800fac6:	461f      	mov	r7, r3
 800fac8:	4606      	mov	r6, r0
 800faca:	460c      	mov	r4, r1
 800facc:	f101 0c14 	add.w	ip, r1, #20
 800fad0:	2300      	movs	r3, #0
 800fad2:	f8dc 0000 	ldr.w	r0, [ip]
 800fad6:	b281      	uxth	r1, r0
 800fad8:	fb02 7101 	mla	r1, r2, r1, r7
 800fadc:	0c0f      	lsrs	r7, r1, #16
 800fade:	0c00      	lsrs	r0, r0, #16
 800fae0:	fb02 7000 	mla	r0, r2, r0, r7
 800fae4:	b289      	uxth	r1, r1
 800fae6:	3301      	adds	r3, #1
 800fae8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800faec:	429d      	cmp	r5, r3
 800faee:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800faf2:	f84c 1b04 	str.w	r1, [ip], #4
 800faf6:	dcec      	bgt.n	800fad2 <__multadd+0x12>
 800faf8:	b1d7      	cbz	r7, 800fb30 <__multadd+0x70>
 800fafa:	68a3      	ldr	r3, [r4, #8]
 800fafc:	42ab      	cmp	r3, r5
 800fafe:	dc12      	bgt.n	800fb26 <__multadd+0x66>
 800fb00:	6861      	ldr	r1, [r4, #4]
 800fb02:	4630      	mov	r0, r6
 800fb04:	3101      	adds	r1, #1
 800fb06:	f7ff ff90 	bl	800fa2a <_Balloc>
 800fb0a:	6922      	ldr	r2, [r4, #16]
 800fb0c:	3202      	adds	r2, #2
 800fb0e:	f104 010c 	add.w	r1, r4, #12
 800fb12:	4680      	mov	r8, r0
 800fb14:	0092      	lsls	r2, r2, #2
 800fb16:	300c      	adds	r0, #12
 800fb18:	f7fd ff64 	bl	800d9e4 <memcpy>
 800fb1c:	4621      	mov	r1, r4
 800fb1e:	4630      	mov	r0, r6
 800fb20:	f7ff ffb7 	bl	800fa92 <_Bfree>
 800fb24:	4644      	mov	r4, r8
 800fb26:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fb2a:	3501      	adds	r5, #1
 800fb2c:	615f      	str	r7, [r3, #20]
 800fb2e:	6125      	str	r5, [r4, #16]
 800fb30:	4620      	mov	r0, r4
 800fb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fb36 <__hi0bits>:
 800fb36:	0c02      	lsrs	r2, r0, #16
 800fb38:	0412      	lsls	r2, r2, #16
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	b9b2      	cbnz	r2, 800fb6c <__hi0bits+0x36>
 800fb3e:	0403      	lsls	r3, r0, #16
 800fb40:	2010      	movs	r0, #16
 800fb42:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800fb46:	bf04      	itt	eq
 800fb48:	021b      	lsleq	r3, r3, #8
 800fb4a:	3008      	addeq	r0, #8
 800fb4c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800fb50:	bf04      	itt	eq
 800fb52:	011b      	lsleq	r3, r3, #4
 800fb54:	3004      	addeq	r0, #4
 800fb56:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800fb5a:	bf04      	itt	eq
 800fb5c:	009b      	lsleq	r3, r3, #2
 800fb5e:	3002      	addeq	r0, #2
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	db06      	blt.n	800fb72 <__hi0bits+0x3c>
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	d503      	bpl.n	800fb70 <__hi0bits+0x3a>
 800fb68:	3001      	adds	r0, #1
 800fb6a:	4770      	bx	lr
 800fb6c:	2000      	movs	r0, #0
 800fb6e:	e7e8      	b.n	800fb42 <__hi0bits+0xc>
 800fb70:	2020      	movs	r0, #32
 800fb72:	4770      	bx	lr

0800fb74 <__lo0bits>:
 800fb74:	6803      	ldr	r3, [r0, #0]
 800fb76:	f013 0207 	ands.w	r2, r3, #7
 800fb7a:	4601      	mov	r1, r0
 800fb7c:	d00b      	beq.n	800fb96 <__lo0bits+0x22>
 800fb7e:	07da      	lsls	r2, r3, #31
 800fb80:	d423      	bmi.n	800fbca <__lo0bits+0x56>
 800fb82:	0798      	lsls	r0, r3, #30
 800fb84:	bf49      	itett	mi
 800fb86:	085b      	lsrmi	r3, r3, #1
 800fb88:	089b      	lsrpl	r3, r3, #2
 800fb8a:	2001      	movmi	r0, #1
 800fb8c:	600b      	strmi	r3, [r1, #0]
 800fb8e:	bf5c      	itt	pl
 800fb90:	600b      	strpl	r3, [r1, #0]
 800fb92:	2002      	movpl	r0, #2
 800fb94:	4770      	bx	lr
 800fb96:	b298      	uxth	r0, r3
 800fb98:	b9a8      	cbnz	r0, 800fbc6 <__lo0bits+0x52>
 800fb9a:	0c1b      	lsrs	r3, r3, #16
 800fb9c:	2010      	movs	r0, #16
 800fb9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fba2:	bf04      	itt	eq
 800fba4:	0a1b      	lsreq	r3, r3, #8
 800fba6:	3008      	addeq	r0, #8
 800fba8:	071a      	lsls	r2, r3, #28
 800fbaa:	bf04      	itt	eq
 800fbac:	091b      	lsreq	r3, r3, #4
 800fbae:	3004      	addeq	r0, #4
 800fbb0:	079a      	lsls	r2, r3, #30
 800fbb2:	bf04      	itt	eq
 800fbb4:	089b      	lsreq	r3, r3, #2
 800fbb6:	3002      	addeq	r0, #2
 800fbb8:	07da      	lsls	r2, r3, #31
 800fbba:	d402      	bmi.n	800fbc2 <__lo0bits+0x4e>
 800fbbc:	085b      	lsrs	r3, r3, #1
 800fbbe:	d006      	beq.n	800fbce <__lo0bits+0x5a>
 800fbc0:	3001      	adds	r0, #1
 800fbc2:	600b      	str	r3, [r1, #0]
 800fbc4:	4770      	bx	lr
 800fbc6:	4610      	mov	r0, r2
 800fbc8:	e7e9      	b.n	800fb9e <__lo0bits+0x2a>
 800fbca:	2000      	movs	r0, #0
 800fbcc:	4770      	bx	lr
 800fbce:	2020      	movs	r0, #32
 800fbd0:	4770      	bx	lr

0800fbd2 <__i2b>:
 800fbd2:	b510      	push	{r4, lr}
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	2101      	movs	r1, #1
 800fbd8:	f7ff ff27 	bl	800fa2a <_Balloc>
 800fbdc:	2201      	movs	r2, #1
 800fbde:	6144      	str	r4, [r0, #20]
 800fbe0:	6102      	str	r2, [r0, #16]
 800fbe2:	bd10      	pop	{r4, pc}

0800fbe4 <__multiply>:
 800fbe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbe8:	4614      	mov	r4, r2
 800fbea:	690a      	ldr	r2, [r1, #16]
 800fbec:	6923      	ldr	r3, [r4, #16]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	bfb8      	it	lt
 800fbf2:	460b      	movlt	r3, r1
 800fbf4:	4688      	mov	r8, r1
 800fbf6:	bfbc      	itt	lt
 800fbf8:	46a0      	movlt	r8, r4
 800fbfa:	461c      	movlt	r4, r3
 800fbfc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fc00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fc04:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc08:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fc0c:	eb07 0609 	add.w	r6, r7, r9
 800fc10:	42b3      	cmp	r3, r6
 800fc12:	bfb8      	it	lt
 800fc14:	3101      	addlt	r1, #1
 800fc16:	f7ff ff08 	bl	800fa2a <_Balloc>
 800fc1a:	f100 0514 	add.w	r5, r0, #20
 800fc1e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800fc22:	462b      	mov	r3, r5
 800fc24:	2200      	movs	r2, #0
 800fc26:	4573      	cmp	r3, lr
 800fc28:	d316      	bcc.n	800fc58 <__multiply+0x74>
 800fc2a:	f104 0214 	add.w	r2, r4, #20
 800fc2e:	f108 0114 	add.w	r1, r8, #20
 800fc32:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800fc36:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800fc3a:	9300      	str	r3, [sp, #0]
 800fc3c:	9b00      	ldr	r3, [sp, #0]
 800fc3e:	9201      	str	r2, [sp, #4]
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d80c      	bhi.n	800fc5e <__multiply+0x7a>
 800fc44:	2e00      	cmp	r6, #0
 800fc46:	dd03      	ble.n	800fc50 <__multiply+0x6c>
 800fc48:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d05d      	beq.n	800fd0c <__multiply+0x128>
 800fc50:	6106      	str	r6, [r0, #16]
 800fc52:	b003      	add	sp, #12
 800fc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc58:	f843 2b04 	str.w	r2, [r3], #4
 800fc5c:	e7e3      	b.n	800fc26 <__multiply+0x42>
 800fc5e:	f8b2 b000 	ldrh.w	fp, [r2]
 800fc62:	f1bb 0f00 	cmp.w	fp, #0
 800fc66:	d023      	beq.n	800fcb0 <__multiply+0xcc>
 800fc68:	4689      	mov	r9, r1
 800fc6a:	46ac      	mov	ip, r5
 800fc6c:	f04f 0800 	mov.w	r8, #0
 800fc70:	f859 4b04 	ldr.w	r4, [r9], #4
 800fc74:	f8dc a000 	ldr.w	sl, [ip]
 800fc78:	b2a3      	uxth	r3, r4
 800fc7a:	fa1f fa8a 	uxth.w	sl, sl
 800fc7e:	fb0b a303 	mla	r3, fp, r3, sl
 800fc82:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fc86:	f8dc 4000 	ldr.w	r4, [ip]
 800fc8a:	4443      	add	r3, r8
 800fc8c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fc90:	fb0b 840a 	mla	r4, fp, sl, r8
 800fc94:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800fc98:	46e2      	mov	sl, ip
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fca0:	454f      	cmp	r7, r9
 800fca2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800fca6:	f84a 3b04 	str.w	r3, [sl], #4
 800fcaa:	d82b      	bhi.n	800fd04 <__multiply+0x120>
 800fcac:	f8cc 8004 	str.w	r8, [ip, #4]
 800fcb0:	9b01      	ldr	r3, [sp, #4]
 800fcb2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800fcb6:	3204      	adds	r2, #4
 800fcb8:	f1ba 0f00 	cmp.w	sl, #0
 800fcbc:	d020      	beq.n	800fd00 <__multiply+0x11c>
 800fcbe:	682b      	ldr	r3, [r5, #0]
 800fcc0:	4689      	mov	r9, r1
 800fcc2:	46a8      	mov	r8, r5
 800fcc4:	f04f 0b00 	mov.w	fp, #0
 800fcc8:	f8b9 c000 	ldrh.w	ip, [r9]
 800fccc:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800fcd0:	fb0a 440c 	mla	r4, sl, ip, r4
 800fcd4:	445c      	add	r4, fp
 800fcd6:	46c4      	mov	ip, r8
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800fcde:	f84c 3b04 	str.w	r3, [ip], #4
 800fce2:	f859 3b04 	ldr.w	r3, [r9], #4
 800fce6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800fcea:	0c1b      	lsrs	r3, r3, #16
 800fcec:	fb0a b303 	mla	r3, sl, r3, fp
 800fcf0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800fcf4:	454f      	cmp	r7, r9
 800fcf6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800fcfa:	d805      	bhi.n	800fd08 <__multiply+0x124>
 800fcfc:	f8c8 3004 	str.w	r3, [r8, #4]
 800fd00:	3504      	adds	r5, #4
 800fd02:	e79b      	b.n	800fc3c <__multiply+0x58>
 800fd04:	46d4      	mov	ip, sl
 800fd06:	e7b3      	b.n	800fc70 <__multiply+0x8c>
 800fd08:	46e0      	mov	r8, ip
 800fd0a:	e7dd      	b.n	800fcc8 <__multiply+0xe4>
 800fd0c:	3e01      	subs	r6, #1
 800fd0e:	e799      	b.n	800fc44 <__multiply+0x60>

0800fd10 <__pow5mult>:
 800fd10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd14:	4615      	mov	r5, r2
 800fd16:	f012 0203 	ands.w	r2, r2, #3
 800fd1a:	4606      	mov	r6, r0
 800fd1c:	460f      	mov	r7, r1
 800fd1e:	d007      	beq.n	800fd30 <__pow5mult+0x20>
 800fd20:	3a01      	subs	r2, #1
 800fd22:	4c21      	ldr	r4, [pc, #132]	; (800fda8 <__pow5mult+0x98>)
 800fd24:	2300      	movs	r3, #0
 800fd26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fd2a:	f7ff fec9 	bl	800fac0 <__multadd>
 800fd2e:	4607      	mov	r7, r0
 800fd30:	10ad      	asrs	r5, r5, #2
 800fd32:	d035      	beq.n	800fda0 <__pow5mult+0x90>
 800fd34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fd36:	b93c      	cbnz	r4, 800fd48 <__pow5mult+0x38>
 800fd38:	2010      	movs	r0, #16
 800fd3a:	f7fd fe43 	bl	800d9c4 <malloc>
 800fd3e:	6270      	str	r0, [r6, #36]	; 0x24
 800fd40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd44:	6004      	str	r4, [r0, #0]
 800fd46:	60c4      	str	r4, [r0, #12]
 800fd48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fd4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd50:	b94c      	cbnz	r4, 800fd66 <__pow5mult+0x56>
 800fd52:	f240 2171 	movw	r1, #625	; 0x271
 800fd56:	4630      	mov	r0, r6
 800fd58:	f7ff ff3b 	bl	800fbd2 <__i2b>
 800fd5c:	2300      	movs	r3, #0
 800fd5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd62:	4604      	mov	r4, r0
 800fd64:	6003      	str	r3, [r0, #0]
 800fd66:	f04f 0800 	mov.w	r8, #0
 800fd6a:	07eb      	lsls	r3, r5, #31
 800fd6c:	d50a      	bpl.n	800fd84 <__pow5mult+0x74>
 800fd6e:	4639      	mov	r1, r7
 800fd70:	4622      	mov	r2, r4
 800fd72:	4630      	mov	r0, r6
 800fd74:	f7ff ff36 	bl	800fbe4 <__multiply>
 800fd78:	4639      	mov	r1, r7
 800fd7a:	4681      	mov	r9, r0
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f7ff fe88 	bl	800fa92 <_Bfree>
 800fd82:	464f      	mov	r7, r9
 800fd84:	106d      	asrs	r5, r5, #1
 800fd86:	d00b      	beq.n	800fda0 <__pow5mult+0x90>
 800fd88:	6820      	ldr	r0, [r4, #0]
 800fd8a:	b938      	cbnz	r0, 800fd9c <__pow5mult+0x8c>
 800fd8c:	4622      	mov	r2, r4
 800fd8e:	4621      	mov	r1, r4
 800fd90:	4630      	mov	r0, r6
 800fd92:	f7ff ff27 	bl	800fbe4 <__multiply>
 800fd96:	6020      	str	r0, [r4, #0]
 800fd98:	f8c0 8000 	str.w	r8, [r0]
 800fd9c:	4604      	mov	r4, r0
 800fd9e:	e7e4      	b.n	800fd6a <__pow5mult+0x5a>
 800fda0:	4638      	mov	r0, r7
 800fda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fda6:	bf00      	nop
 800fda8:	08012898 	.word	0x08012898

0800fdac <__lshift>:
 800fdac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdb0:	460c      	mov	r4, r1
 800fdb2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdb6:	6923      	ldr	r3, [r4, #16]
 800fdb8:	6849      	ldr	r1, [r1, #4]
 800fdba:	eb0a 0903 	add.w	r9, sl, r3
 800fdbe:	68a3      	ldr	r3, [r4, #8]
 800fdc0:	4607      	mov	r7, r0
 800fdc2:	4616      	mov	r6, r2
 800fdc4:	f109 0501 	add.w	r5, r9, #1
 800fdc8:	42ab      	cmp	r3, r5
 800fdca:	db32      	blt.n	800fe32 <__lshift+0x86>
 800fdcc:	4638      	mov	r0, r7
 800fdce:	f7ff fe2c 	bl	800fa2a <_Balloc>
 800fdd2:	2300      	movs	r3, #0
 800fdd4:	4680      	mov	r8, r0
 800fdd6:	f100 0114 	add.w	r1, r0, #20
 800fdda:	461a      	mov	r2, r3
 800fddc:	4553      	cmp	r3, sl
 800fdde:	db2b      	blt.n	800fe38 <__lshift+0x8c>
 800fde0:	6920      	ldr	r0, [r4, #16]
 800fde2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fde6:	f104 0314 	add.w	r3, r4, #20
 800fdea:	f016 021f 	ands.w	r2, r6, #31
 800fdee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdf2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fdf6:	d025      	beq.n	800fe44 <__lshift+0x98>
 800fdf8:	f1c2 0e20 	rsb	lr, r2, #32
 800fdfc:	2000      	movs	r0, #0
 800fdfe:	681e      	ldr	r6, [r3, #0]
 800fe00:	468a      	mov	sl, r1
 800fe02:	4096      	lsls	r6, r2
 800fe04:	4330      	orrs	r0, r6
 800fe06:	f84a 0b04 	str.w	r0, [sl], #4
 800fe0a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fe0e:	459c      	cmp	ip, r3
 800fe10:	fa20 f00e 	lsr.w	r0, r0, lr
 800fe14:	d814      	bhi.n	800fe40 <__lshift+0x94>
 800fe16:	6048      	str	r0, [r1, #4]
 800fe18:	b108      	cbz	r0, 800fe1e <__lshift+0x72>
 800fe1a:	f109 0502 	add.w	r5, r9, #2
 800fe1e:	3d01      	subs	r5, #1
 800fe20:	4638      	mov	r0, r7
 800fe22:	f8c8 5010 	str.w	r5, [r8, #16]
 800fe26:	4621      	mov	r1, r4
 800fe28:	f7ff fe33 	bl	800fa92 <_Bfree>
 800fe2c:	4640      	mov	r0, r8
 800fe2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe32:	3101      	adds	r1, #1
 800fe34:	005b      	lsls	r3, r3, #1
 800fe36:	e7c7      	b.n	800fdc8 <__lshift+0x1c>
 800fe38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	e7cd      	b.n	800fddc <__lshift+0x30>
 800fe40:	4651      	mov	r1, sl
 800fe42:	e7dc      	b.n	800fdfe <__lshift+0x52>
 800fe44:	3904      	subs	r1, #4
 800fe46:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe4a:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe4e:	459c      	cmp	ip, r3
 800fe50:	d8f9      	bhi.n	800fe46 <__lshift+0x9a>
 800fe52:	e7e4      	b.n	800fe1e <__lshift+0x72>

0800fe54 <__mcmp>:
 800fe54:	6903      	ldr	r3, [r0, #16]
 800fe56:	690a      	ldr	r2, [r1, #16]
 800fe58:	1a9b      	subs	r3, r3, r2
 800fe5a:	b530      	push	{r4, r5, lr}
 800fe5c:	d10c      	bne.n	800fe78 <__mcmp+0x24>
 800fe5e:	0092      	lsls	r2, r2, #2
 800fe60:	3014      	adds	r0, #20
 800fe62:	3114      	adds	r1, #20
 800fe64:	1884      	adds	r4, r0, r2
 800fe66:	4411      	add	r1, r2
 800fe68:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe6c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe70:	4295      	cmp	r5, r2
 800fe72:	d003      	beq.n	800fe7c <__mcmp+0x28>
 800fe74:	d305      	bcc.n	800fe82 <__mcmp+0x2e>
 800fe76:	2301      	movs	r3, #1
 800fe78:	4618      	mov	r0, r3
 800fe7a:	bd30      	pop	{r4, r5, pc}
 800fe7c:	42a0      	cmp	r0, r4
 800fe7e:	d3f3      	bcc.n	800fe68 <__mcmp+0x14>
 800fe80:	e7fa      	b.n	800fe78 <__mcmp+0x24>
 800fe82:	f04f 33ff 	mov.w	r3, #4294967295
 800fe86:	e7f7      	b.n	800fe78 <__mcmp+0x24>

0800fe88 <__mdiff>:
 800fe88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe8c:	460d      	mov	r5, r1
 800fe8e:	4607      	mov	r7, r0
 800fe90:	4611      	mov	r1, r2
 800fe92:	4628      	mov	r0, r5
 800fe94:	4614      	mov	r4, r2
 800fe96:	f7ff ffdd 	bl	800fe54 <__mcmp>
 800fe9a:	1e06      	subs	r6, r0, #0
 800fe9c:	d108      	bne.n	800feb0 <__mdiff+0x28>
 800fe9e:	4631      	mov	r1, r6
 800fea0:	4638      	mov	r0, r7
 800fea2:	f7ff fdc2 	bl	800fa2a <_Balloc>
 800fea6:	2301      	movs	r3, #1
 800fea8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800feac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800feb0:	bfa4      	itt	ge
 800feb2:	4623      	movge	r3, r4
 800feb4:	462c      	movge	r4, r5
 800feb6:	4638      	mov	r0, r7
 800feb8:	6861      	ldr	r1, [r4, #4]
 800feba:	bfa6      	itte	ge
 800febc:	461d      	movge	r5, r3
 800febe:	2600      	movge	r6, #0
 800fec0:	2601      	movlt	r6, #1
 800fec2:	f7ff fdb2 	bl	800fa2a <_Balloc>
 800fec6:	692b      	ldr	r3, [r5, #16]
 800fec8:	60c6      	str	r6, [r0, #12]
 800feca:	6926      	ldr	r6, [r4, #16]
 800fecc:	f105 0914 	add.w	r9, r5, #20
 800fed0:	f104 0214 	add.w	r2, r4, #20
 800fed4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fed8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fedc:	f100 0514 	add.w	r5, r0, #20
 800fee0:	f04f 0e00 	mov.w	lr, #0
 800fee4:	f852 ab04 	ldr.w	sl, [r2], #4
 800fee8:	f859 4b04 	ldr.w	r4, [r9], #4
 800feec:	fa1e f18a 	uxtah	r1, lr, sl
 800fef0:	b2a3      	uxth	r3, r4
 800fef2:	1ac9      	subs	r1, r1, r3
 800fef4:	0c23      	lsrs	r3, r4, #16
 800fef6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fefa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fefe:	b289      	uxth	r1, r1
 800ff00:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ff04:	45c8      	cmp	r8, r9
 800ff06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ff0a:	4694      	mov	ip, r2
 800ff0c:	f845 3b04 	str.w	r3, [r5], #4
 800ff10:	d8e8      	bhi.n	800fee4 <__mdiff+0x5c>
 800ff12:	45bc      	cmp	ip, r7
 800ff14:	d304      	bcc.n	800ff20 <__mdiff+0x98>
 800ff16:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ff1a:	b183      	cbz	r3, 800ff3e <__mdiff+0xb6>
 800ff1c:	6106      	str	r6, [r0, #16]
 800ff1e:	e7c5      	b.n	800feac <__mdiff+0x24>
 800ff20:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ff24:	fa1e f381 	uxtah	r3, lr, r1
 800ff28:	141a      	asrs	r2, r3, #16
 800ff2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ff2e:	b29b      	uxth	r3, r3
 800ff30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff34:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ff38:	f845 3b04 	str.w	r3, [r5], #4
 800ff3c:	e7e9      	b.n	800ff12 <__mdiff+0x8a>
 800ff3e:	3e01      	subs	r6, #1
 800ff40:	e7e9      	b.n	800ff16 <__mdiff+0x8e>

0800ff42 <__d2b>:
 800ff42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ff46:	460e      	mov	r6, r1
 800ff48:	2101      	movs	r1, #1
 800ff4a:	ec59 8b10 	vmov	r8, r9, d0
 800ff4e:	4615      	mov	r5, r2
 800ff50:	f7ff fd6b 	bl	800fa2a <_Balloc>
 800ff54:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ff58:	4607      	mov	r7, r0
 800ff5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ff5e:	bb34      	cbnz	r4, 800ffae <__d2b+0x6c>
 800ff60:	9301      	str	r3, [sp, #4]
 800ff62:	f1b8 0300 	subs.w	r3, r8, #0
 800ff66:	d027      	beq.n	800ffb8 <__d2b+0x76>
 800ff68:	a802      	add	r0, sp, #8
 800ff6a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ff6e:	f7ff fe01 	bl	800fb74 <__lo0bits>
 800ff72:	9900      	ldr	r1, [sp, #0]
 800ff74:	b1f0      	cbz	r0, 800ffb4 <__d2b+0x72>
 800ff76:	9a01      	ldr	r2, [sp, #4]
 800ff78:	f1c0 0320 	rsb	r3, r0, #32
 800ff7c:	fa02 f303 	lsl.w	r3, r2, r3
 800ff80:	430b      	orrs	r3, r1
 800ff82:	40c2      	lsrs	r2, r0
 800ff84:	617b      	str	r3, [r7, #20]
 800ff86:	9201      	str	r2, [sp, #4]
 800ff88:	9b01      	ldr	r3, [sp, #4]
 800ff8a:	61bb      	str	r3, [r7, #24]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	bf14      	ite	ne
 800ff90:	2102      	movne	r1, #2
 800ff92:	2101      	moveq	r1, #1
 800ff94:	6139      	str	r1, [r7, #16]
 800ff96:	b1c4      	cbz	r4, 800ffca <__d2b+0x88>
 800ff98:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ff9c:	4404      	add	r4, r0
 800ff9e:	6034      	str	r4, [r6, #0]
 800ffa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ffa4:	6028      	str	r0, [r5, #0]
 800ffa6:	4638      	mov	r0, r7
 800ffa8:	b003      	add	sp, #12
 800ffaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ffae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffb2:	e7d5      	b.n	800ff60 <__d2b+0x1e>
 800ffb4:	6179      	str	r1, [r7, #20]
 800ffb6:	e7e7      	b.n	800ff88 <__d2b+0x46>
 800ffb8:	a801      	add	r0, sp, #4
 800ffba:	f7ff fddb 	bl	800fb74 <__lo0bits>
 800ffbe:	9b01      	ldr	r3, [sp, #4]
 800ffc0:	617b      	str	r3, [r7, #20]
 800ffc2:	2101      	movs	r1, #1
 800ffc4:	6139      	str	r1, [r7, #16]
 800ffc6:	3020      	adds	r0, #32
 800ffc8:	e7e5      	b.n	800ff96 <__d2b+0x54>
 800ffca:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ffce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ffd2:	6030      	str	r0, [r6, #0]
 800ffd4:	6918      	ldr	r0, [r3, #16]
 800ffd6:	f7ff fdae 	bl	800fb36 <__hi0bits>
 800ffda:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ffde:	e7e1      	b.n	800ffa4 <__d2b+0x62>

0800ffe0 <_calloc_r>:
 800ffe0:	b538      	push	{r3, r4, r5, lr}
 800ffe2:	fb02 f401 	mul.w	r4, r2, r1
 800ffe6:	4621      	mov	r1, r4
 800ffe8:	f7fd fd5e 	bl	800daa8 <_malloc_r>
 800ffec:	4605      	mov	r5, r0
 800ffee:	b118      	cbz	r0, 800fff8 <_calloc_r+0x18>
 800fff0:	4622      	mov	r2, r4
 800fff2:	2100      	movs	r1, #0
 800fff4:	f7fd fd01 	bl	800d9fa <memset>
 800fff8:	4628      	mov	r0, r5
 800fffa:	bd38      	pop	{r3, r4, r5, pc}

0800fffc <_realloc_r>:
 800fffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fffe:	4607      	mov	r7, r0
 8010000:	4614      	mov	r4, r2
 8010002:	460e      	mov	r6, r1
 8010004:	b921      	cbnz	r1, 8010010 <_realloc_r+0x14>
 8010006:	4611      	mov	r1, r2
 8010008:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801000c:	f7fd bd4c 	b.w	800daa8 <_malloc_r>
 8010010:	b922      	cbnz	r2, 801001c <_realloc_r+0x20>
 8010012:	f7fd fcfb 	bl	800da0c <_free_r>
 8010016:	4625      	mov	r5, r4
 8010018:	4628      	mov	r0, r5
 801001a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801001c:	f000 f9f0 	bl	8010400 <_malloc_usable_size_r>
 8010020:	42a0      	cmp	r0, r4
 8010022:	d20f      	bcs.n	8010044 <_realloc_r+0x48>
 8010024:	4621      	mov	r1, r4
 8010026:	4638      	mov	r0, r7
 8010028:	f7fd fd3e 	bl	800daa8 <_malloc_r>
 801002c:	4605      	mov	r5, r0
 801002e:	2800      	cmp	r0, #0
 8010030:	d0f2      	beq.n	8010018 <_realloc_r+0x1c>
 8010032:	4631      	mov	r1, r6
 8010034:	4622      	mov	r2, r4
 8010036:	f7fd fcd5 	bl	800d9e4 <memcpy>
 801003a:	4631      	mov	r1, r6
 801003c:	4638      	mov	r0, r7
 801003e:	f7fd fce5 	bl	800da0c <_free_r>
 8010042:	e7e9      	b.n	8010018 <_realloc_r+0x1c>
 8010044:	4635      	mov	r5, r6
 8010046:	e7e7      	b.n	8010018 <_realloc_r+0x1c>

08010048 <__ssputs_r>:
 8010048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801004c:	688e      	ldr	r6, [r1, #8]
 801004e:	429e      	cmp	r6, r3
 8010050:	4682      	mov	sl, r0
 8010052:	460c      	mov	r4, r1
 8010054:	4690      	mov	r8, r2
 8010056:	4699      	mov	r9, r3
 8010058:	d837      	bhi.n	80100ca <__ssputs_r+0x82>
 801005a:	898a      	ldrh	r2, [r1, #12]
 801005c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010060:	d031      	beq.n	80100c6 <__ssputs_r+0x7e>
 8010062:	6825      	ldr	r5, [r4, #0]
 8010064:	6909      	ldr	r1, [r1, #16]
 8010066:	1a6f      	subs	r7, r5, r1
 8010068:	6965      	ldr	r5, [r4, #20]
 801006a:	2302      	movs	r3, #2
 801006c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010070:	fb95 f5f3 	sdiv	r5, r5, r3
 8010074:	f109 0301 	add.w	r3, r9, #1
 8010078:	443b      	add	r3, r7
 801007a:	429d      	cmp	r5, r3
 801007c:	bf38      	it	cc
 801007e:	461d      	movcc	r5, r3
 8010080:	0553      	lsls	r3, r2, #21
 8010082:	d530      	bpl.n	80100e6 <__ssputs_r+0x9e>
 8010084:	4629      	mov	r1, r5
 8010086:	f7fd fd0f 	bl	800daa8 <_malloc_r>
 801008a:	4606      	mov	r6, r0
 801008c:	b950      	cbnz	r0, 80100a4 <__ssputs_r+0x5c>
 801008e:	230c      	movs	r3, #12
 8010090:	f8ca 3000 	str.w	r3, [sl]
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a4:	463a      	mov	r2, r7
 80100a6:	6921      	ldr	r1, [r4, #16]
 80100a8:	f7fd fc9c 	bl	800d9e4 <memcpy>
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100b6:	81a3      	strh	r3, [r4, #12]
 80100b8:	6126      	str	r6, [r4, #16]
 80100ba:	6165      	str	r5, [r4, #20]
 80100bc:	443e      	add	r6, r7
 80100be:	1bed      	subs	r5, r5, r7
 80100c0:	6026      	str	r6, [r4, #0]
 80100c2:	60a5      	str	r5, [r4, #8]
 80100c4:	464e      	mov	r6, r9
 80100c6:	454e      	cmp	r6, r9
 80100c8:	d900      	bls.n	80100cc <__ssputs_r+0x84>
 80100ca:	464e      	mov	r6, r9
 80100cc:	4632      	mov	r2, r6
 80100ce:	4641      	mov	r1, r8
 80100d0:	6820      	ldr	r0, [r4, #0]
 80100d2:	f7ff fc8f 	bl	800f9f4 <memmove>
 80100d6:	68a3      	ldr	r3, [r4, #8]
 80100d8:	1b9b      	subs	r3, r3, r6
 80100da:	60a3      	str	r3, [r4, #8]
 80100dc:	6823      	ldr	r3, [r4, #0]
 80100de:	441e      	add	r6, r3
 80100e0:	6026      	str	r6, [r4, #0]
 80100e2:	2000      	movs	r0, #0
 80100e4:	e7dc      	b.n	80100a0 <__ssputs_r+0x58>
 80100e6:	462a      	mov	r2, r5
 80100e8:	f7ff ff88 	bl	800fffc <_realloc_r>
 80100ec:	4606      	mov	r6, r0
 80100ee:	2800      	cmp	r0, #0
 80100f0:	d1e2      	bne.n	80100b8 <__ssputs_r+0x70>
 80100f2:	6921      	ldr	r1, [r4, #16]
 80100f4:	4650      	mov	r0, sl
 80100f6:	f7fd fc89 	bl	800da0c <_free_r>
 80100fa:	e7c8      	b.n	801008e <__ssputs_r+0x46>

080100fc <_svfiprintf_r>:
 80100fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010100:	461d      	mov	r5, r3
 8010102:	898b      	ldrh	r3, [r1, #12]
 8010104:	061f      	lsls	r7, r3, #24
 8010106:	b09d      	sub	sp, #116	; 0x74
 8010108:	4680      	mov	r8, r0
 801010a:	460c      	mov	r4, r1
 801010c:	4616      	mov	r6, r2
 801010e:	d50f      	bpl.n	8010130 <_svfiprintf_r+0x34>
 8010110:	690b      	ldr	r3, [r1, #16]
 8010112:	b96b      	cbnz	r3, 8010130 <_svfiprintf_r+0x34>
 8010114:	2140      	movs	r1, #64	; 0x40
 8010116:	f7fd fcc7 	bl	800daa8 <_malloc_r>
 801011a:	6020      	str	r0, [r4, #0]
 801011c:	6120      	str	r0, [r4, #16]
 801011e:	b928      	cbnz	r0, 801012c <_svfiprintf_r+0x30>
 8010120:	230c      	movs	r3, #12
 8010122:	f8c8 3000 	str.w	r3, [r8]
 8010126:	f04f 30ff 	mov.w	r0, #4294967295
 801012a:	e0c8      	b.n	80102be <_svfiprintf_r+0x1c2>
 801012c:	2340      	movs	r3, #64	; 0x40
 801012e:	6163      	str	r3, [r4, #20]
 8010130:	2300      	movs	r3, #0
 8010132:	9309      	str	r3, [sp, #36]	; 0x24
 8010134:	2320      	movs	r3, #32
 8010136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801013a:	2330      	movs	r3, #48	; 0x30
 801013c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010140:	9503      	str	r5, [sp, #12]
 8010142:	f04f 0b01 	mov.w	fp, #1
 8010146:	4637      	mov	r7, r6
 8010148:	463d      	mov	r5, r7
 801014a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801014e:	b10b      	cbz	r3, 8010154 <_svfiprintf_r+0x58>
 8010150:	2b25      	cmp	r3, #37	; 0x25
 8010152:	d13e      	bne.n	80101d2 <_svfiprintf_r+0xd6>
 8010154:	ebb7 0a06 	subs.w	sl, r7, r6
 8010158:	d00b      	beq.n	8010172 <_svfiprintf_r+0x76>
 801015a:	4653      	mov	r3, sl
 801015c:	4632      	mov	r2, r6
 801015e:	4621      	mov	r1, r4
 8010160:	4640      	mov	r0, r8
 8010162:	f7ff ff71 	bl	8010048 <__ssputs_r>
 8010166:	3001      	adds	r0, #1
 8010168:	f000 80a4 	beq.w	80102b4 <_svfiprintf_r+0x1b8>
 801016c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801016e:	4453      	add	r3, sl
 8010170:	9309      	str	r3, [sp, #36]	; 0x24
 8010172:	783b      	ldrb	r3, [r7, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 809d 	beq.w	80102b4 <_svfiprintf_r+0x1b8>
 801017a:	2300      	movs	r3, #0
 801017c:	f04f 32ff 	mov.w	r2, #4294967295
 8010180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010184:	9304      	str	r3, [sp, #16]
 8010186:	9307      	str	r3, [sp, #28]
 8010188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801018c:	931a      	str	r3, [sp, #104]	; 0x68
 801018e:	462f      	mov	r7, r5
 8010190:	2205      	movs	r2, #5
 8010192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010196:	4850      	ldr	r0, [pc, #320]	; (80102d8 <_svfiprintf_r+0x1dc>)
 8010198:	f7f0 f842 	bl	8000220 <memchr>
 801019c:	9b04      	ldr	r3, [sp, #16]
 801019e:	b9d0      	cbnz	r0, 80101d6 <_svfiprintf_r+0xda>
 80101a0:	06d9      	lsls	r1, r3, #27
 80101a2:	bf44      	itt	mi
 80101a4:	2220      	movmi	r2, #32
 80101a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80101aa:	071a      	lsls	r2, r3, #28
 80101ac:	bf44      	itt	mi
 80101ae:	222b      	movmi	r2, #43	; 0x2b
 80101b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80101b4:	782a      	ldrb	r2, [r5, #0]
 80101b6:	2a2a      	cmp	r2, #42	; 0x2a
 80101b8:	d015      	beq.n	80101e6 <_svfiprintf_r+0xea>
 80101ba:	9a07      	ldr	r2, [sp, #28]
 80101bc:	462f      	mov	r7, r5
 80101be:	2000      	movs	r0, #0
 80101c0:	250a      	movs	r5, #10
 80101c2:	4639      	mov	r1, r7
 80101c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101c8:	3b30      	subs	r3, #48	; 0x30
 80101ca:	2b09      	cmp	r3, #9
 80101cc:	d94d      	bls.n	801026a <_svfiprintf_r+0x16e>
 80101ce:	b1b8      	cbz	r0, 8010200 <_svfiprintf_r+0x104>
 80101d0:	e00f      	b.n	80101f2 <_svfiprintf_r+0xf6>
 80101d2:	462f      	mov	r7, r5
 80101d4:	e7b8      	b.n	8010148 <_svfiprintf_r+0x4c>
 80101d6:	4a40      	ldr	r2, [pc, #256]	; (80102d8 <_svfiprintf_r+0x1dc>)
 80101d8:	1a80      	subs	r0, r0, r2
 80101da:	fa0b f000 	lsl.w	r0, fp, r0
 80101de:	4318      	orrs	r0, r3
 80101e0:	9004      	str	r0, [sp, #16]
 80101e2:	463d      	mov	r5, r7
 80101e4:	e7d3      	b.n	801018e <_svfiprintf_r+0x92>
 80101e6:	9a03      	ldr	r2, [sp, #12]
 80101e8:	1d11      	adds	r1, r2, #4
 80101ea:	6812      	ldr	r2, [r2, #0]
 80101ec:	9103      	str	r1, [sp, #12]
 80101ee:	2a00      	cmp	r2, #0
 80101f0:	db01      	blt.n	80101f6 <_svfiprintf_r+0xfa>
 80101f2:	9207      	str	r2, [sp, #28]
 80101f4:	e004      	b.n	8010200 <_svfiprintf_r+0x104>
 80101f6:	4252      	negs	r2, r2
 80101f8:	f043 0302 	orr.w	r3, r3, #2
 80101fc:	9207      	str	r2, [sp, #28]
 80101fe:	9304      	str	r3, [sp, #16]
 8010200:	783b      	ldrb	r3, [r7, #0]
 8010202:	2b2e      	cmp	r3, #46	; 0x2e
 8010204:	d10c      	bne.n	8010220 <_svfiprintf_r+0x124>
 8010206:	787b      	ldrb	r3, [r7, #1]
 8010208:	2b2a      	cmp	r3, #42	; 0x2a
 801020a:	d133      	bne.n	8010274 <_svfiprintf_r+0x178>
 801020c:	9b03      	ldr	r3, [sp, #12]
 801020e:	1d1a      	adds	r2, r3, #4
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	9203      	str	r2, [sp, #12]
 8010214:	2b00      	cmp	r3, #0
 8010216:	bfb8      	it	lt
 8010218:	f04f 33ff 	movlt.w	r3, #4294967295
 801021c:	3702      	adds	r7, #2
 801021e:	9305      	str	r3, [sp, #20]
 8010220:	4d2e      	ldr	r5, [pc, #184]	; (80102dc <_svfiprintf_r+0x1e0>)
 8010222:	7839      	ldrb	r1, [r7, #0]
 8010224:	2203      	movs	r2, #3
 8010226:	4628      	mov	r0, r5
 8010228:	f7ef fffa 	bl	8000220 <memchr>
 801022c:	b138      	cbz	r0, 801023e <_svfiprintf_r+0x142>
 801022e:	2340      	movs	r3, #64	; 0x40
 8010230:	1b40      	subs	r0, r0, r5
 8010232:	fa03 f000 	lsl.w	r0, r3, r0
 8010236:	9b04      	ldr	r3, [sp, #16]
 8010238:	4303      	orrs	r3, r0
 801023a:	3701      	adds	r7, #1
 801023c:	9304      	str	r3, [sp, #16]
 801023e:	7839      	ldrb	r1, [r7, #0]
 8010240:	4827      	ldr	r0, [pc, #156]	; (80102e0 <_svfiprintf_r+0x1e4>)
 8010242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010246:	2206      	movs	r2, #6
 8010248:	1c7e      	adds	r6, r7, #1
 801024a:	f7ef ffe9 	bl	8000220 <memchr>
 801024e:	2800      	cmp	r0, #0
 8010250:	d038      	beq.n	80102c4 <_svfiprintf_r+0x1c8>
 8010252:	4b24      	ldr	r3, [pc, #144]	; (80102e4 <_svfiprintf_r+0x1e8>)
 8010254:	bb13      	cbnz	r3, 801029c <_svfiprintf_r+0x1a0>
 8010256:	9b03      	ldr	r3, [sp, #12]
 8010258:	3307      	adds	r3, #7
 801025a:	f023 0307 	bic.w	r3, r3, #7
 801025e:	3308      	adds	r3, #8
 8010260:	9303      	str	r3, [sp, #12]
 8010262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010264:	444b      	add	r3, r9
 8010266:	9309      	str	r3, [sp, #36]	; 0x24
 8010268:	e76d      	b.n	8010146 <_svfiprintf_r+0x4a>
 801026a:	fb05 3202 	mla	r2, r5, r2, r3
 801026e:	2001      	movs	r0, #1
 8010270:	460f      	mov	r7, r1
 8010272:	e7a6      	b.n	80101c2 <_svfiprintf_r+0xc6>
 8010274:	2300      	movs	r3, #0
 8010276:	3701      	adds	r7, #1
 8010278:	9305      	str	r3, [sp, #20]
 801027a:	4619      	mov	r1, r3
 801027c:	250a      	movs	r5, #10
 801027e:	4638      	mov	r0, r7
 8010280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010284:	3a30      	subs	r2, #48	; 0x30
 8010286:	2a09      	cmp	r2, #9
 8010288:	d903      	bls.n	8010292 <_svfiprintf_r+0x196>
 801028a:	2b00      	cmp	r3, #0
 801028c:	d0c8      	beq.n	8010220 <_svfiprintf_r+0x124>
 801028e:	9105      	str	r1, [sp, #20]
 8010290:	e7c6      	b.n	8010220 <_svfiprintf_r+0x124>
 8010292:	fb05 2101 	mla	r1, r5, r1, r2
 8010296:	2301      	movs	r3, #1
 8010298:	4607      	mov	r7, r0
 801029a:	e7f0      	b.n	801027e <_svfiprintf_r+0x182>
 801029c:	ab03      	add	r3, sp, #12
 801029e:	9300      	str	r3, [sp, #0]
 80102a0:	4622      	mov	r2, r4
 80102a2:	4b11      	ldr	r3, [pc, #68]	; (80102e8 <_svfiprintf_r+0x1ec>)
 80102a4:	a904      	add	r1, sp, #16
 80102a6:	4640      	mov	r0, r8
 80102a8:	f7fd fe2c 	bl	800df04 <_printf_float>
 80102ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80102b0:	4681      	mov	r9, r0
 80102b2:	d1d6      	bne.n	8010262 <_svfiprintf_r+0x166>
 80102b4:	89a3      	ldrh	r3, [r4, #12]
 80102b6:	065b      	lsls	r3, r3, #25
 80102b8:	f53f af35 	bmi.w	8010126 <_svfiprintf_r+0x2a>
 80102bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102be:	b01d      	add	sp, #116	; 0x74
 80102c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102c4:	ab03      	add	r3, sp, #12
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	4622      	mov	r2, r4
 80102ca:	4b07      	ldr	r3, [pc, #28]	; (80102e8 <_svfiprintf_r+0x1ec>)
 80102cc:	a904      	add	r1, sp, #16
 80102ce:	4640      	mov	r0, r8
 80102d0:	f7fe f8ce 	bl	800e470 <_printf_i>
 80102d4:	e7ea      	b.n	80102ac <_svfiprintf_r+0x1b0>
 80102d6:	bf00      	nop
 80102d8:	080126f0 	.word	0x080126f0
 80102dc:	080126f6 	.word	0x080126f6
 80102e0:	080126fa 	.word	0x080126fa
 80102e4:	0800df05 	.word	0x0800df05
 80102e8:	08010049 	.word	0x08010049

080102ec <_read_r>:
 80102ec:	b538      	push	{r3, r4, r5, lr}
 80102ee:	4c07      	ldr	r4, [pc, #28]	; (801030c <_read_r+0x20>)
 80102f0:	4605      	mov	r5, r0
 80102f2:	4608      	mov	r0, r1
 80102f4:	4611      	mov	r1, r2
 80102f6:	2200      	movs	r2, #0
 80102f8:	6022      	str	r2, [r4, #0]
 80102fa:	461a      	mov	r2, r3
 80102fc:	f7f3 fce2 	bl	8003cc4 <_read>
 8010300:	1c43      	adds	r3, r0, #1
 8010302:	d102      	bne.n	801030a <_read_r+0x1e>
 8010304:	6823      	ldr	r3, [r4, #0]
 8010306:	b103      	cbz	r3, 801030a <_read_r+0x1e>
 8010308:	602b      	str	r3, [r5, #0]
 801030a:	bd38      	pop	{r3, r4, r5, pc}
 801030c:	2000232c 	.word	0x2000232c

08010310 <_raise_r>:
 8010310:	291f      	cmp	r1, #31
 8010312:	b538      	push	{r3, r4, r5, lr}
 8010314:	4604      	mov	r4, r0
 8010316:	460d      	mov	r5, r1
 8010318:	d904      	bls.n	8010324 <_raise_r+0x14>
 801031a:	2316      	movs	r3, #22
 801031c:	6003      	str	r3, [r0, #0]
 801031e:	f04f 30ff 	mov.w	r0, #4294967295
 8010322:	bd38      	pop	{r3, r4, r5, pc}
 8010324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010326:	b112      	cbz	r2, 801032e <_raise_r+0x1e>
 8010328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801032c:	b94b      	cbnz	r3, 8010342 <_raise_r+0x32>
 801032e:	4620      	mov	r0, r4
 8010330:	f000 f830 	bl	8010394 <_getpid_r>
 8010334:	462a      	mov	r2, r5
 8010336:	4601      	mov	r1, r0
 8010338:	4620      	mov	r0, r4
 801033a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801033e:	f000 b817 	b.w	8010370 <_kill_r>
 8010342:	2b01      	cmp	r3, #1
 8010344:	d00a      	beq.n	801035c <_raise_r+0x4c>
 8010346:	1c59      	adds	r1, r3, #1
 8010348:	d103      	bne.n	8010352 <_raise_r+0x42>
 801034a:	2316      	movs	r3, #22
 801034c:	6003      	str	r3, [r0, #0]
 801034e:	2001      	movs	r0, #1
 8010350:	e7e7      	b.n	8010322 <_raise_r+0x12>
 8010352:	2400      	movs	r4, #0
 8010354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010358:	4628      	mov	r0, r5
 801035a:	4798      	blx	r3
 801035c:	2000      	movs	r0, #0
 801035e:	e7e0      	b.n	8010322 <_raise_r+0x12>

08010360 <raise>:
 8010360:	4b02      	ldr	r3, [pc, #8]	; (801036c <raise+0xc>)
 8010362:	4601      	mov	r1, r0
 8010364:	6818      	ldr	r0, [r3, #0]
 8010366:	f7ff bfd3 	b.w	8010310 <_raise_r>
 801036a:	bf00      	nop
 801036c:	200001b0 	.word	0x200001b0

08010370 <_kill_r>:
 8010370:	b538      	push	{r3, r4, r5, lr}
 8010372:	4c07      	ldr	r4, [pc, #28]	; (8010390 <_kill_r+0x20>)
 8010374:	2300      	movs	r3, #0
 8010376:	4605      	mov	r5, r0
 8010378:	4608      	mov	r0, r1
 801037a:	4611      	mov	r1, r2
 801037c:	6023      	str	r3, [r4, #0]
 801037e:	f7f3 fc87 	bl	8003c90 <_kill>
 8010382:	1c43      	adds	r3, r0, #1
 8010384:	d102      	bne.n	801038c <_kill_r+0x1c>
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	b103      	cbz	r3, 801038c <_kill_r+0x1c>
 801038a:	602b      	str	r3, [r5, #0]
 801038c:	bd38      	pop	{r3, r4, r5, pc}
 801038e:	bf00      	nop
 8010390:	2000232c 	.word	0x2000232c

08010394 <_getpid_r>:
 8010394:	f7f3 bc74 	b.w	8003c80 <_getpid>

08010398 <_fstat_r>:
 8010398:	b538      	push	{r3, r4, r5, lr}
 801039a:	4c07      	ldr	r4, [pc, #28]	; (80103b8 <_fstat_r+0x20>)
 801039c:	2300      	movs	r3, #0
 801039e:	4605      	mov	r5, r0
 80103a0:	4608      	mov	r0, r1
 80103a2:	4611      	mov	r1, r2
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	f7f3 fcd2 	bl	8003d4e <_fstat>
 80103aa:	1c43      	adds	r3, r0, #1
 80103ac:	d102      	bne.n	80103b4 <_fstat_r+0x1c>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	b103      	cbz	r3, 80103b4 <_fstat_r+0x1c>
 80103b2:	602b      	str	r3, [r5, #0]
 80103b4:	bd38      	pop	{r3, r4, r5, pc}
 80103b6:	bf00      	nop
 80103b8:	2000232c 	.word	0x2000232c

080103bc <_isatty_r>:
 80103bc:	b538      	push	{r3, r4, r5, lr}
 80103be:	4c06      	ldr	r4, [pc, #24]	; (80103d8 <_isatty_r+0x1c>)
 80103c0:	2300      	movs	r3, #0
 80103c2:	4605      	mov	r5, r0
 80103c4:	4608      	mov	r0, r1
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	f7f3 fcd1 	bl	8003d6e <_isatty>
 80103cc:	1c43      	adds	r3, r0, #1
 80103ce:	d102      	bne.n	80103d6 <_isatty_r+0x1a>
 80103d0:	6823      	ldr	r3, [r4, #0]
 80103d2:	b103      	cbz	r3, 80103d6 <_isatty_r+0x1a>
 80103d4:	602b      	str	r3, [r5, #0]
 80103d6:	bd38      	pop	{r3, r4, r5, pc}
 80103d8:	2000232c 	.word	0x2000232c

080103dc <__ascii_mbtowc>:
 80103dc:	b082      	sub	sp, #8
 80103de:	b901      	cbnz	r1, 80103e2 <__ascii_mbtowc+0x6>
 80103e0:	a901      	add	r1, sp, #4
 80103e2:	b142      	cbz	r2, 80103f6 <__ascii_mbtowc+0x1a>
 80103e4:	b14b      	cbz	r3, 80103fa <__ascii_mbtowc+0x1e>
 80103e6:	7813      	ldrb	r3, [r2, #0]
 80103e8:	600b      	str	r3, [r1, #0]
 80103ea:	7812      	ldrb	r2, [r2, #0]
 80103ec:	1c10      	adds	r0, r2, #0
 80103ee:	bf18      	it	ne
 80103f0:	2001      	movne	r0, #1
 80103f2:	b002      	add	sp, #8
 80103f4:	4770      	bx	lr
 80103f6:	4610      	mov	r0, r2
 80103f8:	e7fb      	b.n	80103f2 <__ascii_mbtowc+0x16>
 80103fa:	f06f 0001 	mvn.w	r0, #1
 80103fe:	e7f8      	b.n	80103f2 <__ascii_mbtowc+0x16>

08010400 <_malloc_usable_size_r>:
 8010400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010404:	1f18      	subs	r0, r3, #4
 8010406:	2b00      	cmp	r3, #0
 8010408:	bfbc      	itt	lt
 801040a:	580b      	ldrlt	r3, [r1, r0]
 801040c:	18c0      	addlt	r0, r0, r3
 801040e:	4770      	bx	lr

08010410 <__ascii_wctomb>:
 8010410:	b149      	cbz	r1, 8010426 <__ascii_wctomb+0x16>
 8010412:	2aff      	cmp	r2, #255	; 0xff
 8010414:	bf85      	ittet	hi
 8010416:	238a      	movhi	r3, #138	; 0x8a
 8010418:	6003      	strhi	r3, [r0, #0]
 801041a:	700a      	strbls	r2, [r1, #0]
 801041c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010420:	bf98      	it	ls
 8010422:	2001      	movls	r0, #1
 8010424:	4770      	bx	lr
 8010426:	4608      	mov	r0, r1
 8010428:	4770      	bx	lr
 801042a:	0000      	movs	r0, r0
 801042c:	0000      	movs	r0, r0
	...

08010430 <cos>:
 8010430:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010432:	ec51 0b10 	vmov	r0, r1, d0
 8010436:	4a1e      	ldr	r2, [pc, #120]	; (80104b0 <cos+0x80>)
 8010438:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801043c:	4293      	cmp	r3, r2
 801043e:	dc06      	bgt.n	801044e <cos+0x1e>
 8010440:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80104a8 <cos+0x78>
 8010444:	f000 fec8 	bl	80111d8 <__kernel_cos>
 8010448:	ec51 0b10 	vmov	r0, r1, d0
 801044c:	e007      	b.n	801045e <cos+0x2e>
 801044e:	4a19      	ldr	r2, [pc, #100]	; (80104b4 <cos+0x84>)
 8010450:	4293      	cmp	r3, r2
 8010452:	dd09      	ble.n	8010468 <cos+0x38>
 8010454:	ee10 2a10 	vmov	r2, s0
 8010458:	460b      	mov	r3, r1
 801045a:	f7ef ff35 	bl	80002c8 <__aeabi_dsub>
 801045e:	ec41 0b10 	vmov	d0, r0, r1
 8010462:	b005      	add	sp, #20
 8010464:	f85d fb04 	ldr.w	pc, [sp], #4
 8010468:	4668      	mov	r0, sp
 801046a:	f000 fc11 	bl	8010c90 <__ieee754_rem_pio2>
 801046e:	f000 0003 	and.w	r0, r0, #3
 8010472:	2801      	cmp	r0, #1
 8010474:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010478:	ed9d 0b00 	vldr	d0, [sp]
 801047c:	d007      	beq.n	801048e <cos+0x5e>
 801047e:	2802      	cmp	r0, #2
 8010480:	d00e      	beq.n	80104a0 <cos+0x70>
 8010482:	2800      	cmp	r0, #0
 8010484:	d0de      	beq.n	8010444 <cos+0x14>
 8010486:	2001      	movs	r0, #1
 8010488:	f001 faae 	bl	80119e8 <__kernel_sin>
 801048c:	e7dc      	b.n	8010448 <cos+0x18>
 801048e:	f001 faab 	bl	80119e8 <__kernel_sin>
 8010492:	ec53 2b10 	vmov	r2, r3, d0
 8010496:	ee10 0a10 	vmov	r0, s0
 801049a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801049e:	e7de      	b.n	801045e <cos+0x2e>
 80104a0:	f000 fe9a 	bl	80111d8 <__kernel_cos>
 80104a4:	e7f5      	b.n	8010492 <cos+0x62>
 80104a6:	bf00      	nop
	...
 80104b0:	3fe921fb 	.word	0x3fe921fb
 80104b4:	7fefffff 	.word	0x7fefffff

080104b8 <sin>:
 80104b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80104ba:	ec51 0b10 	vmov	r0, r1, d0
 80104be:	4a20      	ldr	r2, [pc, #128]	; (8010540 <sin+0x88>)
 80104c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80104c4:	4293      	cmp	r3, r2
 80104c6:	dc07      	bgt.n	80104d8 <sin+0x20>
 80104c8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010538 <sin+0x80>
 80104cc:	2000      	movs	r0, #0
 80104ce:	f001 fa8b 	bl	80119e8 <__kernel_sin>
 80104d2:	ec51 0b10 	vmov	r0, r1, d0
 80104d6:	e007      	b.n	80104e8 <sin+0x30>
 80104d8:	4a1a      	ldr	r2, [pc, #104]	; (8010544 <sin+0x8c>)
 80104da:	4293      	cmp	r3, r2
 80104dc:	dd09      	ble.n	80104f2 <sin+0x3a>
 80104de:	ee10 2a10 	vmov	r2, s0
 80104e2:	460b      	mov	r3, r1
 80104e4:	f7ef fef0 	bl	80002c8 <__aeabi_dsub>
 80104e8:	ec41 0b10 	vmov	d0, r0, r1
 80104ec:	b005      	add	sp, #20
 80104ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80104f2:	4668      	mov	r0, sp
 80104f4:	f000 fbcc 	bl	8010c90 <__ieee754_rem_pio2>
 80104f8:	f000 0003 	and.w	r0, r0, #3
 80104fc:	2801      	cmp	r0, #1
 80104fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010502:	ed9d 0b00 	vldr	d0, [sp]
 8010506:	d004      	beq.n	8010512 <sin+0x5a>
 8010508:	2802      	cmp	r0, #2
 801050a:	d005      	beq.n	8010518 <sin+0x60>
 801050c:	b970      	cbnz	r0, 801052c <sin+0x74>
 801050e:	2001      	movs	r0, #1
 8010510:	e7dd      	b.n	80104ce <sin+0x16>
 8010512:	f000 fe61 	bl	80111d8 <__kernel_cos>
 8010516:	e7dc      	b.n	80104d2 <sin+0x1a>
 8010518:	2001      	movs	r0, #1
 801051a:	f001 fa65 	bl	80119e8 <__kernel_sin>
 801051e:	ec53 2b10 	vmov	r2, r3, d0
 8010522:	ee10 0a10 	vmov	r0, s0
 8010526:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801052a:	e7dd      	b.n	80104e8 <sin+0x30>
 801052c:	f000 fe54 	bl	80111d8 <__kernel_cos>
 8010530:	e7f5      	b.n	801051e <sin+0x66>
 8010532:	bf00      	nop
 8010534:	f3af 8000 	nop.w
	...
 8010540:	3fe921fb 	.word	0x3fe921fb
 8010544:	7fefffff 	.word	0x7fefffff

08010548 <asin>:
 8010548:	b5f0      	push	{r4, r5, r6, r7, lr}
 801054a:	ed2d 8b02 	vpush	{d8}
 801054e:	4e26      	ldr	r6, [pc, #152]	; (80105e8 <asin+0xa0>)
 8010550:	b08b      	sub	sp, #44	; 0x2c
 8010552:	ec55 4b10 	vmov	r4, r5, d0
 8010556:	f000 f8ab 	bl	80106b0 <__ieee754_asin>
 801055a:	f996 3000 	ldrsb.w	r3, [r6]
 801055e:	eeb0 8a40 	vmov.f32	s16, s0
 8010562:	eef0 8a60 	vmov.f32	s17, s1
 8010566:	3301      	adds	r3, #1
 8010568:	d036      	beq.n	80105d8 <asin+0x90>
 801056a:	4622      	mov	r2, r4
 801056c:	462b      	mov	r3, r5
 801056e:	4620      	mov	r0, r4
 8010570:	4629      	mov	r1, r5
 8010572:	f7f0 fafb 	bl	8000b6c <__aeabi_dcmpun>
 8010576:	4607      	mov	r7, r0
 8010578:	bb70      	cbnz	r0, 80105d8 <asin+0x90>
 801057a:	ec45 4b10 	vmov	d0, r4, r5
 801057e:	f001 fc8f 	bl	8011ea0 <fabs>
 8010582:	2200      	movs	r2, #0
 8010584:	4b19      	ldr	r3, [pc, #100]	; (80105ec <asin+0xa4>)
 8010586:	ec51 0b10 	vmov	r0, r1, d0
 801058a:	f7f0 fae5 	bl	8000b58 <__aeabi_dcmpgt>
 801058e:	b318      	cbz	r0, 80105d8 <asin+0x90>
 8010590:	2301      	movs	r3, #1
 8010592:	9300      	str	r3, [sp, #0]
 8010594:	4816      	ldr	r0, [pc, #88]	; (80105f0 <asin+0xa8>)
 8010596:	4b17      	ldr	r3, [pc, #92]	; (80105f4 <asin+0xac>)
 8010598:	9301      	str	r3, [sp, #4]
 801059a:	9708      	str	r7, [sp, #32]
 801059c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80105a0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80105a4:	f001 fd10 	bl	8011fc8 <nan>
 80105a8:	f996 3000 	ldrsb.w	r3, [r6]
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	ed8d 0b06 	vstr	d0, [sp, #24]
 80105b2:	d104      	bne.n	80105be <asin+0x76>
 80105b4:	f7fd f9ca 	bl	800d94c <__errno>
 80105b8:	2321      	movs	r3, #33	; 0x21
 80105ba:	6003      	str	r3, [r0, #0]
 80105bc:	e004      	b.n	80105c8 <asin+0x80>
 80105be:	4668      	mov	r0, sp
 80105c0:	f001 fcfe 	bl	8011fc0 <matherr>
 80105c4:	2800      	cmp	r0, #0
 80105c6:	d0f5      	beq.n	80105b4 <asin+0x6c>
 80105c8:	9b08      	ldr	r3, [sp, #32]
 80105ca:	b11b      	cbz	r3, 80105d4 <asin+0x8c>
 80105cc:	f7fd f9be 	bl	800d94c <__errno>
 80105d0:	9b08      	ldr	r3, [sp, #32]
 80105d2:	6003      	str	r3, [r0, #0]
 80105d4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80105d8:	eeb0 0a48 	vmov.f32	s0, s16
 80105dc:	eef0 0a68 	vmov.f32	s1, s17
 80105e0:	b00b      	add	sp, #44	; 0x2c
 80105e2:	ecbd 8b02 	vpop	{d8}
 80105e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105e8:	20000380 	.word	0x20000380
 80105ec:	3ff00000 	.word	0x3ff00000
 80105f0:	080126eb 	.word	0x080126eb
 80105f4:	080129af 	.word	0x080129af

080105f8 <atan2>:
 80105f8:	f000 ba6a 	b.w	8010ad0 <__ieee754_atan2>

080105fc <sqrt>:
 80105fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010600:	ed2d 8b02 	vpush	{d8}
 8010604:	b08b      	sub	sp, #44	; 0x2c
 8010606:	ec55 4b10 	vmov	r4, r5, d0
 801060a:	f000 fd33 	bl	8011074 <__ieee754_sqrt>
 801060e:	4b26      	ldr	r3, [pc, #152]	; (80106a8 <sqrt+0xac>)
 8010610:	eeb0 8a40 	vmov.f32	s16, s0
 8010614:	eef0 8a60 	vmov.f32	s17, s1
 8010618:	f993 6000 	ldrsb.w	r6, [r3]
 801061c:	1c73      	adds	r3, r6, #1
 801061e:	d02a      	beq.n	8010676 <sqrt+0x7a>
 8010620:	4622      	mov	r2, r4
 8010622:	462b      	mov	r3, r5
 8010624:	4620      	mov	r0, r4
 8010626:	4629      	mov	r1, r5
 8010628:	f7f0 faa0 	bl	8000b6c <__aeabi_dcmpun>
 801062c:	4607      	mov	r7, r0
 801062e:	bb10      	cbnz	r0, 8010676 <sqrt+0x7a>
 8010630:	f04f 0800 	mov.w	r8, #0
 8010634:	f04f 0900 	mov.w	r9, #0
 8010638:	4642      	mov	r2, r8
 801063a:	464b      	mov	r3, r9
 801063c:	4620      	mov	r0, r4
 801063e:	4629      	mov	r1, r5
 8010640:	f7f0 fa6c 	bl	8000b1c <__aeabi_dcmplt>
 8010644:	b1b8      	cbz	r0, 8010676 <sqrt+0x7a>
 8010646:	2301      	movs	r3, #1
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	4b18      	ldr	r3, [pc, #96]	; (80106ac <sqrt+0xb0>)
 801064c:	9301      	str	r3, [sp, #4]
 801064e:	9708      	str	r7, [sp, #32]
 8010650:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8010654:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8010658:	b9b6      	cbnz	r6, 8010688 <sqrt+0x8c>
 801065a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801065e:	4668      	mov	r0, sp
 8010660:	f001 fcae 	bl	8011fc0 <matherr>
 8010664:	b1d0      	cbz	r0, 801069c <sqrt+0xa0>
 8010666:	9b08      	ldr	r3, [sp, #32]
 8010668:	b11b      	cbz	r3, 8010672 <sqrt+0x76>
 801066a:	f7fd f96f 	bl	800d94c <__errno>
 801066e:	9b08      	ldr	r3, [sp, #32]
 8010670:	6003      	str	r3, [r0, #0]
 8010672:	ed9d 8b06 	vldr	d8, [sp, #24]
 8010676:	eeb0 0a48 	vmov.f32	s0, s16
 801067a:	eef0 0a68 	vmov.f32	s1, s17
 801067e:	b00b      	add	sp, #44	; 0x2c
 8010680:	ecbd 8b02 	vpop	{d8}
 8010684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010688:	4642      	mov	r2, r8
 801068a:	464b      	mov	r3, r9
 801068c:	4640      	mov	r0, r8
 801068e:	4649      	mov	r1, r9
 8010690:	f7f0 f8fc 	bl	800088c <__aeabi_ddiv>
 8010694:	2e02      	cmp	r6, #2
 8010696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801069a:	d1e0      	bne.n	801065e <sqrt+0x62>
 801069c:	f7fd f956 	bl	800d94c <__errno>
 80106a0:	2321      	movs	r3, #33	; 0x21
 80106a2:	6003      	str	r3, [r0, #0]
 80106a4:	e7df      	b.n	8010666 <sqrt+0x6a>
 80106a6:	bf00      	nop
 80106a8:	20000380 	.word	0x20000380
 80106ac:	080129b4 	.word	0x080129b4

080106b0 <__ieee754_asin>:
 80106b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106b4:	ec55 4b10 	vmov	r4, r5, d0
 80106b8:	4bcb      	ldr	r3, [pc, #812]	; (80109e8 <__ieee754_asin+0x338>)
 80106ba:	b087      	sub	sp, #28
 80106bc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80106c0:	429f      	cmp	r7, r3
 80106c2:	9501      	str	r5, [sp, #4]
 80106c4:	dd31      	ble.n	801072a <__ieee754_asin+0x7a>
 80106c6:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80106ca:	ee10 3a10 	vmov	r3, s0
 80106ce:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80106d2:	433b      	orrs	r3, r7
 80106d4:	d117      	bne.n	8010706 <__ieee754_asin+0x56>
 80106d6:	a3aa      	add	r3, pc, #680	; (adr r3, 8010980 <__ieee754_asin+0x2d0>)
 80106d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106dc:	ee10 0a10 	vmov	r0, s0
 80106e0:	4629      	mov	r1, r5
 80106e2:	f7ef ffa9 	bl	8000638 <__aeabi_dmul>
 80106e6:	a3a8      	add	r3, pc, #672	; (adr r3, 8010988 <__ieee754_asin+0x2d8>)
 80106e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ec:	4606      	mov	r6, r0
 80106ee:	460f      	mov	r7, r1
 80106f0:	4620      	mov	r0, r4
 80106f2:	4629      	mov	r1, r5
 80106f4:	f7ef ffa0 	bl	8000638 <__aeabi_dmul>
 80106f8:	4602      	mov	r2, r0
 80106fa:	460b      	mov	r3, r1
 80106fc:	4630      	mov	r0, r6
 80106fe:	4639      	mov	r1, r7
 8010700:	f7ef fde4 	bl	80002cc <__adddf3>
 8010704:	e00a      	b.n	801071c <__ieee754_asin+0x6c>
 8010706:	ee10 2a10 	vmov	r2, s0
 801070a:	462b      	mov	r3, r5
 801070c:	4620      	mov	r0, r4
 801070e:	4629      	mov	r1, r5
 8010710:	f7ef fdda 	bl	80002c8 <__aeabi_dsub>
 8010714:	4602      	mov	r2, r0
 8010716:	460b      	mov	r3, r1
 8010718:	f7f0 f8b8 	bl	800088c <__aeabi_ddiv>
 801071c:	4604      	mov	r4, r0
 801071e:	460d      	mov	r5, r1
 8010720:	ec45 4b10 	vmov	d0, r4, r5
 8010724:	b007      	add	sp, #28
 8010726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801072a:	4bb0      	ldr	r3, [pc, #704]	; (80109ec <__ieee754_asin+0x33c>)
 801072c:	429f      	cmp	r7, r3
 801072e:	dc11      	bgt.n	8010754 <__ieee754_asin+0xa4>
 8010730:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8010734:	f280 80ae 	bge.w	8010894 <__ieee754_asin+0x1e4>
 8010738:	a395      	add	r3, pc, #596	; (adr r3, 8010990 <__ieee754_asin+0x2e0>)
 801073a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073e:	ee10 0a10 	vmov	r0, s0
 8010742:	4629      	mov	r1, r5
 8010744:	f7ef fdc2 	bl	80002cc <__adddf3>
 8010748:	2200      	movs	r2, #0
 801074a:	4ba9      	ldr	r3, [pc, #676]	; (80109f0 <__ieee754_asin+0x340>)
 801074c:	f7f0 fa04 	bl	8000b58 <__aeabi_dcmpgt>
 8010750:	2800      	cmp	r0, #0
 8010752:	d1e5      	bne.n	8010720 <__ieee754_asin+0x70>
 8010754:	ec45 4b10 	vmov	d0, r4, r5
 8010758:	f001 fba2 	bl	8011ea0 <fabs>
 801075c:	2000      	movs	r0, #0
 801075e:	ec53 2b10 	vmov	r2, r3, d0
 8010762:	49a3      	ldr	r1, [pc, #652]	; (80109f0 <__ieee754_asin+0x340>)
 8010764:	f7ef fdb0 	bl	80002c8 <__aeabi_dsub>
 8010768:	2200      	movs	r2, #0
 801076a:	4ba2      	ldr	r3, [pc, #648]	; (80109f4 <__ieee754_asin+0x344>)
 801076c:	f7ef ff64 	bl	8000638 <__aeabi_dmul>
 8010770:	a389      	add	r3, pc, #548	; (adr r3, 8010998 <__ieee754_asin+0x2e8>)
 8010772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010776:	4604      	mov	r4, r0
 8010778:	460d      	mov	r5, r1
 801077a:	f7ef ff5d 	bl	8000638 <__aeabi_dmul>
 801077e:	a388      	add	r3, pc, #544	; (adr r3, 80109a0 <__ieee754_asin+0x2f0>)
 8010780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010784:	f7ef fda2 	bl	80002cc <__adddf3>
 8010788:	4622      	mov	r2, r4
 801078a:	462b      	mov	r3, r5
 801078c:	f7ef ff54 	bl	8000638 <__aeabi_dmul>
 8010790:	a385      	add	r3, pc, #532	; (adr r3, 80109a8 <__ieee754_asin+0x2f8>)
 8010792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010796:	f7ef fd97 	bl	80002c8 <__aeabi_dsub>
 801079a:	4622      	mov	r2, r4
 801079c:	462b      	mov	r3, r5
 801079e:	f7ef ff4b 	bl	8000638 <__aeabi_dmul>
 80107a2:	a383      	add	r3, pc, #524	; (adr r3, 80109b0 <__ieee754_asin+0x300>)
 80107a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107a8:	f7ef fd90 	bl	80002cc <__adddf3>
 80107ac:	4622      	mov	r2, r4
 80107ae:	462b      	mov	r3, r5
 80107b0:	f7ef ff42 	bl	8000638 <__aeabi_dmul>
 80107b4:	a380      	add	r3, pc, #512	; (adr r3, 80109b8 <__ieee754_asin+0x308>)
 80107b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ba:	f7ef fd85 	bl	80002c8 <__aeabi_dsub>
 80107be:	4622      	mov	r2, r4
 80107c0:	462b      	mov	r3, r5
 80107c2:	f7ef ff39 	bl	8000638 <__aeabi_dmul>
 80107c6:	a37e      	add	r3, pc, #504	; (adr r3, 80109c0 <__ieee754_asin+0x310>)
 80107c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107cc:	f7ef fd7e 	bl	80002cc <__adddf3>
 80107d0:	4622      	mov	r2, r4
 80107d2:	462b      	mov	r3, r5
 80107d4:	f7ef ff30 	bl	8000638 <__aeabi_dmul>
 80107d8:	a37b      	add	r3, pc, #492	; (adr r3, 80109c8 <__ieee754_asin+0x318>)
 80107da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107de:	4680      	mov	r8, r0
 80107e0:	4689      	mov	r9, r1
 80107e2:	4620      	mov	r0, r4
 80107e4:	4629      	mov	r1, r5
 80107e6:	f7ef ff27 	bl	8000638 <__aeabi_dmul>
 80107ea:	a379      	add	r3, pc, #484	; (adr r3, 80109d0 <__ieee754_asin+0x320>)
 80107ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107f0:	f7ef fd6a 	bl	80002c8 <__aeabi_dsub>
 80107f4:	4622      	mov	r2, r4
 80107f6:	462b      	mov	r3, r5
 80107f8:	f7ef ff1e 	bl	8000638 <__aeabi_dmul>
 80107fc:	a376      	add	r3, pc, #472	; (adr r3, 80109d8 <__ieee754_asin+0x328>)
 80107fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010802:	f7ef fd63 	bl	80002cc <__adddf3>
 8010806:	4622      	mov	r2, r4
 8010808:	462b      	mov	r3, r5
 801080a:	f7ef ff15 	bl	8000638 <__aeabi_dmul>
 801080e:	a374      	add	r3, pc, #464	; (adr r3, 80109e0 <__ieee754_asin+0x330>)
 8010810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010814:	f7ef fd58 	bl	80002c8 <__aeabi_dsub>
 8010818:	4622      	mov	r2, r4
 801081a:	462b      	mov	r3, r5
 801081c:	f7ef ff0c 	bl	8000638 <__aeabi_dmul>
 8010820:	4b73      	ldr	r3, [pc, #460]	; (80109f0 <__ieee754_asin+0x340>)
 8010822:	2200      	movs	r2, #0
 8010824:	f7ef fd52 	bl	80002cc <__adddf3>
 8010828:	ec45 4b10 	vmov	d0, r4, r5
 801082c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010830:	f000 fc20 	bl	8011074 <__ieee754_sqrt>
 8010834:	4b70      	ldr	r3, [pc, #448]	; (80109f8 <__ieee754_asin+0x348>)
 8010836:	429f      	cmp	r7, r3
 8010838:	ec5b ab10 	vmov	sl, fp, d0
 801083c:	f340 80de 	ble.w	80109fc <__ieee754_asin+0x34c>
 8010840:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010844:	4640      	mov	r0, r8
 8010846:	4649      	mov	r1, r9
 8010848:	f7f0 f820 	bl	800088c <__aeabi_ddiv>
 801084c:	4652      	mov	r2, sl
 801084e:	465b      	mov	r3, fp
 8010850:	f7ef fef2 	bl	8000638 <__aeabi_dmul>
 8010854:	4652      	mov	r2, sl
 8010856:	465b      	mov	r3, fp
 8010858:	f7ef fd38 	bl	80002cc <__adddf3>
 801085c:	4602      	mov	r2, r0
 801085e:	460b      	mov	r3, r1
 8010860:	f7ef fd34 	bl	80002cc <__adddf3>
 8010864:	a348      	add	r3, pc, #288	; (adr r3, 8010988 <__ieee754_asin+0x2d8>)
 8010866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801086a:	f7ef fd2d 	bl	80002c8 <__aeabi_dsub>
 801086e:	4602      	mov	r2, r0
 8010870:	460b      	mov	r3, r1
 8010872:	a143      	add	r1, pc, #268	; (adr r1, 8010980 <__ieee754_asin+0x2d0>)
 8010874:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010878:	f7ef fd26 	bl	80002c8 <__aeabi_dsub>
 801087c:	9b01      	ldr	r3, [sp, #4]
 801087e:	2b00      	cmp	r3, #0
 8010880:	bfdc      	itt	le
 8010882:	4602      	movle	r2, r0
 8010884:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8010888:	4604      	mov	r4, r0
 801088a:	460d      	mov	r5, r1
 801088c:	bfdc      	itt	le
 801088e:	4614      	movle	r4, r2
 8010890:	461d      	movle	r5, r3
 8010892:	e745      	b.n	8010720 <__ieee754_asin+0x70>
 8010894:	ee10 2a10 	vmov	r2, s0
 8010898:	ee10 0a10 	vmov	r0, s0
 801089c:	462b      	mov	r3, r5
 801089e:	4629      	mov	r1, r5
 80108a0:	f7ef feca 	bl	8000638 <__aeabi_dmul>
 80108a4:	a33c      	add	r3, pc, #240	; (adr r3, 8010998 <__ieee754_asin+0x2e8>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	4606      	mov	r6, r0
 80108ac:	460f      	mov	r7, r1
 80108ae:	f7ef fec3 	bl	8000638 <__aeabi_dmul>
 80108b2:	a33b      	add	r3, pc, #236	; (adr r3, 80109a0 <__ieee754_asin+0x2f0>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	f7ef fd08 	bl	80002cc <__adddf3>
 80108bc:	4632      	mov	r2, r6
 80108be:	463b      	mov	r3, r7
 80108c0:	f7ef feba 	bl	8000638 <__aeabi_dmul>
 80108c4:	a338      	add	r3, pc, #224	; (adr r3, 80109a8 <__ieee754_asin+0x2f8>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	f7ef fcfd 	bl	80002c8 <__aeabi_dsub>
 80108ce:	4632      	mov	r2, r6
 80108d0:	463b      	mov	r3, r7
 80108d2:	f7ef feb1 	bl	8000638 <__aeabi_dmul>
 80108d6:	a336      	add	r3, pc, #216	; (adr r3, 80109b0 <__ieee754_asin+0x300>)
 80108d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108dc:	f7ef fcf6 	bl	80002cc <__adddf3>
 80108e0:	4632      	mov	r2, r6
 80108e2:	463b      	mov	r3, r7
 80108e4:	f7ef fea8 	bl	8000638 <__aeabi_dmul>
 80108e8:	a333      	add	r3, pc, #204	; (adr r3, 80109b8 <__ieee754_asin+0x308>)
 80108ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ee:	f7ef fceb 	bl	80002c8 <__aeabi_dsub>
 80108f2:	4632      	mov	r2, r6
 80108f4:	463b      	mov	r3, r7
 80108f6:	f7ef fe9f 	bl	8000638 <__aeabi_dmul>
 80108fa:	a331      	add	r3, pc, #196	; (adr r3, 80109c0 <__ieee754_asin+0x310>)
 80108fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010900:	f7ef fce4 	bl	80002cc <__adddf3>
 8010904:	4632      	mov	r2, r6
 8010906:	463b      	mov	r3, r7
 8010908:	f7ef fe96 	bl	8000638 <__aeabi_dmul>
 801090c:	a32e      	add	r3, pc, #184	; (adr r3, 80109c8 <__ieee754_asin+0x318>)
 801090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010912:	4680      	mov	r8, r0
 8010914:	4689      	mov	r9, r1
 8010916:	4630      	mov	r0, r6
 8010918:	4639      	mov	r1, r7
 801091a:	f7ef fe8d 	bl	8000638 <__aeabi_dmul>
 801091e:	a32c      	add	r3, pc, #176	; (adr r3, 80109d0 <__ieee754_asin+0x320>)
 8010920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010924:	f7ef fcd0 	bl	80002c8 <__aeabi_dsub>
 8010928:	4632      	mov	r2, r6
 801092a:	463b      	mov	r3, r7
 801092c:	f7ef fe84 	bl	8000638 <__aeabi_dmul>
 8010930:	a329      	add	r3, pc, #164	; (adr r3, 80109d8 <__ieee754_asin+0x328>)
 8010932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010936:	f7ef fcc9 	bl	80002cc <__adddf3>
 801093a:	4632      	mov	r2, r6
 801093c:	463b      	mov	r3, r7
 801093e:	f7ef fe7b 	bl	8000638 <__aeabi_dmul>
 8010942:	a327      	add	r3, pc, #156	; (adr r3, 80109e0 <__ieee754_asin+0x330>)
 8010944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010948:	f7ef fcbe 	bl	80002c8 <__aeabi_dsub>
 801094c:	4632      	mov	r2, r6
 801094e:	463b      	mov	r3, r7
 8010950:	f7ef fe72 	bl	8000638 <__aeabi_dmul>
 8010954:	2200      	movs	r2, #0
 8010956:	4b26      	ldr	r3, [pc, #152]	; (80109f0 <__ieee754_asin+0x340>)
 8010958:	f7ef fcb8 	bl	80002cc <__adddf3>
 801095c:	4602      	mov	r2, r0
 801095e:	460b      	mov	r3, r1
 8010960:	4640      	mov	r0, r8
 8010962:	4649      	mov	r1, r9
 8010964:	f7ef ff92 	bl	800088c <__aeabi_ddiv>
 8010968:	4622      	mov	r2, r4
 801096a:	462b      	mov	r3, r5
 801096c:	f7ef fe64 	bl	8000638 <__aeabi_dmul>
 8010970:	4602      	mov	r2, r0
 8010972:	460b      	mov	r3, r1
 8010974:	4620      	mov	r0, r4
 8010976:	4629      	mov	r1, r5
 8010978:	e6c2      	b.n	8010700 <__ieee754_asin+0x50>
 801097a:	bf00      	nop
 801097c:	f3af 8000 	nop.w
 8010980:	54442d18 	.word	0x54442d18
 8010984:	3ff921fb 	.word	0x3ff921fb
 8010988:	33145c07 	.word	0x33145c07
 801098c:	3c91a626 	.word	0x3c91a626
 8010990:	8800759c 	.word	0x8800759c
 8010994:	7e37e43c 	.word	0x7e37e43c
 8010998:	0dfdf709 	.word	0x0dfdf709
 801099c:	3f023de1 	.word	0x3f023de1
 80109a0:	7501b288 	.word	0x7501b288
 80109a4:	3f49efe0 	.word	0x3f49efe0
 80109a8:	b5688f3b 	.word	0xb5688f3b
 80109ac:	3fa48228 	.word	0x3fa48228
 80109b0:	0e884455 	.word	0x0e884455
 80109b4:	3fc9c155 	.word	0x3fc9c155
 80109b8:	03eb6f7d 	.word	0x03eb6f7d
 80109bc:	3fd4d612 	.word	0x3fd4d612
 80109c0:	55555555 	.word	0x55555555
 80109c4:	3fc55555 	.word	0x3fc55555
 80109c8:	b12e9282 	.word	0xb12e9282
 80109cc:	3fb3b8c5 	.word	0x3fb3b8c5
 80109d0:	1b8d0159 	.word	0x1b8d0159
 80109d4:	3fe6066c 	.word	0x3fe6066c
 80109d8:	9c598ac8 	.word	0x9c598ac8
 80109dc:	40002ae5 	.word	0x40002ae5
 80109e0:	1c8a2d4b 	.word	0x1c8a2d4b
 80109e4:	40033a27 	.word	0x40033a27
 80109e8:	3fefffff 	.word	0x3fefffff
 80109ec:	3fdfffff 	.word	0x3fdfffff
 80109f0:	3ff00000 	.word	0x3ff00000
 80109f4:	3fe00000 	.word	0x3fe00000
 80109f8:	3fef3332 	.word	0x3fef3332
 80109fc:	ee10 2a10 	vmov	r2, s0
 8010a00:	ee10 0a10 	vmov	r0, s0
 8010a04:	465b      	mov	r3, fp
 8010a06:	4659      	mov	r1, fp
 8010a08:	f7ef fc60 	bl	80002cc <__adddf3>
 8010a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8010a10:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010a14:	4640      	mov	r0, r8
 8010a16:	4649      	mov	r1, r9
 8010a18:	f7ef ff38 	bl	800088c <__aeabi_ddiv>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	460b      	mov	r3, r1
 8010a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010a24:	f7ef fe08 	bl	8000638 <__aeabi_dmul>
 8010a28:	2600      	movs	r6, #0
 8010a2a:	4680      	mov	r8, r0
 8010a2c:	4689      	mov	r9, r1
 8010a2e:	4632      	mov	r2, r6
 8010a30:	465b      	mov	r3, fp
 8010a32:	4630      	mov	r0, r6
 8010a34:	4659      	mov	r1, fp
 8010a36:	f7ef fdff 	bl	8000638 <__aeabi_dmul>
 8010a3a:	4602      	mov	r2, r0
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	4620      	mov	r0, r4
 8010a40:	4629      	mov	r1, r5
 8010a42:	f7ef fc41 	bl	80002c8 <__aeabi_dsub>
 8010a46:	4632      	mov	r2, r6
 8010a48:	4604      	mov	r4, r0
 8010a4a:	460d      	mov	r5, r1
 8010a4c:	465b      	mov	r3, fp
 8010a4e:	4650      	mov	r0, sl
 8010a50:	4659      	mov	r1, fp
 8010a52:	f7ef fc3b 	bl	80002cc <__adddf3>
 8010a56:	4602      	mov	r2, r0
 8010a58:	460b      	mov	r3, r1
 8010a5a:	4620      	mov	r0, r4
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	f7ef ff15 	bl	800088c <__aeabi_ddiv>
 8010a62:	4602      	mov	r2, r0
 8010a64:	460b      	mov	r3, r1
 8010a66:	f7ef fc31 	bl	80002cc <__adddf3>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	a114      	add	r1, pc, #80	; (adr r1, 8010ac0 <__ieee754_asin+0x410>)
 8010a70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a74:	f7ef fc28 	bl	80002c8 <__aeabi_dsub>
 8010a78:	4602      	mov	r2, r0
 8010a7a:	460b      	mov	r3, r1
 8010a7c:	4640      	mov	r0, r8
 8010a7e:	4649      	mov	r1, r9
 8010a80:	f7ef fc22 	bl	80002c8 <__aeabi_dsub>
 8010a84:	465f      	mov	r7, fp
 8010a86:	4604      	mov	r4, r0
 8010a88:	460d      	mov	r5, r1
 8010a8a:	4632      	mov	r2, r6
 8010a8c:	465b      	mov	r3, fp
 8010a8e:	4630      	mov	r0, r6
 8010a90:	4639      	mov	r1, r7
 8010a92:	f7ef fc1b 	bl	80002cc <__adddf3>
 8010a96:	4602      	mov	r2, r0
 8010a98:	460b      	mov	r3, r1
 8010a9a:	a10b      	add	r1, pc, #44	; (adr r1, 8010ac8 <__ieee754_asin+0x418>)
 8010a9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aa0:	f7ef fc12 	bl	80002c8 <__aeabi_dsub>
 8010aa4:	4602      	mov	r2, r0
 8010aa6:	460b      	mov	r3, r1
 8010aa8:	4620      	mov	r0, r4
 8010aaa:	4629      	mov	r1, r5
 8010aac:	f7ef fc0c 	bl	80002c8 <__aeabi_dsub>
 8010ab0:	4602      	mov	r2, r0
 8010ab2:	460b      	mov	r3, r1
 8010ab4:	a104      	add	r1, pc, #16	; (adr r1, 8010ac8 <__ieee754_asin+0x418>)
 8010ab6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010aba:	e6dd      	b.n	8010878 <__ieee754_asin+0x1c8>
 8010abc:	f3af 8000 	nop.w
 8010ac0:	33145c07 	.word	0x33145c07
 8010ac4:	3c91a626 	.word	0x3c91a626
 8010ac8:	54442d18 	.word	0x54442d18
 8010acc:	3fe921fb 	.word	0x3fe921fb

08010ad0 <__ieee754_atan2>:
 8010ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ad4:	ec57 6b11 	vmov	r6, r7, d1
 8010ad8:	4273      	negs	r3, r6
 8010ada:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8010ade:	4333      	orrs	r3, r6
 8010ae0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8010c88 <__ieee754_atan2+0x1b8>
 8010ae4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010ae8:	4573      	cmp	r3, lr
 8010aea:	ec51 0b10 	vmov	r0, r1, d0
 8010aee:	ee11 8a10 	vmov	r8, s2
 8010af2:	d80a      	bhi.n	8010b0a <__ieee754_atan2+0x3a>
 8010af4:	4244      	negs	r4, r0
 8010af6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010afa:	4304      	orrs	r4, r0
 8010afc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010b00:	4574      	cmp	r4, lr
 8010b02:	468c      	mov	ip, r1
 8010b04:	ee10 9a10 	vmov	r9, s0
 8010b08:	d907      	bls.n	8010b1a <__ieee754_atan2+0x4a>
 8010b0a:	4632      	mov	r2, r6
 8010b0c:	463b      	mov	r3, r7
 8010b0e:	f7ef fbdd 	bl	80002cc <__adddf3>
 8010b12:	ec41 0b10 	vmov	d0, r0, r1
 8010b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b1a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8010b1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010b22:	4334      	orrs	r4, r6
 8010b24:	d103      	bne.n	8010b2e <__ieee754_atan2+0x5e>
 8010b26:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b2a:	f001 b819 	b.w	8011b60 <atan>
 8010b2e:	17bc      	asrs	r4, r7, #30
 8010b30:	f004 0402 	and.w	r4, r4, #2
 8010b34:	ea53 0909 	orrs.w	r9, r3, r9
 8010b38:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010b3c:	d107      	bne.n	8010b4e <__ieee754_atan2+0x7e>
 8010b3e:	2c02      	cmp	r4, #2
 8010b40:	d073      	beq.n	8010c2a <__ieee754_atan2+0x15a>
 8010b42:	2c03      	cmp	r4, #3
 8010b44:	d1e5      	bne.n	8010b12 <__ieee754_atan2+0x42>
 8010b46:	a13e      	add	r1, pc, #248	; (adr r1, 8010c40 <__ieee754_atan2+0x170>)
 8010b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b4c:	e7e1      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010b4e:	ea52 0808 	orrs.w	r8, r2, r8
 8010b52:	d106      	bne.n	8010b62 <__ieee754_atan2+0x92>
 8010b54:	f1bc 0f00 	cmp.w	ip, #0
 8010b58:	da6b      	bge.n	8010c32 <__ieee754_atan2+0x162>
 8010b5a:	a13b      	add	r1, pc, #236	; (adr r1, 8010c48 <__ieee754_atan2+0x178>)
 8010b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b60:	e7d7      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010b62:	4572      	cmp	r2, lr
 8010b64:	d120      	bne.n	8010ba8 <__ieee754_atan2+0xd8>
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d111      	bne.n	8010b8e <__ieee754_atan2+0xbe>
 8010b6a:	2c02      	cmp	r4, #2
 8010b6c:	d007      	beq.n	8010b7e <__ieee754_atan2+0xae>
 8010b6e:	2c03      	cmp	r4, #3
 8010b70:	d009      	beq.n	8010b86 <__ieee754_atan2+0xb6>
 8010b72:	2c01      	cmp	r4, #1
 8010b74:	d155      	bne.n	8010c22 <__ieee754_atan2+0x152>
 8010b76:	a136      	add	r1, pc, #216	; (adr r1, 8010c50 <__ieee754_atan2+0x180>)
 8010b78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b7c:	e7c9      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010b7e:	a136      	add	r1, pc, #216	; (adr r1, 8010c58 <__ieee754_atan2+0x188>)
 8010b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b84:	e7c5      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010b86:	a136      	add	r1, pc, #216	; (adr r1, 8010c60 <__ieee754_atan2+0x190>)
 8010b88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010b8c:	e7c1      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010b8e:	2c02      	cmp	r4, #2
 8010b90:	d04b      	beq.n	8010c2a <__ieee754_atan2+0x15a>
 8010b92:	2c03      	cmp	r4, #3
 8010b94:	d0d7      	beq.n	8010b46 <__ieee754_atan2+0x76>
 8010b96:	2c01      	cmp	r4, #1
 8010b98:	f04f 0000 	mov.w	r0, #0
 8010b9c:	d102      	bne.n	8010ba4 <__ieee754_atan2+0xd4>
 8010b9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8010ba2:	e7b6      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010ba4:	2100      	movs	r1, #0
 8010ba6:	e7b4      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010ba8:	4573      	cmp	r3, lr
 8010baa:	d0d3      	beq.n	8010b54 <__ieee754_atan2+0x84>
 8010bac:	1a9b      	subs	r3, r3, r2
 8010bae:	151b      	asrs	r3, r3, #20
 8010bb0:	2b3c      	cmp	r3, #60	; 0x3c
 8010bb2:	dc1e      	bgt.n	8010bf2 <__ieee754_atan2+0x122>
 8010bb4:	2f00      	cmp	r7, #0
 8010bb6:	da01      	bge.n	8010bbc <__ieee754_atan2+0xec>
 8010bb8:	333c      	adds	r3, #60	; 0x3c
 8010bba:	db1e      	blt.n	8010bfa <__ieee754_atan2+0x12a>
 8010bbc:	4632      	mov	r2, r6
 8010bbe:	463b      	mov	r3, r7
 8010bc0:	f7ef fe64 	bl	800088c <__aeabi_ddiv>
 8010bc4:	ec41 0b10 	vmov	d0, r0, r1
 8010bc8:	f001 f96a 	bl	8011ea0 <fabs>
 8010bcc:	f000 ffc8 	bl	8011b60 <atan>
 8010bd0:	ec51 0b10 	vmov	r0, r1, d0
 8010bd4:	2c01      	cmp	r4, #1
 8010bd6:	d013      	beq.n	8010c00 <__ieee754_atan2+0x130>
 8010bd8:	2c02      	cmp	r4, #2
 8010bda:	d015      	beq.n	8010c08 <__ieee754_atan2+0x138>
 8010bdc:	2c00      	cmp	r4, #0
 8010bde:	d098      	beq.n	8010b12 <__ieee754_atan2+0x42>
 8010be0:	a321      	add	r3, pc, #132	; (adr r3, 8010c68 <__ieee754_atan2+0x198>)
 8010be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be6:	f7ef fb6f 	bl	80002c8 <__aeabi_dsub>
 8010bea:	a321      	add	r3, pc, #132	; (adr r3, 8010c70 <__ieee754_atan2+0x1a0>)
 8010bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bf0:	e014      	b.n	8010c1c <__ieee754_atan2+0x14c>
 8010bf2:	a121      	add	r1, pc, #132	; (adr r1, 8010c78 <__ieee754_atan2+0x1a8>)
 8010bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010bf8:	e7ec      	b.n	8010bd4 <__ieee754_atan2+0x104>
 8010bfa:	2000      	movs	r0, #0
 8010bfc:	2100      	movs	r1, #0
 8010bfe:	e7e9      	b.n	8010bd4 <__ieee754_atan2+0x104>
 8010c00:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010c04:	4619      	mov	r1, r3
 8010c06:	e784      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010c08:	a317      	add	r3, pc, #92	; (adr r3, 8010c68 <__ieee754_atan2+0x198>)
 8010c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c0e:	f7ef fb5b 	bl	80002c8 <__aeabi_dsub>
 8010c12:	4602      	mov	r2, r0
 8010c14:	460b      	mov	r3, r1
 8010c16:	a116      	add	r1, pc, #88	; (adr r1, 8010c70 <__ieee754_atan2+0x1a0>)
 8010c18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c1c:	f7ef fb54 	bl	80002c8 <__aeabi_dsub>
 8010c20:	e777      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010c22:	a117      	add	r1, pc, #92	; (adr r1, 8010c80 <__ieee754_atan2+0x1b0>)
 8010c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c28:	e773      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010c2a:	a111      	add	r1, pc, #68	; (adr r1, 8010c70 <__ieee754_atan2+0x1a0>)
 8010c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c30:	e76f      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010c32:	a111      	add	r1, pc, #68	; (adr r1, 8010c78 <__ieee754_atan2+0x1a8>)
 8010c34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010c38:	e76b      	b.n	8010b12 <__ieee754_atan2+0x42>
 8010c3a:	bf00      	nop
 8010c3c:	f3af 8000 	nop.w
 8010c40:	54442d18 	.word	0x54442d18
 8010c44:	c00921fb 	.word	0xc00921fb
 8010c48:	54442d18 	.word	0x54442d18
 8010c4c:	bff921fb 	.word	0xbff921fb
 8010c50:	54442d18 	.word	0x54442d18
 8010c54:	bfe921fb 	.word	0xbfe921fb
 8010c58:	7f3321d2 	.word	0x7f3321d2
 8010c5c:	4002d97c 	.word	0x4002d97c
 8010c60:	7f3321d2 	.word	0x7f3321d2
 8010c64:	c002d97c 	.word	0xc002d97c
 8010c68:	33145c07 	.word	0x33145c07
 8010c6c:	3ca1a626 	.word	0x3ca1a626
 8010c70:	54442d18 	.word	0x54442d18
 8010c74:	400921fb 	.word	0x400921fb
 8010c78:	54442d18 	.word	0x54442d18
 8010c7c:	3ff921fb 	.word	0x3ff921fb
 8010c80:	54442d18 	.word	0x54442d18
 8010c84:	3fe921fb 	.word	0x3fe921fb
 8010c88:	7ff00000 	.word	0x7ff00000
 8010c8c:	00000000 	.word	0x00000000

08010c90 <__ieee754_rem_pio2>:
 8010c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c94:	ec57 6b10 	vmov	r6, r7, d0
 8010c98:	4bc3      	ldr	r3, [pc, #780]	; (8010fa8 <__ieee754_rem_pio2+0x318>)
 8010c9a:	b08d      	sub	sp, #52	; 0x34
 8010c9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010ca0:	4598      	cmp	r8, r3
 8010ca2:	4604      	mov	r4, r0
 8010ca4:	9704      	str	r7, [sp, #16]
 8010ca6:	dc07      	bgt.n	8010cb8 <__ieee754_rem_pio2+0x28>
 8010ca8:	2200      	movs	r2, #0
 8010caa:	2300      	movs	r3, #0
 8010cac:	ed84 0b00 	vstr	d0, [r4]
 8010cb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010cb4:	2500      	movs	r5, #0
 8010cb6:	e027      	b.n	8010d08 <__ieee754_rem_pio2+0x78>
 8010cb8:	4bbc      	ldr	r3, [pc, #752]	; (8010fac <__ieee754_rem_pio2+0x31c>)
 8010cba:	4598      	cmp	r8, r3
 8010cbc:	dc75      	bgt.n	8010daa <__ieee754_rem_pio2+0x11a>
 8010cbe:	9b04      	ldr	r3, [sp, #16]
 8010cc0:	4dbb      	ldr	r5, [pc, #748]	; (8010fb0 <__ieee754_rem_pio2+0x320>)
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	ee10 0a10 	vmov	r0, s0
 8010cc8:	a3a9      	add	r3, pc, #676	; (adr r3, 8010f70 <__ieee754_rem_pio2+0x2e0>)
 8010cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cce:	4639      	mov	r1, r7
 8010cd0:	dd36      	ble.n	8010d40 <__ieee754_rem_pio2+0xb0>
 8010cd2:	f7ef faf9 	bl	80002c8 <__aeabi_dsub>
 8010cd6:	45a8      	cmp	r8, r5
 8010cd8:	4606      	mov	r6, r0
 8010cda:	460f      	mov	r7, r1
 8010cdc:	d018      	beq.n	8010d10 <__ieee754_rem_pio2+0x80>
 8010cde:	a3a6      	add	r3, pc, #664	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x2e8>)
 8010ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ce4:	f7ef faf0 	bl	80002c8 <__aeabi_dsub>
 8010ce8:	4602      	mov	r2, r0
 8010cea:	460b      	mov	r3, r1
 8010cec:	e9c4 2300 	strd	r2, r3, [r4]
 8010cf0:	4630      	mov	r0, r6
 8010cf2:	4639      	mov	r1, r7
 8010cf4:	f7ef fae8 	bl	80002c8 <__aeabi_dsub>
 8010cf8:	a39f      	add	r3, pc, #636	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x2e8>)
 8010cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cfe:	f7ef fae3 	bl	80002c8 <__aeabi_dsub>
 8010d02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d06:	2501      	movs	r5, #1
 8010d08:	4628      	mov	r0, r5
 8010d0a:	b00d      	add	sp, #52	; 0x34
 8010d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d10:	a39b      	add	r3, pc, #620	; (adr r3, 8010f80 <__ieee754_rem_pio2+0x2f0>)
 8010d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d16:	f7ef fad7 	bl	80002c8 <__aeabi_dsub>
 8010d1a:	a39b      	add	r3, pc, #620	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f8>)
 8010d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d20:	4606      	mov	r6, r0
 8010d22:	460f      	mov	r7, r1
 8010d24:	f7ef fad0 	bl	80002c8 <__aeabi_dsub>
 8010d28:	4602      	mov	r2, r0
 8010d2a:	460b      	mov	r3, r1
 8010d2c:	e9c4 2300 	strd	r2, r3, [r4]
 8010d30:	4630      	mov	r0, r6
 8010d32:	4639      	mov	r1, r7
 8010d34:	f7ef fac8 	bl	80002c8 <__aeabi_dsub>
 8010d38:	a393      	add	r3, pc, #588	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f8>)
 8010d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3e:	e7de      	b.n	8010cfe <__ieee754_rem_pio2+0x6e>
 8010d40:	f7ef fac4 	bl	80002cc <__adddf3>
 8010d44:	45a8      	cmp	r8, r5
 8010d46:	4606      	mov	r6, r0
 8010d48:	460f      	mov	r7, r1
 8010d4a:	d016      	beq.n	8010d7a <__ieee754_rem_pio2+0xea>
 8010d4c:	a38a      	add	r3, pc, #552	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x2e8>)
 8010d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d52:	f7ef fabb 	bl	80002cc <__adddf3>
 8010d56:	4602      	mov	r2, r0
 8010d58:	460b      	mov	r3, r1
 8010d5a:	e9c4 2300 	strd	r2, r3, [r4]
 8010d5e:	4630      	mov	r0, r6
 8010d60:	4639      	mov	r1, r7
 8010d62:	f7ef fab1 	bl	80002c8 <__aeabi_dsub>
 8010d66:	a384      	add	r3, pc, #528	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x2e8>)
 8010d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d6c:	f7ef faae 	bl	80002cc <__adddf3>
 8010d70:	f04f 35ff 	mov.w	r5, #4294967295
 8010d74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d78:	e7c6      	b.n	8010d08 <__ieee754_rem_pio2+0x78>
 8010d7a:	a381      	add	r3, pc, #516	; (adr r3, 8010f80 <__ieee754_rem_pio2+0x2f0>)
 8010d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d80:	f7ef faa4 	bl	80002cc <__adddf3>
 8010d84:	a380      	add	r3, pc, #512	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f8>)
 8010d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d8a:	4606      	mov	r6, r0
 8010d8c:	460f      	mov	r7, r1
 8010d8e:	f7ef fa9d 	bl	80002cc <__adddf3>
 8010d92:	4602      	mov	r2, r0
 8010d94:	460b      	mov	r3, r1
 8010d96:	e9c4 2300 	strd	r2, r3, [r4]
 8010d9a:	4630      	mov	r0, r6
 8010d9c:	4639      	mov	r1, r7
 8010d9e:	f7ef fa93 	bl	80002c8 <__aeabi_dsub>
 8010da2:	a379      	add	r3, pc, #484	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f8>)
 8010da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010da8:	e7e0      	b.n	8010d6c <__ieee754_rem_pio2+0xdc>
 8010daa:	4b82      	ldr	r3, [pc, #520]	; (8010fb4 <__ieee754_rem_pio2+0x324>)
 8010dac:	4598      	cmp	r8, r3
 8010dae:	f300 80d0 	bgt.w	8010f52 <__ieee754_rem_pio2+0x2c2>
 8010db2:	f001 f875 	bl	8011ea0 <fabs>
 8010db6:	ec57 6b10 	vmov	r6, r7, d0
 8010dba:	ee10 0a10 	vmov	r0, s0
 8010dbe:	a374      	add	r3, pc, #464	; (adr r3, 8010f90 <__ieee754_rem_pio2+0x300>)
 8010dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dc4:	4639      	mov	r1, r7
 8010dc6:	f7ef fc37 	bl	8000638 <__aeabi_dmul>
 8010dca:	2200      	movs	r2, #0
 8010dcc:	4b7a      	ldr	r3, [pc, #488]	; (8010fb8 <__ieee754_rem_pio2+0x328>)
 8010dce:	f7ef fa7d 	bl	80002cc <__adddf3>
 8010dd2:	f7ef fee1 	bl	8000b98 <__aeabi_d2iz>
 8010dd6:	4605      	mov	r5, r0
 8010dd8:	f7ef fbc4 	bl	8000564 <__aeabi_i2d>
 8010ddc:	a364      	add	r3, pc, #400	; (adr r3, 8010f70 <__ieee754_rem_pio2+0x2e0>)
 8010dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010de6:	f7ef fc27 	bl	8000638 <__aeabi_dmul>
 8010dea:	4602      	mov	r2, r0
 8010dec:	460b      	mov	r3, r1
 8010dee:	4630      	mov	r0, r6
 8010df0:	4639      	mov	r1, r7
 8010df2:	f7ef fa69 	bl	80002c8 <__aeabi_dsub>
 8010df6:	a360      	add	r3, pc, #384	; (adr r3, 8010f78 <__ieee754_rem_pio2+0x2e8>)
 8010df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dfc:	4682      	mov	sl, r0
 8010dfe:	468b      	mov	fp, r1
 8010e00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e04:	f7ef fc18 	bl	8000638 <__aeabi_dmul>
 8010e08:	2d1f      	cmp	r5, #31
 8010e0a:	4606      	mov	r6, r0
 8010e0c:	460f      	mov	r7, r1
 8010e0e:	dc0c      	bgt.n	8010e2a <__ieee754_rem_pio2+0x19a>
 8010e10:	1e6a      	subs	r2, r5, #1
 8010e12:	4b6a      	ldr	r3, [pc, #424]	; (8010fbc <__ieee754_rem_pio2+0x32c>)
 8010e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e18:	4543      	cmp	r3, r8
 8010e1a:	d006      	beq.n	8010e2a <__ieee754_rem_pio2+0x19a>
 8010e1c:	4632      	mov	r2, r6
 8010e1e:	463b      	mov	r3, r7
 8010e20:	4650      	mov	r0, sl
 8010e22:	4659      	mov	r1, fp
 8010e24:	f7ef fa50 	bl	80002c8 <__aeabi_dsub>
 8010e28:	e00e      	b.n	8010e48 <__ieee754_rem_pio2+0x1b8>
 8010e2a:	4632      	mov	r2, r6
 8010e2c:	463b      	mov	r3, r7
 8010e2e:	4650      	mov	r0, sl
 8010e30:	4659      	mov	r1, fp
 8010e32:	f7ef fa49 	bl	80002c8 <__aeabi_dsub>
 8010e36:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010e3a:	9305      	str	r3, [sp, #20]
 8010e3c:	9a05      	ldr	r2, [sp, #20]
 8010e3e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010e42:	1ad3      	subs	r3, r2, r3
 8010e44:	2b10      	cmp	r3, #16
 8010e46:	dc02      	bgt.n	8010e4e <__ieee754_rem_pio2+0x1be>
 8010e48:	e9c4 0100 	strd	r0, r1, [r4]
 8010e4c:	e039      	b.n	8010ec2 <__ieee754_rem_pio2+0x232>
 8010e4e:	a34c      	add	r3, pc, #304	; (adr r3, 8010f80 <__ieee754_rem_pio2+0x2f0>)
 8010e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e58:	f7ef fbee 	bl	8000638 <__aeabi_dmul>
 8010e5c:	4606      	mov	r6, r0
 8010e5e:	460f      	mov	r7, r1
 8010e60:	4602      	mov	r2, r0
 8010e62:	460b      	mov	r3, r1
 8010e64:	4650      	mov	r0, sl
 8010e66:	4659      	mov	r1, fp
 8010e68:	f7ef fa2e 	bl	80002c8 <__aeabi_dsub>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	460b      	mov	r3, r1
 8010e70:	4680      	mov	r8, r0
 8010e72:	4689      	mov	r9, r1
 8010e74:	4650      	mov	r0, sl
 8010e76:	4659      	mov	r1, fp
 8010e78:	f7ef fa26 	bl	80002c8 <__aeabi_dsub>
 8010e7c:	4632      	mov	r2, r6
 8010e7e:	463b      	mov	r3, r7
 8010e80:	f7ef fa22 	bl	80002c8 <__aeabi_dsub>
 8010e84:	a340      	add	r3, pc, #256	; (adr r3, 8010f88 <__ieee754_rem_pio2+0x2f8>)
 8010e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e8a:	4606      	mov	r6, r0
 8010e8c:	460f      	mov	r7, r1
 8010e8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010e92:	f7ef fbd1 	bl	8000638 <__aeabi_dmul>
 8010e96:	4632      	mov	r2, r6
 8010e98:	463b      	mov	r3, r7
 8010e9a:	f7ef fa15 	bl	80002c8 <__aeabi_dsub>
 8010e9e:	4602      	mov	r2, r0
 8010ea0:	460b      	mov	r3, r1
 8010ea2:	4606      	mov	r6, r0
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	4640      	mov	r0, r8
 8010ea8:	4649      	mov	r1, r9
 8010eaa:	f7ef fa0d 	bl	80002c8 <__aeabi_dsub>
 8010eae:	9a05      	ldr	r2, [sp, #20]
 8010eb0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010eb4:	1ad3      	subs	r3, r2, r3
 8010eb6:	2b31      	cmp	r3, #49	; 0x31
 8010eb8:	dc20      	bgt.n	8010efc <__ieee754_rem_pio2+0x26c>
 8010eba:	e9c4 0100 	strd	r0, r1, [r4]
 8010ebe:	46c2      	mov	sl, r8
 8010ec0:	46cb      	mov	fp, r9
 8010ec2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010ec6:	4650      	mov	r0, sl
 8010ec8:	4642      	mov	r2, r8
 8010eca:	464b      	mov	r3, r9
 8010ecc:	4659      	mov	r1, fp
 8010ece:	f7ef f9fb 	bl	80002c8 <__aeabi_dsub>
 8010ed2:	463b      	mov	r3, r7
 8010ed4:	4632      	mov	r2, r6
 8010ed6:	f7ef f9f7 	bl	80002c8 <__aeabi_dsub>
 8010eda:	9b04      	ldr	r3, [sp, #16]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010ee2:	f6bf af11 	bge.w	8010d08 <__ieee754_rem_pio2+0x78>
 8010ee6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8010eea:	6063      	str	r3, [r4, #4]
 8010eec:	f8c4 8000 	str.w	r8, [r4]
 8010ef0:	60a0      	str	r0, [r4, #8]
 8010ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010ef6:	60e3      	str	r3, [r4, #12]
 8010ef8:	426d      	negs	r5, r5
 8010efa:	e705      	b.n	8010d08 <__ieee754_rem_pio2+0x78>
 8010efc:	a326      	add	r3, pc, #152	; (adr r3, 8010f98 <__ieee754_rem_pio2+0x308>)
 8010efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f06:	f7ef fb97 	bl	8000638 <__aeabi_dmul>
 8010f0a:	4606      	mov	r6, r0
 8010f0c:	460f      	mov	r7, r1
 8010f0e:	4602      	mov	r2, r0
 8010f10:	460b      	mov	r3, r1
 8010f12:	4640      	mov	r0, r8
 8010f14:	4649      	mov	r1, r9
 8010f16:	f7ef f9d7 	bl	80002c8 <__aeabi_dsub>
 8010f1a:	4602      	mov	r2, r0
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	4682      	mov	sl, r0
 8010f20:	468b      	mov	fp, r1
 8010f22:	4640      	mov	r0, r8
 8010f24:	4649      	mov	r1, r9
 8010f26:	f7ef f9cf 	bl	80002c8 <__aeabi_dsub>
 8010f2a:	4632      	mov	r2, r6
 8010f2c:	463b      	mov	r3, r7
 8010f2e:	f7ef f9cb 	bl	80002c8 <__aeabi_dsub>
 8010f32:	a31b      	add	r3, pc, #108	; (adr r3, 8010fa0 <__ieee754_rem_pio2+0x310>)
 8010f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f38:	4606      	mov	r6, r0
 8010f3a:	460f      	mov	r7, r1
 8010f3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010f40:	f7ef fb7a 	bl	8000638 <__aeabi_dmul>
 8010f44:	4632      	mov	r2, r6
 8010f46:	463b      	mov	r3, r7
 8010f48:	f7ef f9be 	bl	80002c8 <__aeabi_dsub>
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	460f      	mov	r7, r1
 8010f50:	e764      	b.n	8010e1c <__ieee754_rem_pio2+0x18c>
 8010f52:	4b1b      	ldr	r3, [pc, #108]	; (8010fc0 <__ieee754_rem_pio2+0x330>)
 8010f54:	4598      	cmp	r8, r3
 8010f56:	dd35      	ble.n	8010fc4 <__ieee754_rem_pio2+0x334>
 8010f58:	ee10 2a10 	vmov	r2, s0
 8010f5c:	463b      	mov	r3, r7
 8010f5e:	4630      	mov	r0, r6
 8010f60:	4639      	mov	r1, r7
 8010f62:	f7ef f9b1 	bl	80002c8 <__aeabi_dsub>
 8010f66:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f6a:	e9c4 0100 	strd	r0, r1, [r4]
 8010f6e:	e6a1      	b.n	8010cb4 <__ieee754_rem_pio2+0x24>
 8010f70:	54400000 	.word	0x54400000
 8010f74:	3ff921fb 	.word	0x3ff921fb
 8010f78:	1a626331 	.word	0x1a626331
 8010f7c:	3dd0b461 	.word	0x3dd0b461
 8010f80:	1a600000 	.word	0x1a600000
 8010f84:	3dd0b461 	.word	0x3dd0b461
 8010f88:	2e037073 	.word	0x2e037073
 8010f8c:	3ba3198a 	.word	0x3ba3198a
 8010f90:	6dc9c883 	.word	0x6dc9c883
 8010f94:	3fe45f30 	.word	0x3fe45f30
 8010f98:	2e000000 	.word	0x2e000000
 8010f9c:	3ba3198a 	.word	0x3ba3198a
 8010fa0:	252049c1 	.word	0x252049c1
 8010fa4:	397b839a 	.word	0x397b839a
 8010fa8:	3fe921fb 	.word	0x3fe921fb
 8010fac:	4002d97b 	.word	0x4002d97b
 8010fb0:	3ff921fb 	.word	0x3ff921fb
 8010fb4:	413921fb 	.word	0x413921fb
 8010fb8:	3fe00000 	.word	0x3fe00000
 8010fbc:	080129bc 	.word	0x080129bc
 8010fc0:	7fefffff 	.word	0x7fefffff
 8010fc4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010fc8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8010fcc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010fd0:	4630      	mov	r0, r6
 8010fd2:	460f      	mov	r7, r1
 8010fd4:	f7ef fde0 	bl	8000b98 <__aeabi_d2iz>
 8010fd8:	f7ef fac4 	bl	8000564 <__aeabi_i2d>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	4639      	mov	r1, r7
 8010fe4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010fe8:	f7ef f96e 	bl	80002c8 <__aeabi_dsub>
 8010fec:	2200      	movs	r2, #0
 8010fee:	4b1f      	ldr	r3, [pc, #124]	; (801106c <__ieee754_rem_pio2+0x3dc>)
 8010ff0:	f7ef fb22 	bl	8000638 <__aeabi_dmul>
 8010ff4:	460f      	mov	r7, r1
 8010ff6:	4606      	mov	r6, r0
 8010ff8:	f7ef fdce 	bl	8000b98 <__aeabi_d2iz>
 8010ffc:	f7ef fab2 	bl	8000564 <__aeabi_i2d>
 8011000:	4602      	mov	r2, r0
 8011002:	460b      	mov	r3, r1
 8011004:	4630      	mov	r0, r6
 8011006:	4639      	mov	r1, r7
 8011008:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801100c:	f7ef f95c 	bl	80002c8 <__aeabi_dsub>
 8011010:	2200      	movs	r2, #0
 8011012:	4b16      	ldr	r3, [pc, #88]	; (801106c <__ieee754_rem_pio2+0x3dc>)
 8011014:	f7ef fb10 	bl	8000638 <__aeabi_dmul>
 8011018:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801101c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011020:	f04f 0803 	mov.w	r8, #3
 8011024:	2600      	movs	r6, #0
 8011026:	2700      	movs	r7, #0
 8011028:	4632      	mov	r2, r6
 801102a:	463b      	mov	r3, r7
 801102c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011030:	f108 3aff 	add.w	sl, r8, #4294967295
 8011034:	f7ef fd68 	bl	8000b08 <__aeabi_dcmpeq>
 8011038:	b9b0      	cbnz	r0, 8011068 <__ieee754_rem_pio2+0x3d8>
 801103a:	4b0d      	ldr	r3, [pc, #52]	; (8011070 <__ieee754_rem_pio2+0x3e0>)
 801103c:	9301      	str	r3, [sp, #4]
 801103e:	2302      	movs	r3, #2
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	462a      	mov	r2, r5
 8011044:	4643      	mov	r3, r8
 8011046:	4621      	mov	r1, r4
 8011048:	a806      	add	r0, sp, #24
 801104a:	f000 f98d 	bl	8011368 <__kernel_rem_pio2>
 801104e:	9b04      	ldr	r3, [sp, #16]
 8011050:	2b00      	cmp	r3, #0
 8011052:	4605      	mov	r5, r0
 8011054:	f6bf ae58 	bge.w	8010d08 <__ieee754_rem_pio2+0x78>
 8011058:	6863      	ldr	r3, [r4, #4]
 801105a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801105e:	6063      	str	r3, [r4, #4]
 8011060:	68e3      	ldr	r3, [r4, #12]
 8011062:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011066:	e746      	b.n	8010ef6 <__ieee754_rem_pio2+0x266>
 8011068:	46d0      	mov	r8, sl
 801106a:	e7dd      	b.n	8011028 <__ieee754_rem_pio2+0x398>
 801106c:	41700000 	.word	0x41700000
 8011070:	08012a3c 	.word	0x08012a3c

08011074 <__ieee754_sqrt>:
 8011074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011078:	4955      	ldr	r1, [pc, #340]	; (80111d0 <__ieee754_sqrt+0x15c>)
 801107a:	ec55 4b10 	vmov	r4, r5, d0
 801107e:	43a9      	bics	r1, r5
 8011080:	462b      	mov	r3, r5
 8011082:	462a      	mov	r2, r5
 8011084:	d112      	bne.n	80110ac <__ieee754_sqrt+0x38>
 8011086:	ee10 2a10 	vmov	r2, s0
 801108a:	ee10 0a10 	vmov	r0, s0
 801108e:	4629      	mov	r1, r5
 8011090:	f7ef fad2 	bl	8000638 <__aeabi_dmul>
 8011094:	4602      	mov	r2, r0
 8011096:	460b      	mov	r3, r1
 8011098:	4620      	mov	r0, r4
 801109a:	4629      	mov	r1, r5
 801109c:	f7ef f916 	bl	80002cc <__adddf3>
 80110a0:	4604      	mov	r4, r0
 80110a2:	460d      	mov	r5, r1
 80110a4:	ec45 4b10 	vmov	d0, r4, r5
 80110a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110ac:	2d00      	cmp	r5, #0
 80110ae:	ee10 0a10 	vmov	r0, s0
 80110b2:	4621      	mov	r1, r4
 80110b4:	dc0f      	bgt.n	80110d6 <__ieee754_sqrt+0x62>
 80110b6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80110ba:	4330      	orrs	r0, r6
 80110bc:	d0f2      	beq.n	80110a4 <__ieee754_sqrt+0x30>
 80110be:	b155      	cbz	r5, 80110d6 <__ieee754_sqrt+0x62>
 80110c0:	ee10 2a10 	vmov	r2, s0
 80110c4:	4620      	mov	r0, r4
 80110c6:	4629      	mov	r1, r5
 80110c8:	f7ef f8fe 	bl	80002c8 <__aeabi_dsub>
 80110cc:	4602      	mov	r2, r0
 80110ce:	460b      	mov	r3, r1
 80110d0:	f7ef fbdc 	bl	800088c <__aeabi_ddiv>
 80110d4:	e7e4      	b.n	80110a0 <__ieee754_sqrt+0x2c>
 80110d6:	151b      	asrs	r3, r3, #20
 80110d8:	d073      	beq.n	80111c2 <__ieee754_sqrt+0x14e>
 80110da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80110de:	07dd      	lsls	r5, r3, #31
 80110e0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80110e4:	bf48      	it	mi
 80110e6:	0fc8      	lsrmi	r0, r1, #31
 80110e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80110ec:	bf44      	itt	mi
 80110ee:	0049      	lslmi	r1, r1, #1
 80110f0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80110f4:	2500      	movs	r5, #0
 80110f6:	1058      	asrs	r0, r3, #1
 80110f8:	0fcb      	lsrs	r3, r1, #31
 80110fa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80110fe:	0049      	lsls	r1, r1, #1
 8011100:	2316      	movs	r3, #22
 8011102:	462c      	mov	r4, r5
 8011104:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011108:	19a7      	adds	r7, r4, r6
 801110a:	4297      	cmp	r7, r2
 801110c:	bfde      	ittt	le
 801110e:	19bc      	addle	r4, r7, r6
 8011110:	1bd2      	suble	r2, r2, r7
 8011112:	19ad      	addle	r5, r5, r6
 8011114:	0fcf      	lsrs	r7, r1, #31
 8011116:	3b01      	subs	r3, #1
 8011118:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801111c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011120:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011124:	d1f0      	bne.n	8011108 <__ieee754_sqrt+0x94>
 8011126:	f04f 0c20 	mov.w	ip, #32
 801112a:	469e      	mov	lr, r3
 801112c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011130:	42a2      	cmp	r2, r4
 8011132:	eb06 070e 	add.w	r7, r6, lr
 8011136:	dc02      	bgt.n	801113e <__ieee754_sqrt+0xca>
 8011138:	d112      	bne.n	8011160 <__ieee754_sqrt+0xec>
 801113a:	428f      	cmp	r7, r1
 801113c:	d810      	bhi.n	8011160 <__ieee754_sqrt+0xec>
 801113e:	2f00      	cmp	r7, #0
 8011140:	eb07 0e06 	add.w	lr, r7, r6
 8011144:	da42      	bge.n	80111cc <__ieee754_sqrt+0x158>
 8011146:	f1be 0f00 	cmp.w	lr, #0
 801114a:	db3f      	blt.n	80111cc <__ieee754_sqrt+0x158>
 801114c:	f104 0801 	add.w	r8, r4, #1
 8011150:	1b12      	subs	r2, r2, r4
 8011152:	428f      	cmp	r7, r1
 8011154:	bf88      	it	hi
 8011156:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801115a:	1bc9      	subs	r1, r1, r7
 801115c:	4433      	add	r3, r6
 801115e:	4644      	mov	r4, r8
 8011160:	0052      	lsls	r2, r2, #1
 8011162:	f1bc 0c01 	subs.w	ip, ip, #1
 8011166:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801116a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801116e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011172:	d1dd      	bne.n	8011130 <__ieee754_sqrt+0xbc>
 8011174:	430a      	orrs	r2, r1
 8011176:	d006      	beq.n	8011186 <__ieee754_sqrt+0x112>
 8011178:	1c5c      	adds	r4, r3, #1
 801117a:	bf13      	iteet	ne
 801117c:	3301      	addne	r3, #1
 801117e:	3501      	addeq	r5, #1
 8011180:	4663      	moveq	r3, ip
 8011182:	f023 0301 	bicne.w	r3, r3, #1
 8011186:	106a      	asrs	r2, r5, #1
 8011188:	085b      	lsrs	r3, r3, #1
 801118a:	07e9      	lsls	r1, r5, #31
 801118c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011190:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011194:	bf48      	it	mi
 8011196:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801119a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801119e:	461c      	mov	r4, r3
 80111a0:	e780      	b.n	80110a4 <__ieee754_sqrt+0x30>
 80111a2:	0aca      	lsrs	r2, r1, #11
 80111a4:	3815      	subs	r0, #21
 80111a6:	0549      	lsls	r1, r1, #21
 80111a8:	2a00      	cmp	r2, #0
 80111aa:	d0fa      	beq.n	80111a2 <__ieee754_sqrt+0x12e>
 80111ac:	02d6      	lsls	r6, r2, #11
 80111ae:	d50a      	bpl.n	80111c6 <__ieee754_sqrt+0x152>
 80111b0:	f1c3 0420 	rsb	r4, r3, #32
 80111b4:	fa21 f404 	lsr.w	r4, r1, r4
 80111b8:	1e5d      	subs	r5, r3, #1
 80111ba:	4099      	lsls	r1, r3
 80111bc:	4322      	orrs	r2, r4
 80111be:	1b43      	subs	r3, r0, r5
 80111c0:	e78b      	b.n	80110da <__ieee754_sqrt+0x66>
 80111c2:	4618      	mov	r0, r3
 80111c4:	e7f0      	b.n	80111a8 <__ieee754_sqrt+0x134>
 80111c6:	0052      	lsls	r2, r2, #1
 80111c8:	3301      	adds	r3, #1
 80111ca:	e7ef      	b.n	80111ac <__ieee754_sqrt+0x138>
 80111cc:	46a0      	mov	r8, r4
 80111ce:	e7bf      	b.n	8011150 <__ieee754_sqrt+0xdc>
 80111d0:	7ff00000 	.word	0x7ff00000
 80111d4:	00000000 	.word	0x00000000

080111d8 <__kernel_cos>:
 80111d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111dc:	ec59 8b10 	vmov	r8, r9, d0
 80111e0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80111e4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80111e8:	ed2d 8b02 	vpush	{d8}
 80111ec:	eeb0 8a41 	vmov.f32	s16, s2
 80111f0:	eef0 8a61 	vmov.f32	s17, s3
 80111f4:	da07      	bge.n	8011206 <__kernel_cos+0x2e>
 80111f6:	ee10 0a10 	vmov	r0, s0
 80111fa:	4649      	mov	r1, r9
 80111fc:	f7ef fccc 	bl	8000b98 <__aeabi_d2iz>
 8011200:	2800      	cmp	r0, #0
 8011202:	f000 8089 	beq.w	8011318 <__kernel_cos+0x140>
 8011206:	4642      	mov	r2, r8
 8011208:	464b      	mov	r3, r9
 801120a:	4640      	mov	r0, r8
 801120c:	4649      	mov	r1, r9
 801120e:	f7ef fa13 	bl	8000638 <__aeabi_dmul>
 8011212:	2200      	movs	r2, #0
 8011214:	4b4e      	ldr	r3, [pc, #312]	; (8011350 <__kernel_cos+0x178>)
 8011216:	4604      	mov	r4, r0
 8011218:	460d      	mov	r5, r1
 801121a:	f7ef fa0d 	bl	8000638 <__aeabi_dmul>
 801121e:	a340      	add	r3, pc, #256	; (adr r3, 8011320 <__kernel_cos+0x148>)
 8011220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011224:	4682      	mov	sl, r0
 8011226:	468b      	mov	fp, r1
 8011228:	4620      	mov	r0, r4
 801122a:	4629      	mov	r1, r5
 801122c:	f7ef fa04 	bl	8000638 <__aeabi_dmul>
 8011230:	a33d      	add	r3, pc, #244	; (adr r3, 8011328 <__kernel_cos+0x150>)
 8011232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011236:	f7ef f849 	bl	80002cc <__adddf3>
 801123a:	4622      	mov	r2, r4
 801123c:	462b      	mov	r3, r5
 801123e:	f7ef f9fb 	bl	8000638 <__aeabi_dmul>
 8011242:	a33b      	add	r3, pc, #236	; (adr r3, 8011330 <__kernel_cos+0x158>)
 8011244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011248:	f7ef f83e 	bl	80002c8 <__aeabi_dsub>
 801124c:	4622      	mov	r2, r4
 801124e:	462b      	mov	r3, r5
 8011250:	f7ef f9f2 	bl	8000638 <__aeabi_dmul>
 8011254:	a338      	add	r3, pc, #224	; (adr r3, 8011338 <__kernel_cos+0x160>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f837 	bl	80002cc <__adddf3>
 801125e:	4622      	mov	r2, r4
 8011260:	462b      	mov	r3, r5
 8011262:	f7ef f9e9 	bl	8000638 <__aeabi_dmul>
 8011266:	a336      	add	r3, pc, #216	; (adr r3, 8011340 <__kernel_cos+0x168>)
 8011268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801126c:	f7ef f82c 	bl	80002c8 <__aeabi_dsub>
 8011270:	4622      	mov	r2, r4
 8011272:	462b      	mov	r3, r5
 8011274:	f7ef f9e0 	bl	8000638 <__aeabi_dmul>
 8011278:	a333      	add	r3, pc, #204	; (adr r3, 8011348 <__kernel_cos+0x170>)
 801127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127e:	f7ef f825 	bl	80002cc <__adddf3>
 8011282:	4622      	mov	r2, r4
 8011284:	462b      	mov	r3, r5
 8011286:	f7ef f9d7 	bl	8000638 <__aeabi_dmul>
 801128a:	4622      	mov	r2, r4
 801128c:	462b      	mov	r3, r5
 801128e:	f7ef f9d3 	bl	8000638 <__aeabi_dmul>
 8011292:	ec53 2b18 	vmov	r2, r3, d8
 8011296:	4604      	mov	r4, r0
 8011298:	460d      	mov	r5, r1
 801129a:	4640      	mov	r0, r8
 801129c:	4649      	mov	r1, r9
 801129e:	f7ef f9cb 	bl	8000638 <__aeabi_dmul>
 80112a2:	460b      	mov	r3, r1
 80112a4:	4602      	mov	r2, r0
 80112a6:	4629      	mov	r1, r5
 80112a8:	4620      	mov	r0, r4
 80112aa:	f7ef f80d 	bl	80002c8 <__aeabi_dsub>
 80112ae:	4b29      	ldr	r3, [pc, #164]	; (8011354 <__kernel_cos+0x17c>)
 80112b0:	429e      	cmp	r6, r3
 80112b2:	4680      	mov	r8, r0
 80112b4:	4689      	mov	r9, r1
 80112b6:	dc11      	bgt.n	80112dc <__kernel_cos+0x104>
 80112b8:	4602      	mov	r2, r0
 80112ba:	460b      	mov	r3, r1
 80112bc:	4650      	mov	r0, sl
 80112be:	4659      	mov	r1, fp
 80112c0:	f7ef f802 	bl	80002c8 <__aeabi_dsub>
 80112c4:	460b      	mov	r3, r1
 80112c6:	4924      	ldr	r1, [pc, #144]	; (8011358 <__kernel_cos+0x180>)
 80112c8:	4602      	mov	r2, r0
 80112ca:	2000      	movs	r0, #0
 80112cc:	f7ee fffc 	bl	80002c8 <__aeabi_dsub>
 80112d0:	ecbd 8b02 	vpop	{d8}
 80112d4:	ec41 0b10 	vmov	d0, r0, r1
 80112d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112dc:	4b1f      	ldr	r3, [pc, #124]	; (801135c <__kernel_cos+0x184>)
 80112de:	491e      	ldr	r1, [pc, #120]	; (8011358 <__kernel_cos+0x180>)
 80112e0:	429e      	cmp	r6, r3
 80112e2:	bfcc      	ite	gt
 80112e4:	4d1e      	ldrgt	r5, [pc, #120]	; (8011360 <__kernel_cos+0x188>)
 80112e6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80112ea:	2400      	movs	r4, #0
 80112ec:	4622      	mov	r2, r4
 80112ee:	462b      	mov	r3, r5
 80112f0:	2000      	movs	r0, #0
 80112f2:	f7ee ffe9 	bl	80002c8 <__aeabi_dsub>
 80112f6:	4622      	mov	r2, r4
 80112f8:	4606      	mov	r6, r0
 80112fa:	460f      	mov	r7, r1
 80112fc:	462b      	mov	r3, r5
 80112fe:	4650      	mov	r0, sl
 8011300:	4659      	mov	r1, fp
 8011302:	f7ee ffe1 	bl	80002c8 <__aeabi_dsub>
 8011306:	4642      	mov	r2, r8
 8011308:	464b      	mov	r3, r9
 801130a:	f7ee ffdd 	bl	80002c8 <__aeabi_dsub>
 801130e:	4602      	mov	r2, r0
 8011310:	460b      	mov	r3, r1
 8011312:	4630      	mov	r0, r6
 8011314:	4639      	mov	r1, r7
 8011316:	e7d9      	b.n	80112cc <__kernel_cos+0xf4>
 8011318:	2000      	movs	r0, #0
 801131a:	490f      	ldr	r1, [pc, #60]	; (8011358 <__kernel_cos+0x180>)
 801131c:	e7d8      	b.n	80112d0 <__kernel_cos+0xf8>
 801131e:	bf00      	nop
 8011320:	be8838d4 	.word	0xbe8838d4
 8011324:	bda8fae9 	.word	0xbda8fae9
 8011328:	bdb4b1c4 	.word	0xbdb4b1c4
 801132c:	3e21ee9e 	.word	0x3e21ee9e
 8011330:	809c52ad 	.word	0x809c52ad
 8011334:	3e927e4f 	.word	0x3e927e4f
 8011338:	19cb1590 	.word	0x19cb1590
 801133c:	3efa01a0 	.word	0x3efa01a0
 8011340:	16c15177 	.word	0x16c15177
 8011344:	3f56c16c 	.word	0x3f56c16c
 8011348:	5555554c 	.word	0x5555554c
 801134c:	3fa55555 	.word	0x3fa55555
 8011350:	3fe00000 	.word	0x3fe00000
 8011354:	3fd33332 	.word	0x3fd33332
 8011358:	3ff00000 	.word	0x3ff00000
 801135c:	3fe90000 	.word	0x3fe90000
 8011360:	3fd20000 	.word	0x3fd20000
 8011364:	00000000 	.word	0x00000000

08011368 <__kernel_rem_pio2>:
 8011368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801136c:	ed2d 8b02 	vpush	{d8}
 8011370:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011374:	1ed4      	subs	r4, r2, #3
 8011376:	9308      	str	r3, [sp, #32]
 8011378:	9101      	str	r1, [sp, #4]
 801137a:	4bc5      	ldr	r3, [pc, #788]	; (8011690 <__kernel_rem_pio2+0x328>)
 801137c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801137e:	9009      	str	r0, [sp, #36]	; 0x24
 8011380:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011384:	9304      	str	r3, [sp, #16]
 8011386:	9b08      	ldr	r3, [sp, #32]
 8011388:	3b01      	subs	r3, #1
 801138a:	9307      	str	r3, [sp, #28]
 801138c:	2318      	movs	r3, #24
 801138e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011392:	f06f 0317 	mvn.w	r3, #23
 8011396:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801139a:	fb04 3303 	mla	r3, r4, r3, r3
 801139e:	eb03 0a02 	add.w	sl, r3, r2
 80113a2:	9b04      	ldr	r3, [sp, #16]
 80113a4:	9a07      	ldr	r2, [sp, #28]
 80113a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011680 <__kernel_rem_pio2+0x318>
 80113aa:	eb03 0802 	add.w	r8, r3, r2
 80113ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80113b0:	1aa7      	subs	r7, r4, r2
 80113b2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80113b6:	ae22      	add	r6, sp, #136	; 0x88
 80113b8:	2500      	movs	r5, #0
 80113ba:	4545      	cmp	r5, r8
 80113bc:	dd13      	ble.n	80113e6 <__kernel_rem_pio2+0x7e>
 80113be:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011680 <__kernel_rem_pio2+0x318>
 80113c2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80113c6:	2600      	movs	r6, #0
 80113c8:	9b04      	ldr	r3, [sp, #16]
 80113ca:	429e      	cmp	r6, r3
 80113cc:	dc32      	bgt.n	8011434 <__kernel_rem_pio2+0xcc>
 80113ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d0:	9302      	str	r3, [sp, #8]
 80113d2:	9b08      	ldr	r3, [sp, #32]
 80113d4:	199d      	adds	r5, r3, r6
 80113d6:	ab22      	add	r3, sp, #136	; 0x88
 80113d8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80113dc:	9306      	str	r3, [sp, #24]
 80113de:	ec59 8b18 	vmov	r8, r9, d8
 80113e2:	2700      	movs	r7, #0
 80113e4:	e01f      	b.n	8011426 <__kernel_rem_pio2+0xbe>
 80113e6:	42ef      	cmn	r7, r5
 80113e8:	d407      	bmi.n	80113fa <__kernel_rem_pio2+0x92>
 80113ea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80113ee:	f7ef f8b9 	bl	8000564 <__aeabi_i2d>
 80113f2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80113f6:	3501      	adds	r5, #1
 80113f8:	e7df      	b.n	80113ba <__kernel_rem_pio2+0x52>
 80113fa:	ec51 0b18 	vmov	r0, r1, d8
 80113fe:	e7f8      	b.n	80113f2 <__kernel_rem_pio2+0x8a>
 8011400:	9906      	ldr	r1, [sp, #24]
 8011402:	9d02      	ldr	r5, [sp, #8]
 8011404:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011408:	9106      	str	r1, [sp, #24]
 801140a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801140e:	9502      	str	r5, [sp, #8]
 8011410:	f7ef f912 	bl	8000638 <__aeabi_dmul>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	4640      	mov	r0, r8
 801141a:	4649      	mov	r1, r9
 801141c:	f7ee ff56 	bl	80002cc <__adddf3>
 8011420:	3701      	adds	r7, #1
 8011422:	4680      	mov	r8, r0
 8011424:	4689      	mov	r9, r1
 8011426:	9b07      	ldr	r3, [sp, #28]
 8011428:	429f      	cmp	r7, r3
 801142a:	dde9      	ble.n	8011400 <__kernel_rem_pio2+0x98>
 801142c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011430:	3601      	adds	r6, #1
 8011432:	e7c9      	b.n	80113c8 <__kernel_rem_pio2+0x60>
 8011434:	9b04      	ldr	r3, [sp, #16]
 8011436:	aa0e      	add	r2, sp, #56	; 0x38
 8011438:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801143c:	930c      	str	r3, [sp, #48]	; 0x30
 801143e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011440:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011444:	9c04      	ldr	r4, [sp, #16]
 8011446:	930b      	str	r3, [sp, #44]	; 0x2c
 8011448:	ab9a      	add	r3, sp, #616	; 0x268
 801144a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801144e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011456:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801145a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801145e:	ab9a      	add	r3, sp, #616	; 0x268
 8011460:	445b      	add	r3, fp
 8011462:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011466:	2500      	movs	r5, #0
 8011468:	1b63      	subs	r3, r4, r5
 801146a:	2b00      	cmp	r3, #0
 801146c:	dc78      	bgt.n	8011560 <__kernel_rem_pio2+0x1f8>
 801146e:	4650      	mov	r0, sl
 8011470:	ec49 8b10 	vmov	d0, r8, r9
 8011474:	f000 fdb0 	bl	8011fd8 <scalbn>
 8011478:	ec57 6b10 	vmov	r6, r7, d0
 801147c:	2200      	movs	r2, #0
 801147e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011482:	ee10 0a10 	vmov	r0, s0
 8011486:	4639      	mov	r1, r7
 8011488:	f7ef f8d6 	bl	8000638 <__aeabi_dmul>
 801148c:	ec41 0b10 	vmov	d0, r0, r1
 8011490:	f000 fd12 	bl	8011eb8 <floor>
 8011494:	2200      	movs	r2, #0
 8011496:	ec51 0b10 	vmov	r0, r1, d0
 801149a:	4b7e      	ldr	r3, [pc, #504]	; (8011694 <__kernel_rem_pio2+0x32c>)
 801149c:	f7ef f8cc 	bl	8000638 <__aeabi_dmul>
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	4630      	mov	r0, r6
 80114a6:	4639      	mov	r1, r7
 80114a8:	f7ee ff0e 	bl	80002c8 <__aeabi_dsub>
 80114ac:	460f      	mov	r7, r1
 80114ae:	4606      	mov	r6, r0
 80114b0:	f7ef fb72 	bl	8000b98 <__aeabi_d2iz>
 80114b4:	9006      	str	r0, [sp, #24]
 80114b6:	f7ef f855 	bl	8000564 <__aeabi_i2d>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	4630      	mov	r0, r6
 80114c0:	4639      	mov	r1, r7
 80114c2:	f7ee ff01 	bl	80002c8 <__aeabi_dsub>
 80114c6:	f1ba 0f00 	cmp.w	sl, #0
 80114ca:	4606      	mov	r6, r0
 80114cc:	460f      	mov	r7, r1
 80114ce:	dd6c      	ble.n	80115aa <__kernel_rem_pio2+0x242>
 80114d0:	1e62      	subs	r2, r4, #1
 80114d2:	ab0e      	add	r3, sp, #56	; 0x38
 80114d4:	f1ca 0118 	rsb	r1, sl, #24
 80114d8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80114dc:	9d06      	ldr	r5, [sp, #24]
 80114de:	fa40 f301 	asr.w	r3, r0, r1
 80114e2:	441d      	add	r5, r3
 80114e4:	408b      	lsls	r3, r1
 80114e6:	1ac0      	subs	r0, r0, r3
 80114e8:	ab0e      	add	r3, sp, #56	; 0x38
 80114ea:	9506      	str	r5, [sp, #24]
 80114ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80114f0:	f1ca 0317 	rsb	r3, sl, #23
 80114f4:	fa40 f303 	asr.w	r3, r0, r3
 80114f8:	9302      	str	r3, [sp, #8]
 80114fa:	9b02      	ldr	r3, [sp, #8]
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	dd62      	ble.n	80115c6 <__kernel_rem_pio2+0x25e>
 8011500:	9b06      	ldr	r3, [sp, #24]
 8011502:	2200      	movs	r2, #0
 8011504:	3301      	adds	r3, #1
 8011506:	9306      	str	r3, [sp, #24]
 8011508:	4615      	mov	r5, r2
 801150a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801150e:	4294      	cmp	r4, r2
 8011510:	f300 8095 	bgt.w	801163e <__kernel_rem_pio2+0x2d6>
 8011514:	f1ba 0f00 	cmp.w	sl, #0
 8011518:	dd07      	ble.n	801152a <__kernel_rem_pio2+0x1c2>
 801151a:	f1ba 0f01 	cmp.w	sl, #1
 801151e:	f000 80a2 	beq.w	8011666 <__kernel_rem_pio2+0x2fe>
 8011522:	f1ba 0f02 	cmp.w	sl, #2
 8011526:	f000 80c1 	beq.w	80116ac <__kernel_rem_pio2+0x344>
 801152a:	9b02      	ldr	r3, [sp, #8]
 801152c:	2b02      	cmp	r3, #2
 801152e:	d14a      	bne.n	80115c6 <__kernel_rem_pio2+0x25e>
 8011530:	4632      	mov	r2, r6
 8011532:	463b      	mov	r3, r7
 8011534:	2000      	movs	r0, #0
 8011536:	4958      	ldr	r1, [pc, #352]	; (8011698 <__kernel_rem_pio2+0x330>)
 8011538:	f7ee fec6 	bl	80002c8 <__aeabi_dsub>
 801153c:	4606      	mov	r6, r0
 801153e:	460f      	mov	r7, r1
 8011540:	2d00      	cmp	r5, #0
 8011542:	d040      	beq.n	80115c6 <__kernel_rem_pio2+0x25e>
 8011544:	4650      	mov	r0, sl
 8011546:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011688 <__kernel_rem_pio2+0x320>
 801154a:	f000 fd45 	bl	8011fd8 <scalbn>
 801154e:	4630      	mov	r0, r6
 8011550:	4639      	mov	r1, r7
 8011552:	ec53 2b10 	vmov	r2, r3, d0
 8011556:	f7ee feb7 	bl	80002c8 <__aeabi_dsub>
 801155a:	4606      	mov	r6, r0
 801155c:	460f      	mov	r7, r1
 801155e:	e032      	b.n	80115c6 <__kernel_rem_pio2+0x25e>
 8011560:	2200      	movs	r2, #0
 8011562:	4b4e      	ldr	r3, [pc, #312]	; (801169c <__kernel_rem_pio2+0x334>)
 8011564:	4640      	mov	r0, r8
 8011566:	4649      	mov	r1, r9
 8011568:	f7ef f866 	bl	8000638 <__aeabi_dmul>
 801156c:	f7ef fb14 	bl	8000b98 <__aeabi_d2iz>
 8011570:	f7ee fff8 	bl	8000564 <__aeabi_i2d>
 8011574:	2200      	movs	r2, #0
 8011576:	4b4a      	ldr	r3, [pc, #296]	; (80116a0 <__kernel_rem_pio2+0x338>)
 8011578:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801157c:	f7ef f85c 	bl	8000638 <__aeabi_dmul>
 8011580:	4602      	mov	r2, r0
 8011582:	460b      	mov	r3, r1
 8011584:	4640      	mov	r0, r8
 8011586:	4649      	mov	r1, r9
 8011588:	f7ee fe9e 	bl	80002c8 <__aeabi_dsub>
 801158c:	f7ef fb04 	bl	8000b98 <__aeabi_d2iz>
 8011590:	ab0e      	add	r3, sp, #56	; 0x38
 8011592:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011596:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801159a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801159e:	f7ee fe95 	bl	80002cc <__adddf3>
 80115a2:	3501      	adds	r5, #1
 80115a4:	4680      	mov	r8, r0
 80115a6:	4689      	mov	r9, r1
 80115a8:	e75e      	b.n	8011468 <__kernel_rem_pio2+0x100>
 80115aa:	d105      	bne.n	80115b8 <__kernel_rem_pio2+0x250>
 80115ac:	1e63      	subs	r3, r4, #1
 80115ae:	aa0e      	add	r2, sp, #56	; 0x38
 80115b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80115b4:	15c3      	asrs	r3, r0, #23
 80115b6:	e79f      	b.n	80114f8 <__kernel_rem_pio2+0x190>
 80115b8:	2200      	movs	r2, #0
 80115ba:	4b3a      	ldr	r3, [pc, #232]	; (80116a4 <__kernel_rem_pio2+0x33c>)
 80115bc:	f7ef fac2 	bl	8000b44 <__aeabi_dcmpge>
 80115c0:	2800      	cmp	r0, #0
 80115c2:	d139      	bne.n	8011638 <__kernel_rem_pio2+0x2d0>
 80115c4:	9002      	str	r0, [sp, #8]
 80115c6:	2200      	movs	r2, #0
 80115c8:	2300      	movs	r3, #0
 80115ca:	4630      	mov	r0, r6
 80115cc:	4639      	mov	r1, r7
 80115ce:	f7ef fa9b 	bl	8000b08 <__aeabi_dcmpeq>
 80115d2:	2800      	cmp	r0, #0
 80115d4:	f000 80c7 	beq.w	8011766 <__kernel_rem_pio2+0x3fe>
 80115d8:	1e65      	subs	r5, r4, #1
 80115da:	462b      	mov	r3, r5
 80115dc:	2200      	movs	r2, #0
 80115de:	9904      	ldr	r1, [sp, #16]
 80115e0:	428b      	cmp	r3, r1
 80115e2:	da6a      	bge.n	80116ba <__kernel_rem_pio2+0x352>
 80115e4:	2a00      	cmp	r2, #0
 80115e6:	f000 8088 	beq.w	80116fa <__kernel_rem_pio2+0x392>
 80115ea:	ab0e      	add	r3, sp, #56	; 0x38
 80115ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80115f0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	f000 80b4 	beq.w	8011762 <__kernel_rem_pio2+0x3fa>
 80115fa:	4650      	mov	r0, sl
 80115fc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011688 <__kernel_rem_pio2+0x320>
 8011600:	f000 fcea 	bl	8011fd8 <scalbn>
 8011604:	00ec      	lsls	r4, r5, #3
 8011606:	ab72      	add	r3, sp, #456	; 0x1c8
 8011608:	191e      	adds	r6, r3, r4
 801160a:	ec59 8b10 	vmov	r8, r9, d0
 801160e:	f106 0a08 	add.w	sl, r6, #8
 8011612:	462f      	mov	r7, r5
 8011614:	2f00      	cmp	r7, #0
 8011616:	f280 80df 	bge.w	80117d8 <__kernel_rem_pio2+0x470>
 801161a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011680 <__kernel_rem_pio2+0x318>
 801161e:	f04f 0a00 	mov.w	sl, #0
 8011622:	eba5 030a 	sub.w	r3, r5, sl
 8011626:	2b00      	cmp	r3, #0
 8011628:	f2c0 810a 	blt.w	8011840 <__kernel_rem_pio2+0x4d8>
 801162c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80116a8 <__kernel_rem_pio2+0x340>
 8011630:	ec59 8b18 	vmov	r8, r9, d8
 8011634:	2700      	movs	r7, #0
 8011636:	e0f5      	b.n	8011824 <__kernel_rem_pio2+0x4bc>
 8011638:	2302      	movs	r3, #2
 801163a:	9302      	str	r3, [sp, #8]
 801163c:	e760      	b.n	8011500 <__kernel_rem_pio2+0x198>
 801163e:	ab0e      	add	r3, sp, #56	; 0x38
 8011640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011644:	b94d      	cbnz	r5, 801165a <__kernel_rem_pio2+0x2f2>
 8011646:	b12b      	cbz	r3, 8011654 <__kernel_rem_pio2+0x2ec>
 8011648:	a80e      	add	r0, sp, #56	; 0x38
 801164a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801164e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011652:	2301      	movs	r3, #1
 8011654:	3201      	adds	r2, #1
 8011656:	461d      	mov	r5, r3
 8011658:	e759      	b.n	801150e <__kernel_rem_pio2+0x1a6>
 801165a:	a80e      	add	r0, sp, #56	; 0x38
 801165c:	1acb      	subs	r3, r1, r3
 801165e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011662:	462b      	mov	r3, r5
 8011664:	e7f6      	b.n	8011654 <__kernel_rem_pio2+0x2ec>
 8011666:	1e62      	subs	r2, r4, #1
 8011668:	ab0e      	add	r3, sp, #56	; 0x38
 801166a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801166e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011672:	a90e      	add	r1, sp, #56	; 0x38
 8011674:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011678:	e757      	b.n	801152a <__kernel_rem_pio2+0x1c2>
 801167a:	bf00      	nop
 801167c:	f3af 8000 	nop.w
	...
 801168c:	3ff00000 	.word	0x3ff00000
 8011690:	08012b88 	.word	0x08012b88
 8011694:	40200000 	.word	0x40200000
 8011698:	3ff00000 	.word	0x3ff00000
 801169c:	3e700000 	.word	0x3e700000
 80116a0:	41700000 	.word	0x41700000
 80116a4:	3fe00000 	.word	0x3fe00000
 80116a8:	08012b48 	.word	0x08012b48
 80116ac:	1e62      	subs	r2, r4, #1
 80116ae:	ab0e      	add	r3, sp, #56	; 0x38
 80116b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80116b8:	e7db      	b.n	8011672 <__kernel_rem_pio2+0x30a>
 80116ba:	a90e      	add	r1, sp, #56	; 0x38
 80116bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80116c0:	3b01      	subs	r3, #1
 80116c2:	430a      	orrs	r2, r1
 80116c4:	e78b      	b.n	80115de <__kernel_rem_pio2+0x276>
 80116c6:	3301      	adds	r3, #1
 80116c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80116cc:	2900      	cmp	r1, #0
 80116ce:	d0fa      	beq.n	80116c6 <__kernel_rem_pio2+0x35e>
 80116d0:	9a08      	ldr	r2, [sp, #32]
 80116d2:	4422      	add	r2, r4
 80116d4:	00d2      	lsls	r2, r2, #3
 80116d6:	a922      	add	r1, sp, #136	; 0x88
 80116d8:	18e3      	adds	r3, r4, r3
 80116da:	9206      	str	r2, [sp, #24]
 80116dc:	440a      	add	r2, r1
 80116de:	9302      	str	r3, [sp, #8]
 80116e0:	f10b 0108 	add.w	r1, fp, #8
 80116e4:	f102 0308 	add.w	r3, r2, #8
 80116e8:	1c66      	adds	r6, r4, #1
 80116ea:	910a      	str	r1, [sp, #40]	; 0x28
 80116ec:	2500      	movs	r5, #0
 80116ee:	930d      	str	r3, [sp, #52]	; 0x34
 80116f0:	9b02      	ldr	r3, [sp, #8]
 80116f2:	42b3      	cmp	r3, r6
 80116f4:	da04      	bge.n	8011700 <__kernel_rem_pio2+0x398>
 80116f6:	461c      	mov	r4, r3
 80116f8:	e6a6      	b.n	8011448 <__kernel_rem_pio2+0xe0>
 80116fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116fc:	2301      	movs	r3, #1
 80116fe:	e7e3      	b.n	80116c8 <__kernel_rem_pio2+0x360>
 8011700:	9b06      	ldr	r3, [sp, #24]
 8011702:	18ef      	adds	r7, r5, r3
 8011704:	ab22      	add	r3, sp, #136	; 0x88
 8011706:	441f      	add	r7, r3
 8011708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801170a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801170e:	f7ee ff29 	bl	8000564 <__aeabi_i2d>
 8011712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011714:	461c      	mov	r4, r3
 8011716:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011718:	e9c7 0100 	strd	r0, r1, [r7]
 801171c:	eb03 0b05 	add.w	fp, r3, r5
 8011720:	2700      	movs	r7, #0
 8011722:	f04f 0800 	mov.w	r8, #0
 8011726:	f04f 0900 	mov.w	r9, #0
 801172a:	9b07      	ldr	r3, [sp, #28]
 801172c:	429f      	cmp	r7, r3
 801172e:	dd08      	ble.n	8011742 <__kernel_rem_pio2+0x3da>
 8011730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011732:	aa72      	add	r2, sp, #456	; 0x1c8
 8011734:	18eb      	adds	r3, r5, r3
 8011736:	4413      	add	r3, r2
 8011738:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801173c:	3601      	adds	r6, #1
 801173e:	3508      	adds	r5, #8
 8011740:	e7d6      	b.n	80116f0 <__kernel_rem_pio2+0x388>
 8011742:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011746:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801174a:	f7ee ff75 	bl	8000638 <__aeabi_dmul>
 801174e:	4602      	mov	r2, r0
 8011750:	460b      	mov	r3, r1
 8011752:	4640      	mov	r0, r8
 8011754:	4649      	mov	r1, r9
 8011756:	f7ee fdb9 	bl	80002cc <__adddf3>
 801175a:	3701      	adds	r7, #1
 801175c:	4680      	mov	r8, r0
 801175e:	4689      	mov	r9, r1
 8011760:	e7e3      	b.n	801172a <__kernel_rem_pio2+0x3c2>
 8011762:	3d01      	subs	r5, #1
 8011764:	e741      	b.n	80115ea <__kernel_rem_pio2+0x282>
 8011766:	f1ca 0000 	rsb	r0, sl, #0
 801176a:	ec47 6b10 	vmov	d0, r6, r7
 801176e:	f000 fc33 	bl	8011fd8 <scalbn>
 8011772:	ec57 6b10 	vmov	r6, r7, d0
 8011776:	2200      	movs	r2, #0
 8011778:	4b99      	ldr	r3, [pc, #612]	; (80119e0 <__kernel_rem_pio2+0x678>)
 801177a:	ee10 0a10 	vmov	r0, s0
 801177e:	4639      	mov	r1, r7
 8011780:	f7ef f9e0 	bl	8000b44 <__aeabi_dcmpge>
 8011784:	b1f8      	cbz	r0, 80117c6 <__kernel_rem_pio2+0x45e>
 8011786:	2200      	movs	r2, #0
 8011788:	4b96      	ldr	r3, [pc, #600]	; (80119e4 <__kernel_rem_pio2+0x67c>)
 801178a:	4630      	mov	r0, r6
 801178c:	4639      	mov	r1, r7
 801178e:	f7ee ff53 	bl	8000638 <__aeabi_dmul>
 8011792:	f7ef fa01 	bl	8000b98 <__aeabi_d2iz>
 8011796:	4680      	mov	r8, r0
 8011798:	f7ee fee4 	bl	8000564 <__aeabi_i2d>
 801179c:	2200      	movs	r2, #0
 801179e:	4b90      	ldr	r3, [pc, #576]	; (80119e0 <__kernel_rem_pio2+0x678>)
 80117a0:	f7ee ff4a 	bl	8000638 <__aeabi_dmul>
 80117a4:	460b      	mov	r3, r1
 80117a6:	4602      	mov	r2, r0
 80117a8:	4639      	mov	r1, r7
 80117aa:	4630      	mov	r0, r6
 80117ac:	f7ee fd8c 	bl	80002c8 <__aeabi_dsub>
 80117b0:	f7ef f9f2 	bl	8000b98 <__aeabi_d2iz>
 80117b4:	1c65      	adds	r5, r4, #1
 80117b6:	ab0e      	add	r3, sp, #56	; 0x38
 80117b8:	f10a 0a18 	add.w	sl, sl, #24
 80117bc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80117c0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80117c4:	e719      	b.n	80115fa <__kernel_rem_pio2+0x292>
 80117c6:	4630      	mov	r0, r6
 80117c8:	4639      	mov	r1, r7
 80117ca:	f7ef f9e5 	bl	8000b98 <__aeabi_d2iz>
 80117ce:	ab0e      	add	r3, sp, #56	; 0x38
 80117d0:	4625      	mov	r5, r4
 80117d2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80117d6:	e710      	b.n	80115fa <__kernel_rem_pio2+0x292>
 80117d8:	ab0e      	add	r3, sp, #56	; 0x38
 80117da:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80117de:	f7ee fec1 	bl	8000564 <__aeabi_i2d>
 80117e2:	4642      	mov	r2, r8
 80117e4:	464b      	mov	r3, r9
 80117e6:	f7ee ff27 	bl	8000638 <__aeabi_dmul>
 80117ea:	2200      	movs	r2, #0
 80117ec:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80117f0:	4b7c      	ldr	r3, [pc, #496]	; (80119e4 <__kernel_rem_pio2+0x67c>)
 80117f2:	4640      	mov	r0, r8
 80117f4:	4649      	mov	r1, r9
 80117f6:	f7ee ff1f 	bl	8000638 <__aeabi_dmul>
 80117fa:	3f01      	subs	r7, #1
 80117fc:	4680      	mov	r8, r0
 80117fe:	4689      	mov	r9, r1
 8011800:	e708      	b.n	8011614 <__kernel_rem_pio2+0x2ac>
 8011802:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 801180e:	f7ee ff13 	bl	8000638 <__aeabi_dmul>
 8011812:	4602      	mov	r2, r0
 8011814:	460b      	mov	r3, r1
 8011816:	4640      	mov	r0, r8
 8011818:	4649      	mov	r1, r9
 801181a:	f7ee fd57 	bl	80002cc <__adddf3>
 801181e:	3701      	adds	r7, #1
 8011820:	4680      	mov	r8, r0
 8011822:	4689      	mov	r9, r1
 8011824:	9b04      	ldr	r3, [sp, #16]
 8011826:	429f      	cmp	r7, r3
 8011828:	dc01      	bgt.n	801182e <__kernel_rem_pio2+0x4c6>
 801182a:	45ba      	cmp	sl, r7
 801182c:	dae9      	bge.n	8011802 <__kernel_rem_pio2+0x49a>
 801182e:	ab4a      	add	r3, sp, #296	; 0x128
 8011830:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011834:	e9c3 8900 	strd	r8, r9, [r3]
 8011838:	f10a 0a01 	add.w	sl, sl, #1
 801183c:	3e08      	subs	r6, #8
 801183e:	e6f0      	b.n	8011622 <__kernel_rem_pio2+0x2ba>
 8011840:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011842:	2b03      	cmp	r3, #3
 8011844:	d85b      	bhi.n	80118fe <__kernel_rem_pio2+0x596>
 8011846:	e8df f003 	tbb	[pc, r3]
 801184a:	264a      	.short	0x264a
 801184c:	0226      	.short	0x0226
 801184e:	ab9a      	add	r3, sp, #616	; 0x268
 8011850:	441c      	add	r4, r3
 8011852:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011856:	46a2      	mov	sl, r4
 8011858:	46ab      	mov	fp, r5
 801185a:	f1bb 0f00 	cmp.w	fp, #0
 801185e:	dc6c      	bgt.n	801193a <__kernel_rem_pio2+0x5d2>
 8011860:	46a2      	mov	sl, r4
 8011862:	46ab      	mov	fp, r5
 8011864:	f1bb 0f01 	cmp.w	fp, #1
 8011868:	f300 8086 	bgt.w	8011978 <__kernel_rem_pio2+0x610>
 801186c:	2000      	movs	r0, #0
 801186e:	2100      	movs	r1, #0
 8011870:	2d01      	cmp	r5, #1
 8011872:	f300 80a0 	bgt.w	80119b6 <__kernel_rem_pio2+0x64e>
 8011876:	9b02      	ldr	r3, [sp, #8]
 8011878:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801187c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011880:	2b00      	cmp	r3, #0
 8011882:	f040 809e 	bne.w	80119c2 <__kernel_rem_pio2+0x65a>
 8011886:	9b01      	ldr	r3, [sp, #4]
 8011888:	e9c3 7800 	strd	r7, r8, [r3]
 801188c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011890:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011894:	e033      	b.n	80118fe <__kernel_rem_pio2+0x596>
 8011896:	3408      	adds	r4, #8
 8011898:	ab4a      	add	r3, sp, #296	; 0x128
 801189a:	441c      	add	r4, r3
 801189c:	462e      	mov	r6, r5
 801189e:	2000      	movs	r0, #0
 80118a0:	2100      	movs	r1, #0
 80118a2:	2e00      	cmp	r6, #0
 80118a4:	da3a      	bge.n	801191c <__kernel_rem_pio2+0x5b4>
 80118a6:	9b02      	ldr	r3, [sp, #8]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d03d      	beq.n	8011928 <__kernel_rem_pio2+0x5c0>
 80118ac:	4602      	mov	r2, r0
 80118ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118b2:	9c01      	ldr	r4, [sp, #4]
 80118b4:	e9c4 2300 	strd	r2, r3, [r4]
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80118c0:	f7ee fd02 	bl	80002c8 <__aeabi_dsub>
 80118c4:	ae4c      	add	r6, sp, #304	; 0x130
 80118c6:	2401      	movs	r4, #1
 80118c8:	42a5      	cmp	r5, r4
 80118ca:	da30      	bge.n	801192e <__kernel_rem_pio2+0x5c6>
 80118cc:	9b02      	ldr	r3, [sp, #8]
 80118ce:	b113      	cbz	r3, 80118d6 <__kernel_rem_pio2+0x56e>
 80118d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118d4:	4619      	mov	r1, r3
 80118d6:	9b01      	ldr	r3, [sp, #4]
 80118d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80118dc:	e00f      	b.n	80118fe <__kernel_rem_pio2+0x596>
 80118de:	ab9a      	add	r3, sp, #616	; 0x268
 80118e0:	441c      	add	r4, r3
 80118e2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80118e6:	2000      	movs	r0, #0
 80118e8:	2100      	movs	r1, #0
 80118ea:	2d00      	cmp	r5, #0
 80118ec:	da10      	bge.n	8011910 <__kernel_rem_pio2+0x5a8>
 80118ee:	9b02      	ldr	r3, [sp, #8]
 80118f0:	b113      	cbz	r3, 80118f8 <__kernel_rem_pio2+0x590>
 80118f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80118f6:	4619      	mov	r1, r3
 80118f8:	9b01      	ldr	r3, [sp, #4]
 80118fa:	e9c3 0100 	strd	r0, r1, [r3]
 80118fe:	9b06      	ldr	r3, [sp, #24]
 8011900:	f003 0007 	and.w	r0, r3, #7
 8011904:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011908:	ecbd 8b02 	vpop	{d8}
 801190c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011910:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011914:	f7ee fcda 	bl	80002cc <__adddf3>
 8011918:	3d01      	subs	r5, #1
 801191a:	e7e6      	b.n	80118ea <__kernel_rem_pio2+0x582>
 801191c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011920:	f7ee fcd4 	bl	80002cc <__adddf3>
 8011924:	3e01      	subs	r6, #1
 8011926:	e7bc      	b.n	80118a2 <__kernel_rem_pio2+0x53a>
 8011928:	4602      	mov	r2, r0
 801192a:	460b      	mov	r3, r1
 801192c:	e7c1      	b.n	80118b2 <__kernel_rem_pio2+0x54a>
 801192e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011932:	f7ee fccb 	bl	80002cc <__adddf3>
 8011936:	3401      	adds	r4, #1
 8011938:	e7c6      	b.n	80118c8 <__kernel_rem_pio2+0x560>
 801193a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 801193e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011942:	4640      	mov	r0, r8
 8011944:	ec53 2b17 	vmov	r2, r3, d7
 8011948:	4649      	mov	r1, r9
 801194a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801194e:	f7ee fcbd 	bl	80002cc <__adddf3>
 8011952:	4602      	mov	r2, r0
 8011954:	460b      	mov	r3, r1
 8011956:	4606      	mov	r6, r0
 8011958:	460f      	mov	r7, r1
 801195a:	4640      	mov	r0, r8
 801195c:	4649      	mov	r1, r9
 801195e:	f7ee fcb3 	bl	80002c8 <__aeabi_dsub>
 8011962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011966:	f7ee fcb1 	bl	80002cc <__adddf3>
 801196a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801196e:	e9ca 0100 	strd	r0, r1, [sl]
 8011972:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011976:	e770      	b.n	801185a <__kernel_rem_pio2+0x4f2>
 8011978:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 801197c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011980:	4630      	mov	r0, r6
 8011982:	ec53 2b17 	vmov	r2, r3, d7
 8011986:	4639      	mov	r1, r7
 8011988:	ed8d 7b04 	vstr	d7, [sp, #16]
 801198c:	f7ee fc9e 	bl	80002cc <__adddf3>
 8011990:	4602      	mov	r2, r0
 8011992:	460b      	mov	r3, r1
 8011994:	4680      	mov	r8, r0
 8011996:	4689      	mov	r9, r1
 8011998:	4630      	mov	r0, r6
 801199a:	4639      	mov	r1, r7
 801199c:	f7ee fc94 	bl	80002c8 <__aeabi_dsub>
 80119a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119a4:	f7ee fc92 	bl	80002cc <__adddf3>
 80119a8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80119ac:	e9ca 0100 	strd	r0, r1, [sl]
 80119b0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80119b4:	e756      	b.n	8011864 <__kernel_rem_pio2+0x4fc>
 80119b6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80119ba:	f7ee fc87 	bl	80002cc <__adddf3>
 80119be:	3d01      	subs	r5, #1
 80119c0:	e756      	b.n	8011870 <__kernel_rem_pio2+0x508>
 80119c2:	9b01      	ldr	r3, [sp, #4]
 80119c4:	9a01      	ldr	r2, [sp, #4]
 80119c6:	601f      	str	r7, [r3, #0]
 80119c8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80119cc:	605c      	str	r4, [r3, #4]
 80119ce:	609d      	str	r5, [r3, #8]
 80119d0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80119d4:	60d3      	str	r3, [r2, #12]
 80119d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80119da:	6110      	str	r0, [r2, #16]
 80119dc:	6153      	str	r3, [r2, #20]
 80119de:	e78e      	b.n	80118fe <__kernel_rem_pio2+0x596>
 80119e0:	41700000 	.word	0x41700000
 80119e4:	3e700000 	.word	0x3e700000

080119e8 <__kernel_sin>:
 80119e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ec:	ec55 4b10 	vmov	r4, r5, d0
 80119f0:	b085      	sub	sp, #20
 80119f2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80119f6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80119fa:	ed8d 1b00 	vstr	d1, [sp]
 80119fe:	9002      	str	r0, [sp, #8]
 8011a00:	da06      	bge.n	8011a10 <__kernel_sin+0x28>
 8011a02:	ee10 0a10 	vmov	r0, s0
 8011a06:	4629      	mov	r1, r5
 8011a08:	f7ef f8c6 	bl	8000b98 <__aeabi_d2iz>
 8011a0c:	2800      	cmp	r0, #0
 8011a0e:	d051      	beq.n	8011ab4 <__kernel_sin+0xcc>
 8011a10:	4622      	mov	r2, r4
 8011a12:	462b      	mov	r3, r5
 8011a14:	4620      	mov	r0, r4
 8011a16:	4629      	mov	r1, r5
 8011a18:	f7ee fe0e 	bl	8000638 <__aeabi_dmul>
 8011a1c:	4682      	mov	sl, r0
 8011a1e:	468b      	mov	fp, r1
 8011a20:	4602      	mov	r2, r0
 8011a22:	460b      	mov	r3, r1
 8011a24:	4620      	mov	r0, r4
 8011a26:	4629      	mov	r1, r5
 8011a28:	f7ee fe06 	bl	8000638 <__aeabi_dmul>
 8011a2c:	a341      	add	r3, pc, #260	; (adr r3, 8011b34 <__kernel_sin+0x14c>)
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	4680      	mov	r8, r0
 8011a34:	4689      	mov	r9, r1
 8011a36:	4650      	mov	r0, sl
 8011a38:	4659      	mov	r1, fp
 8011a3a:	f7ee fdfd 	bl	8000638 <__aeabi_dmul>
 8011a3e:	a33f      	add	r3, pc, #252	; (adr r3, 8011b3c <__kernel_sin+0x154>)
 8011a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a44:	f7ee fc40 	bl	80002c8 <__aeabi_dsub>
 8011a48:	4652      	mov	r2, sl
 8011a4a:	465b      	mov	r3, fp
 8011a4c:	f7ee fdf4 	bl	8000638 <__aeabi_dmul>
 8011a50:	a33c      	add	r3, pc, #240	; (adr r3, 8011b44 <__kernel_sin+0x15c>)
 8011a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a56:	f7ee fc39 	bl	80002cc <__adddf3>
 8011a5a:	4652      	mov	r2, sl
 8011a5c:	465b      	mov	r3, fp
 8011a5e:	f7ee fdeb 	bl	8000638 <__aeabi_dmul>
 8011a62:	a33a      	add	r3, pc, #232	; (adr r3, 8011b4c <__kernel_sin+0x164>)
 8011a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a68:	f7ee fc2e 	bl	80002c8 <__aeabi_dsub>
 8011a6c:	4652      	mov	r2, sl
 8011a6e:	465b      	mov	r3, fp
 8011a70:	f7ee fde2 	bl	8000638 <__aeabi_dmul>
 8011a74:	a337      	add	r3, pc, #220	; (adr r3, 8011b54 <__kernel_sin+0x16c>)
 8011a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a7a:	f7ee fc27 	bl	80002cc <__adddf3>
 8011a7e:	9b02      	ldr	r3, [sp, #8]
 8011a80:	4606      	mov	r6, r0
 8011a82:	460f      	mov	r7, r1
 8011a84:	b9db      	cbnz	r3, 8011abe <__kernel_sin+0xd6>
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	4650      	mov	r0, sl
 8011a8c:	4659      	mov	r1, fp
 8011a8e:	f7ee fdd3 	bl	8000638 <__aeabi_dmul>
 8011a92:	a325      	add	r3, pc, #148	; (adr r3, 8011b28 <__kernel_sin+0x140>)
 8011a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a98:	f7ee fc16 	bl	80002c8 <__aeabi_dsub>
 8011a9c:	4642      	mov	r2, r8
 8011a9e:	464b      	mov	r3, r9
 8011aa0:	f7ee fdca 	bl	8000638 <__aeabi_dmul>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	4620      	mov	r0, r4
 8011aaa:	4629      	mov	r1, r5
 8011aac:	f7ee fc0e 	bl	80002cc <__adddf3>
 8011ab0:	4604      	mov	r4, r0
 8011ab2:	460d      	mov	r5, r1
 8011ab4:	ec45 4b10 	vmov	d0, r4, r5
 8011ab8:	b005      	add	sp, #20
 8011aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011abe:	2200      	movs	r2, #0
 8011ac0:	4b1b      	ldr	r3, [pc, #108]	; (8011b30 <__kernel_sin+0x148>)
 8011ac2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011ac6:	f7ee fdb7 	bl	8000638 <__aeabi_dmul>
 8011aca:	4632      	mov	r2, r6
 8011acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011ad0:	463b      	mov	r3, r7
 8011ad2:	4640      	mov	r0, r8
 8011ad4:	4649      	mov	r1, r9
 8011ad6:	f7ee fdaf 	bl	8000638 <__aeabi_dmul>
 8011ada:	4602      	mov	r2, r0
 8011adc:	460b      	mov	r3, r1
 8011ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011ae2:	f7ee fbf1 	bl	80002c8 <__aeabi_dsub>
 8011ae6:	4652      	mov	r2, sl
 8011ae8:	465b      	mov	r3, fp
 8011aea:	f7ee fda5 	bl	8000638 <__aeabi_dmul>
 8011aee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011af2:	f7ee fbe9 	bl	80002c8 <__aeabi_dsub>
 8011af6:	a30c      	add	r3, pc, #48	; (adr r3, 8011b28 <__kernel_sin+0x140>)
 8011af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011afc:	4606      	mov	r6, r0
 8011afe:	460f      	mov	r7, r1
 8011b00:	4640      	mov	r0, r8
 8011b02:	4649      	mov	r1, r9
 8011b04:	f7ee fd98 	bl	8000638 <__aeabi_dmul>
 8011b08:	4602      	mov	r2, r0
 8011b0a:	460b      	mov	r3, r1
 8011b0c:	4630      	mov	r0, r6
 8011b0e:	4639      	mov	r1, r7
 8011b10:	f7ee fbdc 	bl	80002cc <__adddf3>
 8011b14:	4602      	mov	r2, r0
 8011b16:	460b      	mov	r3, r1
 8011b18:	4620      	mov	r0, r4
 8011b1a:	4629      	mov	r1, r5
 8011b1c:	f7ee fbd4 	bl	80002c8 <__aeabi_dsub>
 8011b20:	e7c6      	b.n	8011ab0 <__kernel_sin+0xc8>
 8011b22:	bf00      	nop
 8011b24:	f3af 8000 	nop.w
 8011b28:	55555549 	.word	0x55555549
 8011b2c:	3fc55555 	.word	0x3fc55555
 8011b30:	3fe00000 	.word	0x3fe00000
 8011b34:	5acfd57c 	.word	0x5acfd57c
 8011b38:	3de5d93a 	.word	0x3de5d93a
 8011b3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8011b40:	3e5ae5e6 	.word	0x3e5ae5e6
 8011b44:	57b1fe7d 	.word	0x57b1fe7d
 8011b48:	3ec71de3 	.word	0x3ec71de3
 8011b4c:	19c161d5 	.word	0x19c161d5
 8011b50:	3f2a01a0 	.word	0x3f2a01a0
 8011b54:	1110f8a6 	.word	0x1110f8a6
 8011b58:	3f811111 	.word	0x3f811111
 8011b5c:	00000000 	.word	0x00000000

08011b60 <atan>:
 8011b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b64:	ec55 4b10 	vmov	r4, r5, d0
 8011b68:	4bc3      	ldr	r3, [pc, #780]	; (8011e78 <atan+0x318>)
 8011b6a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011b6e:	429e      	cmp	r6, r3
 8011b70:	46ab      	mov	fp, r5
 8011b72:	dd18      	ble.n	8011ba6 <atan+0x46>
 8011b74:	4bc1      	ldr	r3, [pc, #772]	; (8011e7c <atan+0x31c>)
 8011b76:	429e      	cmp	r6, r3
 8011b78:	dc01      	bgt.n	8011b7e <atan+0x1e>
 8011b7a:	d109      	bne.n	8011b90 <atan+0x30>
 8011b7c:	b144      	cbz	r4, 8011b90 <atan+0x30>
 8011b7e:	4622      	mov	r2, r4
 8011b80:	462b      	mov	r3, r5
 8011b82:	4620      	mov	r0, r4
 8011b84:	4629      	mov	r1, r5
 8011b86:	f7ee fba1 	bl	80002cc <__adddf3>
 8011b8a:	4604      	mov	r4, r0
 8011b8c:	460d      	mov	r5, r1
 8011b8e:	e006      	b.n	8011b9e <atan+0x3e>
 8011b90:	f1bb 0f00 	cmp.w	fp, #0
 8011b94:	f340 8131 	ble.w	8011dfa <atan+0x29a>
 8011b98:	a59b      	add	r5, pc, #620	; (adr r5, 8011e08 <atan+0x2a8>)
 8011b9a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011b9e:	ec45 4b10 	vmov	d0, r4, r5
 8011ba2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ba6:	4bb6      	ldr	r3, [pc, #728]	; (8011e80 <atan+0x320>)
 8011ba8:	429e      	cmp	r6, r3
 8011baa:	dc14      	bgt.n	8011bd6 <atan+0x76>
 8011bac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011bb0:	429e      	cmp	r6, r3
 8011bb2:	dc0d      	bgt.n	8011bd0 <atan+0x70>
 8011bb4:	a396      	add	r3, pc, #600	; (adr r3, 8011e10 <atan+0x2b0>)
 8011bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bba:	ee10 0a10 	vmov	r0, s0
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	f7ee fb84 	bl	80002cc <__adddf3>
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	4baf      	ldr	r3, [pc, #700]	; (8011e84 <atan+0x324>)
 8011bc8:	f7ee ffc6 	bl	8000b58 <__aeabi_dcmpgt>
 8011bcc:	2800      	cmp	r0, #0
 8011bce:	d1e6      	bne.n	8011b9e <atan+0x3e>
 8011bd0:	f04f 3aff 	mov.w	sl, #4294967295
 8011bd4:	e02b      	b.n	8011c2e <atan+0xce>
 8011bd6:	f000 f963 	bl	8011ea0 <fabs>
 8011bda:	4bab      	ldr	r3, [pc, #684]	; (8011e88 <atan+0x328>)
 8011bdc:	429e      	cmp	r6, r3
 8011bde:	ec55 4b10 	vmov	r4, r5, d0
 8011be2:	f300 80bf 	bgt.w	8011d64 <atan+0x204>
 8011be6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8011bea:	429e      	cmp	r6, r3
 8011bec:	f300 80a0 	bgt.w	8011d30 <atan+0x1d0>
 8011bf0:	ee10 2a10 	vmov	r2, s0
 8011bf4:	ee10 0a10 	vmov	r0, s0
 8011bf8:	462b      	mov	r3, r5
 8011bfa:	4629      	mov	r1, r5
 8011bfc:	f7ee fb66 	bl	80002cc <__adddf3>
 8011c00:	2200      	movs	r2, #0
 8011c02:	4ba0      	ldr	r3, [pc, #640]	; (8011e84 <atan+0x324>)
 8011c04:	f7ee fb60 	bl	80002c8 <__aeabi_dsub>
 8011c08:	2200      	movs	r2, #0
 8011c0a:	4606      	mov	r6, r0
 8011c0c:	460f      	mov	r7, r1
 8011c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011c12:	4620      	mov	r0, r4
 8011c14:	4629      	mov	r1, r5
 8011c16:	f7ee fb59 	bl	80002cc <__adddf3>
 8011c1a:	4602      	mov	r2, r0
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	4630      	mov	r0, r6
 8011c20:	4639      	mov	r1, r7
 8011c22:	f7ee fe33 	bl	800088c <__aeabi_ddiv>
 8011c26:	f04f 0a00 	mov.w	sl, #0
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	460d      	mov	r5, r1
 8011c2e:	4622      	mov	r2, r4
 8011c30:	462b      	mov	r3, r5
 8011c32:	4620      	mov	r0, r4
 8011c34:	4629      	mov	r1, r5
 8011c36:	f7ee fcff 	bl	8000638 <__aeabi_dmul>
 8011c3a:	4602      	mov	r2, r0
 8011c3c:	460b      	mov	r3, r1
 8011c3e:	4680      	mov	r8, r0
 8011c40:	4689      	mov	r9, r1
 8011c42:	f7ee fcf9 	bl	8000638 <__aeabi_dmul>
 8011c46:	a374      	add	r3, pc, #464	; (adr r3, 8011e18 <atan+0x2b8>)
 8011c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c4c:	4606      	mov	r6, r0
 8011c4e:	460f      	mov	r7, r1
 8011c50:	f7ee fcf2 	bl	8000638 <__aeabi_dmul>
 8011c54:	a372      	add	r3, pc, #456	; (adr r3, 8011e20 <atan+0x2c0>)
 8011c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c5a:	f7ee fb37 	bl	80002cc <__adddf3>
 8011c5e:	4632      	mov	r2, r6
 8011c60:	463b      	mov	r3, r7
 8011c62:	f7ee fce9 	bl	8000638 <__aeabi_dmul>
 8011c66:	a370      	add	r3, pc, #448	; (adr r3, 8011e28 <atan+0x2c8>)
 8011c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c6c:	f7ee fb2e 	bl	80002cc <__adddf3>
 8011c70:	4632      	mov	r2, r6
 8011c72:	463b      	mov	r3, r7
 8011c74:	f7ee fce0 	bl	8000638 <__aeabi_dmul>
 8011c78:	a36d      	add	r3, pc, #436	; (adr r3, 8011e30 <atan+0x2d0>)
 8011c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c7e:	f7ee fb25 	bl	80002cc <__adddf3>
 8011c82:	4632      	mov	r2, r6
 8011c84:	463b      	mov	r3, r7
 8011c86:	f7ee fcd7 	bl	8000638 <__aeabi_dmul>
 8011c8a:	a36b      	add	r3, pc, #428	; (adr r3, 8011e38 <atan+0x2d8>)
 8011c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c90:	f7ee fb1c 	bl	80002cc <__adddf3>
 8011c94:	4632      	mov	r2, r6
 8011c96:	463b      	mov	r3, r7
 8011c98:	f7ee fcce 	bl	8000638 <__aeabi_dmul>
 8011c9c:	a368      	add	r3, pc, #416	; (adr r3, 8011e40 <atan+0x2e0>)
 8011c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ca2:	f7ee fb13 	bl	80002cc <__adddf3>
 8011ca6:	4642      	mov	r2, r8
 8011ca8:	464b      	mov	r3, r9
 8011caa:	f7ee fcc5 	bl	8000638 <__aeabi_dmul>
 8011cae:	a366      	add	r3, pc, #408	; (adr r3, 8011e48 <atan+0x2e8>)
 8011cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb4:	4680      	mov	r8, r0
 8011cb6:	4689      	mov	r9, r1
 8011cb8:	4630      	mov	r0, r6
 8011cba:	4639      	mov	r1, r7
 8011cbc:	f7ee fcbc 	bl	8000638 <__aeabi_dmul>
 8011cc0:	a363      	add	r3, pc, #396	; (adr r3, 8011e50 <atan+0x2f0>)
 8011cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc6:	f7ee faff 	bl	80002c8 <__aeabi_dsub>
 8011cca:	4632      	mov	r2, r6
 8011ccc:	463b      	mov	r3, r7
 8011cce:	f7ee fcb3 	bl	8000638 <__aeabi_dmul>
 8011cd2:	a361      	add	r3, pc, #388	; (adr r3, 8011e58 <atan+0x2f8>)
 8011cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cd8:	f7ee faf6 	bl	80002c8 <__aeabi_dsub>
 8011cdc:	4632      	mov	r2, r6
 8011cde:	463b      	mov	r3, r7
 8011ce0:	f7ee fcaa 	bl	8000638 <__aeabi_dmul>
 8011ce4:	a35e      	add	r3, pc, #376	; (adr r3, 8011e60 <atan+0x300>)
 8011ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cea:	f7ee faed 	bl	80002c8 <__aeabi_dsub>
 8011cee:	4632      	mov	r2, r6
 8011cf0:	463b      	mov	r3, r7
 8011cf2:	f7ee fca1 	bl	8000638 <__aeabi_dmul>
 8011cf6:	a35c      	add	r3, pc, #368	; (adr r3, 8011e68 <atan+0x308>)
 8011cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfc:	f7ee fae4 	bl	80002c8 <__aeabi_dsub>
 8011d00:	4632      	mov	r2, r6
 8011d02:	463b      	mov	r3, r7
 8011d04:	f7ee fc98 	bl	8000638 <__aeabi_dmul>
 8011d08:	4602      	mov	r2, r0
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	4640      	mov	r0, r8
 8011d0e:	4649      	mov	r1, r9
 8011d10:	f7ee fadc 	bl	80002cc <__adddf3>
 8011d14:	4622      	mov	r2, r4
 8011d16:	462b      	mov	r3, r5
 8011d18:	f7ee fc8e 	bl	8000638 <__aeabi_dmul>
 8011d1c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8011d20:	4602      	mov	r2, r0
 8011d22:	460b      	mov	r3, r1
 8011d24:	d14b      	bne.n	8011dbe <atan+0x25e>
 8011d26:	4620      	mov	r0, r4
 8011d28:	4629      	mov	r1, r5
 8011d2a:	f7ee facd 	bl	80002c8 <__aeabi_dsub>
 8011d2e:	e72c      	b.n	8011b8a <atan+0x2a>
 8011d30:	ee10 0a10 	vmov	r0, s0
 8011d34:	2200      	movs	r2, #0
 8011d36:	4b53      	ldr	r3, [pc, #332]	; (8011e84 <atan+0x324>)
 8011d38:	4629      	mov	r1, r5
 8011d3a:	f7ee fac5 	bl	80002c8 <__aeabi_dsub>
 8011d3e:	2200      	movs	r2, #0
 8011d40:	4606      	mov	r6, r0
 8011d42:	460f      	mov	r7, r1
 8011d44:	4b4f      	ldr	r3, [pc, #316]	; (8011e84 <atan+0x324>)
 8011d46:	4620      	mov	r0, r4
 8011d48:	4629      	mov	r1, r5
 8011d4a:	f7ee fabf 	bl	80002cc <__adddf3>
 8011d4e:	4602      	mov	r2, r0
 8011d50:	460b      	mov	r3, r1
 8011d52:	4630      	mov	r0, r6
 8011d54:	4639      	mov	r1, r7
 8011d56:	f7ee fd99 	bl	800088c <__aeabi_ddiv>
 8011d5a:	f04f 0a01 	mov.w	sl, #1
 8011d5e:	4604      	mov	r4, r0
 8011d60:	460d      	mov	r5, r1
 8011d62:	e764      	b.n	8011c2e <atan+0xce>
 8011d64:	4b49      	ldr	r3, [pc, #292]	; (8011e8c <atan+0x32c>)
 8011d66:	429e      	cmp	r6, r3
 8011d68:	dc1d      	bgt.n	8011da6 <atan+0x246>
 8011d6a:	ee10 0a10 	vmov	r0, s0
 8011d6e:	2200      	movs	r2, #0
 8011d70:	4b47      	ldr	r3, [pc, #284]	; (8011e90 <atan+0x330>)
 8011d72:	4629      	mov	r1, r5
 8011d74:	f7ee faa8 	bl	80002c8 <__aeabi_dsub>
 8011d78:	2200      	movs	r2, #0
 8011d7a:	4606      	mov	r6, r0
 8011d7c:	460f      	mov	r7, r1
 8011d7e:	4b44      	ldr	r3, [pc, #272]	; (8011e90 <atan+0x330>)
 8011d80:	4620      	mov	r0, r4
 8011d82:	4629      	mov	r1, r5
 8011d84:	f7ee fc58 	bl	8000638 <__aeabi_dmul>
 8011d88:	2200      	movs	r2, #0
 8011d8a:	4b3e      	ldr	r3, [pc, #248]	; (8011e84 <atan+0x324>)
 8011d8c:	f7ee fa9e 	bl	80002cc <__adddf3>
 8011d90:	4602      	mov	r2, r0
 8011d92:	460b      	mov	r3, r1
 8011d94:	4630      	mov	r0, r6
 8011d96:	4639      	mov	r1, r7
 8011d98:	f7ee fd78 	bl	800088c <__aeabi_ddiv>
 8011d9c:	f04f 0a02 	mov.w	sl, #2
 8011da0:	4604      	mov	r4, r0
 8011da2:	460d      	mov	r5, r1
 8011da4:	e743      	b.n	8011c2e <atan+0xce>
 8011da6:	462b      	mov	r3, r5
 8011da8:	ee10 2a10 	vmov	r2, s0
 8011dac:	2000      	movs	r0, #0
 8011dae:	4939      	ldr	r1, [pc, #228]	; (8011e94 <atan+0x334>)
 8011db0:	f7ee fd6c 	bl	800088c <__aeabi_ddiv>
 8011db4:	f04f 0a03 	mov.w	sl, #3
 8011db8:	4604      	mov	r4, r0
 8011dba:	460d      	mov	r5, r1
 8011dbc:	e737      	b.n	8011c2e <atan+0xce>
 8011dbe:	4b36      	ldr	r3, [pc, #216]	; (8011e98 <atan+0x338>)
 8011dc0:	4e36      	ldr	r6, [pc, #216]	; (8011e9c <atan+0x33c>)
 8011dc2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8011dc6:	4456      	add	r6, sl
 8011dc8:	449a      	add	sl, r3
 8011dca:	e9da 2300 	ldrd	r2, r3, [sl]
 8011dce:	f7ee fa7b 	bl	80002c8 <__aeabi_dsub>
 8011dd2:	4622      	mov	r2, r4
 8011dd4:	462b      	mov	r3, r5
 8011dd6:	f7ee fa77 	bl	80002c8 <__aeabi_dsub>
 8011dda:	4602      	mov	r2, r0
 8011ddc:	460b      	mov	r3, r1
 8011dde:	e9d6 0100 	ldrd	r0, r1, [r6]
 8011de2:	f7ee fa71 	bl	80002c8 <__aeabi_dsub>
 8011de6:	f1bb 0f00 	cmp.w	fp, #0
 8011dea:	4604      	mov	r4, r0
 8011dec:	460d      	mov	r5, r1
 8011dee:	f6bf aed6 	bge.w	8011b9e <atan+0x3e>
 8011df2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011df6:	461d      	mov	r5, r3
 8011df8:	e6d1      	b.n	8011b9e <atan+0x3e>
 8011dfa:	a51d      	add	r5, pc, #116	; (adr r5, 8011e70 <atan+0x310>)
 8011dfc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011e00:	e6cd      	b.n	8011b9e <atan+0x3e>
 8011e02:	bf00      	nop
 8011e04:	f3af 8000 	nop.w
 8011e08:	54442d18 	.word	0x54442d18
 8011e0c:	3ff921fb 	.word	0x3ff921fb
 8011e10:	8800759c 	.word	0x8800759c
 8011e14:	7e37e43c 	.word	0x7e37e43c
 8011e18:	e322da11 	.word	0xe322da11
 8011e1c:	3f90ad3a 	.word	0x3f90ad3a
 8011e20:	24760deb 	.word	0x24760deb
 8011e24:	3fa97b4b 	.word	0x3fa97b4b
 8011e28:	a0d03d51 	.word	0xa0d03d51
 8011e2c:	3fb10d66 	.word	0x3fb10d66
 8011e30:	c54c206e 	.word	0xc54c206e
 8011e34:	3fb745cd 	.word	0x3fb745cd
 8011e38:	920083ff 	.word	0x920083ff
 8011e3c:	3fc24924 	.word	0x3fc24924
 8011e40:	5555550d 	.word	0x5555550d
 8011e44:	3fd55555 	.word	0x3fd55555
 8011e48:	2c6a6c2f 	.word	0x2c6a6c2f
 8011e4c:	bfa2b444 	.word	0xbfa2b444
 8011e50:	52defd9a 	.word	0x52defd9a
 8011e54:	3fadde2d 	.word	0x3fadde2d
 8011e58:	af749a6d 	.word	0xaf749a6d
 8011e5c:	3fb3b0f2 	.word	0x3fb3b0f2
 8011e60:	fe231671 	.word	0xfe231671
 8011e64:	3fbc71c6 	.word	0x3fbc71c6
 8011e68:	9998ebc4 	.word	0x9998ebc4
 8011e6c:	3fc99999 	.word	0x3fc99999
 8011e70:	54442d18 	.word	0x54442d18
 8011e74:	bff921fb 	.word	0xbff921fb
 8011e78:	440fffff 	.word	0x440fffff
 8011e7c:	7ff00000 	.word	0x7ff00000
 8011e80:	3fdbffff 	.word	0x3fdbffff
 8011e84:	3ff00000 	.word	0x3ff00000
 8011e88:	3ff2ffff 	.word	0x3ff2ffff
 8011e8c:	40037fff 	.word	0x40037fff
 8011e90:	3ff80000 	.word	0x3ff80000
 8011e94:	bff00000 	.word	0xbff00000
 8011e98:	08012bb8 	.word	0x08012bb8
 8011e9c:	08012b98 	.word	0x08012b98

08011ea0 <fabs>:
 8011ea0:	ec51 0b10 	vmov	r0, r1, d0
 8011ea4:	ee10 2a10 	vmov	r2, s0
 8011ea8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011eac:	ec43 2b10 	vmov	d0, r2, r3
 8011eb0:	4770      	bx	lr
 8011eb2:	0000      	movs	r0, r0
 8011eb4:	0000      	movs	r0, r0
	...

08011eb8 <floor>:
 8011eb8:	ec51 0b10 	vmov	r0, r1, d0
 8011ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ec0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011ec4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011ec8:	2e13      	cmp	r6, #19
 8011eca:	460c      	mov	r4, r1
 8011ecc:	ee10 5a10 	vmov	r5, s0
 8011ed0:	4680      	mov	r8, r0
 8011ed2:	dc34      	bgt.n	8011f3e <floor+0x86>
 8011ed4:	2e00      	cmp	r6, #0
 8011ed6:	da16      	bge.n	8011f06 <floor+0x4e>
 8011ed8:	a335      	add	r3, pc, #212	; (adr r3, 8011fb0 <floor+0xf8>)
 8011eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ede:	f7ee f9f5 	bl	80002cc <__adddf3>
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	f7ee fe37 	bl	8000b58 <__aeabi_dcmpgt>
 8011eea:	b148      	cbz	r0, 8011f00 <floor+0x48>
 8011eec:	2c00      	cmp	r4, #0
 8011eee:	da59      	bge.n	8011fa4 <floor+0xec>
 8011ef0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011ef4:	4a30      	ldr	r2, [pc, #192]	; (8011fb8 <floor+0x100>)
 8011ef6:	432b      	orrs	r3, r5
 8011ef8:	2500      	movs	r5, #0
 8011efa:	42ab      	cmp	r3, r5
 8011efc:	bf18      	it	ne
 8011efe:	4614      	movne	r4, r2
 8011f00:	4621      	mov	r1, r4
 8011f02:	4628      	mov	r0, r5
 8011f04:	e025      	b.n	8011f52 <floor+0x9a>
 8011f06:	4f2d      	ldr	r7, [pc, #180]	; (8011fbc <floor+0x104>)
 8011f08:	4137      	asrs	r7, r6
 8011f0a:	ea01 0307 	and.w	r3, r1, r7
 8011f0e:	4303      	orrs	r3, r0
 8011f10:	d01f      	beq.n	8011f52 <floor+0x9a>
 8011f12:	a327      	add	r3, pc, #156	; (adr r3, 8011fb0 <floor+0xf8>)
 8011f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f18:	f7ee f9d8 	bl	80002cc <__adddf3>
 8011f1c:	2200      	movs	r2, #0
 8011f1e:	2300      	movs	r3, #0
 8011f20:	f7ee fe1a 	bl	8000b58 <__aeabi_dcmpgt>
 8011f24:	2800      	cmp	r0, #0
 8011f26:	d0eb      	beq.n	8011f00 <floor+0x48>
 8011f28:	2c00      	cmp	r4, #0
 8011f2a:	bfbe      	ittt	lt
 8011f2c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011f30:	fa43 f606 	asrlt.w	r6, r3, r6
 8011f34:	19a4      	addlt	r4, r4, r6
 8011f36:	ea24 0407 	bic.w	r4, r4, r7
 8011f3a:	2500      	movs	r5, #0
 8011f3c:	e7e0      	b.n	8011f00 <floor+0x48>
 8011f3e:	2e33      	cmp	r6, #51	; 0x33
 8011f40:	dd0b      	ble.n	8011f5a <floor+0xa2>
 8011f42:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011f46:	d104      	bne.n	8011f52 <floor+0x9a>
 8011f48:	ee10 2a10 	vmov	r2, s0
 8011f4c:	460b      	mov	r3, r1
 8011f4e:	f7ee f9bd 	bl	80002cc <__adddf3>
 8011f52:	ec41 0b10 	vmov	d0, r0, r1
 8011f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f5a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f62:	fa23 f707 	lsr.w	r7, r3, r7
 8011f66:	4207      	tst	r7, r0
 8011f68:	d0f3      	beq.n	8011f52 <floor+0x9a>
 8011f6a:	a311      	add	r3, pc, #68	; (adr r3, 8011fb0 <floor+0xf8>)
 8011f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f70:	f7ee f9ac 	bl	80002cc <__adddf3>
 8011f74:	2200      	movs	r2, #0
 8011f76:	2300      	movs	r3, #0
 8011f78:	f7ee fdee 	bl	8000b58 <__aeabi_dcmpgt>
 8011f7c:	2800      	cmp	r0, #0
 8011f7e:	d0bf      	beq.n	8011f00 <floor+0x48>
 8011f80:	2c00      	cmp	r4, #0
 8011f82:	da02      	bge.n	8011f8a <floor+0xd2>
 8011f84:	2e14      	cmp	r6, #20
 8011f86:	d103      	bne.n	8011f90 <floor+0xd8>
 8011f88:	3401      	adds	r4, #1
 8011f8a:	ea25 0507 	bic.w	r5, r5, r7
 8011f8e:	e7b7      	b.n	8011f00 <floor+0x48>
 8011f90:	2301      	movs	r3, #1
 8011f92:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011f96:	fa03 f606 	lsl.w	r6, r3, r6
 8011f9a:	4435      	add	r5, r6
 8011f9c:	4545      	cmp	r5, r8
 8011f9e:	bf38      	it	cc
 8011fa0:	18e4      	addcc	r4, r4, r3
 8011fa2:	e7f2      	b.n	8011f8a <floor+0xd2>
 8011fa4:	2500      	movs	r5, #0
 8011fa6:	462c      	mov	r4, r5
 8011fa8:	e7aa      	b.n	8011f00 <floor+0x48>
 8011faa:	bf00      	nop
 8011fac:	f3af 8000 	nop.w
 8011fb0:	8800759c 	.word	0x8800759c
 8011fb4:	7e37e43c 	.word	0x7e37e43c
 8011fb8:	bff00000 	.word	0xbff00000
 8011fbc:	000fffff 	.word	0x000fffff

08011fc0 <matherr>:
 8011fc0:	2000      	movs	r0, #0
 8011fc2:	4770      	bx	lr
 8011fc4:	0000      	movs	r0, r0
	...

08011fc8 <nan>:
 8011fc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011fd0 <nan+0x8>
 8011fcc:	4770      	bx	lr
 8011fce:	bf00      	nop
 8011fd0:	00000000 	.word	0x00000000
 8011fd4:	7ff80000 	.word	0x7ff80000

08011fd8 <scalbn>:
 8011fd8:	b570      	push	{r4, r5, r6, lr}
 8011fda:	ec55 4b10 	vmov	r4, r5, d0
 8011fde:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011fe2:	4606      	mov	r6, r0
 8011fe4:	462b      	mov	r3, r5
 8011fe6:	b9aa      	cbnz	r2, 8012014 <scalbn+0x3c>
 8011fe8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011fec:	4323      	orrs	r3, r4
 8011fee:	d03b      	beq.n	8012068 <scalbn+0x90>
 8011ff0:	4b31      	ldr	r3, [pc, #196]	; (80120b8 <scalbn+0xe0>)
 8011ff2:	4629      	mov	r1, r5
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	ee10 0a10 	vmov	r0, s0
 8011ffa:	f7ee fb1d 	bl	8000638 <__aeabi_dmul>
 8011ffe:	4b2f      	ldr	r3, [pc, #188]	; (80120bc <scalbn+0xe4>)
 8012000:	429e      	cmp	r6, r3
 8012002:	4604      	mov	r4, r0
 8012004:	460d      	mov	r5, r1
 8012006:	da12      	bge.n	801202e <scalbn+0x56>
 8012008:	a327      	add	r3, pc, #156	; (adr r3, 80120a8 <scalbn+0xd0>)
 801200a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801200e:	f7ee fb13 	bl	8000638 <__aeabi_dmul>
 8012012:	e009      	b.n	8012028 <scalbn+0x50>
 8012014:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012018:	428a      	cmp	r2, r1
 801201a:	d10c      	bne.n	8012036 <scalbn+0x5e>
 801201c:	ee10 2a10 	vmov	r2, s0
 8012020:	4620      	mov	r0, r4
 8012022:	4629      	mov	r1, r5
 8012024:	f7ee f952 	bl	80002cc <__adddf3>
 8012028:	4604      	mov	r4, r0
 801202a:	460d      	mov	r5, r1
 801202c:	e01c      	b.n	8012068 <scalbn+0x90>
 801202e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012032:	460b      	mov	r3, r1
 8012034:	3a36      	subs	r2, #54	; 0x36
 8012036:	4432      	add	r2, r6
 8012038:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801203c:	428a      	cmp	r2, r1
 801203e:	dd0b      	ble.n	8012058 <scalbn+0x80>
 8012040:	ec45 4b11 	vmov	d1, r4, r5
 8012044:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80120b0 <scalbn+0xd8>
 8012048:	f7fc fb24 	bl	800e694 <copysign>
 801204c:	a318      	add	r3, pc, #96	; (adr r3, 80120b0 <scalbn+0xd8>)
 801204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012052:	ec51 0b10 	vmov	r0, r1, d0
 8012056:	e7da      	b.n	801200e <scalbn+0x36>
 8012058:	2a00      	cmp	r2, #0
 801205a:	dd08      	ble.n	801206e <scalbn+0x96>
 801205c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012060:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012064:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012068:	ec45 4b10 	vmov	d0, r4, r5
 801206c:	bd70      	pop	{r4, r5, r6, pc}
 801206e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012072:	da0d      	bge.n	8012090 <scalbn+0xb8>
 8012074:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012078:	429e      	cmp	r6, r3
 801207a:	ec45 4b11 	vmov	d1, r4, r5
 801207e:	dce1      	bgt.n	8012044 <scalbn+0x6c>
 8012080:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80120a8 <scalbn+0xd0>
 8012084:	f7fc fb06 	bl	800e694 <copysign>
 8012088:	a307      	add	r3, pc, #28	; (adr r3, 80120a8 <scalbn+0xd0>)
 801208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208e:	e7e0      	b.n	8012052 <scalbn+0x7a>
 8012090:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012094:	3236      	adds	r2, #54	; 0x36
 8012096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801209a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801209e:	4620      	mov	r0, r4
 80120a0:	4629      	mov	r1, r5
 80120a2:	2200      	movs	r2, #0
 80120a4:	4b06      	ldr	r3, [pc, #24]	; (80120c0 <scalbn+0xe8>)
 80120a6:	e7b2      	b.n	801200e <scalbn+0x36>
 80120a8:	c2f8f359 	.word	0xc2f8f359
 80120ac:	01a56e1f 	.word	0x01a56e1f
 80120b0:	8800759c 	.word	0x8800759c
 80120b4:	7e37e43c 	.word	0x7e37e43c
 80120b8:	43500000 	.word	0x43500000
 80120bc:	ffff3cb0 	.word	0xffff3cb0
 80120c0:	3c900000 	.word	0x3c900000

080120c4 <_init>:
 80120c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120c6:	bf00      	nop
 80120c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120ca:	bc08      	pop	{r3}
 80120cc:	469e      	mov	lr, r3
 80120ce:	4770      	bx	lr

080120d0 <_fini>:
 80120d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120d2:	bf00      	nop
 80120d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80120d6:	bc08      	pop	{r3}
 80120d8:	469e      	mov	lr, r3
 80120da:	4770      	bx	lr
