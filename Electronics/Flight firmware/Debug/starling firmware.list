
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016d6c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c20  08016f40  08016f40  00026f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017b60  08017b60  00030604  2**0
                  CONTENTS
  4 .ARM          00000008  08017b60  08017b60  00027b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017b68  08017b68  00030604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017b68  08017b68  00027b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017b6c  08017b6c  00027b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000604  20000000  08017b70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005fa8  20000604  08018174  00030604  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200065ac  08018174  000365ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030604  2**0
                  CONTENTS, READONLY
 12 .debug_info   00030a63  00000000  00000000  00030634  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006623  00000000  00000000  00061097  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002218  00000000  00000000  000676c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f48  00000000  00000000  000698d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002ad4f  00000000  00000000  0006b820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020ced  00000000  00000000  0009656f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e6989  00000000  00000000  000b725c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019dbe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a34c  00000000  00000000  0019dc60  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000604 	.word	0x20000604
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08016f24 	.word	0x08016f24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000608 	.word	0x20000608
 800020c:	08016f24 	.word	0x08016f24

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f005 f87a 	bl	80060e8 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f008 fd6b 	bl	8009ae2 <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f008 ff00 	bl	8009e26 <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f005 f856 	bl	80060e8 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f005 f837 	bl	80060e8 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f008 faee 	bl	8009668 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f008 fec0 	bl	8009e26 <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f005 f816 	bl	80060e8 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f004 f974 	bl	80053f8 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f004 f96c 	bl	80053f8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f004 f964 	bl	80053f8 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	665a      	str	r2, [r3, #100]	; 0x64

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	669a      	str	r2, [r3, #104]	; 0x68



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f004 f956 	bl	80053f8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f004 f94e 	bl	80053f8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f004 f946 	bl	80053f8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f004 f93e 	bl	80053f8 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f004 f936 	bl	80053f8 <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f004 f933 	bl	80053f8 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f004 ff81 	bl	80060e8 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f008 fc72 	bl	8009ae2 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f008 fe06 	bl	8009e26 <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f004 ff5c 	bl	80060e8 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	835a      	strh	r2, [r3, #26]
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	839a      	strh	r2, [r3, #28]
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	83da      	strh	r2, [r3, #30]

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	659a      	str	r2, [r3, #88]	; 0x58
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	661a      	str	r2, [r3, #96]	; 0x60

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a08 	vstr	s15, [r3, #32]
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af04      	add	r7, sp, #16
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    uint8_t txBuf[2] = {0x00, 0x00};
 8001508:	2300      	movs	r3, #0
 800150a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800150e:	2300      	movs	r3, #0
 8001510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	b299      	uxth	r1, r3
 800151e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	220d      	movs	r2, #13
 8001532:	f005 f825 	bl	8006580 <HAL_I2C_Mem_Read>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001548:	4413      	add	r3, r2
 800154a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 800154e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001556:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800155a:	2b10      	cmp	r3, #16
 800155c:	d001      	beq.n	8001562 <SPL06_Init+0x8e>

        return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e139      	b.n	80017d6 <SPL06_Init+0x302>

    }
    HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f003 ff48 	bl	80053f8 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	b299      	uxth	r1, r3
 8001578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2313      	movs	r3, #19
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	2210      	movs	r2, #16
 800158c:	f004 fff8 	bl	8006580 <HAL_I2C_Mem_Read>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf0c      	ite	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	2300      	movne	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015a2:	4413      	add	r3, r2
 80015a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7c7b      	ldrb	r3, [r7, #17]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <SPL06_Init+0x10c>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015d4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80015d8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80015dc:	b21b      	sxth	r3, r3
 80015de:	e002      	b.n	80015e6 <SPL06_Init+0x112>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 80015ea:	7c7b      	ldrb	r3, [r7, #17]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7cbb      	ldrb	r3, [r7, #18]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001608:	b29b      	uxth	r3, r3
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <SPL06_Init+0x150>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001618:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800161c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001620:	b21b      	sxth	r3, r3
 8001622:	e002      	b.n	800162a <SPL06_Init+0x156>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	031a      	lsls	r2, r3, #12
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4313      	orrs	r3, r2
 8001638:	7d7a      	ldrb	r2, [r7, #21]
 800163a:	0912      	lsrs	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4313      	orrs	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <SPL06_Init+0x18c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800165a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800165e:	e001      	b.n	8001664 <SPL06_Init+0x190>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 8001668:	7d7b      	ldrb	r3, [r7, #21]
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001670:	7dbb      	ldrb	r3, [r7, #22]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4313      	orrs	r3, r2
 8001676:	7dfa      	ldrb	r2, [r7, #23]
 8001678:	4313      	orrs	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <SPL06_Init+0x1c6>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001694:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001698:	e001      	b.n	800169e <SPL06_Init+0x1ca>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80016a2:	7e3b      	ldrb	r3, [r7, #24]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	7e7b      	ldrb	r3, [r7, #25]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80016b4:	7ebb      	ldrb	r3, [r7, #26]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7efb      	ldrb	r3, [r7, #27]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80016c6:	7f3b      	ldrb	r3, [r7, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7f7b      	ldrb	r3, [r7, #29]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80016d8:	7fbb      	ldrb	r3, [r7, #30]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001700:	2019      	movs	r0, #25
 8001702:	f003 fe79 	bl	80053f8 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0x33;
 8001706:	2333      	movs	r3, #51	; 0x33
 8001708:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	b299      	uxth	r1, r3
 8001716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2301      	movs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2206      	movs	r2, #6
 800172a:	f004 fe2f 	bl	800638c <HAL_I2C_Mem_Write>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001740:	4413      	add	r3, r2
 8001742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f003 fe56 	bl	80053f8 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 800174c:	23b3      	movs	r3, #179	; 0xb3
 800174e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	b299      	uxth	r1, r3
 800175c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2207      	movs	r2, #7
 8001770:	f004 fe0c 	bl	800638c <HAL_I2C_Mem_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001786:	4413      	add	r3, r2
 8001788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f003 fe33 	bl	80053f8 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2301      	movs	r3, #1
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2208      	movs	r2, #8
 80017b6:	f004 fde9 	bl	800638c <HAL_I2C_Mem_Write>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017cc:	4413      	add	r3, r2
 80017ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80017d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3740      	adds	r7, #64	; 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <SPL06_Read>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (POLLING)
 *
 */
void SPL06_Read(SPL06 *bar) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08e      	sub	sp, #56	; 0x38
 80017e4:	af04      	add	r7, sp, #16
 80017e6:	6078      	str	r0, [r7, #4]

    uint8_t txBuf[7];
    txBuf[0] = 0x00 | 0x80;
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	743b      	strb	r3, [r7, #16]

    uint8_t rxBuf[6];

    //HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x80, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500);
    HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x00, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, 500);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	791b      	ldrb	r3, [r3, #4]
 80017f4:	b299      	uxth	r1, r3
 80017f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	2306      	movs	r3, #6
 80017fe:	9301      	str	r3, [sp, #4]
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	2301      	movs	r3, #1
 8001808:	2200      	movs	r2, #0
 800180a:	f004 feb9 	bl	8006580 <HAL_I2C_Mem_Read>

    /* Convert raw to uncalibrated pressure and temperature */
    int32_t pres = ((uint32_t) rxBuf[0] << 16) | ((uint32_t) rxBuf[1] << 8) | ((uint32_t) rxBuf[2]);
 800180e:	7a3b      	ldrb	r3, [r7, #8]
 8001810:	041a      	lsls	r2, r3, #16
 8001812:	7a7b      	ldrb	r3, [r7, #9]
 8001814:	021b      	lsls	r3, r3, #8
 8001816:	4313      	orrs	r3, r2
 8001818:	7aba      	ldrb	r2, [r7, #10]
 800181a:	4313      	orrs	r3, r2
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
            pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <SPL06_Read+0x50>
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800182e:	e000      	b.n	8001832 <SPL06_Read+0x52>
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t temp = ((uint32_t) rxBuf[3] << 16) | ((uint32_t) rxBuf[4] << 8) | ((uint32_t) rxBuf[5]);
 8001834:	7afb      	ldrb	r3, [r7, #11]
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	7b3b      	ldrb	r3, [r7, #12]
 800183a:	021b      	lsls	r3, r3, #8
 800183c:	4313      	orrs	r3, r2
 800183e:	7b7a      	ldrb	r2, [r7, #13]
 8001840:	4313      	orrs	r3, r2
 8001842:	623b      	str	r3, [r7, #32]
            temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 8001844:	6a3b      	ldr	r3, [r7, #32]
 8001846:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <SPL06_Read+0x76>
 800184e:	6a3b      	ldr	r3, [r7, #32]
 8001850:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001854:	e000      	b.n	8001858 <SPL06_Read+0x78>
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	623b      	str	r3, [r7, #32]

    /* Apply calibration */
    float tempRaw = (float) temp / 7864320.0f;
 800185a:	6a3b      	ldr	r3, [r7, #32]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	eddf 6a42 	vldr	s13, [pc, #264]	; 8001970 <SPL06_Read+0x190>
 8001868:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800186c:	edc7 7a07 	vstr	s15, [r7, #28]
    bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001876:	ee07 3a90 	vmov	s15, r3
 800187a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800187e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001882:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800188c:	ee07 3a90 	vmov	s15, r3
 8001890:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001894:	edd7 7a07 	vldr	s15, [r7, #28]
 8001898:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800189c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    float presRaw   = (float) pres / 7864320.0f;
 80018a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001970 <SPL06_Read+0x190>
 80018b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018b8:	edc7 7a06 	vstr	s15, [r7, #24]
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	ee07 3a90 	vmov	s15, r3
 80018c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	699b      	ldr	r3, [r3, #24]
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018da:	ee07 3a90 	vmov	s15, r3
 80018de:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80018e8:	ee07 3a90 	vmov	s15, r3
 80018ec:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80018f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f4:	ee65 7aa7 	vmul.f32	s15, s11, s15
 80018f8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80018fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001900:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001904:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001908:	edd7 7a06 	vldr	s15, [r7, #24]
 800190c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001910:	ee37 7a27 	vadd.f32	s14, s14, s15
                    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800191a:	ee07 3a90 	vmov	s15, r3
 800191e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001936:	ee07 3a90 	vmov	s15, r3
 800193a:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800193e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001942:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001946:	ee36 6a27 	vadd.f32	s12, s12, s15
 800194a:	edd7 7a06 	vldr	s15, [r7, #24]
 800194e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001952:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001956:	edd7 7a07 	vldr	s15, [r7, #28]
 800195a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

}
 8001968:	bf00      	nop
 800196a:	3728      	adds	r7, #40	; 0x28
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	4af00000 	.word	0x4af00000

08001974 <servo_init>:
#include "servo.h"

void servo_init(Servo *servo, TIM_HandleTypeDef *tim, volatile uint32_t *timerval) {
 8001974:	b480      	push	{r7}
 8001976:	b085      	sub	sp, #20
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
    servo->timer = tim;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	68ba      	ldr	r2, [r7, #8]
 8001984:	605a      	str	r2, [r3, #4]
    servo->timerval = timerval;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	609a      	str	r2, [r3, #8]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <servo_writeangle>:


void servo_writeangle(Servo *servo, uint8_t angle) {
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
    // value between 0 and 180
    uint32_t newtimerval = 1000 + (angle * 1000 / 180);
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <servo_writeangle+0x40>)
 80019b0:	fb82 1203 	smull	r1, r2, r2, r3
 80019b4:	441a      	add	r2, r3
 80019b6:	11d2      	asrs	r2, r2, #7
 80019b8:	17db      	asrs	r3, r3, #31
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80019c0:	60fb      	str	r3, [r7, #12]
    *servo->timerval = newtimerval;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	601a      	str	r2, [r3, #0]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	b60b60b7 	.word	0xb60b60b7

080019dc <servo_disable>:

void servo_writemicros(Servo *servo, uint32_t pulse) {
    *servo->timerval = pulse;
}

void servo_disable(Servo *servo) {
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    *servo->timerval = 0;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	4613      	mov	r3, r2
 8001a04:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	6858      	ldr	r0, [r3, #4]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	891b      	ldrh	r3, [r3, #8]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	f004 fb69 	bl	80060e8 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	f007 fe20 	bl	8009668 <HAL_SPI_Transmit>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	6858      	ldr	r0, [r3, #4]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	891b      	ldrh	r3, [r3, #8]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	f004 fb53 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8001a42:	bf00      	nop
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b086      	sub	sp, #24
 8001a4e:	af02      	add	r7, sp, #8
 8001a50:	60f8      	str	r0, [r7, #12]
 8001a52:	60b9      	str	r1, [r7, #8]
 8001a54:	607a      	str	r2, [r7, #4]
 8001a56:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6858      	ldr	r0, [r3, #4]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	891b      	ldrh	r3, [r3, #8]
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	f004 fb40 	bl	80060e8 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4613      	mov	r3, r2
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	68b9      	ldr	r1, [r7, #8]
 8001a7c:	f008 f831 	bl	8009ae2 <HAL_SPI_TransmitReceive>
 8001a80:	4603      	mov	r3, r0
 8001a82:	461a      	mov	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6858      	ldr	r0, [r3, #4]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	891b      	ldrh	r3, [r3, #8]
 8001a92:	2201      	movs	r2, #1
 8001a94:	4619      	mov	r1, r3
 8001a96:	f004 fb27 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af02      	add	r7, sp, #8
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	68ba      	ldr	r2, [r7, #8]
 8001ab6:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2140      	movs	r1, #64	; 0x40
 8001ac8:	4825      	ldr	r0, [pc, #148]	; (8001b60 <sxInit+0xbc>)
 8001aca:	f004 fb0d 	bl	80060e8 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f003 fc92 	bl	80053f8 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	2140      	movs	r1, #64	; 0x40
 8001ad8:	4821      	ldr	r0, [pc, #132]	; (8001b60 <sxInit+0xbc>)
 8001ada:	f004 fb05 	bl	80060e8 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001ade:	2002      	movs	r0, #2
 8001ae0:	f003 fc8a 	bl	80053f8 <HAL_Delay>

    SetStandbyRC(radio);
 8001ae4:	68f8      	ldr	r0, [r7, #12]
 8001ae6:	f000 f850 	bl	8001b8a <SetStandbyRC>
    HAL_Delay(3);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f003 fc84 	bl	80053f8 <HAL_Delay>
    setPacketLora(radio);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f000 f875 	bl	8001be0 <setPacketLora>
    HAL_Delay(2);
 8001af6:	2002      	movs	r0, #2
 8001af8:	f003 fc7e 	bl	80053f8 <HAL_Delay>
    SetRfFrequency2(radio);
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 f859 	bl	8001bb4 <SetRfFrequency2>
    HAL_Delay(2);
 8001b02:	2002      	movs	r0, #2
 8001b04:	f003 fc78 	bl	80053f8 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f897 	bl	8001c40 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001b12:	2001      	movs	r0, #1
 8001b14:	f003 fc70 	bl	80053f8 <HAL_Delay>
    SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5
 8001b18:	2301      	movs	r3, #1
 8001b1a:	220a      	movs	r2, #10
 8001b1c:	2190      	movs	r1, #144	; 0x90
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f8a8 	bl	8001c74 <SetModulationParams>
    HAL_Delay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f003 fc67 	bl	80053f8 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001b2a:	2232      	movs	r2, #50	; 0x32
 8001b2c:	f640 1125 	movw	r1, #2341	; 0x925
 8001b30:	68f8      	ldr	r0, [r7, #12]
 8001b32:	f000 fa1f 	bl	8001f74 <WriteRegisterByte>

    HAL_Delay(1);
 8001b36:	2001      	movs	r0, #1
 8001b38:	f003 fc5e 	bl	80053f8 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 34, 0x20, 0x40); // 12 symbol preamble, implicit header, 34 byte payload, CRC enabled, Normal IQ
 8001b3c:	2340      	movs	r3, #64	; 0x40
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2320      	movs	r3, #32
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2322      	movs	r3, #34	; 0x22
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	210c      	movs	r1, #12
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f8b3 	bl	8001cb6 <SetPacketParamsLora>
    HAL_Delay(1);
 8001b50:	2001      	movs	r0, #1
 8001b52:	f003 fc51 	bl	80053f8 <HAL_Delay>
}
 8001b56:	bf00      	nop
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020400 	.word	0x40020400

08001b64 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	4613      	mov	r3, r2
 8001b70:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	88fa      	ldrh	r2, [r7, #6]
 8001b7c:	821a      	strh	r2, [r3, #16]
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b084      	sub	sp, #16
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	723b      	strb	r3, [r7, #8]
 8001b96:	2300      	movs	r3, #0
 8001b98:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001b9a:	f107 020c 	add.w	r2, r7, #12
 8001b9e:	f107 0108 	add.w	r1, r7, #8
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	f7ff ff50 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
	...

08001bb4 <SetRfFrequency2>:
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
}

void SetRfFrequency2(sx1280_custom *radio) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001bbc:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <SetRfFrequency2+0x28>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001bc2:	f107 020c 	add.w	r2, r7, #12
 8001bc6:	f107 0108 	add.w	r1, r7, #8
 8001bca:	2304      	movs	r3, #4
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff3c 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001bd2:	bf00      	nop
 8001bd4:	3710      	adds	r7, #16
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08016f44 	.word	0x08016f44

08001be0 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001be8:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <setPacketLora+0x28>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001bee:	f107 020c 	add.w	r2, r7, #12
 8001bf2:	f107 0108 	add.w	r1, r7, #8
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff26 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	08016f48 	.word	0x08016f48

08001c0c <SetTxParams>:

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001c1c:	238e      	movs	r3, #142	; 0x8e
 8001c1e:	723b      	strb	r3, [r7, #8]
 8001c20:	78fb      	ldrb	r3, [r7, #3]
 8001c22:	727b      	strb	r3, [r7, #9]
 8001c24:	78bb      	ldrb	r3, [r7, #2]
 8001c26:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001c28:	f107 020c 	add.w	r2, r7, #12
 8001c2c:	f107 0108 	add.w	r1, r7, #8
 8001c30:	2303      	movs	r3, #3
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff09 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001c38:	bf00      	nop
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	70fb      	strb	r3, [r7, #3]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001c50:	238f      	movs	r3, #143	; 0x8f
 8001c52:	723b      	strb	r3, [r7, #8]
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	727b      	strb	r3, [r7, #9]
 8001c58:	78bb      	ldrb	r3, [r7, #2]
 8001c5a:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c5c:	f107 020c 	add.w	r2, r7, #12
 8001c60:	f107 0108 	add.w	r1, r7, #8
 8001c64:	2303      	movs	r3, #3
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff feef 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001c6c:	bf00      	nop
 8001c6e:	3710      	adds	r7, #16
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	70fb      	strb	r3, [r7, #3]
 8001c86:	460b      	mov	r3, r1
 8001c88:	70bb      	strb	r3, [r7, #2]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001c8e:	238b      	movs	r3, #139	; 0x8b
 8001c90:	723b      	strb	r3, [r7, #8]
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	727b      	strb	r3, [r7, #9]
 8001c96:	78bb      	ldrb	r3, [r7, #2]
 8001c98:	72bb      	strb	r3, [r7, #10]
 8001c9a:	787b      	ldrb	r3, [r7, #1]
 8001c9c:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	f107 0108 	add.w	r1, r7, #8
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fece 	bl	8001a4a <sxSpiTransmitReceive>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b084      	sub	sp, #16
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
 8001cbe:	4608      	mov	r0, r1
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	70fb      	strb	r3, [r7, #3]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	70bb      	strb	r3, [r7, #2]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001cd0:	238c      	movs	r3, #140	; 0x8c
 8001cd2:	723b      	strb	r3, [r7, #8]
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	727b      	strb	r3, [r7, #9]
 8001cd8:	78bb      	ldrb	r3, [r7, #2]
 8001cda:	72bb      	strb	r3, [r7, #10]
 8001cdc:	787b      	ldrb	r3, [r7, #1]
 8001cde:	72fb      	strb	r3, [r7, #11]
 8001ce0:	7e3b      	ldrb	r3, [r7, #24]
 8001ce2:	733b      	strb	r3, [r7, #12]
 8001ce4:	7f3b      	ldrb	r3, [r7, #28]
 8001ce6:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	2206      	movs	r2, #6
 8001cee:	4619      	mov	r1, r3
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff fe81 	bl	80019f8 <sxSpiTransmit>
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	607a      	str	r2, [r7, #4]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	72fb      	strb	r3, [r7, #11]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8001d12:	231a      	movs	r3, #26
 8001d14:	753b      	strb	r3, [r7, #20]
 8001d16:	7afb      	ldrb	r3, [r7, #11]
 8001d18:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6858      	ldr	r0, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	891b      	ldrh	r3, [r3, #8]
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	f004 f9df 	bl	80060e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6818      	ldr	r0, [r3, #0]
 8001d2e:	f107 0114 	add.w	r1, r7, #20
 8001d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d36:	2202      	movs	r2, #2
 8001d38:	f007 fc96 	bl	8009668 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	7abb      	ldrb	r3, [r7, #10]
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	f007 fc8d 	bl	8009668 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6858      	ldr	r0, [r3, #4]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	891b      	ldrh	r3, [r3, #8]
 8001d56:	2201      	movs	r2, #1
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f004 f9c5 	bl	80060e8 <HAL_GPIO_WritePin>

}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	72fb      	strb	r3, [r7, #11]
 8001d74:	4613      	mov	r3, r2
 8001d76:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001d78:	231b      	movs	r3, #27
 8001d7a:	753b      	strb	r3, [r7, #20]
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	757b      	strb	r3, [r7, #21]
 8001d80:	2300      	movs	r3, #0
 8001d82:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6858      	ldr	r0, [r3, #4]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	891b      	ldrh	r3, [r3, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	4619      	mov	r1, r3
 8001d90:	f004 f9aa 	bl	80060e8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6818      	ldr	r0, [r3, #0]
 8001d98:	f107 0114 	add.w	r1, r7, #20
 8001d9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001da0:	2203      	movs	r2, #3
 8001da2:	f007 fc61 	bl	8009668 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	7abb      	ldrb	r3, [r7, #10]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	f007 fd8c 	bl	80098d0 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6858      	ldr	r0, [r3, #4]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	891b      	ldrh	r3, [r3, #8]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f004 f990 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8001dc8:	bf00      	nop
 8001dca:	3718      	adds	r7, #24
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	4608      	mov	r0, r1
 8001dda:	4611      	mov	r1, r2
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4603      	mov	r3, r0
 8001de0:	817b      	strh	r3, [r7, #10]
 8001de2:	460b      	mov	r3, r1
 8001de4:	813b      	strh	r3, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001dea:	238d      	movs	r3, #141	; 0x8d
 8001dec:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001dee:	897b      	ldrh	r3, [r7, #10]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001dfe:	893b      	ldrh	r3, [r7, #8]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001e08:	893b      	ldrh	r3, [r7, #8]
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	0a1b      	lsrs	r3, r3, #8
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001e1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e20:	0a1b      	lsrs	r3, r3, #8
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001e28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2209      	movs	r2, #9
 8001e34:	4619      	mov	r1, r3
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fdde 	bl	80019f8 <sxSpiTransmit>
}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8001e50:	2397      	movs	r3, #151	; 0x97
 8001e52:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	2203      	movs	r2, #3
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff fdc3 	bl	80019f8 <sxSpiTransmit>
}
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b084      	sub	sp, #16
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
 8001e82:	460b      	mov	r3, r1
 8001e84:	70fb      	strb	r3, [r7, #3]
 8001e86:	4613      	mov	r3, r2
 8001e88:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 8001e8a:	2383      	movs	r3, #131	; 0x83
 8001e8c:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001e92:	883b      	ldrh	r3, [r7, #0]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001e9c:	883b      	ldrh	r3, [r7, #0]
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001ea2:	f107 030c 	add.w	r3, r7, #12
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff fda4 	bl	80019f8 <sxSpiTransmit>
}
 8001eb0:	bf00      	nop
 8001eb2:	3710      	adds	r7, #16
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}

08001eb8 <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 8001ec8:	2382      	movs	r3, #130	; 0x82
 8001eca:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 8001ed0:	883b      	ldrh	r3, [r7, #0]
 8001ed2:	0a1b      	lsrs	r3, r3, #8
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 8001eda:	883b      	ldrh	r3, [r7, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2204      	movs	r2, #4
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fd85 	bl	80019f8 <sxSpiTransmit>
}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8001efe:	231d      	movs	r3, #29
 8001f00:	723b      	strb	r3, [r7, #8]
 8001f02:	2300      	movs	r3, #0
 8001f04:	727b      	strb	r3, [r7, #9]
 8001f06:	2300      	movs	r3, #0
 8001f08:	72bb      	strb	r3, [r7, #10]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001f0e:	f107 020c 	add.w	r2, r7, #12
 8001f12:	f107 0108 	add.w	r1, r7, #8
 8001f16:	2304      	movs	r3, #4
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fd96 	bl	8001a4a <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8001f1e:	7bba      	ldrb	r2, [r7, #14]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	b25a      	sxtb	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f3e:	eeb1 7a67 	vneg.f32	s14, s15
 8001f42:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    radio->snr = ((float) radio->rawSnr)/4;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8001f56:	ee07 3a90 	vmov	s15, r3
 8001f5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f5e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001f62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <WriteRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 8001f84:	2318      	movs	r3, #24
 8001f86:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 8001f88:	887b      	ldrh	r3, [r7, #2]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 8001f98:	787b      	ldrb	r3, [r7, #1]
 8001f9a:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fd27 	bl	80019f8 <sxSpiTransmit>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	0000      	movs	r0, r0
 8001fb4:	0000      	movs	r0, r0
	...

08001fb8 <encode_TLM>:
#include "main.h"
#include "telemetry.h"
#include "math.h"


void encode_TLM(TLM_decoded *dec, TLM_encoded *enc) {
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b25b      	sxtb	r3, r3
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	b25a      	sxtb	r2, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	785b      	ldrb	r3, [r3, #1]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8001fda:	b25b      	sxtb	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	b25a      	sxtb	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	789b      	ldrb	r3, [r3, #2]
 8001fe4:	019b      	lsls	r3, r3, #6
 8001fe6:	b25b      	sxtb	r3, r3
 8001fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fec:	b25b      	sxtb	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b25a      	sxtb	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	01db      	lsls	r3, r3, #7
 8001ff8:	b25b      	sxtb	r3, r3
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	b25b      	sxtb	r3, r3
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	791b      	ldrb	r3, [r3, #4]
 8002008:	b25b      	sxtb	r3, r3
 800200a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200e:	b25a      	sxtb	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	795b      	ldrb	r3, [r3, #5]
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	b25b      	sxtb	r3, r3
 8002018:	4313      	orrs	r3, r2
 800201a:	b25b      	sxtb	r3, r3
 800201c:	b2da      	uxtb	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	b2da      	uxtb	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	b2da      	uxtb	r2, r3
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	711a      	strb	r2, [r3, #4]

    enc->vbat = (uint8_t) round(dec->vbat * 20); // 0.05 V/lsb
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	edd3 7a03 	vldr	s15, [r3, #12]
 800204a:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800204e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002052:	ee17 0a90 	vmov	r0, s15
 8002056:	f7fe fa97 	bl	8000588 <__aeabi_f2d>
 800205a:	4603      	mov	r3, r0
 800205c:	460c      	mov	r4, r1
 800205e:	ec44 3b10 	vmov	d0, r3, r4
 8002062:	f012 fa01 	bl	8014468 <round>
 8002066:	ec54 3b10 	vmov	r3, r4, d0
 800206a:	4618      	mov	r0, r3
 800206c:	4621      	mov	r1, r4
 800206e:	f7fe fdbb 	bl	8000be8 <__aeabi_d2uiz>
 8002072:	4603      	mov	r3, r0
 8002074:	b2da      	uxtb	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	715a      	strb	r2, [r3, #5]

    enc->orientation_quat[0] = (int8_t) round(dec->orientation_quat[0]*127);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002080:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8002390 <encode_TLM+0x3d8>
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	ee17 0a90 	vmov	r0, s15
 800208c:	f7fe fa7c 	bl	8000588 <__aeabi_f2d>
 8002090:	4603      	mov	r3, r0
 8002092:	460c      	mov	r4, r1
 8002094:	ec44 3b10 	vmov	d0, r3, r4
 8002098:	f012 f9e6 	bl	8014468 <round>
 800209c:	ec54 3b10 	vmov	r3, r4, d0
 80020a0:	4618      	mov	r0, r3
 80020a2:	4621      	mov	r1, r4
 80020a4:	f7fe fd78 	bl	8000b98 <__aeabi_d2iz>
 80020a8:	4603      	mov	r3, r0
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	719a      	strb	r2, [r3, #6]
    enc->orientation_quat[1] = (int8_t) round(dec->orientation_quat[1]*127);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	edd3 7a05 	vldr	s15, [r3, #20]
 80020b6:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8002390 <encode_TLM+0x3d8>
 80020ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020be:	ee17 0a90 	vmov	r0, s15
 80020c2:	f7fe fa61 	bl	8000588 <__aeabi_f2d>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	ec44 3b10 	vmov	d0, r3, r4
 80020ce:	f012 f9cb 	bl	8014468 <round>
 80020d2:	ec54 3b10 	vmov	r3, r4, d0
 80020d6:	4618      	mov	r0, r3
 80020d8:	4621      	mov	r1, r4
 80020da:	f7fe fd5d 	bl	8000b98 <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	b25a      	sxtb	r2, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	71da      	strb	r2, [r3, #7]
    enc->orientation_quat[2] = (int8_t) round(dec->orientation_quat[2]*127);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80020ec:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8002390 <encode_TLM+0x3d8>
 80020f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f4:	ee17 0a90 	vmov	r0, s15
 80020f8:	f7fe fa46 	bl	8000588 <__aeabi_f2d>
 80020fc:	4603      	mov	r3, r0
 80020fe:	460c      	mov	r4, r1
 8002100:	ec44 3b10 	vmov	d0, r3, r4
 8002104:	f012 f9b0 	bl	8014468 <round>
 8002108:	ec54 3b10 	vmov	r3, r4, d0
 800210c:	4618      	mov	r0, r3
 800210e:	4621      	mov	r1, r4
 8002110:	f7fe fd42 	bl	8000b98 <__aeabi_d2iz>
 8002114:	4603      	mov	r3, r0
 8002116:	b25a      	sxtb	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	721a      	strb	r2, [r3, #8]
    enc->orientation_quat[3] = (int8_t) round(dec->orientation_quat[3]*127);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	edd3 7a07 	vldr	s15, [r3, #28]
 8002122:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002390 <encode_TLM+0x3d8>
 8002126:	ee67 7a87 	vmul.f32	s15, s15, s14
 800212a:	ee17 0a90 	vmov	r0, s15
 800212e:	f7fe fa2b 	bl	8000588 <__aeabi_f2d>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	ec44 3b10 	vmov	d0, r3, r4
 800213a:	f012 f995 	bl	8014468 <round>
 800213e:	ec54 3b10 	vmov	r3, r4, d0
 8002142:	4618      	mov	r0, r3
 8002144:	4621      	mov	r1, r4
 8002146:	f7fe fd27 	bl	8000b98 <__aeabi_d2iz>
 800214a:	4603      	mov	r3, r0
 800214c:	b25a      	sxtb	r2, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	725a      	strb	r2, [r3, #9]

    for (int i = 0; i < 3; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	e01a      	b.n	800218e <encode_TLM+0x1d6>
        enc->acc[i] = dec->acc[i];
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	3210      	adds	r2, #16
 800215e:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	3304      	adds	r3, #4
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4413      	add	r3, r2
 800216c:	460a      	mov	r2, r1
 800216e:	805a      	strh	r2, [r3, #2]
        enc->gyro[i] = dec->gyro[i];
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	3310      	adds	r3, #16
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	4413      	add	r3, r2
 800217a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	3208      	adds	r2, #8
 8002184:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < 3; i++) {
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	3301      	adds	r3, #1
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2b02      	cmp	r3, #2
 8002192:	dde1      	ble.n	8002158 <encode_TLM+0x1a0>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800219a:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002394 <encode_TLM+0x3dc>
 800219e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021a2:	ee17 0a90 	vmov	r0, s15
 80021a6:	f7fe f9ef 	bl	8000588 <__aeabi_f2d>
 80021aa:	4603      	mov	r3, r0
 80021ac:	460c      	mov	r4, r1
 80021ae:	ec44 3b10 	vmov	d0, r3, r4
 80021b2:	f012 f959 	bl	8014468 <round>
 80021b6:	ec54 3b10 	vmov	r3, r4, d0
 80021ba:	4618      	mov	r0, r3
 80021bc:	4621      	mov	r1, r4
 80021be:	f7fe fd13 	bl	8000be8 <__aeabi_d2uiz>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	82da      	strh	r2, [r3, #22]

    enc->temp = (uint8_t) round(dec->temp * 4);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80021d0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	ee17 0a90 	vmov	r0, s15
 80021dc:	f7fe f9d4 	bl	8000588 <__aeabi_f2d>
 80021e0:	4603      	mov	r3, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	ec44 3b10 	vmov	d0, r3, r4
 80021e8:	f012 f93e 	bl	8014468 <round>
 80021ec:	ec54 3b10 	vmov	r3, r4, d0
 80021f0:	4618      	mov	r0, r3
 80021f2:	4621      	mov	r1, r4
 80021f4:	f7fe fcf8 	bl	8000be8 <__aeabi_d2uiz>
 80021f8:	4603      	mov	r3, r0
 80021fa:	b2da      	uxtb	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	761a      	strb	r2, [r3, #24]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002206:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8002398 <encode_TLM+0x3e0>
 800220a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800220e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8002212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002216:	ee17 0a90 	vmov	r0, s15
 800221a:	f7fe f9b5 	bl	8000588 <__aeabi_f2d>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	ec44 3b10 	vmov	d0, r3, r4
 8002226:	f012 f91f 	bl	8014468 <round>
 800222a:	ec54 3b10 	vmov	r3, r4, d0
 800222e:	4618      	mov	r0, r3
 8002230:	4621      	mov	r1, r4
 8002232:	f7fe fcd9 	bl	8000be8 <__aeabi_d2uiz>
 8002236:	4603      	mov	r3, r0
 8002238:	b29a      	uxth	r2, r3
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	835a      	strh	r2, [r3, #26]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002244:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800239c <encode_TLM+0x3e4>
 8002248:	ee77 7a87 	vadd.f32	s15, s15, s14
 800224c:	ee17 0a90 	vmov	r0, s15
 8002250:	f7fe f99a 	bl	8000588 <__aeabi_f2d>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	ec44 3b10 	vmov	d0, r3, r4
 800225c:	f012 f904 	bl	8014468 <round>
 8002260:	ec51 0b10 	vmov	r0, r1, d0
 8002264:	f04f 0200 	mov.w	r2, #0
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	f7fe fc74 	bl	8000b58 <__aeabi_dcmpgt>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d020      	beq.n	80022b8 <encode_TLM+0x300>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800227c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800239c <encode_TLM+0x3e4>
 8002280:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002284:	ee17 0a90 	vmov	r0, s15
 8002288:	f7fe f97e 	bl	8000588 <__aeabi_f2d>
 800228c:	4603      	mov	r3, r0
 800228e:	460c      	mov	r4, r1
 8002290:	ec44 3b10 	vmov	d0, r3, r4
 8002294:	f012 f8e8 	bl	8014468 <round>
 8002298:	ec51 0b10 	vmov	r0, r1, d0
 800229c:	2301      	movs	r3, #1
 800229e:	461c      	mov	r4, r3
 80022a0:	a339      	add	r3, pc, #228	; (adr r3, 8002388 <encode_TLM+0x3d0>)
 80022a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a6:	f7fe fc39 	bl	8000b1c <__aeabi_dcmplt>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <encode_TLM+0x2fc>
 80022b0:	2300      	movs	r3, #0
 80022b2:	461c      	mov	r4, r3
 80022b4:	b2e3      	uxtb	r3, r4
 80022b6:	e000      	b.n	80022ba <encode_TLM+0x302>
 80022b8:	2301      	movs	r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d037      	beq.n	800232e <encode_TLM+0x376>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022c4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800239c <encode_TLM+0x3e4>
 80022c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022cc:	ee17 0a90 	vmov	r0, s15
 80022d0:	f7fe f95a 	bl	8000588 <__aeabi_f2d>
 80022d4:	4603      	mov	r3, r0
 80022d6:	460c      	mov	r4, r1
 80022d8:	ec44 3b10 	vmov	d0, r3, r4
 80022dc:	f012 f8c4 	bl	8014468 <round>
 80022e0:	ec51 0b10 	vmov	r0, r1, d0
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f7fe fc34 	bl	8000b58 <__aeabi_dcmpgt>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d019      	beq.n	800232a <encode_TLM+0x372>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80022fc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800239c <encode_TLM+0x3e4>
 8002300:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002304:	ee17 0a90 	vmov	r0, s15
 8002308:	f7fe f93e 	bl	8000588 <__aeabi_f2d>
 800230c:	4603      	mov	r3, r0
 800230e:	460c      	mov	r4, r1
 8002310:	ec44 3b10 	vmov	d0, r3, r4
 8002314:	f012 f8a8 	bl	8014468 <round>
 8002318:	ec54 3b10 	vmov	r3, r4, d0
 800231c:	4618      	mov	r0, r3
 800231e:	4621      	mov	r1, r4
 8002320:	f7fe fc62 	bl	8000be8 <__aeabi_d2uiz>
 8002324:	4603      	mov	r3, r0
 8002326:	b2db      	uxtb	r3, r3
 8002328:	e002      	b.n	8002330 <encode_TLM+0x378>
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <encode_TLM+0x378>
 800232e:	23ff      	movs	r3, #255	; 0xff
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	7713      	strb	r3, [r2, #28]

    if (dec->packet_type == 1) {
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d11b      	bne.n	8002374 <encode_TLM+0x3bc>
        enc->debug_ranging = (uint16_t) round(dec->ranging * 4);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002342:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002346:	ee67 7a87 	vmul.f32	s15, s15, s14
 800234a:	ee17 0a90 	vmov	r0, s15
 800234e:	f7fe f91b 	bl	8000588 <__aeabi_f2d>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	ec44 3b10 	vmov	d0, r3, r4
 800235a:	f012 f885 	bl	8014468 <round>
 800235e:	ec54 3b10 	vmov	r3, r4, d0
 8002362:	4618      	mov	r0, r3
 8002364:	4621      	mov	r1, r4
 8002366:	f7fe fc3f 	bl	8000be8 <__aeabi_d2uiz>
 800236a:	4603      	mov	r3, r0
 800236c:	b29a      	uxth	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	83da      	strh	r2, [r3, #30]
    }
    else {
        enc->debug_ranging = dec->debug;
    }
}
 8002372:	e003      	b.n	800237c <encode_TLM+0x3c4>
        enc->debug_ranging = dec->debug;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	83da      	strh	r2, [r3, #30]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	bd90      	pop	{r4, r7, pc}
 8002384:	f3af 8000 	nop.w
 8002388:	00000000 	.word	0x00000000
 800238c:	406fe000 	.word	0x406fe000
 8002390:	42fe0000 	.word	0x42fe0000
 8002394:	47435000 	.word	0x47435000
 8002398:	42400000 	.word	0x42400000
 800239c:	42a00000 	.word	0x42a00000

080023a0 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80023aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80023ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80023b2:	edc7 1a02 	vstr	s3, [r7, #8]
 80023b6:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d105      	bne.n	80023ca <Quaternion_set+0x2a>
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <Quaternion_set+0x4c>)
 80023c0:	4a0b      	ldr	r2, [pc, #44]	; (80023f0 <Quaternion_set+0x50>)
 80023c2:	211b      	movs	r1, #27
 80023c4:	480b      	ldr	r0, [pc, #44]	; (80023f4 <Quaternion_set+0x54>)
 80023c6:	f00f fa45 	bl	8011854 <__assert_func>
    output->w = w;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	60da      	str	r2, [r3, #12]
}
 80023e2:	bf00      	nop
 80023e4:	3718      	adds	r7, #24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08016f4c 	.word	0x08016f4c
 80023f0:	08017560 	.word	0x08017560
 80023f4:	08016f5c 	.word	0x08016f5c

080023f8 <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d105      	bne.n	8002412 <Quaternion_setIdentity+0x1a>
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <Quaternion_setIdentity+0x38>)
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <Quaternion_setIdentity+0x3c>)
 800240a:	2124      	movs	r1, #36	; 0x24
 800240c:	480a      	ldr	r0, [pc, #40]	; (8002438 <Quaternion_setIdentity+0x40>)
 800240e:	f00f fa21 	bl	8011854 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	eddf 1a09 	vldr	s3, [pc, #36]	; 800243c <Quaternion_setIdentity+0x44>
 8002418:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800243c <Quaternion_setIdentity+0x44>
 800241c:	eddf 0a07 	vldr	s1, [pc, #28]	; 800243c <Quaternion_setIdentity+0x44>
 8002420:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8002424:	f7ff ffbc 	bl	80023a0 <Quaternion_set>
}
 8002428:	bf00      	nop
 800242a:	3708      	adds	r7, #8
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	08016f78 	.word	0x08016f78
 8002434:	08017570 	.word	0x08017570
 8002438:	08016f5c 	.word	0x08016f5c
 800243c:	00000000 	.word	0x00000000

08002440 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	edd3 7a00 	vldr	s15, [r3]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	ed93 7a01 	vldr	s14, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	edd3 6a02 	vldr	s13, [r3, #8]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	ed93 6a03 	vldr	s12, [r3, #12]
 8002462:	6838      	ldr	r0, [r7, #0]
 8002464:	eef0 1a46 	vmov.f32	s3, s12
 8002468:	eeb0 1a66 	vmov.f32	s2, s13
 800246c:	eef0 0a47 	vmov.f32	s1, s14
 8002470:	eeb0 0a67 	vmov.f32	s0, s15
 8002474:	f7ff ff94 	bl	80023a0 <Quaternion_set>
}
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 8002480:	b5b0      	push	{r4, r5, r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d105      	bne.n	800249c <Quaternion_toEulerZYX+0x1c>
 8002490:	4b87      	ldr	r3, [pc, #540]	; (80026b0 <Quaternion_toEulerZYX+0x230>)
 8002492:	4a88      	ldr	r2, [pc, #544]	; (80026b4 <Quaternion_toEulerZYX+0x234>)
 8002494:	2185      	movs	r1, #133	; 0x85
 8002496:	4888      	ldr	r0, [pc, #544]	; (80026b8 <Quaternion_toEulerZYX+0x238>)
 8002498:	f00f f9dc 	bl	8011854 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	ed93 7a00 	vldr	s14, [r3]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	edd3 6a02 	vldr	s13, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edd3 7a03 	vldr	s15, [r3, #12]
 80024b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024c4:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80024d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	edd3 6a02 	vldr	s13, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80024e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
 80024f0:	f7fe f84a 	bl	8000588 <__aeabi_f2d>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	f7fd fee8 	bl	80002cc <__adddf3>
 80024fc:	4603      	mov	r3, r0
 80024fe:	460c      	mov	r4, r1
 8002500:	461a      	mov	r2, r3
 8002502:	4623      	mov	r3, r4
 8002504:	f04f 0000 	mov.w	r0, #0
 8002508:	496c      	ldr	r1, [pc, #432]	; (80026bc <Quaternion_toEulerZYX+0x23c>)
 800250a:	f7fd fedd 	bl	80002c8 <__aeabi_dsub>
 800250e:	4603      	mov	r3, r0
 8002510:	460c      	mov	r4, r1
 8002512:	4618      	mov	r0, r3
 8002514:	4621      	mov	r1, r4
 8002516:	f7fe fb87 	bl	8000c28 <__aeabi_d2f>
 800251a:	4603      	mov	r3, r0
 800251c:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 800251e:	69f8      	ldr	r0, [r7, #28]
 8002520:	f7fe f832 	bl	8000588 <__aeabi_f2d>
 8002524:	4604      	mov	r4, r0
 8002526:	460d      	mov	r5, r1
 8002528:	69b8      	ldr	r0, [r7, #24]
 800252a:	f7fe f82d 	bl	8000588 <__aeabi_f2d>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	ec43 2b11 	vmov	d1, r2, r3
 8002536:	ec45 4b10 	vmov	d0, r4, r5
 800253a:	f012 f881 	bl	8014640 <atan2>
 800253e:	ec54 3b10 	vmov	r3, r4, d0
 8002542:	4618      	mov	r0, r3
 8002544:	4621      	mov	r1, r4
 8002546:	f7fe fb6f 	bl	8000c28 <__aeabi_d2f>
 800254a:	4602      	mov	r2, r0
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	ed93 7a00 	vldr	s14, [r3]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edd3 7a02 	vldr	s15, [r3, #8]
 800255c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	edd3 6a03 	vldr	s13, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	edd3 7a01 	vldr	s15, [r3, #4]
 800256c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002574:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002578:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 800257c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002580:	eef0 7ae7 	vabs.f32	s15, s15
 8002584:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002588:	eef4 7ac7 	vcmpe.f32	s15, s14
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	db15      	blt.n	80025be <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 8002592:	6978      	ldr	r0, [r7, #20]
 8002594:	f7fd fff8 	bl	8000588 <__aeabi_f2d>
 8002598:	4603      	mov	r3, r0
 800259a:	460c      	mov	r4, r1
 800259c:	ec44 3b11 	vmov	d1, r3, r4
 80025a0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80026a8 <Quaternion_toEulerZYX+0x228>
 80025a4:	f010 f818 	bl	80125d8 <copysign>
 80025a8:	ec52 1b10 	vmov	r1, r2, d0
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	1d1c      	adds	r4, r3, #4
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	f7fe fb38 	bl	8000c28 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	e012      	b.n	80025e4 <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 80025be:	6978      	ldr	r0, [r7, #20]
 80025c0:	f7fd ffe2 	bl	8000588 <__aeabi_f2d>
 80025c4:	4603      	mov	r3, r0
 80025c6:	460c      	mov	r4, r1
 80025c8:	ec44 3b10 	vmov	d0, r3, r4
 80025cc:	f011 ffe0 	bl	8014590 <asin>
 80025d0:	ec52 1b10 	vmov	r1, r2, d0
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	1d1c      	adds	r4, r3, #4
 80025d8:	4608      	mov	r0, r1
 80025da:	4611      	mov	r1, r2
 80025dc:	f7fe fb24 	bl	8000c28 <__aeabi_d2f>
 80025e0:	4603      	mov	r3, r0
 80025e2:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	edd3 7a03 	vldr	s15, [r3, #12]
 80025f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	edd3 6a01 	vldr	s13, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002600:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002608:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800260c:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	ed93 7a02 	vldr	s14, [r3, #8]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	edd3 7a02 	vldr	s15, [r3, #8]
 800261c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	edd3 6a03 	vldr	s13, [r3, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	edd3 7a03 	vldr	s15, [r3, #12]
 800262c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002634:	ee17 0a90 	vmov	r0, s15
 8002638:	f7fd ffa6 	bl	8000588 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	f7fd fe44 	bl	80002cc <__adddf3>
 8002644:	4603      	mov	r3, r0
 8002646:	460c      	mov	r4, r1
 8002648:	461a      	mov	r2, r3
 800264a:	4623      	mov	r3, r4
 800264c:	f04f 0000 	mov.w	r0, #0
 8002650:	491a      	ldr	r1, [pc, #104]	; (80026bc <Quaternion_toEulerZYX+0x23c>)
 8002652:	f7fd fe39 	bl	80002c8 <__aeabi_dsub>
 8002656:	4603      	mov	r3, r0
 8002658:	460c      	mov	r4, r1
 800265a:	4618      	mov	r0, r3
 800265c:	4621      	mov	r1, r4
 800265e:	f7fe fae3 	bl	8000c28 <__aeabi_d2f>
 8002662:	4603      	mov	r3, r0
 8002664:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 8002666:	6938      	ldr	r0, [r7, #16]
 8002668:	f7fd ff8e 	bl	8000588 <__aeabi_f2d>
 800266c:	4604      	mov	r4, r0
 800266e:	460d      	mov	r5, r1
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7fd ff89 	bl	8000588 <__aeabi_f2d>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	ec43 2b11 	vmov	d1, r2, r3
 800267e:	ec45 4b10 	vmov	d0, r4, r5
 8002682:	f011 ffdd 	bl	8014640 <atan2>
 8002686:	ec52 1b10 	vmov	r1, r2, d0
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f103 0408 	add.w	r4, r3, #8
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	f7fe fac8 	bl	8000c28 <__aeabi_d2f>
 8002698:	4603      	mov	r3, r0
 800269a:	6023      	str	r3, [r4, #0]
}
 800269c:	bf00      	nop
 800269e:	3720      	adds	r7, #32
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bdb0      	pop	{r4, r5, r7, pc}
 80026a4:	f3af 8000 	nop.w
 80026a8:	54442d18 	.word	0x54442d18
 80026ac:	3ff921fb 	.word	0x3ff921fb
 80026b0:	08016f4c 	.word	0x08016f4c
 80026b4:	08017588 	.word	0x08017588
 80026b8:	08016f5c 	.word	0x08016f5c
 80026bc:	3ff00000 	.word	0x3ff00000

080026c0 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d105      	bne.n	80026dc <Quaternion_conjugate+0x1c>
 80026d0:	4b12      	ldr	r3, [pc, #72]	; (800271c <Quaternion_conjugate+0x5c>)
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <Quaternion_conjugate+0x60>)
 80026d4:	21b7      	movs	r1, #183	; 0xb7
 80026d6:	4813      	ldr	r0, [pc, #76]	; (8002724 <Quaternion_conjugate+0x64>)
 80026d8:	f00f f8bc 	bl	8011854 <__assert_func>
    output->w = q->w;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80026ea:	eef1 7a67 	vneg.f32	s15, s15
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80026fa:	eef1 7a67 	vneg.f32	s15, s15
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 7a03 	vldr	s15, [r3, #12]
 800270a:	eef1 7a67 	vneg.f32	s15, s15
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002714:	bf00      	nop
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	08016f4c 	.word	0x08016f4c
 8002720:	080175a0 	.word	0x080175a0
 8002724:	08016f5c 	.word	0x08016f5c

08002728 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <Quaternion_multiply+0x1e>
 800273a:	4b58      	ldr	r3, [pc, #352]	; (800289c <Quaternion_multiply+0x174>)
 800273c:	4a58      	ldr	r2, [pc, #352]	; (80028a0 <Quaternion_multiply+0x178>)
 800273e:	21d2      	movs	r1, #210	; 0xd2
 8002740:	4858      	ldr	r0, [pc, #352]	; (80028a4 <Quaternion_multiply+0x17c>)
 8002742:	f00f f887 	bl	8011854 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	edd3 6a01 	vldr	s13, [r3, #4]
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002766:	ee37 7a67 	vsub.f32	s14, s14, s15
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	edd3 7a02 	vldr	s15, [r3, #8]
 8002776:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	edd3 6a03 	vldr	s13, [r3, #12]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	edd3 7a03 	vldr	s15, [r3, #12]
 800278a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800278e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002792:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	ed93 7a01 	vldr	s14, [r3, #4]
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	edd3 7a00 	vldr	s15, [r3]
 80027a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	edd3 6a00 	vldr	s13, [r3]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80027c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80027da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027e2:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	ed93 7a00 	vldr	s14, [r3]
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80027f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	edd3 6a03 	vldr	s13, [r3, #12]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	edd3 7a01 	vldr	s15, [r3, #4]
 800282a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800282e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002832:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	ed93 7a00 	vldr	s14, [r3]
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002842:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	edd3 6a01 	vldr	s13, [r3, #4]
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	edd3 7a01 	vldr	s15, [r3, #4]
 8002866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800286a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	edd3 6a03 	vldr	s13, [r3, #12]
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	edd3 7a00 	vldr	s15, [r3]
 800287a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	461c      	mov	r4, r3
 800288a:	f107 0310 	add.w	r3, r7, #16
 800288e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002894:	bf00      	nop
 8002896:	3724      	adds	r7, #36	; 0x24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd90      	pop	{r4, r7, pc}
 800289c:	08016f4c 	.word	0x08016f4c
 80028a0:	080175b8 	.word	0x080175b8
 80028a4:	08016f5c 	.word	0x08016f5c

080028a8 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b092      	sub	sp, #72	; 0x48
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <Quaternion_rotate+0x1e>
 80028ba:	4bbc      	ldr	r3, [pc, #752]	; (8002bac <Quaternion_rotate+0x304>)
 80028bc:	4abc      	ldr	r2, [pc, #752]	; (8002bb0 <Quaternion_rotate+0x308>)
 80028be:	21e6      	movs	r1, #230	; 0xe6
 80028c0:	48bc      	ldr	r0, [pc, #752]	; (8002bb4 <Quaternion_rotate+0x30c>)
 80028c2:	f00e ffc7 	bl	8011854 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	ed93 7a00 	vldr	s14, [r3]
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	edd3 7a00 	vldr	s15, [r3]
 80028d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80028fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028fe:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	ed93 7a03 	vldr	s14, [r3, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	edd3 7a03 	vldr	s15, [r3, #12]
 800290e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002912:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	ed93 7a00 	vldr	s14, [r3]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002926:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	ed93 7a00 	vldr	s14, [r3]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	edd3 7a02 	vldr	s15, [r3, #8]
 8002936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800293a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	ed93 7a00 	vldr	s14, [r3]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	edd3 7a03 	vldr	s15, [r3, #12]
 800294a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	ed93 7a01 	vldr	s14, [r3, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	edd3 7a02 	vldr	s15, [r3, #8]
 800295e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002962:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	ed93 7a01 	vldr	s14, [r3, #4]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002976:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	edd3 7a03 	vldr	s15, [r3, #12]
 8002986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800298a:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	ed93 7a00 	vldr	s14, [r3]
 8002994:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80029a0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	3308      	adds	r3, #8
 80029a8:	edd3 7a00 	vldr	s15, [r3]
 80029ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029b4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80029b8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	3304      	adds	r3, #4
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029c8:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	edd3 6a00 	vldr	s13, [r3]
 80029d2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 80029da:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 80029de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80029e2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	3304      	adds	r3, #4
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80029f6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80029fa:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3308      	adds	r3, #8
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	edd3 6a00 	vldr	s13, [r3]
 8002a14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a18:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8002a1c:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	edd3 6a00 	vldr	s13, [r3]
 8002a26:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8002a32:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002a36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002a3a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	edd3 7a00 	vldr	s15, [r3]
 8002a44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3304      	adds	r3, #4
 8002a4c:	edd3 6a00 	vldr	s13, [r3]
 8002a50:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a54:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a5c:	edd7 7a08 	vldr	s15, [r7, #32]
 8002a60:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	3308      	adds	r3, #8
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a70:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002a74:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002a78:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	edd3 7a00 	vldr	s15, [r3]
 8002a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002a86:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	edd3 6a00 	vldr	s13, [r3]
 8002a92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3304      	adds	r3, #4
 8002aa2:	edd3 6a00 	vldr	s13, [r3]
 8002aa6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002ab2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002ab6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	3308      	adds	r3, #8
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8002ac6:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3304      	adds	r3, #4
 8002ace:	edd3 6a00 	vldr	s13, [r3]
 8002ad2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ada:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8002ade:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002ae2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ae6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002af4:	edd7 7a08 	vldr	s15, [r7, #32]
 8002af8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3304      	adds	r3, #4
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	3308      	adds	r3, #8
 8002b10:	edd3 6a00 	vldr	s13, [r3]
 8002b14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002b18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b1c:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002b20:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002b24:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002b32:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	3308      	adds	r3, #8
 8002b3a:	edd3 6a00 	vldr	s13, [r3]
 8002b3e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b4a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002b4e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	3304      	adds	r3, #4
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	3308      	adds	r3, #8
 8002b66:	edd3 6a00 	vldr	s13, [r3]
 8002b6a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8002b72:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3308      	adds	r3, #8
 8002b7a:	edd3 6a00 	vldr	s13, [r3]
 8002b7e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8002b8a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	69fa      	ldr	r2, [r7, #28]
 8002ba2:	601a      	str	r2, [r3, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	3748      	adds	r7, #72	; 0x48
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08016f4c 	.word	0x08016f4c
 8002bb0:	080175cc 	.word	0x080175cc
 8002bb4:	08016f5c 	.word	0x08016f5c

08002bb8 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8002bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bba:	b08b      	sub	sp, #44	; 0x2c
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bc4:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	ed93 7a00 	vldr	s14, [r3]
 8002bcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bdc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	3304      	adds	r3, #4
 8002be4:	ed93 7a00 	vldr	s14, [r3]
 8002be8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bf4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bf8:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	3308      	adds	r3, #8
 8002c00:	ed93 7a00 	vldr	s14, [r3]
 8002c04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c0c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c14:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002c18:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c24:	edd7 6a08 	vldr	s13, [r7, #32]
 8002c28:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c38:	edd7 7a07 	vldr	s15, [r7, #28]
 8002c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS) {
 8002c48:	69b8      	ldr	r0, [r7, #24]
 8002c4a:	f7fd fc9d 	bl	8000588 <__aeabi_f2d>
 8002c4e:	a336      	add	r3, pc, #216	; (adr r3, 8002d28 <Quaternion_fromRate+0x170>)
 8002c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c54:	f7fd ff80 	bl	8000b58 <__aeabi_dcmpgt>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d05c      	beq.n	8002d18 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 8002c5e:	69b8      	ldr	r0, [r7, #24]
 8002c60:	f7fd fc92 	bl	8000588 <__aeabi_f2d>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	ec44 3b10 	vmov	d0, r3, r4
 8002c6c:	f011 fe5a 	bl	8014924 <sqrt>
 8002c70:	ec54 3b10 	vmov	r3, r4, d0
 8002c74:	4618      	mov	r0, r3
 8002c76:	4621      	mov	r1, r4
 8002c78:	f7fd ffd6 	bl	8000c28 <__aeabi_d2f>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 8002c80:	69b8      	ldr	r0, [r7, #24]
 8002c82:	f7fd fc81 	bl	8000588 <__aeabi_f2d>
 8002c86:	4603      	mov	r3, r0
 8002c88:	460c      	mov	r4, r1
 8002c8a:	ec44 3b10 	vmov	d0, r3, r4
 8002c8e:	f011 fc37 	bl	8014500 <sin>
 8002c92:	ec56 5b10 	vmov	r5, r6, d0
 8002c96:	69b8      	ldr	r0, [r7, #24]
 8002c98:	f7fd fc76 	bl	8000588 <__aeabi_f2d>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	460c      	mov	r4, r1
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	4628      	mov	r0, r5
 8002ca6:	4631      	mov	r1, r6
 8002ca8:	f7fd fdf0 	bl	800088c <__aeabi_ddiv>
 8002cac:	4603      	mov	r3, r0
 8002cae:	460c      	mov	r4, r1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	4621      	mov	r1, r4
 8002cb4:	f7fd ffb8 	bl	8000c28 <__aeabi_d2f>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 8002cbc:	69b8      	ldr	r0, [r7, #24]
 8002cbe:	f7fd fc63 	bl	8000588 <__aeabi_f2d>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460c      	mov	r4, r1
 8002cc6:	ec44 3b10 	vmov	d0, r3, r4
 8002cca:	f011 fb89 	bl	80143e0 <cos>
 8002cce:	ec54 3b10 	vmov	r3, r4, d0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f7fd ffa7 	bl	8000c28 <__aeabi_d2f>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002ce0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002ce4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002cf2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002cf6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002d04:	ed97 7a07 	vldr	s14, [r7, #28]
 8002d08:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002d16:	e002      	b.n	8002d1e <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff fb6d 	bl	80023f8 <Quaternion_setIdentity>
}
 8002d1e:	bf00      	nop
 8002d20:	372c      	adds	r7, #44	; 0x2c
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d26:	bf00      	nop
 8002d28:	e2308c3a 	.word	0xe2308c3a
 8002d2c:	3e45798e 	.word	0x3e45798e

08002d30 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	4a07      	ldr	r2, [pc, #28]	; (8002d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8002d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	4a06      	ldr	r2, [pc, #24]	; (8002d60 <vApplicationGetIdleTaskMemory+0x30>)
 8002d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2280      	movs	r2, #128	; 0x80
 8002d4c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000620 	.word	0x20000620
 8002d60:	20000674 	.word	0x20000674
 8002d64:	00000000 	.word	0x00000000

08002d68 <get_battery_voltage>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

float get_battery_voltage() {
 8002d68:	b590      	push	{r4, r7, lr}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8002d6e:	4816      	ldr	r0, [pc, #88]	; (8002dc8 <get_battery_voltage+0x60>)
 8002d70:	f002 fba8 	bl	80054c4 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8002d74:	2164      	movs	r1, #100	; 0x64
 8002d76:	4814      	ldr	r0, [pc, #80]	; (8002dc8 <get_battery_voltage+0x60>)
 8002d78:	f002 fc6a 	bl	8005650 <HAL_ADC_PollForConversion>
    float voltage = ((float) HAL_ADC_GetValue(&hadc1)) * VBAT_CALIBRATION;
 8002d7c:	4812      	ldr	r0, [pc, #72]	; (8002dc8 <get_battery_voltage+0x60>)
 8002d7e:	f002 fceb 	bl	8005758 <HAL_ADC_GetValue>
 8002d82:	ee07 0a90 	vmov	s15, r0
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	ee17 0a90 	vmov	r0, s15
 8002d8e:	f7fd fbfb 	bl	8000588 <__aeabi_f2d>
 8002d92:	a30b      	add	r3, pc, #44	; (adr r3, 8002dc0 <get_battery_voltage+0x58>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fc4e 	bl	8000638 <__aeabi_dmul>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	460c      	mov	r4, r1
 8002da0:	4618      	mov	r0, r3
 8002da2:	4621      	mov	r1, r4
 8002da4:	f7fd ff40 	bl	8000c28 <__aeabi_d2f>
 8002da8:	4603      	mov	r3, r0
 8002daa:	607b      	str	r3, [r7, #4]
    return voltage;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	ee07 3a90 	vmov	s15, r3
}
 8002db2:	eeb0 0a67 	vmov.f32	s0, s15
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}
 8002dbc:	f3af 8000 	nop.w
 8002dc0:	f34eff30 	.word	0xf34eff30
 8002dc4:	3f72b5b7 	.word	0x3f72b5b7
 8002dc8:	20004728 	.word	0x20004728

08002dcc <is_armed>:

uint8_t is_armed() {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(RBF_GPIO_Port, RBF_Pin);// High corresponds to disconected = armed
 8002dd0:	2101      	movs	r1, #1
 8002dd2:	4803      	ldr	r0, [pc, #12]	; (8002de0 <is_armed+0x14>)
 8002dd4:	f003 f970 	bl	80060b8 <HAL_GPIO_ReadPin>
 8002dd8:	4603      	mov	r3, r0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40020000 	.word	0x40020000

08002de4 <is_soft_enabled>:

uint8_t is_soft_enabled() {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8002de8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <is_soft_enabled+0x14>)
 8002dee:	f003 f963 	bl	80060b8 <HAL_GPIO_ReadPin>
 8002df2:	4603      	mov	r3, r0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40020400 	.word	0x40020400

08002dfc <is_breakwire_connected>:

uint8_t is_breakwire_connected() {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
    return !HAL_GPIO_ReadPin(BREAKWIRE_GPIO_Port, BREAKWIRE_Pin);
 8002e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <is_breakwire_connected+0x20>)
 8002e06:	f003 f957 	bl	80060b8 <HAL_GPIO_ReadPin>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40020400 	.word	0x40020400

08002e20 <buzzer_beep>:

uint8_t is_debug_connected() {
    return !HAL_GPIO_ReadPin(DEBUG_GPIO_Port, DEBUG_Pin);
}

void buzzer_beep(uint8_t delayval) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	71fb      	strb	r3, [r7, #7]
    buzzer_setting = REPEAT_BEEP;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <buzzer_beep+0x4c>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	701a      	strb	r2, [r3, #0]
    buzzer_delay = delayval * 20;
 8002e30:	79fb      	ldrb	r3, [r7, #7]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	0092      	lsls	r2, r2, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <buzzer_beep+0x50>)
 8002e40:	801a      	strh	r2, [r3, #0]

    if (osMessageAvailableSpace(BuzzerQueueHandle)) {
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <buzzer_beep+0x54>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f00b fe86 	bl	800eb58 <osMessageAvailableSpace>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <buzzer_beep+0x42>
        osMessagePut(BuzzerQueueHandle, buzzer_delay, 100);
 8002e52:	4b08      	ldr	r3, [pc, #32]	; (8002e74 <buzzer_beep+0x54>)
 8002e54:	6818      	ldr	r0, [r3, #0]
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <buzzer_beep+0x50>)
 8002e58:	881b      	ldrh	r3, [r3, #0]
 8002e5a:	2264      	movs	r2, #100	; 0x64
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f00b fdc7 	bl	800e9f0 <osMessagePut>
    }
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000001 	.word	0x20000001
 8002e70:	20000002 	.word	0x20000002
 8002e74:	20004770 	.word	0x20004770

08002e78 <set_status_led>:

void set_status_led(uint8_t status_state) {
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	71fb      	strb	r3, [r7, #7]
    // TODO
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <is_vote_asserted>:

uint8_t is_vote_asserted() {
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0
    // Todo
}
 8002e92:	bf00      	nop
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <loraOrientation>:
        }

    }
}

void loraOrientation(uint8_t isTx) {
 8002ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea4:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002ea8:	af0c      	add	r7, sp, #48	; 0x30
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f107 0317 	add.w	r3, r7, #23
 8002eb0:	701a      	strb	r2, [r3, #0]

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8002eb2:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8002eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eba:	4ae1      	ldr	r2, [pc, #900]	; (8003240 <loraOrientation+0x3a0>)
 8002ebc:	49e1      	ldr	r1, [pc, #900]	; (8003244 <loraOrientation+0x3a4>)
 8002ebe:	f7fe fdf1 	bl	8001aa4 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8002ec2:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002ec6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eca:	49df      	ldr	r1, [pc, #892]	; (8003248 <loraOrientation+0x3a8>)
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fe fe49 	bl	8001b64 <sxSetDio1Pin>

    float data[4];

    char printBuffer[128];

    if (isTx) {
 8002ed2:	f107 0317 	add.w	r3, r7, #23
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 8121 	beq.w	8003120 <loraOrientation+0x280>
        //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
        SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 8002ede:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8002ee2:	22e0      	movs	r2, #224	; 0xe0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fe fe90 	bl	8001c0c <SetTxParams>
        HAL_Delay(3);
 8002eec:	2003      	movs	r0, #3
 8002eee:	f002 fa83 	bl	80053f8 <HAL_Delay>

        lsm6dso imu;
        uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 8002ef2:	f107 001c 	add.w	r0, r7, #28
 8002ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002efa:	4ad4      	ldr	r2, [pc, #848]	; (800324c <loraOrientation+0x3ac>)
 8002efc:	49d4      	ldr	r1, [pc, #848]	; (8003250 <loraOrientation+0x3b0>)
 8002efe:	f7fe f8e3 	bl	80010c8 <LSM_init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f887 31f6 	strb.w	r3, [r7, #502]	; 0x1f6
        SPI2_NSS_Pin);

        Orientation ori;
        orientation_init(&ori);
 8002f08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f001 fd0c 	bl	800492a <orientation_init>
        uint32_t counter = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

        data[0] = ori.orientationQuat.w;
 8002f18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
        data[1] = ori.orientationQuat.v[0];
 8002f22:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        data[2] = ori.orientationQuat.v[1];
 8002f2c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        data[3] = ori.orientationQuat.v[2];
 8002f36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

        WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 8002f40:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8002f44:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8002f48:	2310      	movs	r3, #16
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	f7fe fed7 	bl	8001cfe <WriteBuffer>
        HAL_Delay(1);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f002 fa51 	bl	80053f8 <HAL_Delay>

        SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 8002f56:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2201      	movs	r2, #1
 8002f62:	2101      	movs	r1, #1
 8002f64:	f7fe ff34 	bl	8001dd0 <SetDioIrqParams>

        HAL_Delay(3);
 8002f68:	2003      	movs	r0, #3
 8002f6a:	f002 fa45 	bl	80053f8 <HAL_Delay>

        uint32_t lasttime = HAL_GetTick();
 8002f6e:	f002 fa37 	bl	80053e0 <HAL_GetTick>
 8002f72:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        uint32_t nowtime = HAL_GetTick();
 8002f76:	f002 fa33 	bl	80053e0 <HAL_GetTick>
 8002f7a:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
        float dt = 0;
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
        changeLed(100, 100, 100);
 8002f86:	2264      	movs	r2, #100	; 0x64
 8002f88:	2164      	movs	r1, #100	; 0x64
 8002f8a:	2064      	movs	r0, #100	; 0x64
 8002f8c:	f000 ffc8 	bl	8003f20 <changeLed>

        while (1) {

            LSM_pollsensors(&imu);
 8002f90:	f107 031c 	add.w	r3, r7, #28
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7fe f911 	bl	80011bc <LSM_pollsensors>
            changeLed(0, 0, 100);
 8002f9a:	2264      	movs	r2, #100	; 0x64
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f000 ffbe 	bl	8003f20 <changeLed>
            nowtime = HAL_GetTick();
 8002fa4:	f002 fa1c 	bl	80053e0 <HAL_GetTick>
 8002fa8:	f8c7 01f0 	str.w	r0, [r7, #496]	; 0x1f0
            dt = (nowtime - lasttime) / 1000.0;
 8002fac:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8002fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fac4 	bl	8000544 <__aeabi_ui2d>
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	4ba4      	ldr	r3, [pc, #656]	; (8003254 <loraOrientation+0x3b4>)
 8002fc2:	f7fd fc63 	bl	800088c <__aeabi_ddiv>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	460c      	mov	r4, r1
 8002fca:	4618      	mov	r0, r3
 8002fcc:	4621      	mov	r1, r4
 8002fce:	f7fd fe2b 	bl	8000c28 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
            lasttime = nowtime;
 8002fd8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002fdc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

            orientation_setGyro(&ori, imu.gyroRPS);
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002fe8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002fec:	4611      	mov	r1, r2
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f001 fcc9 	bl	8004986 <orientation_setGyro>
            orientation_setAcc(&ori, imu.accMPS);
 8002ff4:	f107 031c 	add.w	r3, r7, #28
 8002ff8:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8002ffc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f001 fcd6 	bl	80049b4 <orientation_setAcc>
            orientation_update(&ori, dt);
 8003008:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800300c:	ed97 0a7b 	vldr	s0, [r7, #492]	; 0x1ec
 8003010:	4618      	mov	r0, r3
 8003012:	f001 fce9 	bl	80049e8 <orientation_update>

            counter++;
 8003016:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800301a:	3301      	adds	r3, #1
 800301c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

            if (counter % 20 == 0) {
 8003020:	f8d7 11fc 	ldr.w	r1, [r7, #508]	; 0x1fc
 8003024:	4b8c      	ldr	r3, [pc, #560]	; (8003258 <loraOrientation+0x3b8>)
 8003026:	fba3 2301 	umull	r2, r3, r3, r1
 800302a:	091a      	lsrs	r2, r3, #4
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	1aca      	subs	r2, r1, r3
 8003036:	2a00      	cmp	r2, #0
 8003038:	d16e      	bne.n	8003118 <loraOrientation+0x278>
                data[0] = ori.orientationQuat.w;
 800303a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
                data[1] = ori.orientationQuat.v[0];
 8003044:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
                data[2] = ori.orientationQuat.v[1];
 800304e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
                data[3] = ori.orientationQuat.v[2];
 8003058:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003062:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd fa8e 	bl	8000588 <__aeabi_f2d>
 800306c:	4682      	mov	sl, r0
 800306e:	468b      	mov	fp, r1
                        data[1], data[2], data[3]);
 8003070:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003074:	4618      	mov	r0, r3
 8003076:	f7fd fa87 	bl	8000588 <__aeabi_f2d>
 800307a:	4604      	mov	r4, r0
 800307c:	460d      	mov	r5, r1
                        data[1], data[2], data[3]);
 800307e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fa80 	bl	8000588 <__aeabi_f2d>
 8003088:	4680      	mov	r8, r0
 800308a:	4689      	mov	r9, r1
                        data[1], data[2], data[3]);
 800308c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
                sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n", data[0],
 8003090:	4618      	mov	r0, r3
 8003092:	f7fd fa79 	bl	8000588 <__aeabi_f2d>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 800309e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80030a2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80030a6:	e9cd 4500 	strd	r4, r5, [sp]
 80030aa:	4652      	mov	r2, sl
 80030ac:	465b      	mov	r3, fp
 80030ae:	496b      	ldr	r1, [pc, #428]	; (800325c <loraOrientation+0x3bc>)
 80030b0:	f00f fae6 	bl	8012680 <siprintf>
                //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
                CDC_Transmit_FS((uint8_t*) printBuffer,
                        MIN(strlen(printBuffer), 128));
 80030b4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fd f8a9 	bl	8000210 <strlen>
 80030be:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 80030c0:	2b7f      	cmp	r3, #127	; 0x7f
 80030c2:	d807      	bhi.n	80030d4 <loraOrientation+0x234>
                        MIN(strlen(printBuffer), 128));
 80030c4:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd f8a1 	bl	8000210 <strlen>
 80030ce:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) printBuffer,
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	e000      	b.n	80030d6 <loraOrientation+0x236>
 80030d4:	2380      	movs	r3, #128	; 0x80
 80030d6:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 80030da:	4619      	mov	r1, r3
 80030dc:	4610      	mov	r0, r2
 80030de:	f00d ff17 	bl	8010f10 <CDC_Transmit_FS>

                WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
 80030e2:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 80030e6:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 80030ea:	2310      	movs	r3, #16
 80030ec:	2100      	movs	r1, #0
 80030ee:	f7fe fe06 	bl	8001cfe <WriteBuffer>
                HAL_Delay(1);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f002 f980 	bl	80053f8 <HAL_Delay>
                ClrIrqStatus(&radio, 1); // clear txdone irq
 80030f8:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 80030fc:	2101      	movs	r1, #1
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fea0 	bl	8001e44 <ClrIrqStatus>
                HAL_Delay(1);
 8003104:	2001      	movs	r0, #1
 8003106:	f002 f977 	bl	80053f8 <HAL_Delay>
                SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 800310a:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800310e:	2232      	movs	r2, #50	; 0x32
 8003110:	2102      	movs	r1, #2
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe feb1 	bl	8001e7a <SetTx>
            }

            HAL_Delay(1);
 8003118:	2001      	movs	r0, #1
 800311a:	f002 f96d 	bl	80053f8 <HAL_Delay>
            LSM_pollsensors(&imu);
 800311e:	e737      	b.n	8002f90 <loraOrientation+0xf0>

        }
    } else {
        // rx mode
        SetDioIrqParams(&radio, 1 << 1, 1 << 1, 0, 0); //rxdone on gpio1
 8003120:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8003124:	2300      	movs	r3, #0
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	2300      	movs	r3, #0
 800312a:	2202      	movs	r2, #2
 800312c:	2102      	movs	r1, #2
 800312e:	f7fe fe4f 	bl	8001dd0 <SetDioIrqParams>
        HAL_Delay(1);
 8003132:	2001      	movs	r0, #1
 8003134:	f002 f960 	bl	80053f8 <HAL_Delay>

        uint8_t rxStartBufferPointer = 1;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 31f7 	strb.w	r3, [r7, #503]	; 0x1f7

        changeLed(0, 100, 0);
 800313e:	2200      	movs	r2, #0
 8003140:	2164      	movs	r1, #100	; 0x64
 8003142:	2000      	movs	r0, #0
 8003144:	f000 feec 	bl	8003f20 <changeLed>
        while (1) {

            //SetRx(0x00, 0xffff); // continous rx
            SetRx(&radio, 0x00, 0); // No timeout
 8003148:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800314c:	2200      	movs	r2, #0
 800314e:	2100      	movs	r1, #0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fe feb1 	bl	8001eb8 <SetRx>
            //SetRx(0x02, 200); // 200 ms timeout
            HAL_Delay(1);
 8003156:	2001      	movs	r0, #1
 8003158:	f002 f94e 	bl	80053f8 <HAL_Delay>
            // wait for reception:
            while (!HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 800315c:	bf00      	nop
 800315e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003162:	4839      	ldr	r0, [pc, #228]	; (8003248 <loraOrientation+0x3a8>)
 8003164:	f002 ffa8 	bl	80060b8 <HAL_GPIO_ReadPin>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f7      	beq.n	800315e <loraOrientation+0x2be>
            }

            GetPacketStatusLora(&radio);
 800316e:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 8003172:	4618      	mov	r0, r3
 8003174:	f7fe febf 	bl	8001ef6 <GetPacketStatusLora>
            ClrIrqStatus(&radio, 1 << 1); // clear rxdone Irq
 8003178:	f507 73de 	add.w	r3, r7, #444	; 0x1bc
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f7fe fe60 	bl	8001e44 <ClrIrqStatus>
            HAL_Delay(1);
 8003184:	2001      	movs	r0, #1
 8003186:	f002 f937 	bl	80053f8 <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(data),
 800318a:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800318e:	f897 11f7 	ldrb.w	r1, [r7, #503]	; 0x1f7
 8003192:	f507 70de 	add.w	r0, r7, #444	; 0x1bc
 8003196:	2210      	movs	r2, #16
 8003198:	f7fe fde5 	bl	8001d66 <ReadBuffer>
                    (uint8_t*) data);
            snprintf(printBuffer, 128,
                    "Quaternion: %f, %f, %f, %f, RSSI: %f, SNR: %f\r\n",
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 800319c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
            snprintf(printBuffer, 128,
 80031a0:	4618      	mov	r0, r3
 80031a2:	f7fd f9f1 	bl	8000588 <__aeabi_f2d>
 80031a6:	4604      	mov	r4, r0
 80031a8:	460d      	mov	r5, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80031aa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
            snprintf(printBuffer, 128,
 80031ae:	4618      	mov	r0, r3
 80031b0:	f7fd f9ea 	bl	8000588 <__aeabi_f2d>
 80031b4:	4680      	mov	r8, r0
 80031b6:	4689      	mov	r9, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80031b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
            snprintf(printBuffer, 128,
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fd f9e3 	bl	8000588 <__aeabi_f2d>
 80031c2:	4682      	mov	sl, r0
 80031c4:	468b      	mov	fp, r1
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80031c6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
            snprintf(printBuffer, 128,
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9dc 	bl	8000588 <__aeabi_f2d>
 80031d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80031d4:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
            snprintf(printBuffer, 128,
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9d5 	bl	8000588 <__aeabi_f2d>
 80031de:	e9c7 0100 	strd	r0, r1, [r7]
                    data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
 80031e2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
            snprintf(printBuffer, 128,
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd f9ce 	bl	8000588 <__aeabi_f2d>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 80031f4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80031f8:	ed97 7b00 	vldr	d7, [r7]
 80031fc:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003200:	ed97 7b02 	vldr	d7, [r7, #8]
 8003204:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003208:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800320c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003210:	e9cd 4500 	strd	r4, r5, [sp]
 8003214:	4a12      	ldr	r2, [pc, #72]	; (8003260 <loraOrientation+0x3c0>)
 8003216:	2180      	movs	r1, #128	; 0x80
 8003218:	f00f f9fe 	bl	8012618 <sniprintf>
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 800321c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8003220:	4618      	mov	r0, r3
 8003222:	f7fc fff5 	bl	8000210 <strlen>
 8003226:	4603      	mov	r3, r0
 8003228:	b29a      	uxth	r2, r3
 800322a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800322e:	4611      	mov	r1, r2
 8003230:	4618      	mov	r0, r3
 8003232:	f00d fe6d 	bl	8010f10 <CDC_Transmit_FS>
            HAL_Delay(1);
 8003236:	2001      	movs	r0, #1
 8003238:	f002 f8de 	bl	80053f8 <HAL_Delay>
            SetRx(&radio, 0x00, 0); // No timeout
 800323c:	e784      	b.n	8003148 <loraOrientation+0x2a8>
 800323e:	bf00      	nop
 8003240:	40020000 	.word	0x40020000
 8003244:	200046d0 	.word	0x200046d0
 8003248:	40020800 	.word	0x40020800
 800324c:	40020400 	.word	0x40020400
 8003250:	20004634 	.word	0x20004634
 8003254:	408f4000 	.word	0x408f4000
 8003258:	cccccccd 	.word	0xcccccccd
 800325c:	08016fa0 	.word	0x08016fa0
 8003260:	08016fc0 	.word	0x08016fc0

08003264 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 8003268:	2214      	movs	r2, #20
 800326a:	2122      	movs	r1, #34	; 0x22
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	f000 fe57 	bl	8003f20 <changeLed>

    changeLed(255, 0, 0);
 8003272:	2200      	movs	r2, #0
 8003274:	2100      	movs	r1, #0
 8003276:	20ff      	movs	r0, #255	; 0xff
 8003278:	f000 fe52 	bl	8003f20 <changeLed>
    playtone(1046, 100, 10);
 800327c:	220a      	movs	r2, #10
 800327e:	2164      	movs	r1, #100	; 0x64
 8003280:	f240 4016 	movw	r0, #1046	; 0x416
 8003284:	f000 fd54 	bl	8003d30 <playtone>
    HAL_Delay(100);
 8003288:	2064      	movs	r0, #100	; 0x64
 800328a:	f002 f8b5 	bl	80053f8 <HAL_Delay>
    changeLed(0, 255, 0);
 800328e:	2200      	movs	r2, #0
 8003290:	21ff      	movs	r1, #255	; 0xff
 8003292:	2000      	movs	r0, #0
 8003294:	f000 fe44 	bl	8003f20 <changeLed>
    playtone(1319, 100, 10);
 8003298:	220a      	movs	r2, #10
 800329a:	2164      	movs	r1, #100	; 0x64
 800329c:	f240 5027 	movw	r0, #1319	; 0x527
 80032a0:	f000 fd46 	bl	8003d30 <playtone>
    return;
 80032a4:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 80032a6:	bd80      	pop	{r7, pc}

080032a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ac:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 80032b0:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032b2:	f002 f85f 	bl	8005374 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032b6:	f000 f99f 	bl	80035f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032ba:	f000 fc4d 	bl	8003b58 <MX_GPIO_Init>
  MX_TIM3_Init();
 80032be:	f000 fbb1 	bl	8003a24 <MX_TIM3_Init>
  MX_SPI2_Init();
 80032c2:	f000 faeb 	bl	800389c <MX_SPI2_Init>
  MX_SPI3_Init();
 80032c6:	f000 fb1f 	bl	8003908 <MX_SPI3_Init>
  MX_TIM2_Init();
 80032ca:	f000 fb53 	bl	8003974 <MX_TIM2_Init>
  MX_SPI1_Init();
 80032ce:	f000 faaf 	bl	8003830 <MX_SPI1_Init>
  MX_FATFS_Init();
 80032d2:	f009 f8ed 	bl	800c4b0 <MX_FATFS_Init>
  MX_I2C3_Init();
 80032d6:	f000 fa7d 	bl	80037d4 <MX_I2C3_Init>
  MX_ADC1_Init();
 80032da:	f000 fa29 	bl	8003730 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80032de:	210c      	movs	r1, #12
 80032e0:	48b3      	ldr	r0, [pc, #716]	; (80035b0 <main+0x308>)
 80032e2:	f006 ff39 	bl	800a158 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80032e6:	2104      	movs	r1, #4
 80032e8:	48b1      	ldr	r0, [pc, #708]	; (80035b0 <main+0x308>)
 80032ea:	f006 ff35 	bl	800a158 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80032ee:	2108      	movs	r1, #8
 80032f0:	48af      	ldr	r0, [pc, #700]	; (80035b0 <main+0x308>)
 80032f2:	f006 ff31 	bl	800a158 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80032f6:	2100      	movs	r1, #0
 80032f8:	48ad      	ldr	r0, [pc, #692]	; (80035b0 <main+0x308>)
 80032fa:	f006 ff2d 	bl	800a158 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80032fe:	210c      	movs	r1, #12
 8003300:	48ac      	ldr	r0, [pc, #688]	; (80035b4 <main+0x30c>)
 8003302:	f006 ff29 	bl	800a158 <HAL_TIM_PWM_Start>

    startupMusic();
 8003306:	f7ff ffad 	bl	8003264 <startupMusic>
    //while (1) {rick();}

    changeLed(90, 0, 0);
 800330a:	2200      	movs	r2, #0
 800330c:	2100      	movs	r1, #0
 800330e:	205a      	movs	r0, #90	; 0x5a
 8003310:	f000 fe06 	bl	8003f20 <changeLed>

    htim3.Instance->CCR2 = 0;
 8003314:	4ba6      	ldr	r3, [pc, #664]	; (80035b0 <main+0x308>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2200      	movs	r2, #0
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800331c:	4ba4      	ldr	r3, [pc, #656]	; (80035b0 <main+0x308>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	22ff      	movs	r2, #255	; 0xff
 8003322:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8003324:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003328:	f002 f866 	bl	80053f8 <HAL_Delay>

    //BWtest();
    uint8_t is_tx = 1;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    //loraTesting(is_tx);
    // setting to go into ground station mode
    if (!is_tx) {
 8003332:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <main+0x9c>
        loraOrientation(is_tx);
 800333a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff fdae 	bl	8002ea0 <loraOrientation>
    }
    //servoToggleTest();

    // LSM6dso setup
    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 8003344:	f507 70a6 	add.w	r0, r7, #332	; 0x14c
 8003348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800334c:	4a9a      	ldr	r2, [pc, #616]	; (80035b8 <main+0x310>)
 800334e:	499b      	ldr	r1, [pc, #620]	; (80035bc <main+0x314>)
 8003350:	f7fd feba 	bl	80010c8 <LSM_init>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e
    SPI2_NSS_Pin);

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 800335a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800335e:	2277      	movs	r2, #119	; 0x77
 8003360:	4997      	ldr	r1, [pc, #604]	; (80035c0 <main+0x318>)
 8003362:	4618      	mov	r0, r3
 8003364:	f7fe f8b6 	bl	80014d4 <SPL06_Init>
 8003368:	4603      	mov	r3, r0
 800336a:	f887 324d 	strb.w	r3, [r7, #589]	; 0x24d

    if (barostatus != 5) {
 800336e:	f897 324d 	ldrb.w	r3, [r7, #589]	; 0x24d
 8003372:	2b05      	cmp	r3, #5
 8003374:	d010      	beq.n	8003398 <main+0xf0>
        while (1) {

            HAL_Delay(100);
 8003376:	2064      	movs	r0, #100	; 0x64
 8003378:	f002 f83e 	bl	80053f8 <HAL_Delay>
            changeLed(100, 0, 0);
 800337c:	2200      	movs	r2, #0
 800337e:	2100      	movs	r1, #0
 8003380:	2064      	movs	r0, #100	; 0x64
 8003382:	f000 fdcd 	bl	8003f20 <changeLed>
            HAL_Delay(100);
 8003386:	2064      	movs	r0, #100	; 0x64
 8003388:	f002 f836 	bl	80053f8 <HAL_Delay>
            changeLed(0, 0, 0);
 800338c:	2200      	movs	r2, #0
 800338e:	2100      	movs	r1, #0
 8003390:	2000      	movs	r0, #0
 8003392:	f000 fdc5 	bl	8003f20 <changeLed>
            HAL_Delay(100);
 8003396:	e7ee      	b.n	8003376 <main+0xce>
        }
    }

    //SDTesting();

    float yrot = 0;
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    uint32_t lasttime = HAL_GetTick();
 80033a0:	f002 f81e 	bl	80053e0 <HAL_GetTick>
 80033a4:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
    uint32_t nowtime = HAL_GetTick();
 80033a8:	f002 f81a 	bl	80053e0 <HAL_GetTick>
 80033ac:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
    float dt = 0;
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    uint16_t rawadc;

    Orientation ori;
    orientation_init(&ori);
 80033b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 fab4 	bl	800492a <orientation_init>
    uint32_t counter = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BuzzerQueue */
  osMessageQDef(BuzzerQueue, 6, uint16_t);
 80033c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033cc:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <main+0x31c>)
 80033ce:	461c      	mov	r4, r3
 80033d0:	4613      	mov	r3, r2
 80033d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80033d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BuzzerQueueHandle = osMessageCreate(osMessageQ(BuzzerQueue), NULL);
 80033d8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80033dc:	2100      	movs	r1, #0
 80033de:	4618      	mov	r0, r3
 80033e0:	f00b fadc 	bl	800e99c <osMessageCreate>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b78      	ldr	r3, [pc, #480]	; (80035c8 <main+0x320>)
 80033e8:	601a      	str	r2, [r3, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 80033ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033ee:	4a77      	ldr	r2, [pc, #476]	; (80035cc <main+0x324>)
 80033f0:	461c      	mov	r4, r3
 80033f2:	4615      	mov	r5, r2
 80033f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80033f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80033f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80033fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8003400:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003404:	2100      	movs	r1, #0
 8003406:	4618      	mov	r0, r3
 8003408:	f00b fa68 	bl	800e8dc <osThreadCreate>
 800340c:	4602      	mov	r2, r0
 800340e:	4b70      	ldr	r3, [pc, #448]	; (80035d0 <main+0x328>)
 8003410:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8003412:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003416:	4a6f      	ldr	r2, [pc, #444]	; (80035d4 <main+0x32c>)
 8003418:	461c      	mov	r4, r3
 800341a:	4615      	mov	r5, r2
 800341c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800341e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003420:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8003428:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f00b fa54 	bl	800e8dc <osThreadCreate>
 8003434:	4602      	mov	r2, r0
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <main+0x330>)
 8003438:	601a      	str	r2, [r3, #0]

  /* definition and creation of stateMachineTas */
  osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 800343a:	f107 031c 	add.w	r3, r7, #28
 800343e:	4a67      	ldr	r2, [pc, #412]	; (80035dc <main+0x334>)
 8003440:	461c      	mov	r4, r3
 8003442:	4615      	mov	r5, r2
 8003444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800344c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 8003450:	f107 031c 	add.w	r3, r7, #28
 8003454:	2100      	movs	r1, #0
 8003456:	4618      	mov	r0, r3
 8003458:	f00b fa40 	bl	800e8dc <osThreadCreate>
 800345c:	4602      	mov	r2, r0
 800345e:	4b60      	ldr	r3, [pc, #384]	; (80035e0 <main+0x338>)
 8003460:	601a      	str	r2, [r3, #0]

  /* definition and creation of telemTask */
  osThreadDef(telemTask, StartTelemTask, osPriorityNormal, 0, 256);
 8003462:	463b      	mov	r3, r7
 8003464:	4a5f      	ldr	r2, [pc, #380]	; (80035e4 <main+0x33c>)
 8003466:	461c      	mov	r4, r3
 8003468:	4615      	mov	r5, r2
 800346a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800346c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800346e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemTaskHandle = osThreadCreate(osThread(telemTask), NULL);
 8003476:	463b      	mov	r3, r7
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f00b fa2e 	bl	800e8dc <osThreadCreate>
 8003480:	4602      	mov	r2, r0
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <main+0x340>)
 8003484:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8003486:	f00b fa12 	bl	800e8ae <osKernelStart>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
        //SPL06_Read(&baro);
        LSM_pollsensors(&imu);
 800348a:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fe94 	bl	80011bc <LSM_pollsensors>
        //sprintf(printBuffer, "gx: %f, gy: %f, gz: %f\r\n", imu.gyroRPS[0], imu.gyroRPS[1], imu.gyroRPS[2]);
        //sprintf(printBuffer, "y:%f,o:%f,g:%f,V:%d\r\n", yrot, imu.gyroDPSOffset[1],
        //        imu.gyroDPS[1], rawadc);
        //sprintf(printBuffer, "T:%f\r\n", (float) (25 + (((rawadc - 943) * 3.3 / 4096.0)) / 0.0025));

        changeLed(0, 0, 100);
 8003494:	2264      	movs	r2, #100	; 0x64
 8003496:	2100      	movs	r1, #0
 8003498:	2000      	movs	r0, #0
 800349a:	f000 fd41 	bl	8003f20 <changeLed>
        nowtime = HAL_GetTick();
 800349e:	f001 ff9f 	bl	80053e0 <HAL_GetTick>
 80034a2:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
        dt = (nowtime - lasttime) / 1000.0;
 80034a6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80034aa:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7fd f847 	bl	8000544 <__aeabi_ui2d>
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	4b4c      	ldr	r3, [pc, #304]	; (80035ec <main+0x344>)
 80034bc:	f7fd f9e6 	bl	800088c <__aeabi_ddiv>
 80034c0:	4603      	mov	r3, r0
 80034c2:	460c      	mov	r4, r1
 80034c4:	4618      	mov	r0, r3
 80034c6:	4621      	mov	r1, r4
 80034c8:	f7fd fbae 	bl	8000c28 <__aeabi_d2f>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
        lasttime = nowtime;
 80034d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80034d6:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

        orientation_setGyro(&ori, imu.gyroRPS);
 80034da:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80034de:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80034e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034e6:	4611      	mov	r1, r2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fa4c 	bl	8004986 <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 80034ee:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 80034f2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80034f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80034fa:	4611      	mov	r1, r2
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 fa59 	bl	80049b4 <orientation_setAcc>
        orientation_update(&ori, dt);
 8003502:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003506:	ed97 0a90 	vldr	s0, [r7, #576]	; 0x240
 800350a:	4618      	mov	r0, r3
 800350c:	f001 fa6c 	bl	80049e8 <orientation_update>

        //sprintf(printBuffer, "z:%f,y:%f,x:%f\r\n", ori.eulerZYX[0], ori.eulerZYX[1], ori.eulerZYX[2]);
        if (counter % 30 == 0) {
 8003510:	f8d7 1250 	ldr.w	r1, [r7, #592]	; 0x250
 8003514:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <main+0x348>)
 8003516:	fba3 2301 	umull	r2, r3, r3, r1
 800351a:	091a      	lsrs	r2, r3, #4
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	1aca      	subs	r2, r1, r3
 8003526:	2a00      	cmp	r2, #0
 8003528:	d139      	bne.n	800359e <main+0x2f6>
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 800352a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800352e:	681b      	ldr	r3, [r3, #0]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8003530:	4618      	mov	r0, r3
 8003532:	f7fd f829 	bl	8000588 <__aeabi_f2d>
 8003536:	4682      	mov	sl, r0
 8003538:	468b      	mov	fp, r1
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 800353a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800353e:	685b      	ldr	r3, [r3, #4]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8003540:	4618      	mov	r0, r3
 8003542:	f7fd f821 	bl	8000588 <__aeabi_f2d>
 8003546:	4604      	mov	r4, r0
 8003548:	460d      	mov	r5, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 800354a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800354e:	689b      	ldr	r3, [r3, #8]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd f819 	bl	8000588 <__aeabi_f2d>
 8003556:	4680      	mov	r8, r0
 8003558:	4689      	mov	r9, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 800355a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800355e:	68db      	ldr	r3, [r3, #12]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd f811 	bl	8000588 <__aeabi_f2d>
 8003566:	4602      	mov	r2, r0
 8003568:	460b      	mov	r3, r1
 800356a:	f507 70e0 	add.w	r0, r7, #448	; 0x1c0
 800356e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003572:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003576:	e9cd 4500 	strd	r4, r5, [sp]
 800357a:	4652      	mov	r2, sl
 800357c:	465b      	mov	r3, fp
 800357e:	491d      	ldr	r1, [pc, #116]	; (80035f4 <main+0x34c>)
 8003580:	f00f f87e 	bl	8012680 <siprintf>
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.horQuat.w,ori.horQuat.v[0],ori.horQuat.v[1],ori.horQuat.v[2]);
            //sprintf(printBuffer, "Counter: %d\r\n",counter);
            //sprintf(printBuffer, "gx: %d, gy: %d, gz: %d\r\n", imu.rawGyro[0], imu.rawGyro[1], imu.rawGyro[2]);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 8003584:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc fe41 	bl	8000210 <strlen>
 800358e:	4603      	mov	r3, r0
 8003590:	b29a      	uxth	r2, r3
 8003592:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f00d fcb9 	bl	8010f10 <CDC_Transmit_FS>
        }
        counter++;
 800359e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80035a2:	3301      	adds	r3, #1
 80035a4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

        HAL_Delay(1);
 80035a8:	2001      	movs	r0, #1
 80035aa:	f001 ff25 	bl	80053f8 <HAL_Delay>
        LSM_pollsensors(&imu);
 80035ae:	e76c      	b.n	800348a <main+0x1e2>
 80035b0:	20004690 	.word	0x20004690
 80035b4:	200047d0 	.word	0x200047d0
 80035b8:	40020400 	.word	0x40020400
 80035bc:	20004634 	.word	0x20004634
 80035c0:	200045e0 	.word	0x200045e0
 80035c4:	080171d4 	.word	0x080171d4
 80035c8:	20004770 	.word	0x20004770
 80035cc:	080171ec 	.word	0x080171ec
 80035d0:	2000468c 	.word	0x2000468c
 80035d4:	08017214 	.word	0x08017214
 80035d8:	20004810 	.word	0x20004810
 80035dc:	08017240 	.word	0x08017240
 80035e0:	20004774 	.word	0x20004774
 80035e4:	08017268 	.word	0x08017268
 80035e8:	20004814 	.word	0x20004814
 80035ec:	408f4000 	.word	0x408f4000
 80035f0:	88888889 	.word	0x88888889
 80035f4:	08016fa0 	.word	0x08016fa0

080035f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b0ac      	sub	sp, #176	; 0xb0
 80035fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003602:	2234      	movs	r2, #52	; 0x34
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f00e f999 	bl	801193e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800360c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800361c:	f107 030c 	add.w	r3, r7, #12
 8003620:	225c      	movs	r2, #92	; 0x5c
 8003622:	2100      	movs	r1, #0
 8003624:	4618      	mov	r0, r3
 8003626:	f00e f98a 	bl	801193e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	4b3e      	ldr	r3, [pc, #248]	; (8003728 <SystemClock_Config+0x130>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a3d      	ldr	r2, [pc, #244]	; (8003728 <SystemClock_Config+0x130>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b3b      	ldr	r3, [pc, #236]	; (8003728 <SystemClock_Config+0x130>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003646:	2300      	movs	r3, #0
 8003648:	607b      	str	r3, [r7, #4]
 800364a:	4b38      	ldr	r3, [pc, #224]	; (800372c <SystemClock_Config+0x134>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a37      	ldr	r2, [pc, #220]	; (800372c <SystemClock_Config+0x134>)
 8003650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b35      	ldr	r3, [pc, #212]	; (800372c <SystemClock_Config+0x134>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003662:	2301      	movs	r3, #1
 8003664:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800366a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800366e:	2302      	movs	r3, #2
 8003670:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003674:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 800367c:	2304      	movs	r3, #4
 800367e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8003682:	23b4      	movs	r3, #180	; 0xb4
 8003684:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003688:	2302      	movs	r3, #2
 800368a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800368e:	2308      	movs	r3, #8
 8003690:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003694:	2302      	movs	r3, #2
 8003696:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800369a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800369e:	4618      	mov	r0, r3
 80036a0:	f005 fd24 	bl	80090ec <HAL_RCC_OscConfig>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80036aa:	f001 f887 	bl	80047bc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80036ae:	f004 feb7 	bl	8008420 <HAL_PWREx_EnableOverDrive>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80036b8:	f001 f880 	bl	80047bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036bc:	230f      	movs	r3, #15
 80036be:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036c0:	2302      	movs	r3, #2
 80036c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036c4:	2300      	movs	r3, #0
 80036c6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80036cc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036d2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80036d8:	2105      	movs	r1, #5
 80036da:	4618      	mov	r0, r3
 80036dc:	f004 fef0 	bl	80084c0 <HAL_RCC_ClockConfig>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80036e6:	f001 f869 	bl	80047bc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80036ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 80036f0:	2304      	movs	r3, #4
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80036f4:	2360      	movs	r3, #96	; 0x60
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80036f8:	2302      	movs	r3, #2
 80036fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 80036fc:	2304      	movs	r3, #4
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003700:	2301      	movs	r3, #1
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8003704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003708:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800370a:	f107 030c 	add.w	r3, r7, #12
 800370e:	4618      	mov	r0, r3
 8003710:	f005 f822 	bl	8008758 <HAL_RCCEx_PeriphCLKConfig>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <SystemClock_Config+0x126>
  {
    Error_Handler();
 800371a:	f001 f84f 	bl	80047bc <Error_Handler>
  }
}
 800371e:	bf00      	nop
 8003720:	37b0      	adds	r7, #176	; 0xb0
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	40007000 	.word	0x40007000

08003730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003736:	463b      	mov	r3, r7
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	609a      	str	r2, [r3, #8]
 8003740:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003744:	4a21      	ldr	r2, [pc, #132]	; (80037cc <MX_ADC1_Init+0x9c>)
 8003746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003748:	4b1f      	ldr	r3, [pc, #124]	; (80037c8 <MX_ADC1_Init+0x98>)
 800374a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800374e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003750:	4b1d      	ldr	r3, [pc, #116]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003758:	2200      	movs	r2, #0
 800375a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800375c:	4b1a      	ldr	r3, [pc, #104]	; (80037c8 <MX_ADC1_Init+0x98>)
 800375e:	2200      	movs	r2, #0
 8003760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003762:	4b19      	ldr	r3, [pc, #100]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800376a:	4b17      	ldr	r3, [pc, #92]	; (80037c8 <MX_ADC1_Init+0x98>)
 800376c:	2200      	movs	r2, #0
 800376e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003772:	4a17      	ldr	r2, [pc, #92]	; (80037d0 <MX_ADC1_Init+0xa0>)
 8003774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003776:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003778:	2200      	movs	r2, #0
 800377a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800377c:	4b12      	ldr	r3, [pc, #72]	; (80037c8 <MX_ADC1_Init+0x98>)
 800377e:	2201      	movs	r2, #1
 8003780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003782:	4b11      	ldr	r3, [pc, #68]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800378a:	4b0f      	ldr	r3, [pc, #60]	; (80037c8 <MX_ADC1_Init+0x98>)
 800378c:	2201      	movs	r2, #1
 800378e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003790:	480d      	ldr	r0, [pc, #52]	; (80037c8 <MX_ADC1_Init+0x98>)
 8003792:	f001 fe53 	bl	800543c <HAL_ADC_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800379c:	f001 f80e 	bl	80047bc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80037a0:	230c      	movs	r3, #12
 80037a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037a4:	2301      	movs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037ac:	463b      	mov	r3, r7
 80037ae:	4619      	mov	r1, r3
 80037b0:	4805      	ldr	r0, [pc, #20]	; (80037c8 <MX_ADC1_Init+0x98>)
 80037b2:	f001 ffdf 	bl	8005774 <HAL_ADC_ConfigChannel>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80037bc:	f000 fffe 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	20004728 	.word	0x20004728
 80037cc:	40012000 	.word	0x40012000
 80037d0:	0f000001 	.word	0x0f000001

080037d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80037d8:	4b12      	ldr	r3, [pc, #72]	; (8003824 <MX_I2C3_Init+0x50>)
 80037da:	4a13      	ldr	r2, [pc, #76]	; (8003828 <MX_I2C3_Init+0x54>)
 80037dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80037de:	4b11      	ldr	r3, [pc, #68]	; (8003824 <MX_I2C3_Init+0x50>)
 80037e0:	4a12      	ldr	r2, [pc, #72]	; (800382c <MX_I2C3_Init+0x58>)
 80037e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037e4:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <MX_I2C3_Init+0x50>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80037ea:	4b0e      	ldr	r3, [pc, #56]	; (8003824 <MX_I2C3_Init+0x50>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037f0:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <MX_I2C3_Init+0x50>)
 80037f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037f8:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <MX_I2C3_Init+0x50>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80037fe:	4b09      	ldr	r3, [pc, #36]	; (8003824 <MX_I2C3_Init+0x50>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003804:	4b07      	ldr	r3, [pc, #28]	; (8003824 <MX_I2C3_Init+0x50>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <MX_I2C3_Init+0x50>)
 800380c:	2200      	movs	r2, #0
 800380e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003810:	4804      	ldr	r0, [pc, #16]	; (8003824 <MX_I2C3_Init+0x50>)
 8003812:	f002 fc83 	bl	800611c <HAL_I2C_Init>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800381c:	f000 ffce 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003820:	bf00      	nop
 8003822:	bd80      	pop	{r7, pc}
 8003824:	200045e0 	.word	0x200045e0
 8003828:	40005c00 	.word	0x40005c00
 800382c:	000186a0 	.word	0x000186a0

08003830 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <MX_SPI1_Init+0x64>)
 8003836:	4a18      	ldr	r2, [pc, #96]	; (8003898 <MX_SPI1_Init+0x68>)
 8003838:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800383a:	4b16      	ldr	r3, [pc, #88]	; (8003894 <MX_SPI1_Init+0x64>)
 800383c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003840:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <MX_SPI1_Init+0x64>)
 8003844:	2200      	movs	r2, #0
 8003846:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003848:	4b12      	ldr	r3, [pc, #72]	; (8003894 <MX_SPI1_Init+0x64>)
 800384a:	2200      	movs	r2, #0
 800384c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <MX_SPI1_Init+0x64>)
 8003850:	2200      	movs	r2, #0
 8003852:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003854:	4b0f      	ldr	r3, [pc, #60]	; (8003894 <MX_SPI1_Init+0x64>)
 8003856:	2200      	movs	r2, #0
 8003858:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <MX_SPI1_Init+0x64>)
 800385c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003860:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003862:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <MX_SPI1_Init+0x64>)
 8003864:	2238      	movs	r2, #56	; 0x38
 8003866:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <MX_SPI1_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <MX_SPI1_Init+0x64>)
 8003870:	2200      	movs	r2, #0
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <MX_SPI1_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800387a:	4b06      	ldr	r3, [pc, #24]	; (8003894 <MX_SPI1_Init+0x64>)
 800387c:	220a      	movs	r2, #10
 800387e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003880:	4804      	ldr	r0, [pc, #16]	; (8003894 <MX_SPI1_Init+0x64>)
 8003882:	f005 fe8d 	bl	80095a0 <HAL_SPI_Init>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800388c:	f000 ff96 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003890:	bf00      	nop
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20004778 	.word	0x20004778
 8003898:	40013000 	.word	0x40013000

0800389c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80038a0:	4b17      	ldr	r3, [pc, #92]	; (8003900 <MX_SPI2_Init+0x64>)
 80038a2:	4a18      	ldr	r2, [pc, #96]	; (8003904 <MX_SPI2_Init+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80038a6:	4b16      	ldr	r3, [pc, #88]	; (8003900 <MX_SPI2_Init+0x64>)
 80038a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80038ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80038ae:	4b14      	ldr	r3, [pc, #80]	; (8003900 <MX_SPI2_Init+0x64>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80038b4:	4b12      	ldr	r3, [pc, #72]	; (8003900 <MX_SPI2_Init+0x64>)
 80038b6:	2200      	movs	r2, #0
 80038b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <MX_SPI2_Init+0x64>)
 80038bc:	2200      	movs	r2, #0
 80038be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038c0:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <MX_SPI2_Init+0x64>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <MX_SPI2_Init+0x64>)
 80038c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80038ce:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <MX_SPI2_Init+0x64>)
 80038d0:	2210      	movs	r2, #16
 80038d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038d4:	4b0a      	ldr	r3, [pc, #40]	; (8003900 <MX_SPI2_Init+0x64>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <MX_SPI2_Init+0x64>)
 80038dc:	2200      	movs	r2, #0
 80038de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <MX_SPI2_Init+0x64>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038e6:	4b06      	ldr	r3, [pc, #24]	; (8003900 <MX_SPI2_Init+0x64>)
 80038e8:	220a      	movs	r2, #10
 80038ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038ec:	4804      	ldr	r0, [pc, #16]	; (8003900 <MX_SPI2_Init+0x64>)
 80038ee:	f005 fe57 	bl	80095a0 <HAL_SPI_Init>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80038f8:	f000 ff60 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038fc:	bf00      	nop
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	20004634 	.word	0x20004634
 8003904:	40003800 	.word	0x40003800

08003908 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <MX_SPI3_Init+0x64>)
 800390e:	4a18      	ldr	r2, [pc, #96]	; (8003970 <MX_SPI3_Init+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <MX_SPI3_Init+0x64>)
 8003914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003918:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800391a:	4b14      	ldr	r3, [pc, #80]	; (800396c <MX_SPI3_Init+0x64>)
 800391c:	2200      	movs	r2, #0
 800391e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003920:	4b12      	ldr	r3, [pc, #72]	; (800396c <MX_SPI3_Init+0x64>)
 8003922:	2200      	movs	r2, #0
 8003924:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <MX_SPI3_Init+0x64>)
 8003928:	2200      	movs	r2, #0
 800392a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800392c:	4b0f      	ldr	r3, [pc, #60]	; (800396c <MX_SPI3_Init+0x64>)
 800392e:	2200      	movs	r2, #0
 8003930:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003932:	4b0e      	ldr	r3, [pc, #56]	; (800396c <MX_SPI3_Init+0x64>)
 8003934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003938:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <MX_SPI3_Init+0x64>)
 800393c:	2210      	movs	r2, #16
 800393e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003940:	4b0a      	ldr	r3, [pc, #40]	; (800396c <MX_SPI3_Init+0x64>)
 8003942:	2200      	movs	r2, #0
 8003944:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003946:	4b09      	ldr	r3, [pc, #36]	; (800396c <MX_SPI3_Init+0x64>)
 8003948:	2200      	movs	r2, #0
 800394a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800394c:	4b07      	ldr	r3, [pc, #28]	; (800396c <MX_SPI3_Init+0x64>)
 800394e:	2200      	movs	r2, #0
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003952:	4b06      	ldr	r3, [pc, #24]	; (800396c <MX_SPI3_Init+0x64>)
 8003954:	220a      	movs	r2, #10
 8003956:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003958:	4804      	ldr	r0, [pc, #16]	; (800396c <MX_SPI3_Init+0x64>)
 800395a:	f005 fe21 	bl	80095a0 <HAL_SPI_Init>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003964:	f000 ff2a 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8003968:	bf00      	nop
 800396a:	bd80      	pop	{r7, pc}
 800396c:	200046d0 	.word	0x200046d0
 8003970:	40003c00 	.word	0x40003c00

08003974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800397a:	f107 0320 	add.w	r3, r7, #32
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003984:	1d3b      	adds	r3, r7, #4
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	609a      	str	r2, [r3, #8]
 800398e:	60da      	str	r2, [r3, #12]
 8003990:	611a      	str	r2, [r3, #16]
 8003992:	615a      	str	r2, [r3, #20]
 8003994:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <MX_TIM2_Init+0xac>)
 8003998:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800399c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 800399e:	4b20      	ldr	r3, [pc, #128]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039a0:	2259      	movs	r2, #89	; 0x59
 80039a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a4:	4b1e      	ldr	r3, [pc, #120]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 80039aa:	4b1d      	ldr	r3, [pc, #116]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039ac:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80039b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b2:	4b1b      	ldr	r3, [pc, #108]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b8:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80039be:	4818      	ldr	r0, [pc, #96]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039c0:	f006 fb9f 	bl	800a102 <HAL_TIM_PWM_Init>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80039ca:	f000 fef7 	bl	80047bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039d6:	f107 0320 	add.w	r3, r7, #32
 80039da:	4619      	mov	r1, r3
 80039dc:	4810      	ldr	r0, [pc, #64]	; (8003a20 <MX_TIM2_Init+0xac>)
 80039de:	f007 f9b7 	bl	800ad50 <HAL_TIMEx_MasterConfigSynchronization>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80039e8:	f000 fee8 	bl	80047bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039ec:	2360      	movs	r3, #96	; 0x60
 80039ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039f0:	2300      	movs	r3, #0
 80039f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039f4:	2300      	movs	r3, #0
 80039f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039fc:	1d3b      	adds	r3, r7, #4
 80039fe:	220c      	movs	r2, #12
 8003a00:	4619      	mov	r1, r3
 8003a02:	4807      	ldr	r0, [pc, #28]	; (8003a20 <MX_TIM2_Init+0xac>)
 8003a04:	f006 fcee 	bl	800a3e4 <HAL_TIM_PWM_ConfigChannel>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8003a0e:	f000 fed5 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003a12:	4803      	ldr	r0, [pc, #12]	; (8003a20 <MX_TIM2_Init+0xac>)
 8003a14:	f001 faa4 	bl	8004f60 <HAL_TIM_MspPostInit>

}
 8003a18:	bf00      	nop
 8003a1a:	3728      	adds	r7, #40	; 0x28
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	200047d0 	.word	0x200047d0

08003a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08e      	sub	sp, #56	; 0x38
 8003a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a38:	f107 0320 	add.w	r3, r7, #32
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
 8003a40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a42:	1d3b      	adds	r3, r7, #4
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	611a      	str	r2, [r3, #16]
 8003a50:	615a      	str	r2, [r3, #20]
 8003a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a54:	4b3e      	ldr	r3, [pc, #248]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a56:	4a3f      	ldr	r2, [pc, #252]	; (8003b54 <MX_TIM3_Init+0x130>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a5c:	2259      	movs	r2, #89	; 0x59
 8003a5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b3b      	ldr	r3, [pc, #236]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8003a66:	4b3a      	ldr	r3, [pc, #232]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a68:	22ff      	movs	r2, #255	; 0xff
 8003a6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6c:	4b38      	ldr	r3, [pc, #224]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a72:	4b37      	ldr	r3, [pc, #220]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a78:	4835      	ldr	r0, [pc, #212]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a7a:	f006 faf3 	bl	800a064 <HAL_TIM_Base_Init>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8003a84:	f000 fe9a 	bl	80047bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a92:	4619      	mov	r1, r3
 8003a94:	482e      	ldr	r0, [pc, #184]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003a96:	f006 fd6b 	bl	800a570 <HAL_TIM_ConfigClockSource>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8003aa0:	f000 fe8c 	bl	80047bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003aa4:	482a      	ldr	r0, [pc, #168]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003aa6:	f006 fb2c 	bl	800a102 <HAL_TIM_PWM_Init>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d001      	beq.n	8003ab4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8003ab0:	f000 fe84 	bl	80047bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003abc:	f107 0320 	add.w	r3, r7, #32
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4823      	ldr	r0, [pc, #140]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003ac4:	f007 f944 	bl	800ad50 <HAL_TIMEx_MasterConfigSynchronization>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8003ace:	f000 fe75 	bl	80047bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ad2:	2360      	movs	r3, #96	; 0x60
 8003ad4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003ada:	2302      	movs	r3, #2
 8003adc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ae2:	1d3b      	adds	r3, r7, #4
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4819      	ldr	r0, [pc, #100]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003aea:	f006 fc7b 	bl	800a3e4 <HAL_TIM_PWM_ConfigChannel>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8003af4:	f000 fe62 	bl	80047bc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003afc:	1d3b      	adds	r3, r7, #4
 8003afe:	2204      	movs	r2, #4
 8003b00:	4619      	mov	r1, r3
 8003b02:	4813      	ldr	r0, [pc, #76]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003b04:	f006 fc6e 	bl	800a3e4 <HAL_TIM_PWM_ConfigChannel>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8003b0e:	f000 fe55 	bl	80047bc <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8003b12:	2302      	movs	r3, #2
 8003b14:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003b16:	1d3b      	adds	r3, r7, #4
 8003b18:	2208      	movs	r2, #8
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	480c      	ldr	r0, [pc, #48]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003b1e:	f006 fc61 	bl	800a3e4 <HAL_TIM_PWM_ConfigChannel>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d001      	beq.n	8003b2c <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8003b28:	f000 fe48 	bl	80047bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003b2c:	1d3b      	adds	r3, r7, #4
 8003b2e:	220c      	movs	r2, #12
 8003b30:	4619      	mov	r1, r3
 8003b32:	4807      	ldr	r0, [pc, #28]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003b34:	f006 fc56 	bl	800a3e4 <HAL_TIM_PWM_ConfigChannel>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 8003b3e:	f000 fe3d 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003b42:	4803      	ldr	r0, [pc, #12]	; (8003b50 <MX_TIM3_Init+0x12c>)
 8003b44:	f001 fa0c 	bl	8004f60 <HAL_TIM_MspPostInit>

}
 8003b48:	bf00      	nop
 8003b4a:	3738      	adds	r7, #56	; 0x38
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20004690 	.word	0x20004690
 8003b54:	40000400 	.word	0x40000400

08003b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08a      	sub	sp, #40	; 0x28
 8003b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	605a      	str	r2, [r3, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	60da      	str	r2, [r3, #12]
 8003b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b6e:	2300      	movs	r3, #0
 8003b70:	613b      	str	r3, [r7, #16]
 8003b72:	4b6a      	ldr	r3, [pc, #424]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	4a69      	ldr	r2, [pc, #420]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8003b7e:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b86:	613b      	str	r3, [r7, #16]
 8003b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b92:	4a62      	ldr	r2, [pc, #392]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003b94:	f043 0304 	orr.w	r3, r3, #4
 8003b98:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9a:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	f003 0304 	and.w	r3, r3, #4
 8003ba2:	60fb      	str	r3, [r7, #12]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	4b5c      	ldr	r3, [pc, #368]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4a5b      	ldr	r2, [pc, #364]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb6:	4b59      	ldr	r3, [pc, #356]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	60bb      	str	r3, [r7, #8]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	4b55      	ldr	r3, [pc, #340]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a54      	ldr	r2, [pc, #336]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b52      	ldr	r3, [pc, #328]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	607b      	str	r3, [r7, #4]
 8003bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bde:	2300      	movs	r3, #0
 8003be0:	603b      	str	r3, [r7, #0]
 8003be2:	4b4e      	ldr	r3, [pc, #312]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be6:	4a4d      	ldr	r2, [pc, #308]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003be8:	f043 0308 	orr.w	r3, r3, #8
 8003bec:	6313      	str	r3, [r2, #48]	; 0x30
 8003bee:	4b4b      	ldr	r3, [pc, #300]	; (8003d1c <MX_GPIO_Init+0x1c4>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f003 0308 	and.w	r3, r3, #8
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2110      	movs	r1, #16
 8003bfe:	4848      	ldr	r0, [pc, #288]	; (8003d20 <MX_GPIO_Init+0x1c8>)
 8003c00:	f002 fa72 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8003c04:	2200      	movs	r2, #0
 8003c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c0a:	4846      	ldr	r0, [pc, #280]	; (8003d24 <MX_GPIO_Init+0x1cc>)
 8003c0c:	f002 fa6c 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8003c10:	2200      	movs	r2, #0
 8003c12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c16:	4844      	ldr	r0, [pc, #272]	; (8003d28 <MX_GPIO_Init+0x1d0>)
 8003c18:	f002 fa66 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	2140      	movs	r1, #64	; 0x40
 8003c20:	4840      	ldr	r0, [pc, #256]	; (8003d24 <MX_GPIO_Init+0x1cc>)
 8003c22:	f002 fa61 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RBF_Pin */
  GPIO_InitStruct.Pin = RBF_Pin;
 8003c26:	2301      	movs	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RBF_GPIO_Port, &GPIO_InitStruct);
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	4619      	mov	r1, r3
 8003c38:	483b      	ldr	r0, [pc, #236]	; (8003d28 <MX_GPIO_Init+0x1d0>)
 8003c3a:	f002 f8ab 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8003c3e:	2310      	movs	r3, #16
 8003c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c42:	2301      	movs	r3, #1
 8003c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8003c4e:	f107 0314 	add.w	r3, r7, #20
 8003c52:	4619      	mov	r1, r3
 8003c54:	4832      	ldr	r0, [pc, #200]	; (8003d20 <MX_GPIO_Init+0x1c8>)
 8003c56:	f002 f89d 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEBUG_Pin */
  GPIO_InitStruct.Pin = DEBUG_Pin;
 8003c5a:	2320      	movs	r3, #32
 8003c5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c62:	2301      	movs	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8003c66:	f107 0314 	add.w	r3, r7, #20
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	482c      	ldr	r0, [pc, #176]	; (8003d20 <MX_GPIO_Init+0x1c8>)
 8003c6e:	f002 f891 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 8003c72:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8003c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c80:	2300      	movs	r3, #0
 8003c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4826      	ldr	r0, [pc, #152]	; (8003d24 <MX_GPIO_Init+0x1cc>)
 8003c8c:	f002 f882 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_NSS_Pin */
  GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8003c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c96:	2301      	movs	r3, #1
 8003c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8003ca2:	f107 0314 	add.w	r3, r7, #20
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	481f      	ldr	r0, [pc, #124]	; (8003d28 <MX_GPIO_Init+0x1d0>)
 8003caa:	f002 f873 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8003cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 8003cbc:	f107 0314 	add.w	r3, r7, #20
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4817      	ldr	r0, [pc, #92]	; (8003d20 <MX_GPIO_Init+0x1c8>)
 8003cc4:	f002 f866 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8003cd4:	f107 0314 	add.w	r3, r7, #20
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4814      	ldr	r0, [pc, #80]	; (8003d2c <MX_GPIO_Init+0x1d4>)
 8003cdc:	f002 f85a 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8003ce0:	2310      	movs	r3, #16
 8003ce2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8003cec:	f107 0314 	add.w	r3, r7, #20
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	480c      	ldr	r0, [pc, #48]	; (8003d24 <MX_GPIO_Init+0x1cc>)
 8003cf4:	f002 f84e 	bl	8005d94 <HAL_GPIO_Init>

  /*Configure GPIO pins : BREAKWIRE_Pin ARM_Pin */
  GPIO_InitStruct.Pin = BREAKWIRE_Pin|ARM_Pin;
 8003cf8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003cfc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	4805      	ldr	r0, [pc, #20]	; (8003d24 <MX_GPIO_Init+0x1cc>)
 8003d0e:	f002 f841 	bl	8005d94 <HAL_GPIO_Init>

}
 8003d12:	bf00      	nop
 8003d14:	3728      	adds	r7, #40	; 0x28
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40020800 	.word	0x40020800
 8003d24:	40020400 	.word	0x40020400
 8003d28:	40020000 	.word	0x40020000
 8003d2c:	40020c00 	.word	0x40020c00

08003d30 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	80bb      	strh	r3, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8003d42:	4b37      	ldr	r3, [pc, #220]	; (8003e20 <playtone+0xf0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d48:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8003d4a:	4b35      	ldr	r3, [pc, #212]	; (8003e20 <playtone+0xf0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d50:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8003d52:	4b33      	ldr	r3, [pc, #204]	; (8003e20 <playtone+0xf0>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fc fc01 	bl	8000564 <__aeabi_i2d>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	461a      	mov	r2, r3
 8003d68:	4623      	mov	r3, r4
 8003d6a:	a12b      	add	r1, pc, #172	; (adr r1, 8003e18 <playtone+0xe8>)
 8003d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d70:	f7fc fd8c 	bl	800088c <__aeabi_ddiv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	460c      	mov	r4, r1
 8003d78:	4618      	mov	r0, r3
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	f7fc ff34 	bl	8000be8 <__aeabi_d2uiz>
 8003d80:	4603      	mov	r3, r0
 8003d82:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <playtone+0xf0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <playtone+0xf0>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	fb02 f203 	mul.w	r2, r2, r3
 8003d9c:	4b20      	ldr	r3, [pc, #128]	; (8003e20 <playtone+0xf0>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4920      	ldr	r1, [pc, #128]	; (8003e24 <playtone+0xf4>)
 8003da2:	fba1 1202 	umull	r1, r2, r1, r2
 8003da6:	0992      	lsrs	r2, r2, #6
 8003da8:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8003daa:	8afb      	ldrh	r3, [r7, #22]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	fb02 f203 	mul.w	r2, r2, r3
 8003db2:	4b1b      	ldr	r3, [pc, #108]	; (8003e20 <playtone+0xf0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	0a12      	lsrs	r2, r2, #8
 8003db8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8003dba:	8abb      	ldrh	r3, [r7, #20]
 8003dbc:	68fa      	ldr	r2, [r7, #12]
 8003dbe:	fb02 f203 	mul.w	r2, r2, r3
 8003dc2:	4b17      	ldr	r3, [pc, #92]	; (8003e20 <playtone+0xf0>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	0a12      	lsrs	r2, r2, #8
 8003dc8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8003dca:	8a7b      	ldrh	r3, [r7, #18]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	fb02 f203 	mul.w	r2, r2, r3
 8003dd2:	4b13      	ldr	r3, [pc, #76]	; (8003e20 <playtone+0xf0>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	0a12      	lsrs	r2, r2, #8
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 8003dda:	88bb      	ldrh	r3, [r7, #4]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fb0b 	bl	80053f8 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8003de2:	4b0f      	ldr	r3, [pc, #60]	; (8003e20 <playtone+0xf0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	2200      	movs	r2, #0
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <playtone+0xf0>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	22ff      	movs	r2, #255	; 0xff
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8003df2:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <playtone+0xf0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	8afa      	ldrh	r2, [r7, #22]
 8003df8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8003dfa:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <playtone+0xf0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	8aba      	ldrh	r2, [r7, #20]
 8003e00:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8003e02:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <playtone+0xf0>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	8a7a      	ldrh	r2, [r7, #18]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd90      	pop	{r4, r7, pc}
 8003e12:	bf00      	nop
 8003e14:	f3af 8000 	nop.w
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	412e8480 	.word	0x412e8480
 8003e20:	20004690 	.word	0x20004690
 8003e24:	51eb851f 	.word	0x51eb851f

08003e28 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 8003e28:	b590      	push	{r4, r7, lr}
 8003e2a:	b087      	sub	sp, #28
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	80fb      	strh	r3, [r7, #6]
 8003e32:	460b      	mov	r3, r1
 8003e34:	80bb      	strh	r3, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8003e3a:	4b37      	ldr	r3, [pc, #220]	; (8003f18 <playtoneRTOS+0xf0>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8003e42:	4b35      	ldr	r3, [pc, #212]	; (8003f18 <playtoneRTOS+0xf0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e48:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8003e4a:	4b33      	ldr	r3, [pc, #204]	; (8003f18 <playtoneRTOS+0xf0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8003e52:	88fb      	ldrh	r3, [r7, #6]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc fb85 	bl	8000564 <__aeabi_i2d>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	460c      	mov	r4, r1
 8003e5e:	461a      	mov	r2, r3
 8003e60:	4623      	mov	r3, r4
 8003e62:	a12b      	add	r1, pc, #172	; (adr r1, 8003f10 <playtoneRTOS+0xe8>)
 8003e64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e68:	f7fc fd10 	bl	800088c <__aeabi_ddiv>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	4618      	mov	r0, r3
 8003e72:	4621      	mov	r1, r4
 8003e74:	f7fc feb8 	bl	8000be8 <__aeabi_d2uiz>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8003e7c:	4b26      	ldr	r3, [pc, #152]	; (8003f18 <playtoneRTOS+0xf0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2200      	movs	r2, #0
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8003e84:	4b24      	ldr	r3, [pc, #144]	; (8003f18 <playtoneRTOS+0xf0>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	fb02 f203 	mul.w	r2, r2, r3
 8003e94:	4b20      	ldr	r3, [pc, #128]	; (8003f18 <playtoneRTOS+0xf0>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4920      	ldr	r1, [pc, #128]	; (8003f1c <playtoneRTOS+0xf4>)
 8003e9a:	fba1 1202 	umull	r1, r2, r1, r2
 8003e9e:	0992      	lsrs	r2, r2, #6
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8003ea2:	8afb      	ldrh	r3, [r7, #22]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	fb02 f203 	mul.w	r2, r2, r3
 8003eaa:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <playtoneRTOS+0xf0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	0a12      	lsrs	r2, r2, #8
 8003eb0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8003eb2:	8abb      	ldrh	r3, [r7, #20]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	fb02 f203 	mul.w	r2, r2, r3
 8003eba:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <playtoneRTOS+0xf0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	0a12      	lsrs	r2, r2, #8
 8003ec0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8003ec2:	8a7b      	ldrh	r3, [r7, #18]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	fb02 f203 	mul.w	r2, r2, r3
 8003eca:	4b13      	ldr	r3, [pc, #76]	; (8003f18 <playtoneRTOS+0xf0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	0a12      	lsrs	r2, r2, #8
 8003ed0:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 8003ed2:	88bb      	ldrh	r3, [r7, #4]
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f00a fd4d 	bl	800e974 <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <playtoneRTOS+0xf0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <playtoneRTOS+0xf0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	22ff      	movs	r2, #255	; 0xff
 8003ee8:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <playtoneRTOS+0xf0>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	8afa      	ldrh	r2, [r7, #22]
 8003ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8003ef2:	4b09      	ldr	r3, [pc, #36]	; (8003f18 <playtoneRTOS+0xf0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	8aba      	ldrh	r2, [r7, #20]
 8003ef8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8003efa:	4b07      	ldr	r3, [pc, #28]	; (8003f18 <playtoneRTOS+0xf0>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	8a7a      	ldrh	r2, [r7, #18]
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	f3af 8000 	nop.w
 8003f10:	00000000 	.word	0x00000000
 8003f14:	412e8480 	.word	0x412e8480
 8003f18:	20004690 	.word	0x20004690
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	71bb      	strb	r3, [r7, #6]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <changeLed+0x38>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	79fa      	ldrb	r2, [r7, #7]
 8003f38:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8003f3a:	4b07      	ldr	r3, [pc, #28]	; (8003f58 <changeLed+0x38>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	79ba      	ldrb	r2, [r7, #6]
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8003f42:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <changeLed+0x38>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	797a      	ldrb	r2, [r7, #5]
 8003f48:	641a      	str	r2, [r3, #64]	; 0x40

}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20004690 	.word	0x20004690

08003f5c <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003f64:	f00c ff02 	bl	8010d6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        //changeLed(0, 100, 0);
        osDelay(1000);
 8003f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f6c:	f00a fd02 	bl	800e974 <osDelay>
        //changeLed(0, 0, 100);
        osDelay(1000);
 8003f70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f74:	f00a fcfe 	bl	800e974 <osDelay>
        osDelay(1000);
 8003f78:	e7f6      	b.n	8003f68 <StartLedTask+0xc>
	...

08003f7c <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08e      	sub	sp, #56	; 0x38
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */

    uint16_t vol = 1; // 10
 8003f84:	2301      	movs	r3, #1
 8003f86:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t beatlength = 50; // determines tempo
 8003f88:	2332      	movs	r3, #50	; 0x32
 8003f8a:	847b      	strh	r3, [r7, #34]	; 0x22
    float beatseparationconstant = 0.3;
 8003f8c:	4b79      	ldr	r3, [pc, #484]	; (8004174 <StartMusicTask+0x1f8>)
 8003f8e:	61fb      	str	r3, [r7, #28]

    int a = 4; // part index
 8003f90:	2304      	movs	r3, #4
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
    int b = 0; // song index
 8003f94:	2300      	movs	r3, #0
 8003f96:	633b      	str	r3, [r7, #48]	; 0x30
    int c; // lyric index

    osEvent messagebox;
    uint16_t sounddelay;

    int ksp_playhead = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    int ksp_total = 20;
 8003f9c:	2314      	movs	r3, #20
 8003f9e:	61bb      	str	r3, [r7, #24]

    for (;;) {
        if (is_soft_enabled()) {
 8003fa0:	f7fe ff20 	bl	8002de4 <is_soft_enabled>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01c      	beq.n	8003fe4 <StartMusicTask+0x68>
            messagebox = osMessageGet(BuzzerQueueHandle, 1000);
 8003faa:	4b73      	ldr	r3, [pc, #460]	; (8004178 <StartMusicTask+0x1fc>)
 8003fac:	6819      	ldr	r1, [r3, #0]
 8003fae:	f107 0308 	add.w	r3, r7, #8
 8003fb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f00a fd5a 	bl	800ea70 <osMessageGet>
            if (messagebox.status && messagebox.value.v) {
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0ee      	beq.n	8003fa0 <StartMusicTask+0x24>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0eb      	beq.n	8003fa0 <StartMusicTask+0x24>
                sounddelay = messagebox.value.v;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	82fb      	strh	r3, [r7, #22]
                playtoneRTOS(OPTIMAL_BUZZER_FREQ, sounddelay,
 8003fcc:	8afb      	ldrh	r3, [r7, #22]
 8003fce:	2246      	movs	r2, #70	; 0x46
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003fd6:	f7ff ff27 	bl	8003e28 <playtoneRTOS>
                        OPTIMAL_BUZZER_DUTY);
                osDelay(sounddelay);
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f00a fcc9 	bl	800e974 <osDelay>
 8003fe2:	e7dd      	b.n	8003fa0 <StartMusicTask+0x24>
            }


        }
        else if (buzzer_setting == RICK){
 8003fe4:	4b65      	ldr	r3, [pc, #404]	; (800417c <StartMusicTask+0x200>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f040 80a5 	bne.w	8004138 <StartMusicTask+0x1bc>
            uint16_t notelength;
            if (a == 1 || a == 2) {
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d002      	beq.n	8003ffa <StartMusicTask+0x7e>
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d125      	bne.n	8004046 <StartMusicTask+0xca>
                // intro
                notelength = beatlength * song1_intro_rhythmn[b];
 8003ffa:	4a61      	ldr	r2, [pc, #388]	; (8004180 <StartMusicTask+0x204>)
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004002:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004004:	fb12 f303 	smulbb	r3, r2, r3
 8004008:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_intro_melody[b] > 0) {
 800400a:	4a5e      	ldr	r2, [pc, #376]	; (8004184 <StartMusicTask+0x208>)
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d009      	beq.n	800402a <StartMusicTask+0xae>
                    playtoneRTOS(song1_intro_melody[b], notelength, vol);
 8004016:	4a5b      	ldr	r2, [pc, #364]	; (8004184 <StartMusicTask+0x208>)
 8004018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800401a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800401e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004020:	b2d2      	uxtb	r2, r2
 8004022:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff feff 	bl	8003e28 <playtoneRTOS>
                }
                b++;
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	3301      	adds	r3, #1
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2b0c      	cmp	r3, #12
 8004034:	d966      	bls.n	8004104 <StartMusicTask+0x188>
                    a++;
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	3301      	adds	r3, #1
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800403c:	2300      	movs	r3, #0
 800403e:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 8004044:	e05e      	b.n	8004104 <StartMusicTask+0x188>
                }
            } else if (a == 3 || a == 5) {
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	2b03      	cmp	r3, #3
 800404a:	d002      	beq.n	8004052 <StartMusicTask+0xd6>
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	2b05      	cmp	r3, #5
 8004050:	d12a      	bne.n	80040a8 <StartMusicTask+0x12c>
                // verse
                notelength = beatlength * 2 * song1_verse1_rhythmn[b];
 8004052:	4a4d      	ldr	r2, [pc, #308]	; (8004188 <StartMusicTask+0x20c>)
 8004054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800405a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800405c:	fb12 f303 	smulbb	r3, r2, r3
 8004060:	b29b      	uxth	r3, r3
 8004062:	005b      	lsls	r3, r3, #1
 8004064:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_verse1_melody[b] > 0) {
 8004066:	4a49      	ldr	r2, [pc, #292]	; (800418c <StartMusicTask+0x210>)
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <StartMusicTask+0x110>
                    playtoneRTOS(song1_verse1_melody[b], notelength, vol);
 8004072:	4a46      	ldr	r2, [pc, #280]	; (800418c <StartMusicTask+0x210>)
 8004074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800407a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fed1 	bl	8003e28 <playtoneRTOS>
                    c++;
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	3301      	adds	r3, #1
 800408a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 800408c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408e:	3301      	adds	r3, #1
 8004090:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8004092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004094:	2b3e      	cmp	r3, #62	; 0x3e
 8004096:	d935      	bls.n	8004104 <StartMusicTask+0x188>
                    a++;
 8004098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409a:	3301      	adds	r3, #1
 800409c:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 800409e:	2300      	movs	r3, #0
 80040a0:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 80040a6:	e02d      	b.n	8004104 <StartMusicTask+0x188>
                }
            } else if (a == 4 || a == 6) {
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d002      	beq.n	80040b4 <StartMusicTask+0x138>
 80040ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b0:	2b06      	cmp	r3, #6
 80040b2:	d127      	bne.n	8004104 <StartMusicTask+0x188>
                // chorus
                notelength = beatlength * song1_chorus_rhythmn[b];
 80040b4:	4a36      	ldr	r2, [pc, #216]	; (8004190 <StartMusicTask+0x214>)
 80040b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80040be:	fb12 f303 	smulbb	r3, r2, r3
 80040c2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_chorus_melody[b] > 0) {
 80040c4:	4a33      	ldr	r2, [pc, #204]	; (8004194 <StartMusicTask+0x218>)
 80040c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <StartMusicTask+0x16e>
                    playtoneRTOS(song1_chorus_melody[b], notelength, vol);
 80040d0:	4a30      	ldr	r2, [pc, #192]	; (8004194 <StartMusicTask+0x218>)
 80040d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff fea2 	bl	8003e28 <playtoneRTOS>
                    c++;
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	3301      	adds	r3, #1
 80040e8:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 80040ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ec:	3301      	adds	r3, #1
 80040ee:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_chorus_melody) / sizeof(uint16_t)) {
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	2b3a      	cmp	r3, #58	; 0x3a
 80040f4:	d906      	bls.n	8004104 <StartMusicTask+0x188>
                    a++;
 80040f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f8:	3301      	adds	r3, #1
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            osDelay(notelength);
 8004104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004106:	4618      	mov	r0, r3
 8004108:	f00a fc34 	bl	800e974 <osDelay>
            //noTone(piezo);

            osDelay(notelength * beatseparationconstant);
 800410c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004116:	edd7 7a07 	vldr	s15, [r7, #28]
 800411a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800411e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004122:	ee17 0a90 	vmov	r0, s15
 8004126:	f00a fc25 	bl	800e974 <osDelay>
            if (a == 7) { // loop back around to beginning of song
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	2b07      	cmp	r3, #7
 800412e:	f47f af37 	bne.w	8003fa0 <StartMusicTask+0x24>
                a = 1;
 8004132:	2301      	movs	r3, #1
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
 8004136:	e733      	b.n	8003fa0 <StartMusicTask+0x24>
            }
        }
        else if (buzzer_setting == KSP_MAIN) {
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <StartMusicTask+0x200>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b01      	cmp	r3, #1
 800413e:	f47f af2f 	bne.w	8003fa0 <StartMusicTask+0x24>
            playtoneRTOS(ksp_tunes[ksp_playhead], ksp_delays[ksp_playhead], vol);
 8004142:	4a15      	ldr	r2, [pc, #84]	; (8004198 <StartMusicTask+0x21c>)
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 800414a:	4a14      	ldr	r2, [pc, #80]	; (800419c <StartMusicTask+0x220>)
 800414c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004152:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	4619      	mov	r1, r3
 8004158:	f7ff fe66 	bl	8003e28 <playtoneRTOS>
            ksp_playhead = (ksp_playhead + 1) % ksp_total;
 800415c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415e:	3301      	adds	r3, #1
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	fb93 f2f2 	sdiv	r2, r3, r2
 8004166:	69b9      	ldr	r1, [r7, #24]
 8004168:	fb01 f202 	mul.w	r2, r1, r2
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (is_soft_enabled()) {
 8004170:	e716      	b.n	8003fa0 <StartMusicTask+0x24>
 8004172:	bf00      	nop
 8004174:	3e99999a 	.word	0x3e99999a
 8004178:	20004770 	.word	0x20004770
 800417c:	20000001 	.word	0x20000001
 8004180:	20000020 	.word	0x20000020
 8004184:	20000004 	.word	0x20000004
 8004188:	200000bc 	.word	0x200000bc
 800418c:	2000003c 	.word	0x2000003c
 8004190:	200001b4 	.word	0x200001b4
 8004194:	2000013c 	.word	0x2000013c
 8004198:	2000022c 	.word	0x2000022c
 800419c:	20000254 	.word	0x20000254

080041a0 <startStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const * argument)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStateMachine */

    uint32_t launchTime = osKernelSysTick();
 80041a8:	f00a fb88 	bl	800e8bc <osKernelSysTick>
 80041ac:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t currentTime = osKernelSysTick();
 80041ae:	f00a fb85 	bl	800e8bc <osKernelSysTick>
 80041b2:	6238      	str	r0, [r7, #32]
    uint32_t timeSinceLaunch = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61fb      	str	r3, [r7, #28]

    Servo deployServo;
    servo_init(&deployServo, &htim2, &htim2.Instance->CCR4);
 80041b8:	4b96      	ldr	r3, [pc, #600]	; (8004414 <startStateMachine+0x274>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80041c0:	f107 030c 	add.w	r3, r7, #12
 80041c4:	4993      	ldr	r1, [pc, #588]	; (8004414 <startStateMachine+0x274>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f7fd fbd4 	bl	8001974 <servo_init>
    servo_disable(&deployServo);
 80041cc:	f107 030c 	add.w	r3, r7, #12
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd fc03 	bl	80019dc <servo_disable>

    /* Infinite loop */
    for (;;) {

        currentTime = osKernelSysTick();
 80041d6:	f00a fb71 	bl	800e8bc <osKernelSysTick>
 80041da:	6238      	str	r0, [r7, #32]
        timeSinceLaunch = currentTime - launchTime;
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	61fb      	str	r3, [r7, #28]

        if (is_soft_enabled()) {
 80041e4:	f7fe fdfe 	bl	8002de4 <is_soft_enabled>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 80f9 	beq.w	80043e2 <startStateMachine+0x242>
            switch (flight_state) {
 80041f0:	4b89      	ldr	r3, [pc, #548]	; (8004418 <startStateMachine+0x278>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b07      	cmp	r3, #7
 80041f6:	f200 8109 	bhi.w	800440c <startStateMachine+0x26c>
 80041fa:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <startStateMachine+0x60>)
 80041fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004200:	08004221 	.word	0x08004221
 8004204:	08004269 	.word	0x08004269
 8004208:	080042b7 	.word	0x080042b7
 800420c:	080042f9 	.word	0x080042f9
 8004210:	08004345 	.word	0x08004345
 8004214:	08004383 	.word	0x08004383
 8004218:	080043d1 	.word	0x080043d1
 800421c:	0800440d 	.word	0x0800440d
            case FLIGHT_ERROR:
                // be annoying TODO
                buzzer_beep(BEEP_LONG);
 8004220:	2032      	movs	r0, #50	; 0x32
 8004222:	f7fe fdfd 	bl	8002e20 <buzzer_beep>

                // exit the state once we're no longer armed,
                // if battery voltage is in good state
                // and if there's a squib connected if one is necessary
                changeLed(0, 0, 0);
 8004226:	2200      	movs	r2, #0
 8004228:	2100      	movs	r1, #0
 800422a:	2000      	movs	r0, #0
 800422c:	f7ff fe78 	bl	8003f20 <changeLed>
                if (!is_armed() && get_battery_voltage() > BATTERY_EMPTY_LIMIT) {
 8004230:	f7fe fdcc 	bl	8002dcc <is_armed>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f040 80df 	bne.w	80043fa <startStateMachine+0x25a>
 800423c:	f7fe fd94 	bl	8002d68 <get_battery_voltage>
 8004240:	eeb0 7a40 	vmov.f32	s14, s0
 8004244:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8004248:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	dc00      	bgt.n	8004254 <startStateMachine+0xb4>
                    buzzer_beep(BEEP_SHORT);
                    buzzer_beep(BEEP_SHORT);
                    //set_status_led(ON);
                    flight_state = IDLE;
                }
                break;
 8004252:	e0d2      	b.n	80043fa <startStateMachine+0x25a>
                    buzzer_beep(BEEP_SHORT);
 8004254:	200c      	movs	r0, #12
 8004256:	f7fe fde3 	bl	8002e20 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 800425a:	200c      	movs	r0, #12
 800425c:	f7fe fde0 	bl	8002e20 <buzzer_beep>
                    flight_state = IDLE;
 8004260:	4b6d      	ldr	r3, [pc, #436]	; (8004418 <startStateMachine+0x278>)
 8004262:	2202      	movs	r2, #2
 8004264:	701a      	strb	r2, [r3, #0]
                break;
 8004266:	e0c8      	b.n	80043fa <startStateMachine+0x25a>

            case SYSTEMS_CHECK:
                // this state is the entry state, it performs startup checking of some peripherals
                changeLed(100, 0, 0);
 8004268:	2200      	movs	r2, #0
 800426a:	2100      	movs	r1, #0
 800426c:	2064      	movs	r0, #100	; 0x64
 800426e:	f7ff fe57 	bl	8003f20 <changeLed>
                // close the servo if necessary
                servo_writeangle(&deployServo, SERVO_CLOSED_POSITION);
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	2100      	movs	r1, #0
 8004278:	4618      	mov	r0, r3
 800427a:	f7fd fb8d 	bl	8001998 <servo_writeangle>

                // check if the battery is empty
                // also, check if there's a squib connected if we're configured for one.
                if (get_battery_voltage() <= BATTERY_EMPTY_LIMIT) {
 800427e:	f7fe fd73 	bl	8002d68 <get_battery_voltage>
 8004282:	eeb0 7a40 	vmov.f32	s14, s0
 8004286:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 800428a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800428e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004292:	d803      	bhi.n	800429c <startStateMachine+0xfc>

                    flight_state = ERROR;
 8004294:	4b60      	ldr	r3, [pc, #384]	; (8004418 <startStateMachine+0x278>)
 8004296:	2201      	movs	r2, #1
 8004298:	701a      	strb	r2, [r3, #0]
                    break;
 800429a:	e0b7      	b.n	800440c <startStateMachine+0x26c>
                }

                // if everything's okay, go into idle
                buzzer_beep(BEEP_SHORT);
 800429c:	200c      	movs	r0, #12
 800429e:	f7fe fdbf 	bl	8002e20 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 80042a2:	200c      	movs	r0, #12
 80042a4:	f7fe fdbc 	bl	8002e20 <buzzer_beep>
                set_status_led(1);
 80042a8:	2001      	movs	r0, #1
 80042aa:	f7fe fde5 	bl	8002e78 <set_status_led>
                flight_state = IDLE;
 80042ae:	4b5a      	ldr	r3, [pc, #360]	; (8004418 <startStateMachine+0x278>)
 80042b0:	2202      	movs	r2, #2
 80042b2:	701a      	strb	r2, [r3, #0]
                break;
 80042b4:	e0aa      	b.n	800440c <startStateMachine+0x26c>

            case IDLE:
                changeLed(0, 100, 0);
 80042b6:	2200      	movs	r2, #0
 80042b8:	2164      	movs	r1, #100	; 0x64
 80042ba:	2000      	movs	r0, #0
 80042bc:	f7ff fe30 	bl	8003f20 <changeLed>
                if (is_armed()) {
 80042c0:	f7fe fd84 	bl	8002dcc <is_armed>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d003      	beq.n	80042d2 <startStateMachine+0x132>
                    flight_state = ERROR;
 80042ca:	4b53      	ldr	r3, [pc, #332]	; (8004418 <startStateMachine+0x278>)
 80042cc:	2201      	movs	r2, #1
 80042ce:	701a      	strb	r2, [r3, #0]
                    break;
 80042d0:	e09c      	b.n	800440c <startStateMachine+0x26c>
                }

                if (is_breakwire_connected()) {
 80042d2:	f7fe fd93 	bl	8002dfc <is_breakwire_connected>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 8090 	beq.w	80043fe <startStateMachine+0x25e>
                    buzzer_beep(BEEP_SHORT);
 80042de:	200c      	movs	r0, #12
 80042e0:	f7fe fd9e 	bl	8002e20 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 80042e4:	200c      	movs	r0, #12
 80042e6:	f7fe fd9b 	bl	8002e20 <buzzer_beep>
                    set_status_led(0);
 80042ea:	2000      	movs	r0, #0
 80042ec:	f7fe fdc4 	bl	8002e78 <set_status_led>
                    flight_state = PREPARATION;
 80042f0:	4b49      	ldr	r3, [pc, #292]	; (8004418 <startStateMachine+0x278>)
 80042f2:	2203      	movs	r2, #3
 80042f4:	701a      	strb	r2, [r3, #0]
                    break;
 80042f6:	e089      	b.n	800440c <startStateMachine+0x26c>
                }
                break;

            case PREPARATION:
                changeLed(0, 0, 100);
 80042f8:	2264      	movs	r2, #100	; 0x64
 80042fa:	2100      	movs	r1, #0
 80042fc:	2000      	movs	r0, #0
 80042fe:	f7ff fe0f 	bl	8003f20 <changeLed>
                if (!is_breakwire_connected()) {
 8004302:	f7fe fd7b 	bl	8002dfc <is_breakwire_connected>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <startStateMachine+0x180>
                    buzzer_beep(BEEP_LONG);
 800430c:	2032      	movs	r0, #50	; 0x32
 800430e:	f7fe fd87 	bl	8002e20 <buzzer_beep>
                    set_status_led(1);
 8004312:	2001      	movs	r0, #1
 8004314:	f7fe fdb0 	bl	8002e78 <set_status_led>
                    flight_state = IDLE;
 8004318:	4b3f      	ldr	r3, [pc, #252]	; (8004418 <startStateMachine+0x278>)
 800431a:	2202      	movs	r2, #2
 800431c:	701a      	strb	r2, [r3, #0]
                    break;
 800431e:	e075      	b.n	800440c <startStateMachine+0x26c>
                }

                if (is_armed()) {
 8004320:	f7fe fd54 	bl	8002dcc <is_armed>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d06b      	beq.n	8004402 <startStateMachine+0x262>
                    buzzer_beep(BEEP_SHORT);
 800432a:	200c      	movs	r0, #12
 800432c:	f7fe fd78 	bl	8002e20 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 8004330:	200c      	movs	r0, #12
 8004332:	f7fe fd75 	bl	8002e20 <buzzer_beep>
                    set_status_led(1);
 8004336:	2001      	movs	r0, #1
 8004338:	f7fe fd9e 	bl	8002e78 <set_status_led>
                    flight_state = ARMED;
 800433c:	4b36      	ldr	r3, [pc, #216]	; (8004418 <startStateMachine+0x278>)
 800433e:	2204      	movs	r2, #4
 8004340:	701a      	strb	r2, [r3, #0]
                }
                break;
 8004342:	e05e      	b.n	8004402 <startStateMachine+0x262>

            case ARMED:
                changeLed(100, 100, 0);
 8004344:	2200      	movs	r2, #0
 8004346:	2164      	movs	r1, #100	; 0x64
 8004348:	2064      	movs	r0, #100	; 0x64
 800434a:	f7ff fde9 	bl	8003f20 <changeLed>
                if (!is_armed()) {
 800434e:	f7fe fd3d 	bl	8002dcc <is_armed>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d109      	bne.n	800436c <startStateMachine+0x1cc>
                    buzzer_beep(BEEP_LONG);
 8004358:	2032      	movs	r0, #50	; 0x32
 800435a:	f7fe fd61 	bl	8002e20 <buzzer_beep>
                    set_status_led(0);
 800435e:	2000      	movs	r0, #0
 8004360:	f7fe fd8a 	bl	8002e78 <set_status_led>
                    flight_state = PREPARATION;
 8004364:	4b2c      	ldr	r3, [pc, #176]	; (8004418 <startStateMachine+0x278>)
 8004366:	2203      	movs	r2, #3
 8004368:	701a      	strb	r2, [r3, #0]
                    break;
 800436a:	e04f      	b.n	800440c <startStateMachine+0x26c>
                }

                if (!is_breakwire_connected()) {
 800436c:	f7fe fd46 	bl	8002dfc <is_breakwire_connected>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d147      	bne.n	8004406 <startStateMachine+0x266>
                    //reset_timer();

                    launchTime = currentTime;
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	627b      	str	r3, [r7, #36]	; 0x24

                    //set_launch_asserted(ON);
                    flight_state = LAUNCHED;
 800437a:	4b27      	ldr	r3, [pc, #156]	; (8004418 <startStateMachine+0x278>)
 800437c:	2205      	movs	r2, #5
 800437e:	701a      	strb	r2, [r3, #0]
                    break;
 8004380:	e044      	b.n	800440c <startStateMachine+0x26c>
                }
                break;

            case LAUNCHED:
                changeLed(100, 100, 100);
 8004382:	2264      	movs	r2, #100	; 0x64
 8004384:	2164      	movs	r1, #100	; 0x64
 8004386:	2064      	movs	r0, #100	; 0x64
 8004388:	f7ff fdca 	bl	8003f20 <changeLed>
                buzzer_beep(BEEP_SHORT);
 800438c:	200c      	movs	r0, #12
 800438e:	f7fe fd47 	bl	8002e20 <buzzer_beep>

                buzzer_beep(BEEP_SHORT);
 8004392:	200c      	movs	r0, #12
 8004394:	f7fe fd44 	bl	8002e20 <buzzer_beep>

                if (timeSinceLaunch >= MAX_DEPLOY_TIME
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f243 62af 	movw	r2, #13999	; 0x36af
 800439e:	4293      	cmp	r3, r2
 80043a0:	d809      	bhi.n	80043b6 <startStateMachine+0x216>
                        || (timeSinceLaunch >= MIN_DEPLOY_TIME
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	f242 720f 	movw	r2, #9999	; 0x270f
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d92e      	bls.n	800440a <startStateMachine+0x26a>
                                && is_vote_asserted())) {
 80043ac:	f7fe fd6f 	bl	8002e8e <is_vote_asserted>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d029      	beq.n	800440a <startStateMachine+0x26a>

                    servo_writeangle(&deployServo, SERVO_DEPLOY_POSITION);
 80043b6:	f107 030c 	add.w	r3, r7, #12
 80043ba:	21b4      	movs	r1, #180	; 0xb4
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd faeb 	bl	8001998 <servo_writeangle>

                    last_logged_deploy_time = timeSinceLaunch;
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <startStateMachine+0x27c>)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	6013      	str	r3, [r2, #0]
                    flight_state = DEPLOYED;
 80043c8:	4b13      	ldr	r3, [pc, #76]	; (8004418 <startStateMachine+0x278>)
 80043ca:	2206      	movs	r2, #6
 80043cc:	701a      	strb	r2, [r3, #0]
                    break;
 80043ce:	e01d      	b.n	800440c <startStateMachine+0x26c>
                }

                break;

            case DEPLOYED:
                changeLed(100, 0, 100);
 80043d0:	2264      	movs	r2, #100	; 0x64
 80043d2:	2100      	movs	r1, #0
 80043d4:	2064      	movs	r0, #100	; 0x64
 80043d6:	f7ff fda3 	bl	8003f20 <changeLed>
                //if (!buzzer_queue_length()) {
                //    buzzer_beep(BEEP_LONG);
                //}
                buzzer_beep(BEEP_LONG);
 80043da:	2032      	movs	r0, #50	; 0x32
 80043dc:	f7fe fd20 	bl	8002e20 <buzzer_beep>

                break;
 80043e0:	e014      	b.n	800440c <startStateMachine+0x26c>
            case LANDED:
                break;
            }
        }
        else {
            changeLed(100, 0, 0);
 80043e2:	2200      	movs	r2, #0
 80043e4:	2100      	movs	r1, #0
 80043e6:	2064      	movs	r0, #100	; 0x64
 80043e8:	f7ff fd9a 	bl	8003f20 <changeLed>
            buzzer_setting = KSP_MAIN;
 80043ec:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <startStateMachine+0x280>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
            flight_state = IDLE;
 80043f2:	4b09      	ldr	r3, [pc, #36]	; (8004418 <startStateMachine+0x278>)
 80043f4:	2202      	movs	r2, #2
 80043f6:	701a      	strb	r2, [r3, #0]
 80043f8:	e008      	b.n	800440c <startStateMachine+0x26c>
                break;
 80043fa:	bf00      	nop
 80043fc:	e006      	b.n	800440c <startStateMachine+0x26c>
                break;
 80043fe:	bf00      	nop
 8004400:	e004      	b.n	800440c <startStateMachine+0x26c>
                break;
 8004402:	bf00      	nop
 8004404:	e002      	b.n	800440c <startStateMachine+0x26c>
                break;
 8004406:	bf00      	nop
 8004408:	e000      	b.n	800440c <startStateMachine+0x26c>
                break;
 800440a:	bf00      	nop
        }

        osDelay(1);
 800440c:	2001      	movs	r0, #1
 800440e:	f00a fab1 	bl	800e974 <osDelay>
        currentTime = osKernelSysTick();
 8004412:	e6e0      	b.n	80041d6 <startStateMachine+0x36>
 8004414:	200047d0 	.word	0x200047d0
 8004418:	20000000 	.word	0x20000000
 800441c:	20000874 	.word	0x20000874
 8004420:	20000001 	.word	0x20000001
 8004424:	00000000 	.word	0x00000000

08004428 <StartTelemTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTelemTask */
void StartTelemTask(void const * argument)
{
 8004428:	b590      	push	{r4, r7, lr}
 800442a:	b0ff      	sub	sp, #508	; 0x1fc
 800442c:	af02      	add	r7, sp, #8
 800442e:	1d3b      	adds	r3, r7, #4
 8004430:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartTelemTask */
    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8004432:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 8004436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443a:	4ac5      	ldr	r2, [pc, #788]	; (8004750 <StartTelemTask+0x328>)
 800443c:	49c5      	ldr	r1, [pc, #788]	; (8004754 <StartTelemTask+0x32c>)
 800443e:	f7fd fb31 	bl	8001aa4 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8004442:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004446:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800444a:	49c3      	ldr	r1, [pc, #780]	; (8004758 <StartTelemTask+0x330>)
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd fb89 	bl	8001b64 <sxSetDio1Pin>

    //SetTxParams(0x06, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
    SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
 8004452:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004456:	22e0      	movs	r2, #224	; 0xe0
 8004458:	2100      	movs	r1, #0
 800445a:	4618      	mov	r0, r3
 800445c:	f7fd fbd6 	bl	8001c0c <SetTxParams>
    osDelay(3);
 8004460:	2003      	movs	r0, #3
 8004462:	f00a fa87 	bl	800e974 <osDelay>

    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);
 8004466:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800446a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800446e:	4abb      	ldr	r2, [pc, #748]	; (800475c <StartTelemTask+0x334>)
 8004470:	49bb      	ldr	r1, [pc, #748]	; (8004760 <StartTelemTask+0x338>)
 8004472:	f7fc fe29 	bl	80010c8 <LSM_init>
 8004476:	4603      	mov	r3, r0
 8004478:	f887 31e7 	strb.w	r3, [r7, #487]	; 0x1e7

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 800447c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004480:	2277      	movs	r2, #119	; 0x77
 8004482:	49b8      	ldr	r1, [pc, #736]	; (8004764 <StartTelemTask+0x33c>)
 8004484:	4618      	mov	r0, r3
 8004486:	f7fd f825 	bl	80014d4 <SPL06_Init>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 31e6 	strb.w	r3, [r7, #486]	; 0x1e6

    Orientation ori;
    orientation_init(&ori);
 8004490:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fa48 	bl	800492a <orientation_init>
    uint32_t counter = 0;
 800449a:	2300      	movs	r3, #0
 800449c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    TLM_dec.packet_type = 1;
 80044a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]
    TLM_dec.flight_state = 4;
 80044a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ac:	2204      	movs	r2, #4
 80044ae:	705a      	strb	r2, [r3, #1]
    TLM_dec.is_playing_music = 0;
 80044b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044b4:	2200      	movs	r2, #0
 80044b6:	709a      	strb	r2, [r3, #2]
    TLM_dec.is_data_logging = 0;
 80044b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044bc:	2200      	movs	r2, #0
 80044be:	70da      	strb	r2, [r3, #3]
    TLM_dec.pin_states = 0b00011011;
 80044c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044c4:	221b      	movs	r2, #27
 80044c6:	711a      	strb	r2, [r3, #4]
    TLM_dec.servo_state = 3;
 80044c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044cc:	2203      	movs	r2, #3
 80044ce:	715a      	strb	r2, [r3, #5]
    TLM_dec.vbat = 7.283;
 80044d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044d4:	4aa4      	ldr	r2, [pc, #656]	; (8004768 <StartTelemTask+0x340>)
 80044d6:	60da      	str	r2, [r3, #12]
    TLM_dec.systick = 1232432;
 80044d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044dc:	4aa3      	ldr	r2, [pc, #652]	; (800476c <StartTelemTask+0x344>)
 80044de:	609a      	str	r2, [r3, #8]
    TLM_dec.orientation_quat[0] = 0.143123;
 80044e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044e4:	4aa2      	ldr	r2, [pc, #648]	; (8004770 <StartTelemTask+0x348>)
 80044e6:	611a      	str	r2, [r3, #16]
    TLM_dec.acc[2] = 1337;
 80044e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ec:	f240 5239 	movw	r2, #1337	; 0x539
 80044f0:	849a      	strh	r2, [r3, #36]	; 0x24
    TLM_dec.gyro[2] = -21;
 80044f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80044fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    TLM_dec.baro = 90001.623;
 80044fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004500:	4a9c      	ldr	r2, [pc, #624]	; (8004774 <StartTelemTask+0x34c>)
 8004502:	62da      	str	r2, [r3, #44]	; 0x2c
    TLM_dec.temp = 63.4;
 8004504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004508:	4a9b      	ldr	r2, [pc, #620]	; (8004778 <StartTelemTask+0x350>)
 800450a:	631a      	str	r2, [r3, #48]	; 0x30
    TLM_dec.vertical_velocity = 180;
 800450c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004510:	4a9a      	ldr	r2, [pc, #616]	; (800477c <StartTelemTask+0x354>)
 8004512:	639a      	str	r2, [r3, #56]	; 0x38
    TLM_dec.altitude = 1321;
 8004514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004518:	4a99      	ldr	r2, [pc, #612]	; (8004780 <StartTelemTask+0x358>)
 800451a:	635a      	str	r2, [r3, #52]	; 0x34
    TLM_dec.debug = 1337;
 800451c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004520:	f240 5239 	movw	r2, #1337	; 0x539
 8004524:	879a      	strh	r2, [r3, #60]	; 0x3c
    TLM_dec.ranging = 15212;
 8004526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800452a:	4a96      	ldr	r2, [pc, #600]	; (8004784 <StartTelemTask+0x35c>)
 800452c:	641a      	str	r2, [r3, #64]	; 0x40

    encode_TLM(&TLM_dec, &TLM_enc);
 800452e:	f107 0208 	add.w	r2, r7, #8
 8004532:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004536:	4611      	mov	r1, r2
 8004538:	4618      	mov	r0, r3
 800453a:	f7fd fd3d 	bl	8001fb8 <encode_TLM>

    WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 800453e:	f107 0208 	add.w	r2, r7, #8
 8004542:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 8004546:	2320      	movs	r3, #32
 8004548:	2100      	movs	r1, #0
 800454a:	f7fd fbd8 	bl	8001cfe <WriteBuffer>
    osDelay(1);
 800454e:	2001      	movs	r0, #1
 8004550:	f00a fa10 	bl	800e974 <osDelay>

    SetDioIrqParams(&radio, 1, 1, 0, 0); // txdone on gpio1
 8004554:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 8004558:	2300      	movs	r3, #0
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2300      	movs	r3, #0
 800455e:	2201      	movs	r2, #1
 8004560:	2101      	movs	r1, #1
 8004562:	f7fd fc35 	bl	8001dd0 <SetDioIrqParams>

    osDelay(3);
 8004566:	2003      	movs	r0, #3
 8004568:	f00a fa04 	bl	800e974 <osDelay>

    uint32_t lasttime = HAL_GetTick();
 800456c:	f000 ff38 	bl	80053e0 <HAL_GetTick>
 8004570:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
    uint32_t nowtime = HAL_GetTick();
 8004574:	f000 ff34 	bl	80053e0 <HAL_GetTick>
 8004578:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
    float dt = 0;
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    //changeLed(100, 100, 100);
    /* Infinite loop */
    for (;;) {

        LSM_pollsensors(&imu);
 8004584:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc fe17 	bl	80011bc <LSM_pollsensors>
        //changeLed(0, 0, 100);
        nowtime = HAL_GetTick();
 800458e:	f000 ff27 	bl	80053e0 <HAL_GetTick>
 8004592:	f8c7 01e0 	str.w	r0, [r7, #480]	; 0x1e0
        dt = (nowtime - lasttime) / 1000.0;
 8004596:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 800459a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	4618      	mov	r0, r3
 80045a2:	f7fb ffcf 	bl	8000544 <__aeabi_ui2d>
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	4b77      	ldr	r3, [pc, #476]	; (8004788 <StartTelemTask+0x360>)
 80045ac:	f7fc f96e 	bl	800088c <__aeabi_ddiv>
 80045b0:	4603      	mov	r3, r0
 80045b2:	460c      	mov	r4, r1
 80045b4:	4618      	mov	r0, r3
 80045b6:	4621      	mov	r1, r4
 80045b8:	f7fc fb36 	bl	8000c28 <__aeabi_d2f>
 80045bc:	4603      	mov	r3, r0
 80045be:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
        lasttime = nowtime;
 80045c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80045c6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

        orientation_setGyro(&ori, imu.gyroRPS);
 80045ca:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045ce:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80045d2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045d6:	4611      	mov	r1, r2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f9d4 	bl	8004986 <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 80045de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80045e2:	f103 0258 	add.w	r2, r3, #88	; 0x58
 80045e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 f9e1 	bl	80049b4 <orientation_setAcc>
        orientation_update(&ori, dt);
 80045f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80045f6:	ed97 0a77 	vldr	s0, [r7, #476]	; 0x1dc
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f9f4 	bl	80049e8 <orientation_update>

        counter++;
 8004600:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8004604:	3301      	adds	r3, #1
 8004606:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

        if (counter % 20 == 0) {
 800460a:	f8d7 11ec 	ldr.w	r1, [r7, #492]	; 0x1ec
 800460e:	4b5f      	ldr	r3, [pc, #380]	; (800478c <StartTelemTask+0x364>)
 8004610:	fba3 2301 	umull	r2, r3, r3, r1
 8004614:	091a      	lsrs	r2, r3, #4
 8004616:	4613      	mov	r3, r2
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	4413      	add	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	1aca      	subs	r2, r1, r3
 8004620:	2a00      	cmp	r2, #0
 8004622:	f040 8087 	bne.w	8004734 <StartTelemTask+0x30c>

            TLM_dec.vbat = get_battery_voltage();
 8004626:	f7fe fb9f 	bl	8002d68 <get_battery_voltage>
 800462a:	eef0 7a40 	vmov.f32	s15, s0
 800462e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004632:	edc3 7a03 	vstr	s15, [r3, #12]
            TLM_dec.systick = osKernelSysTick();
 8004636:	f00a f941 	bl	800e8bc <osKernelSysTick>
 800463a:	4602      	mov	r2, r0
 800463c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004640:	609a      	str	r2, [r3, #8]
            TLM_dec.acc[0] = imu.rawAcc[0];
 8004642:	f9b7 217c 	ldrsh.w	r2, [r7, #380]	; 0x17c
 8004646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800464a:	841a      	strh	r2, [r3, #32]
            TLM_dec.acc[1] = imu.rawAcc[1];
 800464c:	f9b7 217e 	ldrsh.w	r2, [r7, #382]	; 0x17e
 8004650:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004654:	845a      	strh	r2, [r3, #34]	; 0x22
            TLM_dec.acc[2] = imu.rawAcc[2];
 8004656:	f9b7 2180 	ldrsh.w	r2, [r7, #384]	; 0x180
 800465a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800465e:	849a      	strh	r2, [r3, #36]	; 0x24
            TLM_dec.gyro[0] = imu.rawGyro[0];
 8004660:	f9b7 2152 	ldrsh.w	r2, [r7, #338]	; 0x152
 8004664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004668:	84da      	strh	r2, [r3, #38]	; 0x26
            TLM_dec.gyro[1] = imu.rawGyro[1];
 800466a:	f9b7 2154 	ldrsh.w	r2, [r7, #340]	; 0x154
 800466e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
            TLM_dec.gyro[2] = imu.rawGyro[2];
 8004674:	f9b7 2156 	ldrsh.w	r2, [r7, #342]	; 0x156
 8004678:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800467c:	855a      	strh	r2, [r3, #42]	; 0x2a
            SPL06_Read(&baro);
 800467e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004682:	4618      	mov	r0, r3
 8004684:	f7fd f8ac 	bl	80017e0 <SPL06_Read>
            TLM_dec.baro = baro.pressure_Pa;
 8004688:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800468c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004690:	62da      	str	r2, [r3, #44]	; 0x2c
            TLM_dec.altitude = 44330 * (1 - pow(baro.pressure_Pa/101325, 0.190295));
 8004692:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 8004696:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004790 <StartTelemTask+0x368>
 800469a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800469e:	ee16 0a90 	vmov	r0, s13
 80046a2:	f7fb ff71 	bl	8000588 <__aeabi_f2d>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8004740 <StartTelemTask+0x318>
 80046ae:	ec44 3b10 	vmov	d0, r3, r4
 80046b2:	f00f ffc7 	bl	8014644 <pow>
 80046b6:	ec54 3b10 	vmov	r3, r4, d0
 80046ba:	461a      	mov	r2, r3
 80046bc:	4623      	mov	r3, r4
 80046be:	f04f 0000 	mov.w	r0, #0
 80046c2:	4934      	ldr	r1, [pc, #208]	; (8004794 <StartTelemTask+0x36c>)
 80046c4:	f7fb fe00 	bl	80002c8 <__aeabi_dsub>
 80046c8:	4603      	mov	r3, r0
 80046ca:	460c      	mov	r4, r1
 80046cc:	4618      	mov	r0, r3
 80046ce:	4621      	mov	r1, r4
 80046d0:	a31d      	add	r3, pc, #116	; (adr r3, 8004748 <StartTelemTask+0x320>)
 80046d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d6:	f7fb ffaf 	bl	8000638 <__aeabi_dmul>
 80046da:	4603      	mov	r3, r0
 80046dc:	460c      	mov	r4, r1
 80046de:	4618      	mov	r0, r3
 80046e0:	4621      	mov	r1, r4
 80046e2:	f7fc faa1 	bl	8000c28 <__aeabi_d2f>
 80046e6:	4602      	mov	r2, r0
 80046e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34
            //        data[1], data[2], data[3]);
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
            //CDC_Transmit_FS((uint8_t*) printBuffer,
            //        MIN(strlen(printBuffer), 128));

            encode_TLM(&TLM_dec, &TLM_enc);
 80046ee:	f107 0208 	add.w	r2, r7, #8
 80046f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fd fc5d 	bl	8001fb8 <encode_TLM>
            WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 80046fe:	f107 0208 	add.w	r2, r7, #8
 8004702:	f507 70d6 	add.w	r0, r7, #428	; 0x1ac
 8004706:	2320      	movs	r3, #32
 8004708:	2100      	movs	r1, #0
 800470a:	f7fd faf8 	bl	8001cfe <WriteBuffer>
            //WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
            osDelay(1);
 800470e:	2001      	movs	r0, #1
 8004710:	f00a f930 	bl	800e974 <osDelay>
            ClrIrqStatus(&radio, 1); // clear txdone irq
 8004714:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f7fd fb92 	bl	8001e44 <ClrIrqStatus>
            osDelay(1);
 8004720:	2001      	movs	r0, #1
 8004722:	f00a f927 	bl	800e974 <osDelay>
            SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 8004726:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 800472a:	2232      	movs	r2, #50	; 0x32
 800472c:	2102      	movs	r1, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd fba3 	bl	8001e7a <SetTx>
        }

        osDelay(1);
 8004734:	2001      	movs	r0, #1
 8004736:	f00a f91d 	bl	800e974 <osDelay>
        LSM_pollsensors(&imu);
 800473a:	e723      	b.n	8004584 <StartTelemTask+0x15c>
 800473c:	f3af 8000 	nop.w
 8004740:	28cbd124 	.word	0x28cbd124
 8004744:	3fc85b96 	.word	0x3fc85b96
 8004748:	00000000 	.word	0x00000000
 800474c:	40e5a540 	.word	0x40e5a540
 8004750:	40020000 	.word	0x40020000
 8004754:	200046d0 	.word	0x200046d0
 8004758:	40020800 	.word	0x40020800
 800475c:	40020400 	.word	0x40020400
 8004760:	20004634 	.word	0x20004634
 8004764:	200045e0 	.word	0x200045e0
 8004768:	40e90e56 	.word	0x40e90e56
 800476c:	0012ce30 	.word	0x0012ce30
 8004770:	3e128ed6 	.word	0x3e128ed6
 8004774:	47afc8d0 	.word	0x47afc8d0
 8004778:	427d999a 	.word	0x427d999a
 800477c:	43340000 	.word	0x43340000
 8004780:	44a52000 	.word	0x44a52000
 8004784:	466db000 	.word	0x466db000
 8004788:	408f4000 	.word	0x408f4000
 800478c:	cccccccd 	.word	0xcccccccd
 8004790:	47c5e680 	.word	0x47c5e680
 8004794:	3ff00000 	.word	0x3ff00000

08004798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a04      	ldr	r2, [pc, #16]	; (80047b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d101      	bne.n	80047ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80047aa:	f000 fe05 	bl	80053b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	40010000 	.word	0x40010000

080047bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 80047c2:	e7fe      	b.n	80047c2 <Error_Handler+0x6>

080047c4 <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	60b9      	str	r1, [r7, #8]
 80047ce:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3304      	adds	r3, #4
 80047d4:	ed93 7a00 	vldr	s14, [r3]
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	3308      	adds	r3, #8
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3308      	adds	r3, #8
 80047e8:	edd3 6a00 	vldr	s13, [r3]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	3304      	adds	r3, #4
 80047f0:	edd3 7a00 	vldr	s15, [r3]
 80047f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80047f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3308      	adds	r3, #8
 8004806:	ed93 7a00 	vldr	s14, [r3]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	edd3 7a00 	vldr	s15, [r3]
 8004810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	edd3 6a00 	vldr	s13, [r3]
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	3308      	adds	r3, #8
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	3304      	adds	r3, #4
 800482a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800482e:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	ed93 7a00 	vldr	s14, [r3]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	3304      	adds	r3, #4
 800483c:	edd3 7a00 	vldr	s15, [r3]
 8004840:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	3304      	adds	r3, #4
 8004848:	edd3 6a00 	vldr	s13, [r3]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	edd3 7a00 	vldr	s15, [r3]
 8004852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3308      	adds	r3, #8
 800485a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800485e:	edc3 7a00 	vstr	s15, [r3]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 800486e:	b480      	push	{r7}
 8004870:	b085      	sub	sp, #20
 8004872:	af00      	add	r7, sp, #0
 8004874:	60f8      	str	r0, [r7, #12]
 8004876:	60b9      	str	r1, [r7, #8]
 8004878:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	ed93 7a00 	vldr	s14, [r3]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	edd3 7a00 	vldr	s15, [r3]
 8004886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3304      	adds	r3, #4
 8004894:	ed93 7a00 	vldr	s14, [r3]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	3304      	adds	r3, #4
 800489c:	edd3 7a00 	vldr	s15, [r3]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3304      	adds	r3, #4
 80048a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048a8:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3308      	adds	r3, #8
 80048b0:	ed93 7a00 	vldr	s14, [r3]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	3308      	adds	r3, #8
 80048b8:	edd3 7a00 	vldr	s15, [r3]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3308      	adds	r3, #8
 80048c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c4:	edc3 7a00 	vstr	s15, [r3]
}
 80048c8:	bf00      	nop
 80048ca:	3714      	adds	r7, #20
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 80048d4:	b480      	push	{r7}
 80048d6:	b083      	sub	sp, #12
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	ed93 7a00 	vldr	s14, [r3]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	edd3 6a00 	vldr	s13, [r3]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3304      	adds	r3, #4
 80048f8:	edd3 7a00 	vldr	s15, [r3]
 80048fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	3308      	adds	r3, #8
 8004908:	edd3 6a00 	vldr	s13, [r3]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3308      	adds	r3, #8
 8004910:	edd3 7a00 	vldr	s15, [r3]
 8004914:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004918:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800491c:	eeb0 0a67 	vmov.f32	s0, s15
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <orientation_init>:

void orientation_init(Orientation *ori) {
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4618      	mov	r0, r3
 8004936:	f7fd fd5f 	bl	80023f8 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3370      	adds	r3, #112	; 0x70
 800493e:	4618      	mov	r0, r3
 8004940:	f7fd fd5a 	bl	80023f8 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3360      	adds	r3, #96	; 0x60
 8004948:	4618      	mov	r0, r3
 800494a:	f7fd fd55 	bl	80023f8 <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f04f 0200 	mov.w	r2, #0
 800495c:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004964:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f04f 0200 	mov.w	r2, #0
 8004974:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f04f 0200 	mov.w	r2, #0
 800497c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
 800498e:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[0];
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[1];
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[2];
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689a      	ldr	r2, [r3, #8]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80049a8:	bf00      	nop
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[0];
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[1];
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[2];
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 80049d6:	bf00      	nop
 80049d8:	370c      	adds	r7, #12
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	0000      	movs	r0, r0
 80049e4:	0000      	movs	r0, r0
	...

080049e8 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt) {
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b08f      	sub	sp, #60	; 0x3c
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	ed87 0a00 	vstr	s0, [r7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3348      	adds	r3, #72	; 0x48
 8004a00:	461a      	mov	r2, r3
 8004a02:	f7fd ff51 	bl	80028a8 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3354      	adds	r3, #84	; 0x54
 8004a10:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a14:	4619      	mov	r1, r3
 8004a16:	f7ff fed5 	bl	80047c4 <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3310      	adds	r3, #16
 8004a20:	4619      	mov	r1, r3
 8004a22:	4610      	mov	r0, r2
 8004a24:	f7fd fe4c 	bl	80026c0 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3310      	adds	r3, #16
 8004a2c:	f107 021c 	add.w	r2, r7, #28
 8004a30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fd ff37 	bl	80028a8 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f7fb fda3 	bl	8000588 <__aeabi_f2d>
 8004a42:	a347      	add	r3, pc, #284	; (adr r3, 8004b60 <orientation_update+0x178>)
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f7fb fdf6 	bl	8000638 <__aeabi_dmul>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	460c      	mov	r4, r1
 8004a50:	4618      	mov	r0, r3
 8004a52:	4621      	mov	r1, r4
 8004a54:	f7fc f8e8 	bl	8000c28 <__aeabi_d2f>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	61fb      	str	r3, [r7, #28]
    correctionBody[1] = correctionBody[1] * 0.1;
 8004a5c:	6a3b      	ldr	r3, [r7, #32]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fb fd92 	bl	8000588 <__aeabi_f2d>
 8004a64:	a33e      	add	r3, pc, #248	; (adr r3, 8004b60 <orientation_update+0x178>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fb fde5 	bl	8000638 <__aeabi_dmul>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	460c      	mov	r4, r1
 8004a72:	4618      	mov	r0, r3
 8004a74:	4621      	mov	r1, r4
 8004a76:	f7fc f8d7 	bl	8000c28 <__aeabi_d2f>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	623b      	str	r3, [r7, #32]
    correctionBody[2] = correctionBody[2] * 0.1;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fb fd81 	bl	8000588 <__aeabi_f2d>
 8004a86:	a336      	add	r3, pc, #216	; (adr r3, 8004b60 <orientation_update+0x178>)
 8004a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8c:	f7fb fdd4 	bl	8000638 <__aeabi_dmul>
 8004a90:	4603      	mov	r3, r0
 8004a92:	460c      	mov	r4, r1
 8004a94:	4618      	mov	r0, r3
 8004a96:	4621      	mov	r1, r4
 8004a98:	f7fc f8c6 	bl	8000c28 <__aeabi_d2f>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	333c      	adds	r3, #60	; 0x3c
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7ff ff15 	bl	80048d4 <vector_lenSquared>
 8004aaa:	ee10 3a10 	vmov	r3, s0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fb fd6a 	bl	8000588 <__aeabi_f2d>
 8004ab4:	a32c      	add	r3, pc, #176	; (adr r3, 8004b68 <orientation_update+0x180>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	f7fb fee7 	bl	800088c <__aeabi_ddiv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	460c      	mov	r4, r1
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	4621      	mov	r1, r4
 8004ac6:	f7fc f8af 	bl	8000c28 <__aeabi_d2f>
 8004aca:	4603      	mov	r3, r0
 8004acc:	637b      	str	r3, [r7, #52]	; 0x34
    if (GsSquared > 0.81 && GsSquared < 1.21) {
 8004ace:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ad0:	f7fb fd5a 	bl	8000588 <__aeabi_f2d>
 8004ad4:	a326      	add	r3, pc, #152	; (adr r3, 8004b70 <orientation_update+0x188>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fc f83d 	bl	8000b58 <__aeabi_dcmpgt>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d015      	beq.n	8004b10 <orientation_update+0x128>
 8004ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ae6:	f7fb fd4f 	bl	8000588 <__aeabi_f2d>
 8004aea:	a323      	add	r3, pc, #140	; (adr r3, 8004b78 <orientation_update+0x190>)
 8004aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af0:	f7fc f814 	bl	8000b1c <__aeabi_dcmplt>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00a      	beq.n	8004b10 <orientation_update+0x128>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b06:	f107 031c 	add.w	r3, r7, #28
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f7ff feaf 	bl	800486e <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	3320      	adds	r3, #32
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	ed97 0a00 	vldr	s0, [r7]
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fe f849 	bl	8002bb8 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3320      	adds	r3, #32
 8004b2c:	f107 020c 	add.w	r2, r7, #12
 8004b30:	4619      	mov	r1, r3
 8004b32:	f7fd fdf9 	bl	8002728 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fd fc7e 	bl	8002440 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	3380      	adds	r3, #128	; 0x80
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	f7fd fc97 	bl	8002480 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8004b52:	bf00      	nop
 8004b54:	373c      	adds	r7, #60	; 0x3c
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd90      	pop	{r4, r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	f3af 8000 	nop.w
 8004b60:	9999999a 	.word	0x9999999a
 8004b64:	3fb99999 	.word	0x3fb99999
 8004b68:	9339d914 	.word	0x9339d914
 8004b6c:	40580ae7 	.word	0x40580ae7
 8004b70:	1eb851ec 	.word	0x1eb851ec
 8004b74:	3fe9eb85 	.word	0x3fe9eb85
 8004b78:	f5c28f5c 	.word	0xf5c28f5c
 8004b7c:	3ff35c28 	.word	0x3ff35c28

08004b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b082      	sub	sp, #8
 8004b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	607b      	str	r3, [r7, #4]
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_MspInit+0x54>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	4a11      	ldr	r2, [pc, #68]	; (8004bd4 <HAL_MspInit+0x54>)
 8004b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b94:	6453      	str	r3, [r2, #68]	; 0x44
 8004b96:	4b0f      	ldr	r3, [pc, #60]	; (8004bd4 <HAL_MspInit+0x54>)
 8004b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b9e:	607b      	str	r3, [r7, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_MspInit+0x54>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	4a0a      	ldr	r2, [pc, #40]	; (8004bd4 <HAL_MspInit+0x54>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb2:	4b08      	ldr	r3, [pc, #32]	; (8004bd4 <HAL_MspInit+0x54>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	603b      	str	r3, [r7, #0]
 8004bbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	210f      	movs	r1, #15
 8004bc2:	f06f 0001 	mvn.w	r0, #1
 8004bc6:	f001 f8bb 	bl	8005d40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bca:	bf00      	nop
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	40023800 	.word	0x40023800

08004bd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be0:	f107 0314 	add.w	r3, r7, #20
 8004be4:	2200      	movs	r2, #0
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	605a      	str	r2, [r3, #4]
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	60da      	str	r2, [r3, #12]
 8004bee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a17      	ldr	r2, [pc, #92]	; (8004c54 <HAL_ADC_MspInit+0x7c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d127      	bne.n	8004c4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	4b16      	ldr	r3, [pc, #88]	; (8004c58 <HAL_ADC_MspInit+0x80>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c02:	4a15      	ldr	r2, [pc, #84]	; (8004c58 <HAL_ADC_MspInit+0x80>)
 8004c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c08:	6453      	str	r3, [r2, #68]	; 0x44
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <HAL_ADC_MspInit+0x80>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	613b      	str	r3, [r7, #16]
 8004c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <HAL_ADC_MspInit+0x80>)
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <HAL_ADC_MspInit+0x80>)
 8004c20:	f043 0304 	orr.w	r3, r3, #4
 8004c24:	6313      	str	r3, [r2, #48]	; 0x30
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <HAL_ADC_MspInit+0x80>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8004c32:	2304      	movs	r3, #4
 8004c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c36:	2303      	movs	r3, #3
 8004c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8004c3e:	f107 0314 	add.w	r3, r7, #20
 8004c42:	4619      	mov	r1, r3
 8004c44:	4805      	ldr	r0, [pc, #20]	; (8004c5c <HAL_ADC_MspInit+0x84>)
 8004c46:	f001 f8a5 	bl	8005d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c4a:	bf00      	nop
 8004c4c:	3728      	adds	r7, #40	; 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	40012000 	.word	0x40012000
 8004c58:	40023800 	.word	0x40023800
 8004c5c:	40020800 	.word	0x40020800

08004c60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b08a      	sub	sp, #40	; 0x28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c68:	f107 0314 	add.w	r3, r7, #20
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	609a      	str	r2, [r3, #8]
 8004c74:	60da      	str	r2, [r3, #12]
 8004c76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a29      	ldr	r2, [pc, #164]	; (8004d24 <HAL_I2C_MspInit+0xc4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d14b      	bne.n	8004d1a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	4b28      	ldr	r3, [pc, #160]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0304 	and.w	r3, r3, #4
 8004c9a:	613b      	str	r3, [r7, #16]
 8004c9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca6:	4a20      	ldr	r2, [pc, #128]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	6313      	str	r3, [r2, #48]	; 0x30
 8004cae:	4b1e      	ldr	r3, [pc, #120]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cc0:	2312      	movs	r3, #18
 8004cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ccc:	2304      	movs	r3, #4
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4815      	ldr	r0, [pc, #84]	; (8004d2c <HAL_I2C_MspInit+0xcc>)
 8004cd8:	f001 f85c 	bl	8005d94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ce2:	2312      	movs	r3, #18
 8004ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cea:	2303      	movs	r3, #3
 8004cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	480d      	ldr	r0, [pc, #52]	; (8004d30 <HAL_I2C_MspInit+0xd0>)
 8004cfa:	f001 f84b 	bl	8005d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	4b09      	ldr	r3, [pc, #36]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004d08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_I2C_MspInit+0xc8>)
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004d1a:	bf00      	nop
 8004d1c:	3728      	adds	r7, #40	; 0x28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40005c00 	.word	0x40005c00
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40020800 	.word	0x40020800
 8004d30:	40020000 	.word	0x40020000

08004d34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08e      	sub	sp, #56	; 0x38
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d40:	2200      	movs	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	60da      	str	r2, [r3, #12]
 8004d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5b      	ldr	r2, [pc, #364]	; (8004ec0 <HAL_SPI_MspInit+0x18c>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d12c      	bne.n	8004db0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d56:	2300      	movs	r3, #0
 8004d58:	623b      	str	r3, [r7, #32]
 8004d5a:	4b5a      	ldr	r3, [pc, #360]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	4a59      	ldr	r2, [pc, #356]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004d64:	6453      	str	r3, [r2, #68]	; 0x44
 8004d66:	4b57      	ldr	r3, [pc, #348]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d6e:	623b      	str	r3, [r7, #32]
 8004d70:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
 8004d76:	4b53      	ldr	r3, [pc, #332]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7a:	4a52      	ldr	r2, [pc, #328]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6313      	str	r3, [r2, #48]	; 0x30
 8004d82:	4b50      	ldr	r3, [pc, #320]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004d8e:	23e0      	movs	r3, #224	; 0xe0
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d92:	2302      	movs	r3, #2
 8004d94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004d9e:	2305      	movs	r3, #5
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004da6:	4619      	mov	r1, r3
 8004da8:	4847      	ldr	r0, [pc, #284]	; (8004ec8 <HAL_SPI_MspInit+0x194>)
 8004daa:	f000 fff3 	bl	8005d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004dae:	e082      	b.n	8004eb6 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a45      	ldr	r2, [pc, #276]	; (8004ecc <HAL_SPI_MspInit+0x198>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d12d      	bne.n	8004e16 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61bb      	str	r3, [r7, #24]
 8004dbe:	4b41      	ldr	r3, [pc, #260]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dca:	4b3e      	ldr	r3, [pc, #248]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dd2:	61bb      	str	r3, [r7, #24]
 8004dd4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	4b3a      	ldr	r3, [pc, #232]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4a39      	ldr	r2, [pc, #228]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004de0:	f043 0302 	orr.w	r3, r3, #2
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
 8004de6:	4b37      	ldr	r3, [pc, #220]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004df2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004df6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004df8:	2302      	movs	r3, #2
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e00:	2303      	movs	r3, #3
 8004e02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004e04:	2305      	movs	r3, #5
 8004e06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4830      	ldr	r0, [pc, #192]	; (8004ed0 <HAL_SPI_MspInit+0x19c>)
 8004e10:	f000 ffc0 	bl	8005d94 <HAL_GPIO_Init>
}
 8004e14:	e04f      	b.n	8004eb6 <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a2e      	ldr	r2, [pc, #184]	; (8004ed4 <HAL_SPI_MspInit+0x1a0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d14a      	bne.n	8004eb6 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004e20:	2300      	movs	r3, #0
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	4b27      	ldr	r3, [pc, #156]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e28:	4a26      	ldr	r2, [pc, #152]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e2e:	6413      	str	r3, [r2, #64]	; 0x40
 8004e30:	4b24      	ldr	r3, [pc, #144]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e38:	613b      	str	r3, [r7, #16]
 8004e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	4b20      	ldr	r3, [pc, #128]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e46:	f043 0304 	orr.w	r3, r3, #4
 8004e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4c:	4b1d      	ldr	r3, [pc, #116]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e58:	2300      	movs	r3, #0
 8004e5a:	60bb      	str	r3, [r7, #8]
 8004e5c:	4b19      	ldr	r3, [pc, #100]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	4a18      	ldr	r2, [pc, #96]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e62:	f043 0302 	orr.w	r3, r3, #2
 8004e66:	6313      	str	r3, [r2, #48]	; 0x30
 8004e68:	4b16      	ldr	r3, [pc, #88]	; (8004ec4 <HAL_SPI_MspInit+0x190>)
 8004e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	60bb      	str	r3, [r7, #8]
 8004e72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e82:	2303      	movs	r3, #3
 8004e84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004e86:	2306      	movs	r3, #6
 8004e88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4811      	ldr	r0, [pc, #68]	; (8004ed8 <HAL_SPI_MspInit+0x1a4>)
 8004e92:	f000 ff7f 	bl	8005d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004e96:	2320      	movs	r3, #32
 8004e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ea6:	2306      	movs	r3, #6
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4807      	ldr	r0, [pc, #28]	; (8004ed0 <HAL_SPI_MspInit+0x19c>)
 8004eb2:	f000 ff6f 	bl	8005d94 <HAL_GPIO_Init>
}
 8004eb6:	bf00      	nop
 8004eb8:	3738      	adds	r7, #56	; 0x38
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	40013000 	.word	0x40013000
 8004ec4:	40023800 	.word	0x40023800
 8004ec8:	40020000 	.word	0x40020000
 8004ecc:	40003800 	.word	0x40003800
 8004ed0:	40020400 	.word	0x40020400
 8004ed4:	40003c00 	.word	0x40003c00
 8004ed8:	40020800 	.word	0x40020800

08004edc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b085      	sub	sp, #20
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eec:	d10d      	bne.n	8004f0a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	4b09      	ldr	r3, [pc, #36]	; (8004f18 <HAL_TIM_PWM_MspInit+0x3c>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef6:	4a08      	ldr	r2, [pc, #32]	; (8004f18 <HAL_TIM_PWM_MspInit+0x3c>)
 8004ef8:	f043 0301 	orr.w	r3, r3, #1
 8004efc:	6413      	str	r3, [r2, #64]	; 0x40
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <HAL_TIM_PWM_MspInit+0x3c>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	60fb      	str	r3, [r7, #12]
 8004f08:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	40023800 	.word	0x40023800

08004f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0b      	ldr	r2, [pc, #44]	; (8004f58 <HAL_TIM_Base_MspInit+0x3c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d10d      	bne.n	8004f4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004f2e:	2300      	movs	r3, #0
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4b0a      	ldr	r3, [pc, #40]	; (8004f5c <HAL_TIM_Base_MspInit+0x40>)
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	4a09      	ldr	r2, [pc, #36]	; (8004f5c <HAL_TIM_Base_MspInit+0x40>)
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_TIM_Base_MspInit+0x40>)
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	bf00      	nop
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40023800 	.word	0x40023800

08004f60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	; 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f68:	f107 0314 	add.w	r3, r7, #20
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	601a      	str	r2, [r3, #0]
 8004f70:	605a      	str	r2, [r3, #4]
 8004f72:	609a      	str	r2, [r3, #8]
 8004f74:	60da      	str	r2, [r3, #12]
 8004f76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d11e      	bne.n	8004fc0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f82:	2300      	movs	r3, #0
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	4b31      	ldr	r3, [pc, #196]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8a:	4a30      	ldr	r2, [pc, #192]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004f8c:	f043 0301 	orr.w	r3, r3, #1
 8004f90:	6313      	str	r3, [r2, #48]	; 0x30
 8004f92:	4b2e      	ldr	r3, [pc, #184]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004faa:	2300      	movs	r3, #0
 8004fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fb2:	f107 0314 	add.w	r3, r7, #20
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4825      	ldr	r0, [pc, #148]	; (8005050 <HAL_TIM_MspPostInit+0xf0>)
 8004fba:	f000 feeb 	bl	8005d94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004fbe:	e041      	b.n	8005044 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <HAL_TIM_MspPostInit+0xf4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d13c      	bne.n	8005044 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	4b1f      	ldr	r3, [pc, #124]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	4a1e      	ldr	r2, [pc, #120]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004fd4:	f043 0302 	orr.w	r3, r3, #2
 8004fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fda:	4b1c      	ldr	r3, [pc, #112]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	4b18      	ldr	r3, [pc, #96]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fee:	4a17      	ldr	r2, [pc, #92]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004ff0:	f043 0304 	orr.w	r3, r3, #4
 8004ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff6:	4b15      	ldr	r3, [pc, #84]	; (800504c <HAL_TIM_MspPostInit+0xec>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffa:	f003 0304 	and.w	r3, r3, #4
 8004ffe:	60bb      	str	r3, [r7, #8]
 8005000:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005002:	2302      	movs	r3, #2
 8005004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005006:	2302      	movs	r3, #2
 8005008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800500e:	2300      	movs	r3, #0
 8005010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005012:	2302      	movs	r3, #2
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	4619      	mov	r1, r3
 800501c:	480e      	ldr	r0, [pc, #56]	; (8005058 <HAL_TIM_MspPostInit+0xf8>)
 800501e:	f000 feb9 	bl	8005d94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8005022:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8005026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005028:	2302      	movs	r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005030:	2300      	movs	r3, #0
 8005032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005034:	2302      	movs	r3, #2
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4619      	mov	r1, r3
 800503e:	4807      	ldr	r0, [pc, #28]	; (800505c <HAL_TIM_MspPostInit+0xfc>)
 8005040:	f000 fea8 	bl	8005d94 <HAL_GPIO_Init>
}
 8005044:	bf00      	nop
 8005046:	3728      	adds	r7, #40	; 0x28
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40023800 	.word	0x40023800
 8005050:	40020000 	.word	0x40020000
 8005054:	40000400 	.word	0x40000400
 8005058:	40020400 	.word	0x40020400
 800505c:	40020800 	.word	0x40020800

08005060 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08c      	sub	sp, #48	; 0x30
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005068:	2300      	movs	r3, #0
 800506a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8005070:	2200      	movs	r2, #0
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	2019      	movs	r0, #25
 8005076:	f000 fe63 	bl	8005d40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800507a:	2019      	movs	r0, #25
 800507c:	f000 fe7c 	bl	8005d78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005080:	2300      	movs	r3, #0
 8005082:	60fb      	str	r3, [r7, #12]
 8005084:	4b1f      	ldr	r3, [pc, #124]	; (8005104 <HAL_InitTick+0xa4>)
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	4a1e      	ldr	r2, [pc, #120]	; (8005104 <HAL_InitTick+0xa4>)
 800508a:	f043 0301 	orr.w	r3, r3, #1
 800508e:	6453      	str	r3, [r2, #68]	; 0x44
 8005090:	4b1c      	ldr	r3, [pc, #112]	; (8005104 <HAL_InitTick+0xa4>)
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800509c:	f107 0210 	add.w	r2, r7, #16
 80050a0:	f107 0314 	add.w	r3, r7, #20
 80050a4:	4611      	mov	r1, r2
 80050a6:	4618      	mov	r0, r3
 80050a8:	f003 fb24 	bl	80086f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80050ac:	f003 fb0e 	bl	80086cc <HAL_RCC_GetPCLK2Freq>
 80050b0:	4603      	mov	r3, r0
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80050b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b8:	4a13      	ldr	r2, [pc, #76]	; (8005108 <HAL_InitTick+0xa8>)
 80050ba:	fba2 2303 	umull	r2, r3, r2, r3
 80050be:	0c9b      	lsrs	r3, r3, #18
 80050c0:	3b01      	subs	r3, #1
 80050c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80050c4:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_InitTick+0xac>)
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <HAL_InitTick+0xb0>)
 80050c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <HAL_InitTick+0xac>)
 80050cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80050d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80050d2:	4a0e      	ldr	r2, [pc, #56]	; (800510c <HAL_InitTick+0xac>)
 80050d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80050d8:	4b0c      	ldr	r3, [pc, #48]	; (800510c <HAL_InitTick+0xac>)
 80050da:	2200      	movs	r2, #0
 80050dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80050de:	4b0b      	ldr	r3, [pc, #44]	; (800510c <HAL_InitTick+0xac>)
 80050e0:	2200      	movs	r2, #0
 80050e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80050e4:	4809      	ldr	r0, [pc, #36]	; (800510c <HAL_InitTick+0xac>)
 80050e6:	f004 ffbd 	bl	800a064 <HAL_TIM_Base_Init>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d104      	bne.n	80050fa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80050f0:	4806      	ldr	r0, [pc, #24]	; (800510c <HAL_InitTick+0xac>)
 80050f2:	f004 ffe2 	bl	800a0ba <HAL_TIM_Base_Start_IT>
 80050f6:	4603      	mov	r3, r0
 80050f8:	e000      	b.n	80050fc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3730      	adds	r7, #48	; 0x30
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40023800 	.word	0x40023800
 8005108:	431bde83 	.word	0x431bde83
 800510c:	20004818 	.word	0x20004818
 8005110:	40010000 	.word	0x40010000

08005114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005118:	e7fe      	b.n	8005118 <NMI_Handler+0x4>

0800511a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800511a:	b480      	push	{r7}
 800511c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800511e:	e7fe      	b.n	800511e <HardFault_Handler+0x4>

08005120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005124:	e7fe      	b.n	8005124 <MemManage_Handler+0x4>

08005126 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005126:	b480      	push	{r7}
 8005128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800512a:	e7fe      	b.n	800512a <BusFault_Handler+0x4>

0800512c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005130:	e7fe      	b.n	8005130 <UsageFault_Handler+0x4>

08005132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005132:	b480      	push	{r7}
 8005134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005136:	bf00      	nop
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005144:	4802      	ldr	r0, [pc, #8]	; (8005150 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005146:	f005 f845 	bl	800a1d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800514a:	bf00      	nop
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20004818 	.word	0x20004818

08005154 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005158:	4802      	ldr	r0, [pc, #8]	; (8005164 <OTG_FS_IRQHandler+0x10>)
 800515a:	f002 f8e9 	bl	8007330 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	200061a0 	.word	0x200061a0

08005168 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005168:	b480      	push	{r7}
 800516a:	af00      	add	r7, sp, #0
	return 1;
 800516c:	2301      	movs	r3, #1
}
 800516e:	4618      	mov	r0, r3
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <_kill>:

int _kill(int pid, int sig)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005182:	f00c fb85 	bl	8011890 <__errno>
 8005186:	4602      	mov	r2, r0
 8005188:	2316      	movs	r3, #22
 800518a:	6013      	str	r3, [r2, #0]
	return -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005190:	4618      	mov	r0, r3
 8005192:	3708      	adds	r7, #8
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <_exit>:

void _exit (int status)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051a0:	f04f 31ff 	mov.w	r1, #4294967295
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f7ff ffe7 	bl	8005178 <_kill>
	while (1) {}		/* Make sure we hang here */
 80051aa:	e7fe      	b.n	80051aa <_exit+0x12>

080051ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e00a      	b.n	80051d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051be:	f3af 8000 	nop.w
 80051c2:	4601      	mov	r1, r0
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	60ba      	str	r2, [r7, #8]
 80051ca:	b2ca      	uxtb	r2, r1
 80051cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	3301      	adds	r3, #1
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	697a      	ldr	r2, [r7, #20]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	429a      	cmp	r2, r3
 80051da:	dbf0      	blt.n	80051be <_read+0x12>
	}

return len;
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3718      	adds	r7, #24
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b086      	sub	sp, #24
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	e009      	b.n	800520c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	60ba      	str	r2, [r7, #8]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3301      	adds	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	dbf1      	blt.n	80051f8 <_write+0x12>
	}
	return len;
 8005214:	687b      	ldr	r3, [r7, #4]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3718      	adds	r7, #24
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <_close>:

int _close(int file)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
	return -1;
 8005226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005236:	b480      	push	{r7}
 8005238:	b083      	sub	sp, #12
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005246:	605a      	str	r2, [r3, #4]
	return 0;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	370c      	adds	r7, #12
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <_isatty>:

int _isatty(int file)
{
 8005256:	b480      	push	{r7}
 8005258:	b083      	sub	sp, #12
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
	return 1;
 800525e:	2301      	movs	r3, #1
}
 8005260:	4618      	mov	r0, r3
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
	return 0;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b086      	sub	sp, #24
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005290:	4a14      	ldr	r2, [pc, #80]	; (80052e4 <_sbrk+0x5c>)
 8005292:	4b15      	ldr	r3, [pc, #84]	; (80052e8 <_sbrk+0x60>)
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800529c:	4b13      	ldr	r3, [pc, #76]	; (80052ec <_sbrk+0x64>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052a4:	4b11      	ldr	r3, [pc, #68]	; (80052ec <_sbrk+0x64>)
 80052a6:	4a12      	ldr	r2, [pc, #72]	; (80052f0 <_sbrk+0x68>)
 80052a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <_sbrk+0x64>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4413      	add	r3, r2
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d207      	bcs.n	80052c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052b8:	f00c faea 	bl	8011890 <__errno>
 80052bc:	4602      	mov	r2, r0
 80052be:	230c      	movs	r3, #12
 80052c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	e009      	b.n	80052dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80052c8:	4b08      	ldr	r3, [pc, #32]	; (80052ec <_sbrk+0x64>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052ce:	4b07      	ldr	r3, [pc, #28]	; (80052ec <_sbrk+0x64>)
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a05      	ldr	r2, [pc, #20]	; (80052ec <_sbrk+0x64>)
 80052d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	20020000 	.word	0x20020000
 80052e8:	00000400 	.word	0x00000400
 80052ec:	20000878 	.word	0x20000878
 80052f0:	200065b0 	.word	0x200065b0

080052f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80052f8:	4b08      	ldr	r3, [pc, #32]	; (800531c <SystemInit+0x28>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	4a07      	ldr	r2, [pc, #28]	; (800531c <SystemInit+0x28>)
 8005300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005308:	4b04      	ldr	r3, [pc, #16]	; (800531c <SystemInit+0x28>)
 800530a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800530e:	609a      	str	r2, [r3, #8]
#endif
}
 8005310:	bf00      	nop
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop
 800531c:	e000ed00 	.word	0xe000ed00

08005320 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005320:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005358 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005324:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005326:	e003      	b.n	8005330 <LoopCopyDataInit>

08005328 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800532a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800532c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800532e:	3104      	adds	r1, #4

08005330 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005330:	480b      	ldr	r0, [pc, #44]	; (8005360 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005334:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005336:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005338:	d3f6      	bcc.n	8005328 <CopyDataInit>
  ldr  r2, =_sbss
 800533a:	4a0b      	ldr	r2, [pc, #44]	; (8005368 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800533c:	e002      	b.n	8005344 <LoopFillZerobss>

0800533e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800533e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005340:	f842 3b04 	str.w	r3, [r2], #4

08005344 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005344:	4b09      	ldr	r3, [pc, #36]	; (800536c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005346:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005348:	d3f9      	bcc.n	800533e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800534a:	f7ff ffd3 	bl	80052f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800534e:	f00c fab7 	bl	80118c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005352:	f7fd ffa9 	bl	80032a8 <main>
  bx  lr    
 8005356:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005358:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800535c:	08017b70 	.word	0x08017b70
  ldr  r0, =_sdata
 8005360:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005364:	20000604 	.word	0x20000604
  ldr  r2, =_sbss
 8005368:	20000604 	.word	0x20000604
  ldr  r3, = _ebss
 800536c:	200065ac 	.word	0x200065ac

08005370 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005370:	e7fe      	b.n	8005370 <ADC_IRQHandler>
	...

08005374 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005378:	4b0e      	ldr	r3, [pc, #56]	; (80053b4 <HAL_Init+0x40>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0d      	ldr	r2, [pc, #52]	; (80053b4 <HAL_Init+0x40>)
 800537e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005382:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_Init+0x40>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0a      	ldr	r2, [pc, #40]	; (80053b4 <HAL_Init+0x40>)
 800538a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800538e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005390:	4b08      	ldr	r3, [pc, #32]	; (80053b4 <HAL_Init+0x40>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a07      	ldr	r2, [pc, #28]	; (80053b4 <HAL_Init+0x40>)
 8005396:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800539c:	2003      	movs	r0, #3
 800539e:	f000 fcc4 	bl	8005d2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80053a2:	2000      	movs	r0, #0
 80053a4:	f7ff fe5c 	bl	8005060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80053a8:	f7ff fbea 	bl	8004b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	40023c00 	.word	0x40023c00

080053b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80053bc:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <HAL_IncTick+0x20>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	461a      	mov	r2, r3
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_IncTick+0x24>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4413      	add	r3, r2
 80053c8:	4a04      	ldr	r2, [pc, #16]	; (80053dc <HAL_IncTick+0x24>)
 80053ca:	6013      	str	r3, [r2, #0]
}
 80053cc:	bf00      	nop
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	20000284 	.word	0x20000284
 80053dc:	20004858 	.word	0x20004858

080053e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80053e0:	b480      	push	{r7}
 80053e2:	af00      	add	r7, sp, #0
  return uwTick;
 80053e4:	4b03      	ldr	r3, [pc, #12]	; (80053f4 <HAL_GetTick+0x14>)
 80053e6:	681b      	ldr	r3, [r3, #0]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	20004858 	.word	0x20004858

080053f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005400:	f7ff ffee 	bl	80053e0 <HAL_GetTick>
 8005404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005410:	d005      	beq.n	800541e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005412:	4b09      	ldr	r3, [pc, #36]	; (8005438 <HAL_Delay+0x40>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	461a      	mov	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	4413      	add	r3, r2
 800541c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800541e:	bf00      	nop
 8005420:	f7ff ffde 	bl	80053e0 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	68fa      	ldr	r2, [r7, #12]
 800542c:	429a      	cmp	r2, r3
 800542e:	d8f7      	bhi.n	8005420 <HAL_Delay+0x28>
  {
  }
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000284 	.word	0x20000284

0800543c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005444:	2300      	movs	r3, #0
 8005446:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e033      	b.n	80054ba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7ff fbbc 	bl	8004bd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b00      	cmp	r3, #0
 8005478:	d118      	bne.n	80054ac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005482:	f023 0302 	bic.w	r3, r3, #2
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 faa2 	bl	80059d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	f023 0303 	bic.w	r3, r3, #3
 80054a2:	f043 0201 	orr.w	r2, r3, #1
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
 80054aa:	e001      	b.n	80054b0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b085      	sub	sp, #20
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80054cc:	2300      	movs	r3, #0
 80054ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d101      	bne.n	80054de <HAL_ADC_Start+0x1a>
 80054da:	2302      	movs	r3, #2
 80054dc:	e0a5      	b.n	800562a <HAL_ADC_Start+0x166>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2201      	movs	r2, #1
 80054e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d018      	beq.n	8005526 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689a      	ldr	r2, [r3, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0201 	orr.w	r2, r2, #1
 8005502:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005504:	4b4c      	ldr	r3, [pc, #304]	; (8005638 <HAL_ADC_Start+0x174>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a4c      	ldr	r2, [pc, #304]	; (800563c <HAL_ADC_Start+0x178>)
 800550a:	fba2 2303 	umull	r2, r3, r2, r3
 800550e:	0c9a      	lsrs	r2, r3, #18
 8005510:	4613      	mov	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	4413      	add	r3, r2
 8005516:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005518:	e002      	b.n	8005520 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	3b01      	subs	r3, #1
 800551e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f9      	bne.n	800551a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0301 	and.w	r3, r3, #1
 8005530:	2b01      	cmp	r3, #1
 8005532:	d179      	bne.n	8005628 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005538:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800553c:	f023 0301 	bic.w	r3, r3, #1
 8005540:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800555e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800556e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005572:	d106      	bne.n	8005582 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005578:	f023 0206 	bic.w	r2, r3, #6
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	645a      	str	r2, [r3, #68]	; 0x44
 8005580:	e002      	b.n	8005588 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005590:	4b2b      	ldr	r3, [pc, #172]	; (8005640 <HAL_ADC_Start+0x17c>)
 8005592:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800559c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d12a      	bne.n	8005600 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a25      	ldr	r2, [pc, #148]	; (8005644 <HAL_ADC_Start+0x180>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d015      	beq.n	80055e0 <HAL_ADC_Start+0x11c>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a23      	ldr	r2, [pc, #140]	; (8005648 <HAL_ADC_Start+0x184>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d105      	bne.n	80055ca <HAL_ADC_Start+0x106>
 80055be:	4b20      	ldr	r3, [pc, #128]	; (8005640 <HAL_ADC_Start+0x17c>)
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	f003 031f 	and.w	r3, r3, #31
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d00a      	beq.n	80055e0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a1f      	ldr	r2, [pc, #124]	; (800564c <HAL_ADC_Start+0x188>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d129      	bne.n	8005628 <HAL_ADC_Start+0x164>
 80055d4:	4b1a      	ldr	r3, [pc, #104]	; (8005640 <HAL_ADC_Start+0x17c>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 031f 	and.w	r3, r3, #31
 80055dc:	2b0f      	cmp	r3, #15
 80055de:	d823      	bhi.n	8005628 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11c      	bne.n	8005628 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80055fc:	609a      	str	r2, [r3, #8]
 80055fe:	e013      	b.n	8005628 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a0f      	ldr	r2, [pc, #60]	; (8005644 <HAL_ADC_Start+0x180>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d10e      	bne.n	8005628 <HAL_ADC_Start+0x164>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d107      	bne.n	8005628 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005626:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	2000027c 	.word	0x2000027c
 800563c:	431bde83 	.word	0x431bde83
 8005640:	40012300 	.word	0x40012300
 8005644:	40012000 	.word	0x40012000
 8005648:	40012100 	.word	0x40012100
 800564c:	40012200 	.word	0x40012200

08005650 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800566c:	d113      	bne.n	8005696 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005678:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567c:	d10b      	bne.n	8005696 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f043 0220 	orr.w	r2, r3, #32
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e05c      	b.n	8005750 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005696:	f7ff fea3 	bl	80053e0 <HAL_GetTick>
 800569a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800569c:	e01a      	b.n	80056d4 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a4:	d016      	beq.n	80056d4 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d007      	beq.n	80056bc <HAL_ADC_PollForConversion+0x6c>
 80056ac:	f7ff fe98 	bl	80053e0 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	683a      	ldr	r2, [r7, #0]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d20b      	bcs.n	80056d4 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c0:	f043 0204 	orr.w	r2, r3, #4
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e03d      	b.n	8005750 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d1dd      	bne.n	800569e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f06f 0212 	mvn.w	r2, #18
 80056ea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d123      	bne.n	800574e <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800570a:	2b00      	cmp	r3, #0
 800570c:	d11f      	bne.n	800574e <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005714:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005718:	2b00      	cmp	r3, #0
 800571a:	d006      	beq.n	800572a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005726:	2b00      	cmp	r3, #0
 8005728:	d111      	bne.n	800574e <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d105      	bne.n	800574e <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f043 0201 	orr.w	r2, r3, #1
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005758:	b480      	push	{r7}
 800575a:	b083      	sub	sp, #12
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
	...

08005774 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005788:	2b01      	cmp	r3, #1
 800578a:	d101      	bne.n	8005790 <HAL_ADC_ConfigChannel+0x1c>
 800578c:	2302      	movs	r3, #2
 800578e:	e113      	b.n	80059b8 <HAL_ADC_ConfigChannel+0x244>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b09      	cmp	r3, #9
 800579e:	d925      	bls.n	80057ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68d9      	ldr	r1, [r3, #12]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	4613      	mov	r3, r2
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	4413      	add	r3, r2
 80057b4:	3b1e      	subs	r3, #30
 80057b6:	2207      	movs	r2, #7
 80057b8:	fa02 f303 	lsl.w	r3, r2, r3
 80057bc:	43da      	mvns	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	400a      	ands	r2, r1
 80057c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68d9      	ldr	r1, [r3, #12]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	4618      	mov	r0, r3
 80057d8:	4603      	mov	r3, r0
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	4403      	add	r3, r0
 80057de:	3b1e      	subs	r3, #30
 80057e0:	409a      	lsls	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	430a      	orrs	r2, r1
 80057e8:	60da      	str	r2, [r3, #12]
 80057ea:	e022      	b.n	8005832 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	6919      	ldr	r1, [r3, #16]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	461a      	mov	r2, r3
 80057fa:	4613      	mov	r3, r2
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	4413      	add	r3, r2
 8005800:	2207      	movs	r2, #7
 8005802:	fa02 f303 	lsl.w	r3, r2, r3
 8005806:	43da      	mvns	r2, r3
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	400a      	ands	r2, r1
 800580e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6919      	ldr	r1, [r3, #16]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	b29b      	uxth	r3, r3
 8005820:	4618      	mov	r0, r3
 8005822:	4603      	mov	r3, r0
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	4403      	add	r3, r0
 8005828:	409a      	lsls	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	430a      	orrs	r2, r1
 8005830:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2b06      	cmp	r3, #6
 8005838:	d824      	bhi.n	8005884 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	3b05      	subs	r3, #5
 800584c:	221f      	movs	r2, #31
 800584e:	fa02 f303 	lsl.w	r3, r2, r3
 8005852:	43da      	mvns	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	400a      	ands	r2, r1
 800585a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	b29b      	uxth	r3, r3
 8005868:	4618      	mov	r0, r3
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	009b      	lsls	r3, r3, #2
 8005872:	4413      	add	r3, r2
 8005874:	3b05      	subs	r3, #5
 8005876:	fa00 f203 	lsl.w	r2, r0, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	635a      	str	r2, [r3, #52]	; 0x34
 8005882:	e04c      	b.n	800591e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b0c      	cmp	r3, #12
 800588a:	d824      	bhi.n	80058d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	3b23      	subs	r3, #35	; 0x23
 800589e:	221f      	movs	r2, #31
 80058a0:	fa02 f303 	lsl.w	r3, r2, r3
 80058a4:	43da      	mvns	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	400a      	ands	r2, r1
 80058ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	4618      	mov	r0, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	3b23      	subs	r3, #35	; 0x23
 80058c8:	fa00 f203 	lsl.w	r2, r0, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	631a      	str	r2, [r3, #48]	; 0x30
 80058d4:	e023      	b.n	800591e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	3b41      	subs	r3, #65	; 0x41
 80058e8:	221f      	movs	r2, #31
 80058ea:	fa02 f303 	lsl.w	r3, r2, r3
 80058ee:	43da      	mvns	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	400a      	ands	r2, r1
 80058f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	b29b      	uxth	r3, r3
 8005904:	4618      	mov	r0, r3
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	3b41      	subs	r3, #65	; 0x41
 8005912:	fa00 f203 	lsl.w	r2, r0, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800591e:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <HAL_ADC_ConfigChannel+0x250>)
 8005920:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a28      	ldr	r2, [pc, #160]	; (80059c8 <HAL_ADC_ConfigChannel+0x254>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d10f      	bne.n	800594c <HAL_ADC_ConfigChannel+0x1d8>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b12      	cmp	r3, #18
 8005932:	d10b      	bne.n	800594c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <HAL_ADC_ConfigChannel+0x254>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d12b      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x23a>
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <HAL_ADC_ConfigChannel+0x258>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <HAL_ADC_ConfigChannel+0x1f4>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b11      	cmp	r3, #17
 8005966:	d122      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a11      	ldr	r2, [pc, #68]	; (80059cc <HAL_ADC_ConfigChannel+0x258>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d111      	bne.n	80059ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <HAL_ADC_ConfigChannel+0x25c>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a11      	ldr	r2, [pc, #68]	; (80059d4 <HAL_ADC_ConfigChannel+0x260>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	0c9a      	lsrs	r2, r3, #18
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059a0:	e002      	b.n	80059a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f9      	bne.n	80059a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40012300 	.word	0x40012300
 80059c8:	40012000 	.word	0x40012000
 80059cc:	10000012 	.word	0x10000012
 80059d0:	2000027c 	.word	0x2000027c
 80059d4:	431bde83 	.word	0x431bde83

080059d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059e0:	4b79      	ldr	r3, [pc, #484]	; (8005bc8 <ADC_Init+0x1f0>)
 80059e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6859      	ldr	r1, [r3, #4]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	021a      	lsls	r2, r3, #8
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005a30:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a52:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6899      	ldr	r1, [r3, #8]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	4a58      	ldr	r2, [pc, #352]	; (8005bcc <ADC_Init+0x1f4>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d022      	beq.n	8005ab6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005a7e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6899      	ldr	r1, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689a      	ldr	r2, [r3, #8]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005aa0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6899      	ldr	r1, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	609a      	str	r2, [r3, #8]
 8005ab4:	e00f      	b.n	8005ad6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005ac4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ad4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0202 	bic.w	r2, r2, #2
 8005ae4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	6899      	ldr	r1, [r3, #8]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	7e1b      	ldrb	r3, [r3, #24]
 8005af0:	005a      	lsls	r2, r3, #1
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01b      	beq.n	8005b3c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b12:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005b22:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6859      	ldr	r1, [r3, #4]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	035a      	lsls	r2, r3, #13
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	430a      	orrs	r2, r1
 8005b38:	605a      	str	r2, [r3, #4]
 8005b3a:	e007      	b.n	8005b4c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685a      	ldr	r2, [r3, #4]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b4a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005b5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	3b01      	subs	r3, #1
 8005b68:	051a      	lsls	r2, r3, #20
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005b80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	6899      	ldr	r1, [r3, #8]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b8e:	025a      	lsls	r2, r3, #9
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	029a      	lsls	r2, r3, #10
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	609a      	str	r2, [r3, #8]
}
 8005bbc:	bf00      	nop
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	40012300 	.word	0x40012300
 8005bcc:	0f000001 	.word	0x0f000001

08005bd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f003 0307 	and.w	r3, r3, #7
 8005bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005be0:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <__NVIC_SetPriorityGrouping+0x44>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bec:	4013      	ands	r3, r2
 8005bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c02:	4a04      	ldr	r2, [pc, #16]	; (8005c14 <__NVIC_SetPriorityGrouping+0x44>)
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	60d3      	str	r3, [r2, #12]
}
 8005c08:	bf00      	nop
 8005c0a:	3714      	adds	r7, #20
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr
 8005c14:	e000ed00 	.word	0xe000ed00

08005c18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c1c:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <__NVIC_GetPriorityGrouping+0x18>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	0a1b      	lsrs	r3, r3, #8
 8005c22:	f003 0307 	and.w	r3, r3, #7
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	e000ed00 	.word	0xe000ed00

08005c34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	db0b      	blt.n	8005c5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	f003 021f 	and.w	r2, r3, #31
 8005c4c:	4907      	ldr	r1, [pc, #28]	; (8005c6c <__NVIC_EnableIRQ+0x38>)
 8005c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	2001      	movs	r0, #1
 8005c56:	fa00 f202 	lsl.w	r2, r0, r2
 8005c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	e000e100 	.word	0xe000e100

08005c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	4603      	mov	r3, r0
 8005c78:	6039      	str	r1, [r7, #0]
 8005c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db0a      	blt.n	8005c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	490c      	ldr	r1, [pc, #48]	; (8005cbc <__NVIC_SetPriority+0x4c>)
 8005c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c8e:	0112      	lsls	r2, r2, #4
 8005c90:	b2d2      	uxtb	r2, r2
 8005c92:	440b      	add	r3, r1
 8005c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c98:	e00a      	b.n	8005cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	4908      	ldr	r1, [pc, #32]	; (8005cc0 <__NVIC_SetPriority+0x50>)
 8005ca0:	79fb      	ldrb	r3, [r7, #7]
 8005ca2:	f003 030f 	and.w	r3, r3, #15
 8005ca6:	3b04      	subs	r3, #4
 8005ca8:	0112      	lsls	r2, r2, #4
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	440b      	add	r3, r1
 8005cae:	761a      	strb	r2, [r3, #24]
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	e000e100 	.word	0xe000e100
 8005cc0:	e000ed00 	.word	0xe000ed00

08005cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b089      	sub	sp, #36	; 0x24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f003 0307 	and.w	r3, r3, #7
 8005cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f1c3 0307 	rsb	r3, r3, #7
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	bf28      	it	cs
 8005ce2:	2304      	movcs	r3, #4
 8005ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ce6:	69fb      	ldr	r3, [r7, #28]
 8005ce8:	3304      	adds	r3, #4
 8005cea:	2b06      	cmp	r3, #6
 8005cec:	d902      	bls.n	8005cf4 <NVIC_EncodePriority+0x30>
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	3b03      	subs	r3, #3
 8005cf2:	e000      	b.n	8005cf6 <NVIC_EncodePriority+0x32>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005d02:	43da      	mvns	r2, r3
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	401a      	ands	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	fa01 f303 	lsl.w	r3, r1, r3
 8005d16:	43d9      	mvns	r1, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d1c:	4313      	orrs	r3, r2
         );
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3724      	adds	r7, #36	; 0x24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d2a:	b580      	push	{r7, lr}
 8005d2c:	b082      	sub	sp, #8
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f7ff ff4c 	bl	8005bd0 <__NVIC_SetPriorityGrouping>
}
 8005d38:	bf00      	nop
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b086      	sub	sp, #24
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d52:	f7ff ff61 	bl	8005c18 <__NVIC_GetPriorityGrouping>
 8005d56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	68b9      	ldr	r1, [r7, #8]
 8005d5c:	6978      	ldr	r0, [r7, #20]
 8005d5e:	f7ff ffb1 	bl	8005cc4 <NVIC_EncodePriority>
 8005d62:	4602      	mov	r2, r0
 8005d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	f7ff ff80 	bl	8005c70 <__NVIC_SetPriority>
}
 8005d70:	bf00      	nop
 8005d72:	3718      	adds	r7, #24
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b082      	sub	sp, #8
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7ff ff54 	bl	8005c34 <__NVIC_EnableIRQ>
}
 8005d8c:	bf00      	nop
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
 8005d9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005da2:	2300      	movs	r3, #0
 8005da4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e165      	b.n	800607c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	697a      	ldr	r2, [r7, #20]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	f040 8154 	bne.w	8006076 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d00b      	beq.n	8005dee <HAL_GPIO_Init+0x5a>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d007      	beq.n	8005dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005de2:	2b11      	cmp	r3, #17
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	2b12      	cmp	r3, #18
 8005dec:	d130      	bne.n	8005e50 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	2203      	movs	r2, #3
 8005dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfe:	43db      	mvns	r3, r3
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	4013      	ands	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e24:	2201      	movs	r2, #1
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	fa02 f303 	lsl.w	r3, r2, r3
 8005e2c:	43db      	mvns	r3, r3
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	4013      	ands	r3, r2
 8005e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	091b      	lsrs	r3, r3, #4
 8005e3a:	f003 0201 	and.w	r2, r3, #1
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	2203      	movs	r2, #3
 8005e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e60:	43db      	mvns	r3, r3
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	4013      	ands	r3, r2
 8005e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	fa02 f303 	lsl.w	r3, r2, r3
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69ba      	ldr	r2, [r7, #24]
 8005e7e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d003      	beq.n	8005e90 <HAL_GPIO_Init+0xfc>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	2b12      	cmp	r3, #18
 8005e8e:	d123      	bne.n	8005ed8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	08da      	lsrs	r2, r3, #3
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	3208      	adds	r2, #8
 8005e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	f003 0307 	and.w	r3, r3, #7
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	220f      	movs	r2, #15
 8005ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8005eac:	43db      	mvns	r3, r3
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec4:	69ba      	ldr	r2, [r7, #24]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	08da      	lsrs	r2, r3, #3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3208      	adds	r2, #8
 8005ed2:	69b9      	ldr	r1, [r7, #24]
 8005ed4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	2203      	movs	r2, #3
 8005ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f003 0203 	and.w	r2, r3, #3
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	69ba      	ldr	r2, [r7, #24]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69ba      	ldr	r2, [r7, #24]
 8005f0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f000 80ae 	beq.w	8006076 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	4b5c      	ldr	r3, [pc, #368]	; (8006090 <HAL_GPIO_Init+0x2fc>)
 8005f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f22:	4a5b      	ldr	r2, [pc, #364]	; (8006090 <HAL_GPIO_Init+0x2fc>)
 8005f24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f28:	6453      	str	r3, [r2, #68]	; 0x44
 8005f2a:	4b59      	ldr	r3, [pc, #356]	; (8006090 <HAL_GPIO_Init+0x2fc>)
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f36:	4a57      	ldr	r2, [pc, #348]	; (8006094 <HAL_GPIO_Init+0x300>)
 8005f38:	69fb      	ldr	r3, [r7, #28]
 8005f3a:	089b      	lsrs	r3, r3, #2
 8005f3c:	3302      	adds	r3, #2
 8005f3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	009b      	lsls	r3, r3, #2
 8005f4c:	220f      	movs	r2, #15
 8005f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f52:	43db      	mvns	r3, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4013      	ands	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	4a4e      	ldr	r2, [pc, #312]	; (8006098 <HAL_GPIO_Init+0x304>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d025      	beq.n	8005fae <HAL_GPIO_Init+0x21a>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a4d      	ldr	r2, [pc, #308]	; (800609c <HAL_GPIO_Init+0x308>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d01f      	beq.n	8005faa <HAL_GPIO_Init+0x216>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	4a4c      	ldr	r2, [pc, #304]	; (80060a0 <HAL_GPIO_Init+0x30c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d019      	beq.n	8005fa6 <HAL_GPIO_Init+0x212>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <HAL_GPIO_Init+0x310>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_GPIO_Init+0x20e>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a4a      	ldr	r2, [pc, #296]	; (80060a8 <HAL_GPIO_Init+0x314>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d00d      	beq.n	8005f9e <HAL_GPIO_Init+0x20a>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a49      	ldr	r2, [pc, #292]	; (80060ac <HAL_GPIO_Init+0x318>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d007      	beq.n	8005f9a <HAL_GPIO_Init+0x206>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a48      	ldr	r2, [pc, #288]	; (80060b0 <HAL_GPIO_Init+0x31c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d101      	bne.n	8005f96 <HAL_GPIO_Init+0x202>
 8005f92:	2306      	movs	r3, #6
 8005f94:	e00c      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005f96:	2307      	movs	r3, #7
 8005f98:	e00a      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005f9a:	2305      	movs	r3, #5
 8005f9c:	e008      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005f9e:	2304      	movs	r3, #4
 8005fa0:	e006      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e004      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005fa6:	2302      	movs	r3, #2
 8005fa8:	e002      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005faa:	2301      	movs	r3, #1
 8005fac:	e000      	b.n	8005fb0 <HAL_GPIO_Init+0x21c>
 8005fae:	2300      	movs	r3, #0
 8005fb0:	69fa      	ldr	r2, [r7, #28]
 8005fb2:	f002 0203 	and.w	r2, r2, #3
 8005fb6:	0092      	lsls	r2, r2, #2
 8005fb8:	4093      	lsls	r3, r2
 8005fba:	69ba      	ldr	r2, [r7, #24]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fc0:	4934      	ldr	r1, [pc, #208]	; (8006094 <HAL_GPIO_Init+0x300>)
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	089b      	lsrs	r3, r3, #2
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fce:	4b39      	ldr	r3, [pc, #228]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	43db      	mvns	r3, r3
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d003      	beq.n	8005ff2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ff2:	4a30      	ldr	r2, [pc, #192]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ff8:	4b2e      	ldr	r3, [pc, #184]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	43db      	mvns	r3, r3
 8006002:	69ba      	ldr	r2, [r7, #24]
 8006004:	4013      	ands	r3, r2
 8006006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	4313      	orrs	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800601c:	4a25      	ldr	r2, [pc, #148]	; (80060b4 <HAL_GPIO_Init+0x320>)
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	43db      	mvns	r3, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800603a:	2b00      	cmp	r3, #0
 800603c:	d003      	beq.n	8006046 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006046:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800604c:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <HAL_GPIO_Init+0x320>)
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4313      	orrs	r3, r2
 800606e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006070:	4a10      	ldr	r2, [pc, #64]	; (80060b4 <HAL_GPIO_Init+0x320>)
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	3301      	adds	r3, #1
 800607a:	61fb      	str	r3, [r7, #28]
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	2b0f      	cmp	r3, #15
 8006080:	f67f ae96 	bls.w	8005db0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006084:	bf00      	nop
 8006086:	3724      	adds	r7, #36	; 0x24
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr
 8006090:	40023800 	.word	0x40023800
 8006094:	40013800 	.word	0x40013800
 8006098:	40020000 	.word	0x40020000
 800609c:	40020400 	.word	0x40020400
 80060a0:	40020800 	.word	0x40020800
 80060a4:	40020c00 	.word	0x40020c00
 80060a8:	40021000 	.word	0x40021000
 80060ac:	40021400 	.word	0x40021400
 80060b0:	40021800 	.word	0x40021800
 80060b4:	40013c00 	.word	0x40013c00

080060b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	460b      	mov	r3, r1
 80060c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691a      	ldr	r2, [r3, #16]
 80060c8:	887b      	ldrh	r3, [r7, #2]
 80060ca:	4013      	ands	r3, r2
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060d0:	2301      	movs	r3, #1
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	e001      	b.n	80060da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060d6:	2300      	movs	r3, #0
 80060d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060da:	7bfb      	ldrb	r3, [r7, #15]
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	807b      	strh	r3, [r7, #2]
 80060f4:	4613      	mov	r3, r2
 80060f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f8:	787b      	ldrb	r3, [r7, #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060fe:	887a      	ldrh	r2, [r7, #2]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006104:	e003      	b.n	800610e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006106:	887b      	ldrh	r3, [r7, #2]
 8006108:	041a      	lsls	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	619a      	str	r2, [r3, #24]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b084      	sub	sp, #16
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d101      	bne.n	800612e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e11f      	b.n	800636e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b00      	cmp	r3, #0
 8006138:	d106      	bne.n	8006148 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f7fe fd8c 	bl	8004c60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2224      	movs	r2, #36	; 0x24
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 0201 	bic.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800616e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800617e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006180:	f002 fa90 	bl	80086a4 <HAL_RCC_GetPCLK1Freq>
 8006184:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	4a7b      	ldr	r2, [pc, #492]	; (8006378 <HAL_I2C_Init+0x25c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d807      	bhi.n	80061a0 <HAL_I2C_Init+0x84>
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a7a      	ldr	r2, [pc, #488]	; (800637c <HAL_I2C_Init+0x260>)
 8006194:	4293      	cmp	r3, r2
 8006196:	bf94      	ite	ls
 8006198:	2301      	movls	r3, #1
 800619a:	2300      	movhi	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e006      	b.n	80061ae <HAL_I2C_Init+0x92>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	4a77      	ldr	r2, [pc, #476]	; (8006380 <HAL_I2C_Init+0x264>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	bf94      	ite	ls
 80061a8:	2301      	movls	r3, #1
 80061aa:	2300      	movhi	r3, #0
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e0db      	b.n	800636e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	4a72      	ldr	r2, [pc, #456]	; (8006384 <HAL_I2C_Init+0x268>)
 80061ba:	fba2 2303 	umull	r2, r3, r2, r3
 80061be:	0c9b      	lsrs	r3, r3, #18
 80061c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	4a64      	ldr	r2, [pc, #400]	; (8006378 <HAL_I2C_Init+0x25c>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d802      	bhi.n	80061f0 <HAL_I2C_Init+0xd4>
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	3301      	adds	r3, #1
 80061ee:	e009      	b.n	8006204 <HAL_I2C_Init+0xe8>
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061f6:	fb02 f303 	mul.w	r3, r2, r3
 80061fa:	4a63      	ldr	r2, [pc, #396]	; (8006388 <HAL_I2C_Init+0x26c>)
 80061fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006200:	099b      	lsrs	r3, r3, #6
 8006202:	3301      	adds	r3, #1
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	6812      	ldr	r2, [r2, #0]
 8006208:	430b      	orrs	r3, r1
 800620a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006216:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	4956      	ldr	r1, [pc, #344]	; (8006378 <HAL_I2C_Init+0x25c>)
 8006220:	428b      	cmp	r3, r1
 8006222:	d80d      	bhi.n	8006240 <HAL_I2C_Init+0x124>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1e59      	subs	r1, r3, #1
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006232:	3301      	adds	r3, #1
 8006234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006238:	2b04      	cmp	r3, #4
 800623a:	bf38      	it	cc
 800623c:	2304      	movcc	r3, #4
 800623e:	e04f      	b.n	80062e0 <HAL_I2C_Init+0x1c4>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d111      	bne.n	800626c <HAL_I2C_Init+0x150>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	1e58      	subs	r0, r3, #1
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6859      	ldr	r1, [r3, #4]
 8006250:	460b      	mov	r3, r1
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	440b      	add	r3, r1
 8006256:	fbb0 f3f3 	udiv	r3, r0, r3
 800625a:	3301      	adds	r3, #1
 800625c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	e012      	b.n	8006292 <HAL_I2C_Init+0x176>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	1e58      	subs	r0, r3, #1
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6859      	ldr	r1, [r3, #4]
 8006274:	460b      	mov	r3, r1
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	440b      	add	r3, r1
 800627a:	0099      	lsls	r1, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006282:	3301      	adds	r3, #1
 8006284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006288:	2b00      	cmp	r3, #0
 800628a:	bf0c      	ite	eq
 800628c:	2301      	moveq	r3, #1
 800628e:	2300      	movne	r3, #0
 8006290:	b2db      	uxtb	r3, r3
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_I2C_Init+0x17e>
 8006296:	2301      	movs	r3, #1
 8006298:	e022      	b.n	80062e0 <HAL_I2C_Init+0x1c4>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10e      	bne.n	80062c0 <HAL_I2C_Init+0x1a4>
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	1e58      	subs	r0, r3, #1
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	460b      	mov	r3, r1
 80062ac:	005b      	lsls	r3, r3, #1
 80062ae:	440b      	add	r3, r1
 80062b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80062b4:	3301      	adds	r3, #1
 80062b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062be:	e00f      	b.n	80062e0 <HAL_I2C_Init+0x1c4>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	1e58      	subs	r0, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6859      	ldr	r1, [r3, #4]
 80062c8:	460b      	mov	r3, r1
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	0099      	lsls	r1, r3, #2
 80062d0:	440b      	add	r3, r1
 80062d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80062d6:	3301      	adds	r3, #1
 80062d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	6809      	ldr	r1, [r1, #0]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69da      	ldr	r2, [r3, #28]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	431a      	orrs	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800630e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	6911      	ldr	r1, [r2, #16]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	68d2      	ldr	r2, [r2, #12]
 800631a:	4311      	orrs	r1, r2
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	430b      	orrs	r3, r1
 8006322:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	695a      	ldr	r2, [r3, #20]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2220      	movs	r2, #32
 800635a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2200      	movs	r2, #0
 8006362:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	000186a0 	.word	0x000186a0
 800637c:	001e847f 	.word	0x001e847f
 8006380:	003d08ff 	.word	0x003d08ff
 8006384:	431bde83 	.word	0x431bde83
 8006388:	10624dd3 	.word	0x10624dd3

0800638c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af02      	add	r7, sp, #8
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	4608      	mov	r0, r1
 8006396:	4611      	mov	r1, r2
 8006398:	461a      	mov	r2, r3
 800639a:	4603      	mov	r3, r0
 800639c:	817b      	strh	r3, [r7, #10]
 800639e:	460b      	mov	r3, r1
 80063a0:	813b      	strh	r3, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063a6:	f7ff f81b 	bl	80053e0 <HAL_GetTick>
 80063aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	2b20      	cmp	r3, #32
 80063b6:	f040 80d9 	bne.w	800656c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	2319      	movs	r3, #25
 80063c0:	2201      	movs	r2, #1
 80063c2:	496d      	ldr	r1, [pc, #436]	; (8006578 <HAL_I2C_Mem_Write+0x1ec>)
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fc7f 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80063ca:	4603      	mov	r3, r0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063d0:	2302      	movs	r3, #2
 80063d2:	e0cc      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Mem_Write+0x56>
 80063de:	2302      	movs	r3, #2
 80063e0:	e0c5      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d007      	beq.n	8006408 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006416:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2221      	movs	r2, #33	; 0x21
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2240      	movs	r2, #64	; 0x40
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6a3a      	ldr	r2, [r7, #32]
 8006432:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006438:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800643e:	b29a      	uxth	r2, r3
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4a4d      	ldr	r2, [pc, #308]	; (800657c <HAL_I2C_Mem_Write+0x1f0>)
 8006448:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800644a:	88f8      	ldrh	r0, [r7, #6]
 800644c:	893a      	ldrh	r2, [r7, #8]
 800644e:	8979      	ldrh	r1, [r7, #10]
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	4603      	mov	r3, r0
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 fab6 	bl	80069cc <I2C_RequestMemoryWrite>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d052      	beq.n	800650c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e081      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800646e:	68f8      	ldr	r0, [r7, #12]
 8006470:	f000 fd00 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	2b04      	cmp	r3, #4
 8006480:	d107      	bne.n	8006492 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006490:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e06b      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	781a      	ldrb	r2, [r3, #0]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064bc:	b29b      	uxth	r3, r3
 80064be:	3b01      	subs	r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d11b      	bne.n	800650c <HAL_I2C_Mem_Write+0x180>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d017      	beq.n	800650c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	781a      	ldrb	r2, [r3, #0]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ec:	1c5a      	adds	r2, r3, #1
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064f6:	3b01      	subs	r3, #1
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006502:	b29b      	uxth	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	b29a      	uxth	r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1aa      	bne.n	800646a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006514:	697a      	ldr	r2, [r7, #20]
 8006516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fcec 	bl	8006ef6 <I2C_WaitOnBTFFlagUntilTimeout>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00d      	beq.n	8006540 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006528:	2b04      	cmp	r3, #4
 800652a:	d107      	bne.n	800653c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800653a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e016      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800654e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006568:	2300      	movs	r3, #0
 800656a:	e000      	b.n	800656e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800656c:	2302      	movs	r3, #2
  }
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	00100002 	.word	0x00100002
 800657c:	ffff0000 	.word	0xffff0000

08006580 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b08c      	sub	sp, #48	; 0x30
 8006584:	af02      	add	r7, sp, #8
 8006586:	60f8      	str	r0, [r7, #12]
 8006588:	4608      	mov	r0, r1
 800658a:	4611      	mov	r1, r2
 800658c:	461a      	mov	r2, r3
 800658e:	4603      	mov	r3, r0
 8006590:	817b      	strh	r3, [r7, #10]
 8006592:	460b      	mov	r3, r1
 8006594:	813b      	strh	r3, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800659a:	f7fe ff21 	bl	80053e0 <HAL_GetTick>
 800659e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b20      	cmp	r3, #32
 80065aa:	f040 8208 	bne.w	80069be <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	2319      	movs	r3, #25
 80065b4:	2201      	movs	r2, #1
 80065b6:	497b      	ldr	r1, [pc, #492]	; (80067a4 <HAL_I2C_Mem_Read+0x224>)
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fb85 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
 80065c6:	e1fb      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d101      	bne.n	80065d6 <HAL_I2C_Mem_Read+0x56>
 80065d2:	2302      	movs	r3, #2
 80065d4:	e1f4      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2201      	movs	r2, #1
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d007      	beq.n	80065fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800660a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2222      	movs	r2, #34	; 0x22
 8006610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2240      	movs	r2, #64	; 0x40
 8006618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800662c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	4a5b      	ldr	r2, [pc, #364]	; (80067a8 <HAL_I2C_Mem_Read+0x228>)
 800663c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800663e:	88f8      	ldrh	r0, [r7, #6]
 8006640:	893a      	ldrh	r2, [r7, #8]
 8006642:	8979      	ldrh	r1, [r7, #10]
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	9301      	str	r3, [sp, #4]
 8006648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	4603      	mov	r3, r0
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 fa52 	bl	8006af8 <I2C_RequestMemoryRead>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d001      	beq.n	800665e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e1b0      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d113      	bne.n	800668e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006666:	2300      	movs	r3, #0
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695b      	ldr	r3, [r3, #20]
 8006670:	623b      	str	r3, [r7, #32]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	623b      	str	r3, [r7, #32]
 800667a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800668a:	601a      	str	r2, [r3, #0]
 800668c:	e184      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006692:	2b01      	cmp	r3, #1
 8006694:	d11b      	bne.n	80066ce <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	61fb      	str	r3, [r7, #28]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	61fb      	str	r3, [r7, #28]
 80066ba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	e164      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d11b      	bne.n	800670e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f6:	2300      	movs	r3, #0
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	61bb      	str	r3, [r7, #24]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	699b      	ldr	r3, [r3, #24]
 8006708:	61bb      	str	r3, [r7, #24]
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	e144      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006724:	e138      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800672a:	2b03      	cmp	r3, #3
 800672c:	f200 80f1 	bhi.w	8006912 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006734:	2b01      	cmp	r3, #1
 8006736:	d123      	bne.n	8006780 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800673a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fc1b 	bl	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006742:	4603      	mov	r3, r0
 8006744:	2b00      	cmp	r3, #0
 8006746:	d001      	beq.n	800674c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e139      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	b2d2      	uxtb	r2, r2
 8006758:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	1c5a      	adds	r2, r3, #1
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006768:	3b01      	subs	r3, #1
 800676a:	b29a      	uxth	r2, r3
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	b29a      	uxth	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800677e:	e10b      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	2b02      	cmp	r3, #2
 8006786:	d14e      	bne.n	8006826 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	2200      	movs	r2, #0
 8006790:	4906      	ldr	r1, [pc, #24]	; (80067ac <HAL_I2C_Mem_Read+0x22c>)
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 fa98 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d008      	beq.n	80067b0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e10e      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
 80067a2:	bf00      	nop
 80067a4:	00100002 	.word	0x00100002
 80067a8:	ffff0000 	.word	0xffff0000
 80067ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ca:	b2d2      	uxtb	r2, r2
 80067cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067dc:	3b01      	subs	r3, #1
 80067de:	b29a      	uxth	r2, r3
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	b2d2      	uxtb	r2, r2
 80067fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006804:	1c5a      	adds	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680e:	3b01      	subs	r3, #1
 8006810:	b29a      	uxth	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800681a:	b29b      	uxth	r3, r3
 800681c:	3b01      	subs	r3, #1
 800681e:	b29a      	uxth	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006824:	e0b8      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800682c:	2200      	movs	r2, #0
 800682e:	4966      	ldr	r1, [pc, #408]	; (80069c8 <HAL_I2C_Mem_Read+0x448>)
 8006830:	68f8      	ldr	r0, [r7, #12]
 8006832:	f000 fa49 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d001      	beq.n	8006840 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e0bf      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800684e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	691a      	ldr	r2, [r3, #16]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	3b01      	subs	r3, #1
 800686e:	b29a      	uxth	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006878:	b29b      	uxth	r3, r3
 800687a:	3b01      	subs	r3, #1
 800687c:	b29a      	uxth	r2, r3
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006888:	2200      	movs	r2, #0
 800688a:	494f      	ldr	r1, [pc, #316]	; (80069c8 <HAL_I2C_Mem_Read+0x448>)
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f000 fa1b 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d001      	beq.n	800689c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e091      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	691a      	ldr	r2, [r3, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c8:	3b01      	subs	r3, #1
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	691a      	ldr	r2, [r3, #16]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e8:	b2d2      	uxtb	r2, r2
 80068ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068fa:	3b01      	subs	r3, #1
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006906:	b29b      	uxth	r3, r3
 8006908:	3b01      	subs	r3, #1
 800690a:	b29a      	uxth	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006910:	e042      	b.n	8006998 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006914:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f000 fb2e 	bl	8006f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d001      	beq.n	8006926 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e04c      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006942:	3b01      	subs	r3, #1
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	3b01      	subs	r3, #1
 8006952:	b29a      	uxth	r2, r3
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	f003 0304 	and.w	r3, r3, #4
 8006962:	2b04      	cmp	r3, #4
 8006964:	d118      	bne.n	8006998 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	691a      	ldr	r2, [r3, #16]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006978:	1c5a      	adds	r2, r3, #1
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698e:	b29b      	uxth	r3, r3
 8006990:	3b01      	subs	r3, #1
 8006992:	b29a      	uxth	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	f47f aec2 	bne.w	8006726 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2220      	movs	r2, #32
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80069ba:	2300      	movs	r3, #0
 80069bc:	e000      	b.n	80069c0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80069be:	2302      	movs	r3, #2
  }
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3728      	adds	r7, #40	; 0x28
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}
 80069c8:	00010004 	.word	0x00010004

080069cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b088      	sub	sp, #32
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	461a      	mov	r2, r3
 80069da:	4603      	mov	r3, r0
 80069dc:	817b      	strh	r3, [r7, #10]
 80069de:	460b      	mov	r3, r1
 80069e0:	813b      	strh	r3, [r7, #8]
 80069e2:	4613      	mov	r3, r2
 80069e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	6a3b      	ldr	r3, [r7, #32]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f000 f960 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a1c:	d103      	bne.n	8006a26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e05f      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006a2a:	897b      	ldrh	r3, [r7, #10]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006a38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	6a3a      	ldr	r2, [r7, #32]
 8006a3e:	492d      	ldr	r1, [pc, #180]	; (8006af4 <I2C_RequestMemoryWrite+0x128>)
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f998 	bl	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d001      	beq.n	8006a50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e04c      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a50:	2300      	movs	r3, #0
 8006a52:	617b      	str	r3, [r7, #20]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695b      	ldr	r3, [r3, #20]
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a68:	6a39      	ldr	r1, [r7, #32]
 8006a6a:	68f8      	ldr	r0, [r7, #12]
 8006a6c:	f000 fa02 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00d      	beq.n	8006a92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d107      	bne.n	8006a8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e02b      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a92:	88fb      	ldrh	r3, [r7, #6]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d105      	bne.n	8006aa4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006a98:	893b      	ldrh	r3, [r7, #8]
 8006a9a:	b2da      	uxtb	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	611a      	str	r2, [r3, #16]
 8006aa2:	e021      	b.n	8006ae8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006aa4:	893b      	ldrh	r3, [r7, #8]
 8006aa6:	0a1b      	lsrs	r3, r3, #8
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab4:	6a39      	ldr	r1, [r7, #32]
 8006ab6:	68f8      	ldr	r0, [r7, #12]
 8006ab8:	f000 f9dc 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d00d      	beq.n	8006ade <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	d107      	bne.n	8006ada <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e005      	b.n	8006aea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006ade:	893b      	ldrh	r3, [r7, #8]
 8006ae0:	b2da      	uxtb	r2, r3
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	00010002 	.word	0x00010002

08006af8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b088      	sub	sp, #32
 8006afc:	af02      	add	r7, sp, #8
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	4608      	mov	r0, r1
 8006b02:	4611      	mov	r1, r2
 8006b04:	461a      	mov	r2, r3
 8006b06:	4603      	mov	r3, r0
 8006b08:	817b      	strh	r3, [r7, #10]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	813b      	strh	r3, [r7, #8]
 8006b0e:	4613      	mov	r3, r2
 8006b10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006b20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	9300      	str	r3, [sp, #0]
 8006b36:	6a3b      	ldr	r3, [r7, #32]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f8c2 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00d      	beq.n	8006b66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b58:	d103      	bne.n	8006b62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b60:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e0aa      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006b66:	897b      	ldrh	r3, [r7, #10]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006b74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	6a3a      	ldr	r2, [r7, #32]
 8006b7a:	4952      	ldr	r1, [pc, #328]	; (8006cc4 <I2C_RequestMemoryRead+0x1cc>)
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	f000 f8fa 	bl	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d001      	beq.n	8006b8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e097      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	617b      	str	r3, [r7, #20]
 8006ba0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	6a39      	ldr	r1, [r7, #32]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 f964 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00d      	beq.n	8006bce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb6:	2b04      	cmp	r3, #4
 8006bb8:	d107      	bne.n	8006bca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e076      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006bce:	88fb      	ldrh	r3, [r7, #6]
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d105      	bne.n	8006be0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006bd4:	893b      	ldrh	r3, [r7, #8]
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	611a      	str	r2, [r3, #16]
 8006bde:	e021      	b.n	8006c24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006be0:	893b      	ldrh	r3, [r7, #8]
 8006be2:	0a1b      	lsrs	r3, r3, #8
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	b2da      	uxtb	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf0:	6a39      	ldr	r1, [r7, #32]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f93e 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00d      	beq.n	8006c1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	2b04      	cmp	r3, #4
 8006c04:	d107      	bne.n	8006c16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e050      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	b2da      	uxtb	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c26:	6a39      	ldr	r1, [r7, #32]
 8006c28:	68f8      	ldr	r0, [r7, #12]
 8006c2a:	f000 f923 	bl	8006e74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d00d      	beq.n	8006c50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c38:	2b04      	cmp	r3, #4
 8006c3a:	d107      	bne.n	8006c4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e035      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f82b 	bl	8006cc8 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00d      	beq.n	8006c94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c86:	d103      	bne.n	8006c90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e013      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006c94:	897b      	ldrh	r3, [r7, #10]
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	6a3a      	ldr	r2, [r7, #32]
 8006ca8:	4906      	ldr	r1, [pc, #24]	; (8006cc4 <I2C_RequestMemoryRead+0x1cc>)
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f000 f863 	bl	8006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e000      	b.n	8006cbc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3718      	adds	r7, #24
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}
 8006cc4:	00010002 	.word	0x00010002

08006cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	60f8      	str	r0, [r7, #12]
 8006cd0:	60b9      	str	r1, [r7, #8]
 8006cd2:	603b      	str	r3, [r7, #0]
 8006cd4:	4613      	mov	r3, r2
 8006cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cd8:	e025      	b.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ce0:	d021      	beq.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ce2:	f7fe fb7d 	bl	80053e0 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d302      	bcc.n	8006cf8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d116      	bne.n	8006d26 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d12:	f043 0220 	orr.w	r2, r3, #32
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e023      	b.n	8006d6e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	0c1b      	lsrs	r3, r3, #16
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d10d      	bne.n	8006d4c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	695b      	ldr	r3, [r3, #20]
 8006d36:	43da      	mvns	r2, r3
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	b29b      	uxth	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	bf0c      	ite	eq
 8006d42:	2301      	moveq	r3, #1
 8006d44:	2300      	movne	r3, #0
 8006d46:	b2db      	uxtb	r3, r3
 8006d48:	461a      	mov	r2, r3
 8006d4a:	e00c      	b.n	8006d66 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	43da      	mvns	r2, r3
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	4013      	ands	r3, r2
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	bf0c      	ite	eq
 8006d5e:	2301      	moveq	r3, #1
 8006d60:	2300      	movne	r3, #0
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	79fb      	ldrb	r3, [r7, #7]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d0b6      	beq.n	8006cda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b084      	sub	sp, #16
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	60f8      	str	r0, [r7, #12]
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006d84:	e051      	b.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d94:	d123      	bne.n	8006dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006da4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006dae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2200      	movs	r2, #0
 8006db4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2220      	movs	r2, #32
 8006dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dca:	f043 0204 	orr.w	r2, r3, #4
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e046      	b.n	8006e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d021      	beq.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de6:	f7fe fafb 	bl	80053e0 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d302      	bcc.n	8006dfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d116      	bne.n	8006e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e16:	f043 0220 	orr.w	r2, r3, #32
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e020      	b.n	8006e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	0c1b      	lsrs	r3, r3, #16
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10c      	bne.n	8006e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	43da      	mvns	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	bf14      	ite	ne
 8006e46:	2301      	movne	r3, #1
 8006e48:	2300      	moveq	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	e00b      	b.n	8006e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	43da      	mvns	r2, r3
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	bf14      	ite	ne
 8006e60:	2301      	movne	r3, #1
 8006e62:	2300      	moveq	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d18d      	bne.n	8006d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3710      	adds	r7, #16
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e80:	e02d      	b.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f000 f8ce 	bl	8007024 <I2C_IsAcknowledgeFailed>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e02d      	b.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e98:	d021      	beq.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e9a:	f7fe faa1 	bl	80053e0 <HAL_GetTick>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	1ad3      	subs	r3, r2, r3
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d302      	bcc.n	8006eb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d116      	bne.n	8006ede <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	f043 0220 	orr.w	r2, r3, #32
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e007      	b.n	8006eee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d1ca      	bne.n	8006e82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ef6:	b580      	push	{r7, lr}
 8006ef8:	b084      	sub	sp, #16
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	60f8      	str	r0, [r7, #12]
 8006efe:	60b9      	str	r1, [r7, #8]
 8006f00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f02:	e02d      	b.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006f04:	68f8      	ldr	r0, [r7, #12]
 8006f06:	f000 f88d 	bl	8007024 <I2C_IsAcknowledgeFailed>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d001      	beq.n	8006f14 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e02d      	b.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1a:	d021      	beq.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1c:	f7fe fa60 	bl	80053e0 <HAL_GetTick>
 8006f20:	4602      	mov	r2, r0
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d302      	bcc.n	8006f32 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d116      	bne.n	8006f60 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f4c:	f043 0220 	orr.w	r2, r3, #32
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e007      	b.n	8006f70 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0304 	and.w	r3, r3, #4
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d1ca      	bne.n	8006f04 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006f6e:	2300      	movs	r3, #0
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f84:	e042      	b.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	695b      	ldr	r3, [r3, #20]
 8006f8c:	f003 0310 	and.w	r3, r3, #16
 8006f90:	2b10      	cmp	r3, #16
 8006f92:	d119      	bne.n	8006fc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f06f 0210 	mvn.w	r2, #16
 8006f9c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e029      	b.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fc8:	f7fe fa0a 	bl	80053e0 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d302      	bcc.n	8006fde <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d116      	bne.n	800700c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff8:	f043 0220 	orr.w	r2, r3, #32
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007008:	2301      	movs	r3, #1
 800700a:	e007      	b.n	800701c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007016:	2b40      	cmp	r3, #64	; 0x40
 8007018:	d1b5      	bne.n	8006f86 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800703a:	d11b      	bne.n	8007074 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007044:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2220      	movs	r2, #32
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007060:	f043 0204 	orr.w	r2, r3, #4
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007082:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007084:	b08f      	sub	sp, #60	; 0x3c
 8007086:	af0a      	add	r7, sp, #40	; 0x28
 8007088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d101      	bne.n	8007094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e116      	b.n	80072c2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f00a f886 	bl	80111c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2203      	movs	r2, #3
 80070b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f003 ffe1 	bl	800b09a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	603b      	str	r3, [r7, #0]
 80070de:	687e      	ldr	r6, [r7, #4]
 80070e0:	466d      	mov	r5, sp
 80070e2:	f106 0410 	add.w	r4, r6, #16
 80070e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80070ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80070ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80070f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80070f6:	1d33      	adds	r3, r6, #4
 80070f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80070fa:	6838      	ldr	r0, [r7, #0]
 80070fc:	f003 feb8 	bl	800ae70 <USB_CoreInit>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d005      	beq.n	8007112 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2202      	movs	r2, #2
 800710a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e0d7      	b.n	80072c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2100      	movs	r1, #0
 8007118:	4618      	mov	r0, r3
 800711a:	f003 ffcf 	bl	800b0bc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
 8007122:	e04a      	b.n	80071ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007124:	7bfa      	ldrb	r2, [r7, #15]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	00db      	lsls	r3, r3, #3
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	333d      	adds	r3, #61	; 0x3d
 8007134:	2201      	movs	r2, #1
 8007136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007138:	7bfa      	ldrb	r2, [r7, #15]
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	333c      	adds	r3, #60	; 0x3c
 8007148:	7bfa      	ldrb	r2, [r7, #15]
 800714a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800714c:	7bfa      	ldrb	r2, [r7, #15]
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	b298      	uxth	r0, r3
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4613      	mov	r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	1a9b      	subs	r3, r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	440b      	add	r3, r1
 800715e:	3342      	adds	r3, #66	; 0x42
 8007160:	4602      	mov	r2, r0
 8007162:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007164:	7bfa      	ldrb	r2, [r7, #15]
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	4613      	mov	r3, r2
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	1a9b      	subs	r3, r3, r2
 800716e:	009b      	lsls	r3, r3, #2
 8007170:	440b      	add	r3, r1
 8007172:	333f      	adds	r3, #63	; 0x3f
 8007174:	2200      	movs	r2, #0
 8007176:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007178:	7bfa      	ldrb	r2, [r7, #15]
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	4613      	mov	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	1a9b      	subs	r3, r3, r2
 8007182:	009b      	lsls	r3, r3, #2
 8007184:	440b      	add	r3, r1
 8007186:	3344      	adds	r3, #68	; 0x44
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800718c:	7bfa      	ldrb	r2, [r7, #15]
 800718e:	6879      	ldr	r1, [r7, #4]
 8007190:	4613      	mov	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	1a9b      	subs	r3, r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	3348      	adds	r3, #72	; 0x48
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80071a0:	7bfa      	ldrb	r2, [r7, #15]
 80071a2:	6879      	ldr	r1, [r7, #4]
 80071a4:	4613      	mov	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	1a9b      	subs	r3, r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	440b      	add	r3, r1
 80071ae:	3350      	adds	r3, #80	; 0x50
 80071b0:	2200      	movs	r2, #0
 80071b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	3301      	adds	r3, #1
 80071b8:	73fb      	strb	r3, [r7, #15]
 80071ba:	7bfa      	ldrb	r2, [r7, #15]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d3af      	bcc.n	8007124 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e044      	b.n	8007254 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80071ca:	7bfa      	ldrb	r2, [r7, #15]
 80071cc:	6879      	ldr	r1, [r7, #4]
 80071ce:	4613      	mov	r3, r2
 80071d0:	00db      	lsls	r3, r3, #3
 80071d2:	1a9b      	subs	r3, r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	440b      	add	r3, r1
 80071d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80071dc:	2200      	movs	r2, #0
 80071de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80071e0:	7bfa      	ldrb	r2, [r7, #15]
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	4613      	mov	r3, r2
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	1a9b      	subs	r3, r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	440b      	add	r3, r1
 80071ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80071f2:	7bfa      	ldrb	r2, [r7, #15]
 80071f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80071f6:	7bfa      	ldrb	r2, [r7, #15]
 80071f8:	6879      	ldr	r1, [r7, #4]
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	1a9b      	subs	r3, r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	440b      	add	r3, r1
 8007204:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007208:	2200      	movs	r2, #0
 800720a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800720c:	7bfa      	ldrb	r2, [r7, #15]
 800720e:	6879      	ldr	r1, [r7, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	00db      	lsls	r3, r3, #3
 8007214:	1a9b      	subs	r3, r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	440b      	add	r3, r1
 800721a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800721e:	2200      	movs	r2, #0
 8007220:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007222:	7bfa      	ldrb	r2, [r7, #15]
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	00db      	lsls	r3, r3, #3
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007238:	7bfa      	ldrb	r2, [r7, #15]
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	4613      	mov	r3, r2
 800723e:	00db      	lsls	r3, r3, #3
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	009b      	lsls	r3, r3, #2
 8007244:	440b      	add	r3, r1
 8007246:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800724e:	7bfb      	ldrb	r3, [r7, #15]
 8007250:	3301      	adds	r3, #1
 8007252:	73fb      	strb	r3, [r7, #15]
 8007254:	7bfa      	ldrb	r2, [r7, #15]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	429a      	cmp	r2, r3
 800725c:	d3b5      	bcc.n	80071ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	603b      	str	r3, [r7, #0]
 8007264:	687e      	ldr	r6, [r7, #4]
 8007266:	466d      	mov	r5, sp
 8007268:	f106 0410 	add.w	r4, r6, #16
 800726c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800726e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007270:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007272:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007274:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007278:	e885 0003 	stmia.w	r5, {r0, r1}
 800727c:	1d33      	adds	r3, r6, #4
 800727e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007280:	6838      	ldr	r0, [r7, #0]
 8007282:	f003 ff45 	bl	800b110 <USB_DevInit>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e014      	b.n	80072c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d102      	bne.n	80072b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f891 	bl	80083d8 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4618      	mov	r0, r3
 80072bc:	f004 ff80 	bl	800c1c0 <USB_DevDisconnect>

  return HAL_OK;
 80072c0:	2300      	movs	r3, #0
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072ca <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b084      	sub	sp, #16
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_PCD_Start+0x1c>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e020      	b.n	8007328 <HAL_PCD_Start+0x5e>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d109      	bne.n	800730a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d005      	beq.n	800730a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007302:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4618      	mov	r0, r3
 8007310:	f003 feb2 	bl	800b078 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f004 ff30 	bl	800c17e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007326:	2300      	movs	r3, #0
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007330:	b590      	push	{r4, r7, lr}
 8007332:	b08d      	sub	sp, #52	; 0x34
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f004 ffee 	bl	800c328 <USB_GetMode>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	f040 83ca 	bne.w	8007ae8 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4618      	mov	r0, r3
 800735a:	f004 ff52 	bl	800c202 <USB_ReadInterrupts>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 83c0 	beq.w	8007ae6 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4618      	mov	r0, r3
 800736c:	f004 ff49 	bl	800c202 <USB_ReadInterrupts>
 8007370:	4603      	mov	r3, r0
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	2b02      	cmp	r3, #2
 8007378:	d107      	bne.n	800738a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	695a      	ldr	r2, [r3, #20]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f002 0202 	and.w	r2, r2, #2
 8007388:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f004 ff37 	bl	800c202 <USB_ReadInterrupts>
 8007394:	4603      	mov	r3, r0
 8007396:	f003 0310 	and.w	r3, r3, #16
 800739a:	2b10      	cmp	r3, #16
 800739c:	d161      	bne.n	8007462 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	699a      	ldr	r2, [r3, #24]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f022 0210 	bic.w	r2, r2, #16
 80073ac:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	f003 020f 	and.w	r2, r3, #15
 80073ba:	4613      	mov	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	1a9b      	subs	r3, r3, r2
 80073c0:	009b      	lsls	r3, r3, #2
 80073c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	4413      	add	r3, r2
 80073ca:	3304      	adds	r3, #4
 80073cc:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80073ce:	69bb      	ldr	r3, [r7, #24]
 80073d0:	0c5b      	lsrs	r3, r3, #17
 80073d2:	f003 030f 	and.w	r3, r3, #15
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d124      	bne.n	8007424 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d035      	beq.n	8007452 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	091b      	lsrs	r3, r3, #4
 80073ee:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80073f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	461a      	mov	r2, r3
 80073f8:	6a38      	ldr	r0, [r7, #32]
 80073fa:	f004 fd9d 	bl	800bf38 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	68da      	ldr	r2, [r3, #12]
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	091b      	lsrs	r3, r3, #4
 8007406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800740a:	441a      	add	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	699a      	ldr	r2, [r3, #24]
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	091b      	lsrs	r3, r3, #4
 8007418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800741c:	441a      	add	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	619a      	str	r2, [r3, #24]
 8007422:	e016      	b.n	8007452 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	0c5b      	lsrs	r3, r3, #17
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	2b06      	cmp	r3, #6
 800742e:	d110      	bne.n	8007452 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007436:	2208      	movs	r2, #8
 8007438:	4619      	mov	r1, r3
 800743a:	6a38      	ldr	r0, [r7, #32]
 800743c:	f004 fd7c 	bl	800bf38 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	699a      	ldr	r2, [r3, #24]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	091b      	lsrs	r3, r3, #4
 8007448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744c:	441a      	add	r2, r3
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	699a      	ldr	r2, [r3, #24]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	f042 0210 	orr.w	r2, r2, #16
 8007460:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4618      	mov	r0, r3
 8007468:	f004 fecb 	bl	800c202 <USB_ReadInterrupts>
 800746c:	4603      	mov	r3, r0
 800746e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007472:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007476:	d16e      	bne.n	8007556 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f004 fed1 	bl	800c228 <USB_ReadDevAllOutEpInterrupt>
 8007486:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007488:	e062      	b.n	8007550 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d057      	beq.n	8007544 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800749a:	b2d2      	uxtb	r2, r2
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f004 fef6 	bl	800c290 <USB_ReadDevOutEPInterrupt>
 80074a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00c      	beq.n	80074ca <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074bc:	461a      	mov	r2, r3
 80074be:	2301      	movs	r3, #1
 80074c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80074c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 fddd 	bl	8008084 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	f003 0308 	and.w	r3, r3, #8
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80074d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	461a      	mov	r2, r3
 80074e2:	2308      	movs	r3, #8
 80074e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80074e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fed7 	bl	800829c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f003 0310 	and.w	r3, r3, #16
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d008      	beq.n	800750a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007504:	461a      	mov	r2, r3
 8007506:	2310      	movs	r3, #16
 8007508:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d008      	beq.n	8007526 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007520:	461a      	mov	r2, r3
 8007522:	2320      	movs	r3, #32
 8007524:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	015a      	lsls	r2, r3, #5
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	4413      	add	r3, r2
 8007538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800753c:	461a      	mov	r2, r3
 800753e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007542:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	3301      	adds	r3, #1
 8007548:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	085b      	lsrs	r3, r3, #1
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	d199      	bne.n	800748a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4618      	mov	r0, r3
 800755c:	f004 fe51 	bl	800c202 <USB_ReadInterrupts>
 8007560:	4603      	mov	r3, r0
 8007562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007566:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800756a:	f040 80c0 	bne.w	80076ee <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4618      	mov	r0, r3
 8007574:	f004 fe72 	bl	800c25c <USB_ReadDevAllInEpInterrupt>
 8007578:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800757e:	e0b2      	b.n	80076e6 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	f000 80a7 	beq.w	80076da <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007592:	b2d2      	uxtb	r2, r2
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f004 fe98 	bl	800c2cc <USB_ReadDevInEPInterrupt>
 800759c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	f003 0301 	and.w	r3, r3, #1
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d057      	beq.n	8007658 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	2201      	movs	r2, #1
 80075b0:	fa02 f303 	lsl.w	r3, r2, r3
 80075b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	43db      	mvns	r3, r3
 80075c2:	69f9      	ldr	r1, [r7, #28]
 80075c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075c8:	4013      	ands	r3, r2
 80075ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80075cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d8:	461a      	mov	r2, r3
 80075da:	2301      	movs	r3, #1
 80075dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d132      	bne.n	800764c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ea:	4613      	mov	r3, r2
 80075ec:	00db      	lsls	r3, r3, #3
 80075ee:	1a9b      	subs	r3, r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3348      	adds	r3, #72	; 0x48
 80075f6:	6819      	ldr	r1, [r3, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075fc:	4613      	mov	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	1a9b      	subs	r3, r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	4403      	add	r3, r0
 8007606:	3344      	adds	r3, #68	; 0x44
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4419      	add	r1, r3
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007610:	4613      	mov	r3, r2
 8007612:	00db      	lsls	r3, r3, #3
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4403      	add	r3, r0
 800761a:	3348      	adds	r3, #72	; 0x48
 800761c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	2b00      	cmp	r3, #0
 8007622:	d113      	bne.n	800764c <HAL_PCD_IRQHandler+0x31c>
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007628:	4613      	mov	r3, r2
 800762a:	00db      	lsls	r3, r3, #3
 800762c:	1a9b      	subs	r3, r3, r2
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	440b      	add	r3, r1
 8007632:	3350      	adds	r3, #80	; 0x50
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d108      	bne.n	800764c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6818      	ldr	r0, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007644:	461a      	mov	r2, r3
 8007646:	2101      	movs	r1, #1
 8007648:	f004 fea0 	bl	800c38c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800764c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764e:	b2db      	uxtb	r3, r3
 8007650:	4619      	mov	r1, r3
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f009 fe35 	bl	80112c2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d008      	beq.n	8007674 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007664:	015a      	lsls	r2, r3, #5
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	4413      	add	r3, r2
 800766a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766e:	461a      	mov	r2, r3
 8007670:	2308      	movs	r3, #8
 8007672:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f003 0310 	and.w	r3, r3, #16
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	015a      	lsls	r2, r3, #5
 8007682:	69fb      	ldr	r3, [r7, #28]
 8007684:	4413      	add	r3, r2
 8007686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800768a:	461a      	mov	r2, r3
 800768c:	2310      	movs	r3, #16
 800768e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800769a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a6:	461a      	mov	r2, r3
 80076a8:	2340      	movs	r3, #64	; 0x40
 80076aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f003 0302 	and.w	r3, r3, #2
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80076b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69fb      	ldr	r3, [r7, #28]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c2:	461a      	mov	r2, r3
 80076c4:	2302      	movs	r3, #2
 80076c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80076d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 fc48 	bl	8007f6a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	3301      	adds	r3, #1
 80076de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80076e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e2:	085b      	lsrs	r3, r3, #1
 80076e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80076e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f47f af49 	bne.w	8007580 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4618      	mov	r0, r3
 80076f4:	f004 fd85 	bl	800c202 <USB_ReadInterrupts>
 80076f8:	4603      	mov	r3, r0
 80076fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007702:	d122      	bne.n	800774a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	69fa      	ldr	r2, [r7, #28]
 800770e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800771e:	2b01      	cmp	r3, #1
 8007720:	d108      	bne.n	8007734 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800772a:	2100      	movs	r1, #0
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f00a f817 	bl	8011760 <HAL_PCDEx_LPM_Callback>
 8007732:	e002      	b.n	800773a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f009 fe3b 	bl	80113b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695a      	ldr	r2, [r3, #20]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007748:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4618      	mov	r0, r3
 8007750:	f004 fd57 	bl	800c202 <USB_ReadInterrupts>
 8007754:	4603      	mov	r3, r0
 8007756:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800775a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800775e:	d112      	bne.n	8007786 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b01      	cmp	r3, #1
 800776e:	d102      	bne.n	8007776 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f009 fdf7 	bl	8011364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	695a      	ldr	r2, [r3, #20]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8007784:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f004 fd39 	bl	800c202 <USB_ReadInterrupts>
 8007790:	4603      	mov	r3, r0
 8007792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800779a:	d121      	bne.n	80077e0 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695a      	ldr	r2, [r3, #20]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80077aa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d111      	bne.n	80077da <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077c4:	089b      	lsrs	r3, r3, #2
 80077c6:	f003 020f 	and.w	r2, r3, #15
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80077d0:	2101      	movs	r1, #1
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f009 ffc4 	bl	8011760 <HAL_PCDEx_LPM_Callback>
 80077d8:	e002      	b.n	80077e0 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f009 fdc2 	bl	8011364 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f004 fd0c 	bl	800c202 <USB_ReadInterrupts>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077f4:	f040 80c7 	bne.w	8007986 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	69fa      	ldr	r2, [r7, #28]
 8007802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007806:	f023 0301 	bic.w	r3, r3, #1
 800780a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2110      	movs	r1, #16
 8007812:	4618      	mov	r0, r3
 8007814:	f003 fdda 	bl	800b3cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007818:	2300      	movs	r3, #0
 800781a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800781c:	e056      	b.n	80078cc <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800781e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800782a:	461a      	mov	r2, r3
 800782c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007830:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007850:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007862:	0151      	lsls	r1, r2, #5
 8007864:	69fa      	ldr	r2, [r7, #28]
 8007866:	440a      	add	r2, r1
 8007868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800786c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007870:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787e:	461a      	mov	r2, r3
 8007880:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007884:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	69fa      	ldr	r2, [r7, #28]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80078a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a8:	015a      	lsls	r2, r3, #5
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	4413      	add	r3, r2
 80078ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078b6:	0151      	lsls	r1, r2, #5
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	440a      	add	r2, r1
 80078bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078c0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078c4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078c8:	3301      	adds	r3, #1
 80078ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d3a3      	bcc.n	800781e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078dc:	69db      	ldr	r3, [r3, #28]
 80078de:	69fa      	ldr	r2, [r7, #28]
 80078e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80078e4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80078e8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d016      	beq.n	8007920 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078fc:	69fa      	ldr	r2, [r7, #28]
 80078fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007902:	f043 030b 	orr.w	r3, r3, #11
 8007906:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007918:	f043 030b 	orr.w	r3, r3, #11
 800791c:	6453      	str	r3, [r2, #68]	; 0x44
 800791e:	e015      	b.n	800794c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800792e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007932:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007936:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	69fa      	ldr	r2, [r7, #28]
 8007942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007946:	f043 030b 	orr.w	r3, r3, #11
 800794a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800795a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800795e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6818      	ldr	r0, [r3, #0]
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007970:	461a      	mov	r2, r3
 8007972:	f004 fd0b 	bl	800c38c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695a      	ldr	r2, [r3, #20]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f004 fc39 	bl	800c202 <USB_ReadInterrupts>
 8007990:	4603      	mov	r3, r0
 8007992:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007996:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800799a:	d124      	bne.n	80079e6 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f004 fccf 	bl	800c344 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4618      	mov	r0, r3
 80079ac:	f003 fd6f 	bl	800b48e <USB_GetDevSpeed>
 80079b0:	4603      	mov	r3, r0
 80079b2:	461a      	mov	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681c      	ldr	r4, [r3, #0]
 80079bc:	f000 fe66 	bl	800868c <HAL_RCC_GetHCLKFreq>
 80079c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	461a      	mov	r2, r3
 80079ca:	4620      	mov	r0, r4
 80079cc:	f003 fab2 	bl	800af34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80079d0:	6878      	ldr	r0, [r7, #4]
 80079d2:	f009 fc9e 	bl	8011312 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	695a      	ldr	r2, [r3, #20]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80079e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f004 fc09 	bl	800c202 <USB_ReadInterrupts>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d10a      	bne.n	8007a10 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f009 fc7b 	bl	80112f6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	695a      	ldr	r2, [r3, #20]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f002 0208 	and.w	r2, r2, #8
 8007a0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4618      	mov	r0, r3
 8007a16:	f004 fbf4 	bl	800c202 <USB_ReadInterrupts>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a24:	d10f      	bne.n	8007a46 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a26:	2300      	movs	r3, #0
 8007a28:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f009 fcdd 	bl	80113f0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695a      	ldr	r2, [r3, #20]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007a44:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f004 fbd9 	bl	800c202 <USB_ReadInterrupts>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a5a:	d10f      	bne.n	8007a7c <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	4619      	mov	r1, r3
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f009 fcb0 	bl	80113cc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	695a      	ldr	r2, [r3, #20]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007a7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f004 fbbe 	bl	800c202 <USB_ReadInterrupts>
 8007a86:	4603      	mov	r3, r0
 8007a88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a90:	d10a      	bne.n	8007aa8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f009 fcbe 	bl	8011414 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	695a      	ldr	r2, [r3, #20]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007aa6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4618      	mov	r0, r3
 8007aae:	f004 fba8 	bl	800c202 <USB_ReadInterrupts>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d115      	bne.n	8007ae8 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f003 0304 	and.w	r3, r3, #4
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d002      	beq.n	8007ad4 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f009 fcae 	bl	8011430 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	6859      	ldr	r1, [r3, #4]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	430a      	orrs	r2, r1
 8007ae2:	605a      	str	r2, [r3, #4]
 8007ae4:	e000      	b.n	8007ae8 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8007ae6:	bf00      	nop
    }
  }
}
 8007ae8:	3734      	adds	r7, #52	; 0x34
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd90      	pop	{r4, r7, pc}

08007aee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007aee:	b580      	push	{r7, lr}
 8007af0:	b082      	sub	sp, #8
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
 8007af6:	460b      	mov	r3, r1
 8007af8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d101      	bne.n	8007b08 <HAL_PCD_SetAddress+0x1a>
 8007b04:	2302      	movs	r3, #2
 8007b06:	e013      	b.n	8007b30 <HAL_PCD_SetAddress+0x42>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	78fa      	ldrb	r2, [r7, #3]
 8007b14:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	4611      	mov	r1, r2
 8007b20:	4618      	mov	r0, r3
 8007b22:	f004 fb06 	bl	800c132 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3708      	adds	r7, #8
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	4608      	mov	r0, r1
 8007b42:	4611      	mov	r1, r2
 8007b44:	461a      	mov	r2, r3
 8007b46:	4603      	mov	r3, r0
 8007b48:	70fb      	strb	r3, [r7, #3]
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	803b      	strh	r3, [r7, #0]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007b52:	2300      	movs	r3, #0
 8007b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007b56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	da0f      	bge.n	8007b7e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b5e:	78fb      	ldrb	r3, [r7, #3]
 8007b60:	f003 020f 	and.w	r2, r3, #15
 8007b64:	4613      	mov	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	1a9b      	subs	r3, r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	3338      	adds	r3, #56	; 0x38
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	705a      	strb	r2, [r3, #1]
 8007b7c:	e00f      	b.n	8007b9e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	f003 020f 	and.w	r2, r3, #15
 8007b84:	4613      	mov	r3, r2
 8007b86:	00db      	lsls	r3, r3, #3
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	009b      	lsls	r3, r3, #2
 8007b8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	4413      	add	r3, r2
 8007b94:	3304      	adds	r3, #4
 8007b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007b9e:	78fb      	ldrb	r3, [r7, #3]
 8007ba0:	f003 030f 	and.w	r3, r3, #15
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007baa:	883a      	ldrh	r2, [r7, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	78ba      	ldrb	r2, [r7, #2]
 8007bb4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	785b      	ldrb	r3, [r3, #1]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d004      	beq.n	8007bc8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007bc8:	78bb      	ldrb	r3, [r7, #2]
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d102      	bne.n	8007bd4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d101      	bne.n	8007be2 <HAL_PCD_EP_Open+0xaa>
 8007bde:	2302      	movs	r3, #2
 8007be0:	e00e      	b.n	8007c00 <HAL_PCD_EP_Open+0xc8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2201      	movs	r2, #1
 8007be6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68f9      	ldr	r1, [r7, #12]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f003 fc71 	bl	800b4d8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3710      	adds	r7, #16
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007c14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da0f      	bge.n	8007c3c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	f003 020f 	and.w	r2, r3, #15
 8007c22:	4613      	mov	r3, r2
 8007c24:	00db      	lsls	r3, r3, #3
 8007c26:	1a9b      	subs	r3, r3, r2
 8007c28:	009b      	lsls	r3, r3, #2
 8007c2a:	3338      	adds	r3, #56	; 0x38
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	4413      	add	r3, r2
 8007c30:	3304      	adds	r3, #4
 8007c32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	705a      	strb	r2, [r3, #1]
 8007c3a:	e00f      	b.n	8007c5c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007c3c:	78fb      	ldrb	r3, [r7, #3]
 8007c3e:	f003 020f 	and.w	r2, r3, #15
 8007c42:	4613      	mov	r3, r2
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	1a9b      	subs	r3, r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	4413      	add	r3, r2
 8007c52:	3304      	adds	r3, #4
 8007c54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	f003 030f 	and.w	r3, r3, #15
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d101      	bne.n	8007c76 <HAL_PCD_EP_Close+0x6e>
 8007c72:	2302      	movs	r3, #2
 8007c74:	e00e      	b.n	8007c94 <HAL_PCD_EP_Close+0x8c>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	68f9      	ldr	r1, [r7, #12]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f003 fcaf 	bl	800b5e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b086      	sub	sp, #24
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	60f8      	str	r0, [r7, #12]
 8007ca4:	607a      	str	r2, [r7, #4]
 8007ca6:	603b      	str	r3, [r7, #0]
 8007ca8:	460b      	mov	r3, r1
 8007caa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	f003 020f 	and.w	r2, r3, #15
 8007cb2:	4613      	mov	r3, r2
 8007cb4:	00db      	lsls	r3, r3, #3
 8007cb6:	1a9b      	subs	r3, r3, r2
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cbe:	68fa      	ldr	r2, [r7, #12]
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	683a      	ldr	r2, [r7, #0]
 8007cd0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	f003 030f 	and.w	r3, r3, #15
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d102      	bne.n	8007cf8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	b2db      	uxtb	r3, r3
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	6979      	ldr	r1, [r7, #20]
 8007d10:	f003 ff8a 	bl	800bc28 <USB_EP0StartXfer>
 8007d14:	e008      	b.n	8007d28 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	461a      	mov	r2, r3
 8007d22:	6979      	ldr	r1, [r7, #20]
 8007d24:	f003 fd3c 	bl	800b7a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3718      	adds	r7, #24
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007d32:	b480      	push	{r7}
 8007d34:	b083      	sub	sp, #12
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007d3e:	78fb      	ldrb	r3, [r7, #3]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	6879      	ldr	r1, [r7, #4]
 8007d46:	4613      	mov	r3, r2
 8007d48:	00db      	lsls	r3, r3, #3
 8007d4a:	1a9b      	subs	r3, r3, r2
 8007d4c:	009b      	lsls	r3, r3, #2
 8007d4e:	440b      	add	r3, r1
 8007d50:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007d54:	681b      	ldr	r3, [r3, #0]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007d62:	b580      	push	{r7, lr}
 8007d64:	b086      	sub	sp, #24
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	60f8      	str	r0, [r7, #12]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	603b      	str	r3, [r7, #0]
 8007d6e:	460b      	mov	r3, r1
 8007d70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007d72:	7afb      	ldrb	r3, [r7, #11]
 8007d74:	f003 020f 	and.w	r2, r3, #15
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	1a9b      	subs	r3, r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	3338      	adds	r3, #56	; 0x38
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	4413      	add	r3, r2
 8007d86:	3304      	adds	r3, #4
 8007d88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	687a      	ldr	r2, [r7, #4]
 8007d8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007da2:	7afb      	ldrb	r3, [r7, #11]
 8007da4:	f003 030f 	and.w	r3, r3, #15
 8007da8:	b2da      	uxtb	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007dbc:	7afb      	ldrb	r3, [r7, #11]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d109      	bne.n	8007dda <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	b2db      	uxtb	r3, r3
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	6979      	ldr	r1, [r7, #20]
 8007dd4:	f003 ff28 	bl	800bc28 <USB_EP0StartXfer>
 8007dd8:	e008      	b.n	8007dec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	461a      	mov	r2, r3
 8007de6:	6979      	ldr	r1, [r7, #20]
 8007de8:	f003 fcda 	bl	800b7a0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3718      	adds	r7, #24
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
 8007dfe:	460b      	mov	r3, r1
 8007e00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007e02:	78fb      	ldrb	r3, [r7, #3]
 8007e04:	f003 020f 	and.w	r2, r3, #15
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d901      	bls.n	8007e14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007e10:	2301      	movs	r3, #1
 8007e12:	e050      	b.n	8007eb6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	da0f      	bge.n	8007e3c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007e1c:	78fb      	ldrb	r3, [r7, #3]
 8007e1e:	f003 020f 	and.w	r2, r3, #15
 8007e22:	4613      	mov	r3, r2
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	1a9b      	subs	r3, r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	3338      	adds	r3, #56	; 0x38
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	4413      	add	r3, r2
 8007e30:	3304      	adds	r3, #4
 8007e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2201      	movs	r2, #1
 8007e38:	705a      	strb	r2, [r3, #1]
 8007e3a:	e00d      	b.n	8007e58 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007e3c:	78fa      	ldrb	r2, [r7, #3]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	1a9b      	subs	r3, r3, r2
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	3304      	adds	r3, #4
 8007e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	2200      	movs	r2, #0
 8007e56:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	f003 030f 	and.w	r3, r3, #15
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d101      	bne.n	8007e78 <HAL_PCD_EP_SetStall+0x82>
 8007e74:	2302      	movs	r3, #2
 8007e76:	e01e      	b.n	8007eb6 <HAL_PCD_EP_SetStall+0xc0>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68f9      	ldr	r1, [r7, #12]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f004 f87f 	bl	800bf8a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	f003 030f 	and.w	r3, r3, #15
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d10a      	bne.n	8007eac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6818      	ldr	r0, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	b2d9      	uxtb	r1, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	f004 fa70 	bl	800c38c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	f003 020f 	and.w	r2, r3, #15
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d901      	bls.n	8007edc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e042      	b.n	8007f62 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007edc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	da0f      	bge.n	8007f04 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	f003 020f 	and.w	r2, r3, #15
 8007eea:	4613      	mov	r3, r2
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	1a9b      	subs	r3, r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	3338      	adds	r3, #56	; 0x38
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	3304      	adds	r3, #4
 8007efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2201      	movs	r2, #1
 8007f00:	705a      	strb	r2, [r3, #1]
 8007f02:	e00f      	b.n	8007f24 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007f04:	78fb      	ldrb	r3, [r7, #3]
 8007f06:	f003 020f 	and.w	r2, r3, #15
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	00db      	lsls	r3, r3, #3
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	4413      	add	r3, r2
 8007f1a:	3304      	adds	r3, #4
 8007f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	f003 030f 	and.w	r3, r3, #15
 8007f30:	b2da      	uxtb	r2, r3
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	d101      	bne.n	8007f44 <HAL_PCD_EP_ClrStall+0x86>
 8007f40:	2302      	movs	r3, #2
 8007f42:	e00e      	b.n	8007f62 <HAL_PCD_EP_ClrStall+0xa4>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68f9      	ldr	r1, [r7, #12]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f004 f887 	bl	800c066 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b08a      	sub	sp, #40	; 0x28
 8007f6e:	af02      	add	r7, sp, #8
 8007f70:	6078      	str	r0, [r7, #4]
 8007f72:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	4613      	mov	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	3338      	adds	r3, #56	; 0x38
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3304      	adds	r3, #4
 8007f90:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	699a      	ldr	r2, [r3, #24]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d901      	bls.n	8007fa2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e06c      	b.n	800807c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	695a      	ldr	r2, [r3, #20]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	1ad3      	subs	r3, r2, r3
 8007fac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	689b      	ldr	r3, [r3, #8]
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d902      	bls.n	8007fbe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007fbe:	69fb      	ldr	r3, [r7, #28]
 8007fc0:	3303      	adds	r3, #3
 8007fc2:	089b      	lsrs	r3, r3, #2
 8007fc4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007fc6:	e02b      	b.n	8008020 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	699b      	ldr	r3, [r3, #24]
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d902      	bls.n	8007fe4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	3303      	adds	r3, #3
 8007fe8:	089b      	lsrs	r3, r3, #2
 8007fea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68d9      	ldr	r1, [r3, #12]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	b2da      	uxtb	r2, r3
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	4603      	mov	r3, r0
 8008002:	6978      	ldr	r0, [r7, #20]
 8008004:	f003 ff63 	bl	800bece <USB_WritePacket>

    ep->xfer_buff  += len;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	68da      	ldr	r2, [r3, #12]
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	441a      	add	r2, r3
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	69fb      	ldr	r3, [r7, #28]
 800801a:	441a      	add	r2, r3
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	015a      	lsls	r2, r3, #5
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	4413      	add	r3, r2
 8008028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	b29b      	uxth	r3, r3
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	429a      	cmp	r2, r3
 8008034:	d809      	bhi.n	800804a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	699a      	ldr	r2, [r3, #24]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800803e:	429a      	cmp	r2, r3
 8008040:	d203      	bcs.n	800804a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d1be      	bne.n	8007fc8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	429a      	cmp	r2, r3
 8008054:	d811      	bhi.n	800807a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	f003 030f 	and.w	r3, r3, #15
 800805c:	2201      	movs	r2, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800806a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	43db      	mvns	r3, r3
 8008070:	6939      	ldr	r1, [r7, #16]
 8008072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008076:	4013      	ands	r3, r2
 8008078:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3720      	adds	r7, #32
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	333c      	adds	r3, #60	; 0x3c
 800809c:	3304      	adds	r3, #4
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	f040 80a0 	bne.w	80081fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	f003 0308 	and.w	r3, r3, #8
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d015      	beq.n	80080f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4a72      	ldr	r2, [pc, #456]	; (8008294 <PCD_EP_OutXfrComplete_int+0x210>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	f240 80dd 	bls.w	800828a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f000 80d7 	beq.w	800828a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	015a      	lsls	r2, r3, #5
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	4413      	add	r3, r2
 80080e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080e8:	461a      	mov	r2, r3
 80080ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80080ee:	6093      	str	r3, [r2, #8]
 80080f0:	e0cb      	b.n	800828a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	f003 0320 	and.w	r3, r3, #32
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d009      	beq.n	8008110 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	015a      	lsls	r2, r3, #5
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	4413      	add	r3, r2
 8008104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008108:	461a      	mov	r2, r3
 800810a:	2320      	movs	r3, #32
 800810c:	6093      	str	r3, [r2, #8]
 800810e:	e0bc      	b.n	800828a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008116:	2b00      	cmp	r3, #0
 8008118:	f040 80b7 	bne.w	800828a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a5d      	ldr	r2, [pc, #372]	; (8008294 <PCD_EP_OutXfrComplete_int+0x210>)
 8008120:	4293      	cmp	r3, r2
 8008122:	d90f      	bls.n	8008144 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	4413      	add	r3, r2
 8008136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800813a:	461a      	mov	r2, r3
 800813c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008140:	6093      	str	r3, [r2, #8]
 8008142:	e0a2      	b.n	800828a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008144:	6879      	ldr	r1, [r7, #4]
 8008146:	683a      	ldr	r2, [r7, #0]
 8008148:	4613      	mov	r3, r2
 800814a:	00db      	lsls	r3, r3, #3
 800814c:	1a9b      	subs	r3, r3, r2
 800814e:	009b      	lsls	r3, r3, #2
 8008150:	440b      	add	r3, r1
 8008152:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008156:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	0159      	lsls	r1, r3, #5
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	440b      	add	r3, r1
 8008160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800816a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	683a      	ldr	r2, [r7, #0]
 8008170:	4613      	mov	r3, r2
 8008172:	00db      	lsls	r3, r3, #3
 8008174:	1a9b      	subs	r3, r3, r2
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4403      	add	r3, r0
 800817a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800817e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008180:	6879      	ldr	r1, [r7, #4]
 8008182:	683a      	ldr	r2, [r7, #0]
 8008184:	4613      	mov	r3, r2
 8008186:	00db      	lsls	r3, r3, #3
 8008188:	1a9b      	subs	r3, r3, r2
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	440b      	add	r3, r1
 800818e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	00db      	lsls	r3, r3, #3
 800819c:	1a9b      	subs	r3, r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4403      	add	r3, r0
 80081a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4419      	add	r1, r3
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	4613      	mov	r3, r2
 80081b0:	00db      	lsls	r3, r3, #3
 80081b2:	1a9b      	subs	r3, r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4403      	add	r3, r0
 80081b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80081bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d114      	bne.n	80081ee <PCD_EP_OutXfrComplete_int+0x16a>
 80081c4:	6879      	ldr	r1, [r7, #4]
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4613      	mov	r3, r2
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	1a9b      	subs	r3, r3, r2
 80081ce:	009b      	lsls	r3, r3, #2
 80081d0:	440b      	add	r3, r1
 80081d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d108      	bne.n	80081ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80081e6:	461a      	mov	r2, r3
 80081e8:	2101      	movs	r1, #1
 80081ea:	f004 f8cf 	bl	800c38c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f009 f849 	bl	801128c <HAL_PCD_DataOutStageCallback>
 80081fa:	e046      	b.n	800828a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	4a26      	ldr	r2, [pc, #152]	; (8008298 <PCD_EP_OutXfrComplete_int+0x214>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d124      	bne.n	800824e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800820a:	2b00      	cmp	r3, #0
 800820c:	d00a      	beq.n	8008224 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	015a      	lsls	r2, r3, #5
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	4413      	add	r3, r2
 8008216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800821a:	461a      	mov	r2, r3
 800821c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008220:	6093      	str	r3, [r2, #8]
 8008222:	e032      	b.n	800828a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	2b00      	cmp	r3, #0
 800822c:	d008      	beq.n	8008240 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	015a      	lsls	r2, r3, #5
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	4413      	add	r3, r2
 8008236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800823a:	461a      	mov	r2, r3
 800823c:	2320      	movs	r3, #32
 800823e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	b2db      	uxtb	r3, r3
 8008244:	4619      	mov	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f009 f820 	bl	801128c <HAL_PCD_DataOutStageCallback>
 800824c:	e01d      	b.n	800828a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d114      	bne.n	800827e <PCD_EP_OutXfrComplete_int+0x1fa>
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	4613      	mov	r3, r2
 800825a:	00db      	lsls	r3, r3, #3
 800825c:	1a9b      	subs	r3, r3, r2
 800825e:	009b      	lsls	r3, r3, #2
 8008260:	440b      	add	r3, r1
 8008262:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d108      	bne.n	800827e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6818      	ldr	r0, [r3, #0]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008276:	461a      	mov	r2, r3
 8008278:	2100      	movs	r1, #0
 800827a:	f004 f887 	bl	800c38c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f009 f801 	bl	801128c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	4f54300a 	.word	0x4f54300a
 8008298:	4f54310a 	.word	0x4f54310a

0800829c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	333c      	adds	r3, #60	; 0x3c
 80082b4:	3304      	adds	r3, #4
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	015a      	lsls	r2, r3, #5
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	4413      	add	r3, r2
 80082c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4a15      	ldr	r2, [pc, #84]	; (8008324 <PCD_EP_OutSetupPacket_int+0x88>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d90e      	bls.n	80082f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d009      	beq.n	80082f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e8:	461a      	mov	r2, r3
 80082ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f008 ffb9 	bl	8011268 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	4a0a      	ldr	r2, [pc, #40]	; (8008324 <PCD_EP_OutSetupPacket_int+0x88>)
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d90c      	bls.n	8008318 <PCD_EP_OutSetupPacket_int+0x7c>
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	691b      	ldr	r3, [r3, #16]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d108      	bne.n	8008318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6818      	ldr	r0, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008310:	461a      	mov	r2, r3
 8008312:	2101      	movs	r1, #1
 8008314:	f004 f83a 	bl	800c38c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3718      	adds	r7, #24
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	4f54300a 	.word	0x4f54300a

08008328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008328:	b480      	push	{r7}
 800832a:	b085      	sub	sp, #20
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
 8008334:	4613      	mov	r3, r2
 8008336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800833e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d107      	bne.n	8008356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008346:	883b      	ldrh	r3, [r7, #0]
 8008348:	0419      	lsls	r1, r3, #16
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	430a      	orrs	r2, r1
 8008352:	629a      	str	r2, [r3, #40]	; 0x28
 8008354:	e028      	b.n	80083a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	68ba      	ldr	r2, [r7, #8]
 8008360:	4413      	add	r3, r2
 8008362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
 8008368:	e00d      	b.n	8008386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	7bfb      	ldrb	r3, [r7, #15]
 8008370:	3340      	adds	r3, #64	; 0x40
 8008372:	009b      	lsls	r3, r3, #2
 8008374:	4413      	add	r3, r2
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	0c1b      	lsrs	r3, r3, #16
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	3301      	adds	r3, #1
 8008384:	73fb      	strb	r3, [r7, #15]
 8008386:	7bfa      	ldrb	r2, [r7, #15]
 8008388:	78fb      	ldrb	r3, [r7, #3]
 800838a:	3b01      	subs	r3, #1
 800838c:	429a      	cmp	r2, r3
 800838e:	d3ec      	bcc.n	800836a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008390:	883b      	ldrh	r3, [r7, #0]
 8008392:	0418      	lsls	r0, r3, #16
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6819      	ldr	r1, [r3, #0]
 8008398:	78fb      	ldrb	r3, [r7, #3]
 800839a:	3b01      	subs	r3, #1
 800839c:	68ba      	ldr	r2, [r7, #8]
 800839e:	4302      	orrs	r2, r0
 80083a0:	3340      	adds	r3, #64	; 0x40
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	440b      	add	r3, r1
 80083a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80083a8:	2300      	movs	r3, #0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr

080083b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b083      	sub	sp, #12
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
 80083be:	460b      	mov	r3, r1
 80083c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	887a      	ldrh	r2, [r7, #2]
 80083c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800840a:	f043 0303 	orr.w	r3, r3, #3
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008412:	2300      	movs	r3, #0
}
 8008414:	4618      	mov	r0, r3
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800842a:	2300      	movs	r3, #0
 800842c:	603b      	str	r3, [r7, #0]
 800842e:	4b20      	ldr	r3, [pc, #128]	; (80084b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	4a1f      	ldr	r2, [pc, #124]	; (80084b0 <HAL_PWREx_EnableOverDrive+0x90>)
 8008434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008438:	6413      	str	r3, [r2, #64]	; 0x40
 800843a:	4b1d      	ldr	r3, [pc, #116]	; (80084b0 <HAL_PWREx_EnableOverDrive+0x90>)
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008442:	603b      	str	r3, [r7, #0]
 8008444:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008446:	4b1b      	ldr	r3, [pc, #108]	; (80084b4 <HAL_PWREx_EnableOverDrive+0x94>)
 8008448:	2201      	movs	r2, #1
 800844a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800844c:	f7fc ffc8 	bl	80053e0 <HAL_GetTick>
 8008450:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008452:	e009      	b.n	8008468 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008454:	f7fc ffc4 	bl	80053e0 <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008462:	d901      	bls.n	8008468 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e01f      	b.n	80084a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008468:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008474:	d1ee      	bne.n	8008454 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008476:	4b11      	ldr	r3, [pc, #68]	; (80084bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800847c:	f7fc ffb0 	bl	80053e0 <HAL_GetTick>
 8008480:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008482:	e009      	b.n	8008498 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008484:	f7fc ffac 	bl	80053e0 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008492:	d901      	bls.n	8008498 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008494:	2303      	movs	r3, #3
 8008496:	e007      	b.n	80084a8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008498:	4b07      	ldr	r3, [pc, #28]	; (80084b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800849a:	685b      	ldr	r3, [r3, #4]
 800849c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084a4:	d1ee      	bne.n	8008484 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80084a6:	2300      	movs	r3, #0
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3708      	adds	r7, #8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	40023800 	.word	0x40023800
 80084b4:	420e0040 	.word	0x420e0040
 80084b8:	40007000 	.word	0x40007000
 80084bc:	420e0044 	.word	0x420e0044

080084c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d101      	bne.n	80084d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	e0cc      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80084d4:	4b68      	ldr	r3, [pc, #416]	; (8008678 <HAL_RCC_ClockConfig+0x1b8>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f003 030f 	and.w	r3, r3, #15
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d90c      	bls.n	80084fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084e2:	4b65      	ldr	r3, [pc, #404]	; (8008678 <HAL_RCC_ClockConfig+0x1b8>)
 80084e4:	683a      	ldr	r2, [r7, #0]
 80084e6:	b2d2      	uxtb	r2, r2
 80084e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ea:	4b63      	ldr	r3, [pc, #396]	; (8008678 <HAL_RCC_ClockConfig+0x1b8>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f003 030f 	and.w	r3, r3, #15
 80084f2:	683a      	ldr	r2, [r7, #0]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d001      	beq.n	80084fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	e0b8      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d020      	beq.n	800854a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	d005      	beq.n	8008520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008514:	4b59      	ldr	r3, [pc, #356]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	4a58      	ldr	r2, [pc, #352]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 800851a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800851e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0308 	and.w	r3, r3, #8
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800852c:	4b53      	ldr	r3, [pc, #332]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	4a52      	ldr	r2, [pc, #328]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008532:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008538:	4b50      	ldr	r3, [pc, #320]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	689b      	ldr	r3, [r3, #8]
 8008544:	494d      	ldr	r1, [pc, #308]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	4313      	orrs	r3, r2
 8008548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d044      	beq.n	80085e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	2b01      	cmp	r3, #1
 800855c:	d107      	bne.n	800856e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800855e:	4b47      	ldr	r3, [pc, #284]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d119      	bne.n	800859e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e07f      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	2b02      	cmp	r3, #2
 8008574:	d003      	beq.n	800857e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800857a:	2b03      	cmp	r3, #3
 800857c:	d107      	bne.n	800858e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800857e:	4b3f      	ldr	r3, [pc, #252]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e06f      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800858e:	4b3b      	ldr	r3, [pc, #236]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0302 	and.w	r3, r3, #2
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e067      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800859e:	4b37      	ldr	r3, [pc, #220]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	f023 0203 	bic.w	r2, r3, #3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	4934      	ldr	r1, [pc, #208]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085b0:	f7fc ff16 	bl	80053e0 <HAL_GetTick>
 80085b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085b6:	e00a      	b.n	80085ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085b8:	f7fc ff12 	bl	80053e0 <HAL_GetTick>
 80085bc:	4602      	mov	r2, r0
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d901      	bls.n	80085ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085ca:	2303      	movs	r3, #3
 80085cc:	e04f      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ce:	4b2b      	ldr	r3, [pc, #172]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f003 020c 	and.w	r2, r3, #12
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	429a      	cmp	r2, r3
 80085de:	d1eb      	bne.n	80085b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80085e0:	4b25      	ldr	r3, [pc, #148]	; (8008678 <HAL_RCC_ClockConfig+0x1b8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	683a      	ldr	r2, [r7, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d20c      	bcs.n	8008608 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ee:	4b22      	ldr	r3, [pc, #136]	; (8008678 <HAL_RCC_ClockConfig+0x1b8>)
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085f6:	4b20      	ldr	r3, [pc, #128]	; (8008678 <HAL_RCC_ClockConfig+0x1b8>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	683a      	ldr	r2, [r7, #0]
 8008600:	429a      	cmp	r2, r3
 8008602:	d001      	beq.n	8008608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008604:	2301      	movs	r3, #1
 8008606:	e032      	b.n	800866e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d008      	beq.n	8008626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008614:	4b19      	ldr	r3, [pc, #100]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	4916      	ldr	r1, [pc, #88]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008622:	4313      	orrs	r3, r2
 8008624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0308 	and.w	r3, r3, #8
 800862e:	2b00      	cmp	r3, #0
 8008630:	d009      	beq.n	8008646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008632:	4b12      	ldr	r3, [pc, #72]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	691b      	ldr	r3, [r3, #16]
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	490e      	ldr	r1, [pc, #56]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 8008642:	4313      	orrs	r3, r2
 8008644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008646:	f000 fbb1 	bl	8008dac <HAL_RCC_GetSysClockFreq>
 800864a:	4601      	mov	r1, r0
 800864c:	4b0b      	ldr	r3, [pc, #44]	; (800867c <HAL_RCC_ClockConfig+0x1bc>)
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	091b      	lsrs	r3, r3, #4
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	4a0a      	ldr	r2, [pc, #40]	; (8008680 <HAL_RCC_ClockConfig+0x1c0>)
 8008658:	5cd3      	ldrb	r3, [r2, r3]
 800865a:	fa21 f303 	lsr.w	r3, r1, r3
 800865e:	4a09      	ldr	r2, [pc, #36]	; (8008684 <HAL_RCC_ClockConfig+0x1c4>)
 8008660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008662:	4b09      	ldr	r3, [pc, #36]	; (8008688 <HAL_RCC_ClockConfig+0x1c8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4618      	mov	r0, r3
 8008668:	f7fc fcfa 	bl	8005060 <HAL_InitTick>

  return HAL_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	3710      	adds	r7, #16
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	40023c00 	.word	0x40023c00
 800867c:	40023800 	.word	0x40023800
 8008680:	080175e0 	.word	0x080175e0
 8008684:	2000027c 	.word	0x2000027c
 8008688:	20000280 	.word	0x20000280

0800868c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008690:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008692:	681b      	ldr	r3, [r3, #0]
}
 8008694:	4618      	mov	r0, r3
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	2000027c 	.word	0x2000027c

080086a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80086a8:	f7ff fff0 	bl	800868c <HAL_RCC_GetHCLKFreq>
 80086ac:	4601      	mov	r1, r0
 80086ae:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	0a9b      	lsrs	r3, r3, #10
 80086b4:	f003 0307 	and.w	r3, r3, #7
 80086b8:	4a03      	ldr	r2, [pc, #12]	; (80086c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086ba:	5cd3      	ldrb	r3, [r2, r3]
 80086bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	40023800 	.word	0x40023800
 80086c8:	080175f0 	.word	0x080175f0

080086cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80086d0:	f7ff ffdc 	bl	800868c <HAL_RCC_GetHCLKFreq>
 80086d4:	4601      	mov	r1, r0
 80086d6:	4b05      	ldr	r3, [pc, #20]	; (80086ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	0b5b      	lsrs	r3, r3, #13
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	4a03      	ldr	r2, [pc, #12]	; (80086f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086e2:	5cd3      	ldrb	r3, [r2, r3]
 80086e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	40023800 	.word	0x40023800
 80086f0:	080175f0 	.word	0x080175f0

080086f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b083      	sub	sp, #12
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	220f      	movs	r2, #15
 8008702:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008704:	4b12      	ldr	r3, [pc, #72]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f003 0203 	and.w	r2, r3, #3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008710:	4b0f      	ldr	r3, [pc, #60]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800871c:	4b0c      	ldr	r3, [pc, #48]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008728:	4b09      	ldr	r3, [pc, #36]	; (8008750 <HAL_RCC_GetClockConfig+0x5c>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	08db      	lsrs	r3, r3, #3
 800872e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008736:	4b07      	ldr	r3, [pc, #28]	; (8008754 <HAL_RCC_GetClockConfig+0x60>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 020f 	and.w	r2, r3, #15
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	601a      	str	r2, [r3, #0]
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	40023800 	.word	0x40023800
 8008754:	40023c00 	.word	0x40023c00

08008758 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b08c      	sub	sp, #48	; 0x30
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008760:	2300      	movs	r3, #0
 8008762:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8008774:	2300      	movs	r3, #0
 8008776:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8008780:	2300      	movs	r3, #0
 8008782:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 0301 	and.w	r3, r3, #1
 800878c:	2b00      	cmp	r3, #0
 800878e:	d010      	beq.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8008790:	4b6f      	ldr	r3, [pc, #444]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008796:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	496c      	ldr	r1, [pc, #432]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80087a0:	4313      	orrs	r3, r2
 80087a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d101      	bne.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80087ae:	2301      	movs	r3, #1
 80087b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f003 0302 	and.w	r3, r3, #2
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d010      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80087be:	4b64      	ldr	r3, [pc, #400]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80087c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087c4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087cc:	4960      	ldr	r1, [pc, #384]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80087dc:	2301      	movs	r3, #1
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f003 0304 	and.w	r3, r3, #4
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d017      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087ec:	4b58      	ldr	r3, [pc, #352]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80087ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	4955      	ldr	r1, [pc, #340]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800880a:	d101      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800880c:	2301      	movs	r3, #1
 800880e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008814:	2b00      	cmp	r3, #0
 8008816:	d101      	bne.n	800881c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8008818:	2301      	movs	r3, #1
 800881a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d017      	beq.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008828:	4b49      	ldr	r3, [pc, #292]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800882a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800882e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008836:	4946      	ldr	r1, [pc, #280]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008838:	4313      	orrs	r3, r2
 800883a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008846:	d101      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8008848:	2301      	movs	r3, #1
 800884a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8008854:	2301      	movs	r3, #1
 8008856:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0320 	and.w	r3, r3, #32
 8008860:	2b00      	cmp	r3, #0
 8008862:	f000 808a 	beq.w	800897a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	4b39      	ldr	r3, [pc, #228]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800886c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886e:	4a38      	ldr	r2, [pc, #224]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008874:	6413      	str	r3, [r2, #64]	; 0x40
 8008876:	4b36      	ldr	r3, [pc, #216]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800887e:	60bb      	str	r3, [r7, #8]
 8008880:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008882:	4b34      	ldr	r3, [pc, #208]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a33      	ldr	r2, [pc, #204]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8008888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800888c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800888e:	f7fc fda7 	bl	80053e0 <HAL_GetTick>
 8008892:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8008894:	e008      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008896:	f7fc fda3 	bl	80053e0 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e278      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088a8:	4b2a      	ldr	r3, [pc, #168]	; (8008954 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0f0      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80088b4:	4b26      	ldr	r3, [pc, #152]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80088b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088bc:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80088be:	6a3b      	ldr	r3, [r7, #32]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d02f      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088cc:	6a3a      	ldr	r2, [r7, #32]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d028      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80088d2:	4b1f      	ldr	r3, [pc, #124]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80088d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088da:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80088dc:	4b1e      	ldr	r3, [pc, #120]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80088de:	2201      	movs	r2, #1
 80088e0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80088e2:	4b1d      	ldr	r3, [pc, #116]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80088e8:	4a19      	ldr	r2, [pc, #100]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80088ee:	4b18      	ldr	r3, [pc, #96]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d114      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80088fa:	f7fc fd71 	bl	80053e0 <HAL_GetTick>
 80088fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008900:	e00a      	b.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008902:	f7fc fd6d 	bl	80053e0 <HAL_GetTick>
 8008906:	4602      	mov	r2, r0
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	1ad3      	subs	r3, r2, r3
 800890c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008910:	4293      	cmp	r3, r2
 8008912:	d901      	bls.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e240      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008918:	4b0d      	ldr	r3, [pc, #52]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800891a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0ee      	beq.n	8008902 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800892c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008930:	d114      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8008932:	4b07      	ldr	r3, [pc, #28]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800893e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008942:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008946:	4902      	ldr	r1, [pc, #8]	; (8008950 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8008948:	4313      	orrs	r3, r2
 800894a:	608b      	str	r3, [r1, #8]
 800894c:	e00c      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800894e:	bf00      	nop
 8008950:	40023800 	.word	0x40023800
 8008954:	40007000 	.word	0x40007000
 8008958:	42470e40 	.word	0x42470e40
 800895c:	4b4a      	ldr	r3, [pc, #296]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	4a49      	ldr	r2, [pc, #292]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008962:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008966:	6093      	str	r3, [r2, #8]
 8008968:	4b47      	ldr	r3, [pc, #284]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800896a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008974:	4944      	ldr	r1, [pc, #272]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008976:	4313      	orrs	r3, r2
 8008978:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0310 	and.w	r3, r3, #16
 8008982:	2b00      	cmp	r3, #0
 8008984:	d004      	beq.n	8008990 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800898c:	4b3f      	ldr	r3, [pc, #252]	; (8008a8c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800898e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00a      	beq.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800899c:	4b3a      	ldr	r3, [pc, #232]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800899e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089aa:	4937      	ldr	r1, [pc, #220]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00a      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80089be:	4b32      	ldr	r3, [pc, #200]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089c4:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089cc:	492e      	ldr	r1, [pc, #184]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d011      	beq.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80089e0:	4b29      	ldr	r3, [pc, #164]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089e6:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089ee:	4926      	ldr	r1, [pc, #152]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089fe:	d101      	bne.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8008a00:	2301      	movs	r3, #1
 8008a02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8008a10:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a16:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a1e:	491a      	ldr	r1, [pc, #104]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d011      	beq.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8008a32:	4b15      	ldr	r3, [pc, #84]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008a38:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a40:	4911      	ldr	r1, [pc, #68]	; (8008a88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a50:	d101      	bne.n	8008a56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8008a52:	2301      	movs	r3, #1
 8008a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d005      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a64:	f040 80ff 	bne.w	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008a68:	4b09      	ldr	r3, [pc, #36]	; (8008a90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008a6e:	f7fc fcb7 	bl	80053e0 <HAL_GetTick>
 8008a72:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a74:	e00e      	b.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008a76:	f7fc fcb3 	bl	80053e0 <HAL_GetTick>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	1ad3      	subs	r3, r2, r3
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	d907      	bls.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a84:	2303      	movs	r3, #3
 8008a86:	e188      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008a88:	40023800 	.word	0x40023800
 8008a8c:	424711e0 	.word	0x424711e0
 8008a90:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008a94:	4b7e      	ldr	r3, [pc, #504]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d1ea      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f003 0301 	and.w	r3, r3, #1
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d003      	beq.n	8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d009      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d028      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d124      	bne.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008ac8:	4b71      	ldr	r3, [pc, #452]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ace:	0c1b      	lsrs	r3, r3, #16
 8008ad0:	f003 0303 	and.w	r3, r3, #3
 8008ad4:	3301      	adds	r3, #1
 8008ad6:	005b      	lsls	r3, r3, #1
 8008ad8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ada:	4b6d      	ldr	r3, [pc, #436]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ae0:	0e1b      	lsrs	r3, r3, #24
 8008ae2:	f003 030f 	and.w	r3, r3, #15
 8008ae6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	019b      	lsls	r3, r3, #6
 8008af2:	431a      	orrs	r2, r3
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	3b01      	subs	r3, #1
 8008afa:	041b      	lsls	r3, r3, #16
 8008afc:	431a      	orrs	r2, r3
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	061b      	lsls	r3, r3, #24
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	071b      	lsls	r3, r3, #28
 8008b0a:	4961      	ldr	r1, [pc, #388]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f003 0304 	and.w	r3, r3, #4
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d004      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b26:	d00a      	beq.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d035      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b3c:	d130      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008b3e:	4b54      	ldr	r3, [pc, #336]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b44:	0c1b      	lsrs	r3, r3, #16
 8008b46:	f003 0303 	and.w	r3, r3, #3
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	005b      	lsls	r3, r3, #1
 8008b4e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008b50:	4b4f      	ldr	r3, [pc, #316]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b56:	0f1b      	lsrs	r3, r3, #28
 8008b58:	f003 0307 	and.w	r3, r3, #7
 8008b5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	689b      	ldr	r3, [r3, #8]
 8008b66:	019b      	lsls	r3, r3, #6
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	085b      	lsrs	r3, r3, #1
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	041b      	lsls	r3, r3, #16
 8008b72:	431a      	orrs	r2, r3
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	061b      	lsls	r3, r3, #24
 8008b7a:	431a      	orrs	r2, r3
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	071b      	lsls	r3, r3, #28
 8008b80:	4943      	ldr	r1, [pc, #268]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008b88:	4b41      	ldr	r3, [pc, #260]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b8e:	f023 021f 	bic.w	r2, r3, #31
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	3b01      	subs	r3, #1
 8008b98:	493d      	ldr	r1, [pc, #244]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d029      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bb4:	d124      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8008bb6:	4b36      	ldr	r3, [pc, #216]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bbc:	0c1b      	lsrs	r3, r3, #16
 8008bbe:	f003 0303 	and.w	r3, r3, #3
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	005b      	lsls	r3, r3, #1
 8008bc6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008bc8:	4b31      	ldr	r3, [pc, #196]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bce:	0f1b      	lsrs	r3, r3, #28
 8008bd0:	f003 0307 	and.w	r3, r3, #7
 8008bd4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685a      	ldr	r2, [r3, #4]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	019b      	lsls	r3, r3, #6
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	085b      	lsrs	r3, r3, #1
 8008be8:	3b01      	subs	r3, #1
 8008bea:	041b      	lsls	r3, r3, #16
 8008bec:	431a      	orrs	r2, r3
 8008bee:	69bb      	ldr	r3, [r7, #24]
 8008bf0:	061b      	lsls	r3, r3, #24
 8008bf2:	431a      	orrs	r2, r3
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	071b      	lsls	r3, r3, #28
 8008bf8:	4925      	ldr	r1, [pc, #148]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d016      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	019b      	lsls	r3, r3, #6
 8008c16:	431a      	orrs	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	085b      	lsrs	r3, r3, #1
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	041b      	lsls	r3, r3, #16
 8008c22:	431a      	orrs	r2, r3
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	061b      	lsls	r3, r3, #24
 8008c2a:	431a      	orrs	r2, r3
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	071b      	lsls	r3, r3, #28
 8008c32:	4917      	ldr	r1, [pc, #92]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c34:	4313      	orrs	r3, r2
 8008c36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008c3a:	4b16      	ldr	r3, [pc, #88]	; (8008c94 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c40:	f7fc fbce 	bl	80053e0 <HAL_GetTick>
 8008c44:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008c48:	f7fc fbca 	bl	80053e0 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e09f      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008c5a:	4b0d      	ldr	r3, [pc, #52]	; (8008c90 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	f040 8095 	bne.w	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008c6e:	4b0a      	ldr	r3, [pc, #40]	; (8008c98 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008c70:	2200      	movs	r2, #0
 8008c72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008c74:	f7fc fbb4 	bl	80053e0 <HAL_GetTick>
 8008c78:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c7a:	e00f      	b.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008c7c:	f7fc fbb0 	bl	80053e0 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	2b02      	cmp	r3, #2
 8008c88:	d908      	bls.n	8008c9c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008c8a:	2303      	movs	r3, #3
 8008c8c:	e085      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008c8e:	bf00      	nop
 8008c90:	40023800 	.word	0x40023800
 8008c94:	42470068 	.word	0x42470068
 8008c98:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008c9c:	4b41      	ldr	r3, [pc, #260]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ca8:	d0e8      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 0304 	and.w	r3, r3, #4
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d003      	beq.n	8008cbe <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d02b      	beq.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d127      	bne.n	8008d22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008cd2:	4b34      	ldr	r3, [pc, #208]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	f003 0303 	and.w	r3, r3, #3
 8008cde:	3301      	adds	r3, #1
 8008ce0:	005b      	lsls	r3, r3, #1
 8008ce2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	699a      	ldr	r2, [r3, #24]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	019b      	lsls	r3, r3, #6
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	3b01      	subs	r3, #1
 8008cf6:	041b      	lsls	r3, r3, #16
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	061b      	lsls	r3, r3, #24
 8008d00:	4928      	ldr	r1, [pc, #160]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008d08:	4b26      	ldr	r3, [pc, #152]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d16:	3b01      	subs	r3, #1
 8008d18:	021b      	lsls	r3, r3, #8
 8008d1a:	4922      	ldr	r1, [pc, #136]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d01d      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x612>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d36:	d118      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008d38:	4b1a      	ldr	r3, [pc, #104]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d3e:	0e1b      	lsrs	r3, r3, #24
 8008d40:	f003 030f 	and.w	r3, r3, #15
 8008d44:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	699a      	ldr	r2, [r3, #24]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	019b      	lsls	r3, r3, #6
 8008d50:	431a      	orrs	r2, r3
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	085b      	lsrs	r3, r3, #1
 8008d58:	3b01      	subs	r3, #1
 8008d5a:	041b      	lsls	r3, r3, #16
 8008d5c:	431a      	orrs	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	061b      	lsls	r3, r3, #24
 8008d62:	4910      	ldr	r1, [pc, #64]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008d6a:	4b0f      	ldr	r3, [pc, #60]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008d70:	f7fc fb36 	bl	80053e0 <HAL_GetTick>
 8008d74:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d76:	e008      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008d78:	f7fc fb32 	bl	80053e0 <HAL_GetTick>
 8008d7c:	4602      	mov	r2, r0
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	1ad3      	subs	r3, r2, r3
 8008d82:	2b02      	cmp	r3, #2
 8008d84:	d901      	bls.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008d86:	2303      	movs	r3, #3
 8008d88:	e007      	b.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008d8a:	4b06      	ldr	r3, [pc, #24]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d96:	d1ef      	bne.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3730      	adds	r7, #48	; 0x30
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	40023800 	.word	0x40023800
 8008da8:	42470070 	.word	0x42470070

08008dac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8008db6:	2300      	movs	r3, #0
 8008db8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dc6:	4bc6      	ldr	r3, [pc, #792]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 030c 	and.w	r3, r3, #12
 8008dce:	2b0c      	cmp	r3, #12
 8008dd0:	f200 817e 	bhi.w	80090d0 <HAL_RCC_GetSysClockFreq+0x324>
 8008dd4:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <HAL_RCC_GetSysClockFreq+0x30>)
 8008dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dda:	bf00      	nop
 8008ddc:	08008e11 	.word	0x08008e11
 8008de0:	080090d1 	.word	0x080090d1
 8008de4:	080090d1 	.word	0x080090d1
 8008de8:	080090d1 	.word	0x080090d1
 8008dec:	08008e17 	.word	0x08008e17
 8008df0:	080090d1 	.word	0x080090d1
 8008df4:	080090d1 	.word	0x080090d1
 8008df8:	080090d1 	.word	0x080090d1
 8008dfc:	08008e1d 	.word	0x08008e1d
 8008e00:	080090d1 	.word	0x080090d1
 8008e04:	080090d1 	.word	0x080090d1
 8008e08:	080090d1 	.word	0x080090d1
 8008e0c:	08008f79 	.word	0x08008f79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e10:	4bb4      	ldr	r3, [pc, #720]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x338>)
 8008e12:	613b      	str	r3, [r7, #16]
       break;
 8008e14:	e15f      	b.n	80090d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e16:	4bb4      	ldr	r3, [pc, #720]	; (80090e8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8008e18:	613b      	str	r3, [r7, #16]
      break;
 8008e1a:	e15c      	b.n	80090d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e1c:	4bb0      	ldr	r3, [pc, #704]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e24:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e26:	4bae      	ldr	r3, [pc, #696]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d04a      	beq.n	8008ec8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e32:	4bab      	ldr	r3, [pc, #684]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	099b      	lsrs	r3, r3, #6
 8008e38:	f04f 0400 	mov.w	r4, #0
 8008e3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e40:	f04f 0200 	mov.w	r2, #0
 8008e44:	ea03 0501 	and.w	r5, r3, r1
 8008e48:	ea04 0602 	and.w	r6, r4, r2
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	4632      	mov	r2, r6
 8008e50:	f04f 0300 	mov.w	r3, #0
 8008e54:	f04f 0400 	mov.w	r4, #0
 8008e58:	0154      	lsls	r4, r2, #5
 8008e5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008e5e:	014b      	lsls	r3, r1, #5
 8008e60:	4619      	mov	r1, r3
 8008e62:	4622      	mov	r2, r4
 8008e64:	1b49      	subs	r1, r1, r5
 8008e66:	eb62 0206 	sbc.w	r2, r2, r6
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	f04f 0400 	mov.w	r4, #0
 8008e72:	0194      	lsls	r4, r2, #6
 8008e74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008e78:	018b      	lsls	r3, r1, #6
 8008e7a:	1a5b      	subs	r3, r3, r1
 8008e7c:	eb64 0402 	sbc.w	r4, r4, r2
 8008e80:	f04f 0100 	mov.w	r1, #0
 8008e84:	f04f 0200 	mov.w	r2, #0
 8008e88:	00e2      	lsls	r2, r4, #3
 8008e8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e8e:	00d9      	lsls	r1, r3, #3
 8008e90:	460b      	mov	r3, r1
 8008e92:	4614      	mov	r4, r2
 8008e94:	195b      	adds	r3, r3, r5
 8008e96:	eb44 0406 	adc.w	r4, r4, r6
 8008e9a:	f04f 0100 	mov.w	r1, #0
 8008e9e:	f04f 0200 	mov.w	r2, #0
 8008ea2:	0262      	lsls	r2, r4, #9
 8008ea4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008ea8:	0259      	lsls	r1, r3, #9
 8008eaa:	460b      	mov	r3, r1
 8008eac:	4614      	mov	r4, r2
 8008eae:	4618      	mov	r0, r3
 8008eb0:	4621      	mov	r1, r4
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f04f 0400 	mov.w	r4, #0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	4623      	mov	r3, r4
 8008ebc:	f7f7 ff04 	bl	8000cc8 <__aeabi_uldivmod>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	460c      	mov	r4, r1
 8008ec4:	617b      	str	r3, [r7, #20]
 8008ec6:	e049      	b.n	8008f5c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ec8:	4b85      	ldr	r3, [pc, #532]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	099b      	lsrs	r3, r3, #6
 8008ece:	f04f 0400 	mov.w	r4, #0
 8008ed2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008ed6:	f04f 0200 	mov.w	r2, #0
 8008eda:	ea03 0501 	and.w	r5, r3, r1
 8008ede:	ea04 0602 	and.w	r6, r4, r2
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	4632      	mov	r2, r6
 8008ee6:	f04f 0300 	mov.w	r3, #0
 8008eea:	f04f 0400 	mov.w	r4, #0
 8008eee:	0154      	lsls	r4, r2, #5
 8008ef0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008ef4:	014b      	lsls	r3, r1, #5
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	4622      	mov	r2, r4
 8008efa:	1b49      	subs	r1, r1, r5
 8008efc:	eb62 0206 	sbc.w	r2, r2, r6
 8008f00:	f04f 0300 	mov.w	r3, #0
 8008f04:	f04f 0400 	mov.w	r4, #0
 8008f08:	0194      	lsls	r4, r2, #6
 8008f0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008f0e:	018b      	lsls	r3, r1, #6
 8008f10:	1a5b      	subs	r3, r3, r1
 8008f12:	eb64 0402 	sbc.w	r4, r4, r2
 8008f16:	f04f 0100 	mov.w	r1, #0
 8008f1a:	f04f 0200 	mov.w	r2, #0
 8008f1e:	00e2      	lsls	r2, r4, #3
 8008f20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008f24:	00d9      	lsls	r1, r3, #3
 8008f26:	460b      	mov	r3, r1
 8008f28:	4614      	mov	r4, r2
 8008f2a:	195b      	adds	r3, r3, r5
 8008f2c:	eb44 0406 	adc.w	r4, r4, r6
 8008f30:	f04f 0100 	mov.w	r1, #0
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	02a2      	lsls	r2, r4, #10
 8008f3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008f3e:	0299      	lsls	r1, r3, #10
 8008f40:	460b      	mov	r3, r1
 8008f42:	4614      	mov	r4, r2
 8008f44:	4618      	mov	r0, r3
 8008f46:	4621      	mov	r1, r4
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f04f 0400 	mov.w	r4, #0
 8008f4e:	461a      	mov	r2, r3
 8008f50:	4623      	mov	r3, r4
 8008f52:	f7f7 feb9 	bl	8000cc8 <__aeabi_uldivmod>
 8008f56:	4603      	mov	r3, r0
 8008f58:	460c      	mov	r4, r1
 8008f5a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f5c:	4b60      	ldr	r3, [pc, #384]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	f003 0303 	and.w	r3, r3, #3
 8008f66:	3301      	adds	r3, #1
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8008f6c:	697a      	ldr	r2, [r7, #20]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f74:	613b      	str	r3, [r7, #16]
      break;
 8008f76:	e0ae      	b.n	80090d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f78:	4b59      	ldr	r3, [pc, #356]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f82:	4b57      	ldr	r3, [pc, #348]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d04a      	beq.n	8009024 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f8e:	4b54      	ldr	r3, [pc, #336]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008f90:	685b      	ldr	r3, [r3, #4]
 8008f92:	099b      	lsrs	r3, r3, #6
 8008f94:	f04f 0400 	mov.w	r4, #0
 8008f98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008f9c:	f04f 0200 	mov.w	r2, #0
 8008fa0:	ea03 0501 	and.w	r5, r3, r1
 8008fa4:	ea04 0602 	and.w	r6, r4, r2
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4632      	mov	r2, r6
 8008fac:	f04f 0300 	mov.w	r3, #0
 8008fb0:	f04f 0400 	mov.w	r4, #0
 8008fb4:	0154      	lsls	r4, r2, #5
 8008fb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008fba:	014b      	lsls	r3, r1, #5
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	1b49      	subs	r1, r1, r5
 8008fc2:	eb62 0206 	sbc.w	r2, r2, r6
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	f04f 0400 	mov.w	r4, #0
 8008fce:	0194      	lsls	r4, r2, #6
 8008fd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008fd4:	018b      	lsls	r3, r1, #6
 8008fd6:	1a5b      	subs	r3, r3, r1
 8008fd8:	eb64 0402 	sbc.w	r4, r4, r2
 8008fdc:	f04f 0100 	mov.w	r1, #0
 8008fe0:	f04f 0200 	mov.w	r2, #0
 8008fe4:	00e2      	lsls	r2, r4, #3
 8008fe6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008fea:	00d9      	lsls	r1, r3, #3
 8008fec:	460b      	mov	r3, r1
 8008fee:	4614      	mov	r4, r2
 8008ff0:	195b      	adds	r3, r3, r5
 8008ff2:	eb44 0406 	adc.w	r4, r4, r6
 8008ff6:	f04f 0100 	mov.w	r1, #0
 8008ffa:	f04f 0200 	mov.w	r2, #0
 8008ffe:	0262      	lsls	r2, r4, #9
 8009000:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009004:	0259      	lsls	r1, r3, #9
 8009006:	460b      	mov	r3, r1
 8009008:	4614      	mov	r4, r2
 800900a:	4618      	mov	r0, r3
 800900c:	4621      	mov	r1, r4
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f04f 0400 	mov.w	r4, #0
 8009014:	461a      	mov	r2, r3
 8009016:	4623      	mov	r3, r4
 8009018:	f7f7 fe56 	bl	8000cc8 <__aeabi_uldivmod>
 800901c:	4603      	mov	r3, r0
 800901e:	460c      	mov	r4, r1
 8009020:	617b      	str	r3, [r7, #20]
 8009022:	e049      	b.n	80090b8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009024:	4b2e      	ldr	r3, [pc, #184]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	099b      	lsrs	r3, r3, #6
 800902a:	f04f 0400 	mov.w	r4, #0
 800902e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009032:	f04f 0200 	mov.w	r2, #0
 8009036:	ea03 0501 	and.w	r5, r3, r1
 800903a:	ea04 0602 	and.w	r6, r4, r2
 800903e:	4629      	mov	r1, r5
 8009040:	4632      	mov	r2, r6
 8009042:	f04f 0300 	mov.w	r3, #0
 8009046:	f04f 0400 	mov.w	r4, #0
 800904a:	0154      	lsls	r4, r2, #5
 800904c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8009050:	014b      	lsls	r3, r1, #5
 8009052:	4619      	mov	r1, r3
 8009054:	4622      	mov	r2, r4
 8009056:	1b49      	subs	r1, r1, r5
 8009058:	eb62 0206 	sbc.w	r2, r2, r6
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	f04f 0400 	mov.w	r4, #0
 8009064:	0194      	lsls	r4, r2, #6
 8009066:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800906a:	018b      	lsls	r3, r1, #6
 800906c:	1a5b      	subs	r3, r3, r1
 800906e:	eb64 0402 	sbc.w	r4, r4, r2
 8009072:	f04f 0100 	mov.w	r1, #0
 8009076:	f04f 0200 	mov.w	r2, #0
 800907a:	00e2      	lsls	r2, r4, #3
 800907c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8009080:	00d9      	lsls	r1, r3, #3
 8009082:	460b      	mov	r3, r1
 8009084:	4614      	mov	r4, r2
 8009086:	195b      	adds	r3, r3, r5
 8009088:	eb44 0406 	adc.w	r4, r4, r6
 800908c:	f04f 0100 	mov.w	r1, #0
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	02a2      	lsls	r2, r4, #10
 8009096:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800909a:	0299      	lsls	r1, r3, #10
 800909c:	460b      	mov	r3, r1
 800909e:	4614      	mov	r4, r2
 80090a0:	4618      	mov	r0, r3
 80090a2:	4621      	mov	r1, r4
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f04f 0400 	mov.w	r4, #0
 80090aa:	461a      	mov	r2, r3
 80090ac:	4623      	mov	r3, r4
 80090ae:	f7f7 fe0b 	bl	8000cc8 <__aeabi_uldivmod>
 80090b2:	4603      	mov	r3, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80090b8:	4b09      	ldr	r3, [pc, #36]	; (80090e0 <HAL_RCC_GetSysClockFreq+0x334>)
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	0f1b      	lsrs	r3, r3, #28
 80090be:	f003 0307 	and.w	r3, r3, #7
 80090c2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80090c4:	697a      	ldr	r2, [r7, #20]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090cc:	613b      	str	r3, [r7, #16]
      break;
 80090ce:	e002      	b.n	80090d6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090d0:	4b04      	ldr	r3, [pc, #16]	; (80090e4 <HAL_RCC_GetSysClockFreq+0x338>)
 80090d2:	613b      	str	r3, [r7, #16]
      break;
 80090d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090d6:	693b      	ldr	r3, [r7, #16]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090e0:	40023800 	.word	0x40023800
 80090e4:	00f42400 	.word	0x00f42400
 80090e8:	007a1200 	.word	0x007a1200

080090ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b086      	sub	sp, #24
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80090f4:	2300      	movs	r3, #0
 80090f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0301 	and.w	r3, r3, #1
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 8083 	beq.w	800920c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8009106:	4b95      	ldr	r3, [pc, #596]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	f003 030c 	and.w	r3, r3, #12
 800910e:	2b04      	cmp	r3, #4
 8009110:	d019      	beq.n	8009146 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009112:	4b92      	ldr	r3, [pc, #584]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800911a:	2b08      	cmp	r3, #8
 800911c:	d106      	bne.n	800912c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800911e:	4b8f      	ldr	r3, [pc, #572]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009126:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800912a:	d00c      	beq.n	8009146 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800912c:	4b8b      	ldr	r3, [pc, #556]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8009134:	2b0c      	cmp	r3, #12
 8009136:	d112      	bne.n	800915e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009138:	4b88      	ldr	r3, [pc, #544]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009140:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009144:	d10b      	bne.n	800915e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009146:	4b85      	ldr	r3, [pc, #532]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914e:	2b00      	cmp	r3, #0
 8009150:	d05b      	beq.n	800920a <HAL_RCC_OscConfig+0x11e>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d157      	bne.n	800920a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e216      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009166:	d106      	bne.n	8009176 <HAL_RCC_OscConfig+0x8a>
 8009168:	4b7c      	ldr	r3, [pc, #496]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a7b      	ldr	r2, [pc, #492]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800916e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	e01d      	b.n	80091b2 <HAL_RCC_OscConfig+0xc6>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800917e:	d10c      	bne.n	800919a <HAL_RCC_OscConfig+0xae>
 8009180:	4b76      	ldr	r3, [pc, #472]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a75      	ldr	r2, [pc, #468]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009186:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	4b73      	ldr	r3, [pc, #460]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a72      	ldr	r2, [pc, #456]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	e00b      	b.n	80091b2 <HAL_RCC_OscConfig+0xc6>
 800919a:	4b70      	ldr	r3, [pc, #448]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a6f      	ldr	r2, [pc, #444]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80091a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	4b6d      	ldr	r3, [pc, #436]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a6c      	ldr	r2, [pc, #432]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80091ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091b0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d013      	beq.n	80091e2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091ba:	f7fc f911 	bl	80053e0 <HAL_GetTick>
 80091be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091c0:	e008      	b.n	80091d4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091c2:	f7fc f90d 	bl	80053e0 <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	1ad3      	subs	r3, r2, r3
 80091cc:	2b64      	cmp	r3, #100	; 0x64
 80091ce:	d901      	bls.n	80091d4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80091d0:	2303      	movs	r3, #3
 80091d2:	e1db      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091d4:	4b61      	ldr	r3, [pc, #388]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d0f0      	beq.n	80091c2 <HAL_RCC_OscConfig+0xd6>
 80091e0:	e014      	b.n	800920c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091e2:	f7fc f8fd 	bl	80053e0 <HAL_GetTick>
 80091e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091e8:	e008      	b.n	80091fc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091ea:	f7fc f8f9 	bl	80053e0 <HAL_GetTick>
 80091ee:	4602      	mov	r2, r0
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	1ad3      	subs	r3, r2, r3
 80091f4:	2b64      	cmp	r3, #100	; 0x64
 80091f6:	d901      	bls.n	80091fc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80091f8:	2303      	movs	r3, #3
 80091fa:	e1c7      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091fc:	4b57      	ldr	r3, [pc, #348]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009204:	2b00      	cmp	r3, #0
 8009206:	d1f0      	bne.n	80091ea <HAL_RCC_OscConfig+0xfe>
 8009208:	e000      	b.n	800920c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800920a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 0302 	and.w	r3, r3, #2
 8009214:	2b00      	cmp	r3, #0
 8009216:	d06f      	beq.n	80092f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009218:	4b50      	ldr	r3, [pc, #320]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	f003 030c 	and.w	r3, r3, #12
 8009220:	2b00      	cmp	r3, #0
 8009222:	d017      	beq.n	8009254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009224:	4b4d      	ldr	r3, [pc, #308]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800922c:	2b08      	cmp	r3, #8
 800922e:	d105      	bne.n	800923c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009230:	4b4a      	ldr	r3, [pc, #296]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800923c:	4b47      	ldr	r3, [pc, #284]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009244:	2b0c      	cmp	r3, #12
 8009246:	d11c      	bne.n	8009282 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009248:	4b44      	ldr	r3, [pc, #272]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d116      	bne.n	8009282 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009254:	4b41      	ldr	r3, [pc, #260]	; (800935c <HAL_RCC_OscConfig+0x270>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d005      	beq.n	800926c <HAL_RCC_OscConfig+0x180>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d001      	beq.n	800926c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e18f      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800926c:	4b3b      	ldr	r3, [pc, #236]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
 8009278:	00db      	lsls	r3, r3, #3
 800927a:	4938      	ldr	r1, [pc, #224]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800927c:	4313      	orrs	r3, r2
 800927e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009280:	e03a      	b.n	80092f8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d020      	beq.n	80092cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800928a:	4b35      	ldr	r3, [pc, #212]	; (8009360 <HAL_RCC_OscConfig+0x274>)
 800928c:	2201      	movs	r2, #1
 800928e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009290:	f7fc f8a6 	bl	80053e0 <HAL_GetTick>
 8009294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009296:	e008      	b.n	80092aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009298:	f7fc f8a2 	bl	80053e0 <HAL_GetTick>
 800929c:	4602      	mov	r2, r0
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	1ad3      	subs	r3, r2, r3
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d901      	bls.n	80092aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80092a6:	2303      	movs	r3, #3
 80092a8:	e170      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092aa:	4b2c      	ldr	r3, [pc, #176]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d0f0      	beq.n	8009298 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092b6:	4b29      	ldr	r3, [pc, #164]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4925      	ldr	r1, [pc, #148]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	600b      	str	r3, [r1, #0]
 80092ca:	e015      	b.n	80092f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092cc:	4b24      	ldr	r3, [pc, #144]	; (8009360 <HAL_RCC_OscConfig+0x274>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d2:	f7fc f885 	bl	80053e0 <HAL_GetTick>
 80092d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092da:	f7fc f881 	bl	80053e0 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e14f      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ec:	4b1b      	ldr	r3, [pc, #108]	; (800935c <HAL_RCC_OscConfig+0x270>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f0      	bne.n	80092da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f003 0308 	and.w	r3, r3, #8
 8009300:	2b00      	cmp	r3, #0
 8009302:	d037      	beq.n	8009374 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d016      	beq.n	800933a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800930c:	4b15      	ldr	r3, [pc, #84]	; (8009364 <HAL_RCC_OscConfig+0x278>)
 800930e:	2201      	movs	r2, #1
 8009310:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009312:	f7fc f865 	bl	80053e0 <HAL_GetTick>
 8009316:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009318:	e008      	b.n	800932c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800931a:	f7fc f861 	bl	80053e0 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e12f      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800932c:	4b0b      	ldr	r3, [pc, #44]	; (800935c <HAL_RCC_OscConfig+0x270>)
 800932e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009330:	f003 0302 	and.w	r3, r3, #2
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f0      	beq.n	800931a <HAL_RCC_OscConfig+0x22e>
 8009338:	e01c      	b.n	8009374 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800933a:	4b0a      	ldr	r3, [pc, #40]	; (8009364 <HAL_RCC_OscConfig+0x278>)
 800933c:	2200      	movs	r2, #0
 800933e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009340:	f7fc f84e 	bl	80053e0 <HAL_GetTick>
 8009344:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009346:	e00f      	b.n	8009368 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009348:	f7fc f84a 	bl	80053e0 <HAL_GetTick>
 800934c:	4602      	mov	r2, r0
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	2b02      	cmp	r3, #2
 8009354:	d908      	bls.n	8009368 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8009356:	2303      	movs	r3, #3
 8009358:	e118      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	42470000 	.word	0x42470000
 8009364:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009368:	4b8a      	ldr	r3, [pc, #552]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800936a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800936c:	f003 0302 	and.w	r3, r3, #2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1e9      	bne.n	8009348 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	f000 8097 	beq.w	80094b0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009382:	2300      	movs	r3, #0
 8009384:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009386:	4b83      	ldr	r3, [pc, #524]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10f      	bne.n	80093b2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009392:	2300      	movs	r3, #0
 8009394:	60fb      	str	r3, [r7, #12]
 8009396:	4b7f      	ldr	r3, [pc, #508]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939a:	4a7e      	ldr	r2, [pc, #504]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800939c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a0:	6413      	str	r3, [r2, #64]	; 0x40
 80093a2:	4b7c      	ldr	r3, [pc, #496]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80093a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093aa:	60fb      	str	r3, [r7, #12]
 80093ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80093ae:	2301      	movs	r3, #1
 80093b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b2:	4b79      	ldr	r3, [pc, #484]	; (8009598 <HAL_RCC_OscConfig+0x4ac>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d118      	bne.n	80093f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093be:	4b76      	ldr	r3, [pc, #472]	; (8009598 <HAL_RCC_OscConfig+0x4ac>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a75      	ldr	r2, [pc, #468]	; (8009598 <HAL_RCC_OscConfig+0x4ac>)
 80093c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ca:	f7fc f809 	bl	80053e0 <HAL_GetTick>
 80093ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093d0:	e008      	b.n	80093e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093d2:	f7fc f805 	bl	80053e0 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e0d3      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093e4:	4b6c      	ldr	r3, [pc, #432]	; (8009598 <HAL_RCC_OscConfig+0x4ac>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0f0      	beq.n	80093d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d106      	bne.n	8009406 <HAL_RCC_OscConfig+0x31a>
 80093f8:	4b66      	ldr	r3, [pc, #408]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80093fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093fc:	4a65      	ldr	r2, [pc, #404]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80093fe:	f043 0301 	orr.w	r3, r3, #1
 8009402:	6713      	str	r3, [r2, #112]	; 0x70
 8009404:	e01c      	b.n	8009440 <HAL_RCC_OscConfig+0x354>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b05      	cmp	r3, #5
 800940c:	d10c      	bne.n	8009428 <HAL_RCC_OscConfig+0x33c>
 800940e:	4b61      	ldr	r3, [pc, #388]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	4a60      	ldr	r2, [pc, #384]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009414:	f043 0304 	orr.w	r3, r3, #4
 8009418:	6713      	str	r3, [r2, #112]	; 0x70
 800941a:	4b5e      	ldr	r3, [pc, #376]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941e:	4a5d      	ldr	r2, [pc, #372]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009420:	f043 0301 	orr.w	r3, r3, #1
 8009424:	6713      	str	r3, [r2, #112]	; 0x70
 8009426:	e00b      	b.n	8009440 <HAL_RCC_OscConfig+0x354>
 8009428:	4b5a      	ldr	r3, [pc, #360]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800942a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800942c:	4a59      	ldr	r2, [pc, #356]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800942e:	f023 0301 	bic.w	r3, r3, #1
 8009432:	6713      	str	r3, [r2, #112]	; 0x70
 8009434:	4b57      	ldr	r3, [pc, #348]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009438:	4a56      	ldr	r2, [pc, #344]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800943a:	f023 0304 	bic.w	r3, r3, #4
 800943e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d015      	beq.n	8009474 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009448:	f7fb ffca 	bl	80053e0 <HAL_GetTick>
 800944c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800944e:	e00a      	b.n	8009466 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009450:	f7fb ffc6 	bl	80053e0 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	f241 3288 	movw	r2, #5000	; 0x1388
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e092      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009466:	4b4b      	ldr	r3, [pc, #300]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d0ee      	beq.n	8009450 <HAL_RCC_OscConfig+0x364>
 8009472:	e014      	b.n	800949e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009474:	f7fb ffb4 	bl	80053e0 <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800947a:	e00a      	b.n	8009492 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800947c:	f7fb ffb0 	bl	80053e0 <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	f241 3288 	movw	r2, #5000	; 0x1388
 800948a:	4293      	cmp	r3, r2
 800948c:	d901      	bls.n	8009492 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800948e:	2303      	movs	r3, #3
 8009490:	e07c      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009492:	4b40      	ldr	r3, [pc, #256]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009496:	f003 0302 	and.w	r3, r3, #2
 800949a:	2b00      	cmp	r3, #0
 800949c:	d1ee      	bne.n	800947c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800949e:	7dfb      	ldrb	r3, [r7, #23]
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d105      	bne.n	80094b0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094a4:	4b3b      	ldr	r3, [pc, #236]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80094a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a8:	4a3a      	ldr	r2, [pc, #232]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80094aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	699b      	ldr	r3, [r3, #24]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d068      	beq.n	800958a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094b8:	4b36      	ldr	r3, [pc, #216]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f003 030c 	and.w	r3, r3, #12
 80094c0:	2b08      	cmp	r3, #8
 80094c2:	d060      	beq.n	8009586 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	699b      	ldr	r3, [r3, #24]
 80094c8:	2b02      	cmp	r3, #2
 80094ca:	d145      	bne.n	8009558 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094cc:	4b33      	ldr	r3, [pc, #204]	; (800959c <HAL_RCC_OscConfig+0x4b0>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094d2:	f7fb ff85 	bl	80053e0 <HAL_GetTick>
 80094d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094d8:	e008      	b.n	80094ec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094da:	f7fb ff81 	bl	80053e0 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	2b02      	cmp	r3, #2
 80094e6:	d901      	bls.n	80094ec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	e04f      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ec:	4b29      	ldr	r3, [pc, #164]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f0      	bne.n	80094da <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	69da      	ldr	r2, [r3, #28]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	431a      	orrs	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	019b      	lsls	r3, r3, #6
 8009508:	431a      	orrs	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800950e:	085b      	lsrs	r3, r3, #1
 8009510:	3b01      	subs	r3, #1
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	061b      	lsls	r3, r3, #24
 800951c:	431a      	orrs	r2, r3
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009522:	071b      	lsls	r3, r3, #28
 8009524:	491b      	ldr	r1, [pc, #108]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 8009526:	4313      	orrs	r3, r2
 8009528:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800952a:	4b1c      	ldr	r3, [pc, #112]	; (800959c <HAL_RCC_OscConfig+0x4b0>)
 800952c:	2201      	movs	r2, #1
 800952e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009530:	f7fb ff56 	bl	80053e0 <HAL_GetTick>
 8009534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009536:	e008      	b.n	800954a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009538:	f7fb ff52 	bl	80053e0 <HAL_GetTick>
 800953c:	4602      	mov	r2, r0
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	1ad3      	subs	r3, r2, r3
 8009542:	2b02      	cmp	r3, #2
 8009544:	d901      	bls.n	800954a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009546:	2303      	movs	r3, #3
 8009548:	e020      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800954a:	4b12      	ldr	r3, [pc, #72]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009552:	2b00      	cmp	r3, #0
 8009554:	d0f0      	beq.n	8009538 <HAL_RCC_OscConfig+0x44c>
 8009556:	e018      	b.n	800958a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009558:	4b10      	ldr	r3, [pc, #64]	; (800959c <HAL_RCC_OscConfig+0x4b0>)
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800955e:	f7fb ff3f 	bl	80053e0 <HAL_GetTick>
 8009562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009564:	e008      	b.n	8009578 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009566:	f7fb ff3b 	bl	80053e0 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	d901      	bls.n	8009578 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8009574:	2303      	movs	r3, #3
 8009576:	e009      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009578:	4b06      	ldr	r3, [pc, #24]	; (8009594 <HAL_RCC_OscConfig+0x4a8>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1f0      	bne.n	8009566 <HAL_RCC_OscConfig+0x47a>
 8009584:	e001      	b.n	800958a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009586:	2301      	movs	r3, #1
 8009588:	e000      	b.n	800958c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800958a:	2300      	movs	r3, #0
}
 800958c:	4618      	mov	r0, r3
 800958e:	3718      	adds	r7, #24
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}
 8009594:	40023800 	.word	0x40023800
 8009598:	40007000 	.word	0x40007000
 800959c:	42470060 	.word	0x42470060

080095a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d101      	bne.n	80095b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e056      	b.n	8009660 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d106      	bne.n	80095d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7fb fbb1 	bl	8004d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2202      	movs	r2, #2
 80095d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	685a      	ldr	r2, [r3, #4]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	689b      	ldr	r3, [r3, #8]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68db      	ldr	r3, [r3, #12]
 80095f8:	431a      	orrs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	695b      	ldr	r3, [r3, #20]
 8009604:	431a      	orrs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	69db      	ldr	r3, [r3, #28]
 8009614:	431a      	orrs	r2, r3
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a1b      	ldr	r3, [r3, #32]
 800961a:	ea42 0103 	orr.w	r1, r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	430a      	orrs	r2, r1
 8009628:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	699b      	ldr	r3, [r3, #24]
 800962e:	0c1b      	lsrs	r3, r3, #16
 8009630:	f003 0104 	and.w	r1, r3, #4
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	430a      	orrs	r2, r1
 800963e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	69da      	ldr	r2, [r3, #28]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800964e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b088      	sub	sp, #32
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	603b      	str	r3, [r7, #0]
 8009674:	4613      	mov	r3, r2
 8009676:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009682:	2b01      	cmp	r3, #1
 8009684:	d101      	bne.n	800968a <HAL_SPI_Transmit+0x22>
 8009686:	2302      	movs	r3, #2
 8009688:	e11e      	b.n	80098c8 <HAL_SPI_Transmit+0x260>
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2201      	movs	r2, #1
 800968e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009692:	f7fb fea5 	bl	80053e0 <HAL_GetTick>
 8009696:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009698:	88fb      	ldrh	r3, [r7, #6]
 800969a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	d002      	beq.n	80096ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80096a8:	2302      	movs	r3, #2
 80096aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096ac:	e103      	b.n	80098b6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d002      	beq.n	80096ba <HAL_SPI_Transmit+0x52>
 80096b4:	88fb      	ldrh	r3, [r7, #6]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d102      	bne.n	80096c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80096be:	e0fa      	b.n	80098b6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2203      	movs	r2, #3
 80096c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	68ba      	ldr	r2, [r7, #8]
 80096d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	88fa      	ldrh	r2, [r7, #6]
 80096d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	88fa      	ldrh	r2, [r7, #6]
 80096de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2200      	movs	r2, #0
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2200      	movs	r2, #0
 80096ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009706:	d107      	bne.n	8009718 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009716:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009722:	2b40      	cmp	r3, #64	; 0x40
 8009724:	d007      	beq.n	8009736 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009734:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800973e:	d14b      	bne.n	80097d8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <HAL_SPI_Transmit+0xe6>
 8009748:	8afb      	ldrh	r3, [r7, #22]
 800974a:	2b01      	cmp	r3, #1
 800974c:	d13e      	bne.n	80097cc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009752:	881a      	ldrh	r2, [r3, #0]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800975e:	1c9a      	adds	r2, r3, #2
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009768:	b29b      	uxth	r3, r3
 800976a:	3b01      	subs	r3, #1
 800976c:	b29a      	uxth	r2, r3
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009772:	e02b      	b.n	80097cc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	689b      	ldr	r3, [r3, #8]
 800977a:	f003 0302 	and.w	r3, r3, #2
 800977e:	2b02      	cmp	r3, #2
 8009780:	d112      	bne.n	80097a8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	881a      	ldrh	r2, [r3, #0]
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009792:	1c9a      	adds	r2, r3, #2
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b01      	subs	r3, #1
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80097a6:	e011      	b.n	80097cc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80097a8:	f7fb fe1a 	bl	80053e0 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d803      	bhi.n	80097c0 <HAL_SPI_Transmit+0x158>
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d102      	bne.n	80097c6 <HAL_SPI_Transmit+0x15e>
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d102      	bne.n	80097cc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80097c6:	2303      	movs	r3, #3
 80097c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80097ca:	e074      	b.n	80098b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1ce      	bne.n	8009774 <HAL_SPI_Transmit+0x10c>
 80097d6:	e04c      	b.n	8009872 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d002      	beq.n	80097e6 <HAL_SPI_Transmit+0x17e>
 80097e0:	8afb      	ldrh	r3, [r7, #22]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d140      	bne.n	8009868 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	330c      	adds	r3, #12
 80097f0:	7812      	ldrb	r2, [r2, #0]
 80097f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800980c:	e02c      	b.n	8009868 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d113      	bne.n	8009844 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	330c      	adds	r3, #12
 8009826:	7812      	ldrb	r2, [r2, #0]
 8009828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982e:	1c5a      	adds	r2, r3, #1
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29a      	uxth	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	86da      	strh	r2, [r3, #54]	; 0x36
 8009842:	e011      	b.n	8009868 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009844:	f7fb fdcc 	bl	80053e0 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	683a      	ldr	r2, [r7, #0]
 8009850:	429a      	cmp	r2, r3
 8009852:	d803      	bhi.n	800985c <HAL_SPI_Transmit+0x1f4>
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985a:	d102      	bne.n	8009862 <HAL_SPI_Transmit+0x1fa>
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d102      	bne.n	8009868 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009862:	2303      	movs	r3, #3
 8009864:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009866:	e026      	b.n	80098b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800986c:	b29b      	uxth	r3, r3
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1cd      	bne.n	800980e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009872:	69ba      	ldr	r2, [r7, #24]
 8009874:	6839      	ldr	r1, [r7, #0]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 fbb2 	bl	8009fe0 <SPI_EndRxTxTransaction>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	2220      	movs	r2, #32
 8009886:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009890:	2300      	movs	r3, #0
 8009892:	613b      	str	r3, [r7, #16]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	613b      	str	r3, [r7, #16]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	689b      	ldr	r3, [r3, #8]
 80098a2:	613b      	str	r3, [r7, #16]
 80098a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d002      	beq.n	80098b4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	77fb      	strb	r3, [r7, #31]
 80098b2:	e000      	b.n	80098b6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80098b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3720      	adds	r7, #32
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af02      	add	r7, sp, #8
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80098ec:	d112      	bne.n	8009914 <HAL_SPI_Receive+0x44>
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10e      	bne.n	8009914 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2204      	movs	r2, #4
 80098fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80098fe:	88fa      	ldrh	r2, [r7, #6]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4613      	mov	r3, r2
 8009906:	68ba      	ldr	r2, [r7, #8]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f8e9 	bl	8009ae2 <HAL_SPI_TransmitReceive>
 8009910:	4603      	mov	r3, r0
 8009912:	e0e2      	b.n	8009ada <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800991a:	2b01      	cmp	r3, #1
 800991c:	d101      	bne.n	8009922 <HAL_SPI_Receive+0x52>
 800991e:	2302      	movs	r3, #2
 8009920:	e0db      	b.n	8009ada <HAL_SPI_Receive+0x20a>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2201      	movs	r2, #1
 8009926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800992a:	f7fb fd59 	bl	80053e0 <HAL_GetTick>
 800992e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b01      	cmp	r3, #1
 800993a:	d002      	beq.n	8009942 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800993c:	2302      	movs	r3, #2
 800993e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009940:	e0c2      	b.n	8009ac8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <HAL_SPI_Receive+0x7e>
 8009948:	88fb      	ldrh	r3, [r7, #6]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009952:	e0b9      	b.n	8009ac8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2204      	movs	r2, #4
 8009958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	68ba      	ldr	r2, [r7, #8]
 8009966:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	88fa      	ldrh	r2, [r7, #6]
 800996c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	88fa      	ldrh	r2, [r7, #6]
 8009972:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2200      	movs	r2, #0
 800997e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800999a:	d107      	bne.n	80099ac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80099aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b6:	2b40      	cmp	r3, #64	; 0x40
 80099b8:	d007      	beq.n	80099ca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	68db      	ldr	r3, [r3, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d162      	bne.n	8009a98 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80099d2:	e02e      	b.n	8009a32 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	689b      	ldr	r3, [r3, #8]
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d115      	bne.n	8009a0e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f103 020c 	add.w	r2, r3, #12
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099ee:	7812      	ldrb	r2, [r2, #0]
 80099f0:	b2d2      	uxtb	r2, r2
 80099f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	3b01      	subs	r3, #1
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a0c:	e011      	b.n	8009a32 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a0e:	f7fb fce7 	bl	80053e0 <HAL_GetTick>
 8009a12:	4602      	mov	r2, r0
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	683a      	ldr	r2, [r7, #0]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	d803      	bhi.n	8009a26 <HAL_SPI_Receive+0x156>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a24:	d102      	bne.n	8009a2c <HAL_SPI_Receive+0x15c>
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d102      	bne.n	8009a32 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a30:	e04a      	b.n	8009ac8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1cb      	bne.n	80099d4 <HAL_SPI_Receive+0x104>
 8009a3c:	e031      	b.n	8009aa2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b01      	cmp	r3, #1
 8009a4a:	d113      	bne.n	8009a74 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68da      	ldr	r2, [r3, #12]
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a56:	b292      	uxth	r2, r2
 8009a58:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a5e:	1c9a      	adds	r2, r3, #2
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	3b01      	subs	r3, #1
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a72:	e011      	b.n	8009a98 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009a74:	f7fb fcb4 	bl	80053e0 <HAL_GetTick>
 8009a78:	4602      	mov	r2, r0
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	1ad3      	subs	r3, r2, r3
 8009a7e:	683a      	ldr	r2, [r7, #0]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d803      	bhi.n	8009a8c <HAL_SPI_Receive+0x1bc>
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a8a:	d102      	bne.n	8009a92 <HAL_SPI_Receive+0x1c2>
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d102      	bne.n	8009a98 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009a96:	e017      	b.n	8009ac8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d1cd      	bne.n	8009a3e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009aa2:	693a      	ldr	r2, [r7, #16]
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f000 fa35 	bl	8009f16 <SPI_EndRxTransaction>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d002      	beq.n	8009ab8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d002      	beq.n	8009ac6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	75fb      	strb	r3, [r7, #23]
 8009ac4:	e000      	b.n	8009ac8 <HAL_SPI_Receive+0x1f8>
  }

error :
 8009ac6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009ad8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3718      	adds	r7, #24
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b08c      	sub	sp, #48	; 0x30
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	60f8      	str	r0, [r7, #12]
 8009aea:	60b9      	str	r1, [r7, #8]
 8009aec:	607a      	str	r2, [r7, #4]
 8009aee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009af0:	2301      	movs	r3, #1
 8009af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009af4:	2300      	movs	r3, #0
 8009af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009b00:	2b01      	cmp	r3, #1
 8009b02:	d101      	bne.n	8009b08 <HAL_SPI_TransmitReceive+0x26>
 8009b04:	2302      	movs	r3, #2
 8009b06:	e18a      	b.n	8009e1e <HAL_SPI_TransmitReceive+0x33c>
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b10:	f7fb fc66 	bl	80053e0 <HAL_GetTick>
 8009b14:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009b26:	887b      	ldrh	r3, [r7, #2]
 8009b28:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009b2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d00f      	beq.n	8009b52 <HAL_SPI_TransmitReceive+0x70>
 8009b32:	69fb      	ldr	r3, [r7, #28]
 8009b34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b38:	d107      	bne.n	8009b4a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	689b      	ldr	r3, [r3, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d103      	bne.n	8009b4a <HAL_SPI_TransmitReceive+0x68>
 8009b42:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b46:	2b04      	cmp	r3, #4
 8009b48:	d003      	beq.n	8009b52 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b50:	e15b      	b.n	8009e0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <HAL_SPI_TransmitReceive+0x82>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d002      	beq.n	8009b64 <HAL_SPI_TransmitReceive+0x82>
 8009b5e:	887b      	ldrh	r3, [r7, #2]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d103      	bne.n	8009b6c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009b6a:	e14e      	b.n	8009e0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b04      	cmp	r3, #4
 8009b76:	d003      	beq.n	8009b80 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2205      	movs	r2, #5
 8009b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2200      	movs	r2, #0
 8009b84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	687a      	ldr	r2, [r7, #4]
 8009b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	887a      	ldrh	r2, [r7, #2]
 8009b90:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	887a      	ldrh	r2, [r7, #2]
 8009b96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	887a      	ldrh	r2, [r7, #2]
 8009ba2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	887a      	ldrh	r2, [r7, #2]
 8009ba8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	2200      	movs	r2, #0
 8009bae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc0:	2b40      	cmp	r3, #64	; 0x40
 8009bc2:	d007      	beq.n	8009bd4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bdc:	d178      	bne.n	8009cd0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <HAL_SPI_TransmitReceive+0x10a>
 8009be6:	8b7b      	ldrh	r3, [r7, #26]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d166      	bne.n	8009cba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf0:	881a      	ldrh	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bfc:	1c9a      	adds	r2, r3, #2
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	3b01      	subs	r3, #1
 8009c0a:	b29a      	uxth	r2, r3
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c10:	e053      	b.n	8009cba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	689b      	ldr	r3, [r3, #8]
 8009c18:	f003 0302 	and.w	r3, r3, #2
 8009c1c:	2b02      	cmp	r3, #2
 8009c1e:	d11b      	bne.n	8009c58 <HAL_SPI_TransmitReceive+0x176>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d016      	beq.n	8009c58 <HAL_SPI_TransmitReceive+0x176>
 8009c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d113      	bne.n	8009c58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c34:	881a      	ldrh	r2, [r3, #0]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c40:	1c9a      	adds	r2, r3, #2
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b29a      	uxth	r2, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 0301 	and.w	r3, r3, #1
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d119      	bne.n	8009c9a <HAL_SPI_TransmitReceive+0x1b8>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d014      	beq.n	8009c9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c7a:	b292      	uxth	r2, r2
 8009c7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c82:	1c9a      	adds	r2, r3, #2
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	3b01      	subs	r3, #1
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009c96:	2301      	movs	r3, #1
 8009c98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009c9a:	f7fb fba1 	bl	80053e0 <HAL_GetTick>
 8009c9e:	4602      	mov	r2, r0
 8009ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca2:	1ad3      	subs	r3, r2, r3
 8009ca4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d807      	bhi.n	8009cba <HAL_SPI_TransmitReceive+0x1d8>
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cb0:	d003      	beq.n	8009cba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009cb2:	2303      	movs	r3, #3
 8009cb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009cb8:	e0a7      	b.n	8009e0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1a6      	bne.n	8009c12 <HAL_SPI_TransmitReceive+0x130>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1a1      	bne.n	8009c12 <HAL_SPI_TransmitReceive+0x130>
 8009cce:	e07c      	b.n	8009dca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d002      	beq.n	8009cde <HAL_SPI_TransmitReceive+0x1fc>
 8009cd8:	8b7b      	ldrh	r3, [r7, #26]
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d16b      	bne.n	8009db6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	330c      	adds	r3, #12
 8009ce8:	7812      	ldrb	r2, [r2, #0]
 8009cea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	3b01      	subs	r3, #1
 8009cfe:	b29a      	uxth	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d04:	e057      	b.n	8009db6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	689b      	ldr	r3, [r3, #8]
 8009d0c:	f003 0302 	and.w	r3, r3, #2
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d11c      	bne.n	8009d4e <HAL_SPI_TransmitReceive+0x26c>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d017      	beq.n	8009d4e <HAL_SPI_TransmitReceive+0x26c>
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	2b01      	cmp	r3, #1
 8009d22:	d114      	bne.n	8009d4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	330c      	adds	r3, #12
 8009d2e:	7812      	ldrb	r2, [r2, #0]
 8009d30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	f003 0301 	and.w	r3, r3, #1
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	d119      	bne.n	8009d90 <HAL_SPI_TransmitReceive+0x2ae>
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d014      	beq.n	8009d90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68da      	ldr	r2, [r3, #12]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d70:	b2d2      	uxtb	r2, r2
 8009d72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d78:	1c5a      	adds	r2, r3, #1
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	3b01      	subs	r3, #1
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009d90:	f7fb fb26 	bl	80053e0 <HAL_GetTick>
 8009d94:	4602      	mov	r2, r0
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	1ad3      	subs	r3, r2, r3
 8009d9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d803      	bhi.n	8009da8 <HAL_SPI_TransmitReceive+0x2c6>
 8009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009da6:	d102      	bne.n	8009dae <HAL_SPI_TransmitReceive+0x2cc>
 8009da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d103      	bne.n	8009db6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009db4:	e029      	b.n	8009e0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009dba:	b29b      	uxth	r3, r3
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d1a2      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x224>
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d19d      	bne.n	8009d06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f906 	bl	8009fe0 <SPI_EndRxTxTransaction>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d006      	beq.n	8009de8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2220      	movs	r2, #32
 8009de4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009de6:	e010      	b.n	8009e0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10b      	bne.n	8009e08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	68db      	ldr	r3, [r3, #12]
 8009dfa:	617b      	str	r3, [r7, #20]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	617b      	str	r3, [r7, #20]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	e000      	b.n	8009e0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009e08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2201      	movs	r2, #1
 8009e0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009e1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3730      	adds	r7, #48	; 0x30
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009e26:	b480      	push	{r7}
 8009e28:	b083      	sub	sp, #12
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e34:	b2db      	uxtb	r3, r3
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	370c      	adds	r7, #12
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b084      	sub	sp, #16
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	60f8      	str	r0, [r7, #12]
 8009e4a:	60b9      	str	r1, [r7, #8]
 8009e4c:	603b      	str	r3, [r7, #0]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009e52:	e04c      	b.n	8009eee <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e5a:	d048      	beq.n	8009eee <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009e5c:	f7fb fac0 	bl	80053e0 <HAL_GetTick>
 8009e60:	4602      	mov	r2, r0
 8009e62:	69bb      	ldr	r3, [r7, #24]
 8009e64:	1ad3      	subs	r3, r2, r3
 8009e66:	683a      	ldr	r2, [r7, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d902      	bls.n	8009e72 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d13d      	bne.n	8009eee <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009e80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	685b      	ldr	r3, [r3, #4]
 8009e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e8a:	d111      	bne.n	8009eb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e94:	d004      	beq.n	8009ea0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	689b      	ldr	r3, [r3, #8]
 8009e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e9e:	d107      	bne.n	8009eb0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eb8:	d10f      	bne.n	8009eda <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	681a      	ldr	r2, [r3, #0]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ec8:	601a      	str	r2, [r3, #0]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009ed8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e00f      	b.n	8009f0e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	689a      	ldr	r2, [r3, #8]
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	4013      	ands	r3, r2
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	429a      	cmp	r2, r3
 8009efc:	bf0c      	ite	eq
 8009efe:	2301      	moveq	r3, #1
 8009f00:	2300      	movne	r3, #0
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	461a      	mov	r2, r3
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d1a3      	bne.n	8009e54 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009f16:	b580      	push	{r7, lr}
 8009f18:	b086      	sub	sp, #24
 8009f1a:	af02      	add	r7, sp, #8
 8009f1c:	60f8      	str	r0, [r7, #12]
 8009f1e:	60b9      	str	r1, [r7, #8]
 8009f20:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f2a:	d111      	bne.n	8009f50 <SPI_EndRxTransaction+0x3a>
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f34:	d004      	beq.n	8009f40 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f3e:	d107      	bne.n	8009f50 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f4e:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f58:	d12a      	bne.n	8009fb0 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	689b      	ldr	r3, [r3, #8]
 8009f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f62:	d012      	beq.n	8009f8a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	2180      	movs	r1, #128	; 0x80
 8009f6e:	68f8      	ldr	r0, [r7, #12]
 8009f70:	f7ff ff67 	bl	8009e42 <SPI_WaitFlagStateUntilTimeout>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d02d      	beq.n	8009fd6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7e:	f043 0220 	orr.w	r2, r3, #32
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e026      	b.n	8009fd8 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	9300      	str	r3, [sp, #0]
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	2200      	movs	r2, #0
 8009f92:	2101      	movs	r1, #1
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f7ff ff54 	bl	8009e42 <SPI_WaitFlagStateUntilTimeout>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d01a      	beq.n	8009fd6 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa4:	f043 0220 	orr.w	r2, r3, #32
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009fac:	2303      	movs	r3, #3
 8009fae:	e013      	b.n	8009fd8 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2101      	movs	r1, #1
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f7ff ff41 	bl	8009e42 <SPI_WaitFlagStateUntilTimeout>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d007      	beq.n	8009fd6 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fca:	f043 0220 	orr.w	r2, r3, #32
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e000      	b.n	8009fd8 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009fd6:	2300      	movs	r3, #0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3710      	adds	r7, #16
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009fec:	4b1b      	ldr	r3, [pc, #108]	; (800a05c <SPI_EndRxTxTransaction+0x7c>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	4a1b      	ldr	r2, [pc, #108]	; (800a060 <SPI_EndRxTxTransaction+0x80>)
 8009ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ff6:	0d5b      	lsrs	r3, r3, #21
 8009ff8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ffc:	fb02 f303 	mul.w	r3, r2, r3
 800a000:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a00a:	d112      	bne.n	800a032 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	2200      	movs	r2, #0
 800a014:	2180      	movs	r1, #128	; 0x80
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7ff ff13 	bl	8009e42 <SPI_WaitFlagStateUntilTimeout>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d016      	beq.n	800a050 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a026:	f043 0220 	orr.w	r2, r3, #32
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e00f      	b.n	800a052 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	3b01      	subs	r3, #1
 800a03c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a048:	2b80      	cmp	r3, #128	; 0x80
 800a04a:	d0f2      	beq.n	800a032 <SPI_EndRxTxTransaction+0x52>
 800a04c:	e000      	b.n	800a050 <SPI_EndRxTxTransaction+0x70>
        break;
 800a04e:	bf00      	nop
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3718      	adds	r7, #24
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	2000027c 	.word	0x2000027c
 800a060:	165e9f81 	.word	0x165e9f81

0800a064 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d101      	bne.n	800a076 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	e01d      	b.n	800a0b2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f7fa ff46 	bl	8004f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2202      	movs	r2, #2
 800a094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681a      	ldr	r2, [r3, #0]
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	3304      	adds	r3, #4
 800a0a0:	4619      	mov	r1, r3
 800a0a2:	4610      	mov	r0, r2
 800a0a4:	f000 fb44 	bl	800a730 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a0b0:	2300      	movs	r3, #0
}
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b085      	sub	sp, #20
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68da      	ldr	r2, [r3, #12]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f042 0201 	orr.w	r2, r2, #1
 800a0d0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	f003 0307 	and.w	r3, r3, #7
 800a0dc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b06      	cmp	r3, #6
 800a0e2:	d007      	beq.n	800a0f4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f042 0201 	orr.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
}
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	3714      	adds	r7, #20
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b082      	sub	sp, #8
 800a106:	af00      	add	r7, sp, #0
 800a108:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d101      	bne.n	800a114 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	e01d      	b.n	800a150 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d106      	bne.n	800a12e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f7fa fed7 	bl	8004edc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2202      	movs	r2, #2
 800a132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	3304      	adds	r3, #4
 800a13e:	4619      	mov	r1, r3
 800a140:	4610      	mov	r0, r2
 800a142:	f000 faf5 	bl	800a730 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b084      	sub	sp, #16
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2201      	movs	r2, #1
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f000 fdca 	bl	800ad04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a15      	ldr	r2, [pc, #84]	; (800a1cc <HAL_TIM_PWM_Start+0x74>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d004      	beq.n	800a184 <HAL_TIM_PWM_Start+0x2c>
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a14      	ldr	r2, [pc, #80]	; (800a1d0 <HAL_TIM_PWM_Start+0x78>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d101      	bne.n	800a188 <HAL_TIM_PWM_Start+0x30>
 800a184:	2301      	movs	r3, #1
 800a186:	e000      	b.n	800a18a <HAL_TIM_PWM_Start+0x32>
 800a188:	2300      	movs	r3, #0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d007      	beq.n	800a19e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a19c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	f003 0307 	and.w	r3, r3, #7
 800a1a8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2b06      	cmp	r3, #6
 800a1ae:	d007      	beq.n	800a1c0 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	681a      	ldr	r2, [r3, #0]
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f042 0201 	orr.w	r2, r2, #1
 800a1be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	40010000 	.word	0x40010000
 800a1d0:	40010400 	.word	0x40010400

0800a1d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a1d4:	b580      	push	{r7, lr}
 800a1d6:	b082      	sub	sp, #8
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	691b      	ldr	r3, [r3, #16]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d122      	bne.n	800a230 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	f003 0302 	and.w	r3, r3, #2
 800a1f4:	2b02      	cmp	r3, #2
 800a1f6:	d11b      	bne.n	800a230 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f06f 0202 	mvn.w	r2, #2
 800a200:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2201      	movs	r2, #1
 800a206:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	699b      	ldr	r3, [r3, #24]
 800a20e:	f003 0303 	and.w	r3, r3, #3
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 fa6b 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a21c:	e005      	b.n	800a22a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa5d 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 fa6e 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	2200      	movs	r2, #0
 800a22e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	691b      	ldr	r3, [r3, #16]
 800a236:	f003 0304 	and.w	r3, r3, #4
 800a23a:	2b04      	cmp	r3, #4
 800a23c:	d122      	bne.n	800a284 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f003 0304 	and.w	r3, r3, #4
 800a248:	2b04      	cmp	r3, #4
 800a24a:	d11b      	bne.n	800a284 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f06f 0204 	mvn.w	r2, #4
 800a254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2202      	movs	r2, #2
 800a25a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	699b      	ldr	r3, [r3, #24]
 800a262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fa41 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a270:	e005      	b.n	800a27e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 fa33 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa44 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	691b      	ldr	r3, [r3, #16]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b08      	cmp	r3, #8
 800a290:	d122      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f003 0308 	and.w	r3, r3, #8
 800a29c:	2b08      	cmp	r3, #8
 800a29e:	d11b      	bne.n	800a2d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f06f 0208 	mvn.w	r2, #8
 800a2a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	2204      	movs	r2, #4
 800a2ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	f003 0303 	and.w	r3, r3, #3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f000 fa17 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a2c4:	e005      	b.n	800a2d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa09 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f000 fa1a 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	f003 0310 	and.w	r3, r3, #16
 800a2e2:	2b10      	cmp	r3, #16
 800a2e4:	d122      	bne.n	800a32c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	f003 0310 	and.w	r3, r3, #16
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	d11b      	bne.n	800a32c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f06f 0210 	mvn.w	r2, #16
 800a2fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2208      	movs	r2, #8
 800a302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d003      	beq.n	800a31a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 f9ed 	bl	800a6f2 <HAL_TIM_IC_CaptureCallback>
 800a318:	e005      	b.n	800a326 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f9df 	bl	800a6de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a320:	6878      	ldr	r0, [r7, #4]
 800a322:	f000 f9f0 	bl	800a706 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b01      	cmp	r3, #1
 800a338:	d10e      	bne.n	800a358 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	68db      	ldr	r3, [r3, #12]
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b01      	cmp	r3, #1
 800a346:	d107      	bne.n	800a358 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f06f 0201 	mvn.w	r2, #1
 800a350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7fa fa20 	bl	8004798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a362:	2b80      	cmp	r3, #128	; 0x80
 800a364:	d10e      	bne.n	800a384 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a370:	2b80      	cmp	r3, #128	; 0x80
 800a372:	d107      	bne.n	800a384 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a37c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f000 fd6c 	bl	800ae5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a38e:	2b40      	cmp	r3, #64	; 0x40
 800a390:	d10e      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a39c:	2b40      	cmp	r3, #64	; 0x40
 800a39e:	d107      	bne.n	800a3b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f9b5 	bl	800a71a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f003 0320 	and.w	r3, r3, #32
 800a3ba:	2b20      	cmp	r3, #32
 800a3bc:	d10e      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	68db      	ldr	r3, [r3, #12]
 800a3c4:	f003 0320 	and.w	r3, r3, #32
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	d107      	bne.n	800a3dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f06f 0220 	mvn.w	r2, #32
 800a3d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fd36 	bl	800ae48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a3dc:	bf00      	nop
 800a3de:	3708      	adds	r7, #8
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}

0800a3e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b084      	sub	sp, #16
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f6:	2b01      	cmp	r3, #1
 800a3f8:	d101      	bne.n	800a3fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a3fa:	2302      	movs	r3, #2
 800a3fc:	e0b4      	b.n	800a568 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	2202      	movs	r2, #2
 800a40a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2b0c      	cmp	r3, #12
 800a412:	f200 809f 	bhi.w	800a554 <HAL_TIM_PWM_ConfigChannel+0x170>
 800a416:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a451 	.word	0x0800a451
 800a420:	0800a555 	.word	0x0800a555
 800a424:	0800a555 	.word	0x0800a555
 800a428:	0800a555 	.word	0x0800a555
 800a42c:	0800a491 	.word	0x0800a491
 800a430:	0800a555 	.word	0x0800a555
 800a434:	0800a555 	.word	0x0800a555
 800a438:	0800a555 	.word	0x0800a555
 800a43c:	0800a4d3 	.word	0x0800a4d3
 800a440:	0800a555 	.word	0x0800a555
 800a444:	0800a555 	.word	0x0800a555
 800a448:	0800a555 	.word	0x0800a555
 800a44c:	0800a513 	.word	0x0800a513
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fa0a 	bl	800a870 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	699a      	ldr	r2, [r3, #24]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0208 	orr.w	r2, r2, #8
 800a46a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	699a      	ldr	r2, [r3, #24]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 0204 	bic.w	r2, r2, #4
 800a47a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6999      	ldr	r1, [r3, #24]
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	619a      	str	r2, [r3, #24]
      break;
 800a48e:	e062      	b.n	800a556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 fa5a 	bl	800a950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	699a      	ldr	r2, [r3, #24]
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	699a      	ldr	r2, [r3, #24]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6999      	ldr	r1, [r3, #24]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	021a      	lsls	r2, r3, #8
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	619a      	str	r2, [r3, #24]
      break;
 800a4d0:	e041      	b.n	800a556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68b9      	ldr	r1, [r7, #8]
 800a4d8:	4618      	mov	r0, r3
 800a4da:	f000 faaf 	bl	800aa3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	69da      	ldr	r2, [r3, #28]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f042 0208 	orr.w	r2, r2, #8
 800a4ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	69da      	ldr	r2, [r3, #28]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f022 0204 	bic.w	r2, r2, #4
 800a4fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	69d9      	ldr	r1, [r3, #28]
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	691a      	ldr	r2, [r3, #16]
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	430a      	orrs	r2, r1
 800a50e:	61da      	str	r2, [r3, #28]
      break;
 800a510:	e021      	b.n	800a556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68b9      	ldr	r1, [r7, #8]
 800a518:	4618      	mov	r0, r3
 800a51a:	f000 fb03 	bl	800ab24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	69da      	ldr	r2, [r3, #28]
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a52c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	69da      	ldr	r2, [r3, #28]
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a53c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	69d9      	ldr	r1, [r3, #28]
 800a544:	68bb      	ldr	r3, [r7, #8]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	021a      	lsls	r2, r3, #8
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	430a      	orrs	r2, r1
 800a550:	61da      	str	r2, [r3, #28]
      break;
 800a552:	e000      	b.n	800a556 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a554:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3710      	adds	r7, #16
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a580:	2b01      	cmp	r3, #1
 800a582:	d101      	bne.n	800a588 <HAL_TIM_ConfigClockSource+0x18>
 800a584:	2302      	movs	r3, #2
 800a586:	e0a6      	b.n	800a6d6 <HAL_TIM_ConfigClockSource+0x166>
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2201      	movs	r2, #1
 800a58c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	689b      	ldr	r3, [r3, #8]
 800a59e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b40      	cmp	r3, #64	; 0x40
 800a5be:	d067      	beq.n	800a690 <HAL_TIM_ConfigClockSource+0x120>
 800a5c0:	2b40      	cmp	r3, #64	; 0x40
 800a5c2:	d80b      	bhi.n	800a5dc <HAL_TIM_ConfigClockSource+0x6c>
 800a5c4:	2b10      	cmp	r3, #16
 800a5c6:	d073      	beq.n	800a6b0 <HAL_TIM_ConfigClockSource+0x140>
 800a5c8:	2b10      	cmp	r3, #16
 800a5ca:	d802      	bhi.n	800a5d2 <HAL_TIM_ConfigClockSource+0x62>
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d06f      	beq.n	800a6b0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a5d0:	e078      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	d06c      	beq.n	800a6b0 <HAL_TIM_ConfigClockSource+0x140>
 800a5d6:	2b30      	cmp	r3, #48	; 0x30
 800a5d8:	d06a      	beq.n	800a6b0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a5da:	e073      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a5dc:	2b70      	cmp	r3, #112	; 0x70
 800a5de:	d00d      	beq.n	800a5fc <HAL_TIM_ConfigClockSource+0x8c>
 800a5e0:	2b70      	cmp	r3, #112	; 0x70
 800a5e2:	d804      	bhi.n	800a5ee <HAL_TIM_ConfigClockSource+0x7e>
 800a5e4:	2b50      	cmp	r3, #80	; 0x50
 800a5e6:	d033      	beq.n	800a650 <HAL_TIM_ConfigClockSource+0xe0>
 800a5e8:	2b60      	cmp	r3, #96	; 0x60
 800a5ea:	d041      	beq.n	800a670 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a5ec:	e06a      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f2:	d066      	beq.n	800a6c2 <HAL_TIM_ConfigClockSource+0x152>
 800a5f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5f8:	d017      	beq.n	800a62a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a5fa:	e063      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6818      	ldr	r0, [r3, #0]
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	6899      	ldr	r1, [r3, #8]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	685a      	ldr	r2, [r3, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	f000 fb5a 	bl	800acc4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a61e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68fa      	ldr	r2, [r7, #12]
 800a626:	609a      	str	r2, [r3, #8]
      break;
 800a628:	e04c      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6818      	ldr	r0, [r3, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	6899      	ldr	r1, [r3, #8]
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	685a      	ldr	r2, [r3, #4]
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	68db      	ldr	r3, [r3, #12]
 800a63a:	f000 fb43 	bl	800acc4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	689a      	ldr	r2, [r3, #8]
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a64c:	609a      	str	r2, [r3, #8]
      break;
 800a64e:	e039      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6818      	ldr	r0, [r3, #0]
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	6859      	ldr	r1, [r3, #4]
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	461a      	mov	r2, r3
 800a65e:	f000 fab7 	bl	800abd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2150      	movs	r1, #80	; 0x50
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 fb10 	bl	800ac8e <TIM_ITRx_SetConfig>
      break;
 800a66e:	e029      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6818      	ldr	r0, [r3, #0]
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	6859      	ldr	r1, [r3, #4]
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	461a      	mov	r2, r3
 800a67e:	f000 fad6 	bl	800ac2e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	2160      	movs	r1, #96	; 0x60
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fb00 	bl	800ac8e <TIM_ITRx_SetConfig>
      break;
 800a68e:	e019      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6818      	ldr	r0, [r3, #0]
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	6859      	ldr	r1, [r3, #4]
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	461a      	mov	r2, r3
 800a69e:	f000 fa97 	bl	800abd0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2140      	movs	r1, #64	; 0x40
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 faf0 	bl	800ac8e <TIM_ITRx_SetConfig>
      break;
 800a6ae:	e009      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4619      	mov	r1, r3
 800a6ba:	4610      	mov	r0, r2
 800a6bc:	f000 fae7 	bl	800ac8e <TIM_ITRx_SetConfig>
      break;
 800a6c0:	e000      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a6c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a70e:	bf00      	nop
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
	...

0800a730 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a730:	b480      	push	{r7}
 800a732:	b085      	sub	sp, #20
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4a40      	ldr	r2, [pc, #256]	; (800a844 <TIM_Base_SetConfig+0x114>)
 800a744:	4293      	cmp	r3, r2
 800a746:	d013      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a74e:	d00f      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4a3d      	ldr	r2, [pc, #244]	; (800a848 <TIM_Base_SetConfig+0x118>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d00b      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	4a3c      	ldr	r2, [pc, #240]	; (800a84c <TIM_Base_SetConfig+0x11c>)
 800a75c:	4293      	cmp	r3, r2
 800a75e:	d007      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a3b      	ldr	r2, [pc, #236]	; (800a850 <TIM_Base_SetConfig+0x120>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d003      	beq.n	800a770 <TIM_Base_SetConfig+0x40>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	4a3a      	ldr	r2, [pc, #232]	; (800a854 <TIM_Base_SetConfig+0x124>)
 800a76c:	4293      	cmp	r3, r2
 800a76e:	d108      	bne.n	800a782 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a776:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	685b      	ldr	r3, [r3, #4]
 800a77c:	68fa      	ldr	r2, [r7, #12]
 800a77e:	4313      	orrs	r3, r2
 800a780:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a2f      	ldr	r2, [pc, #188]	; (800a844 <TIM_Base_SetConfig+0x114>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d02b      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a790:	d027      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a2c      	ldr	r2, [pc, #176]	; (800a848 <TIM_Base_SetConfig+0x118>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d023      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a2b      	ldr	r2, [pc, #172]	; (800a84c <TIM_Base_SetConfig+0x11c>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d01f      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a2a      	ldr	r2, [pc, #168]	; (800a850 <TIM_Base_SetConfig+0x120>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d01b      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a29      	ldr	r2, [pc, #164]	; (800a854 <TIM_Base_SetConfig+0x124>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d017      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	4a28      	ldr	r2, [pc, #160]	; (800a858 <TIM_Base_SetConfig+0x128>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d013      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a27      	ldr	r2, [pc, #156]	; (800a85c <TIM_Base_SetConfig+0x12c>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d00f      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a26      	ldr	r2, [pc, #152]	; (800a860 <TIM_Base_SetConfig+0x130>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d00b      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a25      	ldr	r2, [pc, #148]	; (800a864 <TIM_Base_SetConfig+0x134>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d007      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a24      	ldr	r2, [pc, #144]	; (800a868 <TIM_Base_SetConfig+0x138>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d003      	beq.n	800a7e2 <TIM_Base_SetConfig+0xb2>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a23      	ldr	r2, [pc, #140]	; (800a86c <TIM_Base_SetConfig+0x13c>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d108      	bne.n	800a7f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a7e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4313      	orrs	r3, r2
 800a7f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	4313      	orrs	r3, r2
 800a800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	689a      	ldr	r2, [r3, #8]
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a0a      	ldr	r2, [pc, #40]	; (800a844 <TIM_Base_SetConfig+0x114>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d003      	beq.n	800a828 <TIM_Base_SetConfig+0xf8>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	4a0c      	ldr	r2, [pc, #48]	; (800a854 <TIM_Base_SetConfig+0x124>)
 800a824:	4293      	cmp	r3, r2
 800a826:	d103      	bne.n	800a830 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	691a      	ldr	r2, [r3, #16]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	615a      	str	r2, [r3, #20]
}
 800a836:	bf00      	nop
 800a838:	3714      	adds	r7, #20
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	40010000 	.word	0x40010000
 800a848:	40000400 	.word	0x40000400
 800a84c:	40000800 	.word	0x40000800
 800a850:	40000c00 	.word	0x40000c00
 800a854:	40010400 	.word	0x40010400
 800a858:	40014000 	.word	0x40014000
 800a85c:	40014400 	.word	0x40014400
 800a860:	40014800 	.word	0x40014800
 800a864:	40001800 	.word	0x40001800
 800a868:	40001c00 	.word	0x40001c00
 800a86c:	40002000 	.word	0x40002000

0800a870 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a870:	b480      	push	{r7}
 800a872:	b087      	sub	sp, #28
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
 800a878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	f023 0201 	bic.w	r2, r3, #1
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	699b      	ldr	r3, [r3, #24]
 800a896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a89e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	f023 0303 	bic.w	r3, r3, #3
 800a8a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	68fa      	ldr	r2, [r7, #12]
 800a8ae:	4313      	orrs	r3, r2
 800a8b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f023 0302 	bic.w	r3, r3, #2
 800a8b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	689b      	ldr	r3, [r3, #8]
 800a8be:	697a      	ldr	r2, [r7, #20]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	4a20      	ldr	r2, [pc, #128]	; (800a948 <TIM_OC1_SetConfig+0xd8>)
 800a8c8:	4293      	cmp	r3, r2
 800a8ca:	d003      	beq.n	800a8d4 <TIM_OC1_SetConfig+0x64>
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	4a1f      	ldr	r2, [pc, #124]	; (800a94c <TIM_OC1_SetConfig+0xdc>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d10c      	bne.n	800a8ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	f023 0308 	bic.w	r3, r3, #8
 800a8da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	697a      	ldr	r2, [r7, #20]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f023 0304 	bic.w	r3, r3, #4
 800a8ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4a15      	ldr	r2, [pc, #84]	; (800a948 <TIM_OC1_SetConfig+0xd8>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d003      	beq.n	800a8fe <TIM_OC1_SetConfig+0x8e>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	4a14      	ldr	r2, [pc, #80]	; (800a94c <TIM_OC1_SetConfig+0xdc>)
 800a8fa:	4293      	cmp	r3, r2
 800a8fc:	d111      	bne.n	800a922 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8fe:	693b      	ldr	r3, [r7, #16]
 800a900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a90c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	695b      	ldr	r3, [r3, #20]
 800a912:	693a      	ldr	r2, [r7, #16]
 800a914:	4313      	orrs	r3, r2
 800a916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	699b      	ldr	r3, [r3, #24]
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	4313      	orrs	r3, r2
 800a920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	693a      	ldr	r2, [r7, #16]
 800a926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	697a      	ldr	r2, [r7, #20]
 800a93a:	621a      	str	r2, [r3, #32]
}
 800a93c:	bf00      	nop
 800a93e:	371c      	adds	r7, #28
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr
 800a948:	40010000 	.word	0x40010000
 800a94c:	40010400 	.word	0x40010400

0800a950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a950:	b480      	push	{r7}
 800a952:	b087      	sub	sp, #28
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	f023 0210 	bic.w	r2, r3, #16
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	699b      	ldr	r3, [r3, #24]
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	68fa      	ldr	r2, [r7, #12]
 800a990:	4313      	orrs	r3, r2
 800a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	f023 0320 	bic.w	r3, r3, #32
 800a99a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	697a      	ldr	r2, [r7, #20]
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	4a22      	ldr	r2, [pc, #136]	; (800aa34 <TIM_OC2_SetConfig+0xe4>)
 800a9ac:	4293      	cmp	r3, r2
 800a9ae:	d003      	beq.n	800a9b8 <TIM_OC2_SetConfig+0x68>
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	4a21      	ldr	r2, [pc, #132]	; (800aa38 <TIM_OC2_SetConfig+0xe8>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d10d      	bne.n	800a9d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	011b      	lsls	r3, r3, #4
 800a9c6:	697a      	ldr	r2, [r7, #20]
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a17      	ldr	r2, [pc, #92]	; (800aa34 <TIM_OC2_SetConfig+0xe4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d003      	beq.n	800a9e4 <TIM_OC2_SetConfig+0x94>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a16      	ldr	r2, [pc, #88]	; (800aa38 <TIM_OC2_SetConfig+0xe8>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d113      	bne.n	800aa0c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	695b      	ldr	r3, [r3, #20]
 800a9f8:	009b      	lsls	r3, r3, #2
 800a9fa:	693a      	ldr	r2, [r7, #16]
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	009b      	lsls	r3, r3, #2
 800aa06:	693a      	ldr	r2, [r7, #16]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68fa      	ldr	r2, [r7, #12]
 800aa16:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	685a      	ldr	r2, [r3, #4]
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	621a      	str	r2, [r3, #32]
}
 800aa26:	bf00      	nop
 800aa28:	371c      	adds	r7, #28
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	40010000 	.word	0x40010000
 800aa38:	40010400 	.word	0x40010400

0800aa3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b087      	sub	sp, #28
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
 800aa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6a1b      	ldr	r3, [r3, #32]
 800aa56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f023 0303 	bic.w	r3, r3, #3
 800aa72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa74:	683b      	ldr	r3, [r7, #0]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	68fa      	ldr	r2, [r7, #12]
 800aa7a:	4313      	orrs	r3, r2
 800aa7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	021b      	lsls	r3, r3, #8
 800aa8c:	697a      	ldr	r2, [r7, #20]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	4a21      	ldr	r2, [pc, #132]	; (800ab1c <TIM_OC3_SetConfig+0xe0>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d003      	beq.n	800aaa2 <TIM_OC3_SetConfig+0x66>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a20      	ldr	r2, [pc, #128]	; (800ab20 <TIM_OC3_SetConfig+0xe4>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d10d      	bne.n	800aabe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaa8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	697a      	ldr	r2, [r7, #20]
 800aab2:	4313      	orrs	r3, r2
 800aab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aabc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <TIM_OC3_SetConfig+0xe0>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d003      	beq.n	800aace <TIM_OC3_SetConfig+0x92>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	4a15      	ldr	r2, [pc, #84]	; (800ab20 <TIM_OC3_SetConfig+0xe4>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d113      	bne.n	800aaf6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aadc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	011b      	lsls	r3, r3, #4
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	699b      	ldr	r3, [r3, #24]
 800aaee:	011b      	lsls	r3, r3, #4
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	697a      	ldr	r2, [r7, #20]
 800ab0e:	621a      	str	r2, [r3, #32]
}
 800ab10:	bf00      	nop
 800ab12:	371c      	adds	r7, #28
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40010400 	.word	0x40010400

0800ab24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab24:	b480      	push	{r7}
 800ab26:	b087      	sub	sp, #28
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
 800ab2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6a1b      	ldr	r3, [r3, #32]
 800ab32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a1b      	ldr	r3, [r3, #32]
 800ab3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	69db      	ldr	r3, [r3, #28]
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	021b      	lsls	r3, r3, #8
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab68:	693b      	ldr	r3, [r7, #16]
 800ab6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	031b      	lsls	r3, r3, #12
 800ab76:	693a      	ldr	r2, [r7, #16]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a12      	ldr	r2, [pc, #72]	; (800abc8 <TIM_OC4_SetConfig+0xa4>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d003      	beq.n	800ab8c <TIM_OC4_SetConfig+0x68>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a11      	ldr	r2, [pc, #68]	; (800abcc <TIM_OC4_SetConfig+0xa8>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d109      	bne.n	800aba0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	695b      	ldr	r3, [r3, #20]
 800ab98:	019b      	lsls	r3, r3, #6
 800ab9a:	697a      	ldr	r2, [r7, #20]
 800ab9c:	4313      	orrs	r3, r2
 800ab9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	697a      	ldr	r2, [r7, #20]
 800aba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685a      	ldr	r2, [r3, #4]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	621a      	str	r2, [r3, #32]
}
 800abba:	bf00      	nop
 800abbc:	371c      	adds	r7, #28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc4:	4770      	bx	lr
 800abc6:	bf00      	nop
 800abc8:	40010000 	.word	0x40010000
 800abcc:	40010400 	.word	0x40010400

0800abd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6a1b      	ldr	r3, [r3, #32]
 800abe0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	f023 0201 	bic.w	r2, r3, #1
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	699b      	ldr	r3, [r3, #24]
 800abf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	011b      	lsls	r3, r3, #4
 800ac00:	693a      	ldr	r2, [r7, #16]
 800ac02:	4313      	orrs	r3, r2
 800ac04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	f023 030a 	bic.w	r3, r3, #10
 800ac0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac0e:	697a      	ldr	r2, [r7, #20]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	4313      	orrs	r3, r2
 800ac14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	693a      	ldr	r2, [r7, #16]
 800ac1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	621a      	str	r2, [r3, #32]
}
 800ac22:	bf00      	nop
 800ac24:	371c      	adds	r7, #28
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac2e:	b480      	push	{r7}
 800ac30:	b087      	sub	sp, #28
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	6a1b      	ldr	r3, [r3, #32]
 800ac3e:	f023 0210 	bic.w	r2, r3, #16
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	699b      	ldr	r3, [r3, #24]
 800ac4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	6a1b      	ldr	r3, [r3, #32]
 800ac50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	031b      	lsls	r3, r3, #12
 800ac5e:	697a      	ldr	r2, [r7, #20]
 800ac60:	4313      	orrs	r3, r2
 800ac62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	011b      	lsls	r3, r3, #4
 800ac70:	693a      	ldr	r2, [r7, #16]
 800ac72:	4313      	orrs	r3, r2
 800ac74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	697a      	ldr	r2, [r7, #20]
 800ac7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	693a      	ldr	r2, [r7, #16]
 800ac80:	621a      	str	r2, [r3, #32]
}
 800ac82:	bf00      	nop
 800ac84:	371c      	adds	r7, #28
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]
 800ac96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aca4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aca6:	683a      	ldr	r2, [r7, #0]
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	4313      	orrs	r3, r2
 800acac:	f043 0307 	orr.w	r3, r3, #7
 800acb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	609a      	str	r2, [r3, #8]
}
 800acb8:	bf00      	nop
 800acba:	3714      	adds	r7, #20
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acc4:	b480      	push	{r7}
 800acc6:	b087      	sub	sp, #28
 800acc8:	af00      	add	r7, sp, #0
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	60b9      	str	r1, [r7, #8]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acd8:	697b      	ldr	r3, [r7, #20]
 800acda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	021a      	lsls	r2, r3, #8
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	431a      	orrs	r2, r3
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	4313      	orrs	r3, r2
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	4313      	orrs	r3, r2
 800acf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	697a      	ldr	r2, [r7, #20]
 800acf6:	609a      	str	r2, [r3, #8]
}
 800acf8:	bf00      	nop
 800acfa:	371c      	adds	r7, #28
 800acfc:	46bd      	mov	sp, r7
 800acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad02:	4770      	bx	lr

0800ad04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f003 031f 	and.w	r3, r3, #31
 800ad16:	2201      	movs	r2, #1
 800ad18:	fa02 f303 	lsl.w	r3, r2, r3
 800ad1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	6a1a      	ldr	r2, [r3, #32]
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	43db      	mvns	r3, r3
 800ad26:	401a      	ands	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	6a1a      	ldr	r2, [r3, #32]
 800ad30:	68bb      	ldr	r3, [r7, #8]
 800ad32:	f003 031f 	and.w	r3, r3, #31
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	fa01 f303 	lsl.w	r3, r1, r3
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	621a      	str	r2, [r3, #32]
}
 800ad42:	bf00      	nop
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
	...

0800ad50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b085      	sub	sp, #20
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e05a      	b.n	800ae1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2202      	movs	r2, #2
 800ad74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	685b      	ldr	r3, [r3, #4]
 800ad7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ad90:	683b      	ldr	r3, [r7, #0]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	68fa      	ldr	r2, [r7, #12]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68fa      	ldr	r2, [r7, #12]
 800ada0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a21      	ldr	r2, [pc, #132]	; (800ae2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ada8:	4293      	cmp	r3, r2
 800adaa:	d022      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adb4:	d01d      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a1d      	ldr	r2, [pc, #116]	; (800ae30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d018      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a1b      	ldr	r2, [pc, #108]	; (800ae34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800adc6:	4293      	cmp	r3, r2
 800adc8:	d013      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	4a1a      	ldr	r2, [pc, #104]	; (800ae38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d00e      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a18      	ldr	r2, [pc, #96]	; (800ae3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800adda:	4293      	cmp	r3, r2
 800addc:	d009      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a17      	ldr	r2, [pc, #92]	; (800ae40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d004      	beq.n	800adf2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4a15      	ldr	r2, [pc, #84]	; (800ae44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d10c      	bne.n	800ae0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800adf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	4313      	orrs	r3, r2
 800ae02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2200      	movs	r2, #0
 800ae18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3714      	adds	r7, #20
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	40010000 	.word	0x40010000
 800ae30:	40000400 	.word	0x40000400
 800ae34:	40000800 	.word	0x40000800
 800ae38:	40000c00 	.word	0x40000c00
 800ae3c:	40010400 	.word	0x40010400
 800ae40:	40014000 	.word	0x40014000
 800ae44:	40001800 	.word	0x40001800

0800ae48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b083      	sub	sp, #12
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ae64:	bf00      	nop
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae70:	b084      	sub	sp, #16
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b084      	sub	sp, #16
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	f107 001c 	add.w	r0, r7, #28
 800ae7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ae82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d122      	bne.n	800aece <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	68db      	ldr	r3, [r3, #12]
 800ae98:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800ae9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68db      	ldr	r3, [r3, #12]
 800aea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aeb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d105      	bne.n	800aec2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 fac0 	bl	800c448 <USB_CoreReset>
 800aec8:	4603      	mov	r3, r0
 800aeca:	73fb      	strb	r3, [r7, #15]
 800aecc:	e01a      	b.n	800af04 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68db      	ldr	r3, [r3, #12]
 800aed2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f001 fab4 	bl	800c448 <USB_CoreReset>
 800aee0:	4603      	mov	r3, r0
 800aee2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d106      	bne.n	800aef8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38
 800aef6:	e005      	b.n	800af04 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aefc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800af04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af06:	2b01      	cmp	r3, #1
 800af08:	d10b      	bne.n	800af22 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	f043 0206 	orr.w	r2, r3, #6
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	689b      	ldr	r3, [r3, #8]
 800af1a:	f043 0220 	orr.w	r2, r3, #32
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af22:	7bfb      	ldrb	r3, [r7, #15]
}
 800af24:	4618      	mov	r0, r3
 800af26:	3710      	adds	r7, #16
 800af28:	46bd      	mov	sp, r7
 800af2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af2e:	b004      	add	sp, #16
 800af30:	4770      	bx	lr
	...

0800af34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800af34:	b480      	push	{r7}
 800af36:	b087      	sub	sp, #28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	4613      	mov	r3, r2
 800af40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800af42:	79fb      	ldrb	r3, [r7, #7]
 800af44:	2b02      	cmp	r3, #2
 800af46:	d165      	bne.n	800b014 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	4a41      	ldr	r2, [pc, #260]	; (800b050 <USB_SetTurnaroundTime+0x11c>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d906      	bls.n	800af5e <USB_SetTurnaroundTime+0x2a>
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	4a40      	ldr	r2, [pc, #256]	; (800b054 <USB_SetTurnaroundTime+0x120>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d802      	bhi.n	800af5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800af58:	230f      	movs	r3, #15
 800af5a:	617b      	str	r3, [r7, #20]
 800af5c:	e062      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	4a3c      	ldr	r2, [pc, #240]	; (800b054 <USB_SetTurnaroundTime+0x120>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d906      	bls.n	800af74 <USB_SetTurnaroundTime+0x40>
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	4a3b      	ldr	r2, [pc, #236]	; (800b058 <USB_SetTurnaroundTime+0x124>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d802      	bhi.n	800af74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800af6e:	230e      	movs	r3, #14
 800af70:	617b      	str	r3, [r7, #20]
 800af72:	e057      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4a38      	ldr	r2, [pc, #224]	; (800b058 <USB_SetTurnaroundTime+0x124>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d906      	bls.n	800af8a <USB_SetTurnaroundTime+0x56>
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	4a37      	ldr	r2, [pc, #220]	; (800b05c <USB_SetTurnaroundTime+0x128>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d802      	bhi.n	800af8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800af84:	230d      	movs	r3, #13
 800af86:	617b      	str	r3, [r7, #20]
 800af88:	e04c      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	4a33      	ldr	r2, [pc, #204]	; (800b05c <USB_SetTurnaroundTime+0x128>)
 800af8e:	4293      	cmp	r3, r2
 800af90:	d906      	bls.n	800afa0 <USB_SetTurnaroundTime+0x6c>
 800af92:	68bb      	ldr	r3, [r7, #8]
 800af94:	4a32      	ldr	r2, [pc, #200]	; (800b060 <USB_SetTurnaroundTime+0x12c>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d802      	bhi.n	800afa0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800af9a:	230c      	movs	r3, #12
 800af9c:	617b      	str	r3, [r7, #20]
 800af9e:	e041      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	4a2f      	ldr	r2, [pc, #188]	; (800b060 <USB_SetTurnaroundTime+0x12c>)
 800afa4:	4293      	cmp	r3, r2
 800afa6:	d906      	bls.n	800afb6 <USB_SetTurnaroundTime+0x82>
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	4a2e      	ldr	r2, [pc, #184]	; (800b064 <USB_SetTurnaroundTime+0x130>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d802      	bhi.n	800afb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800afb0:	230b      	movs	r3, #11
 800afb2:	617b      	str	r3, [r7, #20]
 800afb4:	e036      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	4a2a      	ldr	r2, [pc, #168]	; (800b064 <USB_SetTurnaroundTime+0x130>)
 800afba:	4293      	cmp	r3, r2
 800afbc:	d906      	bls.n	800afcc <USB_SetTurnaroundTime+0x98>
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	4a29      	ldr	r2, [pc, #164]	; (800b068 <USB_SetTurnaroundTime+0x134>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d802      	bhi.n	800afcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800afc6:	230a      	movs	r3, #10
 800afc8:	617b      	str	r3, [r7, #20]
 800afca:	e02b      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	4a26      	ldr	r2, [pc, #152]	; (800b068 <USB_SetTurnaroundTime+0x134>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d906      	bls.n	800afe2 <USB_SetTurnaroundTime+0xae>
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	4a25      	ldr	r2, [pc, #148]	; (800b06c <USB_SetTurnaroundTime+0x138>)
 800afd8:	4293      	cmp	r3, r2
 800afda:	d802      	bhi.n	800afe2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800afdc:	2309      	movs	r3, #9
 800afde:	617b      	str	r3, [r7, #20]
 800afe0:	e020      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	4a21      	ldr	r2, [pc, #132]	; (800b06c <USB_SetTurnaroundTime+0x138>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d906      	bls.n	800aff8 <USB_SetTurnaroundTime+0xc4>
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	4a20      	ldr	r2, [pc, #128]	; (800b070 <USB_SetTurnaroundTime+0x13c>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d802      	bhi.n	800aff8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aff2:	2308      	movs	r3, #8
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	e015      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	4a1d      	ldr	r2, [pc, #116]	; (800b070 <USB_SetTurnaroundTime+0x13c>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d906      	bls.n	800b00e <USB_SetTurnaroundTime+0xda>
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	4a1c      	ldr	r2, [pc, #112]	; (800b074 <USB_SetTurnaroundTime+0x140>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d802      	bhi.n	800b00e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b008:	2307      	movs	r3, #7
 800b00a:	617b      	str	r3, [r7, #20]
 800b00c:	e00a      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b00e:	2306      	movs	r3, #6
 800b010:	617b      	str	r3, [r7, #20]
 800b012:	e007      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d102      	bne.n	800b020 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b01a:	2309      	movs	r3, #9
 800b01c:	617b      	str	r3, [r7, #20]
 800b01e:	e001      	b.n	800b024 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b020:	2309      	movs	r3, #9
 800b022:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	68da      	ldr	r2, [r3, #12]
 800b034:	697b      	ldr	r3, [r7, #20]
 800b036:	029b      	lsls	r3, r3, #10
 800b038:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b03c:	431a      	orrs	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	371c      	adds	r7, #28
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	00d8acbf 	.word	0x00d8acbf
 800b054:	00e4e1bf 	.word	0x00e4e1bf
 800b058:	00f423ff 	.word	0x00f423ff
 800b05c:	0106737f 	.word	0x0106737f
 800b060:	011a499f 	.word	0x011a499f
 800b064:	01312cff 	.word	0x01312cff
 800b068:	014ca43f 	.word	0x014ca43f
 800b06c:	016e35ff 	.word	0x016e35ff
 800b070:	01a6ab1f 	.word	0x01a6ab1f
 800b074:	01e847ff 	.word	0x01e847ff

0800b078 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	f043 0201 	orr.w	r2, r3, #1
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr

0800b09a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b09a:	b480      	push	{r7}
 800b09c:	b083      	sub	sp, #12
 800b09e:	af00      	add	r7, sp, #0
 800b0a0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	f023 0201 	bic.w	r2, r3, #1
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	370c      	adds	r7, #12
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr

0800b0bc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b082      	sub	sp, #8
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0d4:	78fb      	ldrb	r3, [r7, #3]
 800b0d6:	2b01      	cmp	r3, #1
 800b0d8:	d106      	bne.n	800b0e8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]
 800b0e6:	e00b      	b.n	800b100 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b0e8:	78fb      	ldrb	r3, [r7, #3]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d106      	bne.n	800b0fc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	68db      	ldr	r3, [r3, #12]
 800b0f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	60da      	str	r2, [r3, #12]
 800b0fa:	e001      	b.n	800b100 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	e003      	b.n	800b108 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b100:	2032      	movs	r0, #50	; 0x32
 800b102:	f7fa f979 	bl	80053f8 <HAL_Delay>

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3708      	adds	r7, #8
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b110:	b084      	sub	sp, #16
 800b112:	b580      	push	{r7, lr}
 800b114:	b086      	sub	sp, #24
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b11e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b122:	2300      	movs	r3, #0
 800b124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b12a:	2300      	movs	r3, #0
 800b12c:	613b      	str	r3, [r7, #16]
 800b12e:	e009      	b.n	800b144 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b130:	687a      	ldr	r2, [r7, #4]
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	3340      	adds	r3, #64	; 0x40
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	2200      	movs	r2, #0
 800b13c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	3301      	adds	r3, #1
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	2b0e      	cmp	r3, #14
 800b148:	d9f2      	bls.n	800b130 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b14a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d11c      	bne.n	800b18a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b156:	685b      	ldr	r3, [r3, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b15e:	f043 0302 	orr.w	r3, r3, #2
 800b162:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b168:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	601a      	str	r2, [r3, #0]
 800b188:	e005      	b.n	800b196 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b18e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b19c:	461a      	mov	r2, r3
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1b0:	461a      	mov	r2, r3
 800b1b2:	680b      	ldr	r3, [r1, #0]
 800b1b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d10c      	bne.n	800b1d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d104      	bne.n	800b1cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b1c2:	2100      	movs	r1, #0
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 f949 	bl	800b45c <USB_SetDevSpeed>
 800b1ca:	e008      	b.n	800b1de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b1cc:	2101      	movs	r1, #1
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 f944 	bl	800b45c <USB_SetDevSpeed>
 800b1d4:	e003      	b.n	800b1de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b1d6:	2103      	movs	r1, #3
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 f93f 	bl	800b45c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b1de:	2110      	movs	r1, #16
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 f8f3 	bl	800b3cc <USB_FlushTxFifo>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b1ec:	2301      	movs	r3, #1
 800b1ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f000 f911 	bl	800b418 <USB_FlushRxFifo>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b206:	461a      	mov	r2, r3
 800b208:	2300      	movs	r3, #0
 800b20a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b212:	461a      	mov	r2, r3
 800b214:	2300      	movs	r3, #0
 800b216:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b21e:	461a      	mov	r2, r3
 800b220:	2300      	movs	r3, #0
 800b222:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b224:	2300      	movs	r3, #0
 800b226:	613b      	str	r3, [r7, #16]
 800b228:	e043      	b.n	800b2b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	015a      	lsls	r2, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	4413      	add	r3, r2
 800b232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b23c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b240:	d118      	bne.n	800b274 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d10a      	bne.n	800b25e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	015a      	lsls	r2, r3, #5
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	4413      	add	r3, r2
 800b250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b254:	461a      	mov	r2, r3
 800b256:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b25a:	6013      	str	r3, [r2, #0]
 800b25c:	e013      	b.n	800b286 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	015a      	lsls	r2, r3, #5
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	4413      	add	r3, r2
 800b266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26a:	461a      	mov	r2, r3
 800b26c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b270:	6013      	str	r3, [r2, #0]
 800b272:	e008      	b.n	800b286 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	015a      	lsls	r2, r3, #5
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b280:	461a      	mov	r2, r3
 800b282:	2300      	movs	r3, #0
 800b284:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	015a      	lsls	r2, r3, #5
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	4413      	add	r3, r2
 800b28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b292:	461a      	mov	r2, r3
 800b294:	2300      	movs	r3, #0
 800b296:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	015a      	lsls	r2, r3, #5
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	4413      	add	r3, r2
 800b2a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	3301      	adds	r3, #1
 800b2b0:	613b      	str	r3, [r7, #16]
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	693a      	ldr	r2, [r7, #16]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d3b7      	bcc.n	800b22a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	613b      	str	r3, [r7, #16]
 800b2be:	e043      	b.n	800b348 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2d6:	d118      	bne.n	800b30a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d10a      	bne.n	800b2f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	015a      	lsls	r2, r3, #5
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ea:	461a      	mov	r2, r3
 800b2ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	e013      	b.n	800b31c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b300:	461a      	mov	r2, r3
 800b302:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	e008      	b.n	800b31c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	015a      	lsls	r2, r3, #5
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	4413      	add	r3, r2
 800b312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b316:	461a      	mov	r2, r3
 800b318:	2300      	movs	r3, #0
 800b31a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b328:	461a      	mov	r2, r3
 800b32a:	2300      	movs	r3, #0
 800b32c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	015a      	lsls	r2, r3, #5
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	4413      	add	r3, r2
 800b336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b33a:	461a      	mov	r2, r3
 800b33c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b342:	693b      	ldr	r3, [r7, #16]
 800b344:	3301      	adds	r3, #1
 800b346:	613b      	str	r3, [r7, #16]
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	429a      	cmp	r2, r3
 800b34e:	d3b7      	bcc.n	800b2c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b356:	691b      	ldr	r3, [r3, #16]
 800b358:	68fa      	ldr	r2, [r7, #12]
 800b35a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b35e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b362:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b370:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b374:	2b00      	cmp	r3, #0
 800b376:	d105      	bne.n	800b384 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	699b      	ldr	r3, [r3, #24]
 800b37c:	f043 0210 	orr.w	r2, r3, #16
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	699a      	ldr	r2, [r3, #24]
 800b388:	4b0f      	ldr	r3, [pc, #60]	; (800b3c8 <USB_DevInit+0x2b8>)
 800b38a:	4313      	orrs	r3, r2
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b392:	2b00      	cmp	r3, #0
 800b394:	d005      	beq.n	800b3a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	f043 0208 	orr.w	r2, r3, #8
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b3a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d107      	bne.n	800b3b8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3b0:	f043 0304 	orr.w	r3, r3, #4
 800b3b4:	687a      	ldr	r2, [r7, #4]
 800b3b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	3718      	adds	r7, #24
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3c4:	b004      	add	sp, #16
 800b3c6:	4770      	bx	lr
 800b3c8:	803c3800 	.word	0x803c3800

0800b3cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b085      	sub	sp, #20
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	019b      	lsls	r3, r3, #6
 800b3de:	f043 0220 	orr.w	r2, r3, #32
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	60fb      	str	r3, [r7, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4a09      	ldr	r2, [pc, #36]	; (800b414 <USB_FlushTxFifo+0x48>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d901      	bls.n	800b3f8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b3f4:	2303      	movs	r3, #3
 800b3f6:	e006      	b.n	800b406 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	f003 0320 	and.w	r3, r3, #32
 800b400:	2b20      	cmp	r3, #32
 800b402:	d0f0      	beq.n	800b3e6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3714      	adds	r7, #20
 800b40a:	46bd      	mov	sp, r7
 800b40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b410:	4770      	bx	lr
 800b412:	bf00      	nop
 800b414:	00030d40 	.word	0x00030d40

0800b418 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b420:	2300      	movs	r3, #0
 800b422:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2210      	movs	r2, #16
 800b428:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	3301      	adds	r3, #1
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4a09      	ldr	r2, [pc, #36]	; (800b458 <USB_FlushRxFifo+0x40>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d901      	bls.n	800b43c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b438:	2303      	movs	r3, #3
 800b43a:	e006      	b.n	800b44a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	691b      	ldr	r3, [r3, #16]
 800b440:	f003 0310 	and.w	r3, r3, #16
 800b444:	2b10      	cmp	r3, #16
 800b446:	d0f0      	beq.n	800b42a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3714      	adds	r7, #20
 800b44e:	46bd      	mov	sp, r7
 800b450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b454:	4770      	bx	lr
 800b456:	bf00      	nop
 800b458:	00030d40 	.word	0x00030d40

0800b45c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	460b      	mov	r3, r1
 800b466:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	68f9      	ldr	r1, [r7, #12]
 800b478:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b47c:	4313      	orrs	r3, r2
 800b47e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3714      	adds	r7, #20
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b48e:	b480      	push	{r7}
 800b490:	b087      	sub	sp, #28
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b49a:	693b      	ldr	r3, [r7, #16]
 800b49c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4a0:	689b      	ldr	r3, [r3, #8]
 800b4a2:	f003 0306 	and.w	r3, r3, #6
 800b4a6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d102      	bne.n	800b4b4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	75fb      	strb	r3, [r7, #23]
 800b4b2:	e00a      	b.n	800b4ca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d002      	beq.n	800b4c0 <USB_GetDevSpeed+0x32>
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b06      	cmp	r3, #6
 800b4be:	d102      	bne.n	800b4c6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b4c0:	2302      	movs	r3, #2
 800b4c2:	75fb      	strb	r3, [r7, #23]
 800b4c4:	e001      	b.n	800b4ca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b4c6:	230f      	movs	r3, #15
 800b4c8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b4ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	371c      	adds	r7, #28
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	785b      	ldrb	r3, [r3, #1]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d13a      	bne.n	800b56a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4fa:	69da      	ldr	r2, [r3, #28]
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	f003 030f 	and.w	r3, r3, #15
 800b504:	2101      	movs	r1, #1
 800b506:	fa01 f303 	lsl.w	r3, r1, r3
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	68f9      	ldr	r1, [r7, #12]
 800b50e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b512:	4313      	orrs	r3, r2
 800b514:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	015a      	lsls	r2, r3, #5
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	4413      	add	r3, r2
 800b51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d155      	bne.n	800b5d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	015a      	lsls	r2, r3, #5
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	4413      	add	r3, r2
 800b534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	78db      	ldrb	r3, [r3, #3]
 800b546:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b548:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	059b      	lsls	r3, r3, #22
 800b54e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b550:	4313      	orrs	r3, r2
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b562:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	e036      	b.n	800b5d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b570:	69da      	ldr	r2, [r3, #28]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	f003 030f 	and.w	r3, r3, #15
 800b57a:	2101      	movs	r1, #1
 800b57c:	fa01 f303 	lsl.w	r3, r1, r3
 800b580:	041b      	lsls	r3, r3, #16
 800b582:	68f9      	ldr	r1, [r7, #12]
 800b584:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b588:	4313      	orrs	r3, r2
 800b58a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d11a      	bne.n	800b5d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	015a      	lsls	r2, r3, #5
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	689b      	ldr	r3, [r3, #8]
 800b5b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	78db      	ldrb	r3, [r3, #3]
 800b5bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b5be:	430b      	orrs	r3, r1
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	0151      	lsls	r1, r2, #5
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	440a      	add	r2, r1
 800b5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
	...

0800b5e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	785b      	ldrb	r3, [r3, #1]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d161      	bne.n	800b6c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b604:	68bb      	ldr	r3, [r7, #8]
 800b606:	015a      	lsls	r2, r3, #5
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	4413      	add	r3, r2
 800b60c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b616:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b61a:	d11f      	bne.n	800b65c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	015a      	lsls	r2, r3, #5
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4413      	add	r3, r2
 800b624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68ba      	ldr	r2, [r7, #8]
 800b62c:	0151      	lsls	r1, r2, #5
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	440a      	add	r2, r1
 800b632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b636:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b63a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	68ba      	ldr	r2, [r7, #8]
 800b64c:	0151      	lsls	r1, r2, #5
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	440a      	add	r2, r1
 800b652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b656:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b65a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b662:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	781b      	ldrb	r3, [r3, #0]
 800b668:	f003 030f 	and.w	r3, r3, #15
 800b66c:	2101      	movs	r1, #1
 800b66e:	fa01 f303 	lsl.w	r3, r1, r3
 800b672:	b29b      	uxth	r3, r3
 800b674:	43db      	mvns	r3, r3
 800b676:	68f9      	ldr	r1, [r7, #12]
 800b678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b67c:	4013      	ands	r3, r2
 800b67e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b686:	69da      	ldr	r2, [r3, #28]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	2101      	movs	r1, #1
 800b692:	fa01 f303 	lsl.w	r3, r1, r3
 800b696:	b29b      	uxth	r3, r3
 800b698:	43db      	mvns	r3, r3
 800b69a:	68f9      	ldr	r1, [r7, #12]
 800b69c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6a0:	4013      	ands	r3, r2
 800b6a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b6a4:	68bb      	ldr	r3, [r7, #8]
 800b6a6:	015a      	lsls	r2, r3, #5
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b0:	681a      	ldr	r2, [r3, #0]
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	0159      	lsls	r1, r3, #5
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	440b      	add	r3, r1
 800b6ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4b35      	ldr	r3, [pc, #212]	; (800b798 <USB_DeactivateEndpoint+0x1b0>)
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	600b      	str	r3, [r1, #0]
 800b6c6:	e060      	b.n	800b78a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6de:	d11f      	bne.n	800b720 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68ba      	ldr	r2, [r7, #8]
 800b6f0:	0151      	lsls	r1, r2, #5
 800b6f2:	68fa      	ldr	r2, [r7, #12]
 800b6f4:	440a      	add	r2, r1
 800b6f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b700:	68bb      	ldr	r3, [r7, #8]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	68ba      	ldr	r2, [r7, #8]
 800b710:	0151      	lsls	r1, r2, #5
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	440a      	add	r2, r1
 800b716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b71e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b728:	683b      	ldr	r3, [r7, #0]
 800b72a:	781b      	ldrb	r3, [r3, #0]
 800b72c:	f003 030f 	and.w	r3, r3, #15
 800b730:	2101      	movs	r1, #1
 800b732:	fa01 f303 	lsl.w	r3, r1, r3
 800b736:	041b      	lsls	r3, r3, #16
 800b738:	43db      	mvns	r3, r3
 800b73a:	68f9      	ldr	r1, [r7, #12]
 800b73c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b740:	4013      	ands	r3, r2
 800b742:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b74a:	69da      	ldr	r2, [r3, #28]
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	f003 030f 	and.w	r3, r3, #15
 800b754:	2101      	movs	r1, #1
 800b756:	fa01 f303 	lsl.w	r3, r1, r3
 800b75a:	041b      	lsls	r3, r3, #16
 800b75c:	43db      	mvns	r3, r3
 800b75e:	68f9      	ldr	r1, [r7, #12]
 800b760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b764:	4013      	ands	r3, r2
 800b766:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	015a      	lsls	r2, r3, #5
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	4413      	add	r3, r2
 800b770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	0159      	lsls	r1, r3, #5
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	440b      	add	r3, r1
 800b77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b782:	4619      	mov	r1, r3
 800b784:	4b05      	ldr	r3, [pc, #20]	; (800b79c <USB_DeactivateEndpoint+0x1b4>)
 800b786:	4013      	ands	r3, r2
 800b788:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b78a:	2300      	movs	r3, #0
}
 800b78c:	4618      	mov	r0, r3
 800b78e:	3714      	adds	r7, #20
 800b790:	46bd      	mov	sp, r7
 800b792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b796:	4770      	bx	lr
 800b798:	ec337800 	.word	0xec337800
 800b79c:	eff37800 	.word	0xeff37800

0800b7a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08a      	sub	sp, #40	; 0x28
 800b7a4:	af02      	add	r7, sp, #8
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	785b      	ldrb	r3, [r3, #1]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	f040 815c 	bne.w	800ba7a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	695b      	ldr	r3, [r3, #20]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d132      	bne.n	800b830 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	69fb      	ldr	r3, [r7, #28]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	69ba      	ldr	r2, [r7, #24]
 800b7da:	0151      	lsls	r1, r2, #5
 800b7dc:	69fa      	ldr	r2, [r7, #28]
 800b7de:	440a      	add	r2, r1
 800b7e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	015a      	lsls	r2, r3, #5
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7fa:	691b      	ldr	r3, [r3, #16]
 800b7fc:	69ba      	ldr	r2, [r7, #24]
 800b7fe:	0151      	lsls	r1, r2, #5
 800b800:	69fa      	ldr	r2, [r7, #28]
 800b802:	440a      	add	r2, r1
 800b804:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b80c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	015a      	lsls	r2, r3, #5
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	4413      	add	r3, r2
 800b816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	69ba      	ldr	r2, [r7, #24]
 800b81e:	0151      	lsls	r1, r2, #5
 800b820:	69fa      	ldr	r2, [r7, #28]
 800b822:	440a      	add	r2, r1
 800b824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b828:	0cdb      	lsrs	r3, r3, #19
 800b82a:	04db      	lsls	r3, r3, #19
 800b82c:	6113      	str	r3, [r2, #16]
 800b82e:	e074      	b.n	800b91a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	015a      	lsls	r2, r3, #5
 800b834:	69fb      	ldr	r3, [r7, #28]
 800b836:	4413      	add	r3, r2
 800b838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83c:	691b      	ldr	r3, [r3, #16]
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	0151      	lsls	r1, r2, #5
 800b842:	69fa      	ldr	r2, [r7, #28]
 800b844:	440a      	add	r2, r1
 800b846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b84a:	0cdb      	lsrs	r3, r3, #19
 800b84c:	04db      	lsls	r3, r3, #19
 800b84e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	015a      	lsls	r2, r3, #5
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	4413      	add	r3, r2
 800b858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	69ba      	ldr	r2, [r7, #24]
 800b860:	0151      	lsls	r1, r2, #5
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	440a      	add	r2, r1
 800b866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b86e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b872:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	015a      	lsls	r2, r3, #5
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	4413      	add	r3, r2
 800b87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b880:	691a      	ldr	r2, [r3, #16]
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	6959      	ldr	r1, [r3, #20]
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	440b      	add	r3, r1
 800b88c:	1e59      	subs	r1, r3, #1
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	fbb1 f3f3 	udiv	r3, r1, r3
 800b896:	04d9      	lsls	r1, r3, #19
 800b898:	4b9d      	ldr	r3, [pc, #628]	; (800bb10 <USB_EPStartXfer+0x370>)
 800b89a:	400b      	ands	r3, r1
 800b89c:	69b9      	ldr	r1, [r7, #24]
 800b89e:	0148      	lsls	r0, r1, #5
 800b8a0:	69f9      	ldr	r1, [r7, #28]
 800b8a2:	4401      	add	r1, r0
 800b8a4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b8ac:	69bb      	ldr	r3, [r7, #24]
 800b8ae:	015a      	lsls	r2, r3, #5
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	4413      	add	r3, r2
 800b8b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b8:	691a      	ldr	r2, [r3, #16]
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8c2:	69b9      	ldr	r1, [r7, #24]
 800b8c4:	0148      	lsls	r0, r1, #5
 800b8c6:	69f9      	ldr	r1, [r7, #28]
 800b8c8:	4401      	add	r1, r0
 800b8ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	78db      	ldrb	r3, [r3, #3]
 800b8d6:	2b01      	cmp	r3, #1
 800b8d8:	d11f      	bne.n	800b91a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	015a      	lsls	r2, r3, #5
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	69ba      	ldr	r2, [r7, #24]
 800b8ea:	0151      	lsls	r1, r2, #5
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	440a      	add	r2, r1
 800b8f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8f4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b8f8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	015a      	lsls	r2, r3, #5
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	4413      	add	r3, r2
 800b902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b906:	691b      	ldr	r3, [r3, #16]
 800b908:	69ba      	ldr	r2, [r7, #24]
 800b90a:	0151      	lsls	r1, r2, #5
 800b90c:	69fa      	ldr	r2, [r7, #28]
 800b90e:	440a      	add	r2, r1
 800b910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b914:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b918:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b91a:	79fb      	ldrb	r3, [r7, #7]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d14b      	bne.n	800b9b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d009      	beq.n	800b93c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	015a      	lsls	r2, r3, #5
 800b92c:	69fb      	ldr	r3, [r7, #28]
 800b92e:	4413      	add	r3, r2
 800b930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b934:	461a      	mov	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	691b      	ldr	r3, [r3, #16]
 800b93a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	78db      	ldrb	r3, [r3, #3]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d128      	bne.n	800b996 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b950:	2b00      	cmp	r3, #0
 800b952:	d110      	bne.n	800b976 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b954:	69bb      	ldr	r3, [r7, #24]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	69ba      	ldr	r2, [r7, #24]
 800b964:	0151      	lsls	r1, r2, #5
 800b966:	69fa      	ldr	r2, [r7, #28]
 800b968:	440a      	add	r2, r1
 800b96a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b96e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	e00f      	b.n	800b996 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b976:	69bb      	ldr	r3, [r7, #24]
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	69ba      	ldr	r2, [r7, #24]
 800b986:	0151      	lsls	r1, r2, #5
 800b988:	69fa      	ldr	r2, [r7, #28]
 800b98a:	440a      	add	r2, r1
 800b98c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b994:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b996:	69bb      	ldr	r3, [r7, #24]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	69ba      	ldr	r2, [r7, #24]
 800b9a6:	0151      	lsls	r1, r2, #5
 800b9a8:	69fa      	ldr	r2, [r7, #28]
 800b9aa:	440a      	add	r2, r1
 800b9ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	e12f      	b.n	800bc18 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9b8:	69bb      	ldr	r3, [r7, #24]
 800b9ba:	015a      	lsls	r2, r3, #5
 800b9bc:	69fb      	ldr	r3, [r7, #28]
 800b9be:	4413      	add	r3, r2
 800b9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	0151      	lsls	r1, r2, #5
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	440a      	add	r2, r1
 800b9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	78db      	ldrb	r3, [r3, #3]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d015      	beq.n	800ba0c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f000 8117 	beq.w	800bc18 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9ea:	69fb      	ldr	r3, [r7, #28]
 800b9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	f003 030f 	and.w	r3, r3, #15
 800b9fa:	2101      	movs	r1, #1
 800b9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800ba00:	69f9      	ldr	r1, [r7, #28]
 800ba02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba06:	4313      	orrs	r3, r2
 800ba08:	634b      	str	r3, [r1, #52]	; 0x34
 800ba0a:	e105      	b.n	800bc18 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba12:	689b      	ldr	r3, [r3, #8]
 800ba14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d110      	bne.n	800ba3e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	015a      	lsls	r2, r3, #5
 800ba20:	69fb      	ldr	r3, [r7, #28]
 800ba22:	4413      	add	r3, r2
 800ba24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	69ba      	ldr	r2, [r7, #24]
 800ba2c:	0151      	lsls	r1, r2, #5
 800ba2e:	69fa      	ldr	r2, [r7, #28]
 800ba30:	440a      	add	r2, r1
 800ba32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ba3a:	6013      	str	r3, [r2, #0]
 800ba3c:	e00f      	b.n	800ba5e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	69ba      	ldr	r2, [r7, #24]
 800ba4e:	0151      	lsls	r1, r2, #5
 800ba50:	69fa      	ldr	r2, [r7, #28]
 800ba52:	440a      	add	r2, r1
 800ba54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba5c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	68d9      	ldr	r1, [r3, #12]
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	781a      	ldrb	r2, [r3, #0]
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	695b      	ldr	r3, [r3, #20]
 800ba6a:	b298      	uxth	r0, r3
 800ba6c:	79fb      	ldrb	r3, [r7, #7]
 800ba6e:	9300      	str	r3, [sp, #0]
 800ba70:	4603      	mov	r3, r0
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f000 fa2b 	bl	800bece <USB_WritePacket>
 800ba78:	e0ce      	b.n	800bc18 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	69fb      	ldr	r3, [r7, #28]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	69ba      	ldr	r2, [r7, #24]
 800ba8a:	0151      	lsls	r1, r2, #5
 800ba8c:	69fa      	ldr	r2, [r7, #28]
 800ba8e:	440a      	add	r2, r1
 800ba90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba94:	0cdb      	lsrs	r3, r3, #19
 800ba96:	04db      	lsls	r3, r3, #19
 800ba98:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	015a      	lsls	r2, r3, #5
 800ba9e:	69fb      	ldr	r3, [r7, #28]
 800baa0:	4413      	add	r3, r2
 800baa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	69ba      	ldr	r2, [r7, #24]
 800baaa:	0151      	lsls	r1, r2, #5
 800baac:	69fa      	ldr	r2, [r7, #28]
 800baae:	440a      	add	r2, r1
 800bab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bab4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bab8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800babc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	695b      	ldr	r3, [r3, #20]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d126      	bne.n	800bb14 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bac6:	69bb      	ldr	r3, [r7, #24]
 800bac8:	015a      	lsls	r2, r3, #5
 800baca:	69fb      	ldr	r3, [r7, #28]
 800bacc:	4413      	add	r3, r2
 800bace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad2:	691a      	ldr	r2, [r3, #16]
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800badc:	69b9      	ldr	r1, [r7, #24]
 800bade:	0148      	lsls	r0, r1, #5
 800bae0:	69f9      	ldr	r1, [r7, #28]
 800bae2:	4401      	add	r1, r0
 800bae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bae8:	4313      	orrs	r3, r2
 800baea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	015a      	lsls	r2, r3, #5
 800baf0:	69fb      	ldr	r3, [r7, #28]
 800baf2:	4413      	add	r3, r2
 800baf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	69ba      	ldr	r2, [r7, #24]
 800bafc:	0151      	lsls	r1, r2, #5
 800bafe:	69fa      	ldr	r2, [r7, #28]
 800bb00:	440a      	add	r2, r1
 800bb02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bb0a:	6113      	str	r3, [r2, #16]
 800bb0c:	e036      	b.n	800bb7c <USB_EPStartXfer+0x3dc>
 800bb0e:	bf00      	nop
 800bb10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bb14:	68bb      	ldr	r3, [r7, #8]
 800bb16:	695a      	ldr	r2, [r3, #20]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	689b      	ldr	r3, [r3, #8]
 800bb1c:	4413      	add	r3, r2
 800bb1e:	1e5a      	subs	r2, r3, #1
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	689b      	ldr	r3, [r3, #8]
 800bb24:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	015a      	lsls	r2, r3, #5
 800bb2e:	69fb      	ldr	r3, [r7, #28]
 800bb30:	4413      	add	r3, r2
 800bb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb36:	691a      	ldr	r2, [r3, #16]
 800bb38:	8afb      	ldrh	r3, [r7, #22]
 800bb3a:	04d9      	lsls	r1, r3, #19
 800bb3c:	4b39      	ldr	r3, [pc, #228]	; (800bc24 <USB_EPStartXfer+0x484>)
 800bb3e:	400b      	ands	r3, r1
 800bb40:	69b9      	ldr	r1, [r7, #24]
 800bb42:	0148      	lsls	r0, r1, #5
 800bb44:	69f9      	ldr	r1, [r7, #28]
 800bb46:	4401      	add	r1, r0
 800bb48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb4c:	4313      	orrs	r3, r2
 800bb4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb5c:	691a      	ldr	r2, [r3, #16]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	689b      	ldr	r3, [r3, #8]
 800bb62:	8af9      	ldrh	r1, [r7, #22]
 800bb64:	fb01 f303 	mul.w	r3, r1, r3
 800bb68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bb6c:	69b9      	ldr	r1, [r7, #24]
 800bb6e:	0148      	lsls	r0, r1, #5
 800bb70:	69f9      	ldr	r1, [r7, #28]
 800bb72:	4401      	add	r1, r0
 800bb74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bb7c:	79fb      	ldrb	r3, [r7, #7]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d10d      	bne.n	800bb9e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d009      	beq.n	800bb9e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	68d9      	ldr	r1, [r3, #12]
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	015a      	lsls	r2, r3, #5
 800bb92:	69fb      	ldr	r3, [r7, #28]
 800bb94:	4413      	add	r3, r2
 800bb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb9a:	460a      	mov	r2, r1
 800bb9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	78db      	ldrb	r3, [r3, #3]
 800bba2:	2b01      	cmp	r3, #1
 800bba4:	d128      	bne.n	800bbf8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbac:	689b      	ldr	r3, [r3, #8]
 800bbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d110      	bne.n	800bbd8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bbb6:	69bb      	ldr	r3, [r7, #24]
 800bbb8:	015a      	lsls	r2, r3, #5
 800bbba:	69fb      	ldr	r3, [r7, #28]
 800bbbc:	4413      	add	r3, r2
 800bbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	0151      	lsls	r1, r2, #5
 800bbc8:	69fa      	ldr	r2, [r7, #28]
 800bbca:	440a      	add	r2, r1
 800bbcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	e00f      	b.n	800bbf8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	015a      	lsls	r2, r3, #5
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	4413      	add	r3, r2
 800bbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	69ba      	ldr	r2, [r7, #24]
 800bbe8:	0151      	lsls	r1, r2, #5
 800bbea:	69fa      	ldr	r2, [r7, #28]
 800bbec:	440a      	add	r2, r1
 800bbee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bbf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bbf8:	69bb      	ldr	r3, [r7, #24]
 800bbfa:	015a      	lsls	r2, r3, #5
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	4413      	add	r3, r2
 800bc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	69ba      	ldr	r2, [r7, #24]
 800bc08:	0151      	lsls	r1, r2, #5
 800bc0a:	69fa      	ldr	r2, [r7, #28]
 800bc0c:	440a      	add	r2, r1
 800bc0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bc16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	3720      	adds	r7, #32
 800bc1e:	46bd      	mov	sp, r7
 800bc20:	bd80      	pop	{r7, pc}
 800bc22:	bf00      	nop
 800bc24:	1ff80000 	.word	0x1ff80000

0800bc28 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b087      	sub	sp, #28
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	4613      	mov	r3, r2
 800bc34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	785b      	ldrb	r3, [r3, #1]
 800bc44:	2b01      	cmp	r3, #1
 800bc46:	f040 80cd 	bne.w	800bde4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	695b      	ldr	r3, [r3, #20]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d132      	bne.n	800bcb8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	015a      	lsls	r2, r3, #5
 800bc56:	697b      	ldr	r3, [r7, #20]
 800bc58:	4413      	add	r3, r2
 800bc5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5e:	691b      	ldr	r3, [r3, #16]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	0151      	lsls	r1, r2, #5
 800bc64:	697a      	ldr	r2, [r7, #20]
 800bc66:	440a      	add	r2, r1
 800bc68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bc70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bc74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	015a      	lsls	r2, r3, #5
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	4413      	add	r3, r2
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	693a      	ldr	r2, [r7, #16]
 800bc86:	0151      	lsls	r1, r2, #5
 800bc88:	697a      	ldr	r2, [r7, #20]
 800bc8a:	440a      	add	r2, r1
 800bc8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	015a      	lsls	r2, r3, #5
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bca2:	691b      	ldr	r3, [r3, #16]
 800bca4:	693a      	ldr	r2, [r7, #16]
 800bca6:	0151      	lsls	r1, r2, #5
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	440a      	add	r2, r1
 800bcac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcb0:	0cdb      	lsrs	r3, r3, #19
 800bcb2:	04db      	lsls	r3, r3, #19
 800bcb4:	6113      	str	r3, [r2, #16]
 800bcb6:	e04e      	b.n	800bd56 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bcb8:	693b      	ldr	r3, [r7, #16]
 800bcba:	015a      	lsls	r2, r3, #5
 800bcbc:	697b      	ldr	r3, [r7, #20]
 800bcbe:	4413      	add	r3, r2
 800bcc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcc4:	691b      	ldr	r3, [r3, #16]
 800bcc6:	693a      	ldr	r2, [r7, #16]
 800bcc8:	0151      	lsls	r1, r2, #5
 800bcca:	697a      	ldr	r2, [r7, #20]
 800bccc:	440a      	add	r2, r1
 800bcce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcd2:	0cdb      	lsrs	r3, r3, #19
 800bcd4:	04db      	lsls	r3, r3, #19
 800bcd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	015a      	lsls	r2, r3, #5
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	4413      	add	r3, r2
 800bce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bce4:	691b      	ldr	r3, [r3, #16]
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	0151      	lsls	r1, r2, #5
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	440a      	add	r2, r1
 800bcee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bcf2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcf6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcfa:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	695a      	ldr	r2, [r3, #20]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d903      	bls.n	800bd10 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	689a      	ldr	r2, [r3, #8]
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	693a      	ldr	r2, [r7, #16]
 800bd20:	0151      	lsls	r1, r2, #5
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	440a      	add	r2, r1
 800bd26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3c:	691a      	ldr	r2, [r3, #16]
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd46:	6939      	ldr	r1, [r7, #16]
 800bd48:	0148      	lsls	r0, r1, #5
 800bd4a:	6979      	ldr	r1, [r7, #20]
 800bd4c:	4401      	add	r1, r0
 800bd4e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bd52:	4313      	orrs	r3, r2
 800bd54:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800bd56:	79fb      	ldrb	r3, [r7, #7]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d11e      	bne.n	800bd9a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d009      	beq.n	800bd78 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	015a      	lsls	r2, r3, #5
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd70:	461a      	mov	r2, r3
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	691b      	ldr	r3, [r3, #16]
 800bd76:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd78:	693b      	ldr	r3, [r7, #16]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	693a      	ldr	r2, [r7, #16]
 800bd88:	0151      	lsls	r1, r2, #5
 800bd8a:	697a      	ldr	r2, [r7, #20]
 800bd8c:	440a      	add	r2, r1
 800bd8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	e092      	b.n	800bec0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	015a      	lsls	r2, r3, #5
 800bd9e:	697b      	ldr	r3, [r7, #20]
 800bda0:	4413      	add	r3, r2
 800bda2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	693a      	ldr	r2, [r7, #16]
 800bdaa:	0151      	lsls	r1, r2, #5
 800bdac:	697a      	ldr	r2, [r7, #20]
 800bdae:	440a      	add	r2, r1
 800bdb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bdb8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	695b      	ldr	r3, [r3, #20]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d07e      	beq.n	800bec0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	f003 030f 	and.w	r3, r3, #15
 800bdd2:	2101      	movs	r1, #1
 800bdd4:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd8:	6979      	ldr	r1, [r7, #20]
 800bdda:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bdde:	4313      	orrs	r3, r2
 800bde0:	634b      	str	r3, [r1, #52]	; 0x34
 800bde2:	e06d      	b.n	800bec0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bde4:	693b      	ldr	r3, [r7, #16]
 800bde6:	015a      	lsls	r2, r3, #5
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	4413      	add	r3, r2
 800bdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	0151      	lsls	r1, r2, #5
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	440a      	add	r2, r1
 800bdfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdfe:	0cdb      	lsrs	r3, r3, #19
 800be00:	04db      	lsls	r3, r3, #19
 800be02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	015a      	lsls	r2, r3, #5
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	4413      	add	r3, r2
 800be0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be10:	691b      	ldr	r3, [r3, #16]
 800be12:	693a      	ldr	r2, [r7, #16]
 800be14:	0151      	lsls	r1, r2, #5
 800be16:	697a      	ldr	r2, [r7, #20]
 800be18:	440a      	add	r2, r1
 800be1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be1e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800be22:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800be26:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	695b      	ldr	r3, [r3, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d003      	beq.n	800be38 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	689a      	ldr	r2, [r3, #8]
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	015a      	lsls	r2, r3, #5
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	4413      	add	r3, r2
 800be40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	693a      	ldr	r2, [r7, #16]
 800be48:	0151      	lsls	r1, r2, #5
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	440a      	add	r2, r1
 800be4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be56:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800be58:	693b      	ldr	r3, [r7, #16]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be6e:	6939      	ldr	r1, [r7, #16]
 800be70:	0148      	lsls	r0, r1, #5
 800be72:	6979      	ldr	r1, [r7, #20]
 800be74:	4401      	add	r1, r0
 800be76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800be7a:	4313      	orrs	r3, r2
 800be7c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d10d      	bne.n	800bea0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d009      	beq.n	800bea0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	68d9      	ldr	r1, [r3, #12]
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	015a      	lsls	r2, r3, #5
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	4413      	add	r3, r2
 800be98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be9c:	460a      	mov	r2, r1
 800be9e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	015a      	lsls	r2, r3, #5
 800bea4:	697b      	ldr	r3, [r7, #20]
 800bea6:	4413      	add	r3, r2
 800bea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	693a      	ldr	r2, [r7, #16]
 800beb0:	0151      	lsls	r1, r2, #5
 800beb2:	697a      	ldr	r2, [r7, #20]
 800beb4:	440a      	add	r2, r1
 800beb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800beba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bebe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bec0:	2300      	movs	r3, #0
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr

0800bece <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bece:	b480      	push	{r7}
 800bed0:	b089      	sub	sp, #36	; 0x24
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	4611      	mov	r1, r2
 800beda:	461a      	mov	r2, r3
 800bedc:	460b      	mov	r3, r1
 800bede:	71fb      	strb	r3, [r7, #7]
 800bee0:	4613      	mov	r3, r2
 800bee2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800beec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d11a      	bne.n	800bf2a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bef4:	88bb      	ldrh	r3, [r7, #4]
 800bef6:	3303      	adds	r3, #3
 800bef8:	089b      	lsrs	r3, r3, #2
 800befa:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800befc:	2300      	movs	r3, #0
 800befe:	61bb      	str	r3, [r7, #24]
 800bf00:	e00f      	b.n	800bf22 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf02:	79fb      	ldrb	r3, [r7, #7]
 800bf04:	031a      	lsls	r2, r3, #12
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf0e:	461a      	mov	r2, r3
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf16:	69fb      	ldr	r3, [r7, #28]
 800bf18:	3304      	adds	r3, #4
 800bf1a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	3301      	adds	r3, #1
 800bf20:	61bb      	str	r3, [r7, #24]
 800bf22:	69ba      	ldr	r2, [r7, #24]
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d3eb      	bcc.n	800bf02 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	3724      	adds	r7, #36	; 0x24
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b089      	sub	sp, #36	; 0x24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	4613      	mov	r3, r2
 800bf44:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800bf4e:	88fb      	ldrh	r3, [r7, #6]
 800bf50:	3303      	adds	r3, #3
 800bf52:	089b      	lsrs	r3, r3, #2
 800bf54:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800bf56:	2300      	movs	r3, #0
 800bf58:	61bb      	str	r3, [r7, #24]
 800bf5a:	e00b      	b.n	800bf74 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	601a      	str	r2, [r3, #0]
    pDest++;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bf6e:	69bb      	ldr	r3, [r7, #24]
 800bf70:	3301      	adds	r3, #1
 800bf72:	61bb      	str	r3, [r7, #24]
 800bf74:	69ba      	ldr	r2, [r7, #24]
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	429a      	cmp	r2, r3
 800bf7a:	d3ef      	bcc.n	800bf5c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800bf7c:	69fb      	ldr	r3, [r7, #28]
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3724      	adds	r7, #36	; 0x24
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf8a:	b480      	push	{r7}
 800bf8c:	b085      	sub	sp, #20
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	781b      	ldrb	r3, [r3, #0]
 800bf9c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	785b      	ldrb	r3, [r3, #1]
 800bfa2:	2b01      	cmp	r3, #1
 800bfa4:	d12c      	bne.n	800c000 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	db12      	blt.n	800bfde <USB_EPSetStall+0x54>
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d00f      	beq.n	800bfde <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	015a      	lsls	r2, r3, #5
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	0151      	lsls	r1, r2, #5
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	440a      	add	r2, r1
 800bfd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfd8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfdc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	015a      	lsls	r2, r3, #5
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	0151      	lsls	r1, r2, #5
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	440a      	add	r2, r1
 800bff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bffc:	6013      	str	r3, [r2, #0]
 800bffe:	e02b      	b.n	800c058 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c000:	68bb      	ldr	r3, [r7, #8]
 800c002:	015a      	lsls	r2, r3, #5
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	4413      	add	r3, r2
 800c008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	db12      	blt.n	800c038 <USB_EPSetStall+0xae>
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d00f      	beq.n	800c038 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	015a      	lsls	r2, r3, #5
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4413      	add	r3, r2
 800c020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68ba      	ldr	r2, [r7, #8]
 800c028:	0151      	lsls	r1, r2, #5
 800c02a:	68fa      	ldr	r2, [r7, #12]
 800c02c:	440a      	add	r2, r1
 800c02e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c032:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c036:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68ba      	ldr	r2, [r7, #8]
 800c048:	0151      	lsls	r1, r2, #5
 800c04a:	68fa      	ldr	r2, [r7, #12]
 800c04c:	440a      	add	r2, r1
 800c04e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c052:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c058:	2300      	movs	r3, #0
}
 800c05a:	4618      	mov	r0, r3
 800c05c:	3714      	adds	r7, #20
 800c05e:	46bd      	mov	sp, r7
 800c060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c064:	4770      	bx	lr

0800c066 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c066:	b480      	push	{r7}
 800c068:	b085      	sub	sp, #20
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
 800c06e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	785b      	ldrb	r3, [r3, #1]
 800c07e:	2b01      	cmp	r3, #1
 800c080:	d128      	bne.n	800c0d4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	015a      	lsls	r2, r3, #5
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	4413      	add	r3, r2
 800c08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	68ba      	ldr	r2, [r7, #8]
 800c092:	0151      	lsls	r1, r2, #5
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	440a      	add	r2, r1
 800c098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c09c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0a0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	78db      	ldrb	r3, [r3, #3]
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d003      	beq.n	800c0b2 <USB_EPClearStall+0x4c>
 800c0aa:	683b      	ldr	r3, [r7, #0]
 800c0ac:	78db      	ldrb	r3, [r3, #3]
 800c0ae:	2b02      	cmp	r3, #2
 800c0b0:	d138      	bne.n	800c124 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	015a      	lsls	r2, r3, #5
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	4413      	add	r3, r2
 800c0ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	68ba      	ldr	r2, [r7, #8]
 800c0c2:	0151      	lsls	r1, r2, #5
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	440a      	add	r2, r1
 800c0c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0d0:	6013      	str	r3, [r2, #0]
 800c0d2:	e027      	b.n	800c124 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	015a      	lsls	r2, r3, #5
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	4413      	add	r3, r2
 800c0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	0151      	lsls	r1, r2, #5
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	440a      	add	r2, r1
 800c0ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c0f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	78db      	ldrb	r3, [r3, #3]
 800c0f8:	2b03      	cmp	r3, #3
 800c0fa:	d003      	beq.n	800c104 <USB_EPClearStall+0x9e>
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	78db      	ldrb	r3, [r3, #3]
 800c100:	2b02      	cmp	r3, #2
 800c102:	d10f      	bne.n	800c124 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c104:	68bb      	ldr	r3, [r7, #8]
 800c106:	015a      	lsls	r2, r3, #5
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	4413      	add	r3, r2
 800c10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68ba      	ldr	r2, [r7, #8]
 800c114:	0151      	lsls	r1, r2, #5
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	440a      	add	r2, r1
 800c11a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c11e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c122:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr

0800c132 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c132:	b480      	push	{r7}
 800c134:	b085      	sub	sp, #20
 800c136:	af00      	add	r7, sp, #0
 800c138:	6078      	str	r0, [r7, #4]
 800c13a:	460b      	mov	r3, r1
 800c13c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c150:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c154:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	78fb      	ldrb	r3, [r7, #3]
 800c160:	011b      	lsls	r3, r3, #4
 800c162:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c166:	68f9      	ldr	r1, [r7, #12]
 800c168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c16c:	4313      	orrs	r3, r2
 800c16e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c170:	2300      	movs	r3, #0
}
 800c172:	4618      	mov	r0, r3
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c17e:	b480      	push	{r7}
 800c180:	b085      	sub	sp, #20
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c198:	f023 0303 	bic.w	r3, r3, #3
 800c19c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ac:	f023 0302 	bic.w	r3, r3, #2
 800c1b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b085      	sub	sp, #20
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1da:	f023 0303 	bic.w	r3, r3, #3
 800c1de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1e6:	685b      	ldr	r3, [r3, #4]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c1ee:	f043 0302 	orr.w	r3, r3, #2
 800c1f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c1f4:	2300      	movs	r3, #0
}
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	3714      	adds	r7, #20
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c202:	b480      	push	{r7}
 800c204:	b085      	sub	sp, #20
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	699b      	ldr	r3, [r3, #24]
 800c214:	68fa      	ldr	r2, [r7, #12]
 800c216:	4013      	ands	r3, r2
 800c218:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c21a:	68fb      	ldr	r3, [r7, #12]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3714      	adds	r7, #20
 800c220:	46bd      	mov	sp, r7
 800c222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c226:	4770      	bx	lr

0800c228 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c23a:	699b      	ldr	r3, [r3, #24]
 800c23c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c244:	69db      	ldr	r3, [r3, #28]
 800c246:	68ba      	ldr	r2, [r7, #8]
 800c248:	4013      	ands	r3, r2
 800c24a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	0c1b      	lsrs	r3, r3, #16
}
 800c250:	4618      	mov	r0, r3
 800c252:	3714      	adds	r7, #20
 800c254:	46bd      	mov	sp, r7
 800c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25a:	4770      	bx	lr

0800c25c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	68ba      	ldr	r2, [r7, #8]
 800c27c:	4013      	ands	r3, r2
 800c27e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	b29b      	uxth	r3, r3
}
 800c284:	4618      	mov	r0, r3
 800c286:	3714      	adds	r7, #20
 800c288:	46bd      	mov	sp, r7
 800c28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28e:	4770      	bx	lr

0800c290 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c290:	b480      	push	{r7}
 800c292:	b085      	sub	sp, #20
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	015a      	lsls	r2, r3, #5
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	4413      	add	r3, r2
 800c2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ac:	689b      	ldr	r3, [r3, #8]
 800c2ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2b6:	695b      	ldr	r3, [r3, #20]
 800c2b8:	68ba      	ldr	r2, [r7, #8]
 800c2ba:	4013      	ands	r3, r2
 800c2bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c2be:	68bb      	ldr	r3, [r7, #8]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	b087      	sub	sp, #28
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2ee:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c2f0:	78fb      	ldrb	r3, [r7, #3]
 800c2f2:	f003 030f 	and.w	r3, r3, #15
 800c2f6:	68fa      	ldr	r2, [r7, #12]
 800c2f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c2fc:	01db      	lsls	r3, r3, #7
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	693a      	ldr	r2, [r7, #16]
 800c302:	4313      	orrs	r3, r2
 800c304:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c306:	78fb      	ldrb	r3, [r7, #3]
 800c308:	015a      	lsls	r2, r3, #5
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	4413      	add	r3, r2
 800c30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c312:	689b      	ldr	r3, [r3, #8]
 800c314:	693a      	ldr	r2, [r7, #16]
 800c316:	4013      	ands	r3, r2
 800c318:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c31a:	68bb      	ldr	r3, [r7, #8]
}
 800c31c:	4618      	mov	r0, r3
 800c31e:	371c      	adds	r7, #28
 800c320:	46bd      	mov	sp, r7
 800c322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c326:	4770      	bx	lr

0800c328 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	695b      	ldr	r3, [r3, #20]
 800c334:	f003 0301 	and.w	r3, r3, #1
}
 800c338:	4618      	mov	r0, r3
 800c33a:	370c      	adds	r7, #12
 800c33c:	46bd      	mov	sp, r7
 800c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c342:	4770      	bx	lr

0800c344 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c344:	b480      	push	{r7}
 800c346:	b085      	sub	sp, #20
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	68fa      	ldr	r2, [r7, #12]
 800c35a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c35e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c362:	f023 0307 	bic.w	r3, r3, #7
 800c366:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c37a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3714      	adds	r7, #20
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr
	...

0800c38c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c38c:	b480      	push	{r7}
 800c38e:	b087      	sub	sp, #28
 800c390:	af00      	add	r7, sp, #0
 800c392:	60f8      	str	r0, [r7, #12]
 800c394:	460b      	mov	r3, r1
 800c396:	607a      	str	r2, [r7, #4]
 800c398:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	333c      	adds	r3, #60	; 0x3c
 800c3a2:	3304      	adds	r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	4a26      	ldr	r2, [pc, #152]	; (800c444 <USB_EP0_OutStart+0xb8>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d90a      	bls.n	800c3c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3c0:	d101      	bne.n	800c3c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	e037      	b.n	800c436 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c3c6:	697b      	ldr	r3, [r7, #20]
 800c3c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3ec:	691b      	ldr	r3, [r3, #16]
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3f4:	f043 0318 	orr.w	r3, r3, #24
 800c3f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c400:	691b      	ldr	r3, [r3, #16]
 800c402:	697a      	ldr	r2, [r7, #20]
 800c404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c408:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c40c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c40e:	7afb      	ldrb	r3, [r7, #11]
 800c410:	2b01      	cmp	r3, #1
 800c412:	d10f      	bne.n	800c434 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c414:	697b      	ldr	r3, [r7, #20]
 800c416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c41a:	461a      	mov	r2, r3
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c420:	697b      	ldr	r3, [r7, #20]
 800c422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	697a      	ldr	r2, [r7, #20]
 800c42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c42e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	4f54300a 	.word	0x4f54300a

0800c448 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c448:	b480      	push	{r7}
 800c44a:	b085      	sub	sp, #20
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c450:	2300      	movs	r3, #0
 800c452:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	3301      	adds	r3, #1
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	4a13      	ldr	r2, [pc, #76]	; (800c4ac <USB_CoreReset+0x64>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d901      	bls.n	800c466 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c462:	2303      	movs	r3, #3
 800c464:	e01b      	b.n	800c49e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	691b      	ldr	r3, [r3, #16]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	daf2      	bge.n	800c454 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	691b      	ldr	r3, [r3, #16]
 800c476:	f043 0201 	orr.w	r2, r3, #1
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	3301      	adds	r3, #1
 800c482:	60fb      	str	r3, [r7, #12]
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	4a09      	ldr	r2, [pc, #36]	; (800c4ac <USB_CoreReset+0x64>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d901      	bls.n	800c490 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c48c:	2303      	movs	r3, #3
 800c48e:	e006      	b.n	800c49e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d0f0      	beq.n	800c47e <USB_CoreReset+0x36>

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3714      	adds	r7, #20
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop
 800c4ac:	00030d40 	.word	0x00030d40

0800c4b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c4b4:	4904      	ldr	r1, [pc, #16]	; (800c4c8 <MX_FATFS_Init+0x18>)
 800c4b6:	4805      	ldr	r0, [pc, #20]	; (800c4cc <MX_FATFS_Init+0x1c>)
 800c4b8:	f002 f9c0 	bl	800e83c <FATFS_LinkDriver>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	461a      	mov	r2, r3
 800c4c0:	4b03      	ldr	r3, [pc, #12]	; (800c4d0 <MX_FATFS_Init+0x20>)
 800c4c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c4c4:	bf00      	nop
 800c4c6:	bd80      	pop	{r7, pc}
 800c4c8:	2000485c 	.word	0x2000485c
 800c4cc:	20000288 	.word	0x20000288
 800c4d0:	20004860 	.word	0x20004860

0800c4d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	4603      	mov	r3, r0
 800c4dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800c4de:	79fb      	ldrb	r3, [r7, #7]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 f9d7 	bl	800c894 <USER_SPI_initialize>
 800c4e6:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3708      	adds	r7, #8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c4f0:	b580      	push	{r7, lr}
 800c4f2:	b082      	sub	sp, #8
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	4603      	mov	r3, r0
 800c4f8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800c4fa:	79fb      	ldrb	r3, [r7, #7]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f000 fab3 	bl	800ca68 <USER_SPI_status>
 800c502:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	607a      	str	r2, [r7, #4]
 800c516:	603b      	str	r3, [r7, #0]
 800c518:	4603      	mov	r3, r0
 800c51a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800c51c:	7bf8      	ldrb	r0, [r7, #15]
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	68b9      	ldr	r1, [r7, #8]
 800c524:	f000 fab6 	bl	800ca94 <USER_SPI_read>
 800c528:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3710      	adds	r7, #16
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}

0800c532 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c532:	b580      	push	{r7, lr}
 800c534:	b084      	sub	sp, #16
 800c536:	af00      	add	r7, sp, #0
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
 800c53e:	4603      	mov	r3, r0
 800c540:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800c542:	7bf8      	ldrb	r0, [r7, #15]
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	687a      	ldr	r2, [r7, #4]
 800c548:	68b9      	ldr	r1, [r7, #8]
 800c54a:	f000 fb09 	bl	800cb60 <USER_SPI_write>
 800c54e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c550:	4618      	mov	r0, r3
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b082      	sub	sp, #8
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	4603      	mov	r3, r0
 800c560:	603a      	str	r2, [r7, #0]
 800c562:	71fb      	strb	r3, [r7, #7]
 800c564:	460b      	mov	r3, r1
 800c566:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800c568:	79b9      	ldrb	r1, [r7, #6]
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	683a      	ldr	r2, [r7, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f000 fb72 	bl	800cc58 <USER_SPI_ioctl>
 800c574:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c588:	f7f8 ff2a 	bl	80053e0 <HAL_GetTick>
 800c58c:	4602      	mov	r2, r0
 800c58e:	4b04      	ldr	r3, [pc, #16]	; (800c5a0 <SPI_Timer_On+0x20>)
 800c590:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800c592:	4a04      	ldr	r2, [pc, #16]	; (800c5a4 <SPI_Timer_On+0x24>)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6013      	str	r3, [r2, #0]
}
 800c598:	bf00      	nop
 800c59a:	3708      	adds	r7, #8
 800c59c:	46bd      	mov	sp, r7
 800c59e:	bd80      	pop	{r7, pc}
 800c5a0:	20004cc8 	.word	0x20004cc8
 800c5a4:	20004ccc 	.word	0x20004ccc

0800c5a8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c5ac:	f7f8 ff18 	bl	80053e0 <HAL_GetTick>
 800c5b0:	4602      	mov	r2, r0
 800c5b2:	4b06      	ldr	r3, [pc, #24]	; (800c5cc <SPI_Timer_Status+0x24>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	1ad2      	subs	r2, r2, r3
 800c5b8:	4b05      	ldr	r3, [pc, #20]	; (800c5d0 <SPI_Timer_Status+0x28>)
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	bf34      	ite	cc
 800c5c0:	2301      	movcc	r3, #1
 800c5c2:	2300      	movcs	r3, #0
 800c5c4:	b2db      	uxtb	r3, r3
}
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	bd80      	pop	{r7, pc}
 800c5ca:	bf00      	nop
 800c5cc:	20004cc8 	.word	0x20004cc8
 800c5d0:	20004ccc 	.word	0x20004ccc

0800c5d4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b086      	sub	sp, #24
 800c5d8:	af02      	add	r7, sp, #8
 800c5da:	4603      	mov	r3, r0
 800c5dc:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c5de:	f107 020f 	add.w	r2, r7, #15
 800c5e2:	1df9      	adds	r1, r7, #7
 800c5e4:	2332      	movs	r3, #50	; 0x32
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	4804      	ldr	r0, [pc, #16]	; (800c5fc <xchg_spi+0x28>)
 800c5ec:	f7fd fa79 	bl	8009ae2 <HAL_SPI_TransmitReceive>
    return rxDat;
 800c5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3710      	adds	r7, #16
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20004778 	.word	0x20004778

0800c600 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800c600:	b590      	push	{r4, r7, lr}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800c60a:	2300      	movs	r3, #0
 800c60c:	60fb      	str	r3, [r7, #12]
 800c60e:	e00a      	b.n	800c626 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	18d4      	adds	r4, r2, r3
 800c616:	20ff      	movs	r0, #255	; 0xff
 800c618:	f7ff ffdc 	bl	800c5d4 <xchg_spi>
 800c61c:	4603      	mov	r3, r0
 800c61e:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	3301      	adds	r3, #1
 800c624:	60fb      	str	r3, [r7, #12]
 800c626:	68fa      	ldr	r2, [r7, #12]
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d3f0      	bcc.n	800c610 <rcvr_spi_multi+0x10>
    }
}
 800c62e:	bf00      	nop
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	bd90      	pop	{r4, r7, pc}

0800c636 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b084      	sub	sp, #16
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
 800c63e:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800c640:	2300      	movs	r3, #0
 800c642:	60fb      	str	r3, [r7, #12]
 800c644:	e009      	b.n	800c65a <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	4413      	add	r3, r2
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff ffc0 	bl	800c5d4 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	3301      	adds	r3, #1
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d3f1      	bcc.n	800c646 <xmit_spi_multi+0x10>
    }
}
 800c662:	bf00      	nop
 800c664:	3710      	adds	r7, #16
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b086      	sub	sp, #24
 800c66e:	af00      	add	r7, sp, #0
 800c670:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800c672:	f7f8 feb5 	bl	80053e0 <HAL_GetTick>
 800c676:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800c67c:	20ff      	movs	r0, #255	; 0xff
 800c67e:	f7ff ffa9 	bl	800c5d4 <xchg_spi>
 800c682:	4603      	mov	r3, r0
 800c684:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800c686:	7bfb      	ldrb	r3, [r7, #15]
 800c688:	2bff      	cmp	r3, #255	; 0xff
 800c68a:	d007      	beq.n	800c69c <wait_ready+0x32>
 800c68c:	f7f8 fea8 	bl	80053e0 <HAL_GetTick>
 800c690:	4602      	mov	r2, r0
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	693a      	ldr	r2, [r7, #16]
 800c698:	429a      	cmp	r2, r3
 800c69a:	d8ef      	bhi.n	800c67c <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800c69c:	7bfb      	ldrb	r3, [r7, #15]
 800c69e:	2bff      	cmp	r3, #255	; 0xff
 800c6a0:	bf0c      	ite	eq
 800c6a2:	2301      	moveq	r3, #1
 800c6a4:	2300      	movne	r3, #0
 800c6a6:	b2db      	uxtb	r3, r3
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3718      	adds	r7, #24
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	2110      	movs	r1, #16
 800c6b8:	4803      	ldr	r0, [pc, #12]	; (800c6c8 <despiselect+0x18>)
 800c6ba:	f7f9 fd15 	bl	80060e8 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c6be:	20ff      	movs	r0, #255	; 0xff
 800c6c0:	f7ff ff88 	bl	800c5d4 <xchg_spi>

}
 800c6c4:	bf00      	nop
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	40020800 	.word	0x40020800

0800c6cc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2110      	movs	r1, #16
 800c6d4:	4809      	ldr	r0, [pc, #36]	; (800c6fc <spiselect+0x30>)
 800c6d6:	f7f9 fd07 	bl	80060e8 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800c6da:	20ff      	movs	r0, #255	; 0xff
 800c6dc:	f7ff ff7a 	bl	800c5d4 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800c6e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c6e4:	f7ff ffc1 	bl	800c66a <wait_ready>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <spiselect+0x26>
 800c6ee:	2301      	movs	r3, #1
 800c6f0:	e002      	b.n	800c6f8 <spiselect+0x2c>

    despiselect();
 800c6f2:	f7ff ffdd 	bl	800c6b0 <despiselect>
    return 0;   /* Timeout */
 800c6f6:	2300      	movs	r3, #0
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	40020800 	.word	0x40020800

0800c700 <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b084      	sub	sp, #16
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
 800c708:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800c70a:	20c8      	movs	r0, #200	; 0xc8
 800c70c:	f7ff ff38 	bl	800c580 <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800c710:	20ff      	movs	r0, #255	; 0xff
 800c712:	f7ff ff5f 	bl	800c5d4 <xchg_spi>
 800c716:	4603      	mov	r3, r0
 800c718:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800c71a:	7bfb      	ldrb	r3, [r7, #15]
 800c71c:	2bff      	cmp	r3, #255	; 0xff
 800c71e:	d104      	bne.n	800c72a <rcvr_datablock+0x2a>
 800c720:	f7ff ff42 	bl	800c5a8 <SPI_Timer_Status>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d1f2      	bne.n	800c710 <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800c72a:	7bfb      	ldrb	r3, [r7, #15]
 800c72c:	2bfe      	cmp	r3, #254	; 0xfe
 800c72e:	d001      	beq.n	800c734 <rcvr_datablock+0x34>
 800c730:	2300      	movs	r3, #0
 800c732:	e00a      	b.n	800c74a <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800c734:	6839      	ldr	r1, [r7, #0]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f7ff ff62 	bl	800c600 <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800c73c:	20ff      	movs	r0, #255	; 0xff
 800c73e:	f7ff ff49 	bl	800c5d4 <xchg_spi>
 800c742:	20ff      	movs	r0, #255	; 0xff
 800c744:	f7ff ff46 	bl	800c5d4 <xchg_spi>

    return 1;                       /* Function succeeded */
 800c748:	2301      	movs	r3, #1
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	460b      	mov	r3, r1
 800c75c:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800c75e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c762:	f7ff ff82 	bl	800c66a <wait_ready>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d101      	bne.n	800c770 <xmit_datablock+0x1e>
 800c76c:	2300      	movs	r3, #0
 800c76e:	e01e      	b.n	800c7ae <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800c770:	78fb      	ldrb	r3, [r7, #3]
 800c772:	4618      	mov	r0, r3
 800c774:	f7ff ff2e 	bl	800c5d4 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800c778:	78fb      	ldrb	r3, [r7, #3]
 800c77a:	2bfd      	cmp	r3, #253	; 0xfd
 800c77c:	d016      	beq.n	800c7ac <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800c77e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f7ff ff57 	bl	800c636 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800c788:	20ff      	movs	r0, #255	; 0xff
 800c78a:	f7ff ff23 	bl	800c5d4 <xchg_spi>
 800c78e:	20ff      	movs	r0, #255	; 0xff
 800c790:	f7ff ff20 	bl	800c5d4 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800c794:	20ff      	movs	r0, #255	; 0xff
 800c796:	f7ff ff1d 	bl	800c5d4 <xchg_spi>
 800c79a:	4603      	mov	r3, r0
 800c79c:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800c79e:	7bfb      	ldrb	r3, [r7, #15]
 800c7a0:	f003 031f 	and.w	r3, r3, #31
 800c7a4:	2b05      	cmp	r3, #5
 800c7a6:	d001      	beq.n	800c7ac <xmit_datablock+0x5a>
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	e000      	b.n	800c7ae <xmit_datablock+0x5c>
    }
    return 1;
 800c7ac:	2301      	movs	r3, #1
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3710      	adds	r7, #16
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}

0800c7b6 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b084      	sub	sp, #16
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	4603      	mov	r3, r0
 800c7be:	6039      	str	r1, [r7, #0]
 800c7c0:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800c7c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da0e      	bge.n	800c7e8 <send_cmd+0x32>
        cmd &= 0x7F;
 800c7ca:	79fb      	ldrb	r3, [r7, #7]
 800c7cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7d0:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800c7d2:	2100      	movs	r1, #0
 800c7d4:	2037      	movs	r0, #55	; 0x37
 800c7d6:	f7ff ffee 	bl	800c7b6 <send_cmd>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800c7de:	7bbb      	ldrb	r3, [r7, #14]
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d901      	bls.n	800c7e8 <send_cmd+0x32>
 800c7e4:	7bbb      	ldrb	r3, [r7, #14]
 800c7e6:	e051      	b.n	800c88c <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800c7e8:	79fb      	ldrb	r3, [r7, #7]
 800c7ea:	2b0c      	cmp	r3, #12
 800c7ec:	d008      	beq.n	800c800 <send_cmd+0x4a>
        despiselect();
 800c7ee:	f7ff ff5f 	bl	800c6b0 <despiselect>
        if (!spiselect()) return 0xFF;
 800c7f2:	f7ff ff6b 	bl	800c6cc <spiselect>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d101      	bne.n	800c800 <send_cmd+0x4a>
 800c7fc:	23ff      	movs	r3, #255	; 0xff
 800c7fe:	e045      	b.n	800c88c <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800c800:	79fb      	ldrb	r3, [r7, #7]
 800c802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c806:	b2db      	uxtb	r3, r3
 800c808:	4618      	mov	r0, r3
 800c80a:	f7ff fee3 	bl	800c5d4 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	0e1b      	lsrs	r3, r3, #24
 800c812:	b2db      	uxtb	r3, r3
 800c814:	4618      	mov	r0, r3
 800c816:	f7ff fedd 	bl	800c5d4 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	0c1b      	lsrs	r3, r3, #16
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff fed7 	bl	800c5d4 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	0a1b      	lsrs	r3, r3, #8
 800c82a:	b2db      	uxtb	r3, r3
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff fed1 	bl	800c5d4 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	b2db      	uxtb	r3, r3
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff fecc 	bl	800c5d4 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800c83c:	2301      	movs	r3, #1
 800c83e:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d101      	bne.n	800c84a <send_cmd+0x94>
 800c846:	2395      	movs	r3, #149	; 0x95
 800c848:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800c84a:	79fb      	ldrb	r3, [r7, #7]
 800c84c:	2b08      	cmp	r3, #8
 800c84e:	d101      	bne.n	800c854 <send_cmd+0x9e>
 800c850:	2387      	movs	r3, #135	; 0x87
 800c852:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800c854:	7bfb      	ldrb	r3, [r7, #15]
 800c856:	4618      	mov	r0, r3
 800c858:	f7ff febc 	bl	800c5d4 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800c85c:	79fb      	ldrb	r3, [r7, #7]
 800c85e:	2b0c      	cmp	r3, #12
 800c860:	d102      	bne.n	800c868 <send_cmd+0xb2>
 800c862:	20ff      	movs	r0, #255	; 0xff
 800c864:	f7ff feb6 	bl	800c5d4 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800c868:	230a      	movs	r3, #10
 800c86a:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800c86c:	20ff      	movs	r0, #255	; 0xff
 800c86e:	f7ff feb1 	bl	800c5d4 <xchg_spi>
 800c872:	4603      	mov	r3, r0
 800c874:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800c876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	da05      	bge.n	800c88a <send_cmd+0xd4>
 800c87e:	7bfb      	ldrb	r3, [r7, #15]
 800c880:	3b01      	subs	r3, #1
 800c882:	73fb      	strb	r3, [r7, #15]
 800c884:	7bfb      	ldrb	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d1f0      	bne.n	800c86c <send_cmd+0xb6>

    return res;                         /* Return received response */
 800c88a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800c894:	b590      	push	{r4, r7, lr}
 800c896:	b085      	sub	sp, #20
 800c898:	af00      	add	r7, sp, #0
 800c89a:	4603      	mov	r3, r0
 800c89c:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800c89e:	79fb      	ldrb	r3, [r7, #7]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <USER_SPI_initialize+0x14>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	e0d4      	b.n	800ca52 <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800c8a8:	4b6c      	ldr	r3, [pc, #432]	; (800ca5c <USER_SPI_initialize+0x1c8>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	b2db      	uxtb	r3, r3
 800c8ae:	f003 0302 	and.w	r3, r3, #2
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d003      	beq.n	800c8be <USER_SPI_initialize+0x2a>
 800c8b6:	4b69      	ldr	r3, [pc, #420]	; (800ca5c <USER_SPI_initialize+0x1c8>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	e0c9      	b.n	800ca52 <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800c8be:	4b68      	ldr	r3, [pc, #416]	; (800ca60 <USER_SPI_initialize+0x1cc>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	681a      	ldr	r2, [r3, #0]
 800c8c4:	4b66      	ldr	r3, [pc, #408]	; (800ca60 <USER_SPI_initialize+0x1cc>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800c8cc:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800c8ce:	230a      	movs	r3, #10
 800c8d0:	73fb      	strb	r3, [r7, #15]
 800c8d2:	e005      	b.n	800c8e0 <USER_SPI_initialize+0x4c>
 800c8d4:	20ff      	movs	r0, #255	; 0xff
 800c8d6:	f7ff fe7d 	bl	800c5d4 <xchg_spi>
 800c8da:	7bfb      	ldrb	r3, [r7, #15]
 800c8dc:	3b01      	subs	r3, #1
 800c8de:	73fb      	strb	r3, [r7, #15]
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d1f6      	bne.n	800c8d4 <USER_SPI_initialize+0x40>

    ty = 0;
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800c8ea:	2100      	movs	r1, #0
 800c8ec:	2000      	movs	r0, #0
 800c8ee:	f7ff ff62 	bl	800c7b6 <send_cmd>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	f040 808b 	bne.w	800ca10 <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800c8fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c8fe:	f7ff fe3f 	bl	800c580 <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800c902:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c906:	2008      	movs	r0, #8
 800c908:	f7ff ff55 	bl	800c7b6 <send_cmd>
 800c90c:	4603      	mov	r3, r0
 800c90e:	2b01      	cmp	r3, #1
 800c910:	d151      	bne.n	800c9b6 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]
 800c916:	e00d      	b.n	800c934 <USER_SPI_initialize+0xa0>
 800c918:	7bfc      	ldrb	r4, [r7, #15]
 800c91a:	20ff      	movs	r0, #255	; 0xff
 800c91c:	f7ff fe5a 	bl	800c5d4 <xchg_spi>
 800c920:	4603      	mov	r3, r0
 800c922:	461a      	mov	r2, r3
 800c924:	f107 0310 	add.w	r3, r7, #16
 800c928:	4423      	add	r3, r4
 800c92a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
 800c930:	3301      	adds	r3, #1
 800c932:	73fb      	strb	r3, [r7, #15]
 800c934:	7bfb      	ldrb	r3, [r7, #15]
 800c936:	2b03      	cmp	r3, #3
 800c938:	d9ee      	bls.n	800c918 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800c93a:	7abb      	ldrb	r3, [r7, #10]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d167      	bne.n	800ca10 <USER_SPI_initialize+0x17c>
 800c940:	7afb      	ldrb	r3, [r7, #11]
 800c942:	2baa      	cmp	r3, #170	; 0xaa
 800c944:	d164      	bne.n	800ca10 <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800c946:	bf00      	nop
 800c948:	f7ff fe2e 	bl	800c5a8 <SPI_Timer_Status>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d007      	beq.n	800c962 <USER_SPI_initialize+0xce>
 800c952:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c956:	20a9      	movs	r0, #169	; 0xa9
 800c958:	f7ff ff2d 	bl	800c7b6 <send_cmd>
 800c95c:	4603      	mov	r3, r0
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f2      	bne.n	800c948 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800c962:	f7ff fe21 	bl	800c5a8 <SPI_Timer_Status>
 800c966:	4603      	mov	r3, r0
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d051      	beq.n	800ca10 <USER_SPI_initialize+0x17c>
 800c96c:	2100      	movs	r1, #0
 800c96e:	203a      	movs	r0, #58	; 0x3a
 800c970:	f7ff ff21 	bl	800c7b6 <send_cmd>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d14a      	bne.n	800ca10 <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c97a:	2300      	movs	r3, #0
 800c97c:	73fb      	strb	r3, [r7, #15]
 800c97e:	e00d      	b.n	800c99c <USER_SPI_initialize+0x108>
 800c980:	7bfc      	ldrb	r4, [r7, #15]
 800c982:	20ff      	movs	r0, #255	; 0xff
 800c984:	f7ff fe26 	bl	800c5d4 <xchg_spi>
 800c988:	4603      	mov	r3, r0
 800c98a:	461a      	mov	r2, r3
 800c98c:	f107 0310 	add.w	r3, r7, #16
 800c990:	4423      	add	r3, r4
 800c992:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	3301      	adds	r3, #1
 800c99a:	73fb      	strb	r3, [r7, #15]
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	2b03      	cmp	r3, #3
 800c9a0:	d9ee      	bls.n	800c980 <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800c9a2:	7a3b      	ldrb	r3, [r7, #8]
 800c9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d001      	beq.n	800c9b0 <USER_SPI_initialize+0x11c>
 800c9ac:	230c      	movs	r3, #12
 800c9ae:	e000      	b.n	800c9b2 <USER_SPI_initialize+0x11e>
 800c9b0:	2304      	movs	r3, #4
 800c9b2:	737b      	strb	r3, [r7, #13]
 800c9b4:	e02c      	b.n	800ca10 <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800c9b6:	2100      	movs	r1, #0
 800c9b8:	20a9      	movs	r0, #169	; 0xa9
 800c9ba:	f7ff fefc 	bl	800c7b6 <send_cmd>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d804      	bhi.n	800c9ce <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800c9c4:	2302      	movs	r3, #2
 800c9c6:	737b      	strb	r3, [r7, #13]
 800c9c8:	23a9      	movs	r3, #169	; 0xa9
 800c9ca:	73bb      	strb	r3, [r7, #14]
 800c9cc:	e003      	b.n	800c9d6 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	737b      	strb	r3, [r7, #13]
 800c9d2:	2301      	movs	r3, #1
 800c9d4:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800c9d6:	bf00      	nop
 800c9d8:	f7ff fde6 	bl	800c5a8 <SPI_Timer_Status>
 800c9dc:	4603      	mov	r3, r0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d007      	beq.n	800c9f2 <USER_SPI_initialize+0x15e>
 800c9e2:	7bbb      	ldrb	r3, [r7, #14]
 800c9e4:	2100      	movs	r1, #0
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff fee5 	bl	800c7b6 <send_cmd>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d1f2      	bne.n	800c9d8 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800c9f2:	f7ff fdd9 	bl	800c5a8 <SPI_Timer_Status>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d007      	beq.n	800ca0c <USER_SPI_initialize+0x178>
 800c9fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca00:	2010      	movs	r0, #16
 800ca02:	f7ff fed8 	bl	800c7b6 <send_cmd>
 800ca06:	4603      	mov	r3, r0
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d001      	beq.n	800ca10 <USER_SPI_initialize+0x17c>
                ty = 0;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800ca10:	4a14      	ldr	r2, [pc, #80]	; (800ca64 <USER_SPI_initialize+0x1d0>)
 800ca12:	7b7b      	ldrb	r3, [r7, #13]
 800ca14:	7013      	strb	r3, [r2, #0]
    despiselect();
 800ca16:	f7ff fe4b 	bl	800c6b0 <despiselect>

    if (ty) {           /* OK */
 800ca1a:	7b7b      	ldrb	r3, [r7, #13]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d012      	beq.n	800ca46 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800ca20:	4b0f      	ldr	r3, [pc, #60]	; (800ca60 <USER_SPI_initialize+0x1cc>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ca2a:	4b0d      	ldr	r3, [pc, #52]	; (800ca60 <USER_SPI_initialize+0x1cc>)
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	f042 0220 	orr.w	r2, r2, #32
 800ca32:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800ca34:	4b09      	ldr	r3, [pc, #36]	; (800ca5c <USER_SPI_initialize+0x1c8>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	b2db      	uxtb	r3, r3
 800ca3a:	f023 0301 	bic.w	r3, r3, #1
 800ca3e:	b2da      	uxtb	r2, r3
 800ca40:	4b06      	ldr	r3, [pc, #24]	; (800ca5c <USER_SPI_initialize+0x1c8>)
 800ca42:	701a      	strb	r2, [r3, #0]
 800ca44:	e002      	b.n	800ca4c <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800ca46:	4b05      	ldr	r3, [pc, #20]	; (800ca5c <USER_SPI_initialize+0x1c8>)
 800ca48:	2201      	movs	r2, #1
 800ca4a:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800ca4c:	4b03      	ldr	r3, [pc, #12]	; (800ca5c <USER_SPI_initialize+0x1c8>)
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	b2db      	uxtb	r3, r3
}
 800ca52:	4618      	mov	r0, r3
 800ca54:	3714      	adds	r7, #20
 800ca56:	46bd      	mov	sp, r7
 800ca58:	bd90      	pop	{r4, r7, pc}
 800ca5a:	bf00      	nop
 800ca5c:	2000029c 	.word	0x2000029c
 800ca60:	20004778 	.word	0x20004778
 800ca64:	2000087c 	.word	0x2000087c

0800ca68 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b083      	sub	sp, #12
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	4603      	mov	r3, r0
 800ca70:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800ca72:	79fb      	ldrb	r3, [r7, #7]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d001      	beq.n	800ca7c <USER_SPI_status+0x14>
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e002      	b.n	800ca82 <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800ca7c:	4b04      	ldr	r3, [pc, #16]	; (800ca90 <USER_SPI_status+0x28>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	b2db      	uxtb	r3, r3
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	370c      	adds	r7, #12
 800ca86:	46bd      	mov	sp, r7
 800ca88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8c:	4770      	bx	lr
 800ca8e:	bf00      	nop
 800ca90:	2000029c 	.word	0x2000029c

0800ca94 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60b9      	str	r1, [r7, #8]
 800ca9c:	607a      	str	r2, [r7, #4]
 800ca9e:	603b      	str	r3, [r7, #0]
 800caa0:	4603      	mov	r3, r0
 800caa2:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d102      	bne.n	800cab0 <USER_SPI_read+0x1c>
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d101      	bne.n	800cab4 <USER_SPI_read+0x20>
 800cab0:	2304      	movs	r3, #4
 800cab2:	e04d      	b.n	800cb50 <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800cab4:	4b28      	ldr	r3, [pc, #160]	; (800cb58 <USER_SPI_read+0xc4>)
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	b2db      	uxtb	r3, r3
 800caba:	f003 0301 	and.w	r3, r3, #1
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d001      	beq.n	800cac6 <USER_SPI_read+0x32>
 800cac2:	2303      	movs	r3, #3
 800cac4:	e044      	b.n	800cb50 <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800cac6:	4b25      	ldr	r3, [pc, #148]	; (800cb5c <USER_SPI_read+0xc8>)
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	f003 0308 	and.w	r3, r3, #8
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d102      	bne.n	800cad8 <USER_SPI_read+0x44>
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	025b      	lsls	r3, r3, #9
 800cad6:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	2b01      	cmp	r3, #1
 800cadc:	d111      	bne.n	800cb02 <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	2011      	movs	r0, #17
 800cae2:	f7ff fe68 	bl	800c7b6 <send_cmd>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d129      	bne.n	800cb40 <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800caec:	f44f 7100 	mov.w	r1, #512	; 0x200
 800caf0:	68b8      	ldr	r0, [r7, #8]
 800caf2:	f7ff fe05 	bl	800c700 <rcvr_datablock>
 800caf6:	4603      	mov	r3, r0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d021      	beq.n	800cb40 <USER_SPI_read+0xac>
            count = 0;
 800cafc:	2300      	movs	r3, #0
 800cafe:	603b      	str	r3, [r7, #0]
 800cb00:	e01e      	b.n	800cb40 <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800cb02:	6879      	ldr	r1, [r7, #4]
 800cb04:	2012      	movs	r0, #18
 800cb06:	f7ff fe56 	bl	800c7b6 <send_cmd>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d117      	bne.n	800cb40 <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800cb10:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb14:	68b8      	ldr	r0, [r7, #8]
 800cb16:	f7ff fdf3 	bl	800c700 <rcvr_datablock>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00a      	beq.n	800cb36 <USER_SPI_read+0xa2>
                buff += 512;
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cb26:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	603b      	str	r3, [r7, #0]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1ed      	bne.n	800cb10 <USER_SPI_read+0x7c>
 800cb34:	e000      	b.n	800cb38 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800cb36:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800cb38:	2100      	movs	r1, #0
 800cb3a:	200c      	movs	r0, #12
 800cb3c:	f7ff fe3b 	bl	800c7b6 <send_cmd>
        }
    }
    despiselect();
 800cb40:	f7ff fdb6 	bl	800c6b0 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800cb44:	683b      	ldr	r3, [r7, #0]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	bf14      	ite	ne
 800cb4a:	2301      	movne	r3, #1
 800cb4c:	2300      	moveq	r3, #0
 800cb4e:	b2db      	uxtb	r3, r3
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3710      	adds	r7, #16
 800cb54:	46bd      	mov	sp, r7
 800cb56:	bd80      	pop	{r7, pc}
 800cb58:	2000029c 	.word	0x2000029c
 800cb5c:	2000087c 	.word	0x2000087c

0800cb60 <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60b9      	str	r1, [r7, #8]
 800cb68:	607a      	str	r2, [r7, #4]
 800cb6a:	603b      	str	r3, [r7, #0]
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800cb70:	7bfb      	ldrb	r3, [r7, #15]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d102      	bne.n	800cb7c <USER_SPI_write+0x1c>
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d101      	bne.n	800cb80 <USER_SPI_write+0x20>
 800cb7c:	2304      	movs	r3, #4
 800cb7e:	e063      	b.n	800cc48 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800cb80:	4b33      	ldr	r3, [pc, #204]	; (800cc50 <USER_SPI_write+0xf0>)
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f003 0301 	and.w	r3, r3, #1
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d001      	beq.n	800cb92 <USER_SPI_write+0x32>
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e05a      	b.n	800cc48 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800cb92:	4b2f      	ldr	r3, [pc, #188]	; (800cc50 <USER_SPI_write+0xf0>)
 800cb94:	781b      	ldrb	r3, [r3, #0]
 800cb96:	b2db      	uxtb	r3, r3
 800cb98:	f003 0304 	and.w	r3, r3, #4
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d001      	beq.n	800cba4 <USER_SPI_write+0x44>
 800cba0:	2302      	movs	r3, #2
 800cba2:	e051      	b.n	800cc48 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800cba4:	4b2b      	ldr	r3, [pc, #172]	; (800cc54 <USER_SPI_write+0xf4>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	f003 0308 	and.w	r3, r3, #8
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d102      	bne.n	800cbb6 <USER_SPI_write+0x56>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	025b      	lsls	r3, r3, #9
 800cbb4:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d110      	bne.n	800cbde <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800cbbc:	6879      	ldr	r1, [r7, #4]
 800cbbe:	2018      	movs	r0, #24
 800cbc0:	f7ff fdf9 	bl	800c7b6 <send_cmd>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d136      	bne.n	800cc38 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800cbca:	21fe      	movs	r1, #254	; 0xfe
 800cbcc:	68b8      	ldr	r0, [r7, #8]
 800cbce:	f7ff fdc0 	bl	800c752 <xmit_datablock>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d02f      	beq.n	800cc38 <USER_SPI_write+0xd8>
            count = 0;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	603b      	str	r3, [r7, #0]
 800cbdc:	e02c      	b.n	800cc38 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800cbde:	4b1d      	ldr	r3, [pc, #116]	; (800cc54 <USER_SPI_write+0xf4>)
 800cbe0:	781b      	ldrb	r3, [r3, #0]
 800cbe2:	f003 0306 	and.w	r3, r3, #6
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d003      	beq.n	800cbf2 <USER_SPI_write+0x92>
 800cbea:	6839      	ldr	r1, [r7, #0]
 800cbec:	2097      	movs	r0, #151	; 0x97
 800cbee:	f7ff fde2 	bl	800c7b6 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	2019      	movs	r0, #25
 800cbf6:	f7ff fdde 	bl	800c7b6 <send_cmd>
 800cbfa:	4603      	mov	r3, r0
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d11b      	bne.n	800cc38 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800cc00:	21fc      	movs	r1, #252	; 0xfc
 800cc02:	68b8      	ldr	r0, [r7, #8]
 800cc04:	f7ff fda5 	bl	800c752 <xmit_datablock>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00a      	beq.n	800cc24 <USER_SPI_write+0xc4>
                buff += 512;
 800cc0e:	68bb      	ldr	r3, [r7, #8]
 800cc10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800cc14:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	3b01      	subs	r3, #1
 800cc1a:	603b      	str	r3, [r7, #0]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1ee      	bne.n	800cc00 <USER_SPI_write+0xa0>
 800cc22:	e000      	b.n	800cc26 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800cc24:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800cc26:	21fd      	movs	r1, #253	; 0xfd
 800cc28:	2000      	movs	r0, #0
 800cc2a:	f7ff fd92 	bl	800c752 <xmit_datablock>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <USER_SPI_write+0xd8>
 800cc34:	2301      	movs	r3, #1
 800cc36:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800cc38:	f7ff fd3a 	bl	800c6b0 <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	bf14      	ite	ne
 800cc42:	2301      	movne	r3, #1
 800cc44:	2300      	moveq	r3, #0
 800cc46:	b2db      	uxtb	r3, r3
}
 800cc48:	4618      	mov	r0, r3
 800cc4a:	3710      	adds	r7, #16
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}
 800cc50:	2000029c 	.word	0x2000029c
 800cc54:	2000087c 	.word	0x2000087c

0800cc58 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b08c      	sub	sp, #48	; 0x30
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	4603      	mov	r3, r0
 800cc60:	603a      	str	r2, [r7, #0]
 800cc62:	71fb      	strb	r3, [r7, #7]
 800cc64:	460b      	mov	r3, r1
 800cc66:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800cc68:	79fb      	ldrb	r3, [r7, #7]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d001      	beq.n	800cc72 <USER_SPI_ioctl+0x1a>
 800cc6e:	2304      	movs	r3, #4
 800cc70:	e15a      	b.n	800cf28 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800cc72:	4baf      	ldr	r3, [pc, #700]	; (800cf30 <USER_SPI_ioctl+0x2d8>)
 800cc74:	781b      	ldrb	r3, [r3, #0]
 800cc76:	b2db      	uxtb	r3, r3
 800cc78:	f003 0301 	and.w	r3, r3, #1
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d001      	beq.n	800cc84 <USER_SPI_ioctl+0x2c>
 800cc80:	2303      	movs	r3, #3
 800cc82:	e151      	b.n	800cf28 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800cc84:	2301      	movs	r3, #1
 800cc86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800cc8a:	79bb      	ldrb	r3, [r7, #6]
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	f200 8136 	bhi.w	800cefe <USER_SPI_ioctl+0x2a6>
 800cc92:	a201      	add	r2, pc, #4	; (adr r2, 800cc98 <USER_SPI_ioctl+0x40>)
 800cc94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc98:	0800ccad 	.word	0x0800ccad
 800cc9c:	0800ccc1 	.word	0x0800ccc1
 800cca0:	0800ceff 	.word	0x0800ceff
 800cca4:	0800cd6d 	.word	0x0800cd6d
 800cca8:	0800ce63 	.word	0x0800ce63
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800ccac:	f7ff fd0e 	bl	800c6cc <spiselect>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f000 8127 	beq.w	800cf06 <USER_SPI_ioctl+0x2ae>
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800ccbe:	e122      	b.n	800cf06 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	2009      	movs	r0, #9
 800ccc4:	f7ff fd77 	bl	800c7b6 <send_cmd>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	f040 811d 	bne.w	800cf0a <USER_SPI_ioctl+0x2b2>
 800ccd0:	f107 030c 	add.w	r3, r7, #12
 800ccd4:	2110      	movs	r1, #16
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7ff fd12 	bl	800c700 <rcvr_datablock>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	f000 8113 	beq.w	800cf0a <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800cce4:	7b3b      	ldrb	r3, [r7, #12]
 800cce6:	099b      	lsrs	r3, r3, #6
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d111      	bne.n	800cd12 <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ccee:	7d7b      	ldrb	r3, [r7, #21]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	7d3b      	ldrb	r3, [r7, #20]
 800ccf4:	021b      	lsls	r3, r3, #8
 800ccf6:	4413      	add	r3, r2
 800ccf8:	461a      	mov	r2, r3
 800ccfa:	7cfb      	ldrb	r3, [r7, #19]
 800ccfc:	041b      	lsls	r3, r3, #16
 800ccfe:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800cd02:	4413      	add	r3, r2
 800cd04:	3301      	adds	r3, #1
 800cd06:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800cd08:	69fb      	ldr	r3, [r7, #28]
 800cd0a:	029a      	lsls	r2, r3, #10
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	601a      	str	r2, [r3, #0]
 800cd10:	e028      	b.n	800cd64 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800cd12:	7c7b      	ldrb	r3, [r7, #17]
 800cd14:	f003 030f 	and.w	r3, r3, #15
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	7dbb      	ldrb	r3, [r7, #22]
 800cd1c:	09db      	lsrs	r3, r3, #7
 800cd1e:	b2db      	uxtb	r3, r3
 800cd20:	4413      	add	r3, r2
 800cd22:	b2da      	uxtb	r2, r3
 800cd24:	7d7b      	ldrb	r3, [r7, #21]
 800cd26:	005b      	lsls	r3, r3, #1
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	f003 0306 	and.w	r3, r3, #6
 800cd2e:	b2db      	uxtb	r3, r3
 800cd30:	4413      	add	r3, r2
 800cd32:	b2db      	uxtb	r3, r3
 800cd34:	3302      	adds	r3, #2
 800cd36:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800cd3a:	7d3b      	ldrb	r3, [r7, #20]
 800cd3c:	099b      	lsrs	r3, r3, #6
 800cd3e:	b2db      	uxtb	r3, r3
 800cd40:	461a      	mov	r2, r3
 800cd42:	7cfb      	ldrb	r3, [r7, #19]
 800cd44:	009b      	lsls	r3, r3, #2
 800cd46:	441a      	add	r2, r3
 800cd48:	7cbb      	ldrb	r3, [r7, #18]
 800cd4a:	029b      	lsls	r3, r3, #10
 800cd4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cd50:	4413      	add	r3, r2
 800cd52:	3301      	adds	r3, #1
 800cd54:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800cd56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cd5a:	3b09      	subs	r3, #9
 800cd5c:	69fa      	ldr	r2, [r7, #28]
 800cd5e:	409a      	lsls	r2, r3
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800cd6a:	e0ce      	b.n	800cf0a <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800cd6c:	4b71      	ldr	r3, [pc, #452]	; (800cf34 <USER_SPI_ioctl+0x2dc>)
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	f003 0304 	and.w	r3, r3, #4
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d031      	beq.n	800cddc <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800cd78:	2100      	movs	r1, #0
 800cd7a:	208d      	movs	r0, #141	; 0x8d
 800cd7c:	f7ff fd1b 	bl	800c7b6 <send_cmd>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f040 80c3 	bne.w	800cf0e <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800cd88:	20ff      	movs	r0, #255	; 0xff
 800cd8a:	f7ff fc23 	bl	800c5d4 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800cd8e:	f107 030c 	add.w	r3, r7, #12
 800cd92:	2110      	movs	r1, #16
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7ff fcb3 	bl	800c700 <rcvr_datablock>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	f000 80b6 	beq.w	800cf0e <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800cda2:	2330      	movs	r3, #48	; 0x30
 800cda4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cda8:	e007      	b.n	800cdba <USER_SPI_ioctl+0x162>
 800cdaa:	20ff      	movs	r0, #255	; 0xff
 800cdac:	f7ff fc12 	bl	800c5d4 <xchg_spi>
 800cdb0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cdba:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d1f3      	bne.n	800cdaa <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800cdc2:	7dbb      	ldrb	r3, [r7, #22]
 800cdc4:	091b      	lsrs	r3, r3, #4
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	461a      	mov	r2, r3
 800cdca:	2310      	movs	r3, #16
 800cdcc:	fa03 f202 	lsl.w	r2, r3, r2
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800cdda:	e098      	b.n	800cf0e <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800cddc:	2100      	movs	r1, #0
 800cdde:	2009      	movs	r0, #9
 800cde0:	f7ff fce9 	bl	800c7b6 <send_cmd>
 800cde4:	4603      	mov	r3, r0
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	f040 8091 	bne.w	800cf0e <USER_SPI_ioctl+0x2b6>
 800cdec:	f107 030c 	add.w	r3, r7, #12
 800cdf0:	2110      	movs	r1, #16
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f7ff fc84 	bl	800c700 <rcvr_datablock>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	f000 8087 	beq.w	800cf0e <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800ce00:	4b4c      	ldr	r3, [pc, #304]	; (800cf34 <USER_SPI_ioctl+0x2dc>)
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	f003 0302 	and.w	r3, r3, #2
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d012      	beq.n	800ce32 <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ce0c:	7dbb      	ldrb	r3, [r7, #22]
 800ce0e:	005b      	lsls	r3, r3, #1
 800ce10:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ce14:	7dfa      	ldrb	r2, [r7, #23]
 800ce16:	09d2      	lsrs	r2, r2, #7
 800ce18:	b2d2      	uxtb	r2, r2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	1c5a      	adds	r2, r3, #1
 800ce1e:	7e7b      	ldrb	r3, [r7, #25]
 800ce20:	099b      	lsrs	r3, r3, #6
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	3b01      	subs	r3, #1
 800ce26:	fa02 f303 	lsl.w	r3, r2, r3
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	601a      	str	r2, [r3, #0]
 800ce30:	e013      	b.n	800ce5a <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800ce32:	7dbb      	ldrb	r3, [r7, #22]
 800ce34:	109b      	asrs	r3, r3, #2
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	f003 031f 	and.w	r3, r3, #31
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	7dfa      	ldrb	r2, [r7, #23]
 800ce40:	00d2      	lsls	r2, r2, #3
 800ce42:	f002 0218 	and.w	r2, r2, #24
 800ce46:	7df9      	ldrb	r1, [r7, #23]
 800ce48:	0949      	lsrs	r1, r1, #5
 800ce4a:	b2c9      	uxtb	r1, r1
 800ce4c:	440a      	add	r2, r1
 800ce4e:	3201      	adds	r2, #1
 800ce50:	fb02 f303 	mul.w	r3, r2, r3
 800ce54:	461a      	mov	r2, r3
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800ce60:	e055      	b.n	800cf0e <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800ce62:	4b34      	ldr	r3, [pc, #208]	; (800cf34 <USER_SPI_ioctl+0x2dc>)
 800ce64:	781b      	ldrb	r3, [r3, #0]
 800ce66:	f003 0306 	and.w	r3, r3, #6
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d051      	beq.n	800cf12 <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800ce6e:	f107 020c 	add.w	r2, r7, #12
 800ce72:	79fb      	ldrb	r3, [r7, #7]
 800ce74:	210b      	movs	r1, #11
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7ff feee 	bl	800cc58 <USER_SPI_ioctl>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d149      	bne.n	800cf16 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800ce82:	7b3b      	ldrb	r3, [r7, #12]
 800ce84:	099b      	lsrs	r3, r3, #6
 800ce86:	b2db      	uxtb	r3, r3
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d104      	bne.n	800ce96 <USER_SPI_ioctl+0x23e>
 800ce8c:	7dbb      	ldrb	r3, [r7, #22]
 800ce8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d041      	beq.n	800cf1a <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	623b      	str	r3, [r7, #32]
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cea0:	6a3b      	ldr	r3, [r7, #32]
 800cea2:	685b      	ldr	r3, [r3, #4]
 800cea4:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800cea6:	4b23      	ldr	r3, [pc, #140]	; (800cf34 <USER_SPI_ioctl+0x2dc>)
 800cea8:	781b      	ldrb	r3, [r3, #0]
 800ceaa:	f003 0308 	and.w	r3, r3, #8
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d105      	bne.n	800cebe <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800ceb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb4:	025b      	lsls	r3, r3, #9
 800ceb6:	62bb      	str	r3, [r7, #40]	; 0x28
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	025b      	lsls	r3, r3, #9
 800cebc:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800cebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cec0:	2020      	movs	r0, #32
 800cec2:	f7ff fc78 	bl	800c7b6 <send_cmd>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d128      	bne.n	800cf1e <USER_SPI_ioctl+0x2c6>
 800cecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cece:	2021      	movs	r0, #33	; 0x21
 800ced0:	f7ff fc71 	bl	800c7b6 <send_cmd>
 800ced4:	4603      	mov	r3, r0
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d121      	bne.n	800cf1e <USER_SPI_ioctl+0x2c6>
 800ceda:	2100      	movs	r1, #0
 800cedc:	2026      	movs	r0, #38	; 0x26
 800cede:	f7ff fc6a 	bl	800c7b6 <send_cmd>
 800cee2:	4603      	mov	r3, r0
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d11a      	bne.n	800cf1e <USER_SPI_ioctl+0x2c6>
 800cee8:	f247 5030 	movw	r0, #30000	; 0x7530
 800ceec:	f7ff fbbd 	bl	800c66a <wait_ready>
 800cef0:	4603      	mov	r3, r0
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d013      	beq.n	800cf1e <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800cef6:	2300      	movs	r3, #0
 800cef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800cefc:	e00f      	b.n	800cf1e <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800cefe:	2304      	movs	r3, #4
 800cf00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf04:	e00c      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        break;
 800cf06:	bf00      	nop
 800cf08:	e00a      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        break;
 800cf0a:	bf00      	nop
 800cf0c:	e008      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        break;
 800cf0e:	bf00      	nop
 800cf10:	e006      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800cf12:	bf00      	nop
 800cf14:	e004      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800cf16:	bf00      	nop
 800cf18:	e002      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800cf1a:	bf00      	nop
 800cf1c:	e000      	b.n	800cf20 <USER_SPI_ioctl+0x2c8>
        break;
 800cf1e:	bf00      	nop
    }

    despiselect();
 800cf20:	f7ff fbc6 	bl	800c6b0 <despiselect>

    return res;
 800cf24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cf28:	4618      	mov	r0, r3
 800cf2a:	3730      	adds	r7, #48	; 0x30
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	2000029c 	.word	0x2000029c
 800cf34:	2000087c 	.word	0x2000087c

0800cf38 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	460b      	mov	r3, r1
 800cf42:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cf44:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cf48:	f004 fcde 	bl	8011908 <malloc>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d105      	bne.n	800cf62 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cf5e:	2302      	movs	r3, #2
 800cf60:	e066      	b.n	800d030 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	7c1b      	ldrb	r3, [r3, #16]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d119      	bne.n	800cfa6 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cf72:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf76:	2202      	movs	r2, #2
 800cf78:	2181      	movs	r1, #129	; 0x81
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f004 facd 	bl	801151a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cf86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf8a:	2202      	movs	r2, #2
 800cf8c:	2101      	movs	r1, #1
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f004 fac3 	bl	801151a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2201      	movs	r2, #1
 800cf98:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	2210      	movs	r2, #16
 800cfa0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cfa4:	e016      	b.n	800cfd4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cfa6:	2340      	movs	r3, #64	; 0x40
 800cfa8:	2202      	movs	r2, #2
 800cfaa:	2181      	movs	r1, #129	; 0x81
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f004 fab4 	bl	801151a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cfb8:	2340      	movs	r3, #64	; 0x40
 800cfba:	2202      	movs	r2, #2
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f004 faab 	bl	801151a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2210      	movs	r2, #16
 800cfd0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cfd4:	2308      	movs	r3, #8
 800cfd6:	2203      	movs	r2, #3
 800cfd8:	2182      	movs	r1, #130	; 0x82
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f004 fa9d 	bl	801151a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2201      	movs	r2, #1
 800cfe4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2200      	movs	r2, #0
 800cff6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2200      	movs	r2, #0
 800cffe:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7c1b      	ldrb	r3, [r3, #16]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d109      	bne.n	800d01e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d010:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d014:	2101      	movs	r1, #1
 800d016:	6878      	ldr	r0, [r7, #4]
 800d018:	f004 fb6e 	bl	80116f8 <USBD_LL_PrepareReceive>
 800d01c:	e007      	b.n	800d02e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d024:	2340      	movs	r3, #64	; 0x40
 800d026:	2101      	movs	r1, #1
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f004 fb65 	bl	80116f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d02e:	2300      	movs	r3, #0
}
 800d030:	4618      	mov	r0, r3
 800d032:	3710      	adds	r7, #16
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}

0800d038 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b084      	sub	sp, #16
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
 800d040:	460b      	mov	r3, r1
 800d042:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d048:	2181      	movs	r1, #129	; 0x81
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f004 fa8b 	bl	8011566 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d056:	2101      	movs	r1, #1
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f004 fa84 	bl	8011566 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2200      	movs	r2, #0
 800d062:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d066:	2182      	movs	r1, #130	; 0x82
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f004 fa7c 	bl	8011566 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00e      	beq.n	800d0a6 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d08e:	685b      	ldr	r3, [r3, #4]
 800d090:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d098:	4618      	mov	r0, r3
 800d09a:	f004 fc3d 	bl	8011918 <free>
    pdev->pClassData = NULL;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800d0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	3710      	adds	r7, #16
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b086      	sub	sp, #24
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d03a      	beq.n	800d150 <USBD_CDC_Setup+0xa0>
 800d0da:	2b20      	cmp	r3, #32
 800d0dc:	f040 8097 	bne.w	800d20e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	88db      	ldrh	r3, [r3, #6]
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d029      	beq.n	800d13c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800d0e8:	683b      	ldr	r3, [r7, #0]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	b25b      	sxtb	r3, r3
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	da11      	bge.n	800d116 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d0f8:	689b      	ldr	r3, [r3, #8]
 800d0fa:	683a      	ldr	r2, [r7, #0]
 800d0fc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800d0fe:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	88d2      	ldrh	r2, [r2, #6]
 800d104:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d106:	6939      	ldr	r1, [r7, #16]
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	88db      	ldrh	r3, [r3, #6]
 800d10c:	461a      	mov	r2, r3
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f001 fac7 	bl	800e6a2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800d114:	e082      	b.n	800d21c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	785a      	ldrb	r2, [r3, #1]
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800d120:	683b      	ldr	r3, [r7, #0]
 800d122:	88db      	ldrh	r3, [r3, #6]
 800d124:	b2da      	uxtb	r2, r3
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d12c:	6939      	ldr	r1, [r7, #16]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	461a      	mov	r2, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f001 fae0 	bl	800e6fa <USBD_CtlPrepareRx>
    break;
 800d13a:	e06f      	b.n	800d21c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	683a      	ldr	r2, [r7, #0]
 800d146:	7850      	ldrb	r0, [r2, #1]
 800d148:	2200      	movs	r2, #0
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	4798      	blx	r3
    break;
 800d14e:	e065      	b.n	800d21c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	785b      	ldrb	r3, [r3, #1]
 800d154:	2b0b      	cmp	r3, #11
 800d156:	d84f      	bhi.n	800d1f8 <USBD_CDC_Setup+0x148>
 800d158:	a201      	add	r2, pc, #4	; (adr r2, 800d160 <USBD_CDC_Setup+0xb0>)
 800d15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d15e:	bf00      	nop
 800d160:	0800d191 	.word	0x0800d191
 800d164:	0800d207 	.word	0x0800d207
 800d168:	0800d1f9 	.word	0x0800d1f9
 800d16c:	0800d1f9 	.word	0x0800d1f9
 800d170:	0800d1f9 	.word	0x0800d1f9
 800d174:	0800d1f9 	.word	0x0800d1f9
 800d178:	0800d1f9 	.word	0x0800d1f9
 800d17c:	0800d1f9 	.word	0x0800d1f9
 800d180:	0800d1f9 	.word	0x0800d1f9
 800d184:	0800d1f9 	.word	0x0800d1f9
 800d188:	0800d1b9 	.word	0x0800d1b9
 800d18c:	0800d1e1 	.word	0x0800d1e1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d196:	2b03      	cmp	r3, #3
 800d198:	d107      	bne.n	800d1aa <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d19a:	f107 030c 	add.w	r3, r7, #12
 800d19e:	2202      	movs	r2, #2
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f001 fa7d 	bl	800e6a2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1a8:	e030      	b.n	800d20c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d1aa:	6839      	ldr	r1, [r7, #0]
 800d1ac:	6878      	ldr	r0, [r7, #4]
 800d1ae:	f001 fa07 	bl	800e5c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	75fb      	strb	r3, [r7, #23]
      break;
 800d1b6:	e029      	b.n	800d20c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1be:	2b03      	cmp	r3, #3
 800d1c0:	d107      	bne.n	800d1d2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1c2:	f107 030f 	add.w	r3, r7, #15
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	4619      	mov	r1, r3
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 fa69 	bl	800e6a2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800d1d0:	e01c      	b.n	800d20c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800d1d2:	6839      	ldr	r1, [r7, #0]
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f001 f9f3 	bl	800e5c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1da:	2303      	movs	r3, #3
 800d1dc:	75fb      	strb	r3, [r7, #23]
      break;
 800d1de:	e015      	b.n	800d20c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1e6:	2b03      	cmp	r3, #3
 800d1e8:	d00f      	beq.n	800d20a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800d1ea:	6839      	ldr	r1, [r7, #0]
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 f9e7 	bl	800e5c0 <USBD_CtlError>
        ret = USBD_FAIL;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800d1f6:	e008      	b.n	800d20a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f001 f9e0 	bl	800e5c0 <USBD_CtlError>
      ret = USBD_FAIL;
 800d200:	2303      	movs	r3, #3
 800d202:	75fb      	strb	r3, [r7, #23]
      break;
 800d204:	e002      	b.n	800d20c <USBD_CDC_Setup+0x15c>
      break;
 800d206:	bf00      	nop
 800d208:	e008      	b.n	800d21c <USBD_CDC_Setup+0x16c>
      break;
 800d20a:	bf00      	nop
    }
    break;
 800d20c:	e006      	b.n	800d21c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800d20e:	6839      	ldr	r1, [r7, #0]
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f001 f9d5 	bl	800e5c0 <USBD_CtlError>
    ret = USBD_FAIL;
 800d216:	2303      	movs	r3, #3
 800d218:	75fb      	strb	r3, [r7, #23]
    break;
 800d21a:	bf00      	nop
  }

  return (uint8_t)ret;
 800d21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3718      	adds	r7, #24
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop

0800d228 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	460b      	mov	r3, r1
 800d232:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d23a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d242:	2b00      	cmp	r3, #0
 800d244:	d101      	bne.n	800d24a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d246:	2303      	movs	r3, #3
 800d248:	e049      	b.n	800d2de <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d250:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d252:	78fa      	ldrb	r2, [r7, #3]
 800d254:	6879      	ldr	r1, [r7, #4]
 800d256:	4613      	mov	r3, r2
 800d258:	009b      	lsls	r3, r3, #2
 800d25a:	4413      	add	r3, r2
 800d25c:	009b      	lsls	r3, r3, #2
 800d25e:	440b      	add	r3, r1
 800d260:	3318      	adds	r3, #24
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d029      	beq.n	800d2bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d268:	78fa      	ldrb	r2, [r7, #3]
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	3318      	adds	r3, #24
 800d278:	681a      	ldr	r2, [r3, #0]
 800d27a:	78f9      	ldrb	r1, [r7, #3]
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	460b      	mov	r3, r1
 800d280:	00db      	lsls	r3, r3, #3
 800d282:	1a5b      	subs	r3, r3, r1
 800d284:	009b      	lsls	r3, r3, #2
 800d286:	4403      	add	r3, r0
 800d288:	3344      	adds	r3, #68	; 0x44
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d290:	fb03 f301 	mul.w	r3, r3, r1
 800d294:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d296:	2b00      	cmp	r3, #0
 800d298:	d110      	bne.n	800d2bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d29a:	78fa      	ldrb	r2, [r7, #3]
 800d29c:	6879      	ldr	r1, [r7, #4]
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	440b      	add	r3, r1
 800d2a8:	3318      	adds	r3, #24
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d2ae:	78f9      	ldrb	r1, [r7, #3]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f004 f9fe 	bl	80116b6 <USBD_LL_Transmit>
 800d2ba:	e00f      	b.n	800d2dc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d2d2:	68ba      	ldr	r2, [r7, #8]
 800d2d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d2d8:	78fa      	ldrb	r2, [r7, #3]
 800d2da:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800d2dc:	2300      	movs	r3, #0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	3710      	adds	r7, #16
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}

0800d2e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d2e6:	b580      	push	{r7, lr}
 800d2e8:	b084      	sub	sp, #16
 800d2ea:	af00      	add	r7, sp, #0
 800d2ec:	6078      	str	r0, [r7, #4]
 800d2ee:	460b      	mov	r3, r1
 800d2f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d2f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d304:	2303      	movs	r3, #3
 800d306:	e015      	b.n	800d334 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d308:	78fb      	ldrb	r3, [r7, #3]
 800d30a:	4619      	mov	r1, r3
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f004 fa14 	bl	801173a <USBD_LL_GetRxDataSize>
 800d312:	4602      	mov	r2, r0
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d320:	68db      	ldr	r3, [r3, #12]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d328:	68fa      	ldr	r2, [r7, #12]
 800d32a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d32e:	4611      	mov	r1, r2
 800d330:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d332:	2300      	movs	r3, #0
}
 800d334:	4618      	mov	r0, r3
 800d336:	3710      	adds	r7, #16
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}

0800d33c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d34a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d352:	2b00      	cmp	r3, #0
 800d354:	d015      	beq.n	800d382 <USBD_CDC_EP0_RxReady+0x46>
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d35c:	2bff      	cmp	r3, #255	; 0xff
 800d35e:	d010      	beq.n	800d382 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	68fa      	ldr	r2, [r7, #12]
 800d36a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d36e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d370:	68fa      	ldr	r2, [r7, #12]
 800d372:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d376:	b292      	uxth	r2, r2
 800d378:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	22ff      	movs	r2, #255	; 0xff
 800d37e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2243      	movs	r2, #67	; 0x43
 800d398:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d39a:	4b03      	ldr	r3, [pc, #12]	; (800d3a8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	370c      	adds	r7, #12
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	20000328 	.word	0x20000328

0800d3ac <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d3ac:	b480      	push	{r7}
 800d3ae:	b083      	sub	sp, #12
 800d3b0:	af00      	add	r7, sp, #0
 800d3b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	2243      	movs	r2, #67	; 0x43
 800d3b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d3ba:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	200002e4 	.word	0x200002e4

0800d3cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3cc:	b480      	push	{r7}
 800d3ce:	b083      	sub	sp, #12
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2243      	movs	r2, #67	; 0x43
 800d3d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d3da:	4b03      	ldr	r3, [pc, #12]	; (800d3e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d3dc:	4618      	mov	r0, r3
 800d3de:	370c      	adds	r7, #12
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	2000036c 	.word	0x2000036c

0800d3ec <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	220a      	movs	r2, #10
 800d3f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d3fa:	4b03      	ldr	r3, [pc, #12]	; (800d408 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	370c      	adds	r7, #12
 800d400:	46bd      	mov	sp, r7
 800d402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d406:	4770      	bx	lr
 800d408:	200002a0 	.word	0x200002a0

0800d40c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d101      	bne.n	800d420 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d41c:	2303      	movs	r3, #3
 800d41e:	e004      	b.n	800d42a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d428:	2300      	movs	r3, #0
}
 800d42a:	4618      	mov	r0, r3
 800d42c:	370c      	adds	r7, #12
 800d42e:	46bd      	mov	sp, r7
 800d430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d434:	4770      	bx	lr

0800d436 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d436:	b480      	push	{r7}
 800d438:	b087      	sub	sp, #28
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	60f8      	str	r0, [r7, #12]
 800d43e:	60b9      	str	r1, [r7, #8]
 800d440:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d448:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	68ba      	ldr	r2, [r7, #8]
 800d44e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	687a      	ldr	r2, [r7, #4]
 800d456:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d45a:	2300      	movs	r3, #0
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	371c      	adds	r7, #28
 800d460:	46bd      	mov	sp, r7
 800d462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d466:	4770      	bx	lr

0800d468 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d478:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	683a      	ldr	r2, [r7, #0]
 800d47e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d482:	2300      	movs	r3, #0
}
 800d484:	4618      	mov	r0, r3
 800d486:	3714      	adds	r7, #20
 800d488:	46bd      	mov	sp, r7
 800d48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48e:	4770      	bx	lr

0800d490 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d49e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e01a      	b.n	800d4e8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d114      	bne.n	800d4e6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d4da:	2181      	movs	r1, #129	; 0x81
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f004 f8ea 	bl	80116b6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	3710      	adds	r7, #16
 800d4ec:	46bd      	mov	sp, r7
 800d4ee:	bd80      	pop	{r7, pc}

0800d4f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d506:	2b00      	cmp	r3, #0
 800d508:	d101      	bne.n	800d50e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d50a:	2303      	movs	r3, #3
 800d50c:	e016      	b.n	800d53c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	7c1b      	ldrb	r3, [r3, #16]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d109      	bne.n	800d52a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d51c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d520:	2101      	movs	r1, #1
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f004 f8e8 	bl	80116f8 <USBD_LL_PrepareReceive>
 800d528:	e007      	b.n	800d53a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d530:	2340      	movs	r3, #64	; 0x40
 800d532:	2101      	movs	r1, #1
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f004 f8df 	bl	80116f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b086      	sub	sp, #24
 800d548:	af00      	add	r7, sp, #0
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	4613      	mov	r3, r2
 800d550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d101      	bne.n	800d55c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d558:	2303      	movs	r3, #3
 800d55a:	e025      	b.n	800d5a8 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	2200      	movs	r2, #0
 800d56a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800d574:	2b00      	cmp	r3, #0
 800d576:	d003      	beq.n	800d580 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d580:	68bb      	ldr	r3, [r7, #8]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d003      	beq.n	800d58e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2201      	movs	r2, #1
 800d592:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	79fa      	ldrb	r2, [r7, #7]
 800d59a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d59c:	68f8      	ldr	r0, [r7, #12]
 800d59e:	f003 ff55 	bl	801144c <USBD_LL_Init>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	3718      	adds	r7, #24
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}

0800d5b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d101      	bne.n	800d5c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d5c4:	2303      	movs	r3, #3
 800d5c6:	e010      	b.n	800d5ea <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	683a      	ldr	r2, [r7, #0]
 800d5cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d8:	f107 020e 	add.w	r2, r7, #14
 800d5dc:	4610      	mov	r0, r2
 800d5de:	4798      	blx	r3
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b082      	sub	sp, #8
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f003 ff72 	bl	80114e4 <USBD_LL_Start>
 800d600:	4603      	mov	r3, r0
}
 800d602:	4618      	mov	r0, r3
 800d604:	3708      	adds	r7, #8
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}

0800d60a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b084      	sub	sp, #16
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
 800d628:	460b      	mov	r3, r1
 800d62a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d62c:	2303      	movs	r3, #3
 800d62e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d636:	2b00      	cmp	r3, #0
 800d638:	d009      	beq.n	800d64e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	78fa      	ldrb	r2, [r7, #3]
 800d644:	4611      	mov	r1, r2
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	4798      	blx	r3
 800d64a:	4603      	mov	r3, r0
 800d64c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d650:	4618      	mov	r0, r3
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	460b      	mov	r3, r1
 800d662:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d007      	beq.n	800d67e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d674:	685b      	ldr	r3, [r3, #4]
 800d676:	78fa      	ldrb	r2, [r7, #3]
 800d678:	4611      	mov	r1, r2
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	4798      	blx	r3
  }

  return USBD_OK;
 800d67e:	2300      	movs	r3, #0
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 ff56 	bl	800e54c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d6ae:	461a      	mov	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d6bc:	f003 031f 	and.w	r3, r3, #31
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	d00e      	beq.n	800d6e2 <USBD_LL_SetupStage+0x5a>
 800d6c4:	2b01      	cmp	r3, #1
 800d6c6:	d302      	bcc.n	800d6ce <USBD_LL_SetupStage+0x46>
 800d6c8:	2b02      	cmp	r3, #2
 800d6ca:	d014      	beq.n	800d6f6 <USBD_LL_SetupStage+0x6e>
 800d6cc:	e01d      	b.n	800d70a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6d4:	4619      	mov	r1, r3
 800d6d6:	6878      	ldr	r0, [r7, #4]
 800d6d8:	f000 fa18 	bl	800db0c <USBD_StdDevReq>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	73fb      	strb	r3, [r7, #15]
      break;
 800d6e0:	e020      	b.n	800d724 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 fa7c 	bl	800dbe8 <USBD_StdItfReq>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d6f4:	e016      	b.n	800d724 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 fab8 	bl	800dc74 <USBD_StdEPReq>
 800d704:	4603      	mov	r3, r0
 800d706:	73fb      	strb	r3, [r7, #15]
      break;
 800d708:	e00c      	b.n	800d724 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d710:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d714:	b2db      	uxtb	r3, r3
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f003 ff43 	bl	80115a4 <USBD_LL_StallEP>
 800d71e:	4603      	mov	r3, r0
 800d720:	73fb      	strb	r3, [r7, #15]
      break;
 800d722:	bf00      	nop
  }

  return ret;
 800d724:	7bfb      	ldrb	r3, [r7, #15]
}
 800d726:	4618      	mov	r0, r3
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}

0800d72e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d72e:	b580      	push	{r7, lr}
 800d730:	b086      	sub	sp, #24
 800d732:	af00      	add	r7, sp, #0
 800d734:	60f8      	str	r0, [r7, #12]
 800d736:	460b      	mov	r3, r1
 800d738:	607a      	str	r2, [r7, #4]
 800d73a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d73c:	7afb      	ldrb	r3, [r7, #11]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d137      	bne.n	800d7b2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d748:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d750:	2b03      	cmp	r3, #3
 800d752:	d14a      	bne.n	800d7ea <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	689a      	ldr	r2, [r3, #8]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d913      	bls.n	800d788 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	689a      	ldr	r2, [r3, #8]
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	68db      	ldr	r3, [r3, #12]
 800d768:	1ad2      	subs	r2, r2, r3
 800d76a:	693b      	ldr	r3, [r7, #16]
 800d76c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	68da      	ldr	r2, [r3, #12]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	4293      	cmp	r3, r2
 800d778:	bf28      	it	cs
 800d77a:	4613      	movcs	r3, r2
 800d77c:	461a      	mov	r2, r3
 800d77e:	6879      	ldr	r1, [r7, #4]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f000 ffd7 	bl	800e734 <USBD_CtlContinueRx>
 800d786:	e030      	b.n	800d7ea <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d78e:	691b      	ldr	r3, [r3, #16]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00a      	beq.n	800d7aa <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d79a:	2b03      	cmp	r3, #3
 800d79c:	d105      	bne.n	800d7aa <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7a4:	691b      	ldr	r3, [r3, #16]
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d7aa:	68f8      	ldr	r0, [r7, #12]
 800d7ac:	f000 ffd3 	bl	800e756 <USBD_CtlSendStatus>
 800d7b0:	e01b      	b.n	800d7ea <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7b8:	699b      	ldr	r3, [r3, #24]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d013      	beq.n	800d7e6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d10e      	bne.n	800d7e6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	7afa      	ldrb	r2, [r7, #11]
 800d7d2:	4611      	mov	r1, r2
 800d7d4:	68f8      	ldr	r0, [r7, #12]
 800d7d6:	4798      	blx	r3
 800d7d8:	4603      	mov	r3, r0
 800d7da:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d003      	beq.n	800d7ea <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d7e2:	7dfb      	ldrb	r3, [r7, #23]
 800d7e4:	e002      	b.n	800d7ec <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d7e6:	2303      	movs	r3, #3
 800d7e8:	e000      	b.n	800d7ec <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d7ea:	2300      	movs	r3, #0
}
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	3718      	adds	r7, #24
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}

0800d7f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	607a      	str	r2, [r7, #4]
 800d800:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d802:	7afb      	ldrb	r3, [r7, #11]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d16a      	bne.n	800d8de <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	3314      	adds	r3, #20
 800d80c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d814:	2b02      	cmp	r3, #2
 800d816:	d155      	bne.n	800d8c4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	689a      	ldr	r2, [r3, #8]
 800d81c:	693b      	ldr	r3, [r7, #16]
 800d81e:	68db      	ldr	r3, [r3, #12]
 800d820:	429a      	cmp	r2, r3
 800d822:	d914      	bls.n	800d84e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	689a      	ldr	r2, [r3, #8]
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	68db      	ldr	r3, [r3, #12]
 800d82c:	1ad2      	subs	r2, r2, r3
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	689b      	ldr	r3, [r3, #8]
 800d836:	461a      	mov	r2, r3
 800d838:	6879      	ldr	r1, [r7, #4]
 800d83a:	68f8      	ldr	r0, [r7, #12]
 800d83c:	f000 ff4c 	bl	800e6d8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d840:	2300      	movs	r3, #0
 800d842:	2200      	movs	r2, #0
 800d844:	2100      	movs	r1, #0
 800d846:	68f8      	ldr	r0, [r7, #12]
 800d848:	f003 ff56 	bl	80116f8 <USBD_LL_PrepareReceive>
 800d84c:	e03a      	b.n	800d8c4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	68da      	ldr	r2, [r3, #12]
 800d852:	693b      	ldr	r3, [r7, #16]
 800d854:	689b      	ldr	r3, [r3, #8]
 800d856:	429a      	cmp	r2, r3
 800d858:	d11c      	bne.n	800d894 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d85a:	693b      	ldr	r3, [r7, #16]
 800d85c:	685a      	ldr	r2, [r3, #4]
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d862:	429a      	cmp	r2, r3
 800d864:	d316      	bcc.n	800d894 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	685a      	ldr	r2, [r3, #4]
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d870:	429a      	cmp	r2, r3
 800d872:	d20f      	bcs.n	800d894 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d874:	2200      	movs	r2, #0
 800d876:	2100      	movs	r1, #0
 800d878:	68f8      	ldr	r0, [r7, #12]
 800d87a:	f000 ff2d 	bl	800e6d8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	2200      	movs	r2, #0
 800d882:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d886:	2300      	movs	r3, #0
 800d888:	2200      	movs	r2, #0
 800d88a:	2100      	movs	r1, #0
 800d88c:	68f8      	ldr	r0, [r7, #12]
 800d88e:	f003 ff33 	bl	80116f8 <USBD_LL_PrepareReceive>
 800d892:	e017      	b.n	800d8c4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d89a:	68db      	ldr	r3, [r3, #12]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d00a      	beq.n	800d8b6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d105      	bne.n	800d8b6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b0:	68db      	ldr	r3, [r3, #12]
 800d8b2:	68f8      	ldr	r0, [r7, #12]
 800d8b4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8b6:	2180      	movs	r1, #128	; 0x80
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f003 fe73 	bl	80115a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f000 ff5c 	bl	800e77c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d123      	bne.n	800d916 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d8ce:	68f8      	ldr	r0, [r7, #12]
 800d8d0:	f7ff fe9b 	bl	800d60a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d8dc:	e01b      	b.n	800d916 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d013      	beq.n	800d912 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d10e      	bne.n	800d912 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	7afa      	ldrb	r2, [r7, #11]
 800d8fe:	4611      	mov	r1, r2
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	4798      	blx	r3
 800d904:	4603      	mov	r3, r0
 800d906:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d908:	7dfb      	ldrb	r3, [r7, #23]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d003      	beq.n	800d916 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d90e:	7dfb      	ldrb	r3, [r7, #23]
 800d910:	e002      	b.n	800d918 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d912:	2303      	movs	r3, #3
 800d914:	e000      	b.n	800d918 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d916:	2300      	movs	r3, #0
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3718      	adds	r7, #24
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}

0800d920 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b082      	sub	sp, #8
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2200      	movs	r2, #0
 800d934:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2200      	movs	r2, #0
 800d93c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d009      	beq.n	800d964 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	6852      	ldr	r2, [r2, #4]
 800d95c:	b2d2      	uxtb	r2, r2
 800d95e:	4611      	mov	r1, r2
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d964:	2340      	movs	r3, #64	; 0x40
 800d966:	2200      	movs	r2, #0
 800d968:	2100      	movs	r1, #0
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f003 fdd5 	bl	801151a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	2201      	movs	r2, #1
 800d974:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	2240      	movs	r2, #64	; 0x40
 800d97c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d980:	2340      	movs	r3, #64	; 0x40
 800d982:	2200      	movs	r2, #0
 800d984:	2180      	movs	r1, #128	; 0x80
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f003 fdc7 	bl	801151a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2201      	movs	r2, #1
 800d990:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2240      	movs	r2, #64	; 0x40
 800d996:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d998:	2300      	movs	r3, #0
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3708      	adds	r7, #8
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d9a2:	b480      	push	{r7}
 800d9a4:	b083      	sub	sp, #12
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
 800d9aa:	460b      	mov	r3, r1
 800d9ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	78fa      	ldrb	r2, [r7, #3]
 800d9b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d9b4:	2300      	movs	r3, #0
}
 800d9b6:	4618      	mov	r0, r3
 800d9b8:	370c      	adds	r7, #12
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c0:	4770      	bx	lr

0800d9c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2204      	movs	r2, #4
 800d9da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d9de:	2300      	movs	r3, #0
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	370c      	adds	r7, #12
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ea:	4770      	bx	lr

0800d9ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9fa:	2b04      	cmp	r3, #4
 800d9fc:	d105      	bne.n	800da0a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800da0a:	2300      	movs	r3, #0
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da26:	2b03      	cmp	r3, #3
 800da28:	d10b      	bne.n	800da42 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da30:	69db      	ldr	r3, [r3, #28]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d005      	beq.n	800da42 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da3c:	69db      	ldr	r3, [r3, #28]
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3708      	adds	r7, #8
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800da4c:	b480      	push	{r7}
 800da4e:	b083      	sub	sp, #12
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
 800da54:	460b      	mov	r3, r1
 800da56:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800da58:	2300      	movs	r3, #0
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
 800da6e:	460b      	mov	r3, r1
 800da70:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800da72:	2300      	movs	r3, #0
}
 800da74:	4618      	mov	r0, r3
 800da76:	370c      	adds	r7, #12
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da80:	b480      	push	{r7}
 800da82:	b083      	sub	sp, #12
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr

0800da96 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daac:	2b00      	cmp	r3, #0
 800daae:	d009      	beq.n	800dac4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	6852      	ldr	r2, [r2, #4]
 800dabc:	b2d2      	uxtb	r2, r2
 800dabe:	4611      	mov	r1, r2
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	4798      	blx	r3
  }

  return USBD_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3708      	adds	r7, #8
 800daca:	46bd      	mov	sp, r7
 800dacc:	bd80      	pop	{r7, pc}

0800dace <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dace:	b480      	push	{r7}
 800dad0:	b087      	sub	sp, #28
 800dad2:	af00      	add	r7, sp, #0
 800dad4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	781b      	ldrb	r3, [r3, #0]
 800dade:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	3301      	adds	r3, #1
 800dae4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800daec:	8a3b      	ldrh	r3, [r7, #16]
 800daee:	021b      	lsls	r3, r3, #8
 800daf0:	b21a      	sxth	r2, r3
 800daf2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800daf6:	4313      	orrs	r3, r2
 800daf8:	b21b      	sxth	r3, r3
 800dafa:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dafc:	89fb      	ldrh	r3, [r7, #14]
}
 800dafe:	4618      	mov	r0, r3
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
	...

0800db0c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800db16:	2300      	movs	r3, #0
 800db18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	781b      	ldrb	r3, [r3, #0]
 800db1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db22:	2b20      	cmp	r3, #32
 800db24:	d004      	beq.n	800db30 <USBD_StdDevReq+0x24>
 800db26:	2b40      	cmp	r3, #64	; 0x40
 800db28:	d002      	beq.n	800db30 <USBD_StdDevReq+0x24>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d00a      	beq.n	800db44 <USBD_StdDevReq+0x38>
 800db2e:	e050      	b.n	800dbd2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	4798      	blx	r3
 800db3e:	4603      	mov	r3, r0
 800db40:	73fb      	strb	r3, [r7, #15]
    break;
 800db42:	e04b      	b.n	800dbdc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800db44:	683b      	ldr	r3, [r7, #0]
 800db46:	785b      	ldrb	r3, [r3, #1]
 800db48:	2b09      	cmp	r3, #9
 800db4a:	d83c      	bhi.n	800dbc6 <USBD_StdDevReq+0xba>
 800db4c:	a201      	add	r2, pc, #4	; (adr r2, 800db54 <USBD_StdDevReq+0x48>)
 800db4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db52:	bf00      	nop
 800db54:	0800dba9 	.word	0x0800dba9
 800db58:	0800dbbd 	.word	0x0800dbbd
 800db5c:	0800dbc7 	.word	0x0800dbc7
 800db60:	0800dbb3 	.word	0x0800dbb3
 800db64:	0800dbc7 	.word	0x0800dbc7
 800db68:	0800db87 	.word	0x0800db87
 800db6c:	0800db7d 	.word	0x0800db7d
 800db70:	0800dbc7 	.word	0x0800dbc7
 800db74:	0800db9f 	.word	0x0800db9f
 800db78:	0800db91 	.word	0x0800db91
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800db7c:	6839      	ldr	r1, [r7, #0]
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f000 f9ce 	bl	800df20 <USBD_GetDescriptor>
      break;
 800db84:	e024      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800db86:	6839      	ldr	r1, [r7, #0]
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 fb5d 	bl	800e248 <USBD_SetAddress>
      break;
 800db8e:	e01f      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 fb9a 	bl	800e2cc <USBD_SetConfig>
 800db98:	4603      	mov	r3, r0
 800db9a:	73fb      	strb	r3, [r7, #15]
      break;
 800db9c:	e018      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800db9e:	6839      	ldr	r1, [r7, #0]
 800dba0:	6878      	ldr	r0, [r7, #4]
 800dba2:	f000 fc37 	bl	800e414 <USBD_GetConfig>
      break;
 800dba6:	e013      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fc66 	bl	800e47c <USBD_GetStatus>
      break;
 800dbb0:	e00e      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800dbb2:	6839      	ldr	r1, [r7, #0]
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fc94 	bl	800e4e2 <USBD_SetFeature>
      break;
 800dbba:	e009      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800dbbc:	6839      	ldr	r1, [r7, #0]
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 fca3 	bl	800e50a <USBD_ClrFeature>
      break;
 800dbc4:	e004      	b.n	800dbd0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 fcf9 	bl	800e5c0 <USBD_CtlError>
      break;
 800dbce:	bf00      	nop
    }
    break;
 800dbd0:	e004      	b.n	800dbdc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fcf3 	bl	800e5c0 <USBD_CtlError>
    break;
 800dbda:	bf00      	nop
  }

  return ret;
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop

0800dbe8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbfe:	2b20      	cmp	r3, #32
 800dc00:	d003      	beq.n	800dc0a <USBD_StdItfReq+0x22>
 800dc02:	2b40      	cmp	r3, #64	; 0x40
 800dc04:	d001      	beq.n	800dc0a <USBD_StdItfReq+0x22>
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d12a      	bne.n	800dc60 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc10:	3b01      	subs	r3, #1
 800dc12:	2b02      	cmp	r3, #2
 800dc14:	d81d      	bhi.n	800dc52 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	889b      	ldrh	r3, [r3, #4]
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	2b01      	cmp	r3, #1
 800dc1e:	d813      	bhi.n	800dc48 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc26:	689b      	ldr	r3, [r3, #8]
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	4798      	blx	r3
 800dc2e:	4603      	mov	r3, r0
 800dc30:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	88db      	ldrh	r3, [r3, #6]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d110      	bne.n	800dc5c <USBD_StdItfReq+0x74>
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d10d      	bne.n	800dc5c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fd88 	bl	800e756 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dc46:	e009      	b.n	800dc5c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fcb8 	bl	800e5c0 <USBD_CtlError>
      break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fcb3 	bl	800e5c0 <USBD_CtlError>
      break;
 800dc5a:	e000      	b.n	800dc5e <USBD_StdItfReq+0x76>
      break;
 800dc5c:	bf00      	nop
    }
    break;
 800dc5e:	e004      	b.n	800dc6a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fcac 	bl	800e5c0 <USBD_CtlError>
    break;
 800dc68:	bf00      	nop
  }

  return ret;
 800dc6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6c:	4618      	mov	r0, r3
 800dc6e:	3710      	adds	r7, #16
 800dc70:	46bd      	mov	sp, r7
 800dc72:	bd80      	pop	{r7, pc}

0800dc74 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	889b      	ldrh	r3, [r3, #4]
 800dc86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc90:	2b20      	cmp	r3, #32
 800dc92:	d004      	beq.n	800dc9e <USBD_StdEPReq+0x2a>
 800dc94:	2b40      	cmp	r3, #64	; 0x40
 800dc96:	d002      	beq.n	800dc9e <USBD_StdEPReq+0x2a>
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d00a      	beq.n	800dcb2 <USBD_StdEPReq+0x3e>
 800dc9c:	e135      	b.n	800df0a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	6839      	ldr	r1, [r7, #0]
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	4798      	blx	r3
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
    break;
 800dcb0:	e130      	b.n	800df14 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	785b      	ldrb	r3, [r3, #1]
 800dcb6:	2b01      	cmp	r3, #1
 800dcb8:	d03e      	beq.n	800dd38 <USBD_StdEPReq+0xc4>
 800dcba:	2b03      	cmp	r3, #3
 800dcbc:	d002      	beq.n	800dcc4 <USBD_StdEPReq+0x50>
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d077      	beq.n	800ddb2 <USBD_StdEPReq+0x13e>
 800dcc2:	e11c      	b.n	800defe <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcca:	2b02      	cmp	r3, #2
 800dccc:	d002      	beq.n	800dcd4 <USBD_StdEPReq+0x60>
 800dcce:	2b03      	cmp	r3, #3
 800dcd0:	d015      	beq.n	800dcfe <USBD_StdEPReq+0x8a>
 800dcd2:	e02b      	b.n	800dd2c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcd4:	7bbb      	ldrb	r3, [r7, #14]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d00c      	beq.n	800dcf4 <USBD_StdEPReq+0x80>
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
 800dcdc:	2b80      	cmp	r3, #128	; 0x80
 800dcde:	d009      	beq.n	800dcf4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800dce0:	7bbb      	ldrb	r3, [r7, #14]
 800dce2:	4619      	mov	r1, r3
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f003 fc5d 	bl	80115a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dcea:	2180      	movs	r1, #128	; 0x80
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f003 fc59 	bl	80115a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dcf2:	e020      	b.n	800dd36 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800dcf4:	6839      	ldr	r1, [r7, #0]
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f000 fc62 	bl	800e5c0 <USBD_CtlError>
        break;
 800dcfc:	e01b      	b.n	800dd36 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	885b      	ldrh	r3, [r3, #2]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d10e      	bne.n	800dd24 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00b      	beq.n	800dd24 <USBD_StdEPReq+0xb0>
 800dd0c:	7bbb      	ldrb	r3, [r7, #14]
 800dd0e:	2b80      	cmp	r3, #128	; 0x80
 800dd10:	d008      	beq.n	800dd24 <USBD_StdEPReq+0xb0>
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	88db      	ldrh	r3, [r3, #6]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d104      	bne.n	800dd24 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd1a:	7bbb      	ldrb	r3, [r7, #14]
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f003 fc40 	bl	80115a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f000 fd16 	bl	800e756 <USBD_CtlSendStatus>

        break;
 800dd2a:	e004      	b.n	800dd36 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fc46 	bl	800e5c0 <USBD_CtlError>
        break;
 800dd34:	bf00      	nop
      }
      break;
 800dd36:	e0e7      	b.n	800df08 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d002      	beq.n	800dd48 <USBD_StdEPReq+0xd4>
 800dd42:	2b03      	cmp	r3, #3
 800dd44:	d015      	beq.n	800dd72 <USBD_StdEPReq+0xfe>
 800dd46:	e02d      	b.n	800dda4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd48:	7bbb      	ldrb	r3, [r7, #14]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d00c      	beq.n	800dd68 <USBD_StdEPReq+0xf4>
 800dd4e:	7bbb      	ldrb	r3, [r7, #14]
 800dd50:	2b80      	cmp	r3, #128	; 0x80
 800dd52:	d009      	beq.n	800dd68 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd54:	7bbb      	ldrb	r3, [r7, #14]
 800dd56:	4619      	mov	r1, r3
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f003 fc23 	bl	80115a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd5e:	2180      	movs	r1, #128	; 0x80
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f003 fc1f 	bl	80115a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dd66:	e023      	b.n	800ddb0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800dd68:	6839      	ldr	r1, [r7, #0]
 800dd6a:	6878      	ldr	r0, [r7, #4]
 800dd6c:	f000 fc28 	bl	800e5c0 <USBD_CtlError>
        break;
 800dd70:	e01e      	b.n	800ddb0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dd72:	683b      	ldr	r3, [r7, #0]
 800dd74:	885b      	ldrh	r3, [r3, #2]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d119      	bne.n	800ddae <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800dd7a:	7bbb      	ldrb	r3, [r7, #14]
 800dd7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d004      	beq.n	800dd8e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dd84:	7bbb      	ldrb	r3, [r7, #14]
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f003 fc2a 	bl	80115e2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fce1 	bl	800e756 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	4798      	blx	r3
        }
        break;
 800dda2:	e004      	b.n	800ddae <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800dda4:	6839      	ldr	r1, [r7, #0]
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f000 fc0a 	bl	800e5c0 <USBD_CtlError>
        break;
 800ddac:	e000      	b.n	800ddb0 <USBD_StdEPReq+0x13c>
        break;
 800ddae:	bf00      	nop
      }
      break;
 800ddb0:	e0aa      	b.n	800df08 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddb8:	2b02      	cmp	r3, #2
 800ddba:	d002      	beq.n	800ddc2 <USBD_StdEPReq+0x14e>
 800ddbc:	2b03      	cmp	r3, #3
 800ddbe:	d032      	beq.n	800de26 <USBD_StdEPReq+0x1b2>
 800ddc0:	e097      	b.n	800def2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ddc2:	7bbb      	ldrb	r3, [r7, #14]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d007      	beq.n	800ddd8 <USBD_StdEPReq+0x164>
 800ddc8:	7bbb      	ldrb	r3, [r7, #14]
 800ddca:	2b80      	cmp	r3, #128	; 0x80
 800ddcc:	d004      	beq.n	800ddd8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800ddce:	6839      	ldr	r1, [r7, #0]
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 fbf5 	bl	800e5c0 <USBD_CtlError>
          break;
 800ddd6:	e091      	b.n	800defc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	da0b      	bge.n	800ddf8 <USBD_StdEPReq+0x184>
 800dde0:	7bbb      	ldrb	r3, [r7, #14]
 800dde2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dde6:	4613      	mov	r3, r2
 800dde8:	009b      	lsls	r3, r3, #2
 800ddea:	4413      	add	r3, r2
 800ddec:	009b      	lsls	r3, r3, #2
 800ddee:	3310      	adds	r3, #16
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	e00b      	b.n	800de10 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ddf8:	7bbb      	ldrb	r3, [r7, #14]
 800ddfa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddfe:	4613      	mov	r3, r2
 800de00:	009b      	lsls	r3, r3, #2
 800de02:	4413      	add	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	4413      	add	r3, r2
 800de0e:	3304      	adds	r3, #4
 800de10:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800de12:	68bb      	ldr	r3, [r7, #8]
 800de14:	2200      	movs	r2, #0
 800de16:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	2202      	movs	r2, #2
 800de1c:	4619      	mov	r1, r3
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 fc3f 	bl	800e6a2 <USBD_CtlSendData>
        break;
 800de24:	e06a      	b.n	800defc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800de26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	da11      	bge.n	800de52 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800de2e:	7bbb      	ldrb	r3, [r7, #14]
 800de30:	f003 020f 	and.w	r2, r3, #15
 800de34:	6879      	ldr	r1, [r7, #4]
 800de36:	4613      	mov	r3, r2
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	4413      	add	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	440b      	add	r3, r1
 800de40:	3324      	adds	r3, #36	; 0x24
 800de42:	881b      	ldrh	r3, [r3, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d117      	bne.n	800de78 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fbb8 	bl	800e5c0 <USBD_CtlError>
            break;
 800de50:	e054      	b.n	800defc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800de52:	7bbb      	ldrb	r3, [r7, #14]
 800de54:	f003 020f 	and.w	r2, r3, #15
 800de58:	6879      	ldr	r1, [r7, #4]
 800de5a:	4613      	mov	r3, r2
 800de5c:	009b      	lsls	r3, r3, #2
 800de5e:	4413      	add	r3, r2
 800de60:	009b      	lsls	r3, r3, #2
 800de62:	440b      	add	r3, r1
 800de64:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de68:	881b      	ldrh	r3, [r3, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d104      	bne.n	800de78 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800de6e:	6839      	ldr	r1, [r7, #0]
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	f000 fba5 	bl	800e5c0 <USBD_CtlError>
            break;
 800de76:	e041      	b.n	800defc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	da0b      	bge.n	800de98 <USBD_StdEPReq+0x224>
 800de80:	7bbb      	ldrb	r3, [r7, #14]
 800de82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de86:	4613      	mov	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4413      	add	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	3310      	adds	r3, #16
 800de90:	687a      	ldr	r2, [r7, #4]
 800de92:	4413      	add	r3, r2
 800de94:	3304      	adds	r3, #4
 800de96:	e00b      	b.n	800deb0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800de98:	7bbb      	ldrb	r3, [r7, #14]
 800de9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de9e:	4613      	mov	r3, r2
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	4413      	add	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deaa:	687a      	ldr	r2, [r7, #4]
 800deac:	4413      	add	r3, r2
 800deae:	3304      	adds	r3, #4
 800deb0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800deb2:	7bbb      	ldrb	r3, [r7, #14]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d002      	beq.n	800debe <USBD_StdEPReq+0x24a>
 800deb8:	7bbb      	ldrb	r3, [r7, #14]
 800deba:	2b80      	cmp	r3, #128	; 0x80
 800debc:	d103      	bne.n	800dec6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	2200      	movs	r2, #0
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	e00e      	b.n	800dee4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dec6:	7bbb      	ldrb	r3, [r7, #14]
 800dec8:	4619      	mov	r1, r3
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f003 fba8 	bl	8011620 <USBD_LL_IsStallEP>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d003      	beq.n	800dede <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2201      	movs	r2, #1
 800deda:	601a      	str	r2, [r3, #0]
 800dedc:	e002      	b.n	800dee4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	2200      	movs	r2, #0
 800dee2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dee4:	68bb      	ldr	r3, [r7, #8]
 800dee6:	2202      	movs	r2, #2
 800dee8:	4619      	mov	r1, r3
 800deea:	6878      	ldr	r0, [r7, #4]
 800deec:	f000 fbd9 	bl	800e6a2 <USBD_CtlSendData>
          break;
 800def0:	e004      	b.n	800defc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800def2:	6839      	ldr	r1, [r7, #0]
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fb63 	bl	800e5c0 <USBD_CtlError>
        break;
 800defa:	bf00      	nop
      }
      break;
 800defc:	e004      	b.n	800df08 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800defe:	6839      	ldr	r1, [r7, #0]
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f000 fb5d 	bl	800e5c0 <USBD_CtlError>
      break;
 800df06:	bf00      	nop
    }
    break;
 800df08:	e004      	b.n	800df14 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800df0a:	6839      	ldr	r1, [r7, #0]
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fb57 	bl	800e5c0 <USBD_CtlError>
    break;
 800df12:	bf00      	nop
  }

  return ret;
 800df14:	7bfb      	ldrb	r3, [r7, #15]
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}
	...

0800df20 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
 800df28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800df2a:	2300      	movs	r3, #0
 800df2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800df2e:	2300      	movs	r3, #0
 800df30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800df32:	2300      	movs	r3, #0
 800df34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	0a1b      	lsrs	r3, r3, #8
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	3b01      	subs	r3, #1
 800df40:	2b0e      	cmp	r3, #14
 800df42:	f200 8152 	bhi.w	800e1ea <USBD_GetDescriptor+0x2ca>
 800df46:	a201      	add	r2, pc, #4	; (adr r2, 800df4c <USBD_GetDescriptor+0x2c>)
 800df48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df4c:	0800dfbd 	.word	0x0800dfbd
 800df50:	0800dfd5 	.word	0x0800dfd5
 800df54:	0800e015 	.word	0x0800e015
 800df58:	0800e1eb 	.word	0x0800e1eb
 800df5c:	0800e1eb 	.word	0x0800e1eb
 800df60:	0800e18b 	.word	0x0800e18b
 800df64:	0800e1b7 	.word	0x0800e1b7
 800df68:	0800e1eb 	.word	0x0800e1eb
 800df6c:	0800e1eb 	.word	0x0800e1eb
 800df70:	0800e1eb 	.word	0x0800e1eb
 800df74:	0800e1eb 	.word	0x0800e1eb
 800df78:	0800e1eb 	.word	0x0800e1eb
 800df7c:	0800e1eb 	.word	0x0800e1eb
 800df80:	0800e1eb 	.word	0x0800e1eb
 800df84:	0800df89 	.word	0x0800df89
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df8e:	69db      	ldr	r3, [r3, #28]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d00b      	beq.n	800dfac <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	687a      	ldr	r2, [r7, #4]
 800df9e:	7c12      	ldrb	r2, [r2, #16]
 800dfa0:	f107 0108 	add.w	r1, r7, #8
 800dfa4:	4610      	mov	r0, r2
 800dfa6:	4798      	blx	r3
 800dfa8:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800dfaa:	e126      	b.n	800e1fa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800dfac:	6839      	ldr	r1, [r7, #0]
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 fb06 	bl	800e5c0 <USBD_CtlError>
      err++;
 800dfb4:	7afb      	ldrb	r3, [r7, #11]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	72fb      	strb	r3, [r7, #11]
    break;
 800dfba:	e11e      	b.n	800e1fa <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	7c12      	ldrb	r2, [r2, #16]
 800dfc8:	f107 0108 	add.w	r1, r7, #8
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4798      	blx	r3
 800dfd0:	60f8      	str	r0, [r7, #12]
    break;
 800dfd2:	e112      	b.n	800e1fa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	7c1b      	ldrb	r3, [r3, #16]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d10d      	bne.n	800dff8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfe4:	f107 0208 	add.w	r2, r7, #8
 800dfe8:	4610      	mov	r0, r2
 800dfea:	4798      	blx	r3
 800dfec:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	3301      	adds	r3, #1
 800dff2:	2202      	movs	r2, #2
 800dff4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800dff6:	e100      	b.n	800e1fa <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e000:	f107 0208 	add.w	r2, r7, #8
 800e004:	4610      	mov	r0, r2
 800e006:	4798      	blx	r3
 800e008:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	3301      	adds	r3, #1
 800e00e:	2202      	movs	r2, #2
 800e010:	701a      	strb	r2, [r3, #0]
    break;
 800e012:	e0f2      	b.n	800e1fa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	885b      	ldrh	r3, [r3, #2]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	2b05      	cmp	r3, #5
 800e01c:	f200 80ac 	bhi.w	800e178 <USBD_GetDescriptor+0x258>
 800e020:	a201      	add	r2, pc, #4	; (adr r2, 800e028 <USBD_GetDescriptor+0x108>)
 800e022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e026:	bf00      	nop
 800e028:	0800e041 	.word	0x0800e041
 800e02c:	0800e075 	.word	0x0800e075
 800e030:	0800e0a9 	.word	0x0800e0a9
 800e034:	0800e0dd 	.word	0x0800e0dd
 800e038:	0800e111 	.word	0x0800e111
 800e03c:	0800e145 	.word	0x0800e145
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00b      	beq.n	800e064 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	687a      	ldr	r2, [r7, #4]
 800e056:	7c12      	ldrb	r2, [r2, #16]
 800e058:	f107 0108 	add.w	r1, r7, #8
 800e05c:	4610      	mov	r0, r2
 800e05e:	4798      	blx	r3
 800e060:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e062:	e091      	b.n	800e188 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e064:	6839      	ldr	r1, [r7, #0]
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 faaa 	bl	800e5c0 <USBD_CtlError>
        err++;
 800e06c:	7afb      	ldrb	r3, [r7, #11]
 800e06e:	3301      	adds	r3, #1
 800e070:	72fb      	strb	r3, [r7, #11]
      break;
 800e072:	e089      	b.n	800e188 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d00b      	beq.n	800e098 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e086:	689b      	ldr	r3, [r3, #8]
 800e088:	687a      	ldr	r2, [r7, #4]
 800e08a:	7c12      	ldrb	r2, [r2, #16]
 800e08c:	f107 0108 	add.w	r1, r7, #8
 800e090:	4610      	mov	r0, r2
 800e092:	4798      	blx	r3
 800e094:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e096:	e077      	b.n	800e188 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 fa90 	bl	800e5c0 <USBD_CtlError>
        err++;
 800e0a0:	7afb      	ldrb	r3, [r7, #11]
 800e0a2:	3301      	adds	r3, #1
 800e0a4:	72fb      	strb	r3, [r7, #11]
      break;
 800e0a6:	e06f      	b.n	800e188 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d00b      	beq.n	800e0cc <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ba:	68db      	ldr	r3, [r3, #12]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	7c12      	ldrb	r2, [r2, #16]
 800e0c0:	f107 0108 	add.w	r1, r7, #8
 800e0c4:	4610      	mov	r0, r2
 800e0c6:	4798      	blx	r3
 800e0c8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0ca:	e05d      	b.n	800e188 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e0cc:	6839      	ldr	r1, [r7, #0]
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 fa76 	bl	800e5c0 <USBD_CtlError>
        err++;
 800e0d4:	7afb      	ldrb	r3, [r7, #11]
 800e0d6:	3301      	adds	r3, #1
 800e0d8:	72fb      	strb	r3, [r7, #11]
      break;
 800e0da:	e055      	b.n	800e188 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0e2:	691b      	ldr	r3, [r3, #16]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d00b      	beq.n	800e100 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ee:	691b      	ldr	r3, [r3, #16]
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	7c12      	ldrb	r2, [r2, #16]
 800e0f4:	f107 0108 	add.w	r1, r7, #8
 800e0f8:	4610      	mov	r0, r2
 800e0fa:	4798      	blx	r3
 800e0fc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0fe:	e043      	b.n	800e188 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e100:	6839      	ldr	r1, [r7, #0]
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f000 fa5c 	bl	800e5c0 <USBD_CtlError>
        err++;
 800e108:	7afb      	ldrb	r3, [r7, #11]
 800e10a:	3301      	adds	r3, #1
 800e10c:	72fb      	strb	r3, [r7, #11]
      break;
 800e10e:	e03b      	b.n	800e188 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e116:	695b      	ldr	r3, [r3, #20]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d00b      	beq.n	800e134 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e122:	695b      	ldr	r3, [r3, #20]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	7c12      	ldrb	r2, [r2, #16]
 800e128:	f107 0108 	add.w	r1, r7, #8
 800e12c:	4610      	mov	r0, r2
 800e12e:	4798      	blx	r3
 800e130:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e132:	e029      	b.n	800e188 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e134:	6839      	ldr	r1, [r7, #0]
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 fa42 	bl	800e5c0 <USBD_CtlError>
        err++;
 800e13c:	7afb      	ldrb	r3, [r7, #11]
 800e13e:	3301      	adds	r3, #1
 800e140:	72fb      	strb	r3, [r7, #11]
      break;
 800e142:	e021      	b.n	800e188 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e14a:	699b      	ldr	r3, [r3, #24]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e156:	699b      	ldr	r3, [r3, #24]
 800e158:	687a      	ldr	r2, [r7, #4]
 800e15a:	7c12      	ldrb	r2, [r2, #16]
 800e15c:	f107 0108 	add.w	r1, r7, #8
 800e160:	4610      	mov	r0, r2
 800e162:	4798      	blx	r3
 800e164:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e166:	e00f      	b.n	800e188 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 fa28 	bl	800e5c0 <USBD_CtlError>
        err++;
 800e170:	7afb      	ldrb	r3, [r7, #11]
 800e172:	3301      	adds	r3, #1
 800e174:	72fb      	strb	r3, [r7, #11]
      break;
 800e176:	e007      	b.n	800e188 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fa20 	bl	800e5c0 <USBD_CtlError>
      err++;
 800e180:	7afb      	ldrb	r3, [r7, #11]
 800e182:	3301      	adds	r3, #1
 800e184:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e186:	bf00      	nop
    }
    break;
 800e188:	e037      	b.n	800e1fa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	7c1b      	ldrb	r3, [r3, #16]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d109      	bne.n	800e1a6 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e19a:	f107 0208 	add.w	r2, r7, #8
 800e19e:	4610      	mov	r0, r2
 800e1a0:	4798      	blx	r3
 800e1a2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e1a4:	e029      	b.n	800e1fa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	f000 fa09 	bl	800e5c0 <USBD_CtlError>
      err++;
 800e1ae:	7afb      	ldrb	r3, [r7, #11]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	72fb      	strb	r3, [r7, #11]
    break;
 800e1b4:	e021      	b.n	800e1fa <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	7c1b      	ldrb	r3, [r3, #16]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10d      	bne.n	800e1da <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c6:	f107 0208 	add.w	r2, r7, #8
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4798      	blx	r3
 800e1ce:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	2207      	movs	r2, #7
 800e1d6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e1d8:	e00f      	b.n	800e1fa <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e1da:	6839      	ldr	r1, [r7, #0]
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 f9ef 	bl	800e5c0 <USBD_CtlError>
      err++;
 800e1e2:	7afb      	ldrb	r3, [r7, #11]
 800e1e4:	3301      	adds	r3, #1
 800e1e6:	72fb      	strb	r3, [r7, #11]
    break;
 800e1e8:	e007      	b.n	800e1fa <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800e1ea:	6839      	ldr	r1, [r7, #0]
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f9e7 	bl	800e5c0 <USBD_CtlError>
    err++;
 800e1f2:	7afb      	ldrb	r3, [r7, #11]
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	72fb      	strb	r3, [r7, #11]
    break;
 800e1f8:	bf00      	nop
  }

  if (err != 0U)
 800e1fa:	7afb      	ldrb	r3, [r7, #11]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d11e      	bne.n	800e23e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	88db      	ldrh	r3, [r3, #6]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d016      	beq.n	800e236 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800e208:	893b      	ldrh	r3, [r7, #8]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00e      	beq.n	800e22c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	88da      	ldrh	r2, [r3, #6]
 800e212:	893b      	ldrh	r3, [r7, #8]
 800e214:	4293      	cmp	r3, r2
 800e216:	bf28      	it	cs
 800e218:	4613      	movcs	r3, r2
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e21e:	893b      	ldrh	r3, [r7, #8]
 800e220:	461a      	mov	r2, r3
 800e222:	68f9      	ldr	r1, [r7, #12]
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f000 fa3c 	bl	800e6a2 <USBD_CtlSendData>
 800e22a:	e009      	b.n	800e240 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e22c:	6839      	ldr	r1, [r7, #0]
 800e22e:	6878      	ldr	r0, [r7, #4]
 800e230:	f000 f9c6 	bl	800e5c0 <USBD_CtlError>
 800e234:	e004      	b.n	800e240 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f000 fa8d 	bl	800e756 <USBD_CtlSendStatus>
 800e23c:	e000      	b.n	800e240 <USBD_GetDescriptor+0x320>
    return;
 800e23e:	bf00      	nop
    }
  }
}
 800e240:	3710      	adds	r7, #16
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}
 800e246:	bf00      	nop

0800e248 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	889b      	ldrh	r3, [r3, #4]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d130      	bne.n	800e2bc <USBD_SetAddress+0x74>
 800e25a:	683b      	ldr	r3, [r7, #0]
 800e25c:	88db      	ldrh	r3, [r3, #6]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d12c      	bne.n	800e2bc <USBD_SetAddress+0x74>
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	885b      	ldrh	r3, [r3, #2]
 800e266:	2b7f      	cmp	r3, #127	; 0x7f
 800e268:	d828      	bhi.n	800e2bc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e26a:	683b      	ldr	r3, [r7, #0]
 800e26c:	885b      	ldrh	r3, [r3, #2]
 800e26e:	b2db      	uxtb	r3, r3
 800e270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e274:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e27c:	2b03      	cmp	r3, #3
 800e27e:	d104      	bne.n	800e28a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e280:	6839      	ldr	r1, [r7, #0]
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f000 f99c 	bl	800e5c0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e288:	e01c      	b.n	800e2c4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	7bfa      	ldrb	r2, [r7, #15]
 800e28e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e292:	7bfb      	ldrb	r3, [r7, #15]
 800e294:	4619      	mov	r1, r3
 800e296:	6878      	ldr	r0, [r7, #4]
 800e298:	f003 f9ee 	bl	8011678 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f000 fa5a 	bl	800e756 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e2a2:	7bfb      	ldrb	r3, [r7, #15]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d004      	beq.n	800e2b2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2b0:	e008      	b.n	800e2c4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	2201      	movs	r2, #1
 800e2b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e2ba:	e003      	b.n	800e2c4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e2bc:	6839      	ldr	r1, [r7, #0]
 800e2be:	6878      	ldr	r0, [r7, #4]
 800e2c0:	f000 f97e 	bl	800e5c0 <USBD_CtlError>
  }
}
 800e2c4:	bf00      	nop
 800e2c6:	3710      	adds	r7, #16
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b084      	sub	sp, #16
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	885b      	ldrh	r3, [r3, #2]
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	4b4b      	ldr	r3, [pc, #300]	; (800e410 <USBD_SetConfig+0x144>)
 800e2e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e2e4:	4b4a      	ldr	r3, [pc, #296]	; (800e410 <USBD_SetConfig+0x144>)
 800e2e6:	781b      	ldrb	r3, [r3, #0]
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d905      	bls.n	800e2f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 f966 	bl	800e5c0 <USBD_CtlError>
    return USBD_FAIL;
 800e2f4:	2303      	movs	r3, #3
 800e2f6:	e087      	b.n	800e408 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2fe:	2b02      	cmp	r3, #2
 800e300:	d002      	beq.n	800e308 <USBD_SetConfig+0x3c>
 800e302:	2b03      	cmp	r3, #3
 800e304:	d025      	beq.n	800e352 <USBD_SetConfig+0x86>
 800e306:	e071      	b.n	800e3ec <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e308:	4b41      	ldr	r3, [pc, #260]	; (800e410 <USBD_SetConfig+0x144>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d01c      	beq.n	800e34a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e310:	4b3f      	ldr	r3, [pc, #252]	; (800e410 <USBD_SetConfig+0x144>)
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	461a      	mov	r2, r3
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e31a:	4b3d      	ldr	r3, [pc, #244]	; (800e410 <USBD_SetConfig+0x144>)
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	4619      	mov	r1, r3
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	f7ff f97d 	bl	800d620 <USBD_SetClassConfig>
 800e326:	4603      	mov	r3, r0
 800e328:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e32a:	7bfb      	ldrb	r3, [r7, #15]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d004      	beq.n	800e33a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e330:	6839      	ldr	r1, [r7, #0]
 800e332:	6878      	ldr	r0, [r7, #4]
 800e334:	f000 f944 	bl	800e5c0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e338:	e065      	b.n	800e406 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 fa0b 	bl	800e756 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2203      	movs	r2, #3
 800e344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e348:	e05d      	b.n	800e406 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 fa03 	bl	800e756 <USBD_CtlSendStatus>
    break;
 800e350:	e059      	b.n	800e406 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e352:	4b2f      	ldr	r3, [pc, #188]	; (800e410 <USBD_SetConfig+0x144>)
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d112      	bne.n	800e380 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2202      	movs	r2, #2
 800e35e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e362:	4b2b      	ldr	r3, [pc, #172]	; (800e410 <USBD_SetConfig+0x144>)
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	461a      	mov	r2, r3
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e36c:	4b28      	ldr	r3, [pc, #160]	; (800e410 <USBD_SetConfig+0x144>)
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	4619      	mov	r1, r3
 800e372:	6878      	ldr	r0, [r7, #4]
 800e374:	f7ff f970 	bl	800d658 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 f9ec 	bl	800e756 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e37e:	e042      	b.n	800e406 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e380:	4b23      	ldr	r3, [pc, #140]	; (800e410 <USBD_SetConfig+0x144>)
 800e382:	781b      	ldrb	r3, [r3, #0]
 800e384:	461a      	mov	r2, r3
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d02a      	beq.n	800e3e4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	b2db      	uxtb	r3, r3
 800e394:	4619      	mov	r1, r3
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f7ff f95e 	bl	800d658 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e39c:	4b1c      	ldr	r3, [pc, #112]	; (800e410 <USBD_SetConfig+0x144>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	461a      	mov	r2, r3
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3a6:	4b1a      	ldr	r3, [pc, #104]	; (800e410 <USBD_SetConfig+0x144>)
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff f937 	bl	800d620 <USBD_SetClassConfig>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e3b6:	7bfb      	ldrb	r3, [r7, #15]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d00f      	beq.n	800e3dc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e3bc:	6839      	ldr	r1, [r7, #0]
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f000 f8fe 	bl	800e5c0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	685b      	ldr	r3, [r3, #4]
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7ff f943 	bl	800d658 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2202      	movs	r2, #2
 800e3d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e3da:	e014      	b.n	800e406 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f9ba 	bl	800e756 <USBD_CtlSendStatus>
    break;
 800e3e2:	e010      	b.n	800e406 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f9b6 	bl	800e756 <USBD_CtlSendStatus>
    break;
 800e3ea:	e00c      	b.n	800e406 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e3ec:	6839      	ldr	r1, [r7, #0]
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f8e6 	bl	800e5c0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e3f4:	4b06      	ldr	r3, [pc, #24]	; (800e410 <USBD_SetConfig+0x144>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff f92c 	bl	800d658 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e400:	2303      	movs	r3, #3
 800e402:	73fb      	strb	r3, [r7, #15]
    break;
 800e404:	bf00      	nop
  }

  return ret;
 800e406:	7bfb      	ldrb	r3, [r7, #15]
}
 800e408:	4618      	mov	r0, r3
 800e40a:	3710      	adds	r7, #16
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}
 800e410:	2000087d 	.word	0x2000087d

0800e414 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	88db      	ldrh	r3, [r3, #6]
 800e422:	2b01      	cmp	r3, #1
 800e424:	d004      	beq.n	800e430 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f8c9 	bl	800e5c0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e42e:	e021      	b.n	800e474 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e436:	2b01      	cmp	r3, #1
 800e438:	db17      	blt.n	800e46a <USBD_GetConfig+0x56>
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	dd02      	ble.n	800e444 <USBD_GetConfig+0x30>
 800e43e:	2b03      	cmp	r3, #3
 800e440:	d00b      	beq.n	800e45a <USBD_GetConfig+0x46>
 800e442:	e012      	b.n	800e46a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	2200      	movs	r2, #0
 800e448:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	3308      	adds	r3, #8
 800e44e:	2201      	movs	r2, #1
 800e450:	4619      	mov	r1, r3
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 f925 	bl	800e6a2 <USBD_CtlSendData>
      break;
 800e458:	e00c      	b.n	800e474 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	3304      	adds	r3, #4
 800e45e:	2201      	movs	r2, #1
 800e460:	4619      	mov	r1, r3
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f91d 	bl	800e6a2 <USBD_CtlSendData>
      break;
 800e468:	e004      	b.n	800e474 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800e46a:	6839      	ldr	r1, [r7, #0]
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f000 f8a7 	bl	800e5c0 <USBD_CtlError>
      break;
 800e472:	bf00      	nop
}
 800e474:	bf00      	nop
 800e476:	3708      	adds	r7, #8
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}

0800e47c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e48c:	3b01      	subs	r3, #1
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d81e      	bhi.n	800e4d0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e492:	683b      	ldr	r3, [r7, #0]
 800e494:	88db      	ldrh	r3, [r3, #6]
 800e496:	2b02      	cmp	r3, #2
 800e498:	d004      	beq.n	800e4a4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e49a:	6839      	ldr	r1, [r7, #0]
 800e49c:	6878      	ldr	r0, [r7, #4]
 800e49e:	f000 f88f 	bl	800e5c0 <USBD_CtlError>
      break;
 800e4a2:	e01a      	b.n	800e4da <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d005      	beq.n	800e4c0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	f043 0202 	orr.w	r2, r3, #2
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	330c      	adds	r3, #12
 800e4c4:	2202      	movs	r2, #2
 800e4c6:	4619      	mov	r1, r3
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f8ea 	bl	800e6a2 <USBD_CtlSendData>
    break;
 800e4ce:	e004      	b.n	800e4da <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e4d0:	6839      	ldr	r1, [r7, #0]
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 f874 	bl	800e5c0 <USBD_CtlError>
    break;
 800e4d8:	bf00      	nop
  }
}
 800e4da:	bf00      	nop
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}

0800e4e2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4e2:	b580      	push	{r7, lr}
 800e4e4:	b082      	sub	sp, #8
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
 800e4ea:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e4ec:	683b      	ldr	r3, [r7, #0]
 800e4ee:	885b      	ldrh	r3, [r3, #2]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	d106      	bne.n	800e502 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 f92a 	bl	800e756 <USBD_CtlSendStatus>
  }
}
 800e502:	bf00      	nop
 800e504:	3708      	adds	r7, #8
 800e506:	46bd      	mov	sp, r7
 800e508:	bd80      	pop	{r7, pc}

0800e50a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e50a:	b580      	push	{r7, lr}
 800e50c:	b082      	sub	sp, #8
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e51a:	3b01      	subs	r3, #1
 800e51c:	2b02      	cmp	r3, #2
 800e51e:	d80b      	bhi.n	800e538 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	885b      	ldrh	r3, [r3, #2]
 800e524:	2b01      	cmp	r3, #1
 800e526:	d10c      	bne.n	800e542 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2200      	movs	r2, #0
 800e52c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e530:	6878      	ldr	r0, [r7, #4]
 800e532:	f000 f910 	bl	800e756 <USBD_CtlSendStatus>
      }
      break;
 800e536:	e004      	b.n	800e542 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e538:	6839      	ldr	r1, [r7, #0]
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f840 	bl	800e5c0 <USBD_CtlError>
      break;
 800e540:	e000      	b.n	800e544 <USBD_ClrFeature+0x3a>
      break;
 800e542:	bf00      	nop
  }
}
 800e544:	bf00      	nop
 800e546:	3708      	adds	r7, #8
 800e548:	46bd      	mov	sp, r7
 800e54a:	bd80      	pop	{r7, pc}

0800e54c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b084      	sub	sp, #16
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
 800e554:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e556:	683b      	ldr	r3, [r7, #0]
 800e558:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	781a      	ldrb	r2, [r3, #0]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	3301      	adds	r3, #1
 800e566:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	781a      	ldrb	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	3301      	adds	r3, #1
 800e574:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f7ff faa9 	bl	800dace <SWAPBYTE>
 800e57c:	4603      	mov	r3, r0
 800e57e:	461a      	mov	r2, r3
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	3301      	adds	r3, #1
 800e588:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	3301      	adds	r3, #1
 800e58e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e590:	68f8      	ldr	r0, [r7, #12]
 800e592:	f7ff fa9c 	bl	800dace <SWAPBYTE>
 800e596:	4603      	mov	r3, r0
 800e598:	461a      	mov	r2, r3
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	3301      	adds	r3, #1
 800e5a8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e5aa:	68f8      	ldr	r0, [r7, #12]
 800e5ac:	f7ff fa8f 	bl	800dace <SWAPBYTE>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	461a      	mov	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	80da      	strh	r2, [r3, #6]
}
 800e5b8:	bf00      	nop
 800e5ba:	3710      	adds	r7, #16
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5ca:	2180      	movs	r1, #128	; 0x80
 800e5cc:	6878      	ldr	r0, [r7, #4]
 800e5ce:	f002 ffe9 	bl	80115a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e5d2:	2100      	movs	r1, #0
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f002 ffe5 	bl	80115a4 <USBD_LL_StallEP>
}
 800e5da:	bf00      	nop
 800e5dc:	3708      	adds	r7, #8
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b086      	sub	sp, #24
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d036      	beq.n	800e666 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e5fc:	6938      	ldr	r0, [r7, #16]
 800e5fe:	f000 f836 	bl	800e66e <USBD_GetLen>
 800e602:	4603      	mov	r3, r0
 800e604:	3301      	adds	r3, #1
 800e606:	b29b      	uxth	r3, r3
 800e608:	005b      	lsls	r3, r3, #1
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	68ba      	ldr	r2, [r7, #8]
 800e614:	4413      	add	r3, r2
 800e616:	687a      	ldr	r2, [r7, #4]
 800e618:	7812      	ldrb	r2, [r2, #0]
 800e61a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e61c:	7dfb      	ldrb	r3, [r7, #23]
 800e61e:	3301      	adds	r3, #1
 800e620:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e622:	7dfb      	ldrb	r3, [r7, #23]
 800e624:	68ba      	ldr	r2, [r7, #8]
 800e626:	4413      	add	r3, r2
 800e628:	2203      	movs	r2, #3
 800e62a:	701a      	strb	r2, [r3, #0]
  idx++;
 800e62c:	7dfb      	ldrb	r3, [r7, #23]
 800e62e:	3301      	adds	r3, #1
 800e630:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e632:	e013      	b.n	800e65c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e634:	7dfb      	ldrb	r3, [r7, #23]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	4413      	add	r3, r2
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	7812      	ldrb	r2, [r2, #0]
 800e63e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	3301      	adds	r3, #1
 800e644:	613b      	str	r3, [r7, #16]
    idx++;
 800e646:	7dfb      	ldrb	r3, [r7, #23]
 800e648:	3301      	adds	r3, #1
 800e64a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e64c:	7dfb      	ldrb	r3, [r7, #23]
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	4413      	add	r3, r2
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]
    idx++;
 800e656:	7dfb      	ldrb	r3, [r7, #23]
 800e658:	3301      	adds	r3, #1
 800e65a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d1e7      	bne.n	800e634 <USBD_GetString+0x52>
 800e664:	e000      	b.n	800e668 <USBD_GetString+0x86>
    return;
 800e666:	bf00      	nop
  }
}
 800e668:	3718      	adds	r7, #24
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}

0800e66e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e66e:	b480      	push	{r7}
 800e670:	b085      	sub	sp, #20
 800e672:	af00      	add	r7, sp, #0
 800e674:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e676:	2300      	movs	r3, #0
 800e678:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e67e:	e005      	b.n	800e68c <USBD_GetLen+0x1e>
  {
    len++;
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	3301      	adds	r3, #1
 800e684:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e686:	68bb      	ldr	r3, [r7, #8]
 800e688:	3301      	adds	r3, #1
 800e68a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1f5      	bne.n	800e680 <USBD_GetLen+0x12>
  }

  return len;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3714      	adds	r7, #20
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr

0800e6a2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e6a2:	b580      	push	{r7, lr}
 800e6a4:	b084      	sub	sp, #16
 800e6a6:	af00      	add	r7, sp, #0
 800e6a8:	60f8      	str	r0, [r7, #12]
 800e6aa:	60b9      	str	r1, [r7, #8]
 800e6ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	2202      	movs	r2, #2
 800e6b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	687a      	ldr	r2, [r7, #4]
 800e6c0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	68ba      	ldr	r2, [r7, #8]
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	68f8      	ldr	r0, [r7, #12]
 800e6ca:	f002 fff4 	bl	80116b6 <USBD_LL_Transmit>

  return USBD_OK;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3710      	adds	r7, #16
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}

0800e6d8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b084      	sub	sp, #16
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	60f8      	str	r0, [r7, #12]
 800e6e0:	60b9      	str	r1, [r7, #8]
 800e6e2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	68ba      	ldr	r2, [r7, #8]
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f002 ffe3 	bl	80116b6 <USBD_LL_Transmit>

  return USBD_OK;
 800e6f0:	2300      	movs	r3, #0
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b084      	sub	sp, #16
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	60f8      	str	r0, [r7, #12]
 800e702:	60b9      	str	r1, [r7, #8]
 800e704:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2203      	movs	r2, #3
 800e70a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	687a      	ldr	r2, [r7, #4]
 800e712:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	687a      	ldr	r2, [r7, #4]
 800e71a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	2100      	movs	r1, #0
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f002 ffe7 	bl	80116f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e72a:	2300      	movs	r3, #0
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	3710      	adds	r7, #16
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}

0800e734 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b084      	sub	sp, #16
 800e738:	af00      	add	r7, sp, #0
 800e73a:	60f8      	str	r0, [r7, #12]
 800e73c:	60b9      	str	r1, [r7, #8]
 800e73e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	68ba      	ldr	r2, [r7, #8]
 800e744:	2100      	movs	r1, #0
 800e746:	68f8      	ldr	r0, [r7, #12]
 800e748:	f002 ffd6 	bl	80116f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b082      	sub	sp, #8
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	2204      	movs	r2, #4
 800e762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e766:	2300      	movs	r3, #0
 800e768:	2200      	movs	r2, #0
 800e76a:	2100      	movs	r1, #0
 800e76c:	6878      	ldr	r0, [r7, #4]
 800e76e:	f002 ffa2 	bl	80116b6 <USBD_LL_Transmit>

  return USBD_OK;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e77c:	b580      	push	{r7, lr}
 800e77e:	b082      	sub	sp, #8
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	2205      	movs	r2, #5
 800e788:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e78c:	2300      	movs	r3, #0
 800e78e:	2200      	movs	r2, #0
 800e790:	2100      	movs	r1, #0
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f002 ffb0 	bl	80116f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e798:	2300      	movs	r3, #0
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3708      	adds	r7, #8
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	bd80      	pop	{r7, pc}
	...

0800e7a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e7a4:	b480      	push	{r7}
 800e7a6:	b087      	sub	sp, #28
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e7ba:	4b1f      	ldr	r3, [pc, #124]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7bc:	7a5b      	ldrb	r3, [r3, #9]
 800e7be:	b2db      	uxtb	r3, r3
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d131      	bne.n	800e828 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e7c4:	4b1c      	ldr	r3, [pc, #112]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7c6:	7a5b      	ldrb	r3, [r3, #9]
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	461a      	mov	r2, r3
 800e7cc:	4b1a      	ldr	r3, [pc, #104]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e7d2:	4b19      	ldr	r3, [pc, #100]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7d4:	7a5b      	ldrb	r3, [r3, #9]
 800e7d6:	b2db      	uxtb	r3, r3
 800e7d8:	4a17      	ldr	r2, [pc, #92]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4413      	add	r3, r2
 800e7de:	68fa      	ldr	r2, [r7, #12]
 800e7e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e7e2:	4b15      	ldr	r3, [pc, #84]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7e4:	7a5b      	ldrb	r3, [r3, #9]
 800e7e6:	b2db      	uxtb	r3, r3
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	4b13      	ldr	r3, [pc, #76]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7ec:	4413      	add	r3, r2
 800e7ee:	79fa      	ldrb	r2, [r7, #7]
 800e7f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e7f2:	4b11      	ldr	r3, [pc, #68]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7f4:	7a5b      	ldrb	r3, [r3, #9]
 800e7f6:	b2db      	uxtb	r3, r3
 800e7f8:	1c5a      	adds	r2, r3, #1
 800e7fa:	b2d1      	uxtb	r1, r2
 800e7fc:	4a0e      	ldr	r2, [pc, #56]	; (800e838 <FATFS_LinkDriverEx+0x94>)
 800e7fe:	7251      	strb	r1, [r2, #9]
 800e800:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e802:	7dbb      	ldrb	r3, [r7, #22]
 800e804:	3330      	adds	r3, #48	; 0x30
 800e806:	b2da      	uxtb	r2, r3
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	3301      	adds	r3, #1
 800e810:	223a      	movs	r2, #58	; 0x3a
 800e812:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	3302      	adds	r3, #2
 800e818:	222f      	movs	r2, #47	; 0x2f
 800e81a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	3303      	adds	r3, #3
 800e820:	2200      	movs	r2, #0
 800e822:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e824:	2300      	movs	r3, #0
 800e826:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e828:	7dfb      	ldrb	r3, [r7, #23]
}
 800e82a:	4618      	mov	r0, r3
 800e82c:	371c      	adds	r7, #28
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr
 800e836:	bf00      	nop
 800e838:	20000880 	.word	0x20000880

0800e83c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b082      	sub	sp, #8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e846:	2200      	movs	r2, #0
 800e848:	6839      	ldr	r1, [r7, #0]
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7ff ffaa 	bl	800e7a4 <FATFS_LinkDriverEx>
 800e850:	4603      	mov	r3, r0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}

0800e85a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e85a:	b480      	push	{r7}
 800e85c:	b085      	sub	sp, #20
 800e85e:	af00      	add	r7, sp, #0
 800e860:	4603      	mov	r3, r0
 800e862:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e864:	2300      	movs	r3, #0
 800e866:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e868:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e86c:	2b84      	cmp	r3, #132	; 0x84
 800e86e:	d005      	beq.n	800e87c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e870:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	4413      	add	r3, r2
 800e878:	3303      	adds	r3, #3
 800e87a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e87c:	68fb      	ldr	r3, [r7, #12]
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3714      	adds	r7, #20
 800e882:	46bd      	mov	sp, r7
 800e884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e888:	4770      	bx	lr

0800e88a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e88a:	b480      	push	{r7}
 800e88c:	b083      	sub	sp, #12
 800e88e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e890:	f3ef 8305 	mrs	r3, IPSR
 800e894:	607b      	str	r3, [r7, #4]
  return(result);
 800e896:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e898:	2b00      	cmp	r3, #0
 800e89a:	bf14      	ite	ne
 800e89c:	2301      	movne	r3, #1
 800e89e:	2300      	moveq	r3, #0
 800e8a0:	b2db      	uxtb	r3, r3
}
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	370c      	adds	r7, #12
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ac:	4770      	bx	lr

0800e8ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e8ae:	b580      	push	{r7, lr}
 800e8b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e8b2:	f001 f927 	bl	800fb04 <vTaskStartScheduler>
  
  return osOK;
 800e8b6:	2300      	movs	r3, #0
}
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	bd80      	pop	{r7, pc}

0800e8bc <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e8c0:	f7ff ffe3 	bl	800e88a <inHandlerMode>
 800e8c4:	4603      	mov	r3, r0
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d003      	beq.n	800e8d2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e8ca:	f001 fa33 	bl	800fd34 <xTaskGetTickCountFromISR>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	e002      	b.n	800e8d8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e8d2:	f001 fa1f 	bl	800fd14 <xTaskGetTickCount>
 800e8d6:	4603      	mov	r3, r0
  }
}
 800e8d8:	4618      	mov	r0, r3
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e8dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8de:	b089      	sub	sp, #36	; 0x24
 800e8e0:	af04      	add	r7, sp, #16
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	695b      	ldr	r3, [r3, #20]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d020      	beq.n	800e930 <osThreadCreate+0x54>
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	699b      	ldr	r3, [r3, #24]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d01c      	beq.n	800e930 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	685c      	ldr	r4, [r3, #4]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681d      	ldr	r5, [r3, #0]
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	691e      	ldr	r6, [r3, #16]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e908:	4618      	mov	r0, r3
 800e90a:	f7ff ffa6 	bl	800e85a <makeFreeRtosPriority>
 800e90e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	695b      	ldr	r3, [r3, #20]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e918:	9202      	str	r2, [sp, #8]
 800e91a:	9301      	str	r3, [sp, #4]
 800e91c:	9100      	str	r1, [sp, #0]
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	4632      	mov	r2, r6
 800e922:	4629      	mov	r1, r5
 800e924:	4620      	mov	r0, r4
 800e926:	f000 ff2a 	bl	800f77e <xTaskCreateStatic>
 800e92a:	4603      	mov	r3, r0
 800e92c:	60fb      	str	r3, [r7, #12]
 800e92e:	e01c      	b.n	800e96a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	685c      	ldr	r4, [r3, #4]
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e93c:	b29e      	uxth	r6, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff ff88 	bl	800e85a <makeFreeRtosPriority>
 800e94a:	4602      	mov	r2, r0
 800e94c:	f107 030c 	add.w	r3, r7, #12
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	9200      	str	r2, [sp, #0]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	4632      	mov	r2, r6
 800e958:	4629      	mov	r1, r5
 800e95a:	4620      	mov	r0, r4
 800e95c:	f000 ff69 	bl	800f832 <xTaskCreate>
 800e960:	4603      	mov	r3, r0
 800e962:	2b01      	cmp	r3, #1
 800e964:	d001      	beq.n	800e96a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800e966:	2300      	movs	r3, #0
 800e968:	e000      	b.n	800e96c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800e96a:	68fb      	ldr	r3, [r7, #12]
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3714      	adds	r7, #20
 800e970:	46bd      	mov	sp, r7
 800e972:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e974 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b084      	sub	sp, #16
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <osDelay+0x16>
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	e000      	b.n	800e98c <osDelay+0x18>
 800e98a:	2301      	movs	r3, #1
 800e98c:	4618      	mov	r0, r3
 800e98e:	f001 f885 	bl	800fa9c <vTaskDelay>
  
  return osOK;
 800e992:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800e994:	4618      	mov	r0, r3
 800e996:	3710      	adds	r7, #16
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}

0800e99c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e99c:	b590      	push	{r4, r7, lr}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af02      	add	r7, sp, #8
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	689b      	ldr	r3, [r3, #8]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d012      	beq.n	800e9d4 <osMessageCreate+0x38>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	68db      	ldr	r3, [r3, #12]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d00e      	beq.n	800e9d4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	6859      	ldr	r1, [r3, #4]
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	689a      	ldr	r2, [r3, #8]
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	68dc      	ldr	r4, [r3, #12]
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	9300      	str	r3, [sp, #0]
 800e9ca:	4623      	mov	r3, r4
 800e9cc:	f000 f9ec 	bl	800eda8 <xQueueGenericCreateStatic>
 800e9d0:	4603      	mov	r3, r0
 800e9d2:	e008      	b.n	800e9e6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6818      	ldr	r0, [r3, #0]
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	2200      	movs	r2, #0
 800e9de:	4619      	mov	r1, r3
 800e9e0:	f000 fa55 	bl	800ee8e <xQueueGenericCreate>
 800e9e4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	370c      	adds	r7, #12
 800e9ea:	46bd      	mov	sp, r7
 800e9ec:	bd90      	pop	{r4, r7, pc}
	...

0800e9f0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e9f0:	b580      	push	{r7, lr}
 800e9f2:	b086      	sub	sp, #24
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	60f8      	str	r0, [r7, #12]
 800e9f8:	60b9      	str	r1, [r7, #8]
 800e9fa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d101      	bne.n	800ea0e <osMessagePut+0x1e>
    ticks = 1;
 800ea0a:	2301      	movs	r3, #1
 800ea0c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ea0e:	f7ff ff3c 	bl	800e88a <inHandlerMode>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d018      	beq.n	800ea4a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ea18:	f107 0210 	add.w	r2, r7, #16
 800ea1c:	f107 0108 	add.w	r1, r7, #8
 800ea20:	2300      	movs	r3, #0
 800ea22:	68f8      	ldr	r0, [r7, #12]
 800ea24:	f000 fb8c 	bl	800f140 <xQueueGenericSendFromISR>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d001      	beq.n	800ea32 <osMessagePut+0x42>
      return osErrorOS;
 800ea2e:	23ff      	movs	r3, #255	; 0xff
 800ea30:	e018      	b.n	800ea64 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d014      	beq.n	800ea62 <osMessagePut+0x72>
 800ea38:	4b0c      	ldr	r3, [pc, #48]	; (800ea6c <osMessagePut+0x7c>)
 800ea3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea3e:	601a      	str	r2, [r3, #0]
 800ea40:	f3bf 8f4f 	dsb	sy
 800ea44:	f3bf 8f6f 	isb	sy
 800ea48:	e00b      	b.n	800ea62 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800ea4a:	f107 0108 	add.w	r1, r7, #8
 800ea4e:	2300      	movs	r3, #0
 800ea50:	697a      	ldr	r2, [r7, #20]
 800ea52:	68f8      	ldr	r0, [r7, #12]
 800ea54:	f000 fa7a 	bl	800ef4c <xQueueGenericSend>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d001      	beq.n	800ea62 <osMessagePut+0x72>
      return osErrorOS;
 800ea5e:	23ff      	movs	r3, #255	; 0xff
 800ea60:	e000      	b.n	800ea64 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800ea62:	2300      	movs	r3, #0
}
 800ea64:	4618      	mov	r0, r3
 800ea66:	3718      	adds	r7, #24
 800ea68:	46bd      	mov	sp, r7
 800ea6a:	bd80      	pop	{r7, pc}
 800ea6c:	e000ed04 	.word	0xe000ed04

0800ea70 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800ea70:	b590      	push	{r4, r7, lr}
 800ea72:	b08b      	sub	sp, #44	; 0x2c
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800ea80:	2300      	movs	r3, #0
 800ea82:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d10a      	bne.n	800eaa0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ea8a:	2380      	movs	r3, #128	; 0x80
 800ea8c:	617b      	str	r3, [r7, #20]
    return event;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	461c      	mov	r4, r3
 800ea92:	f107 0314 	add.w	r3, r7, #20
 800ea96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ea9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ea9e:	e054      	b.n	800eb4a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	d103      	bne.n	800eab8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800eab0:	f04f 33ff 	mov.w	r3, #4294967295
 800eab4:	627b      	str	r3, [r7, #36]	; 0x24
 800eab6:	e009      	b.n	800eacc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d006      	beq.n	800eacc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800eac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d101      	bne.n	800eacc <osMessageGet+0x5c>
      ticks = 1;
 800eac8:	2301      	movs	r3, #1
 800eaca:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800eacc:	f7ff fedd 	bl	800e88a <inHandlerMode>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d01c      	beq.n	800eb10 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ead6:	f107 0220 	add.w	r2, r7, #32
 800eada:	f107 0314 	add.w	r3, r7, #20
 800eade:	3304      	adds	r3, #4
 800eae0:	4619      	mov	r1, r3
 800eae2:	68b8      	ldr	r0, [r7, #8]
 800eae4:	f000 fc9c 	bl	800f420 <xQueueReceiveFromISR>
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b01      	cmp	r3, #1
 800eaec:	d102      	bne.n	800eaf4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800eaee:	2310      	movs	r3, #16
 800eaf0:	617b      	str	r3, [r7, #20]
 800eaf2:	e001      	b.n	800eaf8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800eaf4:	2300      	movs	r3, #0
 800eaf6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eaf8:	6a3b      	ldr	r3, [r7, #32]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d01d      	beq.n	800eb3a <osMessageGet+0xca>
 800eafe:	4b15      	ldr	r3, [pc, #84]	; (800eb54 <osMessageGet+0xe4>)
 800eb00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb04:	601a      	str	r2, [r3, #0]
 800eb06:	f3bf 8f4f 	dsb	sy
 800eb0a:	f3bf 8f6f 	isb	sy
 800eb0e:	e014      	b.n	800eb3a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800eb10:	f107 0314 	add.w	r3, r7, #20
 800eb14:	3304      	adds	r3, #4
 800eb16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb18:	4619      	mov	r1, r3
 800eb1a:	68b8      	ldr	r0, [r7, #8]
 800eb1c:	f000 fba4 	bl	800f268 <xQueueReceive>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d102      	bne.n	800eb2c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800eb26:	2310      	movs	r3, #16
 800eb28:	617b      	str	r3, [r7, #20]
 800eb2a:	e006      	b.n	800eb3a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d101      	bne.n	800eb36 <osMessageGet+0xc6>
 800eb32:	2300      	movs	r3, #0
 800eb34:	e000      	b.n	800eb38 <osMessageGet+0xc8>
 800eb36:	2340      	movs	r3, #64	; 0x40
 800eb38:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	461c      	mov	r4, r3
 800eb3e:	f107 0314 	add.w	r3, r7, #20
 800eb42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eb46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	372c      	adds	r7, #44	; 0x2c
 800eb4e:	46bd      	mov	sp, r7
 800eb50:	bd90      	pop	{r4, r7, pc}
 800eb52:	bf00      	nop
 800eb54:	e000ed04 	.word	0xe000ed04

0800eb58 <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b082      	sub	sp, #8
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 800eb60:	6878      	ldr	r0, [r7, #4]
 800eb62:	f000 fcda 	bl	800f51a <uxQueueSpacesAvailable>
 800eb66:	4603      	mov	r3, r0
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}

0800eb70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	f103 0208 	add.w	r2, r3, #8
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f04f 32ff 	mov.w	r2, #4294967295
 800eb88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f103 0208 	add.w	r2, r3, #8
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	f103 0208 	add.w	r2, r3, #8
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2200      	movs	r2, #0
 800eba2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800eba4:	bf00      	nop
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr

0800ebb0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ebbe:	bf00      	nop
 800ebc0:	370c      	adds	r7, #12
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr

0800ebca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ebca:	b480      	push	{r7}
 800ebcc:	b085      	sub	sp, #20
 800ebce:	af00      	add	r7, sp, #0
 800ebd0:	6078      	str	r0, [r7, #4]
 800ebd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	685b      	ldr	r3, [r3, #4]
 800ebd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	689a      	ldr	r2, [r3, #8]
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	689b      	ldr	r3, [r3, #8]
 800ebec:	683a      	ldr	r2, [r7, #0]
 800ebee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	687a      	ldr	r2, [r7, #4]
 800ebfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	1c5a      	adds	r2, r3, #1
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	601a      	str	r2, [r3, #0]
}
 800ec06:	bf00      	nop
 800ec08:	3714      	adds	r7, #20
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr

0800ec12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ec12:	b480      	push	{r7}
 800ec14:	b085      	sub	sp, #20
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
 800ec1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ec1c:	683b      	ldr	r3, [r7, #0]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec28:	d103      	bne.n	800ec32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	691b      	ldr	r3, [r3, #16]
 800ec2e:	60fb      	str	r3, [r7, #12]
 800ec30:	e00c      	b.n	800ec4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	3308      	adds	r3, #8
 800ec36:	60fb      	str	r3, [r7, #12]
 800ec38:	e002      	b.n	800ec40 <vListInsert+0x2e>
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	685b      	ldr	r3, [r3, #4]
 800ec3e:	60fb      	str	r3, [r7, #12]
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	685b      	ldr	r3, [r3, #4]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d2f6      	bcs.n	800ec3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	685a      	ldr	r2, [r3, #4]
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	683a      	ldr	r2, [r7, #0]
 800ec5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ec68:	683b      	ldr	r3, [r7, #0]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	1c5a      	adds	r2, r3, #1
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	601a      	str	r2, [r3, #0]
}
 800ec78:	bf00      	nop
 800ec7a:	3714      	adds	r7, #20
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	691b      	ldr	r3, [r3, #16]
 800ec90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	687a      	ldr	r2, [r7, #4]
 800ec98:	6892      	ldr	r2, [r2, #8]
 800ec9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	689b      	ldr	r3, [r3, #8]
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	6852      	ldr	r2, [r2, #4]
 800eca4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d103      	bne.n	800ecb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	689a      	ldr	r2, [r3, #8]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2200      	movs	r2, #0
 800ecbc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	1e5a      	subs	r2, r3, #1
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
}
 800eccc:	4618      	mov	r0, r3
 800ecce:	3714      	adds	r7, #20
 800ecd0:	46bd      	mov	sp, r7
 800ecd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd6:	4770      	bx	lr

0800ecd8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d109      	bne.n	800ed00 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ecec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf0:	f383 8811 	msr	BASEPRI, r3
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	f3bf 8f4f 	dsb	sy
 800ecfc:	60bb      	str	r3, [r7, #8]
 800ecfe:	e7fe      	b.n	800ecfe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ed00:	f001 fd44 	bl	801078c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed0c:	68f9      	ldr	r1, [r7, #12]
 800ed0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed10:	fb01 f303 	mul.w	r3, r1, r3
 800ed14:	441a      	add	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	2200      	movs	r2, #0
 800ed1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	681a      	ldr	r2, [r3, #0]
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed30:	3b01      	subs	r3, #1
 800ed32:	68f9      	ldr	r1, [r7, #12]
 800ed34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ed36:	fb01 f303 	mul.w	r3, r1, r3
 800ed3a:	441a      	add	r2, r3
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	22ff      	movs	r2, #255	; 0xff
 800ed44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	22ff      	movs	r2, #255	; 0xff
 800ed4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ed50:	683b      	ldr	r3, [r7, #0]
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d114      	bne.n	800ed80 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	691b      	ldr	r3, [r3, #16]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d01a      	beq.n	800ed94 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	3310      	adds	r3, #16
 800ed62:	4618      	mov	r0, r3
 800ed64:	f001 f92e 	bl	800ffc4 <xTaskRemoveFromEventList>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d012      	beq.n	800ed94 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ed6e:	4b0d      	ldr	r3, [pc, #52]	; (800eda4 <xQueueGenericReset+0xcc>)
 800ed70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed74:	601a      	str	r2, [r3, #0]
 800ed76:	f3bf 8f4f 	dsb	sy
 800ed7a:	f3bf 8f6f 	isb	sy
 800ed7e:	e009      	b.n	800ed94 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	3310      	adds	r3, #16
 800ed84:	4618      	mov	r0, r3
 800ed86:	f7ff fef3 	bl	800eb70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	3324      	adds	r3, #36	; 0x24
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff feee 	bl	800eb70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ed94:	f001 fd28 	bl	80107e8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ed98:	2301      	movs	r3, #1
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
 800eda2:	bf00      	nop
 800eda4:	e000ed04 	.word	0xe000ed04

0800eda8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b08e      	sub	sp, #56	; 0x38
 800edac:	af02      	add	r7, sp, #8
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	607a      	str	r2, [r7, #4]
 800edb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d109      	bne.n	800edd0 <xQueueGenericCreateStatic+0x28>
 800edbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc0:	f383 8811 	msr	BASEPRI, r3
 800edc4:	f3bf 8f6f 	isb	sy
 800edc8:	f3bf 8f4f 	dsb	sy
 800edcc:	62bb      	str	r3, [r7, #40]	; 0x28
 800edce:	e7fe      	b.n	800edce <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d109      	bne.n	800edea <xQueueGenericCreateStatic+0x42>
 800edd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edda:	f383 8811 	msr	BASEPRI, r3
 800edde:	f3bf 8f6f 	isb	sy
 800ede2:	f3bf 8f4f 	dsb	sy
 800ede6:	627b      	str	r3, [r7, #36]	; 0x24
 800ede8:	e7fe      	b.n	800ede8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <xQueueGenericCreateStatic+0x4e>
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d001      	beq.n	800edfa <xQueueGenericCreateStatic+0x52>
 800edf6:	2301      	movs	r3, #1
 800edf8:	e000      	b.n	800edfc <xQueueGenericCreateStatic+0x54>
 800edfa:	2300      	movs	r3, #0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d109      	bne.n	800ee14 <xQueueGenericCreateStatic+0x6c>
 800ee00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee04:	f383 8811 	msr	BASEPRI, r3
 800ee08:	f3bf 8f6f 	isb	sy
 800ee0c:	f3bf 8f4f 	dsb	sy
 800ee10:	623b      	str	r3, [r7, #32]
 800ee12:	e7fe      	b.n	800ee12 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d102      	bne.n	800ee20 <xQueueGenericCreateStatic+0x78>
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d101      	bne.n	800ee24 <xQueueGenericCreateStatic+0x7c>
 800ee20:	2301      	movs	r3, #1
 800ee22:	e000      	b.n	800ee26 <xQueueGenericCreateStatic+0x7e>
 800ee24:	2300      	movs	r3, #0
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d109      	bne.n	800ee3e <xQueueGenericCreateStatic+0x96>
 800ee2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee2e:	f383 8811 	msr	BASEPRI, r3
 800ee32:	f3bf 8f6f 	isb	sy
 800ee36:	f3bf 8f4f 	dsb	sy
 800ee3a:	61fb      	str	r3, [r7, #28]
 800ee3c:	e7fe      	b.n	800ee3c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ee3e:	2348      	movs	r3, #72	; 0x48
 800ee40:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ee42:	697b      	ldr	r3, [r7, #20]
 800ee44:	2b48      	cmp	r3, #72	; 0x48
 800ee46:	d009      	beq.n	800ee5c <xQueueGenericCreateStatic+0xb4>
 800ee48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee4c:	f383 8811 	msr	BASEPRI, r3
 800ee50:	f3bf 8f6f 	isb	sy
 800ee54:	f3bf 8f4f 	dsb	sy
 800ee58:	61bb      	str	r3, [r7, #24]
 800ee5a:	e7fe      	b.n	800ee5a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ee5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ee62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d00d      	beq.n	800ee84 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ee68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ee70:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee76:	9300      	str	r3, [sp, #0]
 800ee78:	4613      	mov	r3, r2
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	68b9      	ldr	r1, [r7, #8]
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f000 f844 	bl	800ef0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ee84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ee86:	4618      	mov	r0, r3
 800ee88:	3730      	adds	r7, #48	; 0x30
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}

0800ee8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ee8e:	b580      	push	{r7, lr}
 800ee90:	b08a      	sub	sp, #40	; 0x28
 800ee92:	af02      	add	r7, sp, #8
 800ee94:	60f8      	str	r0, [r7, #12]
 800ee96:	60b9      	str	r1, [r7, #8]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d109      	bne.n	800eeb6 <xQueueGenericCreate+0x28>
 800eea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea6:	f383 8811 	msr	BASEPRI, r3
 800eeaa:	f3bf 8f6f 	isb	sy
 800eeae:	f3bf 8f4f 	dsb	sy
 800eeb2:	613b      	str	r3, [r7, #16]
 800eeb4:	e7fe      	b.n	800eeb4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800eeb6:	68bb      	ldr	r3, [r7, #8]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d102      	bne.n	800eec2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800eebc:	2300      	movs	r3, #0
 800eebe:	61fb      	str	r3, [r7, #28]
 800eec0:	e004      	b.n	800eecc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	68ba      	ldr	r2, [r7, #8]
 800eec6:	fb02 f303 	mul.w	r3, r2, r3
 800eeca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800eecc:	69fb      	ldr	r3, [r7, #28]
 800eece:	3348      	adds	r3, #72	; 0x48
 800eed0:	4618      	mov	r0, r3
 800eed2:	f001 fd75 	bl	80109c0 <pvPortMalloc>
 800eed6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d011      	beq.n	800ef02 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	3348      	adds	r3, #72	; 0x48
 800eee6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	2200      	movs	r2, #0
 800eeec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800eef0:	79fa      	ldrb	r2, [r7, #7]
 800eef2:	69bb      	ldr	r3, [r7, #24]
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	4613      	mov	r3, r2
 800eef8:	697a      	ldr	r2, [r7, #20]
 800eefa:	68b9      	ldr	r1, [r7, #8]
 800eefc:	68f8      	ldr	r0, [r7, #12]
 800eefe:	f000 f805 	bl	800ef0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ef02:	69bb      	ldr	r3, [r7, #24]
	}
 800ef04:	4618      	mov	r0, r3
 800ef06:	3720      	adds	r7, #32
 800ef08:	46bd      	mov	sp, r7
 800ef0a:	bd80      	pop	{r7, pc}

0800ef0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
 800ef18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d103      	bne.n	800ef28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	69ba      	ldr	r2, [r7, #24]
 800ef24:	601a      	str	r2, [r3, #0]
 800ef26:	e002      	b.n	800ef2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ef28:	69bb      	ldr	r3, [r7, #24]
 800ef2a:	687a      	ldr	r2, [r7, #4]
 800ef2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	68fa      	ldr	r2, [r7, #12]
 800ef32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	69b8      	ldr	r0, [r7, #24]
 800ef3e:	f7ff fecb 	bl	800ecd8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ef42:	bf00      	nop
 800ef44:	3710      	adds	r7, #16
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
	...

0800ef4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b08e      	sub	sp, #56	; 0x38
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ef62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d109      	bne.n	800ef7c <xQueueGenericSend+0x30>
 800ef68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	62bb      	str	r3, [r7, #40]	; 0x28
 800ef7a:	e7fe      	b.n	800ef7a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	2b00      	cmp	r3, #0
 800ef80:	d103      	bne.n	800ef8a <xQueueGenericSend+0x3e>
 800ef82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <xQueueGenericSend+0x42>
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <xQueueGenericSend+0x44>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d109      	bne.n	800efa8 <xQueueGenericSend+0x5c>
 800ef94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef98:	f383 8811 	msr	BASEPRI, r3
 800ef9c:	f3bf 8f6f 	isb	sy
 800efa0:	f3bf 8f4f 	dsb	sy
 800efa4:	627b      	str	r3, [r7, #36]	; 0x24
 800efa6:	e7fe      	b.n	800efa6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800efa8:	683b      	ldr	r3, [r7, #0]
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d103      	bne.n	800efb6 <xQueueGenericSend+0x6a>
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efb2:	2b01      	cmp	r3, #1
 800efb4:	d101      	bne.n	800efba <xQueueGenericSend+0x6e>
 800efb6:	2301      	movs	r3, #1
 800efb8:	e000      	b.n	800efbc <xQueueGenericSend+0x70>
 800efba:	2300      	movs	r3, #0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d109      	bne.n	800efd4 <xQueueGenericSend+0x88>
 800efc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc4:	f383 8811 	msr	BASEPRI, r3
 800efc8:	f3bf 8f6f 	isb	sy
 800efcc:	f3bf 8f4f 	dsb	sy
 800efd0:	623b      	str	r3, [r7, #32]
 800efd2:	e7fe      	b.n	800efd2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800efd4:	f001 f9ac 	bl	8010330 <xTaskGetSchedulerState>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d102      	bne.n	800efe4 <xQueueGenericSend+0x98>
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d101      	bne.n	800efe8 <xQueueGenericSend+0x9c>
 800efe4:	2301      	movs	r3, #1
 800efe6:	e000      	b.n	800efea <xQueueGenericSend+0x9e>
 800efe8:	2300      	movs	r3, #0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d109      	bne.n	800f002 <xQueueGenericSend+0xb6>
 800efee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eff2:	f383 8811 	msr	BASEPRI, r3
 800eff6:	f3bf 8f6f 	isb	sy
 800effa:	f3bf 8f4f 	dsb	sy
 800effe:	61fb      	str	r3, [r7, #28]
 800f000:	e7fe      	b.n	800f000 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f002:	f001 fbc3 	bl	801078c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f00e:	429a      	cmp	r2, r3
 800f010:	d302      	bcc.n	800f018 <xQueueGenericSend+0xcc>
 800f012:	683b      	ldr	r3, [r7, #0]
 800f014:	2b02      	cmp	r3, #2
 800f016:	d129      	bne.n	800f06c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f018:	683a      	ldr	r2, [r7, #0]
 800f01a:	68b9      	ldr	r1, [r7, #8]
 800f01c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f01e:	f000 fa9e 	bl	800f55e <prvCopyDataToQueue>
 800f022:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d010      	beq.n	800f04e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	3324      	adds	r3, #36	; 0x24
 800f030:	4618      	mov	r0, r3
 800f032:	f000 ffc7 	bl	800ffc4 <xTaskRemoveFromEventList>
 800f036:	4603      	mov	r3, r0
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d013      	beq.n	800f064 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f03c:	4b3f      	ldr	r3, [pc, #252]	; (800f13c <xQueueGenericSend+0x1f0>)
 800f03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f042:	601a      	str	r2, [r3, #0]
 800f044:	f3bf 8f4f 	dsb	sy
 800f048:	f3bf 8f6f 	isb	sy
 800f04c:	e00a      	b.n	800f064 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	2b00      	cmp	r3, #0
 800f052:	d007      	beq.n	800f064 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f054:	4b39      	ldr	r3, [pc, #228]	; (800f13c <xQueueGenericSend+0x1f0>)
 800f056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f05a:	601a      	str	r2, [r3, #0]
 800f05c:	f3bf 8f4f 	dsb	sy
 800f060:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f064:	f001 fbc0 	bl	80107e8 <vPortExitCritical>
				return pdPASS;
 800f068:	2301      	movs	r3, #1
 800f06a:	e063      	b.n	800f134 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d103      	bne.n	800f07a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f072:	f001 fbb9 	bl	80107e8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f076:	2300      	movs	r3, #0
 800f078:	e05c      	b.n	800f134 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f07a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d106      	bne.n	800f08e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f080:	f107 0314 	add.w	r3, r7, #20
 800f084:	4618      	mov	r0, r3
 800f086:	f000 ffff 	bl	8010088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f08a:	2301      	movs	r3, #1
 800f08c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f08e:	f001 fbab 	bl	80107e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f092:	f000 fd95 	bl	800fbc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f096:	f001 fb79 	bl	801078c <vPortEnterCritical>
 800f09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f0a0:	b25b      	sxtb	r3, r3
 800f0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a6:	d103      	bne.n	800f0b0 <xQueueGenericSend+0x164>
 800f0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f0b6:	b25b      	sxtb	r3, r3
 800f0b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0bc:	d103      	bne.n	800f0c6 <xQueueGenericSend+0x17a>
 800f0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f0c6:	f001 fb8f 	bl	80107e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f0ca:	1d3a      	adds	r2, r7, #4
 800f0cc:	f107 0314 	add.w	r3, r7, #20
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 ffee 	bl	80100b4 <xTaskCheckForTimeOut>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d124      	bne.n	800f128 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f0de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0e0:	f000 fb35 	bl	800f74e <prvIsQueueFull>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d018      	beq.n	800f11c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ec:	3310      	adds	r3, #16
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f000 ff42 	bl	800ff7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f0f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f0fa:	f000 fac0 	bl	800f67e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f0fe:	f000 fd6d 	bl	800fbdc <xTaskResumeAll>
 800f102:	4603      	mov	r3, r0
 800f104:	2b00      	cmp	r3, #0
 800f106:	f47f af7c 	bne.w	800f002 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800f10a:	4b0c      	ldr	r3, [pc, #48]	; (800f13c <xQueueGenericSend+0x1f0>)
 800f10c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f110:	601a      	str	r2, [r3, #0]
 800f112:	f3bf 8f4f 	dsb	sy
 800f116:	f3bf 8f6f 	isb	sy
 800f11a:	e772      	b.n	800f002 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f11c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f11e:	f000 faae 	bl	800f67e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f122:	f000 fd5b 	bl	800fbdc <xTaskResumeAll>
 800f126:	e76c      	b.n	800f002 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f128:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f12a:	f000 faa8 	bl	800f67e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f12e:	f000 fd55 	bl	800fbdc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f132:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f134:	4618      	mov	r0, r3
 800f136:	3738      	adds	r7, #56	; 0x38
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd80      	pop	{r7, pc}
 800f13c:	e000ed04 	.word	0xe000ed04

0800f140 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b08e      	sub	sp, #56	; 0x38
 800f144:	af00      	add	r7, sp, #0
 800f146:	60f8      	str	r0, [r7, #12]
 800f148:	60b9      	str	r1, [r7, #8]
 800f14a:	607a      	str	r2, [r7, #4]
 800f14c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f154:	2b00      	cmp	r3, #0
 800f156:	d109      	bne.n	800f16c <xQueueGenericSendFromISR+0x2c>
 800f158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15c:	f383 8811 	msr	BASEPRI, r3
 800f160:	f3bf 8f6f 	isb	sy
 800f164:	f3bf 8f4f 	dsb	sy
 800f168:	627b      	str	r3, [r7, #36]	; 0x24
 800f16a:	e7fe      	b.n	800f16a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d103      	bne.n	800f17a <xQueueGenericSendFromISR+0x3a>
 800f172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f176:	2b00      	cmp	r3, #0
 800f178:	d101      	bne.n	800f17e <xQueueGenericSendFromISR+0x3e>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e000      	b.n	800f180 <xQueueGenericSendFromISR+0x40>
 800f17e:	2300      	movs	r3, #0
 800f180:	2b00      	cmp	r3, #0
 800f182:	d109      	bne.n	800f198 <xQueueGenericSendFromISR+0x58>
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	f383 8811 	msr	BASEPRI, r3
 800f18c:	f3bf 8f6f 	isb	sy
 800f190:	f3bf 8f4f 	dsb	sy
 800f194:	623b      	str	r3, [r7, #32]
 800f196:	e7fe      	b.n	800f196 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f198:	683b      	ldr	r3, [r7, #0]
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d103      	bne.n	800f1a6 <xQueueGenericSendFromISR+0x66>
 800f19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d101      	bne.n	800f1aa <xQueueGenericSendFromISR+0x6a>
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e000      	b.n	800f1ac <xQueueGenericSendFromISR+0x6c>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	2b00      	cmp	r3, #0
 800f1ae:	d109      	bne.n	800f1c4 <xQueueGenericSendFromISR+0x84>
 800f1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b4:	f383 8811 	msr	BASEPRI, r3
 800f1b8:	f3bf 8f6f 	isb	sy
 800f1bc:	f3bf 8f4f 	dsb	sy
 800f1c0:	61fb      	str	r3, [r7, #28]
 800f1c2:	e7fe      	b.n	800f1c2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f1c4:	f001 fbbe 	bl	8010944 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f1c8:	f3ef 8211 	mrs	r2, BASEPRI
 800f1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1d0:	f383 8811 	msr	BASEPRI, r3
 800f1d4:	f3bf 8f6f 	isb	sy
 800f1d8:	f3bf 8f4f 	dsb	sy
 800f1dc:	61ba      	str	r2, [r7, #24]
 800f1de:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f1e0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ec:	429a      	cmp	r2, r3
 800f1ee:	d302      	bcc.n	800f1f6 <xQueueGenericSendFromISR+0xb6>
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d12c      	bne.n	800f250 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f200:	683a      	ldr	r2, [r7, #0]
 800f202:	68b9      	ldr	r1, [r7, #8]
 800f204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f206:	f000 f9aa 	bl	800f55e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f20a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f212:	d112      	bne.n	800f23a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d016      	beq.n	800f24a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21e:	3324      	adds	r3, #36	; 0x24
 800f220:	4618      	mov	r0, r3
 800f222:	f000 fecf 	bl	800ffc4 <xTaskRemoveFromEventList>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d00e      	beq.n	800f24a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d00b      	beq.n	800f24a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2201      	movs	r2, #1
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	e007      	b.n	800f24a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f23a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f23e:	3301      	adds	r3, #1
 800f240:	b2db      	uxtb	r3, r3
 800f242:	b25a      	sxtb	r2, r3
 800f244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f24a:	2301      	movs	r3, #1
 800f24c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f24e:	e001      	b.n	800f254 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f250:	2300      	movs	r3, #0
 800f252:	637b      	str	r3, [r7, #52]	; 0x34
 800f254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f256:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f260:	4618      	mov	r0, r3
 800f262:	3738      	adds	r7, #56	; 0x38
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08c      	sub	sp, #48	; 0x30
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f274:	2300      	movs	r3, #0
 800f276:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d109      	bne.n	800f296 <xQueueReceive+0x2e>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	623b      	str	r3, [r7, #32]
 800f294:	e7fe      	b.n	800f294 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d103      	bne.n	800f2a4 <xQueueReceive+0x3c>
 800f29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f29e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d101      	bne.n	800f2a8 <xQueueReceive+0x40>
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	e000      	b.n	800f2aa <xQueueReceive+0x42>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d109      	bne.n	800f2c2 <xQueueReceive+0x5a>
 800f2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b2:	f383 8811 	msr	BASEPRI, r3
 800f2b6:	f3bf 8f6f 	isb	sy
 800f2ba:	f3bf 8f4f 	dsb	sy
 800f2be:	61fb      	str	r3, [r7, #28]
 800f2c0:	e7fe      	b.n	800f2c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f2c2:	f001 f835 	bl	8010330 <xTaskGetSchedulerState>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d102      	bne.n	800f2d2 <xQueueReceive+0x6a>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d101      	bne.n	800f2d6 <xQueueReceive+0x6e>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	e000      	b.n	800f2d8 <xQueueReceive+0x70>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d109      	bne.n	800f2f0 <xQueueReceive+0x88>
 800f2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2e0:	f383 8811 	msr	BASEPRI, r3
 800f2e4:	f3bf 8f6f 	isb	sy
 800f2e8:	f3bf 8f4f 	dsb	sy
 800f2ec:	61bb      	str	r3, [r7, #24]
 800f2ee:	e7fe      	b.n	800f2ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f2f0:	f001 fa4c 	bl	801078c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01f      	beq.n	800f340 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f300:	68b9      	ldr	r1, [r7, #8]
 800f302:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f304:	f000 f995 	bl	800f632 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f30a:	1e5a      	subs	r2, r3, #1
 800f30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f312:	691b      	ldr	r3, [r3, #16]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d00f      	beq.n	800f338 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31a:	3310      	adds	r3, #16
 800f31c:	4618      	mov	r0, r3
 800f31e:	f000 fe51 	bl	800ffc4 <xTaskRemoveFromEventList>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d007      	beq.n	800f338 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f328:	4b3c      	ldr	r3, [pc, #240]	; (800f41c <xQueueReceive+0x1b4>)
 800f32a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f338:	f001 fa56 	bl	80107e8 <vPortExitCritical>
				return pdPASS;
 800f33c:	2301      	movs	r3, #1
 800f33e:	e069      	b.n	800f414 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d103      	bne.n	800f34e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f346:	f001 fa4f 	bl	80107e8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f34a:	2300      	movs	r3, #0
 800f34c:	e062      	b.n	800f414 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f350:	2b00      	cmp	r3, #0
 800f352:	d106      	bne.n	800f362 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f354:	f107 0310 	add.w	r3, r7, #16
 800f358:	4618      	mov	r0, r3
 800f35a:	f000 fe95 	bl	8010088 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f35e:	2301      	movs	r3, #1
 800f360:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f362:	f001 fa41 	bl	80107e8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f366:	f000 fc2b 	bl	800fbc0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f36a:	f001 fa0f 	bl	801078c <vPortEnterCritical>
 800f36e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f374:	b25b      	sxtb	r3, r3
 800f376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f37a:	d103      	bne.n	800f384 <xQueueReceive+0x11c>
 800f37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37e:	2200      	movs	r2, #0
 800f380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f38a:	b25b      	sxtb	r3, r3
 800f38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f390:	d103      	bne.n	800f39a <xQueueReceive+0x132>
 800f392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f394:	2200      	movs	r2, #0
 800f396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f39a:	f001 fa25 	bl	80107e8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f39e:	1d3a      	adds	r2, r7, #4
 800f3a0:	f107 0310 	add.w	r3, r7, #16
 800f3a4:	4611      	mov	r1, r2
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	f000 fe84 	bl	80100b4 <xTaskCheckForTimeOut>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d123      	bne.n	800f3fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f3b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3b4:	f000 f9b5 	bl	800f722 <prvIsQueueEmpty>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d017      	beq.n	800f3ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c0:	3324      	adds	r3, #36	; 0x24
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	4611      	mov	r1, r2
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f000 fdd8 	bl	800ff7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f3cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3ce:	f000 f956 	bl	800f67e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f3d2:	f000 fc03 	bl	800fbdc <xTaskResumeAll>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d189      	bne.n	800f2f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800f3dc:	4b0f      	ldr	r3, [pc, #60]	; (800f41c <xQueueReceive+0x1b4>)
 800f3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3e2:	601a      	str	r2, [r3, #0]
 800f3e4:	f3bf 8f4f 	dsb	sy
 800f3e8:	f3bf 8f6f 	isb	sy
 800f3ec:	e780      	b.n	800f2f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f3ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3f0:	f000 f945 	bl	800f67e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f3f4:	f000 fbf2 	bl	800fbdc <xTaskResumeAll>
 800f3f8:	e77a      	b.n	800f2f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f3fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3fc:	f000 f93f 	bl	800f67e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f400:	f000 fbec 	bl	800fbdc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f406:	f000 f98c 	bl	800f722 <prvIsQueueEmpty>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f43f af6f 	beq.w	800f2f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f412:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f414:	4618      	mov	r0, r3
 800f416:	3730      	adds	r7, #48	; 0x30
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	e000ed04 	.word	0xe000ed04

0800f420 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b08e      	sub	sp, #56	; 0x38
 800f424:	af00      	add	r7, sp, #0
 800f426:	60f8      	str	r0, [r7, #12]
 800f428:	60b9      	str	r1, [r7, #8]
 800f42a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <xQueueReceiveFromISR+0x2a>
 800f436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f43a:	f383 8811 	msr	BASEPRI, r3
 800f43e:	f3bf 8f6f 	isb	sy
 800f442:	f3bf 8f4f 	dsb	sy
 800f446:	623b      	str	r3, [r7, #32]
 800f448:	e7fe      	b.n	800f448 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f44a:	68bb      	ldr	r3, [r7, #8]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d103      	bne.n	800f458 <xQueueReceiveFromISR+0x38>
 800f450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <xQueueReceiveFromISR+0x3c>
 800f458:	2301      	movs	r3, #1
 800f45a:	e000      	b.n	800f45e <xQueueReceiveFromISR+0x3e>
 800f45c:	2300      	movs	r3, #0
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d109      	bne.n	800f476 <xQueueReceiveFromISR+0x56>
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	61fb      	str	r3, [r7, #28]
 800f474:	e7fe      	b.n	800f474 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f476:	f001 fa65 	bl	8010944 <vPortValidateInterruptPriority>
	__asm volatile
 800f47a:	f3ef 8211 	mrs	r2, BASEPRI
 800f47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f482:	f383 8811 	msr	BASEPRI, r3
 800f486:	f3bf 8f6f 	isb	sy
 800f48a:	f3bf 8f4f 	dsb	sy
 800f48e:	61ba      	str	r2, [r7, #24]
 800f490:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f492:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f494:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d02f      	beq.n	800f502 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f4ac:	68b9      	ldr	r1, [r7, #8]
 800f4ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f4b0:	f000 f8bf 	bl	800f632 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b6:	1e5a      	subs	r2, r3, #1
 800f4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f4bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f4c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4c4:	d112      	bne.n	800f4ec <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c8:	691b      	ldr	r3, [r3, #16]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d016      	beq.n	800f4fc <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d0:	3310      	adds	r3, #16
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f000 fd76 	bl	800ffc4 <xTaskRemoveFromEventList>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d00e      	beq.n	800f4fc <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d00b      	beq.n	800f4fc <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	2201      	movs	r2, #1
 800f4e8:	601a      	str	r2, [r3, #0]
 800f4ea:	e007      	b.n	800f4fc <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	b25a      	sxtb	r2, r3
 800f4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	637b      	str	r3, [r7, #52]	; 0x34
 800f500:	e001      	b.n	800f506 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800f502:	2300      	movs	r3, #0
 800f504:	637b      	str	r3, [r7, #52]	; 0x34
 800f506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f508:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f512:	4618      	mov	r0, r3
 800f514:	3738      	adds	r7, #56	; 0x38
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}

0800f51a <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800f51a:	b580      	push	{r7, lr}
 800f51c:	b086      	sub	sp, #24
 800f51e:	af00      	add	r7, sp, #0
 800f520:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d109      	bne.n	800f540 <uxQueueSpacesAvailable+0x26>
	__asm volatile
 800f52c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f530:	f383 8811 	msr	BASEPRI, r3
 800f534:	f3bf 8f6f 	isb	sy
 800f538:	f3bf 8f4f 	dsb	sy
 800f53c:	60fb      	str	r3, [r7, #12]
 800f53e:	e7fe      	b.n	800f53e <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 800f540:	f001 f924 	bl	801078c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 800f544:	697b      	ldr	r3, [r7, #20]
 800f546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54c:	1ad3      	subs	r3, r2, r3
 800f54e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800f550:	f001 f94a 	bl	80107e8 <vPortExitCritical>

	return uxReturn;
 800f554:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f556:	4618      	mov	r0, r3
 800f558:	3718      	adds	r7, #24
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b086      	sub	sp, #24
 800f562:	af00      	add	r7, sp, #0
 800f564:	60f8      	str	r0, [r7, #12]
 800f566:	60b9      	str	r1, [r7, #8]
 800f568:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f56a:	2300      	movs	r3, #0
 800f56c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f572:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d10d      	bne.n	800f598 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d14d      	bne.n	800f620 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	689b      	ldr	r3, [r3, #8]
 800f588:	4618      	mov	r0, r3
 800f58a:	f000 feef 	bl	801036c <xTaskPriorityDisinherit>
 800f58e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2200      	movs	r2, #0
 800f594:	609a      	str	r2, [r3, #8]
 800f596:	e043      	b.n	800f620 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d119      	bne.n	800f5d2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	6858      	ldr	r0, [r3, #4]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	68b9      	ldr	r1, [r7, #8]
 800f5aa:	f002 f9bd 	bl	8011928 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b6:	441a      	add	r2, r3
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	685a      	ldr	r2, [r3, #4]
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	689b      	ldr	r3, [r3, #8]
 800f5c4:	429a      	cmp	r2, r3
 800f5c6:	d32b      	bcc.n	800f620 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	605a      	str	r2, [r3, #4]
 800f5d0:	e026      	b.n	800f620 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	68d8      	ldr	r0, [r3, #12]
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5da:	461a      	mov	r2, r3
 800f5dc:	68b9      	ldr	r1, [r7, #8]
 800f5de:	f002 f9a3 	bl	8011928 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	68da      	ldr	r2, [r3, #12]
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ea:	425b      	negs	r3, r3
 800f5ec:	441a      	add	r2, r3
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	68da      	ldr	r2, [r3, #12]
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d207      	bcs.n	800f60e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	689a      	ldr	r2, [r3, #8]
 800f602:	68fb      	ldr	r3, [r7, #12]
 800f604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f606:	425b      	negs	r3, r3
 800f608:	441a      	add	r2, r3
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2b02      	cmp	r3, #2
 800f612:	d105      	bne.n	800f620 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f614:	693b      	ldr	r3, [r7, #16]
 800f616:	2b00      	cmp	r3, #0
 800f618:	d002      	beq.n	800f620 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	3b01      	subs	r3, #1
 800f61e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f620:	693b      	ldr	r3, [r7, #16]
 800f622:	1c5a      	adds	r2, r3, #1
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f628:	697b      	ldr	r3, [r7, #20]
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3718      	adds	r7, #24
 800f62e:	46bd      	mov	sp, r7
 800f630:	bd80      	pop	{r7, pc}

0800f632 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f632:	b580      	push	{r7, lr}
 800f634:	b082      	sub	sp, #8
 800f636:	af00      	add	r7, sp, #0
 800f638:	6078      	str	r0, [r7, #4]
 800f63a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f640:	2b00      	cmp	r3, #0
 800f642:	d018      	beq.n	800f676 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	68da      	ldr	r2, [r3, #12]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f64c:	441a      	add	r2, r3
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	68da      	ldr	r2, [r3, #12]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	689b      	ldr	r3, [r3, #8]
 800f65a:	429a      	cmp	r2, r3
 800f65c:	d303      	bcc.n	800f666 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	681a      	ldr	r2, [r3, #0]
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	68d9      	ldr	r1, [r3, #12]
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f66e:	461a      	mov	r2, r3
 800f670:	6838      	ldr	r0, [r7, #0]
 800f672:	f002 f959 	bl	8011928 <memcpy>
	}
}
 800f676:	bf00      	nop
 800f678:	3708      	adds	r7, #8
 800f67a:	46bd      	mov	sp, r7
 800f67c:	bd80      	pop	{r7, pc}

0800f67e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f67e:	b580      	push	{r7, lr}
 800f680:	b084      	sub	sp, #16
 800f682:	af00      	add	r7, sp, #0
 800f684:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f686:	f001 f881 	bl	801078c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f690:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f692:	e011      	b.n	800f6b8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d012      	beq.n	800f6c2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	3324      	adds	r3, #36	; 0x24
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	f000 fc8f 	bl	800ffc4 <xTaskRemoveFromEventList>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d001      	beq.n	800f6b0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f6ac:	f000 fd62 	bl	8010174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f6b0:	7bfb      	ldrb	r3, [r7, #15]
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f6b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dce9      	bgt.n	800f694 <prvUnlockQueue+0x16>
 800f6c0:	e000      	b.n	800f6c4 <prvUnlockQueue+0x46>
					break;
 800f6c2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	22ff      	movs	r2, #255	; 0xff
 800f6c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f6cc:	f001 f88c 	bl	80107e8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f6d0:	f001 f85c 	bl	801078c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f6da:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f6dc:	e011      	b.n	800f702 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	691b      	ldr	r3, [r3, #16]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d012      	beq.n	800f70c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	3310      	adds	r3, #16
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f000 fc6a 	bl	800ffc4 <xTaskRemoveFromEventList>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d001      	beq.n	800f6fa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f6f6:	f000 fd3d 	bl	8010174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f6fa:	7bbb      	ldrb	r3, [r7, #14]
 800f6fc:	3b01      	subs	r3, #1
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f702:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f706:	2b00      	cmp	r3, #0
 800f708:	dce9      	bgt.n	800f6de <prvUnlockQueue+0x60>
 800f70a:	e000      	b.n	800f70e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f70c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	22ff      	movs	r2, #255	; 0xff
 800f712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f716:	f001 f867 	bl	80107e8 <vPortExitCritical>
}
 800f71a:	bf00      	nop
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}

0800f722 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f722:	b580      	push	{r7, lr}
 800f724:	b084      	sub	sp, #16
 800f726:	af00      	add	r7, sp, #0
 800f728:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f72a:	f001 f82f 	bl	801078c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f732:	2b00      	cmp	r3, #0
 800f734:	d102      	bne.n	800f73c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f736:	2301      	movs	r3, #1
 800f738:	60fb      	str	r3, [r7, #12]
 800f73a:	e001      	b.n	800f740 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f73c:	2300      	movs	r3, #0
 800f73e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f740:	f001 f852 	bl	80107e8 <vPortExitCritical>

	return xReturn;
 800f744:	68fb      	ldr	r3, [r7, #12]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3710      	adds	r7, #16
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b084      	sub	sp, #16
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f756:	f001 f819 	bl	801078c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f762:	429a      	cmp	r2, r3
 800f764:	d102      	bne.n	800f76c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f766:	2301      	movs	r3, #1
 800f768:	60fb      	str	r3, [r7, #12]
 800f76a:	e001      	b.n	800f770 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f76c:	2300      	movs	r3, #0
 800f76e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f770:	f001 f83a 	bl	80107e8 <vPortExitCritical>

	return xReturn;
 800f774:	68fb      	ldr	r3, [r7, #12]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3710      	adds	r7, #16
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f77e:	b580      	push	{r7, lr}
 800f780:	b08e      	sub	sp, #56	; 0x38
 800f782:	af04      	add	r7, sp, #16
 800f784:	60f8      	str	r0, [r7, #12]
 800f786:	60b9      	str	r1, [r7, #8]
 800f788:	607a      	str	r2, [r7, #4]
 800f78a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d109      	bne.n	800f7a6 <xTaskCreateStatic+0x28>
 800f792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f796:	f383 8811 	msr	BASEPRI, r3
 800f79a:	f3bf 8f6f 	isb	sy
 800f79e:	f3bf 8f4f 	dsb	sy
 800f7a2:	623b      	str	r3, [r7, #32]
 800f7a4:	e7fe      	b.n	800f7a4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800f7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d109      	bne.n	800f7c0 <xTaskCreateStatic+0x42>
 800f7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7b0:	f383 8811 	msr	BASEPRI, r3
 800f7b4:	f3bf 8f6f 	isb	sy
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	61fb      	str	r3, [r7, #28]
 800f7be:	e7fe      	b.n	800f7be <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f7c0:	2354      	movs	r3, #84	; 0x54
 800f7c2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	2b54      	cmp	r3, #84	; 0x54
 800f7c8:	d009      	beq.n	800f7de <xTaskCreateStatic+0x60>
 800f7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7ce:	f383 8811 	msr	BASEPRI, r3
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	f3bf 8f4f 	dsb	sy
 800f7da:	61bb      	str	r3, [r7, #24]
 800f7dc:	e7fe      	b.n	800f7dc <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f7de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d01e      	beq.n	800f824 <xTaskCreateStatic+0xa6>
 800f7e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d01b      	beq.n	800f824 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f7f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f8:	2202      	movs	r2, #2
 800f7fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f7fe:	2300      	movs	r3, #0
 800f800:	9303      	str	r3, [sp, #12]
 800f802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f804:	9302      	str	r3, [sp, #8]
 800f806:	f107 0314 	add.w	r3, r7, #20
 800f80a:	9301      	str	r3, [sp, #4]
 800f80c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f80e:	9300      	str	r3, [sp, #0]
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	68b9      	ldr	r1, [r7, #8]
 800f816:	68f8      	ldr	r0, [r7, #12]
 800f818:	f000 f850 	bl	800f8bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f81c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f81e:	f000 f8d3 	bl	800f9c8 <prvAddNewTaskToReadyList>
 800f822:	e001      	b.n	800f828 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800f824:	2300      	movs	r3, #0
 800f826:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f828:	697b      	ldr	r3, [r7, #20]
	}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3728      	adds	r7, #40	; 0x28
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}

0800f832 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f832:	b580      	push	{r7, lr}
 800f834:	b08c      	sub	sp, #48	; 0x30
 800f836:	af04      	add	r7, sp, #16
 800f838:	60f8      	str	r0, [r7, #12]
 800f83a:	60b9      	str	r1, [r7, #8]
 800f83c:	603b      	str	r3, [r7, #0]
 800f83e:	4613      	mov	r3, r2
 800f840:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f842:	88fb      	ldrh	r3, [r7, #6]
 800f844:	009b      	lsls	r3, r3, #2
 800f846:	4618      	mov	r0, r3
 800f848:	f001 f8ba 	bl	80109c0 <pvPortMalloc>
 800f84c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d00e      	beq.n	800f872 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f854:	2054      	movs	r0, #84	; 0x54
 800f856:	f001 f8b3 	bl	80109c0 <pvPortMalloc>
 800f85a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d003      	beq.n	800f86a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	697a      	ldr	r2, [r7, #20]
 800f866:	631a      	str	r2, [r3, #48]	; 0x30
 800f868:	e005      	b.n	800f876 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f86a:	6978      	ldr	r0, [r7, #20]
 800f86c:	f001 f96a 	bl	8010b44 <vPortFree>
 800f870:	e001      	b.n	800f876 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f872:	2300      	movs	r3, #0
 800f874:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f876:	69fb      	ldr	r3, [r7, #28]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d017      	beq.n	800f8ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2200      	movs	r2, #0
 800f880:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f884:	88fa      	ldrh	r2, [r7, #6]
 800f886:	2300      	movs	r3, #0
 800f888:	9303      	str	r3, [sp, #12]
 800f88a:	69fb      	ldr	r3, [r7, #28]
 800f88c:	9302      	str	r3, [sp, #8]
 800f88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f890:	9301      	str	r3, [sp, #4]
 800f892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f894:	9300      	str	r3, [sp, #0]
 800f896:	683b      	ldr	r3, [r7, #0]
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f000 f80e 	bl	800f8bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f8a0:	69f8      	ldr	r0, [r7, #28]
 800f8a2:	f000 f891 	bl	800f9c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	61bb      	str	r3, [r7, #24]
 800f8aa:	e002      	b.n	800f8b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f8ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f8b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f8b2:	69bb      	ldr	r3, [r7, #24]
	}
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	3720      	adds	r7, #32
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}

0800f8bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b088      	sub	sp, #32
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	607a      	str	r2, [r7, #4]
 800f8c8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	f023 0307 	bic.w	r3, r3, #7
 800f8e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	f003 0307 	and.w	r3, r3, #7
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d009      	beq.n	800f902 <prvInitialiseNewTask+0x46>
 800f8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8f2:	f383 8811 	msr	BASEPRI, r3
 800f8f6:	f3bf 8f6f 	isb	sy
 800f8fa:	f3bf 8f4f 	dsb	sy
 800f8fe:	617b      	str	r3, [r7, #20]
 800f900:	e7fe      	b.n	800f900 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d01f      	beq.n	800f948 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f908:	2300      	movs	r3, #0
 800f90a:	61fb      	str	r3, [r7, #28]
 800f90c:	e012      	b.n	800f934 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f90e:	68ba      	ldr	r2, [r7, #8]
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	4413      	add	r3, r2
 800f914:	7819      	ldrb	r1, [r3, #0]
 800f916:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	4413      	add	r3, r2
 800f91c:	3334      	adds	r3, #52	; 0x34
 800f91e:	460a      	mov	r2, r1
 800f920:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	4413      	add	r3, r2
 800f928:	781b      	ldrb	r3, [r3, #0]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d006      	beq.n	800f93c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	3301      	adds	r3, #1
 800f932:	61fb      	str	r3, [r7, #28]
 800f934:	69fb      	ldr	r3, [r7, #28]
 800f936:	2b0f      	cmp	r3, #15
 800f938:	d9e9      	bls.n	800f90e <prvInitialiseNewTask+0x52>
 800f93a:	e000      	b.n	800f93e <prvInitialiseNewTask+0x82>
			{
				break;
 800f93c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f940:	2200      	movs	r2, #0
 800f942:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f946:	e003      	b.n	800f950 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94a:	2200      	movs	r2, #0
 800f94c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f952:	2b06      	cmp	r3, #6
 800f954:	d901      	bls.n	800f95a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f956:	2306      	movs	r3, #6
 800f958:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f95c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f95e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f964:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f968:	2200      	movs	r2, #0
 800f96a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f96e:	3304      	adds	r3, #4
 800f970:	4618      	mov	r0, r3
 800f972:	f7ff f91d 	bl	800ebb0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f978:	3318      	adds	r3, #24
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7ff f918 	bl	800ebb0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f984:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f988:	f1c3 0207 	rsb	r2, r3, #7
 800f98c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f98e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f994:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f998:	2200      	movs	r2, #0
 800f99a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f99e:	2200      	movs	r2, #0
 800f9a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f9a4:	683a      	ldr	r2, [r7, #0]
 800f9a6:	68f9      	ldr	r1, [r7, #12]
 800f9a8:	69b8      	ldr	r0, [r7, #24]
 800f9aa:	f000 fdc9 	bl	8010540 <pxPortInitialiseStack>
 800f9ae:	4602      	mov	r2, r0
 800f9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d002      	beq.n	800f9c0 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f9be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9c0:	bf00      	nop
 800f9c2:	3720      	adds	r7, #32
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	bd80      	pop	{r7, pc}

0800f9c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b082      	sub	sp, #8
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f9d0:	f000 fedc 	bl	801078c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f9d4:	4b2a      	ldr	r3, [pc, #168]	; (800fa80 <prvAddNewTaskToReadyList+0xb8>)
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	4a29      	ldr	r2, [pc, #164]	; (800fa80 <prvAddNewTaskToReadyList+0xb8>)
 800f9dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f9de:	4b29      	ldr	r3, [pc, #164]	; (800fa84 <prvAddNewTaskToReadyList+0xbc>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d109      	bne.n	800f9fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f9e6:	4a27      	ldr	r2, [pc, #156]	; (800fa84 <prvAddNewTaskToReadyList+0xbc>)
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f9ec:	4b24      	ldr	r3, [pc, #144]	; (800fa80 <prvAddNewTaskToReadyList+0xb8>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d110      	bne.n	800fa16 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f9f4:	f000 fbe2 	bl	80101bc <prvInitialiseTaskLists>
 800f9f8:	e00d      	b.n	800fa16 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f9fa:	4b23      	ldr	r3, [pc, #140]	; (800fa88 <prvAddNewTaskToReadyList+0xc0>)
 800f9fc:	681b      	ldr	r3, [r3, #0]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d109      	bne.n	800fa16 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800fa02:	4b20      	ldr	r3, [pc, #128]	; (800fa84 <prvAddNewTaskToReadyList+0xbc>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d802      	bhi.n	800fa16 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800fa10:	4a1c      	ldr	r2, [pc, #112]	; (800fa84 <prvAddNewTaskToReadyList+0xbc>)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800fa16:	4b1d      	ldr	r3, [pc, #116]	; (800fa8c <prvAddNewTaskToReadyList+0xc4>)
 800fa18:	681b      	ldr	r3, [r3, #0]
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	4a1b      	ldr	r2, [pc, #108]	; (800fa8c <prvAddNewTaskToReadyList+0xc4>)
 800fa1e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa24:	2201      	movs	r2, #1
 800fa26:	409a      	lsls	r2, r3
 800fa28:	4b19      	ldr	r3, [pc, #100]	; (800fa90 <prvAddNewTaskToReadyList+0xc8>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4313      	orrs	r3, r2
 800fa2e:	4a18      	ldr	r2, [pc, #96]	; (800fa90 <prvAddNewTaskToReadyList+0xc8>)
 800fa30:	6013      	str	r3, [r2, #0]
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa36:	4613      	mov	r3, r2
 800fa38:	009b      	lsls	r3, r3, #2
 800fa3a:	4413      	add	r3, r2
 800fa3c:	009b      	lsls	r3, r3, #2
 800fa3e:	4a15      	ldr	r2, [pc, #84]	; (800fa94 <prvAddNewTaskToReadyList+0xcc>)
 800fa40:	441a      	add	r2, r3
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3304      	adds	r3, #4
 800fa46:	4619      	mov	r1, r3
 800fa48:	4610      	mov	r0, r2
 800fa4a:	f7ff f8be 	bl	800ebca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800fa4e:	f000 fecb 	bl	80107e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800fa52:	4b0d      	ldr	r3, [pc, #52]	; (800fa88 <prvAddNewTaskToReadyList+0xc0>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d00e      	beq.n	800fa78 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800fa5a:	4b0a      	ldr	r3, [pc, #40]	; (800fa84 <prvAddNewTaskToReadyList+0xbc>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d207      	bcs.n	800fa78 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800fa68:	4b0b      	ldr	r3, [pc, #44]	; (800fa98 <prvAddNewTaskToReadyList+0xd0>)
 800fa6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa6e:	601a      	str	r2, [r3, #0]
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fa78:	bf00      	nop
 800fa7a:	3708      	adds	r7, #8
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}
 800fa80:	2000098c 	.word	0x2000098c
 800fa84:	2000088c 	.word	0x2000088c
 800fa88:	20000998 	.word	0x20000998
 800fa8c:	200009a8 	.word	0x200009a8
 800fa90:	20000994 	.word	0x20000994
 800fa94:	20000890 	.word	0x20000890
 800fa98:	e000ed04 	.word	0xe000ed04

0800fa9c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800faa4:	2300      	movs	r3, #0
 800faa6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d016      	beq.n	800fadc <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800faae:	4b13      	ldr	r3, [pc, #76]	; (800fafc <vTaskDelay+0x60>)
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d009      	beq.n	800faca <vTaskDelay+0x2e>
 800fab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faba:	f383 8811 	msr	BASEPRI, r3
 800fabe:	f3bf 8f6f 	isb	sy
 800fac2:	f3bf 8f4f 	dsb	sy
 800fac6:	60bb      	str	r3, [r7, #8]
 800fac8:	e7fe      	b.n	800fac8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800faca:	f000 f879 	bl	800fbc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800face:	2100      	movs	r1, #0
 800fad0:	6878      	ldr	r0, [r7, #4]
 800fad2:	f000 fccf 	bl	8010474 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fad6:	f000 f881 	bl	800fbdc <xTaskResumeAll>
 800fada:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d107      	bne.n	800faf2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800fae2:	4b07      	ldr	r3, [pc, #28]	; (800fb00 <vTaskDelay+0x64>)
 800fae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fae8:	601a      	str	r2, [r3, #0]
 800faea:	f3bf 8f4f 	dsb	sy
 800faee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800faf2:	bf00      	nop
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	200009b4 	.word	0x200009b4
 800fb00:	e000ed04 	.word	0xe000ed04

0800fb04 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b08a      	sub	sp, #40	; 0x28
 800fb08:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fb12:	463a      	mov	r2, r7
 800fb14:	1d39      	adds	r1, r7, #4
 800fb16:	f107 0308 	add.w	r3, r7, #8
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7f3 f908 	bl	8002d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	68ba      	ldr	r2, [r7, #8]
 800fb26:	9202      	str	r2, [sp, #8]
 800fb28:	9301      	str	r3, [sp, #4]
 800fb2a:	2300      	movs	r3, #0
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	2300      	movs	r3, #0
 800fb30:	460a      	mov	r2, r1
 800fb32:	491d      	ldr	r1, [pc, #116]	; (800fba8 <vTaskStartScheduler+0xa4>)
 800fb34:	481d      	ldr	r0, [pc, #116]	; (800fbac <vTaskStartScheduler+0xa8>)
 800fb36:	f7ff fe22 	bl	800f77e <xTaskCreateStatic>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	4b1c      	ldr	r3, [pc, #112]	; (800fbb0 <vTaskStartScheduler+0xac>)
 800fb3e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fb40:	4b1b      	ldr	r3, [pc, #108]	; (800fbb0 <vTaskStartScheduler+0xac>)
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fb48:	2301      	movs	r3, #1
 800fb4a:	617b      	str	r3, [r7, #20]
 800fb4c:	e001      	b.n	800fb52 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2b01      	cmp	r3, #1
 800fb56:	d115      	bne.n	800fb84 <vTaskStartScheduler+0x80>
 800fb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb5c:	f383 8811 	msr	BASEPRI, r3
 800fb60:	f3bf 8f6f 	isb	sy
 800fb64:	f3bf 8f4f 	dsb	sy
 800fb68:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fb6a:	4b12      	ldr	r3, [pc, #72]	; (800fbb4 <vTaskStartScheduler+0xb0>)
 800fb6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fb70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fb72:	4b11      	ldr	r3, [pc, #68]	; (800fbb8 <vTaskStartScheduler+0xb4>)
 800fb74:	2201      	movs	r2, #1
 800fb76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fb78:	4b10      	ldr	r3, [pc, #64]	; (800fbbc <vTaskStartScheduler+0xb8>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fb7e:	f000 fd67 	bl	8010650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800fb82:	e00d      	b.n	800fba0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb8a:	d109      	bne.n	800fba0 <vTaskStartScheduler+0x9c>
 800fb8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb90:	f383 8811 	msr	BASEPRI, r3
 800fb94:	f3bf 8f6f 	isb	sy
 800fb98:	f3bf 8f4f 	dsb	sy
 800fb9c:	60fb      	str	r3, [r7, #12]
 800fb9e:	e7fe      	b.n	800fb9e <vTaskStartScheduler+0x9a>
}
 800fba0:	bf00      	nop
 800fba2:	3718      	adds	r7, #24
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd80      	pop	{r7, pc}
 800fba8:	08017510 	.word	0x08017510
 800fbac:	0801018d 	.word	0x0801018d
 800fbb0:	200009b0 	.word	0x200009b0
 800fbb4:	200009ac 	.word	0x200009ac
 800fbb8:	20000998 	.word	0x20000998
 800fbbc:	20000990 	.word	0x20000990

0800fbc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800fbc4:	4b04      	ldr	r3, [pc, #16]	; (800fbd8 <vTaskSuspendAll+0x18>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	4a03      	ldr	r2, [pc, #12]	; (800fbd8 <vTaskSuspendAll+0x18>)
 800fbcc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800fbce:	bf00      	nop
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd6:	4770      	bx	lr
 800fbd8:	200009b4 	.word	0x200009b4

0800fbdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fbea:	4b41      	ldr	r3, [pc, #260]	; (800fcf0 <xTaskResumeAll+0x114>)
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d109      	bne.n	800fc06 <xTaskResumeAll+0x2a>
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	603b      	str	r3, [r7, #0]
 800fc04:	e7fe      	b.n	800fc04 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fc06:	f000 fdc1 	bl	801078c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fc0a:	4b39      	ldr	r3, [pc, #228]	; (800fcf0 <xTaskResumeAll+0x114>)
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	3b01      	subs	r3, #1
 800fc10:	4a37      	ldr	r2, [pc, #220]	; (800fcf0 <xTaskResumeAll+0x114>)
 800fc12:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc14:	4b36      	ldr	r3, [pc, #216]	; (800fcf0 <xTaskResumeAll+0x114>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d161      	bne.n	800fce0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fc1c:	4b35      	ldr	r3, [pc, #212]	; (800fcf4 <xTaskResumeAll+0x118>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d05d      	beq.n	800fce0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc24:	e02e      	b.n	800fc84 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc26:	4b34      	ldr	r3, [pc, #208]	; (800fcf8 <xTaskResumeAll+0x11c>)
 800fc28:	68db      	ldr	r3, [r3, #12]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	3318      	adds	r3, #24
 800fc32:	4618      	mov	r0, r3
 800fc34:	f7ff f826 	bl	800ec84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	3304      	adds	r3, #4
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7ff f821 	bl	800ec84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc46:	2201      	movs	r2, #1
 800fc48:	409a      	lsls	r2, r3
 800fc4a:	4b2c      	ldr	r3, [pc, #176]	; (800fcfc <xTaskResumeAll+0x120>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	4313      	orrs	r3, r2
 800fc50:	4a2a      	ldr	r2, [pc, #168]	; (800fcfc <xTaskResumeAll+0x120>)
 800fc52:	6013      	str	r3, [r2, #0]
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc58:	4613      	mov	r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4413      	add	r3, r2
 800fc5e:	009b      	lsls	r3, r3, #2
 800fc60:	4a27      	ldr	r2, [pc, #156]	; (800fd00 <xTaskResumeAll+0x124>)
 800fc62:	441a      	add	r2, r3
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	3304      	adds	r3, #4
 800fc68:	4619      	mov	r1, r3
 800fc6a:	4610      	mov	r0, r2
 800fc6c:	f7fe ffad 	bl	800ebca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc74:	4b23      	ldr	r3, [pc, #140]	; (800fd04 <xTaskResumeAll+0x128>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc7a:	429a      	cmp	r2, r3
 800fc7c:	d302      	bcc.n	800fc84 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800fc7e:	4b22      	ldr	r3, [pc, #136]	; (800fd08 <xTaskResumeAll+0x12c>)
 800fc80:	2201      	movs	r2, #1
 800fc82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fc84:	4b1c      	ldr	r3, [pc, #112]	; (800fcf8 <xTaskResumeAll+0x11c>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d1cc      	bne.n	800fc26 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d001      	beq.n	800fc96 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fc92:	f000 fb2d 	bl	80102f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800fc96:	4b1d      	ldr	r3, [pc, #116]	; (800fd0c <xTaskResumeAll+0x130>)
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d010      	beq.n	800fcc4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fca2:	f000 f859 	bl	800fd58 <xTaskIncrementTick>
 800fca6:	4603      	mov	r3, r0
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d002      	beq.n	800fcb2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800fcac:	4b16      	ldr	r3, [pc, #88]	; (800fd08 <xTaskResumeAll+0x12c>)
 800fcae:	2201      	movs	r2, #1
 800fcb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	3b01      	subs	r3, #1
 800fcb6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d1f1      	bne.n	800fca2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800fcbe:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <xTaskResumeAll+0x130>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fcc4:	4b10      	ldr	r3, [pc, #64]	; (800fd08 <xTaskResumeAll+0x12c>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d009      	beq.n	800fce0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fccc:	2301      	movs	r3, #1
 800fcce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fcd0:	4b0f      	ldr	r3, [pc, #60]	; (800fd10 <xTaskResumeAll+0x134>)
 800fcd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcd6:	601a      	str	r2, [r3, #0]
 800fcd8:	f3bf 8f4f 	dsb	sy
 800fcdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fce0:	f000 fd82 	bl	80107e8 <vPortExitCritical>

	return xAlreadyYielded;
 800fce4:	68bb      	ldr	r3, [r7, #8]
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop
 800fcf0:	200009b4 	.word	0x200009b4
 800fcf4:	2000098c 	.word	0x2000098c
 800fcf8:	2000094c 	.word	0x2000094c
 800fcfc:	20000994 	.word	0x20000994
 800fd00:	20000890 	.word	0x20000890
 800fd04:	2000088c 	.word	0x2000088c
 800fd08:	200009a0 	.word	0x200009a0
 800fd0c:	2000099c 	.word	0x2000099c
 800fd10:	e000ed04 	.word	0xe000ed04

0800fd14 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fd14:	b480      	push	{r7}
 800fd16:	b083      	sub	sp, #12
 800fd18:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fd1a:	4b05      	ldr	r3, [pc, #20]	; (800fd30 <xTaskGetTickCount+0x1c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fd20:	687b      	ldr	r3, [r7, #4]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	370c      	adds	r7, #12
 800fd26:	46bd      	mov	sp, r7
 800fd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop
 800fd30:	20000990 	.word	0x20000990

0800fd34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	b082      	sub	sp, #8
 800fd38:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd3a:	f000 fe03 	bl	8010944 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fd3e:	2300      	movs	r3, #0
 800fd40:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fd42:	4b04      	ldr	r3, [pc, #16]	; (800fd54 <xTaskGetTickCountFromISR+0x20>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fd48:	683b      	ldr	r3, [r7, #0]
}
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	3708      	adds	r7, #8
 800fd4e:	46bd      	mov	sp, r7
 800fd50:	bd80      	pop	{r7, pc}
 800fd52:	bf00      	nop
 800fd54:	20000990 	.word	0x20000990

0800fd58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b086      	sub	sp, #24
 800fd5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fd5e:	2300      	movs	r3, #0
 800fd60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fd62:	4b4e      	ldr	r3, [pc, #312]	; (800fe9c <xTaskIncrementTick+0x144>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	f040 8087 	bne.w	800fe7a <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fd6c:	4b4c      	ldr	r3, [pc, #304]	; (800fea0 <xTaskIncrementTick+0x148>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	3301      	adds	r3, #1
 800fd72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fd74:	4a4a      	ldr	r2, [pc, #296]	; (800fea0 <xTaskIncrementTick+0x148>)
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d11f      	bne.n	800fdc0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800fd80:	4b48      	ldr	r3, [pc, #288]	; (800fea4 <xTaskIncrementTick+0x14c>)
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d009      	beq.n	800fd9e <xTaskIncrementTick+0x46>
 800fd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd8e:	f383 8811 	msr	BASEPRI, r3
 800fd92:	f3bf 8f6f 	isb	sy
 800fd96:	f3bf 8f4f 	dsb	sy
 800fd9a:	603b      	str	r3, [r7, #0]
 800fd9c:	e7fe      	b.n	800fd9c <xTaskIncrementTick+0x44>
 800fd9e:	4b41      	ldr	r3, [pc, #260]	; (800fea4 <xTaskIncrementTick+0x14c>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	60fb      	str	r3, [r7, #12]
 800fda4:	4b40      	ldr	r3, [pc, #256]	; (800fea8 <xTaskIncrementTick+0x150>)
 800fda6:	681b      	ldr	r3, [r3, #0]
 800fda8:	4a3e      	ldr	r2, [pc, #248]	; (800fea4 <xTaskIncrementTick+0x14c>)
 800fdaa:	6013      	str	r3, [r2, #0]
 800fdac:	4a3e      	ldr	r2, [pc, #248]	; (800fea8 <xTaskIncrementTick+0x150>)
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	6013      	str	r3, [r2, #0]
 800fdb2:	4b3e      	ldr	r3, [pc, #248]	; (800feac <xTaskIncrementTick+0x154>)
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	4a3c      	ldr	r2, [pc, #240]	; (800feac <xTaskIncrementTick+0x154>)
 800fdba:	6013      	str	r3, [r2, #0]
 800fdbc:	f000 fa98 	bl	80102f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fdc0:	4b3b      	ldr	r3, [pc, #236]	; (800feb0 <xTaskIncrementTick+0x158>)
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	693a      	ldr	r2, [r7, #16]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d348      	bcc.n	800fe5c <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fdca:	4b36      	ldr	r3, [pc, #216]	; (800fea4 <xTaskIncrementTick+0x14c>)
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d104      	bne.n	800fdde <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fdd4:	4b36      	ldr	r3, [pc, #216]	; (800feb0 <xTaskIncrementTick+0x158>)
 800fdd6:	f04f 32ff 	mov.w	r2, #4294967295
 800fdda:	601a      	str	r2, [r3, #0]
					break;
 800fddc:	e03e      	b.n	800fe5c <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fdde:	4b31      	ldr	r3, [pc, #196]	; (800fea4 <xTaskIncrementTick+0x14c>)
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	68db      	ldr	r3, [r3, #12]
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fdee:	693a      	ldr	r2, [r7, #16]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d203      	bcs.n	800fdfe <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fdf6:	4a2e      	ldr	r2, [pc, #184]	; (800feb0 <xTaskIncrementTick+0x158>)
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fdfc:	e02e      	b.n	800fe5c <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fdfe:	68bb      	ldr	r3, [r7, #8]
 800fe00:	3304      	adds	r3, #4
 800fe02:	4618      	mov	r0, r3
 800fe04:	f7fe ff3e 	bl	800ec84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fe08:	68bb      	ldr	r3, [r7, #8]
 800fe0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d004      	beq.n	800fe1a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	3318      	adds	r3, #24
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fe ff35 	bl	800ec84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe1e:	2201      	movs	r2, #1
 800fe20:	409a      	lsls	r2, r3
 800fe22:	4b24      	ldr	r3, [pc, #144]	; (800feb4 <xTaskIncrementTick+0x15c>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	4a22      	ldr	r2, [pc, #136]	; (800feb4 <xTaskIncrementTick+0x15c>)
 800fe2a:	6013      	str	r3, [r2, #0]
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe30:	4613      	mov	r3, r2
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4413      	add	r3, r2
 800fe36:	009b      	lsls	r3, r3, #2
 800fe38:	4a1f      	ldr	r2, [pc, #124]	; (800feb8 <xTaskIncrementTick+0x160>)
 800fe3a:	441a      	add	r2, r3
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	3304      	adds	r3, #4
 800fe40:	4619      	mov	r1, r3
 800fe42:	4610      	mov	r0, r2
 800fe44:	f7fe fec1 	bl	800ebca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe4c:	4b1b      	ldr	r3, [pc, #108]	; (800febc <xTaskIncrementTick+0x164>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe52:	429a      	cmp	r2, r3
 800fe54:	d3b9      	bcc.n	800fdca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800fe56:	2301      	movs	r3, #1
 800fe58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe5a:	e7b6      	b.n	800fdca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fe5c:	4b17      	ldr	r3, [pc, #92]	; (800febc <xTaskIncrementTick+0x164>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe62:	4915      	ldr	r1, [pc, #84]	; (800feb8 <xTaskIncrementTick+0x160>)
 800fe64:	4613      	mov	r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	4413      	add	r3, r2
 800fe6a:	009b      	lsls	r3, r3, #2
 800fe6c:	440b      	add	r3, r1
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d907      	bls.n	800fe84 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800fe74:	2301      	movs	r3, #1
 800fe76:	617b      	str	r3, [r7, #20]
 800fe78:	e004      	b.n	800fe84 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800fe7a:	4b11      	ldr	r3, [pc, #68]	; (800fec0 <xTaskIncrementTick+0x168>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	3301      	adds	r3, #1
 800fe80:	4a0f      	ldr	r2, [pc, #60]	; (800fec0 <xTaskIncrementTick+0x168>)
 800fe82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800fe84:	4b0f      	ldr	r3, [pc, #60]	; (800fec4 <xTaskIncrementTick+0x16c>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d001      	beq.n	800fe90 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800fe8c:	2301      	movs	r3, #1
 800fe8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800fe90:	697b      	ldr	r3, [r7, #20]
}
 800fe92:	4618      	mov	r0, r3
 800fe94:	3718      	adds	r7, #24
 800fe96:	46bd      	mov	sp, r7
 800fe98:	bd80      	pop	{r7, pc}
 800fe9a:	bf00      	nop
 800fe9c:	200009b4 	.word	0x200009b4
 800fea0:	20000990 	.word	0x20000990
 800fea4:	20000944 	.word	0x20000944
 800fea8:	20000948 	.word	0x20000948
 800feac:	200009a4 	.word	0x200009a4
 800feb0:	200009ac 	.word	0x200009ac
 800feb4:	20000994 	.word	0x20000994
 800feb8:	20000890 	.word	0x20000890
 800febc:	2000088c 	.word	0x2000088c
 800fec0:	2000099c 	.word	0x2000099c
 800fec4:	200009a0 	.word	0x200009a0

0800fec8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fec8:	b480      	push	{r7}
 800feca:	b087      	sub	sp, #28
 800fecc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fece:	4b26      	ldr	r3, [pc, #152]	; (800ff68 <vTaskSwitchContext+0xa0>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d003      	beq.n	800fede <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fed6:	4b25      	ldr	r3, [pc, #148]	; (800ff6c <vTaskSwitchContext+0xa4>)
 800fed8:	2201      	movs	r2, #1
 800feda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fedc:	e03e      	b.n	800ff5c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800fede:	4b23      	ldr	r3, [pc, #140]	; (800ff6c <vTaskSwitchContext+0xa4>)
 800fee0:	2200      	movs	r2, #0
 800fee2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fee4:	4b22      	ldr	r3, [pc, #136]	; (800ff70 <vTaskSwitchContext+0xa8>)
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	fab3 f383 	clz	r3, r3
 800fef0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fef2:	7afb      	ldrb	r3, [r7, #11]
 800fef4:	f1c3 031f 	rsb	r3, r3, #31
 800fef8:	617b      	str	r3, [r7, #20]
 800fefa:	491e      	ldr	r1, [pc, #120]	; (800ff74 <vTaskSwitchContext+0xac>)
 800fefc:	697a      	ldr	r2, [r7, #20]
 800fefe:	4613      	mov	r3, r2
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	4413      	add	r3, r2
 800ff04:	009b      	lsls	r3, r3, #2
 800ff06:	440b      	add	r3, r1
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d109      	bne.n	800ff22 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	607b      	str	r3, [r7, #4]
 800ff20:	e7fe      	b.n	800ff20 <vTaskSwitchContext+0x58>
 800ff22:	697a      	ldr	r2, [r7, #20]
 800ff24:	4613      	mov	r3, r2
 800ff26:	009b      	lsls	r3, r3, #2
 800ff28:	4413      	add	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4a11      	ldr	r2, [pc, #68]	; (800ff74 <vTaskSwitchContext+0xac>)
 800ff2e:	4413      	add	r3, r2
 800ff30:	613b      	str	r3, [r7, #16]
 800ff32:	693b      	ldr	r3, [r7, #16]
 800ff34:	685b      	ldr	r3, [r3, #4]
 800ff36:	685a      	ldr	r2, [r3, #4]
 800ff38:	693b      	ldr	r3, [r7, #16]
 800ff3a:	605a      	str	r2, [r3, #4]
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	685a      	ldr	r2, [r3, #4]
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	3308      	adds	r3, #8
 800ff44:	429a      	cmp	r2, r3
 800ff46:	d104      	bne.n	800ff52 <vTaskSwitchContext+0x8a>
 800ff48:	693b      	ldr	r3, [r7, #16]
 800ff4a:	685b      	ldr	r3, [r3, #4]
 800ff4c:	685a      	ldr	r2, [r3, #4]
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	605a      	str	r2, [r3, #4]
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	685b      	ldr	r3, [r3, #4]
 800ff56:	68db      	ldr	r3, [r3, #12]
 800ff58:	4a07      	ldr	r2, [pc, #28]	; (800ff78 <vTaskSwitchContext+0xb0>)
 800ff5a:	6013      	str	r3, [r2, #0]
}
 800ff5c:	bf00      	nop
 800ff5e:	371c      	adds	r7, #28
 800ff60:	46bd      	mov	sp, r7
 800ff62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff66:	4770      	bx	lr
 800ff68:	200009b4 	.word	0x200009b4
 800ff6c:	200009a0 	.word	0x200009a0
 800ff70:	20000994 	.word	0x20000994
 800ff74:	20000890 	.word	0x20000890
 800ff78:	2000088c 	.word	0x2000088c

0800ff7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b084      	sub	sp, #16
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
 800ff84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d109      	bne.n	800ffa0 <vTaskPlaceOnEventList+0x24>
 800ff8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	60fb      	str	r3, [r7, #12]
 800ff9e:	e7fe      	b.n	800ff9e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ffa0:	4b07      	ldr	r3, [pc, #28]	; (800ffc0 <vTaskPlaceOnEventList+0x44>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	3318      	adds	r3, #24
 800ffa6:	4619      	mov	r1, r3
 800ffa8:	6878      	ldr	r0, [r7, #4]
 800ffaa:	f7fe fe32 	bl	800ec12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ffae:	2101      	movs	r1, #1
 800ffb0:	6838      	ldr	r0, [r7, #0]
 800ffb2:	f000 fa5f 	bl	8010474 <prvAddCurrentTaskToDelayedList>
}
 800ffb6:	bf00      	nop
 800ffb8:	3710      	adds	r7, #16
 800ffba:	46bd      	mov	sp, r7
 800ffbc:	bd80      	pop	{r7, pc}
 800ffbe:	bf00      	nop
 800ffc0:	2000088c 	.word	0x2000088c

0800ffc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b086      	sub	sp, #24
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	68db      	ldr	r3, [r3, #12]
 800ffd0:	68db      	ldr	r3, [r3, #12]
 800ffd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d109      	bne.n	800ffee <xTaskRemoveFromEventList+0x2a>
 800ffda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffde:	f383 8811 	msr	BASEPRI, r3
 800ffe2:	f3bf 8f6f 	isb	sy
 800ffe6:	f3bf 8f4f 	dsb	sy
 800ffea:	60fb      	str	r3, [r7, #12]
 800ffec:	e7fe      	b.n	800ffec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ffee:	693b      	ldr	r3, [r7, #16]
 800fff0:	3318      	adds	r3, #24
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fe fe46 	bl	800ec84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fff8:	4b1d      	ldr	r3, [pc, #116]	; (8010070 <xTaskRemoveFromEventList+0xac>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d11c      	bne.n	801003a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	3304      	adds	r3, #4
 8010004:	4618      	mov	r0, r3
 8010006:	f7fe fe3d 	bl	800ec84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801000a:	693b      	ldr	r3, [r7, #16]
 801000c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801000e:	2201      	movs	r2, #1
 8010010:	409a      	lsls	r2, r3
 8010012:	4b18      	ldr	r3, [pc, #96]	; (8010074 <xTaskRemoveFromEventList+0xb0>)
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4313      	orrs	r3, r2
 8010018:	4a16      	ldr	r2, [pc, #88]	; (8010074 <xTaskRemoveFromEventList+0xb0>)
 801001a:	6013      	str	r3, [r2, #0]
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010020:	4613      	mov	r3, r2
 8010022:	009b      	lsls	r3, r3, #2
 8010024:	4413      	add	r3, r2
 8010026:	009b      	lsls	r3, r3, #2
 8010028:	4a13      	ldr	r2, [pc, #76]	; (8010078 <xTaskRemoveFromEventList+0xb4>)
 801002a:	441a      	add	r2, r3
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	3304      	adds	r3, #4
 8010030:	4619      	mov	r1, r3
 8010032:	4610      	mov	r0, r2
 8010034:	f7fe fdc9 	bl	800ebca <vListInsertEnd>
 8010038:	e005      	b.n	8010046 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801003a:	693b      	ldr	r3, [r7, #16]
 801003c:	3318      	adds	r3, #24
 801003e:	4619      	mov	r1, r3
 8010040:	480e      	ldr	r0, [pc, #56]	; (801007c <xTaskRemoveFromEventList+0xb8>)
 8010042:	f7fe fdc2 	bl	800ebca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8010046:	693b      	ldr	r3, [r7, #16]
 8010048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801004a:	4b0d      	ldr	r3, [pc, #52]	; (8010080 <xTaskRemoveFromEventList+0xbc>)
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010050:	429a      	cmp	r2, r3
 8010052:	d905      	bls.n	8010060 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8010054:	2301      	movs	r3, #1
 8010056:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8010058:	4b0a      	ldr	r3, [pc, #40]	; (8010084 <xTaskRemoveFromEventList+0xc0>)
 801005a:	2201      	movs	r2, #1
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	e001      	b.n	8010064 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8010060:	2300      	movs	r3, #0
 8010062:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8010064:	697b      	ldr	r3, [r7, #20]
}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}
 801006e:	bf00      	nop
 8010070:	200009b4 	.word	0x200009b4
 8010074:	20000994 	.word	0x20000994
 8010078:	20000890 	.word	0x20000890
 801007c:	2000094c 	.word	0x2000094c
 8010080:	2000088c 	.word	0x2000088c
 8010084:	200009a0 	.word	0x200009a0

08010088 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010090:	4b06      	ldr	r3, [pc, #24]	; (80100ac <vTaskInternalSetTimeOutState+0x24>)
 8010092:	681a      	ldr	r2, [r3, #0]
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010098:	4b05      	ldr	r3, [pc, #20]	; (80100b0 <vTaskInternalSetTimeOutState+0x28>)
 801009a:	681a      	ldr	r2, [r3, #0]
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	605a      	str	r2, [r3, #4]
}
 80100a0:	bf00      	nop
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr
 80100ac:	200009a4 	.word	0x200009a4
 80100b0:	20000990 	.word	0x20000990

080100b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b088      	sub	sp, #32
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
 80100bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d109      	bne.n	80100d8 <xTaskCheckForTimeOut+0x24>
 80100c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100c8:	f383 8811 	msr	BASEPRI, r3
 80100cc:	f3bf 8f6f 	isb	sy
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	613b      	str	r3, [r7, #16]
 80100d6:	e7fe      	b.n	80100d6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80100d8:	683b      	ldr	r3, [r7, #0]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d109      	bne.n	80100f2 <xTaskCheckForTimeOut+0x3e>
 80100de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100e2:	f383 8811 	msr	BASEPRI, r3
 80100e6:	f3bf 8f6f 	isb	sy
 80100ea:	f3bf 8f4f 	dsb	sy
 80100ee:	60fb      	str	r3, [r7, #12]
 80100f0:	e7fe      	b.n	80100f0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80100f2:	f000 fb4b 	bl	801078c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80100f6:	4b1d      	ldr	r3, [pc, #116]	; (801016c <xTaskCheckForTimeOut+0xb8>)
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	685b      	ldr	r3, [r3, #4]
 8010100:	69ba      	ldr	r2, [r7, #24]
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010106:	683b      	ldr	r3, [r7, #0]
 8010108:	681b      	ldr	r3, [r3, #0]
 801010a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801010e:	d102      	bne.n	8010116 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010110:	2300      	movs	r3, #0
 8010112:	61fb      	str	r3, [r7, #28]
 8010114:	e023      	b.n	801015e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681a      	ldr	r2, [r3, #0]
 801011a:	4b15      	ldr	r3, [pc, #84]	; (8010170 <xTaskCheckForTimeOut+0xbc>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d007      	beq.n	8010132 <xTaskCheckForTimeOut+0x7e>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	69ba      	ldr	r2, [r7, #24]
 8010128:	429a      	cmp	r2, r3
 801012a:	d302      	bcc.n	8010132 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801012c:	2301      	movs	r3, #1
 801012e:	61fb      	str	r3, [r7, #28]
 8010130:	e015      	b.n	801015e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010132:	683b      	ldr	r3, [r7, #0]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	697a      	ldr	r2, [r7, #20]
 8010138:	429a      	cmp	r2, r3
 801013a:	d20b      	bcs.n	8010154 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	681a      	ldr	r2, [r3, #0]
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	1ad2      	subs	r2, r2, r3
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f7ff ff9d 	bl	8010088 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801014e:	2300      	movs	r3, #0
 8010150:	61fb      	str	r3, [r7, #28]
 8010152:	e004      	b.n	801015e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	2200      	movs	r2, #0
 8010158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801015a:	2301      	movs	r3, #1
 801015c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801015e:	f000 fb43 	bl	80107e8 <vPortExitCritical>

	return xReturn;
 8010162:	69fb      	ldr	r3, [r7, #28]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3720      	adds	r7, #32
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}
 801016c:	20000990 	.word	0x20000990
 8010170:	200009a4 	.word	0x200009a4

08010174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010174:	b480      	push	{r7}
 8010176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010178:	4b03      	ldr	r3, [pc, #12]	; (8010188 <vTaskMissedYield+0x14>)
 801017a:	2201      	movs	r2, #1
 801017c:	601a      	str	r2, [r3, #0]
}
 801017e:	bf00      	nop
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	200009a0 	.word	0x200009a0

0801018c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b082      	sub	sp, #8
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010194:	f000 f852 	bl	801023c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010198:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <prvIdleTask+0x28>)
 801019a:	681b      	ldr	r3, [r3, #0]
 801019c:	2b01      	cmp	r3, #1
 801019e:	d9f9      	bls.n	8010194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80101a0:	4b05      	ldr	r3, [pc, #20]	; (80101b8 <prvIdleTask+0x2c>)
 80101a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101a6:	601a      	str	r2, [r3, #0]
 80101a8:	f3bf 8f4f 	dsb	sy
 80101ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80101b0:	e7f0      	b.n	8010194 <prvIdleTask+0x8>
 80101b2:	bf00      	nop
 80101b4:	20000890 	.word	0x20000890
 80101b8:	e000ed04 	.word	0xe000ed04

080101bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80101bc:	b580      	push	{r7, lr}
 80101be:	b082      	sub	sp, #8
 80101c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101c2:	2300      	movs	r3, #0
 80101c4:	607b      	str	r3, [r7, #4]
 80101c6:	e00c      	b.n	80101e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	4613      	mov	r3, r2
 80101cc:	009b      	lsls	r3, r3, #2
 80101ce:	4413      	add	r3, r2
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	4a12      	ldr	r2, [pc, #72]	; (801021c <prvInitialiseTaskLists+0x60>)
 80101d4:	4413      	add	r3, r2
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7fe fcca 	bl	800eb70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	3301      	adds	r3, #1
 80101e0:	607b      	str	r3, [r7, #4]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b06      	cmp	r3, #6
 80101e6:	d9ef      	bls.n	80101c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80101e8:	480d      	ldr	r0, [pc, #52]	; (8010220 <prvInitialiseTaskLists+0x64>)
 80101ea:	f7fe fcc1 	bl	800eb70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80101ee:	480d      	ldr	r0, [pc, #52]	; (8010224 <prvInitialiseTaskLists+0x68>)
 80101f0:	f7fe fcbe 	bl	800eb70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80101f4:	480c      	ldr	r0, [pc, #48]	; (8010228 <prvInitialiseTaskLists+0x6c>)
 80101f6:	f7fe fcbb 	bl	800eb70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80101fa:	480c      	ldr	r0, [pc, #48]	; (801022c <prvInitialiseTaskLists+0x70>)
 80101fc:	f7fe fcb8 	bl	800eb70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010200:	480b      	ldr	r0, [pc, #44]	; (8010230 <prvInitialiseTaskLists+0x74>)
 8010202:	f7fe fcb5 	bl	800eb70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010206:	4b0b      	ldr	r3, [pc, #44]	; (8010234 <prvInitialiseTaskLists+0x78>)
 8010208:	4a05      	ldr	r2, [pc, #20]	; (8010220 <prvInitialiseTaskLists+0x64>)
 801020a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801020c:	4b0a      	ldr	r3, [pc, #40]	; (8010238 <prvInitialiseTaskLists+0x7c>)
 801020e:	4a05      	ldr	r2, [pc, #20]	; (8010224 <prvInitialiseTaskLists+0x68>)
 8010210:	601a      	str	r2, [r3, #0]
}
 8010212:	bf00      	nop
 8010214:	3708      	adds	r7, #8
 8010216:	46bd      	mov	sp, r7
 8010218:	bd80      	pop	{r7, pc}
 801021a:	bf00      	nop
 801021c:	20000890 	.word	0x20000890
 8010220:	2000091c 	.word	0x2000091c
 8010224:	20000930 	.word	0x20000930
 8010228:	2000094c 	.word	0x2000094c
 801022c:	20000960 	.word	0x20000960
 8010230:	20000978 	.word	0x20000978
 8010234:	20000944 	.word	0x20000944
 8010238:	20000948 	.word	0x20000948

0801023c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010242:	e019      	b.n	8010278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010244:	f000 faa2 	bl	801078c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010248:	4b0f      	ldr	r3, [pc, #60]	; (8010288 <prvCheckTasksWaitingTermination+0x4c>)
 801024a:	68db      	ldr	r3, [r3, #12]
 801024c:	68db      	ldr	r3, [r3, #12]
 801024e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	3304      	adds	r3, #4
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe fd15 	bl	800ec84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801025a:	4b0c      	ldr	r3, [pc, #48]	; (801028c <prvCheckTasksWaitingTermination+0x50>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	3b01      	subs	r3, #1
 8010260:	4a0a      	ldr	r2, [pc, #40]	; (801028c <prvCheckTasksWaitingTermination+0x50>)
 8010262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010264:	4b0a      	ldr	r3, [pc, #40]	; (8010290 <prvCheckTasksWaitingTermination+0x54>)
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	3b01      	subs	r3, #1
 801026a:	4a09      	ldr	r2, [pc, #36]	; (8010290 <prvCheckTasksWaitingTermination+0x54>)
 801026c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801026e:	f000 fabb 	bl	80107e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f000 f80e 	bl	8010294 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010278:	4b05      	ldr	r3, [pc, #20]	; (8010290 <prvCheckTasksWaitingTermination+0x54>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d1e1      	bne.n	8010244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010280:	bf00      	nop
 8010282:	3708      	adds	r7, #8
 8010284:	46bd      	mov	sp, r7
 8010286:	bd80      	pop	{r7, pc}
 8010288:	20000960 	.word	0x20000960
 801028c:	2000098c 	.word	0x2000098c
 8010290:	20000974 	.word	0x20000974

08010294 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d108      	bne.n	80102b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102aa:	4618      	mov	r0, r3
 80102ac:	f000 fc4a 	bl	8010b44 <vPortFree>
				vPortFree( pxTCB );
 80102b0:	6878      	ldr	r0, [r7, #4]
 80102b2:	f000 fc47 	bl	8010b44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80102b6:	e017      	b.n	80102e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d103      	bne.n	80102ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80102c2:	6878      	ldr	r0, [r7, #4]
 80102c4:	f000 fc3e 	bl	8010b44 <vPortFree>
	}
 80102c8:	e00e      	b.n	80102e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80102d0:	2b02      	cmp	r3, #2
 80102d2:	d009      	beq.n	80102e8 <prvDeleteTCB+0x54>
 80102d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102d8:	f383 8811 	msr	BASEPRI, r3
 80102dc:	f3bf 8f6f 	isb	sy
 80102e0:	f3bf 8f4f 	dsb	sy
 80102e4:	60fb      	str	r3, [r7, #12]
 80102e6:	e7fe      	b.n	80102e6 <prvDeleteTCB+0x52>
	}
 80102e8:	bf00      	nop
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80102f0:	b480      	push	{r7}
 80102f2:	b083      	sub	sp, #12
 80102f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80102f6:	4b0c      	ldr	r3, [pc, #48]	; (8010328 <prvResetNextTaskUnblockTime+0x38>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d104      	bne.n	801030a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010300:	4b0a      	ldr	r3, [pc, #40]	; (801032c <prvResetNextTaskUnblockTime+0x3c>)
 8010302:	f04f 32ff 	mov.w	r2, #4294967295
 8010306:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010308:	e008      	b.n	801031c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801030a:	4b07      	ldr	r3, [pc, #28]	; (8010328 <prvResetNextTaskUnblockTime+0x38>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	68db      	ldr	r3, [r3, #12]
 8010310:	68db      	ldr	r3, [r3, #12]
 8010312:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	4a04      	ldr	r2, [pc, #16]	; (801032c <prvResetNextTaskUnblockTime+0x3c>)
 801031a:	6013      	str	r3, [r2, #0]
}
 801031c:	bf00      	nop
 801031e:	370c      	adds	r7, #12
 8010320:	46bd      	mov	sp, r7
 8010322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010326:	4770      	bx	lr
 8010328:	20000944 	.word	0x20000944
 801032c:	200009ac 	.word	0x200009ac

08010330 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010330:	b480      	push	{r7}
 8010332:	b083      	sub	sp, #12
 8010334:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010336:	4b0b      	ldr	r3, [pc, #44]	; (8010364 <xTaskGetSchedulerState+0x34>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d102      	bne.n	8010344 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801033e:	2301      	movs	r3, #1
 8010340:	607b      	str	r3, [r7, #4]
 8010342:	e008      	b.n	8010356 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010344:	4b08      	ldr	r3, [pc, #32]	; (8010368 <xTaskGetSchedulerState+0x38>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d102      	bne.n	8010352 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801034c:	2302      	movs	r3, #2
 801034e:	607b      	str	r3, [r7, #4]
 8010350:	e001      	b.n	8010356 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010352:	2300      	movs	r3, #0
 8010354:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010356:	687b      	ldr	r3, [r7, #4]
	}
 8010358:	4618      	mov	r0, r3
 801035a:	370c      	adds	r7, #12
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr
 8010364:	20000998 	.word	0x20000998
 8010368:	200009b4 	.word	0x200009b4

0801036c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801036c:	b580      	push	{r7, lr}
 801036e:	b086      	sub	sp, #24
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010378:	2300      	movs	r3, #0
 801037a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d06c      	beq.n	801045c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010382:	4b39      	ldr	r3, [pc, #228]	; (8010468 <xTaskPriorityDisinherit+0xfc>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	693a      	ldr	r2, [r7, #16]
 8010388:	429a      	cmp	r2, r3
 801038a:	d009      	beq.n	80103a0 <xTaskPriorityDisinherit+0x34>
 801038c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010390:	f383 8811 	msr	BASEPRI, r3
 8010394:	f3bf 8f6f 	isb	sy
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	60fb      	str	r3, [r7, #12]
 801039e:	e7fe      	b.n	801039e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d109      	bne.n	80103bc <xTaskPriorityDisinherit+0x50>
 80103a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103ac:	f383 8811 	msr	BASEPRI, r3
 80103b0:	f3bf 8f6f 	isb	sy
 80103b4:	f3bf 8f4f 	dsb	sy
 80103b8:	60bb      	str	r3, [r7, #8]
 80103ba:	e7fe      	b.n	80103ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103c0:	1e5a      	subs	r2, r3, #1
 80103c2:	693b      	ldr	r3, [r7, #16]
 80103c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d044      	beq.n	801045c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80103d2:	693b      	ldr	r3, [r7, #16]
 80103d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d140      	bne.n	801045c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	3304      	adds	r3, #4
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe fc50 	bl	800ec84 <uxListRemove>
 80103e4:	4603      	mov	r3, r0
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d115      	bne.n	8010416 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103ee:	491f      	ldr	r1, [pc, #124]	; (801046c <xTaskPriorityDisinherit+0x100>)
 80103f0:	4613      	mov	r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	4413      	add	r3, r2
 80103f6:	009b      	lsls	r3, r3, #2
 80103f8:	440b      	add	r3, r1
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d10a      	bne.n	8010416 <xTaskPriorityDisinherit+0xaa>
 8010400:	693b      	ldr	r3, [r7, #16]
 8010402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010404:	2201      	movs	r2, #1
 8010406:	fa02 f303 	lsl.w	r3, r2, r3
 801040a:	43da      	mvns	r2, r3
 801040c:	4b18      	ldr	r3, [pc, #96]	; (8010470 <xTaskPriorityDisinherit+0x104>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4013      	ands	r3, r2
 8010412:	4a17      	ldr	r2, [pc, #92]	; (8010470 <xTaskPriorityDisinherit+0x104>)
 8010414:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010422:	f1c3 0207 	rsb	r2, r3, #7
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801042e:	2201      	movs	r2, #1
 8010430:	409a      	lsls	r2, r3
 8010432:	4b0f      	ldr	r3, [pc, #60]	; (8010470 <xTaskPriorityDisinherit+0x104>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4313      	orrs	r3, r2
 8010438:	4a0d      	ldr	r2, [pc, #52]	; (8010470 <xTaskPriorityDisinherit+0x104>)
 801043a:	6013      	str	r3, [r2, #0]
 801043c:	693b      	ldr	r3, [r7, #16]
 801043e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010440:	4613      	mov	r3, r2
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	4413      	add	r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4a08      	ldr	r2, [pc, #32]	; (801046c <xTaskPriorityDisinherit+0x100>)
 801044a:	441a      	add	r2, r3
 801044c:	693b      	ldr	r3, [r7, #16]
 801044e:	3304      	adds	r3, #4
 8010450:	4619      	mov	r1, r3
 8010452:	4610      	mov	r0, r2
 8010454:	f7fe fbb9 	bl	800ebca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010458:	2301      	movs	r3, #1
 801045a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801045c:	697b      	ldr	r3, [r7, #20]
	}
 801045e:	4618      	mov	r0, r3
 8010460:	3718      	adds	r7, #24
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	2000088c 	.word	0x2000088c
 801046c:	20000890 	.word	0x20000890
 8010470:	20000994 	.word	0x20000994

08010474 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b084      	sub	sp, #16
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801047e:	4b29      	ldr	r3, [pc, #164]	; (8010524 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010484:	4b28      	ldr	r3, [pc, #160]	; (8010528 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3304      	adds	r3, #4
 801048a:	4618      	mov	r0, r3
 801048c:	f7fe fbfa 	bl	800ec84 <uxListRemove>
 8010490:	4603      	mov	r3, r0
 8010492:	2b00      	cmp	r3, #0
 8010494:	d10b      	bne.n	80104ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010496:	4b24      	ldr	r3, [pc, #144]	; (8010528 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801049c:	2201      	movs	r2, #1
 801049e:	fa02 f303 	lsl.w	r3, r2, r3
 80104a2:	43da      	mvns	r2, r3
 80104a4:	4b21      	ldr	r3, [pc, #132]	; (801052c <prvAddCurrentTaskToDelayedList+0xb8>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	4013      	ands	r3, r2
 80104aa:	4a20      	ldr	r2, [pc, #128]	; (801052c <prvAddCurrentTaskToDelayedList+0xb8>)
 80104ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104b4:	d10a      	bne.n	80104cc <prvAddCurrentTaskToDelayedList+0x58>
 80104b6:	683b      	ldr	r3, [r7, #0]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d007      	beq.n	80104cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104bc:	4b1a      	ldr	r3, [pc, #104]	; (8010528 <prvAddCurrentTaskToDelayedList+0xb4>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	3304      	adds	r3, #4
 80104c2:	4619      	mov	r1, r3
 80104c4:	481a      	ldr	r0, [pc, #104]	; (8010530 <prvAddCurrentTaskToDelayedList+0xbc>)
 80104c6:	f7fe fb80 	bl	800ebca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80104ca:	e026      	b.n	801051a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	4413      	add	r3, r2
 80104d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80104d4:	4b14      	ldr	r3, [pc, #80]	; (8010528 <prvAddCurrentTaskToDelayedList+0xb4>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80104dc:	68ba      	ldr	r2, [r7, #8]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	429a      	cmp	r2, r3
 80104e2:	d209      	bcs.n	80104f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104e4:	4b13      	ldr	r3, [pc, #76]	; (8010534 <prvAddCurrentTaskToDelayedList+0xc0>)
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	4b0f      	ldr	r3, [pc, #60]	; (8010528 <prvAddCurrentTaskToDelayedList+0xb4>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	3304      	adds	r3, #4
 80104ee:	4619      	mov	r1, r3
 80104f0:	4610      	mov	r0, r2
 80104f2:	f7fe fb8e 	bl	800ec12 <vListInsert>
}
 80104f6:	e010      	b.n	801051a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80104f8:	4b0f      	ldr	r3, [pc, #60]	; (8010538 <prvAddCurrentTaskToDelayedList+0xc4>)
 80104fa:	681a      	ldr	r2, [r3, #0]
 80104fc:	4b0a      	ldr	r3, [pc, #40]	; (8010528 <prvAddCurrentTaskToDelayedList+0xb4>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	3304      	adds	r3, #4
 8010502:	4619      	mov	r1, r3
 8010504:	4610      	mov	r0, r2
 8010506:	f7fe fb84 	bl	800ec12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801050a:	4b0c      	ldr	r3, [pc, #48]	; (801053c <prvAddCurrentTaskToDelayedList+0xc8>)
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	68ba      	ldr	r2, [r7, #8]
 8010510:	429a      	cmp	r2, r3
 8010512:	d202      	bcs.n	801051a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8010514:	4a09      	ldr	r2, [pc, #36]	; (801053c <prvAddCurrentTaskToDelayedList+0xc8>)
 8010516:	68bb      	ldr	r3, [r7, #8]
 8010518:	6013      	str	r3, [r2, #0]
}
 801051a:	bf00      	nop
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
 8010522:	bf00      	nop
 8010524:	20000990 	.word	0x20000990
 8010528:	2000088c 	.word	0x2000088c
 801052c:	20000994 	.word	0x20000994
 8010530:	20000978 	.word	0x20000978
 8010534:	20000948 	.word	0x20000948
 8010538:	20000944 	.word	0x20000944
 801053c:	200009ac 	.word	0x200009ac

08010540 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010540:	b480      	push	{r7}
 8010542:	b085      	sub	sp, #20
 8010544:	af00      	add	r7, sp, #0
 8010546:	60f8      	str	r0, [r7, #12]
 8010548:	60b9      	str	r1, [r7, #8]
 801054a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	3b04      	subs	r3, #4
 8010550:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	3b04      	subs	r3, #4
 801055e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f023 0201 	bic.w	r2, r3, #1
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	3b04      	subs	r3, #4
 801056e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010570:	4a0c      	ldr	r2, [pc, #48]	; (80105a4 <pxPortInitialiseStack+0x64>)
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	3b14      	subs	r3, #20
 801057a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801057c:	687a      	ldr	r2, [r7, #4]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	3b04      	subs	r3, #4
 8010586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	f06f 0202 	mvn.w	r2, #2
 801058e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	3b20      	subs	r3, #32
 8010594:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010596:	68fb      	ldr	r3, [r7, #12]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr
 80105a4:	080105a9 	.word	0x080105a9

080105a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80105a8:	b480      	push	{r7}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80105ae:	2300      	movs	r3, #0
 80105b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80105b2:	4b11      	ldr	r3, [pc, #68]	; (80105f8 <prvTaskExitError+0x50>)
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105ba:	d009      	beq.n	80105d0 <prvTaskExitError+0x28>
 80105bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c0:	f383 8811 	msr	BASEPRI, r3
 80105c4:	f3bf 8f6f 	isb	sy
 80105c8:	f3bf 8f4f 	dsb	sy
 80105cc:	60fb      	str	r3, [r7, #12]
 80105ce:	e7fe      	b.n	80105ce <prvTaskExitError+0x26>
 80105d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105d4:	f383 8811 	msr	BASEPRI, r3
 80105d8:	f3bf 8f6f 	isb	sy
 80105dc:	f3bf 8f4f 	dsb	sy
 80105e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80105e2:	bf00      	nop
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d0fc      	beq.n	80105e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80105ea:	bf00      	nop
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	200003b0 	.word	0x200003b0
 80105fc:	00000000 	.word	0x00000000

08010600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010600:	4b07      	ldr	r3, [pc, #28]	; (8010620 <pxCurrentTCBConst2>)
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	6808      	ldr	r0, [r1, #0]
 8010606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	f380 8809 	msr	PSP, r0
 801060e:	f3bf 8f6f 	isb	sy
 8010612:	f04f 0000 	mov.w	r0, #0
 8010616:	f380 8811 	msr	BASEPRI, r0
 801061a:	4770      	bx	lr
 801061c:	f3af 8000 	nop.w

08010620 <pxCurrentTCBConst2>:
 8010620:	2000088c 	.word	0x2000088c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010624:	bf00      	nop
 8010626:	bf00      	nop

08010628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010628:	4808      	ldr	r0, [pc, #32]	; (801064c <prvPortStartFirstTask+0x24>)
 801062a:	6800      	ldr	r0, [r0, #0]
 801062c:	6800      	ldr	r0, [r0, #0]
 801062e:	f380 8808 	msr	MSP, r0
 8010632:	f04f 0000 	mov.w	r0, #0
 8010636:	f380 8814 	msr	CONTROL, r0
 801063a:	b662      	cpsie	i
 801063c:	b661      	cpsie	f
 801063e:	f3bf 8f4f 	dsb	sy
 8010642:	f3bf 8f6f 	isb	sy
 8010646:	df00      	svc	0
 8010648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801064a:	bf00      	nop
 801064c:	e000ed08 	.word	0xe000ed08

08010650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b086      	sub	sp, #24
 8010654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010656:	4b44      	ldr	r3, [pc, #272]	; (8010768 <xPortStartScheduler+0x118>)
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4a44      	ldr	r2, [pc, #272]	; (801076c <xPortStartScheduler+0x11c>)
 801065c:	4293      	cmp	r3, r2
 801065e:	d109      	bne.n	8010674 <xPortStartScheduler+0x24>
 8010660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010664:	f383 8811 	msr	BASEPRI, r3
 8010668:	f3bf 8f6f 	isb	sy
 801066c:	f3bf 8f4f 	dsb	sy
 8010670:	613b      	str	r3, [r7, #16]
 8010672:	e7fe      	b.n	8010672 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010674:	4b3c      	ldr	r3, [pc, #240]	; (8010768 <xPortStartScheduler+0x118>)
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a3d      	ldr	r2, [pc, #244]	; (8010770 <xPortStartScheduler+0x120>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d109      	bne.n	8010692 <xPortStartScheduler+0x42>
 801067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	60fb      	str	r3, [r7, #12]
 8010690:	e7fe      	b.n	8010690 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010692:	4b38      	ldr	r3, [pc, #224]	; (8010774 <xPortStartScheduler+0x124>)
 8010694:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010696:	697b      	ldr	r3, [r7, #20]
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	b2db      	uxtb	r3, r3
 801069c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801069e:	697b      	ldr	r3, [r7, #20]
 80106a0:	22ff      	movs	r2, #255	; 0xff
 80106a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80106ac:	78fb      	ldrb	r3, [r7, #3]
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80106b4:	b2da      	uxtb	r2, r3
 80106b6:	4b30      	ldr	r3, [pc, #192]	; (8010778 <xPortStartScheduler+0x128>)
 80106b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80106ba:	4b30      	ldr	r3, [pc, #192]	; (801077c <xPortStartScheduler+0x12c>)
 80106bc:	2207      	movs	r2, #7
 80106be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106c0:	e009      	b.n	80106d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80106c2:	4b2e      	ldr	r3, [pc, #184]	; (801077c <xPortStartScheduler+0x12c>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	3b01      	subs	r3, #1
 80106c8:	4a2c      	ldr	r2, [pc, #176]	; (801077c <xPortStartScheduler+0x12c>)
 80106ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80106cc:	78fb      	ldrb	r3, [r7, #3]
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	005b      	lsls	r3, r3, #1
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80106d6:	78fb      	ldrb	r3, [r7, #3]
 80106d8:	b2db      	uxtb	r3, r3
 80106da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106de:	2b80      	cmp	r3, #128	; 0x80
 80106e0:	d0ef      	beq.n	80106c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80106e2:	4b26      	ldr	r3, [pc, #152]	; (801077c <xPortStartScheduler+0x12c>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	f1c3 0307 	rsb	r3, r3, #7
 80106ea:	2b04      	cmp	r3, #4
 80106ec:	d009      	beq.n	8010702 <xPortStartScheduler+0xb2>
 80106ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f2:	f383 8811 	msr	BASEPRI, r3
 80106f6:	f3bf 8f6f 	isb	sy
 80106fa:	f3bf 8f4f 	dsb	sy
 80106fe:	60bb      	str	r3, [r7, #8]
 8010700:	e7fe      	b.n	8010700 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010702:	4b1e      	ldr	r3, [pc, #120]	; (801077c <xPortStartScheduler+0x12c>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	021b      	lsls	r3, r3, #8
 8010708:	4a1c      	ldr	r2, [pc, #112]	; (801077c <xPortStartScheduler+0x12c>)
 801070a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801070c:	4b1b      	ldr	r3, [pc, #108]	; (801077c <xPortStartScheduler+0x12c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010714:	4a19      	ldr	r2, [pc, #100]	; (801077c <xPortStartScheduler+0x12c>)
 8010716:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	b2da      	uxtb	r2, r3
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010720:	4b17      	ldr	r3, [pc, #92]	; (8010780 <xPortStartScheduler+0x130>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	4a16      	ldr	r2, [pc, #88]	; (8010780 <xPortStartScheduler+0x130>)
 8010726:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801072a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801072c:	4b14      	ldr	r3, [pc, #80]	; (8010780 <xPortStartScheduler+0x130>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	4a13      	ldr	r2, [pc, #76]	; (8010780 <xPortStartScheduler+0x130>)
 8010732:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010736:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010738:	f000 f8d6 	bl	80108e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801073c:	4b11      	ldr	r3, [pc, #68]	; (8010784 <xPortStartScheduler+0x134>)
 801073e:	2200      	movs	r2, #0
 8010740:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010742:	f000 f8f5 	bl	8010930 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010746:	4b10      	ldr	r3, [pc, #64]	; (8010788 <xPortStartScheduler+0x138>)
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a0f      	ldr	r2, [pc, #60]	; (8010788 <xPortStartScheduler+0x138>)
 801074c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010750:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010752:	f7ff ff69 	bl	8010628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010756:	f7ff fbb7 	bl	800fec8 <vTaskSwitchContext>
	prvTaskExitError();
 801075a:	f7ff ff25 	bl	80105a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801075e:	2300      	movs	r3, #0
}
 8010760:	4618      	mov	r0, r3
 8010762:	3718      	adds	r7, #24
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}
 8010768:	e000ed00 	.word	0xe000ed00
 801076c:	410fc271 	.word	0x410fc271
 8010770:	410fc270 	.word	0x410fc270
 8010774:	e000e400 	.word	0xe000e400
 8010778:	200009b8 	.word	0x200009b8
 801077c:	200009bc 	.word	0x200009bc
 8010780:	e000ed20 	.word	0xe000ed20
 8010784:	200003b0 	.word	0x200003b0
 8010788:	e000ef34 	.word	0xe000ef34

0801078c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801078c:	b480      	push	{r7}
 801078e:	b083      	sub	sp, #12
 8010790:	af00      	add	r7, sp, #0
 8010792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010796:	f383 8811 	msr	BASEPRI, r3
 801079a:	f3bf 8f6f 	isb	sy
 801079e:	f3bf 8f4f 	dsb	sy
 80107a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80107a4:	4b0e      	ldr	r3, [pc, #56]	; (80107e0 <vPortEnterCritical+0x54>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	3301      	adds	r3, #1
 80107aa:	4a0d      	ldr	r2, [pc, #52]	; (80107e0 <vPortEnterCritical+0x54>)
 80107ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80107ae:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <vPortEnterCritical+0x54>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	2b01      	cmp	r3, #1
 80107b4:	d10e      	bne.n	80107d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80107b6:	4b0b      	ldr	r3, [pc, #44]	; (80107e4 <vPortEnterCritical+0x58>)
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d009      	beq.n	80107d4 <vPortEnterCritical+0x48>
 80107c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107c4:	f383 8811 	msr	BASEPRI, r3
 80107c8:	f3bf 8f6f 	isb	sy
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	603b      	str	r3, [r7, #0]
 80107d2:	e7fe      	b.n	80107d2 <vPortEnterCritical+0x46>
	}
}
 80107d4:	bf00      	nop
 80107d6:	370c      	adds	r7, #12
 80107d8:	46bd      	mov	sp, r7
 80107da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107de:	4770      	bx	lr
 80107e0:	200003b0 	.word	0x200003b0
 80107e4:	e000ed04 	.word	0xe000ed04

080107e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80107e8:	b480      	push	{r7}
 80107ea:	b083      	sub	sp, #12
 80107ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80107ee:	4b11      	ldr	r3, [pc, #68]	; (8010834 <vPortExitCritical+0x4c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d109      	bne.n	801080a <vPortExitCritical+0x22>
 80107f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107fa:	f383 8811 	msr	BASEPRI, r3
 80107fe:	f3bf 8f6f 	isb	sy
 8010802:	f3bf 8f4f 	dsb	sy
 8010806:	607b      	str	r3, [r7, #4]
 8010808:	e7fe      	b.n	8010808 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 801080a:	4b0a      	ldr	r3, [pc, #40]	; (8010834 <vPortExitCritical+0x4c>)
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	3b01      	subs	r3, #1
 8010810:	4a08      	ldr	r2, [pc, #32]	; (8010834 <vPortExitCritical+0x4c>)
 8010812:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010814:	4b07      	ldr	r3, [pc, #28]	; (8010834 <vPortExitCritical+0x4c>)
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	2b00      	cmp	r3, #0
 801081a:	d104      	bne.n	8010826 <vPortExitCritical+0x3e>
 801081c:	2300      	movs	r3, #0
 801081e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010820:	683b      	ldr	r3, [r7, #0]
 8010822:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8010826:	bf00      	nop
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	200003b0 	.word	0x200003b0
	...

08010840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010840:	f3ef 8009 	mrs	r0, PSP
 8010844:	f3bf 8f6f 	isb	sy
 8010848:	4b15      	ldr	r3, [pc, #84]	; (80108a0 <pxCurrentTCBConst>)
 801084a:	681a      	ldr	r2, [r3, #0]
 801084c:	f01e 0f10 	tst.w	lr, #16
 8010850:	bf08      	it	eq
 8010852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801085a:	6010      	str	r0, [r2, #0]
 801085c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010864:	f380 8811 	msr	BASEPRI, r0
 8010868:	f3bf 8f4f 	dsb	sy
 801086c:	f3bf 8f6f 	isb	sy
 8010870:	f7ff fb2a 	bl	800fec8 <vTaskSwitchContext>
 8010874:	f04f 0000 	mov.w	r0, #0
 8010878:	f380 8811 	msr	BASEPRI, r0
 801087c:	bc09      	pop	{r0, r3}
 801087e:	6819      	ldr	r1, [r3, #0]
 8010880:	6808      	ldr	r0, [r1, #0]
 8010882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010886:	f01e 0f10 	tst.w	lr, #16
 801088a:	bf08      	it	eq
 801088c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010890:	f380 8809 	msr	PSP, r0
 8010894:	f3bf 8f6f 	isb	sy
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop
 801089c:	f3af 8000 	nop.w

080108a0 <pxCurrentTCBConst>:
 80108a0:	2000088c 	.word	0x2000088c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80108a4:	bf00      	nop
 80108a6:	bf00      	nop

080108a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b082      	sub	sp, #8
 80108ac:	af00      	add	r7, sp, #0
	__asm volatile
 80108ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b2:	f383 8811 	msr	BASEPRI, r3
 80108b6:	f3bf 8f6f 	isb	sy
 80108ba:	f3bf 8f4f 	dsb	sy
 80108be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80108c0:	f7ff fa4a 	bl	800fd58 <xTaskIncrementTick>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d003      	beq.n	80108d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80108ca:	4b06      	ldr	r3, [pc, #24]	; (80108e4 <SysTick_Handler+0x3c>)
 80108cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108d0:	601a      	str	r2, [r3, #0]
 80108d2:	2300      	movs	r3, #0
 80108d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108d6:	683b      	ldr	r3, [r7, #0]
 80108d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80108dc:	bf00      	nop
 80108de:	3708      	adds	r7, #8
 80108e0:	46bd      	mov	sp, r7
 80108e2:	bd80      	pop	{r7, pc}
 80108e4:	e000ed04 	.word	0xe000ed04

080108e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80108e8:	b480      	push	{r7}
 80108ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80108ec:	4b0b      	ldr	r3, [pc, #44]	; (801091c <vPortSetupTimerInterrupt+0x34>)
 80108ee:	2200      	movs	r2, #0
 80108f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80108f2:	4b0b      	ldr	r3, [pc, #44]	; (8010920 <vPortSetupTimerInterrupt+0x38>)
 80108f4:	2200      	movs	r2, #0
 80108f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80108f8:	4b0a      	ldr	r3, [pc, #40]	; (8010924 <vPortSetupTimerInterrupt+0x3c>)
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	4a0a      	ldr	r2, [pc, #40]	; (8010928 <vPortSetupTimerInterrupt+0x40>)
 80108fe:	fba2 2303 	umull	r2, r3, r2, r3
 8010902:	099b      	lsrs	r3, r3, #6
 8010904:	4a09      	ldr	r2, [pc, #36]	; (801092c <vPortSetupTimerInterrupt+0x44>)
 8010906:	3b01      	subs	r3, #1
 8010908:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801090a:	4b04      	ldr	r3, [pc, #16]	; (801091c <vPortSetupTimerInterrupt+0x34>)
 801090c:	2207      	movs	r2, #7
 801090e:	601a      	str	r2, [r3, #0]
}
 8010910:	bf00      	nop
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr
 801091a:	bf00      	nop
 801091c:	e000e010 	.word	0xe000e010
 8010920:	e000e018 	.word	0xe000e018
 8010924:	2000027c 	.word	0x2000027c
 8010928:	10624dd3 	.word	0x10624dd3
 801092c:	e000e014 	.word	0xe000e014

08010930 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010930:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010940 <vPortEnableVFP+0x10>
 8010934:	6801      	ldr	r1, [r0, #0]
 8010936:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801093a:	6001      	str	r1, [r0, #0]
 801093c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801093e:	bf00      	nop
 8010940:	e000ed88 	.word	0xe000ed88

08010944 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010944:	b480      	push	{r7}
 8010946:	b085      	sub	sp, #20
 8010948:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801094a:	f3ef 8305 	mrs	r3, IPSR
 801094e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	2b0f      	cmp	r3, #15
 8010954:	d913      	bls.n	801097e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010956:	4a16      	ldr	r2, [pc, #88]	; (80109b0 <vPortValidateInterruptPriority+0x6c>)
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	4413      	add	r3, r2
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010960:	4b14      	ldr	r3, [pc, #80]	; (80109b4 <vPortValidateInterruptPriority+0x70>)
 8010962:	781b      	ldrb	r3, [r3, #0]
 8010964:	7afa      	ldrb	r2, [r7, #11]
 8010966:	429a      	cmp	r2, r3
 8010968:	d209      	bcs.n	801097e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801096a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801096e:	f383 8811 	msr	BASEPRI, r3
 8010972:	f3bf 8f6f 	isb	sy
 8010976:	f3bf 8f4f 	dsb	sy
 801097a:	607b      	str	r3, [r7, #4]
 801097c:	e7fe      	b.n	801097c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801097e:	4b0e      	ldr	r3, [pc, #56]	; (80109b8 <vPortValidateInterruptPriority+0x74>)
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010986:	4b0d      	ldr	r3, [pc, #52]	; (80109bc <vPortValidateInterruptPriority+0x78>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	429a      	cmp	r2, r3
 801098c:	d909      	bls.n	80109a2 <vPortValidateInterruptPriority+0x5e>
 801098e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010992:	f383 8811 	msr	BASEPRI, r3
 8010996:	f3bf 8f6f 	isb	sy
 801099a:	f3bf 8f4f 	dsb	sy
 801099e:	603b      	str	r3, [r7, #0]
 80109a0:	e7fe      	b.n	80109a0 <vPortValidateInterruptPriority+0x5c>
	}
 80109a2:	bf00      	nop
 80109a4:	3714      	adds	r7, #20
 80109a6:	46bd      	mov	sp, r7
 80109a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ac:	4770      	bx	lr
 80109ae:	bf00      	nop
 80109b0:	e000e3f0 	.word	0xe000e3f0
 80109b4:	200009b8 	.word	0x200009b8
 80109b8:	e000ed0c 	.word	0xe000ed0c
 80109bc:	200009bc 	.word	0x200009bc

080109c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b08a      	sub	sp, #40	; 0x28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80109c8:	2300      	movs	r3, #0
 80109ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80109cc:	f7ff f8f8 	bl	800fbc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80109d0:	4b57      	ldr	r3, [pc, #348]	; (8010b30 <pvPortMalloc+0x170>)
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d101      	bne.n	80109dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80109d8:	f000 f90c 	bl	8010bf4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80109dc:	4b55      	ldr	r3, [pc, #340]	; (8010b34 <pvPortMalloc+0x174>)
 80109de:	681a      	ldr	r2, [r3, #0]
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	4013      	ands	r3, r2
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	f040 808c 	bne.w	8010b02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d01c      	beq.n	8010a2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80109f0:	2208      	movs	r2, #8
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	4413      	add	r3, r2
 80109f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	f003 0307 	and.w	r3, r3, #7
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d013      	beq.n	8010a2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	f023 0307 	bic.w	r3, r3, #7
 8010a08:	3308      	adds	r3, #8
 8010a0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	f003 0307 	and.w	r3, r3, #7
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d009      	beq.n	8010a2a <pvPortMalloc+0x6a>
 8010a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1a:	f383 8811 	msr	BASEPRI, r3
 8010a1e:	f3bf 8f6f 	isb	sy
 8010a22:	f3bf 8f4f 	dsb	sy
 8010a26:	617b      	str	r3, [r7, #20]
 8010a28:	e7fe      	b.n	8010a28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d068      	beq.n	8010b02 <pvPortMalloc+0x142>
 8010a30:	4b41      	ldr	r3, [pc, #260]	; (8010b38 <pvPortMalloc+0x178>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	687a      	ldr	r2, [r7, #4]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d863      	bhi.n	8010b02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010a3a:	4b40      	ldr	r3, [pc, #256]	; (8010b3c <pvPortMalloc+0x17c>)
 8010a3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010a3e:	4b3f      	ldr	r3, [pc, #252]	; (8010b3c <pvPortMalloc+0x17c>)
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a44:	e004      	b.n	8010a50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a52:	685b      	ldr	r3, [r3, #4]
 8010a54:	687a      	ldr	r2, [r7, #4]
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d903      	bls.n	8010a62 <pvPortMalloc+0xa2>
 8010a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1f1      	bne.n	8010a46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010a62:	4b33      	ldr	r3, [pc, #204]	; (8010b30 <pvPortMalloc+0x170>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d04a      	beq.n	8010b02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	2208      	movs	r2, #8
 8010a72:	4413      	add	r3, r2
 8010a74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a78:	681a      	ldr	r2, [r3, #0]
 8010a7a:	6a3b      	ldr	r3, [r7, #32]
 8010a7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a80:	685a      	ldr	r2, [r3, #4]
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	1ad2      	subs	r2, r2, r3
 8010a86:	2308      	movs	r3, #8
 8010a88:	005b      	lsls	r3, r3, #1
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d91e      	bls.n	8010acc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	4413      	add	r3, r2
 8010a94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010a96:	69bb      	ldr	r3, [r7, #24]
 8010a98:	f003 0307 	and.w	r3, r3, #7
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d009      	beq.n	8010ab4 <pvPortMalloc+0xf4>
 8010aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aa4:	f383 8811 	msr	BASEPRI, r3
 8010aa8:	f3bf 8f6f 	isb	sy
 8010aac:	f3bf 8f4f 	dsb	sy
 8010ab0:	613b      	str	r3, [r7, #16]
 8010ab2:	e7fe      	b.n	8010ab2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ab6:	685a      	ldr	r2, [r3, #4]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	1ad2      	subs	r2, r2, r3
 8010abc:	69bb      	ldr	r3, [r7, #24]
 8010abe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ac6:	69b8      	ldr	r0, [r7, #24]
 8010ac8:	f000 f8f6 	bl	8010cb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010acc:	4b1a      	ldr	r3, [pc, #104]	; (8010b38 <pvPortMalloc+0x178>)
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad2:	685b      	ldr	r3, [r3, #4]
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	4a18      	ldr	r2, [pc, #96]	; (8010b38 <pvPortMalloc+0x178>)
 8010ad8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010ada:	4b17      	ldr	r3, [pc, #92]	; (8010b38 <pvPortMalloc+0x178>)
 8010adc:	681a      	ldr	r2, [r3, #0]
 8010ade:	4b18      	ldr	r3, [pc, #96]	; (8010b40 <pvPortMalloc+0x180>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d203      	bcs.n	8010aee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010ae6:	4b14      	ldr	r3, [pc, #80]	; (8010b38 <pvPortMalloc+0x178>)
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	4a15      	ldr	r2, [pc, #84]	; (8010b40 <pvPortMalloc+0x180>)
 8010aec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af0:	685a      	ldr	r2, [r3, #4]
 8010af2:	4b10      	ldr	r3, [pc, #64]	; (8010b34 <pvPortMalloc+0x174>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	431a      	orrs	r2, r3
 8010af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010b02:	f7ff f86b 	bl	800fbdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b06:	69fb      	ldr	r3, [r7, #28]
 8010b08:	f003 0307 	and.w	r3, r3, #7
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d009      	beq.n	8010b24 <pvPortMalloc+0x164>
 8010b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b14:	f383 8811 	msr	BASEPRI, r3
 8010b18:	f3bf 8f6f 	isb	sy
 8010b1c:	f3bf 8f4f 	dsb	sy
 8010b20:	60fb      	str	r3, [r7, #12]
 8010b22:	e7fe      	b.n	8010b22 <pvPortMalloc+0x162>
	return pvReturn;
 8010b24:	69fb      	ldr	r3, [r7, #28]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3728      	adds	r7, #40	; 0x28
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}
 8010b2e:	bf00      	nop
 8010b30:	200045c8 	.word	0x200045c8
 8010b34:	200045d4 	.word	0x200045d4
 8010b38:	200045cc 	.word	0x200045cc
 8010b3c:	200045c0 	.word	0x200045c0
 8010b40:	200045d0 	.word	0x200045d0

08010b44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010b44:	b580      	push	{r7, lr}
 8010b46:	b086      	sub	sp, #24
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d046      	beq.n	8010be4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010b56:	2308      	movs	r3, #8
 8010b58:	425b      	negs	r3, r3
 8010b5a:	697a      	ldr	r2, [r7, #20]
 8010b5c:	4413      	add	r3, r2
 8010b5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010b60:	697b      	ldr	r3, [r7, #20]
 8010b62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010b64:	693b      	ldr	r3, [r7, #16]
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	4b20      	ldr	r3, [pc, #128]	; (8010bec <vPortFree+0xa8>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d109      	bne.n	8010b86 <vPortFree+0x42>
 8010b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b76:	f383 8811 	msr	BASEPRI, r3
 8010b7a:	f3bf 8f6f 	isb	sy
 8010b7e:	f3bf 8f4f 	dsb	sy
 8010b82:	60fb      	str	r3, [r7, #12]
 8010b84:	e7fe      	b.n	8010b84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010b86:	693b      	ldr	r3, [r7, #16]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d009      	beq.n	8010ba2 <vPortFree+0x5e>
 8010b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b92:	f383 8811 	msr	BASEPRI, r3
 8010b96:	f3bf 8f6f 	isb	sy
 8010b9a:	f3bf 8f4f 	dsb	sy
 8010b9e:	60bb      	str	r3, [r7, #8]
 8010ba0:	e7fe      	b.n	8010ba0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	685a      	ldr	r2, [r3, #4]
 8010ba6:	4b11      	ldr	r3, [pc, #68]	; (8010bec <vPortFree+0xa8>)
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	4013      	ands	r3, r2
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d019      	beq.n	8010be4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d115      	bne.n	8010be4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	685a      	ldr	r2, [r3, #4]
 8010bbc:	4b0b      	ldr	r3, [pc, #44]	; (8010bec <vPortFree+0xa8>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	43db      	mvns	r3, r3
 8010bc2:	401a      	ands	r2, r3
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010bc8:	f7fe fffa 	bl	800fbc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	685a      	ldr	r2, [r3, #4]
 8010bd0:	4b07      	ldr	r3, [pc, #28]	; (8010bf0 <vPortFree+0xac>)
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	4a06      	ldr	r2, [pc, #24]	; (8010bf0 <vPortFree+0xac>)
 8010bd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010bda:	6938      	ldr	r0, [r7, #16]
 8010bdc:	f000 f86c 	bl	8010cb8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010be0:	f7fe fffc 	bl	800fbdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010be4:	bf00      	nop
 8010be6:	3718      	adds	r7, #24
 8010be8:	46bd      	mov	sp, r7
 8010bea:	bd80      	pop	{r7, pc}
 8010bec:	200045d4 	.word	0x200045d4
 8010bf0:	200045cc 	.word	0x200045cc

08010bf4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b085      	sub	sp, #20
 8010bf8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010bfa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010bfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010c00:	4b27      	ldr	r3, [pc, #156]	; (8010ca0 <prvHeapInit+0xac>)
 8010c02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	f003 0307 	and.w	r3, r3, #7
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00c      	beq.n	8010c28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	3307      	adds	r3, #7
 8010c12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	f023 0307 	bic.w	r3, r3, #7
 8010c1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010c1c:	68ba      	ldr	r2, [r7, #8]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	1ad3      	subs	r3, r2, r3
 8010c22:	4a1f      	ldr	r2, [pc, #124]	; (8010ca0 <prvHeapInit+0xac>)
 8010c24:	4413      	add	r3, r2
 8010c26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010c2c:	4a1d      	ldr	r2, [pc, #116]	; (8010ca4 <prvHeapInit+0xb0>)
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010c32:	4b1c      	ldr	r3, [pc, #112]	; (8010ca4 <prvHeapInit+0xb0>)
 8010c34:	2200      	movs	r2, #0
 8010c36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	68ba      	ldr	r2, [r7, #8]
 8010c3c:	4413      	add	r3, r2
 8010c3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010c40:	2208      	movs	r2, #8
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	1a9b      	subs	r3, r3, r2
 8010c46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	f023 0307 	bic.w	r3, r3, #7
 8010c4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	4a15      	ldr	r2, [pc, #84]	; (8010ca8 <prvHeapInit+0xb4>)
 8010c54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010c56:	4b14      	ldr	r3, [pc, #80]	; (8010ca8 <prvHeapInit+0xb4>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010c5e:	4b12      	ldr	r3, [pc, #72]	; (8010ca8 <prvHeapInit+0xb4>)
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	2200      	movs	r2, #0
 8010c64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	1ad2      	subs	r2, r2, r3
 8010c70:	683b      	ldr	r3, [r7, #0]
 8010c72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010c74:	4b0c      	ldr	r3, [pc, #48]	; (8010ca8 <prvHeapInit+0xb4>)
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	683b      	ldr	r3, [r7, #0]
 8010c7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c7c:	683b      	ldr	r3, [r7, #0]
 8010c7e:	685b      	ldr	r3, [r3, #4]
 8010c80:	4a0a      	ldr	r2, [pc, #40]	; (8010cac <prvHeapInit+0xb8>)
 8010c82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010c84:	683b      	ldr	r3, [r7, #0]
 8010c86:	685b      	ldr	r3, [r3, #4]
 8010c88:	4a09      	ldr	r2, [pc, #36]	; (8010cb0 <prvHeapInit+0xbc>)
 8010c8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010c8c:	4b09      	ldr	r3, [pc, #36]	; (8010cb4 <prvHeapInit+0xc0>)
 8010c8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010c92:	601a      	str	r2, [r3, #0]
}
 8010c94:	bf00      	nop
 8010c96:	3714      	adds	r7, #20
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9e:	4770      	bx	lr
 8010ca0:	200009c0 	.word	0x200009c0
 8010ca4:	200045c0 	.word	0x200045c0
 8010ca8:	200045c8 	.word	0x200045c8
 8010cac:	200045d0 	.word	0x200045d0
 8010cb0:	200045cc 	.word	0x200045cc
 8010cb4:	200045d4 	.word	0x200045d4

08010cb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010cb8:	b480      	push	{r7}
 8010cba:	b085      	sub	sp, #20
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010cc0:	4b28      	ldr	r3, [pc, #160]	; (8010d64 <prvInsertBlockIntoFreeList+0xac>)
 8010cc2:	60fb      	str	r3, [r7, #12]
 8010cc4:	e002      	b.n	8010ccc <prvInsertBlockIntoFreeList+0x14>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	60fb      	str	r3, [r7, #12]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	429a      	cmp	r2, r3
 8010cd4:	d8f7      	bhi.n	8010cc6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	685b      	ldr	r3, [r3, #4]
 8010cde:	68ba      	ldr	r2, [r7, #8]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	687a      	ldr	r2, [r7, #4]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d108      	bne.n	8010cfa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	685a      	ldr	r2, [r3, #4]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	441a      	add	r2, r3
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	68ba      	ldr	r2, [r7, #8]
 8010d04:	441a      	add	r2, r3
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d118      	bne.n	8010d40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681a      	ldr	r2, [r3, #0]
 8010d12:	4b15      	ldr	r3, [pc, #84]	; (8010d68 <prvInsertBlockIntoFreeList+0xb0>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	429a      	cmp	r2, r3
 8010d18:	d00d      	beq.n	8010d36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	685a      	ldr	r2, [r3, #4]
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	685b      	ldr	r3, [r3, #4]
 8010d24:	441a      	add	r2, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	681a      	ldr	r2, [r3, #0]
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	601a      	str	r2, [r3, #0]
 8010d34:	e008      	b.n	8010d48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010d36:	4b0c      	ldr	r3, [pc, #48]	; (8010d68 <prvInsertBlockIntoFreeList+0xb0>)
 8010d38:	681a      	ldr	r2, [r3, #0]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	601a      	str	r2, [r3, #0]
 8010d3e:	e003      	b.n	8010d48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	681a      	ldr	r2, [r3, #0]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	429a      	cmp	r2, r3
 8010d4e:	d002      	beq.n	8010d56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010d50:	68fb      	ldr	r3, [r7, #12]
 8010d52:	687a      	ldr	r2, [r7, #4]
 8010d54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010d56:	bf00      	nop
 8010d58:	3714      	adds	r7, #20
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d60:	4770      	bx	lr
 8010d62:	bf00      	nop
 8010d64:	200045c0 	.word	0x200045c0
 8010d68:	200045c8 	.word	0x200045c8

08010d6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010d70:	2200      	movs	r2, #0
 8010d72:	4912      	ldr	r1, [pc, #72]	; (8010dbc <MX_USB_DEVICE_Init+0x50>)
 8010d74:	4812      	ldr	r0, [pc, #72]	; (8010dc0 <MX_USB_DEVICE_Init+0x54>)
 8010d76:	f7fc fbe5 	bl	800d544 <USBD_Init>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d001      	beq.n	8010d84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010d80:	f7f3 fd1c 	bl	80047bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010d84:	490f      	ldr	r1, [pc, #60]	; (8010dc4 <MX_USB_DEVICE_Init+0x58>)
 8010d86:	480e      	ldr	r0, [pc, #56]	; (8010dc0 <MX_USB_DEVICE_Init+0x54>)
 8010d88:	f7fc fc12 	bl	800d5b0 <USBD_RegisterClass>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d001      	beq.n	8010d96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010d92:	f7f3 fd13 	bl	80047bc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010d96:	490c      	ldr	r1, [pc, #48]	; (8010dc8 <MX_USB_DEVICE_Init+0x5c>)
 8010d98:	4809      	ldr	r0, [pc, #36]	; (8010dc0 <MX_USB_DEVICE_Init+0x54>)
 8010d9a:	f7fc fb37 	bl	800d40c <USBD_CDC_RegisterInterface>
 8010d9e:	4603      	mov	r3, r0
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d001      	beq.n	8010da8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010da4:	f7f3 fd0a 	bl	80047bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010da8:	4805      	ldr	r0, [pc, #20]	; (8010dc0 <MX_USB_DEVICE_Init+0x54>)
 8010daa:	f7fc fc22 	bl	800d5f2 <USBD_Start>
 8010dae:	4603      	mov	r3, r0
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d001      	beq.n	8010db8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010db4:	f7f3 fd02 	bl	80047bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010db8:	bf00      	nop
 8010dba:	bd80      	pop	{r7, pc}
 8010dbc:	200003d0 	.word	0x200003d0
 8010dc0:	20004cd0 	.word	0x20004cd0
 8010dc4:	200002ac 	.word	0x200002ac
 8010dc8:	200003bc 	.word	0x200003bc

08010dcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	4905      	ldr	r1, [pc, #20]	; (8010de8 <CDC_Init_FS+0x1c>)
 8010dd4:	4805      	ldr	r0, [pc, #20]	; (8010dec <CDC_Init_FS+0x20>)
 8010dd6:	f7fc fb2e 	bl	800d436 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010dda:	4905      	ldr	r1, [pc, #20]	; (8010df0 <CDC_Init_FS+0x24>)
 8010ddc:	4803      	ldr	r0, [pc, #12]	; (8010dec <CDC_Init_FS+0x20>)
 8010dde:	f7fc fb43 	bl	800d468 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010de2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010de4:	4618      	mov	r0, r3
 8010de6:	bd80      	pop	{r7, pc}
 8010de8:	200057a0 	.word	0x200057a0
 8010dec:	20004cd0 	.word	0x20004cd0
 8010df0:	20004fa0 	.word	0x20004fa0

08010df4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010df4:	b480      	push	{r7}
 8010df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010df8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr

08010e04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	4603      	mov	r3, r0
 8010e0c:	6039      	str	r1, [r7, #0]
 8010e0e:	71fb      	strb	r3, [r7, #7]
 8010e10:	4613      	mov	r3, r2
 8010e12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010e14:	79fb      	ldrb	r3, [r7, #7]
 8010e16:	2b23      	cmp	r3, #35	; 0x23
 8010e18:	d85c      	bhi.n	8010ed4 <CDC_Control_FS+0xd0>
 8010e1a:	a201      	add	r2, pc, #4	; (adr r2, 8010e20 <CDC_Control_FS+0x1c>)
 8010e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e20:	08010ed5 	.word	0x08010ed5
 8010e24:	08010ed5 	.word	0x08010ed5
 8010e28:	08010ed5 	.word	0x08010ed5
 8010e2c:	08010ed5 	.word	0x08010ed5
 8010e30:	08010ed5 	.word	0x08010ed5
 8010e34:	08010ed5 	.word	0x08010ed5
 8010e38:	08010ed5 	.word	0x08010ed5
 8010e3c:	08010ed5 	.word	0x08010ed5
 8010e40:	08010ed5 	.word	0x08010ed5
 8010e44:	08010ed5 	.word	0x08010ed5
 8010e48:	08010ed5 	.word	0x08010ed5
 8010e4c:	08010ed5 	.word	0x08010ed5
 8010e50:	08010ed5 	.word	0x08010ed5
 8010e54:	08010ed5 	.word	0x08010ed5
 8010e58:	08010ed5 	.word	0x08010ed5
 8010e5c:	08010ed5 	.word	0x08010ed5
 8010e60:	08010ed5 	.word	0x08010ed5
 8010e64:	08010ed5 	.word	0x08010ed5
 8010e68:	08010ed5 	.word	0x08010ed5
 8010e6c:	08010ed5 	.word	0x08010ed5
 8010e70:	08010ed5 	.word	0x08010ed5
 8010e74:	08010ed5 	.word	0x08010ed5
 8010e78:	08010ed5 	.word	0x08010ed5
 8010e7c:	08010ed5 	.word	0x08010ed5
 8010e80:	08010ed5 	.word	0x08010ed5
 8010e84:	08010ed5 	.word	0x08010ed5
 8010e88:	08010ed5 	.word	0x08010ed5
 8010e8c:	08010ed5 	.word	0x08010ed5
 8010e90:	08010ed5 	.word	0x08010ed5
 8010e94:	08010ed5 	.word	0x08010ed5
 8010e98:	08010ed5 	.word	0x08010ed5
 8010e9c:	08010ed5 	.word	0x08010ed5
 8010ea0:	08010eb1 	.word	0x08010eb1
 8010ea4:	08010ec3 	.word	0x08010ec3
 8010ea8:	08010ed5 	.word	0x08010ed5
 8010eac:	08010ed5 	.word	0x08010ed5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8010eb0:	4b0c      	ldr	r3, [pc, #48]	; (8010ee4 <CDC_Control_FS+0xe0>)
 8010eb2:	683a      	ldr	r2, [r7, #0]
 8010eb4:	6810      	ldr	r0, [r2, #0]
 8010eb6:	6018      	str	r0, [r3, #0]
 8010eb8:	8891      	ldrh	r1, [r2, #4]
 8010eba:	7992      	ldrb	r2, [r2, #6]
 8010ebc:	8099      	strh	r1, [r3, #4]
 8010ebe:	719a      	strb	r2, [r3, #6]
    break;
 8010ec0:	e009      	b.n	8010ed6 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	4a07      	ldr	r2, [pc, #28]	; (8010ee4 <CDC_Control_FS+0xe0>)
 8010ec6:	6810      	ldr	r0, [r2, #0]
 8010ec8:	6018      	str	r0, [r3, #0]
 8010eca:	8891      	ldrh	r1, [r2, #4]
 8010ecc:	7992      	ldrb	r2, [r2, #6]
 8010ece:	8099      	strh	r1, [r3, #4]
 8010ed0:	719a      	strb	r2, [r3, #6]
    break;
 8010ed2:	e000      	b.n	8010ed6 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010ed4:	bf00      	nop
  }

  return (USBD_OK);
 8010ed6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010ed8:	4618      	mov	r0, r3
 8010eda:	370c      	adds	r7, #12
 8010edc:	46bd      	mov	sp, r7
 8010ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ee2:	4770      	bx	lr
 8010ee4:	200003b4 	.word	0x200003b4

08010ee8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	6078      	str	r0, [r7, #4]
 8010ef0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010ef2:	6879      	ldr	r1, [r7, #4]
 8010ef4:	4805      	ldr	r0, [pc, #20]	; (8010f0c <CDC_Receive_FS+0x24>)
 8010ef6:	f7fc fab7 	bl	800d468 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010efa:	4804      	ldr	r0, [pc, #16]	; (8010f0c <CDC_Receive_FS+0x24>)
 8010efc:	f7fc faf8 	bl	800d4f0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010f00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3708      	adds	r7, #8
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	20004cd0 	.word	0x20004cd0

08010f10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b084      	sub	sp, #16
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	460b      	mov	r3, r1
 8010f1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010f20:	4b0d      	ldr	r3, [pc, #52]	; (8010f58 <CDC_Transmit_FS+0x48>)
 8010f22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010f26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010f28:	68bb      	ldr	r3, [r7, #8]
 8010f2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010f2e:	2b00      	cmp	r3, #0
 8010f30:	d001      	beq.n	8010f36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010f32:	2301      	movs	r3, #1
 8010f34:	e00b      	b.n	8010f4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010f36:	887b      	ldrh	r3, [r7, #2]
 8010f38:	461a      	mov	r2, r3
 8010f3a:	6879      	ldr	r1, [r7, #4]
 8010f3c:	4806      	ldr	r0, [pc, #24]	; (8010f58 <CDC_Transmit_FS+0x48>)
 8010f3e:	f7fc fa7a 	bl	800d436 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010f42:	4805      	ldr	r0, [pc, #20]	; (8010f58 <CDC_Transmit_FS+0x48>)
 8010f44:	f7fc faa4 	bl	800d490 <USBD_CDC_TransmitPacket>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
 8010f56:	bf00      	nop
 8010f58:	20004cd0 	.word	0x20004cd0

08010f5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b087      	sub	sp, #28
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	60f8      	str	r0, [r7, #12]
 8010f64:	60b9      	str	r1, [r7, #8]
 8010f66:	4613      	mov	r3, r2
 8010f68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f72:	4618      	mov	r0, r3
 8010f74:	371c      	adds	r7, #28
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
	...

08010f80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b083      	sub	sp, #12
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	4603      	mov	r3, r0
 8010f88:	6039      	str	r1, [r7, #0]
 8010f8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010f8c:	683b      	ldr	r3, [r7, #0]
 8010f8e:	2212      	movs	r2, #18
 8010f90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010f92:	4b03      	ldr	r3, [pc, #12]	; (8010fa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	200003f0 	.word	0x200003f0

08010fa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	4603      	mov	r3, r0
 8010fac:	6039      	str	r1, [r7, #0]
 8010fae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010fb0:	683b      	ldr	r3, [r7, #0]
 8010fb2:	2204      	movs	r2, #4
 8010fb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010fb6:	4b03      	ldr	r3, [pc, #12]	; (8010fc4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010fb8:	4618      	mov	r0, r3
 8010fba:	370c      	adds	r7, #12
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr
 8010fc4:	20000410 	.word	0x20000410

08010fc8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b082      	sub	sp, #8
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	4603      	mov	r3, r0
 8010fd0:	6039      	str	r1, [r7, #0]
 8010fd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010fd4:	79fb      	ldrb	r3, [r7, #7]
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d105      	bne.n	8010fe6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fda:	683a      	ldr	r2, [r7, #0]
 8010fdc:	4907      	ldr	r1, [pc, #28]	; (8010ffc <USBD_FS_ProductStrDescriptor+0x34>)
 8010fde:	4808      	ldr	r0, [pc, #32]	; (8011000 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fe0:	f7fd faff 	bl	800e5e2 <USBD_GetString>
 8010fe4:	e004      	b.n	8010ff0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010fe6:	683a      	ldr	r2, [r7, #0]
 8010fe8:	4904      	ldr	r1, [pc, #16]	; (8010ffc <USBD_FS_ProductStrDescriptor+0x34>)
 8010fea:	4805      	ldr	r0, [pc, #20]	; (8011000 <USBD_FS_ProductStrDescriptor+0x38>)
 8010fec:	f7fd faf9 	bl	800e5e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ff0:	4b02      	ldr	r3, [pc, #8]	; (8010ffc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3708      	adds	r7, #8
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20005fa0 	.word	0x20005fa0
 8011000:	08017518 	.word	0x08017518

08011004 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	6039      	str	r1, [r7, #0]
 801100e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011010:	683a      	ldr	r2, [r7, #0]
 8011012:	4904      	ldr	r1, [pc, #16]	; (8011024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011014:	4804      	ldr	r0, [pc, #16]	; (8011028 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011016:	f7fd fae4 	bl	800e5e2 <USBD_GetString>
  return USBD_StrDesc;
 801101a:	4b02      	ldr	r3, [pc, #8]	; (8011024 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801101c:	4618      	mov	r0, r3
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	20005fa0 	.word	0x20005fa0
 8011028:	08017530 	.word	0x08017530

0801102c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	4603      	mov	r3, r0
 8011034:	6039      	str	r1, [r7, #0]
 8011036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	221a      	movs	r2, #26
 801103c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801103e:	f000 f855 	bl	80110ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011042:	4b02      	ldr	r3, [pc, #8]	; (801104c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011044:	4618      	mov	r0, r3
 8011046:	3708      	adds	r7, #8
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	20000414 	.word	0x20000414

08011050 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	4603      	mov	r3, r0
 8011058:	6039      	str	r1, [r7, #0]
 801105a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d105      	bne.n	801106e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011062:	683a      	ldr	r2, [r7, #0]
 8011064:	4907      	ldr	r1, [pc, #28]	; (8011084 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011066:	4808      	ldr	r0, [pc, #32]	; (8011088 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011068:	f7fd fabb 	bl	800e5e2 <USBD_GetString>
 801106c:	e004      	b.n	8011078 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801106e:	683a      	ldr	r2, [r7, #0]
 8011070:	4904      	ldr	r1, [pc, #16]	; (8011084 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011072:	4805      	ldr	r0, [pc, #20]	; (8011088 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011074:	f7fd fab5 	bl	800e5e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011078:	4b02      	ldr	r3, [pc, #8]	; (8011084 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801107a:	4618      	mov	r0, r3
 801107c:	3708      	adds	r7, #8
 801107e:	46bd      	mov	sp, r7
 8011080:	bd80      	pop	{r7, pc}
 8011082:	bf00      	nop
 8011084:	20005fa0 	.word	0x20005fa0
 8011088:	08017544 	.word	0x08017544

0801108c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b082      	sub	sp, #8
 8011090:	af00      	add	r7, sp, #0
 8011092:	4603      	mov	r3, r0
 8011094:	6039      	str	r1, [r7, #0]
 8011096:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011098:	79fb      	ldrb	r3, [r7, #7]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d105      	bne.n	80110aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801109e:	683a      	ldr	r2, [r7, #0]
 80110a0:	4907      	ldr	r1, [pc, #28]	; (80110c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80110a2:	4808      	ldr	r0, [pc, #32]	; (80110c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80110a4:	f7fd fa9d 	bl	800e5e2 <USBD_GetString>
 80110a8:	e004      	b.n	80110b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	4904      	ldr	r1, [pc, #16]	; (80110c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80110ae:	4805      	ldr	r0, [pc, #20]	; (80110c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80110b0:	f7fd fa97 	bl	800e5e2 <USBD_GetString>
  }
  return USBD_StrDesc;
 80110b4:	4b02      	ldr	r3, [pc, #8]	; (80110c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3708      	adds	r7, #8
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	20005fa0 	.word	0x20005fa0
 80110c4:	08017550 	.word	0x08017550

080110c8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	4603      	mov	r3, r0
 80110d0:	6039      	str	r1, [r7, #0]
 80110d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	220c      	movs	r2, #12
 80110d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80110da:	4b03      	ldr	r3, [pc, #12]	; (80110e8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80110dc:	4618      	mov	r0, r3
 80110de:	370c      	adds	r7, #12
 80110e0:	46bd      	mov	sp, r7
 80110e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e6:	4770      	bx	lr
 80110e8:	20000404 	.word	0x20000404

080110ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80110ec:	b580      	push	{r7, lr}
 80110ee:	b084      	sub	sp, #16
 80110f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80110f2:	4b0f      	ldr	r3, [pc, #60]	; (8011130 <Get_SerialNum+0x44>)
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80110f8:	4b0e      	ldr	r3, [pc, #56]	; (8011134 <Get_SerialNum+0x48>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80110fe:	4b0e      	ldr	r3, [pc, #56]	; (8011138 <Get_SerialNum+0x4c>)
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	4413      	add	r3, r2
 801110a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d009      	beq.n	8011126 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011112:	2208      	movs	r2, #8
 8011114:	4909      	ldr	r1, [pc, #36]	; (801113c <Get_SerialNum+0x50>)
 8011116:	68f8      	ldr	r0, [r7, #12]
 8011118:	f000 f814 	bl	8011144 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801111c:	2204      	movs	r2, #4
 801111e:	4908      	ldr	r1, [pc, #32]	; (8011140 <Get_SerialNum+0x54>)
 8011120:	68b8      	ldr	r0, [r7, #8]
 8011122:	f000 f80f 	bl	8011144 <IntToUnicode>
  }
}
 8011126:	bf00      	nop
 8011128:	3710      	adds	r7, #16
 801112a:	46bd      	mov	sp, r7
 801112c:	bd80      	pop	{r7, pc}
 801112e:	bf00      	nop
 8011130:	1fff7a10 	.word	0x1fff7a10
 8011134:	1fff7a14 	.word	0x1fff7a14
 8011138:	1fff7a18 	.word	0x1fff7a18
 801113c:	20000416 	.word	0x20000416
 8011140:	20000426 	.word	0x20000426

08011144 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011144:	b480      	push	{r7}
 8011146:	b087      	sub	sp, #28
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	4613      	mov	r3, r2
 8011150:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011152:	2300      	movs	r3, #0
 8011154:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011156:	2300      	movs	r3, #0
 8011158:	75fb      	strb	r3, [r7, #23]
 801115a:	e027      	b.n	80111ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	0f1b      	lsrs	r3, r3, #28
 8011160:	2b09      	cmp	r3, #9
 8011162:	d80b      	bhi.n	801117c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	0f1b      	lsrs	r3, r3, #28
 8011168:	b2da      	uxtb	r2, r3
 801116a:	7dfb      	ldrb	r3, [r7, #23]
 801116c:	005b      	lsls	r3, r3, #1
 801116e:	4619      	mov	r1, r3
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	440b      	add	r3, r1
 8011174:	3230      	adds	r2, #48	; 0x30
 8011176:	b2d2      	uxtb	r2, r2
 8011178:	701a      	strb	r2, [r3, #0]
 801117a:	e00a      	b.n	8011192 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	0f1b      	lsrs	r3, r3, #28
 8011180:	b2da      	uxtb	r2, r3
 8011182:	7dfb      	ldrb	r3, [r7, #23]
 8011184:	005b      	lsls	r3, r3, #1
 8011186:	4619      	mov	r1, r3
 8011188:	68bb      	ldr	r3, [r7, #8]
 801118a:	440b      	add	r3, r1
 801118c:	3237      	adds	r2, #55	; 0x37
 801118e:	b2d2      	uxtb	r2, r2
 8011190:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	011b      	lsls	r3, r3, #4
 8011196:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011198:	7dfb      	ldrb	r3, [r7, #23]
 801119a:	005b      	lsls	r3, r3, #1
 801119c:	3301      	adds	r3, #1
 801119e:	68ba      	ldr	r2, [r7, #8]
 80111a0:	4413      	add	r3, r2
 80111a2:	2200      	movs	r2, #0
 80111a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80111a6:	7dfb      	ldrb	r3, [r7, #23]
 80111a8:	3301      	adds	r3, #1
 80111aa:	75fb      	strb	r3, [r7, #23]
 80111ac:	7dfa      	ldrb	r2, [r7, #23]
 80111ae:	79fb      	ldrb	r3, [r7, #7]
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d3d3      	bcc.n	801115c <IntToUnicode+0x18>
  }
}
 80111b4:	bf00      	nop
 80111b6:	371c      	adds	r7, #28
 80111b8:	46bd      	mov	sp, r7
 80111ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111be:	4770      	bx	lr

080111c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b08a      	sub	sp, #40	; 0x28
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80111c8:	f107 0314 	add.w	r3, r7, #20
 80111cc:	2200      	movs	r2, #0
 80111ce:	601a      	str	r2, [r3, #0]
 80111d0:	605a      	str	r2, [r3, #4]
 80111d2:	609a      	str	r2, [r3, #8]
 80111d4:	60da      	str	r2, [r3, #12]
 80111d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80111e0:	d13a      	bne.n	8011258 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80111e2:	2300      	movs	r3, #0
 80111e4:	613b      	str	r3, [r7, #16]
 80111e6:	4b1e      	ldr	r3, [pc, #120]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 80111e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111ea:	4a1d      	ldr	r2, [pc, #116]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 80111ec:	f043 0301 	orr.w	r3, r3, #1
 80111f0:	6313      	str	r3, [r2, #48]	; 0x30
 80111f2:	4b1b      	ldr	r3, [pc, #108]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 80111f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80111f6:	f003 0301 	and.w	r3, r3, #1
 80111fa:	613b      	str	r3, [r7, #16]
 80111fc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80111fe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011204:	2302      	movs	r3, #2
 8011206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011208:	2300      	movs	r3, #0
 801120a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801120c:	2303      	movs	r3, #3
 801120e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011210:	230a      	movs	r3, #10
 8011212:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011214:	f107 0314 	add.w	r3, r7, #20
 8011218:	4619      	mov	r1, r3
 801121a:	4812      	ldr	r0, [pc, #72]	; (8011264 <HAL_PCD_MspInit+0xa4>)
 801121c:	f7f4 fdba 	bl	8005d94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011220:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 8011222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011224:	4a0e      	ldr	r2, [pc, #56]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 8011226:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801122a:	6353      	str	r3, [r2, #52]	; 0x34
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
 8011230:	4b0b      	ldr	r3, [pc, #44]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 8011232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011234:	4a0a      	ldr	r2, [pc, #40]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 8011236:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801123a:	6453      	str	r3, [r2, #68]	; 0x44
 801123c:	4b08      	ldr	r3, [pc, #32]	; (8011260 <HAL_PCD_MspInit+0xa0>)
 801123e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011244:	60fb      	str	r3, [r7, #12]
 8011246:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8011248:	2200      	movs	r2, #0
 801124a:	2105      	movs	r1, #5
 801124c:	2043      	movs	r0, #67	; 0x43
 801124e:	f7f4 fd77 	bl	8005d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011252:	2043      	movs	r0, #67	; 0x43
 8011254:	f7f4 fd90 	bl	8005d78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011258:	bf00      	nop
 801125a:	3728      	adds	r7, #40	; 0x28
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}
 8011260:	40023800 	.word	0x40023800
 8011264:	40020000 	.word	0x40020000

08011268 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801127c:	4619      	mov	r1, r3
 801127e:	4610      	mov	r0, r2
 8011280:	f7fc fa02 	bl	800d688 <USBD_LL_SetupStage>
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801129e:	78fa      	ldrb	r2, [r7, #3]
 80112a0:	6879      	ldr	r1, [r7, #4]
 80112a2:	4613      	mov	r3, r2
 80112a4:	00db      	lsls	r3, r3, #3
 80112a6:	1a9b      	subs	r3, r3, r2
 80112a8:	009b      	lsls	r3, r3, #2
 80112aa:	440b      	add	r3, r1
 80112ac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80112b0:	681a      	ldr	r2, [r3, #0]
 80112b2:	78fb      	ldrb	r3, [r7, #3]
 80112b4:	4619      	mov	r1, r3
 80112b6:	f7fc fa3a 	bl	800d72e <USBD_LL_DataOutStage>
}
 80112ba:	bf00      	nop
 80112bc:	3708      	adds	r7, #8
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}

080112c2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112c2:	b580      	push	{r7, lr}
 80112c4:	b082      	sub	sp, #8
 80112c6:	af00      	add	r7, sp, #0
 80112c8:	6078      	str	r0, [r7, #4]
 80112ca:	460b      	mov	r3, r1
 80112cc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80112d4:	78fa      	ldrb	r2, [r7, #3]
 80112d6:	6879      	ldr	r1, [r7, #4]
 80112d8:	4613      	mov	r3, r2
 80112da:	00db      	lsls	r3, r3, #3
 80112dc:	1a9b      	subs	r3, r3, r2
 80112de:	009b      	lsls	r3, r3, #2
 80112e0:	440b      	add	r3, r1
 80112e2:	3348      	adds	r3, #72	; 0x48
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	78fb      	ldrb	r3, [r7, #3]
 80112e8:	4619      	mov	r1, r3
 80112ea:	f7fc fa83 	bl	800d7f4 <USBD_LL_DataInStage>
}
 80112ee:	bf00      	nop
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b082      	sub	sp, #8
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011304:	4618      	mov	r0, r3
 8011306:	f7fc fb87 	bl	800da18 <USBD_LL_SOF>
}
 801130a:	bf00      	nop
 801130c:	3708      	adds	r7, #8
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}

08011312 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011312:	b580      	push	{r7, lr}
 8011314:	b084      	sub	sp, #16
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801131a:	2301      	movs	r3, #1
 801131c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	68db      	ldr	r3, [r3, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d102      	bne.n	801132c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011326:	2300      	movs	r3, #0
 8011328:	73fb      	strb	r3, [r7, #15]
 801132a:	e008      	b.n	801133e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	68db      	ldr	r3, [r3, #12]
 8011330:	2b02      	cmp	r3, #2
 8011332:	d102      	bne.n	801133a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011334:	2301      	movs	r3, #1
 8011336:	73fb      	strb	r3, [r7, #15]
 8011338:	e001      	b.n	801133e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801133a:	f7f3 fa3f 	bl	80047bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011344:	7bfa      	ldrb	r2, [r7, #15]
 8011346:	4611      	mov	r1, r2
 8011348:	4618      	mov	r0, r3
 801134a:	f7fc fb2a 	bl	800d9a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011354:	4618      	mov	r0, r3
 8011356:	f7fc fae3 	bl	800d920 <USBD_LL_Reset>
}
 801135a:	bf00      	nop
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
	...

08011364 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b082      	sub	sp, #8
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011372:	4618      	mov	r0, r3
 8011374:	f7fc fb25 	bl	800d9c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	687a      	ldr	r2, [r7, #4]
 8011384:	6812      	ldr	r2, [r2, #0]
 8011386:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801138a:	f043 0301 	orr.w	r3, r3, #1
 801138e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	6a1b      	ldr	r3, [r3, #32]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d005      	beq.n	80113a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011398:	4b04      	ldr	r3, [pc, #16]	; (80113ac <HAL_PCD_SuspendCallback+0x48>)
 801139a:	691b      	ldr	r3, [r3, #16]
 801139c:	4a03      	ldr	r2, [pc, #12]	; (80113ac <HAL_PCD_SuspendCallback+0x48>)
 801139e:	f043 0306 	orr.w	r3, r3, #6
 80113a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80113a4:	bf00      	nop
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	e000ed00 	.word	0xe000ed00

080113b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80113be:	4618      	mov	r0, r3
 80113c0:	f7fc fb14 	bl	800d9ec <USBD_LL_Resume>
}
 80113c4:	bf00      	nop
 80113c6:	3708      	adds	r7, #8
 80113c8:	46bd      	mov	sp, r7
 80113ca:	bd80      	pop	{r7, pc}

080113cc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b082      	sub	sp, #8
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
 80113d4:	460b      	mov	r3, r1
 80113d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80113de:	78fa      	ldrb	r2, [r7, #3]
 80113e0:	4611      	mov	r1, r2
 80113e2:	4618      	mov	r0, r3
 80113e4:	f7fc fb3f 	bl	800da66 <USBD_LL_IsoOUTIncomplete>
}
 80113e8:	bf00      	nop
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b082      	sub	sp, #8
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
 80113f8:	460b      	mov	r3, r1
 80113fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011402:	78fa      	ldrb	r2, [r7, #3]
 8011404:	4611      	mov	r1, r2
 8011406:	4618      	mov	r0, r3
 8011408:	f7fc fb20 	bl	800da4c <USBD_LL_IsoINIncomplete>
}
 801140c:	bf00      	nop
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}

08011414 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b082      	sub	sp, #8
 8011418:	af00      	add	r7, sp, #0
 801141a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8011422:	4618      	mov	r0, r3
 8011424:	f7fc fb2c 	bl	800da80 <USBD_LL_DevConnected>
}
 8011428:	bf00      	nop
 801142a:	3708      	adds	r7, #8
 801142c:	46bd      	mov	sp, r7
 801142e:	bd80      	pop	{r7, pc}

08011430 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801143e:	4618      	mov	r0, r3
 8011440:	f7fc fb29 	bl	800da96 <USBD_LL_DevDisconnected>
}
 8011444:	bf00      	nop
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b082      	sub	sp, #8
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	781b      	ldrb	r3, [r3, #0]
 8011458:	2b00      	cmp	r3, #0
 801145a:	d13c      	bne.n	80114d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801145c:	4a20      	ldr	r2, [pc, #128]	; (80114e0 <USBD_LL_Init+0x94>)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	4a1e      	ldr	r2, [pc, #120]	; (80114e0 <USBD_LL_Init+0x94>)
 8011468:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801146c:	4b1c      	ldr	r3, [pc, #112]	; (80114e0 <USBD_LL_Init+0x94>)
 801146e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011472:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011474:	4b1a      	ldr	r3, [pc, #104]	; (80114e0 <USBD_LL_Init+0x94>)
 8011476:	2206      	movs	r2, #6
 8011478:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801147a:	4b19      	ldr	r3, [pc, #100]	; (80114e0 <USBD_LL_Init+0x94>)
 801147c:	2202      	movs	r2, #2
 801147e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011480:	4b17      	ldr	r3, [pc, #92]	; (80114e0 <USBD_LL_Init+0x94>)
 8011482:	2200      	movs	r2, #0
 8011484:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011486:	4b16      	ldr	r3, [pc, #88]	; (80114e0 <USBD_LL_Init+0x94>)
 8011488:	2202      	movs	r2, #2
 801148a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801148c:	4b14      	ldr	r3, [pc, #80]	; (80114e0 <USBD_LL_Init+0x94>)
 801148e:	2200      	movs	r2, #0
 8011490:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011492:	4b13      	ldr	r3, [pc, #76]	; (80114e0 <USBD_LL_Init+0x94>)
 8011494:	2200      	movs	r2, #0
 8011496:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011498:	4b11      	ldr	r3, [pc, #68]	; (80114e0 <USBD_LL_Init+0x94>)
 801149a:	2200      	movs	r2, #0
 801149c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801149e:	4b10      	ldr	r3, [pc, #64]	; (80114e0 <USBD_LL_Init+0x94>)
 80114a0:	2200      	movs	r2, #0
 80114a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80114a4:	4b0e      	ldr	r3, [pc, #56]	; (80114e0 <USBD_LL_Init+0x94>)
 80114a6:	2200      	movs	r2, #0
 80114a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80114aa:	480d      	ldr	r0, [pc, #52]	; (80114e0 <USBD_LL_Init+0x94>)
 80114ac:	f7f5 fde9 	bl	8007082 <HAL_PCD_Init>
 80114b0:	4603      	mov	r3, r0
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d001      	beq.n	80114ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80114b6:	f7f3 f981 	bl	80047bc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80114ba:	2180      	movs	r1, #128	; 0x80
 80114bc:	4808      	ldr	r0, [pc, #32]	; (80114e0 <USBD_LL_Init+0x94>)
 80114be:	f7f6 ff7a 	bl	80083b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80114c2:	2240      	movs	r2, #64	; 0x40
 80114c4:	2100      	movs	r1, #0
 80114c6:	4806      	ldr	r0, [pc, #24]	; (80114e0 <USBD_LL_Init+0x94>)
 80114c8:	f7f6 ff2e 	bl	8008328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80114cc:	2280      	movs	r2, #128	; 0x80
 80114ce:	2101      	movs	r1, #1
 80114d0:	4803      	ldr	r0, [pc, #12]	; (80114e0 <USBD_LL_Init+0x94>)
 80114d2:	f7f6 ff29 	bl	8008328 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3708      	adds	r7, #8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	200061a0 	.word	0x200061a0

080114e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b084      	sub	sp, #16
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114ec:	2300      	movs	r3, #0
 80114ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114f0:	2300      	movs	r3, #0
 80114f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80114fa:	4618      	mov	r0, r3
 80114fc:	f7f5 fee5 	bl	80072ca <HAL_PCD_Start>
 8011500:	4603      	mov	r3, r0
 8011502:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011504:	7bfb      	ldrb	r3, [r7, #15]
 8011506:	4618      	mov	r0, r3
 8011508:	f000 f978 	bl	80117fc <USBD_Get_USB_Status>
 801150c:	4603      	mov	r3, r0
 801150e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011510:	7bbb      	ldrb	r3, [r7, #14]
}
 8011512:	4618      	mov	r0, r3
 8011514:	3710      	adds	r7, #16
 8011516:	46bd      	mov	sp, r7
 8011518:	bd80      	pop	{r7, pc}

0801151a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801151a:	b580      	push	{r7, lr}
 801151c:	b084      	sub	sp, #16
 801151e:	af00      	add	r7, sp, #0
 8011520:	6078      	str	r0, [r7, #4]
 8011522:	4608      	mov	r0, r1
 8011524:	4611      	mov	r1, r2
 8011526:	461a      	mov	r2, r3
 8011528:	4603      	mov	r3, r0
 801152a:	70fb      	strb	r3, [r7, #3]
 801152c:	460b      	mov	r3, r1
 801152e:	70bb      	strb	r3, [r7, #2]
 8011530:	4613      	mov	r3, r2
 8011532:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011534:	2300      	movs	r3, #0
 8011536:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011538:	2300      	movs	r3, #0
 801153a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011542:	78bb      	ldrb	r3, [r7, #2]
 8011544:	883a      	ldrh	r2, [r7, #0]
 8011546:	78f9      	ldrb	r1, [r7, #3]
 8011548:	f7f6 faf6 	bl	8007b38 <HAL_PCD_EP_Open>
 801154c:	4603      	mov	r3, r0
 801154e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011550:	7bfb      	ldrb	r3, [r7, #15]
 8011552:	4618      	mov	r0, r3
 8011554:	f000 f952 	bl	80117fc <USBD_Get_USB_Status>
 8011558:	4603      	mov	r3, r0
 801155a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801155c:	7bbb      	ldrb	r3, [r7, #14]
}
 801155e:	4618      	mov	r0, r3
 8011560:	3710      	adds	r7, #16
 8011562:	46bd      	mov	sp, r7
 8011564:	bd80      	pop	{r7, pc}

08011566 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011566:	b580      	push	{r7, lr}
 8011568:	b084      	sub	sp, #16
 801156a:	af00      	add	r7, sp, #0
 801156c:	6078      	str	r0, [r7, #4]
 801156e:	460b      	mov	r3, r1
 8011570:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011576:	2300      	movs	r3, #0
 8011578:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011580:	78fa      	ldrb	r2, [r7, #3]
 8011582:	4611      	mov	r1, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f7f6 fb3f 	bl	8007c08 <HAL_PCD_EP_Close>
 801158a:	4603      	mov	r3, r0
 801158c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801158e:	7bfb      	ldrb	r3, [r7, #15]
 8011590:	4618      	mov	r0, r3
 8011592:	f000 f933 	bl	80117fc <USBD_Get_USB_Status>
 8011596:	4603      	mov	r3, r0
 8011598:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801159a:	7bbb      	ldrb	r3, [r7, #14]
}
 801159c:	4618      	mov	r0, r3
 801159e:	3710      	adds	r7, #16
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}

080115a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b084      	sub	sp, #16
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
 80115ac:	460b      	mov	r3, r1
 80115ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115b0:	2300      	movs	r3, #0
 80115b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115b4:	2300      	movs	r3, #0
 80115b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115be:	78fa      	ldrb	r2, [r7, #3]
 80115c0:	4611      	mov	r1, r2
 80115c2:	4618      	mov	r0, r3
 80115c4:	f7f6 fc17 	bl	8007df6 <HAL_PCD_EP_SetStall>
 80115c8:	4603      	mov	r3, r0
 80115ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115cc:	7bfb      	ldrb	r3, [r7, #15]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f914 	bl	80117fc <USBD_Get_USB_Status>
 80115d4:	4603      	mov	r3, r0
 80115d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80115d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3710      	adds	r7, #16
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b084      	sub	sp, #16
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
 80115ea:	460b      	mov	r3, r1
 80115ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115ee:	2300      	movs	r3, #0
 80115f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115f2:	2300      	movs	r3, #0
 80115f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115fc:	78fa      	ldrb	r2, [r7, #3]
 80115fe:	4611      	mov	r1, r2
 8011600:	4618      	mov	r0, r3
 8011602:	f7f6 fc5c 	bl	8007ebe <HAL_PCD_EP_ClrStall>
 8011606:	4603      	mov	r3, r0
 8011608:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801160a:	7bfb      	ldrb	r3, [r7, #15]
 801160c:	4618      	mov	r0, r3
 801160e:	f000 f8f5 	bl	80117fc <USBD_Get_USB_Status>
 8011612:	4603      	mov	r3, r0
 8011614:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011616:	7bbb      	ldrb	r3, [r7, #14]
}
 8011618:	4618      	mov	r0, r3
 801161a:	3710      	adds	r7, #16
 801161c:	46bd      	mov	sp, r7
 801161e:	bd80      	pop	{r7, pc}

08011620 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011620:	b480      	push	{r7}
 8011622:	b085      	sub	sp, #20
 8011624:	af00      	add	r7, sp, #0
 8011626:	6078      	str	r0, [r7, #4]
 8011628:	460b      	mov	r3, r1
 801162a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011632:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011634:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011638:	2b00      	cmp	r3, #0
 801163a:	da0b      	bge.n	8011654 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801163c:	78fb      	ldrb	r3, [r7, #3]
 801163e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011642:	68f9      	ldr	r1, [r7, #12]
 8011644:	4613      	mov	r3, r2
 8011646:	00db      	lsls	r3, r3, #3
 8011648:	1a9b      	subs	r3, r3, r2
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	440b      	add	r3, r1
 801164e:	333e      	adds	r3, #62	; 0x3e
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	e00b      	b.n	801166c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011654:	78fb      	ldrb	r3, [r7, #3]
 8011656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801165a:	68f9      	ldr	r1, [r7, #12]
 801165c:	4613      	mov	r3, r2
 801165e:	00db      	lsls	r3, r3, #3
 8011660:	1a9b      	subs	r3, r3, r2
 8011662:	009b      	lsls	r3, r3, #2
 8011664:	440b      	add	r3, r1
 8011666:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801166a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801166c:	4618      	mov	r0, r3
 801166e:	3714      	adds	r7, #20
 8011670:	46bd      	mov	sp, r7
 8011672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011676:	4770      	bx	lr

08011678 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
 8011680:	460b      	mov	r3, r1
 8011682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011684:	2300      	movs	r3, #0
 8011686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011688:	2300      	movs	r3, #0
 801168a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8011692:	78fa      	ldrb	r2, [r7, #3]
 8011694:	4611      	mov	r1, r2
 8011696:	4618      	mov	r0, r3
 8011698:	f7f6 fa29 	bl	8007aee <HAL_PCD_SetAddress>
 801169c:	4603      	mov	r3, r0
 801169e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116a0:	7bfb      	ldrb	r3, [r7, #15]
 80116a2:	4618      	mov	r0, r3
 80116a4:	f000 f8aa 	bl	80117fc <USBD_Get_USB_Status>
 80116a8:	4603      	mov	r3, r0
 80116aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80116ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116b6:	b580      	push	{r7, lr}
 80116b8:	b086      	sub	sp, #24
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	60f8      	str	r0, [r7, #12]
 80116be:	607a      	str	r2, [r7, #4]
 80116c0:	603b      	str	r3, [r7, #0]
 80116c2:	460b      	mov	r3, r1
 80116c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80116c6:	2300      	movs	r3, #0
 80116c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116ca:	2300      	movs	r3, #0
 80116cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80116d4:	7af9      	ldrb	r1, [r7, #11]
 80116d6:	683b      	ldr	r3, [r7, #0]
 80116d8:	687a      	ldr	r2, [r7, #4]
 80116da:	f7f6 fb42 	bl	8007d62 <HAL_PCD_EP_Transmit>
 80116de:	4603      	mov	r3, r0
 80116e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80116e2:	7dfb      	ldrb	r3, [r7, #23]
 80116e4:	4618      	mov	r0, r3
 80116e6:	f000 f889 	bl	80117fc <USBD_Get_USB_Status>
 80116ea:	4603      	mov	r3, r0
 80116ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80116ee:	7dbb      	ldrb	r3, [r7, #22]
}
 80116f0:	4618      	mov	r0, r3
 80116f2:	3718      	adds	r7, #24
 80116f4:	46bd      	mov	sp, r7
 80116f6:	bd80      	pop	{r7, pc}

080116f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b086      	sub	sp, #24
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	607a      	str	r2, [r7, #4]
 8011702:	603b      	str	r3, [r7, #0]
 8011704:	460b      	mov	r3, r1
 8011706:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011708:	2300      	movs	r3, #0
 801170a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801170c:	2300      	movs	r3, #0
 801170e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8011716:	7af9      	ldrb	r1, [r7, #11]
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	687a      	ldr	r2, [r7, #4]
 801171c:	f7f6 fabe 	bl	8007c9c <HAL_PCD_EP_Receive>
 8011720:	4603      	mov	r3, r0
 8011722:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011724:	7dfb      	ldrb	r3, [r7, #23]
 8011726:	4618      	mov	r0, r3
 8011728:	f000 f868 	bl	80117fc <USBD_Get_USB_Status>
 801172c:	4603      	mov	r3, r0
 801172e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011730:	7dbb      	ldrb	r3, [r7, #22]
}
 8011732:	4618      	mov	r0, r3
 8011734:	3718      	adds	r7, #24
 8011736:	46bd      	mov	sp, r7
 8011738:	bd80      	pop	{r7, pc}

0801173a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801173a:	b580      	push	{r7, lr}
 801173c:	b082      	sub	sp, #8
 801173e:	af00      	add	r7, sp, #0
 8011740:	6078      	str	r0, [r7, #4]
 8011742:	460b      	mov	r3, r1
 8011744:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801174c:	78fa      	ldrb	r2, [r7, #3]
 801174e:	4611      	mov	r1, r2
 8011750:	4618      	mov	r0, r3
 8011752:	f7f6 faee 	bl	8007d32 <HAL_PCD_EP_GetRxCount>
 8011756:	4603      	mov	r3, r0
}
 8011758:	4618      	mov	r0, r3
 801175a:	3708      	adds	r7, #8
 801175c:	46bd      	mov	sp, r7
 801175e:	bd80      	pop	{r7, pc}

08011760 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b082      	sub	sp, #8
 8011764:	af00      	add	r7, sp, #0
 8011766:	6078      	str	r0, [r7, #4]
 8011768:	460b      	mov	r3, r1
 801176a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801176c:	78fb      	ldrb	r3, [r7, #3]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d002      	beq.n	8011778 <HAL_PCDEx_LPM_Callback+0x18>
 8011772:	2b01      	cmp	r3, #1
 8011774:	d01f      	beq.n	80117b6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011776:	e03b      	b.n	80117f0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6a1b      	ldr	r3, [r3, #32]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d007      	beq.n	8011790 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8011780:	f7f1 ff3a 	bl	80035f8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011784:	4b1c      	ldr	r3, [pc, #112]	; (80117f8 <HAL_PCDEx_LPM_Callback+0x98>)
 8011786:	691b      	ldr	r3, [r3, #16]
 8011788:	4a1b      	ldr	r2, [pc, #108]	; (80117f8 <HAL_PCDEx_LPM_Callback+0x98>)
 801178a:	f023 0306 	bic.w	r3, r3, #6
 801178e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	687a      	ldr	r2, [r7, #4]
 801179c:	6812      	ldr	r2, [r2, #0]
 801179e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117a2:	f023 0301 	bic.w	r3, r3, #1
 80117a6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fc f91c 	bl	800d9ec <USBD_LL_Resume>
    break;
 80117b4:	e01c      	b.n	80117f0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	6812      	ldr	r2, [r2, #0]
 80117c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117c8:	f043 0301 	orr.w	r3, r3, #1
 80117cc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7fc f8f4 	bl	800d9c2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6a1b      	ldr	r3, [r3, #32]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d005      	beq.n	80117ee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117e2:	4b05      	ldr	r3, [pc, #20]	; (80117f8 <HAL_PCDEx_LPM_Callback+0x98>)
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	4a04      	ldr	r2, [pc, #16]	; (80117f8 <HAL_PCDEx_LPM_Callback+0x98>)
 80117e8:	f043 0306 	orr.w	r3, r3, #6
 80117ec:	6113      	str	r3, [r2, #16]
    break;
 80117ee:	bf00      	nop
}
 80117f0:	bf00      	nop
 80117f2:	3708      	adds	r7, #8
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}
 80117f8:	e000ed00 	.word	0xe000ed00

080117fc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80117fc:	b480      	push	{r7}
 80117fe:	b085      	sub	sp, #20
 8011800:	af00      	add	r7, sp, #0
 8011802:	4603      	mov	r3, r0
 8011804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011806:	2300      	movs	r3, #0
 8011808:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801180a:	79fb      	ldrb	r3, [r7, #7]
 801180c:	2b03      	cmp	r3, #3
 801180e:	d817      	bhi.n	8011840 <USBD_Get_USB_Status+0x44>
 8011810:	a201      	add	r2, pc, #4	; (adr r2, 8011818 <USBD_Get_USB_Status+0x1c>)
 8011812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011816:	bf00      	nop
 8011818:	08011829 	.word	0x08011829
 801181c:	0801182f 	.word	0x0801182f
 8011820:	08011835 	.word	0x08011835
 8011824:	0801183b 	.word	0x0801183b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011828:	2300      	movs	r3, #0
 801182a:	73fb      	strb	r3, [r7, #15]
    break;
 801182c:	e00b      	b.n	8011846 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801182e:	2303      	movs	r3, #3
 8011830:	73fb      	strb	r3, [r7, #15]
    break;
 8011832:	e008      	b.n	8011846 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011834:	2301      	movs	r3, #1
 8011836:	73fb      	strb	r3, [r7, #15]
    break;
 8011838:	e005      	b.n	8011846 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801183a:	2303      	movs	r3, #3
 801183c:	73fb      	strb	r3, [r7, #15]
    break;
 801183e:	e002      	b.n	8011846 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011840:	2303      	movs	r3, #3
 8011842:	73fb      	strb	r3, [r7, #15]
    break;
 8011844:	bf00      	nop
  }
  return usb_status;
 8011846:	7bfb      	ldrb	r3, [r7, #15]
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <__assert_func>:
 8011854:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011856:	461c      	mov	r4, r3
 8011858:	4b09      	ldr	r3, [pc, #36]	; (8011880 <__assert_func+0x2c>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	4605      	mov	r5, r0
 801185e:	68d8      	ldr	r0, [r3, #12]
 8011860:	b152      	cbz	r2, 8011878 <__assert_func+0x24>
 8011862:	4b08      	ldr	r3, [pc, #32]	; (8011884 <__assert_func+0x30>)
 8011864:	9100      	str	r1, [sp, #0]
 8011866:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801186a:	4907      	ldr	r1, [pc, #28]	; (8011888 <__assert_func+0x34>)
 801186c:	462b      	mov	r3, r5
 801186e:	4622      	mov	r2, r4
 8011870:	f000 f814 	bl	801189c <fiprintf>
 8011874:	f001 f83a 	bl	80128ec <abort>
 8011878:	4b04      	ldr	r3, [pc, #16]	; (801188c <__assert_func+0x38>)
 801187a:	461a      	mov	r2, r3
 801187c:	e7f2      	b.n	8011864 <__assert_func+0x10>
 801187e:	bf00      	nop
 8011880:	20000430 	.word	0x20000430
 8011884:	080175f8 	.word	0x080175f8
 8011888:	08017605 	.word	0x08017605
 801188c:	08017633 	.word	0x08017633

08011890 <__errno>:
 8011890:	4b01      	ldr	r3, [pc, #4]	; (8011898 <__errno+0x8>)
 8011892:	6818      	ldr	r0, [r3, #0]
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop
 8011898:	20000430 	.word	0x20000430

0801189c <fiprintf>:
 801189c:	b40e      	push	{r1, r2, r3}
 801189e:	b503      	push	{r0, r1, lr}
 80118a0:	4601      	mov	r1, r0
 80118a2:	ab03      	add	r3, sp, #12
 80118a4:	4805      	ldr	r0, [pc, #20]	; (80118bc <fiprintf+0x20>)
 80118a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	9301      	str	r3, [sp, #4]
 80118ae:	f000 f921 	bl	8011af4 <_vfiprintf_r>
 80118b2:	b002      	add	sp, #8
 80118b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80118b8:	b003      	add	sp, #12
 80118ba:	4770      	bx	lr
 80118bc:	20000430 	.word	0x20000430

080118c0 <__libc_init_array>:
 80118c0:	b570      	push	{r4, r5, r6, lr}
 80118c2:	4e0d      	ldr	r6, [pc, #52]	; (80118f8 <__libc_init_array+0x38>)
 80118c4:	4c0d      	ldr	r4, [pc, #52]	; (80118fc <__libc_init_array+0x3c>)
 80118c6:	1ba4      	subs	r4, r4, r6
 80118c8:	10a4      	asrs	r4, r4, #2
 80118ca:	2500      	movs	r5, #0
 80118cc:	42a5      	cmp	r5, r4
 80118ce:	d109      	bne.n	80118e4 <__libc_init_array+0x24>
 80118d0:	4e0b      	ldr	r6, [pc, #44]	; (8011900 <__libc_init_array+0x40>)
 80118d2:	4c0c      	ldr	r4, [pc, #48]	; (8011904 <__libc_init_array+0x44>)
 80118d4:	f005 fb26 	bl	8016f24 <_init>
 80118d8:	1ba4      	subs	r4, r4, r6
 80118da:	10a4      	asrs	r4, r4, #2
 80118dc:	2500      	movs	r5, #0
 80118de:	42a5      	cmp	r5, r4
 80118e0:	d105      	bne.n	80118ee <__libc_init_array+0x2e>
 80118e2:	bd70      	pop	{r4, r5, r6, pc}
 80118e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118e8:	4798      	blx	r3
 80118ea:	3501      	adds	r5, #1
 80118ec:	e7ee      	b.n	80118cc <__libc_init_array+0xc>
 80118ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80118f2:	4798      	blx	r3
 80118f4:	3501      	adds	r5, #1
 80118f6:	e7f2      	b.n	80118de <__libc_init_array+0x1e>
 80118f8:	08017b68 	.word	0x08017b68
 80118fc:	08017b68 	.word	0x08017b68
 8011900:	08017b68 	.word	0x08017b68
 8011904:	08017b6c 	.word	0x08017b6c

08011908 <malloc>:
 8011908:	4b02      	ldr	r3, [pc, #8]	; (8011914 <malloc+0xc>)
 801190a:	4601      	mov	r1, r0
 801190c:	6818      	ldr	r0, [r3, #0]
 801190e:	f000 b86d 	b.w	80119ec <_malloc_r>
 8011912:	bf00      	nop
 8011914:	20000430 	.word	0x20000430

08011918 <free>:
 8011918:	4b02      	ldr	r3, [pc, #8]	; (8011924 <free+0xc>)
 801191a:	4601      	mov	r1, r0
 801191c:	6818      	ldr	r0, [r3, #0]
 801191e:	f000 b817 	b.w	8011950 <_free_r>
 8011922:	bf00      	nop
 8011924:	20000430 	.word	0x20000430

08011928 <memcpy>:
 8011928:	b510      	push	{r4, lr}
 801192a:	1e43      	subs	r3, r0, #1
 801192c:	440a      	add	r2, r1
 801192e:	4291      	cmp	r1, r2
 8011930:	d100      	bne.n	8011934 <memcpy+0xc>
 8011932:	bd10      	pop	{r4, pc}
 8011934:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011938:	f803 4f01 	strb.w	r4, [r3, #1]!
 801193c:	e7f7      	b.n	801192e <memcpy+0x6>

0801193e <memset>:
 801193e:	4402      	add	r2, r0
 8011940:	4603      	mov	r3, r0
 8011942:	4293      	cmp	r3, r2
 8011944:	d100      	bne.n	8011948 <memset+0xa>
 8011946:	4770      	bx	lr
 8011948:	f803 1b01 	strb.w	r1, [r3], #1
 801194c:	e7f9      	b.n	8011942 <memset+0x4>
	...

08011950 <_free_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4605      	mov	r5, r0
 8011954:	2900      	cmp	r1, #0
 8011956:	d045      	beq.n	80119e4 <_free_r+0x94>
 8011958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801195c:	1f0c      	subs	r4, r1, #4
 801195e:	2b00      	cmp	r3, #0
 8011960:	bfb8      	it	lt
 8011962:	18e4      	addlt	r4, r4, r3
 8011964:	f002 f837 	bl	80139d6 <__malloc_lock>
 8011968:	4a1f      	ldr	r2, [pc, #124]	; (80119e8 <_free_r+0x98>)
 801196a:	6813      	ldr	r3, [r2, #0]
 801196c:	4610      	mov	r0, r2
 801196e:	b933      	cbnz	r3, 801197e <_free_r+0x2e>
 8011970:	6063      	str	r3, [r4, #4]
 8011972:	6014      	str	r4, [r2, #0]
 8011974:	4628      	mov	r0, r5
 8011976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801197a:	f002 b82d 	b.w	80139d8 <__malloc_unlock>
 801197e:	42a3      	cmp	r3, r4
 8011980:	d90c      	bls.n	801199c <_free_r+0x4c>
 8011982:	6821      	ldr	r1, [r4, #0]
 8011984:	1862      	adds	r2, r4, r1
 8011986:	4293      	cmp	r3, r2
 8011988:	bf04      	itt	eq
 801198a:	681a      	ldreq	r2, [r3, #0]
 801198c:	685b      	ldreq	r3, [r3, #4]
 801198e:	6063      	str	r3, [r4, #4]
 8011990:	bf04      	itt	eq
 8011992:	1852      	addeq	r2, r2, r1
 8011994:	6022      	streq	r2, [r4, #0]
 8011996:	6004      	str	r4, [r0, #0]
 8011998:	e7ec      	b.n	8011974 <_free_r+0x24>
 801199a:	4613      	mov	r3, r2
 801199c:	685a      	ldr	r2, [r3, #4]
 801199e:	b10a      	cbz	r2, 80119a4 <_free_r+0x54>
 80119a0:	42a2      	cmp	r2, r4
 80119a2:	d9fa      	bls.n	801199a <_free_r+0x4a>
 80119a4:	6819      	ldr	r1, [r3, #0]
 80119a6:	1858      	adds	r0, r3, r1
 80119a8:	42a0      	cmp	r0, r4
 80119aa:	d10b      	bne.n	80119c4 <_free_r+0x74>
 80119ac:	6820      	ldr	r0, [r4, #0]
 80119ae:	4401      	add	r1, r0
 80119b0:	1858      	adds	r0, r3, r1
 80119b2:	4282      	cmp	r2, r0
 80119b4:	6019      	str	r1, [r3, #0]
 80119b6:	d1dd      	bne.n	8011974 <_free_r+0x24>
 80119b8:	6810      	ldr	r0, [r2, #0]
 80119ba:	6852      	ldr	r2, [r2, #4]
 80119bc:	605a      	str	r2, [r3, #4]
 80119be:	4401      	add	r1, r0
 80119c0:	6019      	str	r1, [r3, #0]
 80119c2:	e7d7      	b.n	8011974 <_free_r+0x24>
 80119c4:	d902      	bls.n	80119cc <_free_r+0x7c>
 80119c6:	230c      	movs	r3, #12
 80119c8:	602b      	str	r3, [r5, #0]
 80119ca:	e7d3      	b.n	8011974 <_free_r+0x24>
 80119cc:	6820      	ldr	r0, [r4, #0]
 80119ce:	1821      	adds	r1, r4, r0
 80119d0:	428a      	cmp	r2, r1
 80119d2:	bf04      	itt	eq
 80119d4:	6811      	ldreq	r1, [r2, #0]
 80119d6:	6852      	ldreq	r2, [r2, #4]
 80119d8:	6062      	str	r2, [r4, #4]
 80119da:	bf04      	itt	eq
 80119dc:	1809      	addeq	r1, r1, r0
 80119de:	6021      	streq	r1, [r4, #0]
 80119e0:	605c      	str	r4, [r3, #4]
 80119e2:	e7c7      	b.n	8011974 <_free_r+0x24>
 80119e4:	bd38      	pop	{r3, r4, r5, pc}
 80119e6:	bf00      	nop
 80119e8:	200045d8 	.word	0x200045d8

080119ec <_malloc_r>:
 80119ec:	b570      	push	{r4, r5, r6, lr}
 80119ee:	1ccd      	adds	r5, r1, #3
 80119f0:	f025 0503 	bic.w	r5, r5, #3
 80119f4:	3508      	adds	r5, #8
 80119f6:	2d0c      	cmp	r5, #12
 80119f8:	bf38      	it	cc
 80119fa:	250c      	movcc	r5, #12
 80119fc:	2d00      	cmp	r5, #0
 80119fe:	4606      	mov	r6, r0
 8011a00:	db01      	blt.n	8011a06 <_malloc_r+0x1a>
 8011a02:	42a9      	cmp	r1, r5
 8011a04:	d903      	bls.n	8011a0e <_malloc_r+0x22>
 8011a06:	230c      	movs	r3, #12
 8011a08:	6033      	str	r3, [r6, #0]
 8011a0a:	2000      	movs	r0, #0
 8011a0c:	bd70      	pop	{r4, r5, r6, pc}
 8011a0e:	f001 ffe2 	bl	80139d6 <__malloc_lock>
 8011a12:	4a21      	ldr	r2, [pc, #132]	; (8011a98 <_malloc_r+0xac>)
 8011a14:	6814      	ldr	r4, [r2, #0]
 8011a16:	4621      	mov	r1, r4
 8011a18:	b991      	cbnz	r1, 8011a40 <_malloc_r+0x54>
 8011a1a:	4c20      	ldr	r4, [pc, #128]	; (8011a9c <_malloc_r+0xb0>)
 8011a1c:	6823      	ldr	r3, [r4, #0]
 8011a1e:	b91b      	cbnz	r3, 8011a28 <_malloc_r+0x3c>
 8011a20:	4630      	mov	r0, r6
 8011a22:	f000 fde9 	bl	80125f8 <_sbrk_r>
 8011a26:	6020      	str	r0, [r4, #0]
 8011a28:	4629      	mov	r1, r5
 8011a2a:	4630      	mov	r0, r6
 8011a2c:	f000 fde4 	bl	80125f8 <_sbrk_r>
 8011a30:	1c43      	adds	r3, r0, #1
 8011a32:	d124      	bne.n	8011a7e <_malloc_r+0x92>
 8011a34:	230c      	movs	r3, #12
 8011a36:	6033      	str	r3, [r6, #0]
 8011a38:	4630      	mov	r0, r6
 8011a3a:	f001 ffcd 	bl	80139d8 <__malloc_unlock>
 8011a3e:	e7e4      	b.n	8011a0a <_malloc_r+0x1e>
 8011a40:	680b      	ldr	r3, [r1, #0]
 8011a42:	1b5b      	subs	r3, r3, r5
 8011a44:	d418      	bmi.n	8011a78 <_malloc_r+0x8c>
 8011a46:	2b0b      	cmp	r3, #11
 8011a48:	d90f      	bls.n	8011a6a <_malloc_r+0x7e>
 8011a4a:	600b      	str	r3, [r1, #0]
 8011a4c:	50cd      	str	r5, [r1, r3]
 8011a4e:	18cc      	adds	r4, r1, r3
 8011a50:	4630      	mov	r0, r6
 8011a52:	f001 ffc1 	bl	80139d8 <__malloc_unlock>
 8011a56:	f104 000b 	add.w	r0, r4, #11
 8011a5a:	1d23      	adds	r3, r4, #4
 8011a5c:	f020 0007 	bic.w	r0, r0, #7
 8011a60:	1ac3      	subs	r3, r0, r3
 8011a62:	d0d3      	beq.n	8011a0c <_malloc_r+0x20>
 8011a64:	425a      	negs	r2, r3
 8011a66:	50e2      	str	r2, [r4, r3]
 8011a68:	e7d0      	b.n	8011a0c <_malloc_r+0x20>
 8011a6a:	428c      	cmp	r4, r1
 8011a6c:	684b      	ldr	r3, [r1, #4]
 8011a6e:	bf16      	itet	ne
 8011a70:	6063      	strne	r3, [r4, #4]
 8011a72:	6013      	streq	r3, [r2, #0]
 8011a74:	460c      	movne	r4, r1
 8011a76:	e7eb      	b.n	8011a50 <_malloc_r+0x64>
 8011a78:	460c      	mov	r4, r1
 8011a7a:	6849      	ldr	r1, [r1, #4]
 8011a7c:	e7cc      	b.n	8011a18 <_malloc_r+0x2c>
 8011a7e:	1cc4      	adds	r4, r0, #3
 8011a80:	f024 0403 	bic.w	r4, r4, #3
 8011a84:	42a0      	cmp	r0, r4
 8011a86:	d005      	beq.n	8011a94 <_malloc_r+0xa8>
 8011a88:	1a21      	subs	r1, r4, r0
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	f000 fdb4 	bl	80125f8 <_sbrk_r>
 8011a90:	3001      	adds	r0, #1
 8011a92:	d0cf      	beq.n	8011a34 <_malloc_r+0x48>
 8011a94:	6025      	str	r5, [r4, #0]
 8011a96:	e7db      	b.n	8011a50 <_malloc_r+0x64>
 8011a98:	200045d8 	.word	0x200045d8
 8011a9c:	200045dc 	.word	0x200045dc

08011aa0 <__sfputc_r>:
 8011aa0:	6893      	ldr	r3, [r2, #8]
 8011aa2:	3b01      	subs	r3, #1
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	b410      	push	{r4}
 8011aa8:	6093      	str	r3, [r2, #8]
 8011aaa:	da08      	bge.n	8011abe <__sfputc_r+0x1e>
 8011aac:	6994      	ldr	r4, [r2, #24]
 8011aae:	42a3      	cmp	r3, r4
 8011ab0:	db01      	blt.n	8011ab6 <__sfputc_r+0x16>
 8011ab2:	290a      	cmp	r1, #10
 8011ab4:	d103      	bne.n	8011abe <__sfputc_r+0x1e>
 8011ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011aba:	f000 be45 	b.w	8012748 <__swbuf_r>
 8011abe:	6813      	ldr	r3, [r2, #0]
 8011ac0:	1c58      	adds	r0, r3, #1
 8011ac2:	6010      	str	r0, [r2, #0]
 8011ac4:	7019      	strb	r1, [r3, #0]
 8011ac6:	4608      	mov	r0, r1
 8011ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011acc:	4770      	bx	lr

08011ace <__sfputs_r>:
 8011ace:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad0:	4606      	mov	r6, r0
 8011ad2:	460f      	mov	r7, r1
 8011ad4:	4614      	mov	r4, r2
 8011ad6:	18d5      	adds	r5, r2, r3
 8011ad8:	42ac      	cmp	r4, r5
 8011ada:	d101      	bne.n	8011ae0 <__sfputs_r+0x12>
 8011adc:	2000      	movs	r0, #0
 8011ade:	e007      	b.n	8011af0 <__sfputs_r+0x22>
 8011ae0:	463a      	mov	r2, r7
 8011ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ae6:	4630      	mov	r0, r6
 8011ae8:	f7ff ffda 	bl	8011aa0 <__sfputc_r>
 8011aec:	1c43      	adds	r3, r0, #1
 8011aee:	d1f3      	bne.n	8011ad8 <__sfputs_r+0xa>
 8011af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011af4 <_vfiprintf_r>:
 8011af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011af8:	460c      	mov	r4, r1
 8011afa:	b09d      	sub	sp, #116	; 0x74
 8011afc:	4617      	mov	r7, r2
 8011afe:	461d      	mov	r5, r3
 8011b00:	4606      	mov	r6, r0
 8011b02:	b118      	cbz	r0, 8011b0c <_vfiprintf_r+0x18>
 8011b04:	6983      	ldr	r3, [r0, #24]
 8011b06:	b90b      	cbnz	r3, 8011b0c <_vfiprintf_r+0x18>
 8011b08:	f001 fe3e 	bl	8013788 <__sinit>
 8011b0c:	4b7c      	ldr	r3, [pc, #496]	; (8011d00 <_vfiprintf_r+0x20c>)
 8011b0e:	429c      	cmp	r4, r3
 8011b10:	d158      	bne.n	8011bc4 <_vfiprintf_r+0xd0>
 8011b12:	6874      	ldr	r4, [r6, #4]
 8011b14:	89a3      	ldrh	r3, [r4, #12]
 8011b16:	0718      	lsls	r0, r3, #28
 8011b18:	d55e      	bpl.n	8011bd8 <_vfiprintf_r+0xe4>
 8011b1a:	6923      	ldr	r3, [r4, #16]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d05b      	beq.n	8011bd8 <_vfiprintf_r+0xe4>
 8011b20:	2300      	movs	r3, #0
 8011b22:	9309      	str	r3, [sp, #36]	; 0x24
 8011b24:	2320      	movs	r3, #32
 8011b26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011b2a:	2330      	movs	r3, #48	; 0x30
 8011b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011b30:	9503      	str	r5, [sp, #12]
 8011b32:	f04f 0b01 	mov.w	fp, #1
 8011b36:	46b8      	mov	r8, r7
 8011b38:	4645      	mov	r5, r8
 8011b3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011b3e:	b10b      	cbz	r3, 8011b44 <_vfiprintf_r+0x50>
 8011b40:	2b25      	cmp	r3, #37	; 0x25
 8011b42:	d154      	bne.n	8011bee <_vfiprintf_r+0xfa>
 8011b44:	ebb8 0a07 	subs.w	sl, r8, r7
 8011b48:	d00b      	beq.n	8011b62 <_vfiprintf_r+0x6e>
 8011b4a:	4653      	mov	r3, sl
 8011b4c:	463a      	mov	r2, r7
 8011b4e:	4621      	mov	r1, r4
 8011b50:	4630      	mov	r0, r6
 8011b52:	f7ff ffbc 	bl	8011ace <__sfputs_r>
 8011b56:	3001      	adds	r0, #1
 8011b58:	f000 80c2 	beq.w	8011ce0 <_vfiprintf_r+0x1ec>
 8011b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b5e:	4453      	add	r3, sl
 8011b60:	9309      	str	r3, [sp, #36]	; 0x24
 8011b62:	f898 3000 	ldrb.w	r3, [r8]
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	f000 80ba 	beq.w	8011ce0 <_vfiprintf_r+0x1ec>
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8011b72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b76:	9304      	str	r3, [sp, #16]
 8011b78:	9307      	str	r3, [sp, #28]
 8011b7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011b7e:	931a      	str	r3, [sp, #104]	; 0x68
 8011b80:	46a8      	mov	r8, r5
 8011b82:	2205      	movs	r2, #5
 8011b84:	f818 1b01 	ldrb.w	r1, [r8], #1
 8011b88:	485e      	ldr	r0, [pc, #376]	; (8011d04 <_vfiprintf_r+0x210>)
 8011b8a:	f7ee fb49 	bl	8000220 <memchr>
 8011b8e:	9b04      	ldr	r3, [sp, #16]
 8011b90:	bb78      	cbnz	r0, 8011bf2 <_vfiprintf_r+0xfe>
 8011b92:	06d9      	lsls	r1, r3, #27
 8011b94:	bf44      	itt	mi
 8011b96:	2220      	movmi	r2, #32
 8011b98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011b9c:	071a      	lsls	r2, r3, #28
 8011b9e:	bf44      	itt	mi
 8011ba0:	222b      	movmi	r2, #43	; 0x2b
 8011ba2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011ba6:	782a      	ldrb	r2, [r5, #0]
 8011ba8:	2a2a      	cmp	r2, #42	; 0x2a
 8011baa:	d02a      	beq.n	8011c02 <_vfiprintf_r+0x10e>
 8011bac:	9a07      	ldr	r2, [sp, #28]
 8011bae:	46a8      	mov	r8, r5
 8011bb0:	2000      	movs	r0, #0
 8011bb2:	250a      	movs	r5, #10
 8011bb4:	4641      	mov	r1, r8
 8011bb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bba:	3b30      	subs	r3, #48	; 0x30
 8011bbc:	2b09      	cmp	r3, #9
 8011bbe:	d969      	bls.n	8011c94 <_vfiprintf_r+0x1a0>
 8011bc0:	b360      	cbz	r0, 8011c1c <_vfiprintf_r+0x128>
 8011bc2:	e024      	b.n	8011c0e <_vfiprintf_r+0x11a>
 8011bc4:	4b50      	ldr	r3, [pc, #320]	; (8011d08 <_vfiprintf_r+0x214>)
 8011bc6:	429c      	cmp	r4, r3
 8011bc8:	d101      	bne.n	8011bce <_vfiprintf_r+0xda>
 8011bca:	68b4      	ldr	r4, [r6, #8]
 8011bcc:	e7a2      	b.n	8011b14 <_vfiprintf_r+0x20>
 8011bce:	4b4f      	ldr	r3, [pc, #316]	; (8011d0c <_vfiprintf_r+0x218>)
 8011bd0:	429c      	cmp	r4, r3
 8011bd2:	bf08      	it	eq
 8011bd4:	68f4      	ldreq	r4, [r6, #12]
 8011bd6:	e79d      	b.n	8011b14 <_vfiprintf_r+0x20>
 8011bd8:	4621      	mov	r1, r4
 8011bda:	4630      	mov	r0, r6
 8011bdc:	f000 fe18 	bl	8012810 <__swsetup_r>
 8011be0:	2800      	cmp	r0, #0
 8011be2:	d09d      	beq.n	8011b20 <_vfiprintf_r+0x2c>
 8011be4:	f04f 30ff 	mov.w	r0, #4294967295
 8011be8:	b01d      	add	sp, #116	; 0x74
 8011bea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bee:	46a8      	mov	r8, r5
 8011bf0:	e7a2      	b.n	8011b38 <_vfiprintf_r+0x44>
 8011bf2:	4a44      	ldr	r2, [pc, #272]	; (8011d04 <_vfiprintf_r+0x210>)
 8011bf4:	1a80      	subs	r0, r0, r2
 8011bf6:	fa0b f000 	lsl.w	r0, fp, r0
 8011bfa:	4318      	orrs	r0, r3
 8011bfc:	9004      	str	r0, [sp, #16]
 8011bfe:	4645      	mov	r5, r8
 8011c00:	e7be      	b.n	8011b80 <_vfiprintf_r+0x8c>
 8011c02:	9a03      	ldr	r2, [sp, #12]
 8011c04:	1d11      	adds	r1, r2, #4
 8011c06:	6812      	ldr	r2, [r2, #0]
 8011c08:	9103      	str	r1, [sp, #12]
 8011c0a:	2a00      	cmp	r2, #0
 8011c0c:	db01      	blt.n	8011c12 <_vfiprintf_r+0x11e>
 8011c0e:	9207      	str	r2, [sp, #28]
 8011c10:	e004      	b.n	8011c1c <_vfiprintf_r+0x128>
 8011c12:	4252      	negs	r2, r2
 8011c14:	f043 0302 	orr.w	r3, r3, #2
 8011c18:	9207      	str	r2, [sp, #28]
 8011c1a:	9304      	str	r3, [sp, #16]
 8011c1c:	f898 3000 	ldrb.w	r3, [r8]
 8011c20:	2b2e      	cmp	r3, #46	; 0x2e
 8011c22:	d10e      	bne.n	8011c42 <_vfiprintf_r+0x14e>
 8011c24:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011c28:	2b2a      	cmp	r3, #42	; 0x2a
 8011c2a:	d138      	bne.n	8011c9e <_vfiprintf_r+0x1aa>
 8011c2c:	9b03      	ldr	r3, [sp, #12]
 8011c2e:	1d1a      	adds	r2, r3, #4
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	9203      	str	r2, [sp, #12]
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	bfb8      	it	lt
 8011c38:	f04f 33ff 	movlt.w	r3, #4294967295
 8011c3c:	f108 0802 	add.w	r8, r8, #2
 8011c40:	9305      	str	r3, [sp, #20]
 8011c42:	4d33      	ldr	r5, [pc, #204]	; (8011d10 <_vfiprintf_r+0x21c>)
 8011c44:	f898 1000 	ldrb.w	r1, [r8]
 8011c48:	2203      	movs	r2, #3
 8011c4a:	4628      	mov	r0, r5
 8011c4c:	f7ee fae8 	bl	8000220 <memchr>
 8011c50:	b140      	cbz	r0, 8011c64 <_vfiprintf_r+0x170>
 8011c52:	2340      	movs	r3, #64	; 0x40
 8011c54:	1b40      	subs	r0, r0, r5
 8011c56:	fa03 f000 	lsl.w	r0, r3, r0
 8011c5a:	9b04      	ldr	r3, [sp, #16]
 8011c5c:	4303      	orrs	r3, r0
 8011c5e:	f108 0801 	add.w	r8, r8, #1
 8011c62:	9304      	str	r3, [sp, #16]
 8011c64:	f898 1000 	ldrb.w	r1, [r8]
 8011c68:	482a      	ldr	r0, [pc, #168]	; (8011d14 <_vfiprintf_r+0x220>)
 8011c6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011c6e:	2206      	movs	r2, #6
 8011c70:	f108 0701 	add.w	r7, r8, #1
 8011c74:	f7ee fad4 	bl	8000220 <memchr>
 8011c78:	2800      	cmp	r0, #0
 8011c7a:	d037      	beq.n	8011cec <_vfiprintf_r+0x1f8>
 8011c7c:	4b26      	ldr	r3, [pc, #152]	; (8011d18 <_vfiprintf_r+0x224>)
 8011c7e:	bb1b      	cbnz	r3, 8011cc8 <_vfiprintf_r+0x1d4>
 8011c80:	9b03      	ldr	r3, [sp, #12]
 8011c82:	3307      	adds	r3, #7
 8011c84:	f023 0307 	bic.w	r3, r3, #7
 8011c88:	3308      	adds	r3, #8
 8011c8a:	9303      	str	r3, [sp, #12]
 8011c8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c8e:	444b      	add	r3, r9
 8011c90:	9309      	str	r3, [sp, #36]	; 0x24
 8011c92:	e750      	b.n	8011b36 <_vfiprintf_r+0x42>
 8011c94:	fb05 3202 	mla	r2, r5, r2, r3
 8011c98:	2001      	movs	r0, #1
 8011c9a:	4688      	mov	r8, r1
 8011c9c:	e78a      	b.n	8011bb4 <_vfiprintf_r+0xc0>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	f108 0801 	add.w	r8, r8, #1
 8011ca4:	9305      	str	r3, [sp, #20]
 8011ca6:	4619      	mov	r1, r3
 8011ca8:	250a      	movs	r5, #10
 8011caa:	4640      	mov	r0, r8
 8011cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011cb0:	3a30      	subs	r2, #48	; 0x30
 8011cb2:	2a09      	cmp	r2, #9
 8011cb4:	d903      	bls.n	8011cbe <_vfiprintf_r+0x1ca>
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d0c3      	beq.n	8011c42 <_vfiprintf_r+0x14e>
 8011cba:	9105      	str	r1, [sp, #20]
 8011cbc:	e7c1      	b.n	8011c42 <_vfiprintf_r+0x14e>
 8011cbe:	fb05 2101 	mla	r1, r5, r1, r2
 8011cc2:	2301      	movs	r3, #1
 8011cc4:	4680      	mov	r8, r0
 8011cc6:	e7f0      	b.n	8011caa <_vfiprintf_r+0x1b6>
 8011cc8:	ab03      	add	r3, sp, #12
 8011cca:	9300      	str	r3, [sp, #0]
 8011ccc:	4622      	mov	r2, r4
 8011cce:	4b13      	ldr	r3, [pc, #76]	; (8011d1c <_vfiprintf_r+0x228>)
 8011cd0:	a904      	add	r1, sp, #16
 8011cd2:	4630      	mov	r0, r6
 8011cd4:	f000 f8b8 	bl	8011e48 <_printf_float>
 8011cd8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011cdc:	4681      	mov	r9, r0
 8011cde:	d1d5      	bne.n	8011c8c <_vfiprintf_r+0x198>
 8011ce0:	89a3      	ldrh	r3, [r4, #12]
 8011ce2:	065b      	lsls	r3, r3, #25
 8011ce4:	f53f af7e 	bmi.w	8011be4 <_vfiprintf_r+0xf0>
 8011ce8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011cea:	e77d      	b.n	8011be8 <_vfiprintf_r+0xf4>
 8011cec:	ab03      	add	r3, sp, #12
 8011cee:	9300      	str	r3, [sp, #0]
 8011cf0:	4622      	mov	r2, r4
 8011cf2:	4b0a      	ldr	r3, [pc, #40]	; (8011d1c <_vfiprintf_r+0x228>)
 8011cf4:	a904      	add	r1, sp, #16
 8011cf6:	4630      	mov	r0, r6
 8011cf8:	f000 fb5c 	bl	80123b4 <_printf_i>
 8011cfc:	e7ec      	b.n	8011cd8 <_vfiprintf_r+0x1e4>
 8011cfe:	bf00      	nop
 8011d00:	080176ac 	.word	0x080176ac
 8011d04:	08017638 	.word	0x08017638
 8011d08:	080176cc 	.word	0x080176cc
 8011d0c:	0801768c 	.word	0x0801768c
 8011d10:	0801763e 	.word	0x0801763e
 8011d14:	08017642 	.word	0x08017642
 8011d18:	08011e49 	.word	0x08011e49
 8011d1c:	08011acf 	.word	0x08011acf

08011d20 <__cvt>:
 8011d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011d24:	ec55 4b10 	vmov	r4, r5, d0
 8011d28:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011d2a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011d2e:	2d00      	cmp	r5, #0
 8011d30:	460e      	mov	r6, r1
 8011d32:	4691      	mov	r9, r2
 8011d34:	4619      	mov	r1, r3
 8011d36:	bfb8      	it	lt
 8011d38:	4622      	movlt	r2, r4
 8011d3a:	462b      	mov	r3, r5
 8011d3c:	f027 0720 	bic.w	r7, r7, #32
 8011d40:	bfbb      	ittet	lt
 8011d42:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011d46:	461d      	movlt	r5, r3
 8011d48:	2300      	movge	r3, #0
 8011d4a:	232d      	movlt	r3, #45	; 0x2d
 8011d4c:	bfb8      	it	lt
 8011d4e:	4614      	movlt	r4, r2
 8011d50:	2f46      	cmp	r7, #70	; 0x46
 8011d52:	700b      	strb	r3, [r1, #0]
 8011d54:	d004      	beq.n	8011d60 <__cvt+0x40>
 8011d56:	2f45      	cmp	r7, #69	; 0x45
 8011d58:	d100      	bne.n	8011d5c <__cvt+0x3c>
 8011d5a:	3601      	adds	r6, #1
 8011d5c:	2102      	movs	r1, #2
 8011d5e:	e000      	b.n	8011d62 <__cvt+0x42>
 8011d60:	2103      	movs	r1, #3
 8011d62:	ab03      	add	r3, sp, #12
 8011d64:	9301      	str	r3, [sp, #4]
 8011d66:	ab02      	add	r3, sp, #8
 8011d68:	9300      	str	r3, [sp, #0]
 8011d6a:	4632      	mov	r2, r6
 8011d6c:	4653      	mov	r3, sl
 8011d6e:	ec45 4b10 	vmov	d0, r4, r5
 8011d72:	f000 fe61 	bl	8012a38 <_dtoa_r>
 8011d76:	2f47      	cmp	r7, #71	; 0x47
 8011d78:	4680      	mov	r8, r0
 8011d7a:	d102      	bne.n	8011d82 <__cvt+0x62>
 8011d7c:	f019 0f01 	tst.w	r9, #1
 8011d80:	d026      	beq.n	8011dd0 <__cvt+0xb0>
 8011d82:	2f46      	cmp	r7, #70	; 0x46
 8011d84:	eb08 0906 	add.w	r9, r8, r6
 8011d88:	d111      	bne.n	8011dae <__cvt+0x8e>
 8011d8a:	f898 3000 	ldrb.w	r3, [r8]
 8011d8e:	2b30      	cmp	r3, #48	; 0x30
 8011d90:	d10a      	bne.n	8011da8 <__cvt+0x88>
 8011d92:	2200      	movs	r2, #0
 8011d94:	2300      	movs	r3, #0
 8011d96:	4620      	mov	r0, r4
 8011d98:	4629      	mov	r1, r5
 8011d9a:	f7ee feb5 	bl	8000b08 <__aeabi_dcmpeq>
 8011d9e:	b918      	cbnz	r0, 8011da8 <__cvt+0x88>
 8011da0:	f1c6 0601 	rsb	r6, r6, #1
 8011da4:	f8ca 6000 	str.w	r6, [sl]
 8011da8:	f8da 3000 	ldr.w	r3, [sl]
 8011dac:	4499      	add	r9, r3
 8011dae:	2200      	movs	r2, #0
 8011db0:	2300      	movs	r3, #0
 8011db2:	4620      	mov	r0, r4
 8011db4:	4629      	mov	r1, r5
 8011db6:	f7ee fea7 	bl	8000b08 <__aeabi_dcmpeq>
 8011dba:	b938      	cbnz	r0, 8011dcc <__cvt+0xac>
 8011dbc:	2230      	movs	r2, #48	; 0x30
 8011dbe:	9b03      	ldr	r3, [sp, #12]
 8011dc0:	454b      	cmp	r3, r9
 8011dc2:	d205      	bcs.n	8011dd0 <__cvt+0xb0>
 8011dc4:	1c59      	adds	r1, r3, #1
 8011dc6:	9103      	str	r1, [sp, #12]
 8011dc8:	701a      	strb	r2, [r3, #0]
 8011dca:	e7f8      	b.n	8011dbe <__cvt+0x9e>
 8011dcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8011dd0:	9b03      	ldr	r3, [sp, #12]
 8011dd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011dd4:	eba3 0308 	sub.w	r3, r3, r8
 8011dd8:	4640      	mov	r0, r8
 8011dda:	6013      	str	r3, [r2, #0]
 8011ddc:	b004      	add	sp, #16
 8011dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011de2 <__exponent>:
 8011de2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011de4:	2900      	cmp	r1, #0
 8011de6:	4604      	mov	r4, r0
 8011de8:	bfba      	itte	lt
 8011dea:	4249      	neglt	r1, r1
 8011dec:	232d      	movlt	r3, #45	; 0x2d
 8011dee:	232b      	movge	r3, #43	; 0x2b
 8011df0:	2909      	cmp	r1, #9
 8011df2:	f804 2b02 	strb.w	r2, [r4], #2
 8011df6:	7043      	strb	r3, [r0, #1]
 8011df8:	dd20      	ble.n	8011e3c <__exponent+0x5a>
 8011dfa:	f10d 0307 	add.w	r3, sp, #7
 8011dfe:	461f      	mov	r7, r3
 8011e00:	260a      	movs	r6, #10
 8011e02:	fb91 f5f6 	sdiv	r5, r1, r6
 8011e06:	fb06 1115 	mls	r1, r6, r5, r1
 8011e0a:	3130      	adds	r1, #48	; 0x30
 8011e0c:	2d09      	cmp	r5, #9
 8011e0e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011e12:	f103 32ff 	add.w	r2, r3, #4294967295
 8011e16:	4629      	mov	r1, r5
 8011e18:	dc09      	bgt.n	8011e2e <__exponent+0x4c>
 8011e1a:	3130      	adds	r1, #48	; 0x30
 8011e1c:	3b02      	subs	r3, #2
 8011e1e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011e22:	42bb      	cmp	r3, r7
 8011e24:	4622      	mov	r2, r4
 8011e26:	d304      	bcc.n	8011e32 <__exponent+0x50>
 8011e28:	1a10      	subs	r0, r2, r0
 8011e2a:	b003      	add	sp, #12
 8011e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e2e:	4613      	mov	r3, r2
 8011e30:	e7e7      	b.n	8011e02 <__exponent+0x20>
 8011e32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e36:	f804 2b01 	strb.w	r2, [r4], #1
 8011e3a:	e7f2      	b.n	8011e22 <__exponent+0x40>
 8011e3c:	2330      	movs	r3, #48	; 0x30
 8011e3e:	4419      	add	r1, r3
 8011e40:	7083      	strb	r3, [r0, #2]
 8011e42:	1d02      	adds	r2, r0, #4
 8011e44:	70c1      	strb	r1, [r0, #3]
 8011e46:	e7ef      	b.n	8011e28 <__exponent+0x46>

08011e48 <_printf_float>:
 8011e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e4c:	b08d      	sub	sp, #52	; 0x34
 8011e4e:	460c      	mov	r4, r1
 8011e50:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011e54:	4616      	mov	r6, r2
 8011e56:	461f      	mov	r7, r3
 8011e58:	4605      	mov	r5, r0
 8011e5a:	f001 fd1f 	bl	801389c <_localeconv_r>
 8011e5e:	6803      	ldr	r3, [r0, #0]
 8011e60:	9304      	str	r3, [sp, #16]
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7ee f9d4 	bl	8000210 <strlen>
 8011e68:	2300      	movs	r3, #0
 8011e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8011e6c:	f8d8 3000 	ldr.w	r3, [r8]
 8011e70:	9005      	str	r0, [sp, #20]
 8011e72:	3307      	adds	r3, #7
 8011e74:	f023 0307 	bic.w	r3, r3, #7
 8011e78:	f103 0208 	add.w	r2, r3, #8
 8011e7c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011e80:	f8d4 b000 	ldr.w	fp, [r4]
 8011e84:	f8c8 2000 	str.w	r2, [r8]
 8011e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011e90:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011e94:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011e98:	9307      	str	r3, [sp, #28]
 8011e9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8011e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8011ea2:	4ba7      	ldr	r3, [pc, #668]	; (8012140 <_printf_float+0x2f8>)
 8011ea4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011ea8:	f7ee fe60 	bl	8000b6c <__aeabi_dcmpun>
 8011eac:	bb70      	cbnz	r0, 8011f0c <_printf_float+0xc4>
 8011eae:	f04f 32ff 	mov.w	r2, #4294967295
 8011eb2:	4ba3      	ldr	r3, [pc, #652]	; (8012140 <_printf_float+0x2f8>)
 8011eb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011eb8:	f7ee fe3a 	bl	8000b30 <__aeabi_dcmple>
 8011ebc:	bb30      	cbnz	r0, 8011f0c <_printf_float+0xc4>
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	4640      	mov	r0, r8
 8011ec4:	4649      	mov	r1, r9
 8011ec6:	f7ee fe29 	bl	8000b1c <__aeabi_dcmplt>
 8011eca:	b110      	cbz	r0, 8011ed2 <_printf_float+0x8a>
 8011ecc:	232d      	movs	r3, #45	; 0x2d
 8011ece:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ed2:	4a9c      	ldr	r2, [pc, #624]	; (8012144 <_printf_float+0x2fc>)
 8011ed4:	4b9c      	ldr	r3, [pc, #624]	; (8012148 <_printf_float+0x300>)
 8011ed6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011eda:	bf8c      	ite	hi
 8011edc:	4690      	movhi	r8, r2
 8011ede:	4698      	movls	r8, r3
 8011ee0:	2303      	movs	r3, #3
 8011ee2:	f02b 0204 	bic.w	r2, fp, #4
 8011ee6:	6123      	str	r3, [r4, #16]
 8011ee8:	6022      	str	r2, [r4, #0]
 8011eea:	f04f 0900 	mov.w	r9, #0
 8011eee:	9700      	str	r7, [sp, #0]
 8011ef0:	4633      	mov	r3, r6
 8011ef2:	aa0b      	add	r2, sp, #44	; 0x2c
 8011ef4:	4621      	mov	r1, r4
 8011ef6:	4628      	mov	r0, r5
 8011ef8:	f000 f9e6 	bl	80122c8 <_printf_common>
 8011efc:	3001      	adds	r0, #1
 8011efe:	f040 808d 	bne.w	801201c <_printf_float+0x1d4>
 8011f02:	f04f 30ff 	mov.w	r0, #4294967295
 8011f06:	b00d      	add	sp, #52	; 0x34
 8011f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f0c:	4642      	mov	r2, r8
 8011f0e:	464b      	mov	r3, r9
 8011f10:	4640      	mov	r0, r8
 8011f12:	4649      	mov	r1, r9
 8011f14:	f7ee fe2a 	bl	8000b6c <__aeabi_dcmpun>
 8011f18:	b110      	cbz	r0, 8011f20 <_printf_float+0xd8>
 8011f1a:	4a8c      	ldr	r2, [pc, #560]	; (801214c <_printf_float+0x304>)
 8011f1c:	4b8c      	ldr	r3, [pc, #560]	; (8012150 <_printf_float+0x308>)
 8011f1e:	e7da      	b.n	8011ed6 <_printf_float+0x8e>
 8011f20:	6861      	ldr	r1, [r4, #4]
 8011f22:	1c4b      	adds	r3, r1, #1
 8011f24:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011f28:	a80a      	add	r0, sp, #40	; 0x28
 8011f2a:	d13e      	bne.n	8011faa <_printf_float+0x162>
 8011f2c:	2306      	movs	r3, #6
 8011f2e:	6063      	str	r3, [r4, #4]
 8011f30:	2300      	movs	r3, #0
 8011f32:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011f36:	ab09      	add	r3, sp, #36	; 0x24
 8011f38:	9300      	str	r3, [sp, #0]
 8011f3a:	ec49 8b10 	vmov	d0, r8, r9
 8011f3e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011f42:	6022      	str	r2, [r4, #0]
 8011f44:	f8cd a004 	str.w	sl, [sp, #4]
 8011f48:	6861      	ldr	r1, [r4, #4]
 8011f4a:	4628      	mov	r0, r5
 8011f4c:	f7ff fee8 	bl	8011d20 <__cvt>
 8011f50:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011f54:	2b47      	cmp	r3, #71	; 0x47
 8011f56:	4680      	mov	r8, r0
 8011f58:	d109      	bne.n	8011f6e <_printf_float+0x126>
 8011f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f5c:	1cd8      	adds	r0, r3, #3
 8011f5e:	db02      	blt.n	8011f66 <_printf_float+0x11e>
 8011f60:	6862      	ldr	r2, [r4, #4]
 8011f62:	4293      	cmp	r3, r2
 8011f64:	dd47      	ble.n	8011ff6 <_printf_float+0x1ae>
 8011f66:	f1aa 0a02 	sub.w	sl, sl, #2
 8011f6a:	fa5f fa8a 	uxtb.w	sl, sl
 8011f6e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011f72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011f74:	d824      	bhi.n	8011fc0 <_printf_float+0x178>
 8011f76:	3901      	subs	r1, #1
 8011f78:	4652      	mov	r2, sl
 8011f7a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8011f7e:	9109      	str	r1, [sp, #36]	; 0x24
 8011f80:	f7ff ff2f 	bl	8011de2 <__exponent>
 8011f84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011f86:	1813      	adds	r3, r2, r0
 8011f88:	2a01      	cmp	r2, #1
 8011f8a:	4681      	mov	r9, r0
 8011f8c:	6123      	str	r3, [r4, #16]
 8011f8e:	dc02      	bgt.n	8011f96 <_printf_float+0x14e>
 8011f90:	6822      	ldr	r2, [r4, #0]
 8011f92:	07d1      	lsls	r1, r2, #31
 8011f94:	d501      	bpl.n	8011f9a <_printf_float+0x152>
 8011f96:	3301      	adds	r3, #1
 8011f98:	6123      	str	r3, [r4, #16]
 8011f9a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d0a5      	beq.n	8011eee <_printf_float+0xa6>
 8011fa2:	232d      	movs	r3, #45	; 0x2d
 8011fa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011fa8:	e7a1      	b.n	8011eee <_printf_float+0xa6>
 8011faa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8011fae:	f000 8177 	beq.w	80122a0 <_printf_float+0x458>
 8011fb2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8011fb6:	d1bb      	bne.n	8011f30 <_printf_float+0xe8>
 8011fb8:	2900      	cmp	r1, #0
 8011fba:	d1b9      	bne.n	8011f30 <_printf_float+0xe8>
 8011fbc:	2301      	movs	r3, #1
 8011fbe:	e7b6      	b.n	8011f2e <_printf_float+0xe6>
 8011fc0:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8011fc4:	d119      	bne.n	8011ffa <_printf_float+0x1b2>
 8011fc6:	2900      	cmp	r1, #0
 8011fc8:	6863      	ldr	r3, [r4, #4]
 8011fca:	dd0c      	ble.n	8011fe6 <_printf_float+0x19e>
 8011fcc:	6121      	str	r1, [r4, #16]
 8011fce:	b913      	cbnz	r3, 8011fd6 <_printf_float+0x18e>
 8011fd0:	6822      	ldr	r2, [r4, #0]
 8011fd2:	07d2      	lsls	r2, r2, #31
 8011fd4:	d502      	bpl.n	8011fdc <_printf_float+0x194>
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	440b      	add	r3, r1
 8011fda:	6123      	str	r3, [r4, #16]
 8011fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fde:	65a3      	str	r3, [r4, #88]	; 0x58
 8011fe0:	f04f 0900 	mov.w	r9, #0
 8011fe4:	e7d9      	b.n	8011f9a <_printf_float+0x152>
 8011fe6:	b913      	cbnz	r3, 8011fee <_printf_float+0x1a6>
 8011fe8:	6822      	ldr	r2, [r4, #0]
 8011fea:	07d0      	lsls	r0, r2, #31
 8011fec:	d501      	bpl.n	8011ff2 <_printf_float+0x1aa>
 8011fee:	3302      	adds	r3, #2
 8011ff0:	e7f3      	b.n	8011fda <_printf_float+0x192>
 8011ff2:	2301      	movs	r3, #1
 8011ff4:	e7f1      	b.n	8011fda <_printf_float+0x192>
 8011ff6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011ffa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011ffe:	4293      	cmp	r3, r2
 8012000:	db05      	blt.n	801200e <_printf_float+0x1c6>
 8012002:	6822      	ldr	r2, [r4, #0]
 8012004:	6123      	str	r3, [r4, #16]
 8012006:	07d1      	lsls	r1, r2, #31
 8012008:	d5e8      	bpl.n	8011fdc <_printf_float+0x194>
 801200a:	3301      	adds	r3, #1
 801200c:	e7e5      	b.n	8011fda <_printf_float+0x192>
 801200e:	2b00      	cmp	r3, #0
 8012010:	bfd4      	ite	le
 8012012:	f1c3 0302 	rsble	r3, r3, #2
 8012016:	2301      	movgt	r3, #1
 8012018:	4413      	add	r3, r2
 801201a:	e7de      	b.n	8011fda <_printf_float+0x192>
 801201c:	6823      	ldr	r3, [r4, #0]
 801201e:	055a      	lsls	r2, r3, #21
 8012020:	d407      	bmi.n	8012032 <_printf_float+0x1ea>
 8012022:	6923      	ldr	r3, [r4, #16]
 8012024:	4642      	mov	r2, r8
 8012026:	4631      	mov	r1, r6
 8012028:	4628      	mov	r0, r5
 801202a:	47b8      	blx	r7
 801202c:	3001      	adds	r0, #1
 801202e:	d12b      	bne.n	8012088 <_printf_float+0x240>
 8012030:	e767      	b.n	8011f02 <_printf_float+0xba>
 8012032:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012036:	f240 80dc 	bls.w	80121f2 <_printf_float+0x3aa>
 801203a:	2200      	movs	r2, #0
 801203c:	2300      	movs	r3, #0
 801203e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012042:	f7ee fd61 	bl	8000b08 <__aeabi_dcmpeq>
 8012046:	2800      	cmp	r0, #0
 8012048:	d033      	beq.n	80120b2 <_printf_float+0x26a>
 801204a:	2301      	movs	r3, #1
 801204c:	4a41      	ldr	r2, [pc, #260]	; (8012154 <_printf_float+0x30c>)
 801204e:	4631      	mov	r1, r6
 8012050:	4628      	mov	r0, r5
 8012052:	47b8      	blx	r7
 8012054:	3001      	adds	r0, #1
 8012056:	f43f af54 	beq.w	8011f02 <_printf_float+0xba>
 801205a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801205e:	429a      	cmp	r2, r3
 8012060:	db02      	blt.n	8012068 <_printf_float+0x220>
 8012062:	6823      	ldr	r3, [r4, #0]
 8012064:	07d8      	lsls	r0, r3, #31
 8012066:	d50f      	bpl.n	8012088 <_printf_float+0x240>
 8012068:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801206c:	4631      	mov	r1, r6
 801206e:	4628      	mov	r0, r5
 8012070:	47b8      	blx	r7
 8012072:	3001      	adds	r0, #1
 8012074:	f43f af45 	beq.w	8011f02 <_printf_float+0xba>
 8012078:	f04f 0800 	mov.w	r8, #0
 801207c:	f104 091a 	add.w	r9, r4, #26
 8012080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012082:	3b01      	subs	r3, #1
 8012084:	4543      	cmp	r3, r8
 8012086:	dc09      	bgt.n	801209c <_printf_float+0x254>
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	079b      	lsls	r3, r3, #30
 801208c:	f100 8103 	bmi.w	8012296 <_printf_float+0x44e>
 8012090:	68e0      	ldr	r0, [r4, #12]
 8012092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012094:	4298      	cmp	r0, r3
 8012096:	bfb8      	it	lt
 8012098:	4618      	movlt	r0, r3
 801209a:	e734      	b.n	8011f06 <_printf_float+0xbe>
 801209c:	2301      	movs	r3, #1
 801209e:	464a      	mov	r2, r9
 80120a0:	4631      	mov	r1, r6
 80120a2:	4628      	mov	r0, r5
 80120a4:	47b8      	blx	r7
 80120a6:	3001      	adds	r0, #1
 80120a8:	f43f af2b 	beq.w	8011f02 <_printf_float+0xba>
 80120ac:	f108 0801 	add.w	r8, r8, #1
 80120b0:	e7e6      	b.n	8012080 <_printf_float+0x238>
 80120b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	dc2b      	bgt.n	8012110 <_printf_float+0x2c8>
 80120b8:	2301      	movs	r3, #1
 80120ba:	4a26      	ldr	r2, [pc, #152]	; (8012154 <_printf_float+0x30c>)
 80120bc:	4631      	mov	r1, r6
 80120be:	4628      	mov	r0, r5
 80120c0:	47b8      	blx	r7
 80120c2:	3001      	adds	r0, #1
 80120c4:	f43f af1d 	beq.w	8011f02 <_printf_float+0xba>
 80120c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120ca:	b923      	cbnz	r3, 80120d6 <_printf_float+0x28e>
 80120cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ce:	b913      	cbnz	r3, 80120d6 <_printf_float+0x28e>
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	07d9      	lsls	r1, r3, #31
 80120d4:	d5d8      	bpl.n	8012088 <_printf_float+0x240>
 80120d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120da:	4631      	mov	r1, r6
 80120dc:	4628      	mov	r0, r5
 80120de:	47b8      	blx	r7
 80120e0:	3001      	adds	r0, #1
 80120e2:	f43f af0e 	beq.w	8011f02 <_printf_float+0xba>
 80120e6:	f04f 0900 	mov.w	r9, #0
 80120ea:	f104 0a1a 	add.w	sl, r4, #26
 80120ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120f0:	425b      	negs	r3, r3
 80120f2:	454b      	cmp	r3, r9
 80120f4:	dc01      	bgt.n	80120fa <_printf_float+0x2b2>
 80120f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120f8:	e794      	b.n	8012024 <_printf_float+0x1dc>
 80120fa:	2301      	movs	r3, #1
 80120fc:	4652      	mov	r2, sl
 80120fe:	4631      	mov	r1, r6
 8012100:	4628      	mov	r0, r5
 8012102:	47b8      	blx	r7
 8012104:	3001      	adds	r0, #1
 8012106:	f43f aefc 	beq.w	8011f02 <_printf_float+0xba>
 801210a:	f109 0901 	add.w	r9, r9, #1
 801210e:	e7ee      	b.n	80120ee <_printf_float+0x2a6>
 8012110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012114:	429a      	cmp	r2, r3
 8012116:	bfa8      	it	ge
 8012118:	461a      	movge	r2, r3
 801211a:	2a00      	cmp	r2, #0
 801211c:	4691      	mov	r9, r2
 801211e:	dd07      	ble.n	8012130 <_printf_float+0x2e8>
 8012120:	4613      	mov	r3, r2
 8012122:	4631      	mov	r1, r6
 8012124:	4642      	mov	r2, r8
 8012126:	4628      	mov	r0, r5
 8012128:	47b8      	blx	r7
 801212a:	3001      	adds	r0, #1
 801212c:	f43f aee9 	beq.w	8011f02 <_printf_float+0xba>
 8012130:	f104 031a 	add.w	r3, r4, #26
 8012134:	f04f 0b00 	mov.w	fp, #0
 8012138:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801213c:	9306      	str	r3, [sp, #24]
 801213e:	e015      	b.n	801216c <_printf_float+0x324>
 8012140:	7fefffff 	.word	0x7fefffff
 8012144:	0801764d 	.word	0x0801764d
 8012148:	08017649 	.word	0x08017649
 801214c:	08017655 	.word	0x08017655
 8012150:	08017651 	.word	0x08017651
 8012154:	08017659 	.word	0x08017659
 8012158:	2301      	movs	r3, #1
 801215a:	9a06      	ldr	r2, [sp, #24]
 801215c:	4631      	mov	r1, r6
 801215e:	4628      	mov	r0, r5
 8012160:	47b8      	blx	r7
 8012162:	3001      	adds	r0, #1
 8012164:	f43f aecd 	beq.w	8011f02 <_printf_float+0xba>
 8012168:	f10b 0b01 	add.w	fp, fp, #1
 801216c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8012170:	ebaa 0309 	sub.w	r3, sl, r9
 8012174:	455b      	cmp	r3, fp
 8012176:	dcef      	bgt.n	8012158 <_printf_float+0x310>
 8012178:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801217c:	429a      	cmp	r2, r3
 801217e:	44d0      	add	r8, sl
 8012180:	db15      	blt.n	80121ae <_printf_float+0x366>
 8012182:	6823      	ldr	r3, [r4, #0]
 8012184:	07da      	lsls	r2, r3, #31
 8012186:	d412      	bmi.n	80121ae <_printf_float+0x366>
 8012188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801218a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801218c:	eba3 020a 	sub.w	r2, r3, sl
 8012190:	eba3 0a01 	sub.w	sl, r3, r1
 8012194:	4592      	cmp	sl, r2
 8012196:	bfa8      	it	ge
 8012198:	4692      	movge	sl, r2
 801219a:	f1ba 0f00 	cmp.w	sl, #0
 801219e:	dc0e      	bgt.n	80121be <_printf_float+0x376>
 80121a0:	f04f 0800 	mov.w	r8, #0
 80121a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80121a8:	f104 091a 	add.w	r9, r4, #26
 80121ac:	e019      	b.n	80121e2 <_printf_float+0x39a>
 80121ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121b2:	4631      	mov	r1, r6
 80121b4:	4628      	mov	r0, r5
 80121b6:	47b8      	blx	r7
 80121b8:	3001      	adds	r0, #1
 80121ba:	d1e5      	bne.n	8012188 <_printf_float+0x340>
 80121bc:	e6a1      	b.n	8011f02 <_printf_float+0xba>
 80121be:	4653      	mov	r3, sl
 80121c0:	4642      	mov	r2, r8
 80121c2:	4631      	mov	r1, r6
 80121c4:	4628      	mov	r0, r5
 80121c6:	47b8      	blx	r7
 80121c8:	3001      	adds	r0, #1
 80121ca:	d1e9      	bne.n	80121a0 <_printf_float+0x358>
 80121cc:	e699      	b.n	8011f02 <_printf_float+0xba>
 80121ce:	2301      	movs	r3, #1
 80121d0:	464a      	mov	r2, r9
 80121d2:	4631      	mov	r1, r6
 80121d4:	4628      	mov	r0, r5
 80121d6:	47b8      	blx	r7
 80121d8:	3001      	adds	r0, #1
 80121da:	f43f ae92 	beq.w	8011f02 <_printf_float+0xba>
 80121de:	f108 0801 	add.w	r8, r8, #1
 80121e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121e6:	1a9b      	subs	r3, r3, r2
 80121e8:	eba3 030a 	sub.w	r3, r3, sl
 80121ec:	4543      	cmp	r3, r8
 80121ee:	dcee      	bgt.n	80121ce <_printf_float+0x386>
 80121f0:	e74a      	b.n	8012088 <_printf_float+0x240>
 80121f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121f4:	2a01      	cmp	r2, #1
 80121f6:	dc01      	bgt.n	80121fc <_printf_float+0x3b4>
 80121f8:	07db      	lsls	r3, r3, #31
 80121fa:	d53a      	bpl.n	8012272 <_printf_float+0x42a>
 80121fc:	2301      	movs	r3, #1
 80121fe:	4642      	mov	r2, r8
 8012200:	4631      	mov	r1, r6
 8012202:	4628      	mov	r0, r5
 8012204:	47b8      	blx	r7
 8012206:	3001      	adds	r0, #1
 8012208:	f43f ae7b 	beq.w	8011f02 <_printf_float+0xba>
 801220c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012210:	4631      	mov	r1, r6
 8012212:	4628      	mov	r0, r5
 8012214:	47b8      	blx	r7
 8012216:	3001      	adds	r0, #1
 8012218:	f108 0801 	add.w	r8, r8, #1
 801221c:	f43f ae71 	beq.w	8011f02 <_printf_float+0xba>
 8012220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012222:	2200      	movs	r2, #0
 8012224:	f103 3aff 	add.w	sl, r3, #4294967295
 8012228:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801222c:	2300      	movs	r3, #0
 801222e:	f7ee fc6b 	bl	8000b08 <__aeabi_dcmpeq>
 8012232:	b9c8      	cbnz	r0, 8012268 <_printf_float+0x420>
 8012234:	4653      	mov	r3, sl
 8012236:	4642      	mov	r2, r8
 8012238:	4631      	mov	r1, r6
 801223a:	4628      	mov	r0, r5
 801223c:	47b8      	blx	r7
 801223e:	3001      	adds	r0, #1
 8012240:	d10e      	bne.n	8012260 <_printf_float+0x418>
 8012242:	e65e      	b.n	8011f02 <_printf_float+0xba>
 8012244:	2301      	movs	r3, #1
 8012246:	4652      	mov	r2, sl
 8012248:	4631      	mov	r1, r6
 801224a:	4628      	mov	r0, r5
 801224c:	47b8      	blx	r7
 801224e:	3001      	adds	r0, #1
 8012250:	f43f ae57 	beq.w	8011f02 <_printf_float+0xba>
 8012254:	f108 0801 	add.w	r8, r8, #1
 8012258:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801225a:	3b01      	subs	r3, #1
 801225c:	4543      	cmp	r3, r8
 801225e:	dcf1      	bgt.n	8012244 <_printf_float+0x3fc>
 8012260:	464b      	mov	r3, r9
 8012262:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012266:	e6de      	b.n	8012026 <_printf_float+0x1de>
 8012268:	f04f 0800 	mov.w	r8, #0
 801226c:	f104 0a1a 	add.w	sl, r4, #26
 8012270:	e7f2      	b.n	8012258 <_printf_float+0x410>
 8012272:	2301      	movs	r3, #1
 8012274:	e7df      	b.n	8012236 <_printf_float+0x3ee>
 8012276:	2301      	movs	r3, #1
 8012278:	464a      	mov	r2, r9
 801227a:	4631      	mov	r1, r6
 801227c:	4628      	mov	r0, r5
 801227e:	47b8      	blx	r7
 8012280:	3001      	adds	r0, #1
 8012282:	f43f ae3e 	beq.w	8011f02 <_printf_float+0xba>
 8012286:	f108 0801 	add.w	r8, r8, #1
 801228a:	68e3      	ldr	r3, [r4, #12]
 801228c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801228e:	1a9b      	subs	r3, r3, r2
 8012290:	4543      	cmp	r3, r8
 8012292:	dcf0      	bgt.n	8012276 <_printf_float+0x42e>
 8012294:	e6fc      	b.n	8012090 <_printf_float+0x248>
 8012296:	f04f 0800 	mov.w	r8, #0
 801229a:	f104 0919 	add.w	r9, r4, #25
 801229e:	e7f4      	b.n	801228a <_printf_float+0x442>
 80122a0:	2900      	cmp	r1, #0
 80122a2:	f43f ae8b 	beq.w	8011fbc <_printf_float+0x174>
 80122a6:	2300      	movs	r3, #0
 80122a8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80122ac:	ab09      	add	r3, sp, #36	; 0x24
 80122ae:	9300      	str	r3, [sp, #0]
 80122b0:	ec49 8b10 	vmov	d0, r8, r9
 80122b4:	6022      	str	r2, [r4, #0]
 80122b6:	f8cd a004 	str.w	sl, [sp, #4]
 80122ba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80122be:	4628      	mov	r0, r5
 80122c0:	f7ff fd2e 	bl	8011d20 <__cvt>
 80122c4:	4680      	mov	r8, r0
 80122c6:	e648      	b.n	8011f5a <_printf_float+0x112>

080122c8 <_printf_common>:
 80122c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122cc:	4691      	mov	r9, r2
 80122ce:	461f      	mov	r7, r3
 80122d0:	688a      	ldr	r2, [r1, #8]
 80122d2:	690b      	ldr	r3, [r1, #16]
 80122d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80122d8:	4293      	cmp	r3, r2
 80122da:	bfb8      	it	lt
 80122dc:	4613      	movlt	r3, r2
 80122de:	f8c9 3000 	str.w	r3, [r9]
 80122e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80122e6:	4606      	mov	r6, r0
 80122e8:	460c      	mov	r4, r1
 80122ea:	b112      	cbz	r2, 80122f2 <_printf_common+0x2a>
 80122ec:	3301      	adds	r3, #1
 80122ee:	f8c9 3000 	str.w	r3, [r9]
 80122f2:	6823      	ldr	r3, [r4, #0]
 80122f4:	0699      	lsls	r1, r3, #26
 80122f6:	bf42      	ittt	mi
 80122f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80122fc:	3302      	addmi	r3, #2
 80122fe:	f8c9 3000 	strmi.w	r3, [r9]
 8012302:	6825      	ldr	r5, [r4, #0]
 8012304:	f015 0506 	ands.w	r5, r5, #6
 8012308:	d107      	bne.n	801231a <_printf_common+0x52>
 801230a:	f104 0a19 	add.w	sl, r4, #25
 801230e:	68e3      	ldr	r3, [r4, #12]
 8012310:	f8d9 2000 	ldr.w	r2, [r9]
 8012314:	1a9b      	subs	r3, r3, r2
 8012316:	42ab      	cmp	r3, r5
 8012318:	dc28      	bgt.n	801236c <_printf_common+0xa4>
 801231a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801231e:	6822      	ldr	r2, [r4, #0]
 8012320:	3300      	adds	r3, #0
 8012322:	bf18      	it	ne
 8012324:	2301      	movne	r3, #1
 8012326:	0692      	lsls	r2, r2, #26
 8012328:	d42d      	bmi.n	8012386 <_printf_common+0xbe>
 801232a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801232e:	4639      	mov	r1, r7
 8012330:	4630      	mov	r0, r6
 8012332:	47c0      	blx	r8
 8012334:	3001      	adds	r0, #1
 8012336:	d020      	beq.n	801237a <_printf_common+0xb2>
 8012338:	6823      	ldr	r3, [r4, #0]
 801233a:	68e5      	ldr	r5, [r4, #12]
 801233c:	f8d9 2000 	ldr.w	r2, [r9]
 8012340:	f003 0306 	and.w	r3, r3, #6
 8012344:	2b04      	cmp	r3, #4
 8012346:	bf08      	it	eq
 8012348:	1aad      	subeq	r5, r5, r2
 801234a:	68a3      	ldr	r3, [r4, #8]
 801234c:	6922      	ldr	r2, [r4, #16]
 801234e:	bf0c      	ite	eq
 8012350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012354:	2500      	movne	r5, #0
 8012356:	4293      	cmp	r3, r2
 8012358:	bfc4      	itt	gt
 801235a:	1a9b      	subgt	r3, r3, r2
 801235c:	18ed      	addgt	r5, r5, r3
 801235e:	f04f 0900 	mov.w	r9, #0
 8012362:	341a      	adds	r4, #26
 8012364:	454d      	cmp	r5, r9
 8012366:	d11a      	bne.n	801239e <_printf_common+0xd6>
 8012368:	2000      	movs	r0, #0
 801236a:	e008      	b.n	801237e <_printf_common+0xb6>
 801236c:	2301      	movs	r3, #1
 801236e:	4652      	mov	r2, sl
 8012370:	4639      	mov	r1, r7
 8012372:	4630      	mov	r0, r6
 8012374:	47c0      	blx	r8
 8012376:	3001      	adds	r0, #1
 8012378:	d103      	bne.n	8012382 <_printf_common+0xba>
 801237a:	f04f 30ff 	mov.w	r0, #4294967295
 801237e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012382:	3501      	adds	r5, #1
 8012384:	e7c3      	b.n	801230e <_printf_common+0x46>
 8012386:	18e1      	adds	r1, r4, r3
 8012388:	1c5a      	adds	r2, r3, #1
 801238a:	2030      	movs	r0, #48	; 0x30
 801238c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012390:	4422      	add	r2, r4
 8012392:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012396:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801239a:	3302      	adds	r3, #2
 801239c:	e7c5      	b.n	801232a <_printf_common+0x62>
 801239e:	2301      	movs	r3, #1
 80123a0:	4622      	mov	r2, r4
 80123a2:	4639      	mov	r1, r7
 80123a4:	4630      	mov	r0, r6
 80123a6:	47c0      	blx	r8
 80123a8:	3001      	adds	r0, #1
 80123aa:	d0e6      	beq.n	801237a <_printf_common+0xb2>
 80123ac:	f109 0901 	add.w	r9, r9, #1
 80123b0:	e7d8      	b.n	8012364 <_printf_common+0x9c>
	...

080123b4 <_printf_i>:
 80123b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80123b8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80123bc:	460c      	mov	r4, r1
 80123be:	7e09      	ldrb	r1, [r1, #24]
 80123c0:	b085      	sub	sp, #20
 80123c2:	296e      	cmp	r1, #110	; 0x6e
 80123c4:	4617      	mov	r7, r2
 80123c6:	4606      	mov	r6, r0
 80123c8:	4698      	mov	r8, r3
 80123ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80123cc:	f000 80b3 	beq.w	8012536 <_printf_i+0x182>
 80123d0:	d822      	bhi.n	8012418 <_printf_i+0x64>
 80123d2:	2963      	cmp	r1, #99	; 0x63
 80123d4:	d036      	beq.n	8012444 <_printf_i+0x90>
 80123d6:	d80a      	bhi.n	80123ee <_printf_i+0x3a>
 80123d8:	2900      	cmp	r1, #0
 80123da:	f000 80b9 	beq.w	8012550 <_printf_i+0x19c>
 80123de:	2958      	cmp	r1, #88	; 0x58
 80123e0:	f000 8083 	beq.w	80124ea <_printf_i+0x136>
 80123e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123e8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80123ec:	e032      	b.n	8012454 <_printf_i+0xa0>
 80123ee:	2964      	cmp	r1, #100	; 0x64
 80123f0:	d001      	beq.n	80123f6 <_printf_i+0x42>
 80123f2:	2969      	cmp	r1, #105	; 0x69
 80123f4:	d1f6      	bne.n	80123e4 <_printf_i+0x30>
 80123f6:	6820      	ldr	r0, [r4, #0]
 80123f8:	6813      	ldr	r3, [r2, #0]
 80123fa:	0605      	lsls	r5, r0, #24
 80123fc:	f103 0104 	add.w	r1, r3, #4
 8012400:	d52a      	bpl.n	8012458 <_printf_i+0xa4>
 8012402:	681b      	ldr	r3, [r3, #0]
 8012404:	6011      	str	r1, [r2, #0]
 8012406:	2b00      	cmp	r3, #0
 8012408:	da03      	bge.n	8012412 <_printf_i+0x5e>
 801240a:	222d      	movs	r2, #45	; 0x2d
 801240c:	425b      	negs	r3, r3
 801240e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012412:	486f      	ldr	r0, [pc, #444]	; (80125d0 <_printf_i+0x21c>)
 8012414:	220a      	movs	r2, #10
 8012416:	e039      	b.n	801248c <_printf_i+0xd8>
 8012418:	2973      	cmp	r1, #115	; 0x73
 801241a:	f000 809d 	beq.w	8012558 <_printf_i+0x1a4>
 801241e:	d808      	bhi.n	8012432 <_printf_i+0x7e>
 8012420:	296f      	cmp	r1, #111	; 0x6f
 8012422:	d020      	beq.n	8012466 <_printf_i+0xb2>
 8012424:	2970      	cmp	r1, #112	; 0x70
 8012426:	d1dd      	bne.n	80123e4 <_printf_i+0x30>
 8012428:	6823      	ldr	r3, [r4, #0]
 801242a:	f043 0320 	orr.w	r3, r3, #32
 801242e:	6023      	str	r3, [r4, #0]
 8012430:	e003      	b.n	801243a <_printf_i+0x86>
 8012432:	2975      	cmp	r1, #117	; 0x75
 8012434:	d017      	beq.n	8012466 <_printf_i+0xb2>
 8012436:	2978      	cmp	r1, #120	; 0x78
 8012438:	d1d4      	bne.n	80123e4 <_printf_i+0x30>
 801243a:	2378      	movs	r3, #120	; 0x78
 801243c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012440:	4864      	ldr	r0, [pc, #400]	; (80125d4 <_printf_i+0x220>)
 8012442:	e055      	b.n	80124f0 <_printf_i+0x13c>
 8012444:	6813      	ldr	r3, [r2, #0]
 8012446:	1d19      	adds	r1, r3, #4
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	6011      	str	r1, [r2, #0]
 801244c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012454:	2301      	movs	r3, #1
 8012456:	e08c      	b.n	8012572 <_printf_i+0x1be>
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	6011      	str	r1, [r2, #0]
 801245c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012460:	bf18      	it	ne
 8012462:	b21b      	sxthne	r3, r3
 8012464:	e7cf      	b.n	8012406 <_printf_i+0x52>
 8012466:	6813      	ldr	r3, [r2, #0]
 8012468:	6825      	ldr	r5, [r4, #0]
 801246a:	1d18      	adds	r0, r3, #4
 801246c:	6010      	str	r0, [r2, #0]
 801246e:	0628      	lsls	r0, r5, #24
 8012470:	d501      	bpl.n	8012476 <_printf_i+0xc2>
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	e002      	b.n	801247c <_printf_i+0xc8>
 8012476:	0668      	lsls	r0, r5, #25
 8012478:	d5fb      	bpl.n	8012472 <_printf_i+0xbe>
 801247a:	881b      	ldrh	r3, [r3, #0]
 801247c:	4854      	ldr	r0, [pc, #336]	; (80125d0 <_printf_i+0x21c>)
 801247e:	296f      	cmp	r1, #111	; 0x6f
 8012480:	bf14      	ite	ne
 8012482:	220a      	movne	r2, #10
 8012484:	2208      	moveq	r2, #8
 8012486:	2100      	movs	r1, #0
 8012488:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801248c:	6865      	ldr	r5, [r4, #4]
 801248e:	60a5      	str	r5, [r4, #8]
 8012490:	2d00      	cmp	r5, #0
 8012492:	f2c0 8095 	blt.w	80125c0 <_printf_i+0x20c>
 8012496:	6821      	ldr	r1, [r4, #0]
 8012498:	f021 0104 	bic.w	r1, r1, #4
 801249c:	6021      	str	r1, [r4, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d13d      	bne.n	801251e <_printf_i+0x16a>
 80124a2:	2d00      	cmp	r5, #0
 80124a4:	f040 808e 	bne.w	80125c4 <_printf_i+0x210>
 80124a8:	4665      	mov	r5, ip
 80124aa:	2a08      	cmp	r2, #8
 80124ac:	d10b      	bne.n	80124c6 <_printf_i+0x112>
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	07db      	lsls	r3, r3, #31
 80124b2:	d508      	bpl.n	80124c6 <_printf_i+0x112>
 80124b4:	6923      	ldr	r3, [r4, #16]
 80124b6:	6862      	ldr	r2, [r4, #4]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	bfde      	ittt	le
 80124bc:	2330      	movle	r3, #48	; 0x30
 80124be:	f805 3c01 	strble.w	r3, [r5, #-1]
 80124c2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80124c6:	ebac 0305 	sub.w	r3, ip, r5
 80124ca:	6123      	str	r3, [r4, #16]
 80124cc:	f8cd 8000 	str.w	r8, [sp]
 80124d0:	463b      	mov	r3, r7
 80124d2:	aa03      	add	r2, sp, #12
 80124d4:	4621      	mov	r1, r4
 80124d6:	4630      	mov	r0, r6
 80124d8:	f7ff fef6 	bl	80122c8 <_printf_common>
 80124dc:	3001      	adds	r0, #1
 80124de:	d14d      	bne.n	801257c <_printf_i+0x1c8>
 80124e0:	f04f 30ff 	mov.w	r0, #4294967295
 80124e4:	b005      	add	sp, #20
 80124e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80124ea:	4839      	ldr	r0, [pc, #228]	; (80125d0 <_printf_i+0x21c>)
 80124ec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80124f0:	6813      	ldr	r3, [r2, #0]
 80124f2:	6821      	ldr	r1, [r4, #0]
 80124f4:	1d1d      	adds	r5, r3, #4
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	6015      	str	r5, [r2, #0]
 80124fa:	060a      	lsls	r2, r1, #24
 80124fc:	d50b      	bpl.n	8012516 <_printf_i+0x162>
 80124fe:	07ca      	lsls	r2, r1, #31
 8012500:	bf44      	itt	mi
 8012502:	f041 0120 	orrmi.w	r1, r1, #32
 8012506:	6021      	strmi	r1, [r4, #0]
 8012508:	b91b      	cbnz	r3, 8012512 <_printf_i+0x15e>
 801250a:	6822      	ldr	r2, [r4, #0]
 801250c:	f022 0220 	bic.w	r2, r2, #32
 8012510:	6022      	str	r2, [r4, #0]
 8012512:	2210      	movs	r2, #16
 8012514:	e7b7      	b.n	8012486 <_printf_i+0xd2>
 8012516:	064d      	lsls	r5, r1, #25
 8012518:	bf48      	it	mi
 801251a:	b29b      	uxthmi	r3, r3
 801251c:	e7ef      	b.n	80124fe <_printf_i+0x14a>
 801251e:	4665      	mov	r5, ip
 8012520:	fbb3 f1f2 	udiv	r1, r3, r2
 8012524:	fb02 3311 	mls	r3, r2, r1, r3
 8012528:	5cc3      	ldrb	r3, [r0, r3]
 801252a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801252e:	460b      	mov	r3, r1
 8012530:	2900      	cmp	r1, #0
 8012532:	d1f5      	bne.n	8012520 <_printf_i+0x16c>
 8012534:	e7b9      	b.n	80124aa <_printf_i+0xf6>
 8012536:	6813      	ldr	r3, [r2, #0]
 8012538:	6825      	ldr	r5, [r4, #0]
 801253a:	6961      	ldr	r1, [r4, #20]
 801253c:	1d18      	adds	r0, r3, #4
 801253e:	6010      	str	r0, [r2, #0]
 8012540:	0628      	lsls	r0, r5, #24
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	d501      	bpl.n	801254a <_printf_i+0x196>
 8012546:	6019      	str	r1, [r3, #0]
 8012548:	e002      	b.n	8012550 <_printf_i+0x19c>
 801254a:	066a      	lsls	r2, r5, #25
 801254c:	d5fb      	bpl.n	8012546 <_printf_i+0x192>
 801254e:	8019      	strh	r1, [r3, #0]
 8012550:	2300      	movs	r3, #0
 8012552:	6123      	str	r3, [r4, #16]
 8012554:	4665      	mov	r5, ip
 8012556:	e7b9      	b.n	80124cc <_printf_i+0x118>
 8012558:	6813      	ldr	r3, [r2, #0]
 801255a:	1d19      	adds	r1, r3, #4
 801255c:	6011      	str	r1, [r2, #0]
 801255e:	681d      	ldr	r5, [r3, #0]
 8012560:	6862      	ldr	r2, [r4, #4]
 8012562:	2100      	movs	r1, #0
 8012564:	4628      	mov	r0, r5
 8012566:	f7ed fe5b 	bl	8000220 <memchr>
 801256a:	b108      	cbz	r0, 8012570 <_printf_i+0x1bc>
 801256c:	1b40      	subs	r0, r0, r5
 801256e:	6060      	str	r0, [r4, #4]
 8012570:	6863      	ldr	r3, [r4, #4]
 8012572:	6123      	str	r3, [r4, #16]
 8012574:	2300      	movs	r3, #0
 8012576:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801257a:	e7a7      	b.n	80124cc <_printf_i+0x118>
 801257c:	6923      	ldr	r3, [r4, #16]
 801257e:	462a      	mov	r2, r5
 8012580:	4639      	mov	r1, r7
 8012582:	4630      	mov	r0, r6
 8012584:	47c0      	blx	r8
 8012586:	3001      	adds	r0, #1
 8012588:	d0aa      	beq.n	80124e0 <_printf_i+0x12c>
 801258a:	6823      	ldr	r3, [r4, #0]
 801258c:	079b      	lsls	r3, r3, #30
 801258e:	d413      	bmi.n	80125b8 <_printf_i+0x204>
 8012590:	68e0      	ldr	r0, [r4, #12]
 8012592:	9b03      	ldr	r3, [sp, #12]
 8012594:	4298      	cmp	r0, r3
 8012596:	bfb8      	it	lt
 8012598:	4618      	movlt	r0, r3
 801259a:	e7a3      	b.n	80124e4 <_printf_i+0x130>
 801259c:	2301      	movs	r3, #1
 801259e:	464a      	mov	r2, r9
 80125a0:	4639      	mov	r1, r7
 80125a2:	4630      	mov	r0, r6
 80125a4:	47c0      	blx	r8
 80125a6:	3001      	adds	r0, #1
 80125a8:	d09a      	beq.n	80124e0 <_printf_i+0x12c>
 80125aa:	3501      	adds	r5, #1
 80125ac:	68e3      	ldr	r3, [r4, #12]
 80125ae:	9a03      	ldr	r2, [sp, #12]
 80125b0:	1a9b      	subs	r3, r3, r2
 80125b2:	42ab      	cmp	r3, r5
 80125b4:	dcf2      	bgt.n	801259c <_printf_i+0x1e8>
 80125b6:	e7eb      	b.n	8012590 <_printf_i+0x1dc>
 80125b8:	2500      	movs	r5, #0
 80125ba:	f104 0919 	add.w	r9, r4, #25
 80125be:	e7f5      	b.n	80125ac <_printf_i+0x1f8>
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1ac      	bne.n	801251e <_printf_i+0x16a>
 80125c4:	7803      	ldrb	r3, [r0, #0]
 80125c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125ce:	e76c      	b.n	80124aa <_printf_i+0xf6>
 80125d0:	0801765b 	.word	0x0801765b
 80125d4:	0801766c 	.word	0x0801766c

080125d8 <copysign>:
 80125d8:	ec51 0b10 	vmov	r0, r1, d0
 80125dc:	ee11 0a90 	vmov	r0, s3
 80125e0:	ee10 2a10 	vmov	r2, s0
 80125e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80125e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80125ec:	ea41 0300 	orr.w	r3, r1, r0
 80125f0:	ec43 2b10 	vmov	d0, r2, r3
 80125f4:	4770      	bx	lr
	...

080125f8 <_sbrk_r>:
 80125f8:	b538      	push	{r3, r4, r5, lr}
 80125fa:	4c06      	ldr	r4, [pc, #24]	; (8012614 <_sbrk_r+0x1c>)
 80125fc:	2300      	movs	r3, #0
 80125fe:	4605      	mov	r5, r0
 8012600:	4608      	mov	r0, r1
 8012602:	6023      	str	r3, [r4, #0]
 8012604:	f7f2 fe40 	bl	8005288 <_sbrk>
 8012608:	1c43      	adds	r3, r0, #1
 801260a:	d102      	bne.n	8012612 <_sbrk_r+0x1a>
 801260c:	6823      	ldr	r3, [r4, #0]
 801260e:	b103      	cbz	r3, 8012612 <_sbrk_r+0x1a>
 8012610:	602b      	str	r3, [r5, #0]
 8012612:	bd38      	pop	{r3, r4, r5, pc}
 8012614:	200065a8 	.word	0x200065a8

08012618 <sniprintf>:
 8012618:	b40c      	push	{r2, r3}
 801261a:	b530      	push	{r4, r5, lr}
 801261c:	4b17      	ldr	r3, [pc, #92]	; (801267c <sniprintf+0x64>)
 801261e:	1e0c      	subs	r4, r1, #0
 8012620:	b09d      	sub	sp, #116	; 0x74
 8012622:	681d      	ldr	r5, [r3, #0]
 8012624:	da08      	bge.n	8012638 <sniprintf+0x20>
 8012626:	238b      	movs	r3, #139	; 0x8b
 8012628:	602b      	str	r3, [r5, #0]
 801262a:	f04f 30ff 	mov.w	r0, #4294967295
 801262e:	b01d      	add	sp, #116	; 0x74
 8012630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012634:	b002      	add	sp, #8
 8012636:	4770      	bx	lr
 8012638:	f44f 7302 	mov.w	r3, #520	; 0x208
 801263c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012640:	bf14      	ite	ne
 8012642:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012646:	4623      	moveq	r3, r4
 8012648:	9304      	str	r3, [sp, #16]
 801264a:	9307      	str	r3, [sp, #28]
 801264c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012650:	9002      	str	r0, [sp, #8]
 8012652:	9006      	str	r0, [sp, #24]
 8012654:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012658:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801265a:	ab21      	add	r3, sp, #132	; 0x84
 801265c:	a902      	add	r1, sp, #8
 801265e:	4628      	mov	r0, r5
 8012660:	9301      	str	r3, [sp, #4]
 8012662:	f001 fd23 	bl	80140ac <_svfiprintf_r>
 8012666:	1c43      	adds	r3, r0, #1
 8012668:	bfbc      	itt	lt
 801266a:	238b      	movlt	r3, #139	; 0x8b
 801266c:	602b      	strlt	r3, [r5, #0]
 801266e:	2c00      	cmp	r4, #0
 8012670:	d0dd      	beq.n	801262e <sniprintf+0x16>
 8012672:	9b02      	ldr	r3, [sp, #8]
 8012674:	2200      	movs	r2, #0
 8012676:	701a      	strb	r2, [r3, #0]
 8012678:	e7d9      	b.n	801262e <sniprintf+0x16>
 801267a:	bf00      	nop
 801267c:	20000430 	.word	0x20000430

08012680 <siprintf>:
 8012680:	b40e      	push	{r1, r2, r3}
 8012682:	b500      	push	{lr}
 8012684:	b09c      	sub	sp, #112	; 0x70
 8012686:	ab1d      	add	r3, sp, #116	; 0x74
 8012688:	9002      	str	r0, [sp, #8]
 801268a:	9006      	str	r0, [sp, #24]
 801268c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012690:	4809      	ldr	r0, [pc, #36]	; (80126b8 <siprintf+0x38>)
 8012692:	9107      	str	r1, [sp, #28]
 8012694:	9104      	str	r1, [sp, #16]
 8012696:	4909      	ldr	r1, [pc, #36]	; (80126bc <siprintf+0x3c>)
 8012698:	f853 2b04 	ldr.w	r2, [r3], #4
 801269c:	9105      	str	r1, [sp, #20]
 801269e:	6800      	ldr	r0, [r0, #0]
 80126a0:	9301      	str	r3, [sp, #4]
 80126a2:	a902      	add	r1, sp, #8
 80126a4:	f001 fd02 	bl	80140ac <_svfiprintf_r>
 80126a8:	9b02      	ldr	r3, [sp, #8]
 80126aa:	2200      	movs	r2, #0
 80126ac:	701a      	strb	r2, [r3, #0]
 80126ae:	b01c      	add	sp, #112	; 0x70
 80126b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80126b4:	b003      	add	sp, #12
 80126b6:	4770      	bx	lr
 80126b8:	20000430 	.word	0x20000430
 80126bc:	ffff0208 	.word	0xffff0208

080126c0 <__sread>:
 80126c0:	b510      	push	{r4, lr}
 80126c2:	460c      	mov	r4, r1
 80126c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126c8:	f001 fde8 	bl	801429c <_read_r>
 80126cc:	2800      	cmp	r0, #0
 80126ce:	bfab      	itete	ge
 80126d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80126d2:	89a3      	ldrhlt	r3, [r4, #12]
 80126d4:	181b      	addge	r3, r3, r0
 80126d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80126da:	bfac      	ite	ge
 80126dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80126de:	81a3      	strhlt	r3, [r4, #12]
 80126e0:	bd10      	pop	{r4, pc}

080126e2 <__swrite>:
 80126e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e6:	461f      	mov	r7, r3
 80126e8:	898b      	ldrh	r3, [r1, #12]
 80126ea:	05db      	lsls	r3, r3, #23
 80126ec:	4605      	mov	r5, r0
 80126ee:	460c      	mov	r4, r1
 80126f0:	4616      	mov	r6, r2
 80126f2:	d505      	bpl.n	8012700 <__swrite+0x1e>
 80126f4:	2302      	movs	r3, #2
 80126f6:	2200      	movs	r2, #0
 80126f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126fc:	f001 f8dc 	bl	80138b8 <_lseek_r>
 8012700:	89a3      	ldrh	r3, [r4, #12]
 8012702:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012706:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801270a:	81a3      	strh	r3, [r4, #12]
 801270c:	4632      	mov	r2, r6
 801270e:	463b      	mov	r3, r7
 8012710:	4628      	mov	r0, r5
 8012712:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012716:	f000 b869 	b.w	80127ec <_write_r>

0801271a <__sseek>:
 801271a:	b510      	push	{r4, lr}
 801271c:	460c      	mov	r4, r1
 801271e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012722:	f001 f8c9 	bl	80138b8 <_lseek_r>
 8012726:	1c43      	adds	r3, r0, #1
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	bf15      	itete	ne
 801272c:	6560      	strne	r0, [r4, #84]	; 0x54
 801272e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012732:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012736:	81a3      	strheq	r3, [r4, #12]
 8012738:	bf18      	it	ne
 801273a:	81a3      	strhne	r3, [r4, #12]
 801273c:	bd10      	pop	{r4, pc}

0801273e <__sclose>:
 801273e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012742:	f000 b8db 	b.w	80128fc <_close_r>
	...

08012748 <__swbuf_r>:
 8012748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801274a:	460e      	mov	r6, r1
 801274c:	4614      	mov	r4, r2
 801274e:	4605      	mov	r5, r0
 8012750:	b118      	cbz	r0, 801275a <__swbuf_r+0x12>
 8012752:	6983      	ldr	r3, [r0, #24]
 8012754:	b90b      	cbnz	r3, 801275a <__swbuf_r+0x12>
 8012756:	f001 f817 	bl	8013788 <__sinit>
 801275a:	4b21      	ldr	r3, [pc, #132]	; (80127e0 <__swbuf_r+0x98>)
 801275c:	429c      	cmp	r4, r3
 801275e:	d12a      	bne.n	80127b6 <__swbuf_r+0x6e>
 8012760:	686c      	ldr	r4, [r5, #4]
 8012762:	69a3      	ldr	r3, [r4, #24]
 8012764:	60a3      	str	r3, [r4, #8]
 8012766:	89a3      	ldrh	r3, [r4, #12]
 8012768:	071a      	lsls	r2, r3, #28
 801276a:	d52e      	bpl.n	80127ca <__swbuf_r+0x82>
 801276c:	6923      	ldr	r3, [r4, #16]
 801276e:	b363      	cbz	r3, 80127ca <__swbuf_r+0x82>
 8012770:	6923      	ldr	r3, [r4, #16]
 8012772:	6820      	ldr	r0, [r4, #0]
 8012774:	1ac0      	subs	r0, r0, r3
 8012776:	6963      	ldr	r3, [r4, #20]
 8012778:	b2f6      	uxtb	r6, r6
 801277a:	4283      	cmp	r3, r0
 801277c:	4637      	mov	r7, r6
 801277e:	dc04      	bgt.n	801278a <__swbuf_r+0x42>
 8012780:	4621      	mov	r1, r4
 8012782:	4628      	mov	r0, r5
 8012784:	f000 ff96 	bl	80136b4 <_fflush_r>
 8012788:	bb28      	cbnz	r0, 80127d6 <__swbuf_r+0x8e>
 801278a:	68a3      	ldr	r3, [r4, #8]
 801278c:	3b01      	subs	r3, #1
 801278e:	60a3      	str	r3, [r4, #8]
 8012790:	6823      	ldr	r3, [r4, #0]
 8012792:	1c5a      	adds	r2, r3, #1
 8012794:	6022      	str	r2, [r4, #0]
 8012796:	701e      	strb	r6, [r3, #0]
 8012798:	6963      	ldr	r3, [r4, #20]
 801279a:	3001      	adds	r0, #1
 801279c:	4283      	cmp	r3, r0
 801279e:	d004      	beq.n	80127aa <__swbuf_r+0x62>
 80127a0:	89a3      	ldrh	r3, [r4, #12]
 80127a2:	07db      	lsls	r3, r3, #31
 80127a4:	d519      	bpl.n	80127da <__swbuf_r+0x92>
 80127a6:	2e0a      	cmp	r6, #10
 80127a8:	d117      	bne.n	80127da <__swbuf_r+0x92>
 80127aa:	4621      	mov	r1, r4
 80127ac:	4628      	mov	r0, r5
 80127ae:	f000 ff81 	bl	80136b4 <_fflush_r>
 80127b2:	b190      	cbz	r0, 80127da <__swbuf_r+0x92>
 80127b4:	e00f      	b.n	80127d6 <__swbuf_r+0x8e>
 80127b6:	4b0b      	ldr	r3, [pc, #44]	; (80127e4 <__swbuf_r+0x9c>)
 80127b8:	429c      	cmp	r4, r3
 80127ba:	d101      	bne.n	80127c0 <__swbuf_r+0x78>
 80127bc:	68ac      	ldr	r4, [r5, #8]
 80127be:	e7d0      	b.n	8012762 <__swbuf_r+0x1a>
 80127c0:	4b09      	ldr	r3, [pc, #36]	; (80127e8 <__swbuf_r+0xa0>)
 80127c2:	429c      	cmp	r4, r3
 80127c4:	bf08      	it	eq
 80127c6:	68ec      	ldreq	r4, [r5, #12]
 80127c8:	e7cb      	b.n	8012762 <__swbuf_r+0x1a>
 80127ca:	4621      	mov	r1, r4
 80127cc:	4628      	mov	r0, r5
 80127ce:	f000 f81f 	bl	8012810 <__swsetup_r>
 80127d2:	2800      	cmp	r0, #0
 80127d4:	d0cc      	beq.n	8012770 <__swbuf_r+0x28>
 80127d6:	f04f 37ff 	mov.w	r7, #4294967295
 80127da:	4638      	mov	r0, r7
 80127dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127de:	bf00      	nop
 80127e0:	080176ac 	.word	0x080176ac
 80127e4:	080176cc 	.word	0x080176cc
 80127e8:	0801768c 	.word	0x0801768c

080127ec <_write_r>:
 80127ec:	b538      	push	{r3, r4, r5, lr}
 80127ee:	4c07      	ldr	r4, [pc, #28]	; (801280c <_write_r+0x20>)
 80127f0:	4605      	mov	r5, r0
 80127f2:	4608      	mov	r0, r1
 80127f4:	4611      	mov	r1, r2
 80127f6:	2200      	movs	r2, #0
 80127f8:	6022      	str	r2, [r4, #0]
 80127fa:	461a      	mov	r2, r3
 80127fc:	f7f2 fcf3 	bl	80051e6 <_write>
 8012800:	1c43      	adds	r3, r0, #1
 8012802:	d102      	bne.n	801280a <_write_r+0x1e>
 8012804:	6823      	ldr	r3, [r4, #0]
 8012806:	b103      	cbz	r3, 801280a <_write_r+0x1e>
 8012808:	602b      	str	r3, [r5, #0]
 801280a:	bd38      	pop	{r3, r4, r5, pc}
 801280c:	200065a8 	.word	0x200065a8

08012810 <__swsetup_r>:
 8012810:	4b32      	ldr	r3, [pc, #200]	; (80128dc <__swsetup_r+0xcc>)
 8012812:	b570      	push	{r4, r5, r6, lr}
 8012814:	681d      	ldr	r5, [r3, #0]
 8012816:	4606      	mov	r6, r0
 8012818:	460c      	mov	r4, r1
 801281a:	b125      	cbz	r5, 8012826 <__swsetup_r+0x16>
 801281c:	69ab      	ldr	r3, [r5, #24]
 801281e:	b913      	cbnz	r3, 8012826 <__swsetup_r+0x16>
 8012820:	4628      	mov	r0, r5
 8012822:	f000 ffb1 	bl	8013788 <__sinit>
 8012826:	4b2e      	ldr	r3, [pc, #184]	; (80128e0 <__swsetup_r+0xd0>)
 8012828:	429c      	cmp	r4, r3
 801282a:	d10f      	bne.n	801284c <__swsetup_r+0x3c>
 801282c:	686c      	ldr	r4, [r5, #4]
 801282e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012832:	b29a      	uxth	r2, r3
 8012834:	0715      	lsls	r5, r2, #28
 8012836:	d42c      	bmi.n	8012892 <__swsetup_r+0x82>
 8012838:	06d0      	lsls	r0, r2, #27
 801283a:	d411      	bmi.n	8012860 <__swsetup_r+0x50>
 801283c:	2209      	movs	r2, #9
 801283e:	6032      	str	r2, [r6, #0]
 8012840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012844:	81a3      	strh	r3, [r4, #12]
 8012846:	f04f 30ff 	mov.w	r0, #4294967295
 801284a:	e03e      	b.n	80128ca <__swsetup_r+0xba>
 801284c:	4b25      	ldr	r3, [pc, #148]	; (80128e4 <__swsetup_r+0xd4>)
 801284e:	429c      	cmp	r4, r3
 8012850:	d101      	bne.n	8012856 <__swsetup_r+0x46>
 8012852:	68ac      	ldr	r4, [r5, #8]
 8012854:	e7eb      	b.n	801282e <__swsetup_r+0x1e>
 8012856:	4b24      	ldr	r3, [pc, #144]	; (80128e8 <__swsetup_r+0xd8>)
 8012858:	429c      	cmp	r4, r3
 801285a:	bf08      	it	eq
 801285c:	68ec      	ldreq	r4, [r5, #12]
 801285e:	e7e6      	b.n	801282e <__swsetup_r+0x1e>
 8012860:	0751      	lsls	r1, r2, #29
 8012862:	d512      	bpl.n	801288a <__swsetup_r+0x7a>
 8012864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012866:	b141      	cbz	r1, 801287a <__swsetup_r+0x6a>
 8012868:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801286c:	4299      	cmp	r1, r3
 801286e:	d002      	beq.n	8012876 <__swsetup_r+0x66>
 8012870:	4630      	mov	r0, r6
 8012872:	f7ff f86d 	bl	8011950 <_free_r>
 8012876:	2300      	movs	r3, #0
 8012878:	6363      	str	r3, [r4, #52]	; 0x34
 801287a:	89a3      	ldrh	r3, [r4, #12]
 801287c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012880:	81a3      	strh	r3, [r4, #12]
 8012882:	2300      	movs	r3, #0
 8012884:	6063      	str	r3, [r4, #4]
 8012886:	6923      	ldr	r3, [r4, #16]
 8012888:	6023      	str	r3, [r4, #0]
 801288a:	89a3      	ldrh	r3, [r4, #12]
 801288c:	f043 0308 	orr.w	r3, r3, #8
 8012890:	81a3      	strh	r3, [r4, #12]
 8012892:	6923      	ldr	r3, [r4, #16]
 8012894:	b94b      	cbnz	r3, 80128aa <__swsetup_r+0x9a>
 8012896:	89a3      	ldrh	r3, [r4, #12]
 8012898:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801289c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128a0:	d003      	beq.n	80128aa <__swsetup_r+0x9a>
 80128a2:	4621      	mov	r1, r4
 80128a4:	4630      	mov	r0, r6
 80128a6:	f001 f83d 	bl	8013924 <__smakebuf_r>
 80128aa:	89a2      	ldrh	r2, [r4, #12]
 80128ac:	f012 0301 	ands.w	r3, r2, #1
 80128b0:	d00c      	beq.n	80128cc <__swsetup_r+0xbc>
 80128b2:	2300      	movs	r3, #0
 80128b4:	60a3      	str	r3, [r4, #8]
 80128b6:	6963      	ldr	r3, [r4, #20]
 80128b8:	425b      	negs	r3, r3
 80128ba:	61a3      	str	r3, [r4, #24]
 80128bc:	6923      	ldr	r3, [r4, #16]
 80128be:	b953      	cbnz	r3, 80128d6 <__swsetup_r+0xc6>
 80128c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80128c8:	d1ba      	bne.n	8012840 <__swsetup_r+0x30>
 80128ca:	bd70      	pop	{r4, r5, r6, pc}
 80128cc:	0792      	lsls	r2, r2, #30
 80128ce:	bf58      	it	pl
 80128d0:	6963      	ldrpl	r3, [r4, #20]
 80128d2:	60a3      	str	r3, [r4, #8]
 80128d4:	e7f2      	b.n	80128bc <__swsetup_r+0xac>
 80128d6:	2000      	movs	r0, #0
 80128d8:	e7f7      	b.n	80128ca <__swsetup_r+0xba>
 80128da:	bf00      	nop
 80128dc:	20000430 	.word	0x20000430
 80128e0:	080176ac 	.word	0x080176ac
 80128e4:	080176cc 	.word	0x080176cc
 80128e8:	0801768c 	.word	0x0801768c

080128ec <abort>:
 80128ec:	b508      	push	{r3, lr}
 80128ee:	2006      	movs	r0, #6
 80128f0:	f001 fd0e 	bl	8014310 <raise>
 80128f4:	2001      	movs	r0, #1
 80128f6:	f7f2 fc4f 	bl	8005198 <_exit>
	...

080128fc <_close_r>:
 80128fc:	b538      	push	{r3, r4, r5, lr}
 80128fe:	4c06      	ldr	r4, [pc, #24]	; (8012918 <_close_r+0x1c>)
 8012900:	2300      	movs	r3, #0
 8012902:	4605      	mov	r5, r0
 8012904:	4608      	mov	r0, r1
 8012906:	6023      	str	r3, [r4, #0]
 8012908:	f7f2 fc89 	bl	800521e <_close>
 801290c:	1c43      	adds	r3, r0, #1
 801290e:	d102      	bne.n	8012916 <_close_r+0x1a>
 8012910:	6823      	ldr	r3, [r4, #0]
 8012912:	b103      	cbz	r3, 8012916 <_close_r+0x1a>
 8012914:	602b      	str	r3, [r5, #0]
 8012916:	bd38      	pop	{r3, r4, r5, pc}
 8012918:	200065a8 	.word	0x200065a8

0801291c <quorem>:
 801291c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012920:	6903      	ldr	r3, [r0, #16]
 8012922:	690c      	ldr	r4, [r1, #16]
 8012924:	42a3      	cmp	r3, r4
 8012926:	4680      	mov	r8, r0
 8012928:	f2c0 8082 	blt.w	8012a30 <quorem+0x114>
 801292c:	3c01      	subs	r4, #1
 801292e:	f101 0714 	add.w	r7, r1, #20
 8012932:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012936:	f100 0614 	add.w	r6, r0, #20
 801293a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801293e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012942:	eb06 030c 	add.w	r3, r6, ip
 8012946:	3501      	adds	r5, #1
 8012948:	eb07 090c 	add.w	r9, r7, ip
 801294c:	9301      	str	r3, [sp, #4]
 801294e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012952:	b395      	cbz	r5, 80129ba <quorem+0x9e>
 8012954:	f04f 0a00 	mov.w	sl, #0
 8012958:	4638      	mov	r0, r7
 801295a:	46b6      	mov	lr, r6
 801295c:	46d3      	mov	fp, sl
 801295e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012962:	b293      	uxth	r3, r2
 8012964:	fb05 a303 	mla	r3, r5, r3, sl
 8012968:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801296c:	b29b      	uxth	r3, r3
 801296e:	ebab 0303 	sub.w	r3, fp, r3
 8012972:	0c12      	lsrs	r2, r2, #16
 8012974:	f8de b000 	ldr.w	fp, [lr]
 8012978:	fb05 a202 	mla	r2, r5, r2, sl
 801297c:	fa13 f38b 	uxtah	r3, r3, fp
 8012980:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012984:	fa1f fb82 	uxth.w	fp, r2
 8012988:	f8de 2000 	ldr.w	r2, [lr]
 801298c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012994:	b29b      	uxth	r3, r3
 8012996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801299a:	4581      	cmp	r9, r0
 801299c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80129a0:	f84e 3b04 	str.w	r3, [lr], #4
 80129a4:	d2db      	bcs.n	801295e <quorem+0x42>
 80129a6:	f856 300c 	ldr.w	r3, [r6, ip]
 80129aa:	b933      	cbnz	r3, 80129ba <quorem+0x9e>
 80129ac:	9b01      	ldr	r3, [sp, #4]
 80129ae:	3b04      	subs	r3, #4
 80129b0:	429e      	cmp	r6, r3
 80129b2:	461a      	mov	r2, r3
 80129b4:	d330      	bcc.n	8012a18 <quorem+0xfc>
 80129b6:	f8c8 4010 	str.w	r4, [r8, #16]
 80129ba:	4640      	mov	r0, r8
 80129bc:	f001 fa22 	bl	8013e04 <__mcmp>
 80129c0:	2800      	cmp	r0, #0
 80129c2:	db25      	blt.n	8012a10 <quorem+0xf4>
 80129c4:	3501      	adds	r5, #1
 80129c6:	4630      	mov	r0, r6
 80129c8:	f04f 0c00 	mov.w	ip, #0
 80129cc:	f857 2b04 	ldr.w	r2, [r7], #4
 80129d0:	f8d0 e000 	ldr.w	lr, [r0]
 80129d4:	b293      	uxth	r3, r2
 80129d6:	ebac 0303 	sub.w	r3, ip, r3
 80129da:	0c12      	lsrs	r2, r2, #16
 80129dc:	fa13 f38e 	uxtah	r3, r3, lr
 80129e0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80129e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80129e8:	b29b      	uxth	r3, r3
 80129ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80129ee:	45b9      	cmp	r9, r7
 80129f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80129f4:	f840 3b04 	str.w	r3, [r0], #4
 80129f8:	d2e8      	bcs.n	80129cc <quorem+0xb0>
 80129fa:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80129fe:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012a02:	b92a      	cbnz	r2, 8012a10 <quorem+0xf4>
 8012a04:	3b04      	subs	r3, #4
 8012a06:	429e      	cmp	r6, r3
 8012a08:	461a      	mov	r2, r3
 8012a0a:	d30b      	bcc.n	8012a24 <quorem+0x108>
 8012a0c:	f8c8 4010 	str.w	r4, [r8, #16]
 8012a10:	4628      	mov	r0, r5
 8012a12:	b003      	add	sp, #12
 8012a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a18:	6812      	ldr	r2, [r2, #0]
 8012a1a:	3b04      	subs	r3, #4
 8012a1c:	2a00      	cmp	r2, #0
 8012a1e:	d1ca      	bne.n	80129b6 <quorem+0x9a>
 8012a20:	3c01      	subs	r4, #1
 8012a22:	e7c5      	b.n	80129b0 <quorem+0x94>
 8012a24:	6812      	ldr	r2, [r2, #0]
 8012a26:	3b04      	subs	r3, #4
 8012a28:	2a00      	cmp	r2, #0
 8012a2a:	d1ef      	bne.n	8012a0c <quorem+0xf0>
 8012a2c:	3c01      	subs	r4, #1
 8012a2e:	e7ea      	b.n	8012a06 <quorem+0xea>
 8012a30:	2000      	movs	r0, #0
 8012a32:	e7ee      	b.n	8012a12 <quorem+0xf6>
 8012a34:	0000      	movs	r0, r0
	...

08012a38 <_dtoa_r>:
 8012a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a3c:	ec57 6b10 	vmov	r6, r7, d0
 8012a40:	b097      	sub	sp, #92	; 0x5c
 8012a42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012a44:	9106      	str	r1, [sp, #24]
 8012a46:	4604      	mov	r4, r0
 8012a48:	920b      	str	r2, [sp, #44]	; 0x2c
 8012a4a:	9312      	str	r3, [sp, #72]	; 0x48
 8012a4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012a50:	e9cd 6700 	strd	r6, r7, [sp]
 8012a54:	b93d      	cbnz	r5, 8012a66 <_dtoa_r+0x2e>
 8012a56:	2010      	movs	r0, #16
 8012a58:	f7fe ff56 	bl	8011908 <malloc>
 8012a5c:	6260      	str	r0, [r4, #36]	; 0x24
 8012a5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012a62:	6005      	str	r5, [r0, #0]
 8012a64:	60c5      	str	r5, [r0, #12]
 8012a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a68:	6819      	ldr	r1, [r3, #0]
 8012a6a:	b151      	cbz	r1, 8012a82 <_dtoa_r+0x4a>
 8012a6c:	685a      	ldr	r2, [r3, #4]
 8012a6e:	604a      	str	r2, [r1, #4]
 8012a70:	2301      	movs	r3, #1
 8012a72:	4093      	lsls	r3, r2
 8012a74:	608b      	str	r3, [r1, #8]
 8012a76:	4620      	mov	r0, r4
 8012a78:	f000 ffe3 	bl	8013a42 <_Bfree>
 8012a7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012a7e:	2200      	movs	r2, #0
 8012a80:	601a      	str	r2, [r3, #0]
 8012a82:	1e3b      	subs	r3, r7, #0
 8012a84:	bfbb      	ittet	lt
 8012a86:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012a8a:	9301      	strlt	r3, [sp, #4]
 8012a8c:	2300      	movge	r3, #0
 8012a8e:	2201      	movlt	r2, #1
 8012a90:	bfac      	ite	ge
 8012a92:	f8c8 3000 	strge.w	r3, [r8]
 8012a96:	f8c8 2000 	strlt.w	r2, [r8]
 8012a9a:	4baf      	ldr	r3, [pc, #700]	; (8012d58 <_dtoa_r+0x320>)
 8012a9c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012aa0:	ea33 0308 	bics.w	r3, r3, r8
 8012aa4:	d114      	bne.n	8012ad0 <_dtoa_r+0x98>
 8012aa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012aa8:	f242 730f 	movw	r3, #9999	; 0x270f
 8012aac:	6013      	str	r3, [r2, #0]
 8012aae:	9b00      	ldr	r3, [sp, #0]
 8012ab0:	b923      	cbnz	r3, 8012abc <_dtoa_r+0x84>
 8012ab2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	f000 8542 	beq.w	8013540 <_dtoa_r+0xb08>
 8012abc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012abe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012d6c <_dtoa_r+0x334>
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f000 8544 	beq.w	8013550 <_dtoa_r+0xb18>
 8012ac8:	f10b 0303 	add.w	r3, fp, #3
 8012acc:	f000 bd3e 	b.w	801354c <_dtoa_r+0xb14>
 8012ad0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	2300      	movs	r3, #0
 8012ad8:	4630      	mov	r0, r6
 8012ada:	4639      	mov	r1, r7
 8012adc:	f7ee f814 	bl	8000b08 <__aeabi_dcmpeq>
 8012ae0:	4681      	mov	r9, r0
 8012ae2:	b168      	cbz	r0, 8012b00 <_dtoa_r+0xc8>
 8012ae4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	6013      	str	r3, [r2, #0]
 8012aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	f000 8524 	beq.w	801353a <_dtoa_r+0xb02>
 8012af2:	4b9a      	ldr	r3, [pc, #616]	; (8012d5c <_dtoa_r+0x324>)
 8012af4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012af6:	f103 3bff 	add.w	fp, r3, #4294967295
 8012afa:	6013      	str	r3, [r2, #0]
 8012afc:	f000 bd28 	b.w	8013550 <_dtoa_r+0xb18>
 8012b00:	aa14      	add	r2, sp, #80	; 0x50
 8012b02:	a915      	add	r1, sp, #84	; 0x54
 8012b04:	ec47 6b10 	vmov	d0, r6, r7
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f001 f9f2 	bl	8013ef2 <__d2b>
 8012b0e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012b12:	9004      	str	r0, [sp, #16]
 8012b14:	2d00      	cmp	r5, #0
 8012b16:	d07c      	beq.n	8012c12 <_dtoa_r+0x1da>
 8012b18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012b1c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8012b20:	46b2      	mov	sl, r6
 8012b22:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8012b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012b2a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012b2e:	2200      	movs	r2, #0
 8012b30:	4b8b      	ldr	r3, [pc, #556]	; (8012d60 <_dtoa_r+0x328>)
 8012b32:	4650      	mov	r0, sl
 8012b34:	4659      	mov	r1, fp
 8012b36:	f7ed fbc7 	bl	80002c8 <__aeabi_dsub>
 8012b3a:	a381      	add	r3, pc, #516	; (adr r3, 8012d40 <_dtoa_r+0x308>)
 8012b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b40:	f7ed fd7a 	bl	8000638 <__aeabi_dmul>
 8012b44:	a380      	add	r3, pc, #512	; (adr r3, 8012d48 <_dtoa_r+0x310>)
 8012b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b4a:	f7ed fbbf 	bl	80002cc <__adddf3>
 8012b4e:	4606      	mov	r6, r0
 8012b50:	4628      	mov	r0, r5
 8012b52:	460f      	mov	r7, r1
 8012b54:	f7ed fd06 	bl	8000564 <__aeabi_i2d>
 8012b58:	a37d      	add	r3, pc, #500	; (adr r3, 8012d50 <_dtoa_r+0x318>)
 8012b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b5e:	f7ed fd6b 	bl	8000638 <__aeabi_dmul>
 8012b62:	4602      	mov	r2, r0
 8012b64:	460b      	mov	r3, r1
 8012b66:	4630      	mov	r0, r6
 8012b68:	4639      	mov	r1, r7
 8012b6a:	f7ed fbaf 	bl	80002cc <__adddf3>
 8012b6e:	4606      	mov	r6, r0
 8012b70:	460f      	mov	r7, r1
 8012b72:	f7ee f811 	bl	8000b98 <__aeabi_d2iz>
 8012b76:	2200      	movs	r2, #0
 8012b78:	4682      	mov	sl, r0
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	4630      	mov	r0, r6
 8012b7e:	4639      	mov	r1, r7
 8012b80:	f7ed ffcc 	bl	8000b1c <__aeabi_dcmplt>
 8012b84:	b148      	cbz	r0, 8012b9a <_dtoa_r+0x162>
 8012b86:	4650      	mov	r0, sl
 8012b88:	f7ed fcec 	bl	8000564 <__aeabi_i2d>
 8012b8c:	4632      	mov	r2, r6
 8012b8e:	463b      	mov	r3, r7
 8012b90:	f7ed ffba 	bl	8000b08 <__aeabi_dcmpeq>
 8012b94:	b908      	cbnz	r0, 8012b9a <_dtoa_r+0x162>
 8012b96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012b9a:	f1ba 0f16 	cmp.w	sl, #22
 8012b9e:	d859      	bhi.n	8012c54 <_dtoa_r+0x21c>
 8012ba0:	4970      	ldr	r1, [pc, #448]	; (8012d64 <_dtoa_r+0x32c>)
 8012ba2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012ba6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012baa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012bae:	f7ed ffd3 	bl	8000b58 <__aeabi_dcmpgt>
 8012bb2:	2800      	cmp	r0, #0
 8012bb4:	d050      	beq.n	8012c58 <_dtoa_r+0x220>
 8012bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012bba:	2300      	movs	r3, #0
 8012bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8012bbe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012bc0:	1b5d      	subs	r5, r3, r5
 8012bc2:	f1b5 0801 	subs.w	r8, r5, #1
 8012bc6:	bf49      	itett	mi
 8012bc8:	f1c5 0301 	rsbmi	r3, r5, #1
 8012bcc:	2300      	movpl	r3, #0
 8012bce:	9305      	strmi	r3, [sp, #20]
 8012bd0:	f04f 0800 	movmi.w	r8, #0
 8012bd4:	bf58      	it	pl
 8012bd6:	9305      	strpl	r3, [sp, #20]
 8012bd8:	f1ba 0f00 	cmp.w	sl, #0
 8012bdc:	db3e      	blt.n	8012c5c <_dtoa_r+0x224>
 8012bde:	2300      	movs	r3, #0
 8012be0:	44d0      	add	r8, sl
 8012be2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8012be6:	9307      	str	r3, [sp, #28]
 8012be8:	9b06      	ldr	r3, [sp, #24]
 8012bea:	2b09      	cmp	r3, #9
 8012bec:	f200 8090 	bhi.w	8012d10 <_dtoa_r+0x2d8>
 8012bf0:	2b05      	cmp	r3, #5
 8012bf2:	bfc4      	itt	gt
 8012bf4:	3b04      	subgt	r3, #4
 8012bf6:	9306      	strgt	r3, [sp, #24]
 8012bf8:	9b06      	ldr	r3, [sp, #24]
 8012bfa:	f1a3 0302 	sub.w	r3, r3, #2
 8012bfe:	bfcc      	ite	gt
 8012c00:	2500      	movgt	r5, #0
 8012c02:	2501      	movle	r5, #1
 8012c04:	2b03      	cmp	r3, #3
 8012c06:	f200 808f 	bhi.w	8012d28 <_dtoa_r+0x2f0>
 8012c0a:	e8df f003 	tbb	[pc, r3]
 8012c0e:	7f7d      	.short	0x7f7d
 8012c10:	7131      	.short	0x7131
 8012c12:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8012c16:	441d      	add	r5, r3
 8012c18:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8012c1c:	2820      	cmp	r0, #32
 8012c1e:	dd13      	ble.n	8012c48 <_dtoa_r+0x210>
 8012c20:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8012c24:	9b00      	ldr	r3, [sp, #0]
 8012c26:	fa08 f800 	lsl.w	r8, r8, r0
 8012c2a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012c2e:	fa23 f000 	lsr.w	r0, r3, r0
 8012c32:	ea48 0000 	orr.w	r0, r8, r0
 8012c36:	f7ed fc85 	bl	8000544 <__aeabi_ui2d>
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	4682      	mov	sl, r0
 8012c3e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8012c42:	3d01      	subs	r5, #1
 8012c44:	9313      	str	r3, [sp, #76]	; 0x4c
 8012c46:	e772      	b.n	8012b2e <_dtoa_r+0xf6>
 8012c48:	9b00      	ldr	r3, [sp, #0]
 8012c4a:	f1c0 0020 	rsb	r0, r0, #32
 8012c4e:	fa03 f000 	lsl.w	r0, r3, r0
 8012c52:	e7f0      	b.n	8012c36 <_dtoa_r+0x1fe>
 8012c54:	2301      	movs	r3, #1
 8012c56:	e7b1      	b.n	8012bbc <_dtoa_r+0x184>
 8012c58:	900f      	str	r0, [sp, #60]	; 0x3c
 8012c5a:	e7b0      	b.n	8012bbe <_dtoa_r+0x186>
 8012c5c:	9b05      	ldr	r3, [sp, #20]
 8012c5e:	eba3 030a 	sub.w	r3, r3, sl
 8012c62:	9305      	str	r3, [sp, #20]
 8012c64:	f1ca 0300 	rsb	r3, sl, #0
 8012c68:	9307      	str	r3, [sp, #28]
 8012c6a:	2300      	movs	r3, #0
 8012c6c:	930e      	str	r3, [sp, #56]	; 0x38
 8012c6e:	e7bb      	b.n	8012be8 <_dtoa_r+0x1b0>
 8012c70:	2301      	movs	r3, #1
 8012c72:	930a      	str	r3, [sp, #40]	; 0x28
 8012c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	dd59      	ble.n	8012d2e <_dtoa_r+0x2f6>
 8012c7a:	9302      	str	r3, [sp, #8]
 8012c7c:	4699      	mov	r9, r3
 8012c7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012c80:	2200      	movs	r2, #0
 8012c82:	6072      	str	r2, [r6, #4]
 8012c84:	2204      	movs	r2, #4
 8012c86:	f102 0014 	add.w	r0, r2, #20
 8012c8a:	4298      	cmp	r0, r3
 8012c8c:	6871      	ldr	r1, [r6, #4]
 8012c8e:	d953      	bls.n	8012d38 <_dtoa_r+0x300>
 8012c90:	4620      	mov	r0, r4
 8012c92:	f000 fea2 	bl	80139da <_Balloc>
 8012c96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c98:	6030      	str	r0, [r6, #0]
 8012c9a:	f1b9 0f0e 	cmp.w	r9, #14
 8012c9e:	f8d3 b000 	ldr.w	fp, [r3]
 8012ca2:	f200 80e6 	bhi.w	8012e72 <_dtoa_r+0x43a>
 8012ca6:	2d00      	cmp	r5, #0
 8012ca8:	f000 80e3 	beq.w	8012e72 <_dtoa_r+0x43a>
 8012cac:	ed9d 7b00 	vldr	d7, [sp]
 8012cb0:	f1ba 0f00 	cmp.w	sl, #0
 8012cb4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012cb8:	dd74      	ble.n	8012da4 <_dtoa_r+0x36c>
 8012cba:	4a2a      	ldr	r2, [pc, #168]	; (8012d64 <_dtoa_r+0x32c>)
 8012cbc:	f00a 030f 	and.w	r3, sl, #15
 8012cc0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012cc4:	ed93 7b00 	vldr	d7, [r3]
 8012cc8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8012ccc:	06f0      	lsls	r0, r6, #27
 8012cce:	ed8d 7b08 	vstr	d7, [sp, #32]
 8012cd2:	d565      	bpl.n	8012da0 <_dtoa_r+0x368>
 8012cd4:	4b24      	ldr	r3, [pc, #144]	; (8012d68 <_dtoa_r+0x330>)
 8012cd6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012cda:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012cde:	f7ed fdd5 	bl	800088c <__aeabi_ddiv>
 8012ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8012ce6:	f006 060f 	and.w	r6, r6, #15
 8012cea:	2503      	movs	r5, #3
 8012cec:	4f1e      	ldr	r7, [pc, #120]	; (8012d68 <_dtoa_r+0x330>)
 8012cee:	e04c      	b.n	8012d8a <_dtoa_r+0x352>
 8012cf0:	2301      	movs	r3, #1
 8012cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8012cf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012cf6:	4453      	add	r3, sl
 8012cf8:	f103 0901 	add.w	r9, r3, #1
 8012cfc:	9302      	str	r3, [sp, #8]
 8012cfe:	464b      	mov	r3, r9
 8012d00:	2b01      	cmp	r3, #1
 8012d02:	bfb8      	it	lt
 8012d04:	2301      	movlt	r3, #1
 8012d06:	e7ba      	b.n	8012c7e <_dtoa_r+0x246>
 8012d08:	2300      	movs	r3, #0
 8012d0a:	e7b2      	b.n	8012c72 <_dtoa_r+0x23a>
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	e7f0      	b.n	8012cf2 <_dtoa_r+0x2ba>
 8012d10:	2501      	movs	r5, #1
 8012d12:	2300      	movs	r3, #0
 8012d14:	9306      	str	r3, [sp, #24]
 8012d16:	950a      	str	r5, [sp, #40]	; 0x28
 8012d18:	f04f 33ff 	mov.w	r3, #4294967295
 8012d1c:	9302      	str	r3, [sp, #8]
 8012d1e:	4699      	mov	r9, r3
 8012d20:	2200      	movs	r2, #0
 8012d22:	2312      	movs	r3, #18
 8012d24:	920b      	str	r2, [sp, #44]	; 0x2c
 8012d26:	e7aa      	b.n	8012c7e <_dtoa_r+0x246>
 8012d28:	2301      	movs	r3, #1
 8012d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8012d2c:	e7f4      	b.n	8012d18 <_dtoa_r+0x2e0>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	9302      	str	r3, [sp, #8]
 8012d32:	4699      	mov	r9, r3
 8012d34:	461a      	mov	r2, r3
 8012d36:	e7f5      	b.n	8012d24 <_dtoa_r+0x2ec>
 8012d38:	3101      	adds	r1, #1
 8012d3a:	6071      	str	r1, [r6, #4]
 8012d3c:	0052      	lsls	r2, r2, #1
 8012d3e:	e7a2      	b.n	8012c86 <_dtoa_r+0x24e>
 8012d40:	636f4361 	.word	0x636f4361
 8012d44:	3fd287a7 	.word	0x3fd287a7
 8012d48:	8b60c8b3 	.word	0x8b60c8b3
 8012d4c:	3fc68a28 	.word	0x3fc68a28
 8012d50:	509f79fb 	.word	0x509f79fb
 8012d54:	3fd34413 	.word	0x3fd34413
 8012d58:	7ff00000 	.word	0x7ff00000
 8012d5c:	0801765a 	.word	0x0801765a
 8012d60:	3ff80000 	.word	0x3ff80000
 8012d64:	08017718 	.word	0x08017718
 8012d68:	080176f0 	.word	0x080176f0
 8012d6c:	08017686 	.word	0x08017686
 8012d70:	07f1      	lsls	r1, r6, #31
 8012d72:	d508      	bpl.n	8012d86 <_dtoa_r+0x34e>
 8012d74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012d7c:	f7ed fc5c 	bl	8000638 <__aeabi_dmul>
 8012d80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8012d84:	3501      	adds	r5, #1
 8012d86:	1076      	asrs	r6, r6, #1
 8012d88:	3708      	adds	r7, #8
 8012d8a:	2e00      	cmp	r6, #0
 8012d8c:	d1f0      	bne.n	8012d70 <_dtoa_r+0x338>
 8012d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012d92:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d96:	f7ed fd79 	bl	800088c <__aeabi_ddiv>
 8012d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8012d9e:	e01a      	b.n	8012dd6 <_dtoa_r+0x39e>
 8012da0:	2502      	movs	r5, #2
 8012da2:	e7a3      	b.n	8012cec <_dtoa_r+0x2b4>
 8012da4:	f000 80a0 	beq.w	8012ee8 <_dtoa_r+0x4b0>
 8012da8:	f1ca 0600 	rsb	r6, sl, #0
 8012dac:	4b9f      	ldr	r3, [pc, #636]	; (801302c <_dtoa_r+0x5f4>)
 8012dae:	4fa0      	ldr	r7, [pc, #640]	; (8013030 <_dtoa_r+0x5f8>)
 8012db0:	f006 020f 	and.w	r2, r6, #15
 8012db4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012dc0:	f7ed fc3a 	bl	8000638 <__aeabi_dmul>
 8012dc4:	e9cd 0100 	strd	r0, r1, [sp]
 8012dc8:	1136      	asrs	r6, r6, #4
 8012dca:	2300      	movs	r3, #0
 8012dcc:	2502      	movs	r5, #2
 8012dce:	2e00      	cmp	r6, #0
 8012dd0:	d17f      	bne.n	8012ed2 <_dtoa_r+0x49a>
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d1e1      	bne.n	8012d9a <_dtoa_r+0x362>
 8012dd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	f000 8087 	beq.w	8012eec <_dtoa_r+0x4b4>
 8012dde:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012de2:	2200      	movs	r2, #0
 8012de4:	4b93      	ldr	r3, [pc, #588]	; (8013034 <_dtoa_r+0x5fc>)
 8012de6:	4630      	mov	r0, r6
 8012de8:	4639      	mov	r1, r7
 8012dea:	f7ed fe97 	bl	8000b1c <__aeabi_dcmplt>
 8012dee:	2800      	cmp	r0, #0
 8012df0:	d07c      	beq.n	8012eec <_dtoa_r+0x4b4>
 8012df2:	f1b9 0f00 	cmp.w	r9, #0
 8012df6:	d079      	beq.n	8012eec <_dtoa_r+0x4b4>
 8012df8:	9b02      	ldr	r3, [sp, #8]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	dd35      	ble.n	8012e6a <_dtoa_r+0x432>
 8012dfe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012e02:	9308      	str	r3, [sp, #32]
 8012e04:	4639      	mov	r1, r7
 8012e06:	2200      	movs	r2, #0
 8012e08:	4b8b      	ldr	r3, [pc, #556]	; (8013038 <_dtoa_r+0x600>)
 8012e0a:	4630      	mov	r0, r6
 8012e0c:	f7ed fc14 	bl	8000638 <__aeabi_dmul>
 8012e10:	e9cd 0100 	strd	r0, r1, [sp]
 8012e14:	9f02      	ldr	r7, [sp, #8]
 8012e16:	3501      	adds	r5, #1
 8012e18:	4628      	mov	r0, r5
 8012e1a:	f7ed fba3 	bl	8000564 <__aeabi_i2d>
 8012e1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012e22:	f7ed fc09 	bl	8000638 <__aeabi_dmul>
 8012e26:	2200      	movs	r2, #0
 8012e28:	4b84      	ldr	r3, [pc, #528]	; (801303c <_dtoa_r+0x604>)
 8012e2a:	f7ed fa4f 	bl	80002cc <__adddf3>
 8012e2e:	4605      	mov	r5, r0
 8012e30:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8012e34:	2f00      	cmp	r7, #0
 8012e36:	d15d      	bne.n	8012ef4 <_dtoa_r+0x4bc>
 8012e38:	2200      	movs	r2, #0
 8012e3a:	4b81      	ldr	r3, [pc, #516]	; (8013040 <_dtoa_r+0x608>)
 8012e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e40:	f7ed fa42 	bl	80002c8 <__aeabi_dsub>
 8012e44:	462a      	mov	r2, r5
 8012e46:	4633      	mov	r3, r6
 8012e48:	e9cd 0100 	strd	r0, r1, [sp]
 8012e4c:	f7ed fe84 	bl	8000b58 <__aeabi_dcmpgt>
 8012e50:	2800      	cmp	r0, #0
 8012e52:	f040 8288 	bne.w	8013366 <_dtoa_r+0x92e>
 8012e56:	462a      	mov	r2, r5
 8012e58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012e5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012e60:	f7ed fe5c 	bl	8000b1c <__aeabi_dcmplt>
 8012e64:	2800      	cmp	r0, #0
 8012e66:	f040 827c 	bne.w	8013362 <_dtoa_r+0x92a>
 8012e6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e6e:	e9cd 2300 	strd	r2, r3, [sp]
 8012e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	f2c0 8150 	blt.w	801311a <_dtoa_r+0x6e2>
 8012e7a:	f1ba 0f0e 	cmp.w	sl, #14
 8012e7e:	f300 814c 	bgt.w	801311a <_dtoa_r+0x6e2>
 8012e82:	4b6a      	ldr	r3, [pc, #424]	; (801302c <_dtoa_r+0x5f4>)
 8012e84:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012e88:	ed93 7b00 	vldr	d7, [r3]
 8012e8c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e94:	f280 80d8 	bge.w	8013048 <_dtoa_r+0x610>
 8012e98:	f1b9 0f00 	cmp.w	r9, #0
 8012e9c:	f300 80d4 	bgt.w	8013048 <_dtoa_r+0x610>
 8012ea0:	f040 825e 	bne.w	8013360 <_dtoa_r+0x928>
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	4b66      	ldr	r3, [pc, #408]	; (8013040 <_dtoa_r+0x608>)
 8012ea8:	ec51 0b17 	vmov	r0, r1, d7
 8012eac:	f7ed fbc4 	bl	8000638 <__aeabi_dmul>
 8012eb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012eb4:	f7ed fe46 	bl	8000b44 <__aeabi_dcmpge>
 8012eb8:	464f      	mov	r7, r9
 8012eba:	464e      	mov	r6, r9
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	f040 8234 	bne.w	801332a <_dtoa_r+0x8f2>
 8012ec2:	2331      	movs	r3, #49	; 0x31
 8012ec4:	f10b 0501 	add.w	r5, fp, #1
 8012ec8:	f88b 3000 	strb.w	r3, [fp]
 8012ecc:	f10a 0a01 	add.w	sl, sl, #1
 8012ed0:	e22f      	b.n	8013332 <_dtoa_r+0x8fa>
 8012ed2:	07f2      	lsls	r2, r6, #31
 8012ed4:	d505      	bpl.n	8012ee2 <_dtoa_r+0x4aa>
 8012ed6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012eda:	f7ed fbad 	bl	8000638 <__aeabi_dmul>
 8012ede:	3501      	adds	r5, #1
 8012ee0:	2301      	movs	r3, #1
 8012ee2:	1076      	asrs	r6, r6, #1
 8012ee4:	3708      	adds	r7, #8
 8012ee6:	e772      	b.n	8012dce <_dtoa_r+0x396>
 8012ee8:	2502      	movs	r5, #2
 8012eea:	e774      	b.n	8012dd6 <_dtoa_r+0x39e>
 8012eec:	f8cd a020 	str.w	sl, [sp, #32]
 8012ef0:	464f      	mov	r7, r9
 8012ef2:	e791      	b.n	8012e18 <_dtoa_r+0x3e0>
 8012ef4:	4b4d      	ldr	r3, [pc, #308]	; (801302c <_dtoa_r+0x5f4>)
 8012ef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012efa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8012efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d047      	beq.n	8012f94 <_dtoa_r+0x55c>
 8012f04:	4602      	mov	r2, r0
 8012f06:	460b      	mov	r3, r1
 8012f08:	2000      	movs	r0, #0
 8012f0a:	494e      	ldr	r1, [pc, #312]	; (8013044 <_dtoa_r+0x60c>)
 8012f0c:	f7ed fcbe 	bl	800088c <__aeabi_ddiv>
 8012f10:	462a      	mov	r2, r5
 8012f12:	4633      	mov	r3, r6
 8012f14:	f7ed f9d8 	bl	80002c8 <__aeabi_dsub>
 8012f18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012f1c:	465d      	mov	r5, fp
 8012f1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f22:	f7ed fe39 	bl	8000b98 <__aeabi_d2iz>
 8012f26:	4606      	mov	r6, r0
 8012f28:	f7ed fb1c 	bl	8000564 <__aeabi_i2d>
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f34:	f7ed f9c8 	bl	80002c8 <__aeabi_dsub>
 8012f38:	3630      	adds	r6, #48	; 0x30
 8012f3a:	f805 6b01 	strb.w	r6, [r5], #1
 8012f3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012f42:	e9cd 0100 	strd	r0, r1, [sp]
 8012f46:	f7ed fde9 	bl	8000b1c <__aeabi_dcmplt>
 8012f4a:	2800      	cmp	r0, #0
 8012f4c:	d163      	bne.n	8013016 <_dtoa_r+0x5de>
 8012f4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012f52:	2000      	movs	r0, #0
 8012f54:	4937      	ldr	r1, [pc, #220]	; (8013034 <_dtoa_r+0x5fc>)
 8012f56:	f7ed f9b7 	bl	80002c8 <__aeabi_dsub>
 8012f5a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012f5e:	f7ed fddd 	bl	8000b1c <__aeabi_dcmplt>
 8012f62:	2800      	cmp	r0, #0
 8012f64:	f040 80b7 	bne.w	80130d6 <_dtoa_r+0x69e>
 8012f68:	eba5 030b 	sub.w	r3, r5, fp
 8012f6c:	429f      	cmp	r7, r3
 8012f6e:	f77f af7c 	ble.w	8012e6a <_dtoa_r+0x432>
 8012f72:	2200      	movs	r2, #0
 8012f74:	4b30      	ldr	r3, [pc, #192]	; (8013038 <_dtoa_r+0x600>)
 8012f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012f7a:	f7ed fb5d 	bl	8000638 <__aeabi_dmul>
 8012f7e:	2200      	movs	r2, #0
 8012f80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012f84:	4b2c      	ldr	r3, [pc, #176]	; (8013038 <_dtoa_r+0x600>)
 8012f86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f8a:	f7ed fb55 	bl	8000638 <__aeabi_dmul>
 8012f8e:	e9cd 0100 	strd	r0, r1, [sp]
 8012f92:	e7c4      	b.n	8012f1e <_dtoa_r+0x4e6>
 8012f94:	462a      	mov	r2, r5
 8012f96:	4633      	mov	r3, r6
 8012f98:	f7ed fb4e 	bl	8000638 <__aeabi_dmul>
 8012f9c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012fa0:	eb0b 0507 	add.w	r5, fp, r7
 8012fa4:	465e      	mov	r6, fp
 8012fa6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012faa:	f7ed fdf5 	bl	8000b98 <__aeabi_d2iz>
 8012fae:	4607      	mov	r7, r0
 8012fb0:	f7ed fad8 	bl	8000564 <__aeabi_i2d>
 8012fb4:	3730      	adds	r7, #48	; 0x30
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fbe:	f7ed f983 	bl	80002c8 <__aeabi_dsub>
 8012fc2:	f806 7b01 	strb.w	r7, [r6], #1
 8012fc6:	42ae      	cmp	r6, r5
 8012fc8:	e9cd 0100 	strd	r0, r1, [sp]
 8012fcc:	f04f 0200 	mov.w	r2, #0
 8012fd0:	d126      	bne.n	8013020 <_dtoa_r+0x5e8>
 8012fd2:	4b1c      	ldr	r3, [pc, #112]	; (8013044 <_dtoa_r+0x60c>)
 8012fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012fd8:	f7ed f978 	bl	80002cc <__adddf3>
 8012fdc:	4602      	mov	r2, r0
 8012fde:	460b      	mov	r3, r1
 8012fe0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fe4:	f7ed fdb8 	bl	8000b58 <__aeabi_dcmpgt>
 8012fe8:	2800      	cmp	r0, #0
 8012fea:	d174      	bne.n	80130d6 <_dtoa_r+0x69e>
 8012fec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	4914      	ldr	r1, [pc, #80]	; (8013044 <_dtoa_r+0x60c>)
 8012ff4:	f7ed f968 	bl	80002c8 <__aeabi_dsub>
 8012ff8:	4602      	mov	r2, r0
 8012ffa:	460b      	mov	r3, r1
 8012ffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013000:	f7ed fd8c 	bl	8000b1c <__aeabi_dcmplt>
 8013004:	2800      	cmp	r0, #0
 8013006:	f43f af30 	beq.w	8012e6a <_dtoa_r+0x432>
 801300a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801300e:	2b30      	cmp	r3, #48	; 0x30
 8013010:	f105 32ff 	add.w	r2, r5, #4294967295
 8013014:	d002      	beq.n	801301c <_dtoa_r+0x5e4>
 8013016:	f8dd a020 	ldr.w	sl, [sp, #32]
 801301a:	e04a      	b.n	80130b2 <_dtoa_r+0x67a>
 801301c:	4615      	mov	r5, r2
 801301e:	e7f4      	b.n	801300a <_dtoa_r+0x5d2>
 8013020:	4b05      	ldr	r3, [pc, #20]	; (8013038 <_dtoa_r+0x600>)
 8013022:	f7ed fb09 	bl	8000638 <__aeabi_dmul>
 8013026:	e9cd 0100 	strd	r0, r1, [sp]
 801302a:	e7bc      	b.n	8012fa6 <_dtoa_r+0x56e>
 801302c:	08017718 	.word	0x08017718
 8013030:	080176f0 	.word	0x080176f0
 8013034:	3ff00000 	.word	0x3ff00000
 8013038:	40240000 	.word	0x40240000
 801303c:	401c0000 	.word	0x401c0000
 8013040:	40140000 	.word	0x40140000
 8013044:	3fe00000 	.word	0x3fe00000
 8013048:	e9dd 6700 	ldrd	r6, r7, [sp]
 801304c:	465d      	mov	r5, fp
 801304e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013052:	4630      	mov	r0, r6
 8013054:	4639      	mov	r1, r7
 8013056:	f7ed fc19 	bl	800088c <__aeabi_ddiv>
 801305a:	f7ed fd9d 	bl	8000b98 <__aeabi_d2iz>
 801305e:	4680      	mov	r8, r0
 8013060:	f7ed fa80 	bl	8000564 <__aeabi_i2d>
 8013064:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013068:	f7ed fae6 	bl	8000638 <__aeabi_dmul>
 801306c:	4602      	mov	r2, r0
 801306e:	460b      	mov	r3, r1
 8013070:	4630      	mov	r0, r6
 8013072:	4639      	mov	r1, r7
 8013074:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013078:	f7ed f926 	bl	80002c8 <__aeabi_dsub>
 801307c:	f805 6b01 	strb.w	r6, [r5], #1
 8013080:	eba5 060b 	sub.w	r6, r5, fp
 8013084:	45b1      	cmp	r9, r6
 8013086:	4602      	mov	r2, r0
 8013088:	460b      	mov	r3, r1
 801308a:	d139      	bne.n	8013100 <_dtoa_r+0x6c8>
 801308c:	f7ed f91e 	bl	80002cc <__adddf3>
 8013090:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013094:	4606      	mov	r6, r0
 8013096:	460f      	mov	r7, r1
 8013098:	f7ed fd5e 	bl	8000b58 <__aeabi_dcmpgt>
 801309c:	b9c8      	cbnz	r0, 80130d2 <_dtoa_r+0x69a>
 801309e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80130a2:	4630      	mov	r0, r6
 80130a4:	4639      	mov	r1, r7
 80130a6:	f7ed fd2f 	bl	8000b08 <__aeabi_dcmpeq>
 80130aa:	b110      	cbz	r0, 80130b2 <_dtoa_r+0x67a>
 80130ac:	f018 0f01 	tst.w	r8, #1
 80130b0:	d10f      	bne.n	80130d2 <_dtoa_r+0x69a>
 80130b2:	9904      	ldr	r1, [sp, #16]
 80130b4:	4620      	mov	r0, r4
 80130b6:	f000 fcc4 	bl	8013a42 <_Bfree>
 80130ba:	2300      	movs	r3, #0
 80130bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130be:	702b      	strb	r3, [r5, #0]
 80130c0:	f10a 0301 	add.w	r3, sl, #1
 80130c4:	6013      	str	r3, [r2, #0]
 80130c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	f000 8241 	beq.w	8013550 <_dtoa_r+0xb18>
 80130ce:	601d      	str	r5, [r3, #0]
 80130d0:	e23e      	b.n	8013550 <_dtoa_r+0xb18>
 80130d2:	f8cd a020 	str.w	sl, [sp, #32]
 80130d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80130da:	2a39      	cmp	r2, #57	; 0x39
 80130dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80130e0:	d108      	bne.n	80130f4 <_dtoa_r+0x6bc>
 80130e2:	459b      	cmp	fp, r3
 80130e4:	d10a      	bne.n	80130fc <_dtoa_r+0x6c4>
 80130e6:	9b08      	ldr	r3, [sp, #32]
 80130e8:	3301      	adds	r3, #1
 80130ea:	9308      	str	r3, [sp, #32]
 80130ec:	2330      	movs	r3, #48	; 0x30
 80130ee:	f88b 3000 	strb.w	r3, [fp]
 80130f2:	465b      	mov	r3, fp
 80130f4:	781a      	ldrb	r2, [r3, #0]
 80130f6:	3201      	adds	r2, #1
 80130f8:	701a      	strb	r2, [r3, #0]
 80130fa:	e78c      	b.n	8013016 <_dtoa_r+0x5de>
 80130fc:	461d      	mov	r5, r3
 80130fe:	e7ea      	b.n	80130d6 <_dtoa_r+0x69e>
 8013100:	2200      	movs	r2, #0
 8013102:	4b9b      	ldr	r3, [pc, #620]	; (8013370 <_dtoa_r+0x938>)
 8013104:	f7ed fa98 	bl	8000638 <__aeabi_dmul>
 8013108:	2200      	movs	r2, #0
 801310a:	2300      	movs	r3, #0
 801310c:	4606      	mov	r6, r0
 801310e:	460f      	mov	r7, r1
 8013110:	f7ed fcfa 	bl	8000b08 <__aeabi_dcmpeq>
 8013114:	2800      	cmp	r0, #0
 8013116:	d09a      	beq.n	801304e <_dtoa_r+0x616>
 8013118:	e7cb      	b.n	80130b2 <_dtoa_r+0x67a>
 801311a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801311c:	2a00      	cmp	r2, #0
 801311e:	f000 808b 	beq.w	8013238 <_dtoa_r+0x800>
 8013122:	9a06      	ldr	r2, [sp, #24]
 8013124:	2a01      	cmp	r2, #1
 8013126:	dc6e      	bgt.n	8013206 <_dtoa_r+0x7ce>
 8013128:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801312a:	2a00      	cmp	r2, #0
 801312c:	d067      	beq.n	80131fe <_dtoa_r+0x7c6>
 801312e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013132:	9f07      	ldr	r7, [sp, #28]
 8013134:	9d05      	ldr	r5, [sp, #20]
 8013136:	9a05      	ldr	r2, [sp, #20]
 8013138:	2101      	movs	r1, #1
 801313a:	441a      	add	r2, r3
 801313c:	4620      	mov	r0, r4
 801313e:	9205      	str	r2, [sp, #20]
 8013140:	4498      	add	r8, r3
 8013142:	f000 fd1e 	bl	8013b82 <__i2b>
 8013146:	4606      	mov	r6, r0
 8013148:	2d00      	cmp	r5, #0
 801314a:	dd0c      	ble.n	8013166 <_dtoa_r+0x72e>
 801314c:	f1b8 0f00 	cmp.w	r8, #0
 8013150:	dd09      	ble.n	8013166 <_dtoa_r+0x72e>
 8013152:	4545      	cmp	r5, r8
 8013154:	9a05      	ldr	r2, [sp, #20]
 8013156:	462b      	mov	r3, r5
 8013158:	bfa8      	it	ge
 801315a:	4643      	movge	r3, r8
 801315c:	1ad2      	subs	r2, r2, r3
 801315e:	9205      	str	r2, [sp, #20]
 8013160:	1aed      	subs	r5, r5, r3
 8013162:	eba8 0803 	sub.w	r8, r8, r3
 8013166:	9b07      	ldr	r3, [sp, #28]
 8013168:	b1eb      	cbz	r3, 80131a6 <_dtoa_r+0x76e>
 801316a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801316c:	2b00      	cmp	r3, #0
 801316e:	d067      	beq.n	8013240 <_dtoa_r+0x808>
 8013170:	b18f      	cbz	r7, 8013196 <_dtoa_r+0x75e>
 8013172:	4631      	mov	r1, r6
 8013174:	463a      	mov	r2, r7
 8013176:	4620      	mov	r0, r4
 8013178:	f000 fda2 	bl	8013cc0 <__pow5mult>
 801317c:	9a04      	ldr	r2, [sp, #16]
 801317e:	4601      	mov	r1, r0
 8013180:	4606      	mov	r6, r0
 8013182:	4620      	mov	r0, r4
 8013184:	f000 fd06 	bl	8013b94 <__multiply>
 8013188:	9904      	ldr	r1, [sp, #16]
 801318a:	9008      	str	r0, [sp, #32]
 801318c:	4620      	mov	r0, r4
 801318e:	f000 fc58 	bl	8013a42 <_Bfree>
 8013192:	9b08      	ldr	r3, [sp, #32]
 8013194:	9304      	str	r3, [sp, #16]
 8013196:	9b07      	ldr	r3, [sp, #28]
 8013198:	1bda      	subs	r2, r3, r7
 801319a:	d004      	beq.n	80131a6 <_dtoa_r+0x76e>
 801319c:	9904      	ldr	r1, [sp, #16]
 801319e:	4620      	mov	r0, r4
 80131a0:	f000 fd8e 	bl	8013cc0 <__pow5mult>
 80131a4:	9004      	str	r0, [sp, #16]
 80131a6:	2101      	movs	r1, #1
 80131a8:	4620      	mov	r0, r4
 80131aa:	f000 fcea 	bl	8013b82 <__i2b>
 80131ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131b0:	4607      	mov	r7, r0
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	f000 81d0 	beq.w	8013558 <_dtoa_r+0xb20>
 80131b8:	461a      	mov	r2, r3
 80131ba:	4601      	mov	r1, r0
 80131bc:	4620      	mov	r0, r4
 80131be:	f000 fd7f 	bl	8013cc0 <__pow5mult>
 80131c2:	9b06      	ldr	r3, [sp, #24]
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	4607      	mov	r7, r0
 80131c8:	dc40      	bgt.n	801324c <_dtoa_r+0x814>
 80131ca:	9b00      	ldr	r3, [sp, #0]
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d139      	bne.n	8013244 <_dtoa_r+0x80c>
 80131d0:	9b01      	ldr	r3, [sp, #4]
 80131d2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d136      	bne.n	8013248 <_dtoa_r+0x810>
 80131da:	9b01      	ldr	r3, [sp, #4]
 80131dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80131e0:	0d1b      	lsrs	r3, r3, #20
 80131e2:	051b      	lsls	r3, r3, #20
 80131e4:	b12b      	cbz	r3, 80131f2 <_dtoa_r+0x7ba>
 80131e6:	9b05      	ldr	r3, [sp, #20]
 80131e8:	3301      	adds	r3, #1
 80131ea:	9305      	str	r3, [sp, #20]
 80131ec:	f108 0801 	add.w	r8, r8, #1
 80131f0:	2301      	movs	r3, #1
 80131f2:	9307      	str	r3, [sp, #28]
 80131f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d12a      	bne.n	8013250 <_dtoa_r+0x818>
 80131fa:	2001      	movs	r0, #1
 80131fc:	e030      	b.n	8013260 <_dtoa_r+0x828>
 80131fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013200:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013204:	e795      	b.n	8013132 <_dtoa_r+0x6fa>
 8013206:	9b07      	ldr	r3, [sp, #28]
 8013208:	f109 37ff 	add.w	r7, r9, #4294967295
 801320c:	42bb      	cmp	r3, r7
 801320e:	bfbf      	itttt	lt
 8013210:	9b07      	ldrlt	r3, [sp, #28]
 8013212:	9707      	strlt	r7, [sp, #28]
 8013214:	1afa      	sublt	r2, r7, r3
 8013216:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013218:	bfbb      	ittet	lt
 801321a:	189b      	addlt	r3, r3, r2
 801321c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801321e:	1bdf      	subge	r7, r3, r7
 8013220:	2700      	movlt	r7, #0
 8013222:	f1b9 0f00 	cmp.w	r9, #0
 8013226:	bfb5      	itete	lt
 8013228:	9b05      	ldrlt	r3, [sp, #20]
 801322a:	9d05      	ldrge	r5, [sp, #20]
 801322c:	eba3 0509 	sublt.w	r5, r3, r9
 8013230:	464b      	movge	r3, r9
 8013232:	bfb8      	it	lt
 8013234:	2300      	movlt	r3, #0
 8013236:	e77e      	b.n	8013136 <_dtoa_r+0x6fe>
 8013238:	9f07      	ldr	r7, [sp, #28]
 801323a:	9d05      	ldr	r5, [sp, #20]
 801323c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801323e:	e783      	b.n	8013148 <_dtoa_r+0x710>
 8013240:	9a07      	ldr	r2, [sp, #28]
 8013242:	e7ab      	b.n	801319c <_dtoa_r+0x764>
 8013244:	2300      	movs	r3, #0
 8013246:	e7d4      	b.n	80131f2 <_dtoa_r+0x7ba>
 8013248:	9b00      	ldr	r3, [sp, #0]
 801324a:	e7d2      	b.n	80131f2 <_dtoa_r+0x7ba>
 801324c:	2300      	movs	r3, #0
 801324e:	9307      	str	r3, [sp, #28]
 8013250:	693b      	ldr	r3, [r7, #16]
 8013252:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013256:	6918      	ldr	r0, [r3, #16]
 8013258:	f000 fc45 	bl	8013ae6 <__hi0bits>
 801325c:	f1c0 0020 	rsb	r0, r0, #32
 8013260:	4440      	add	r0, r8
 8013262:	f010 001f 	ands.w	r0, r0, #31
 8013266:	d047      	beq.n	80132f8 <_dtoa_r+0x8c0>
 8013268:	f1c0 0320 	rsb	r3, r0, #32
 801326c:	2b04      	cmp	r3, #4
 801326e:	dd3b      	ble.n	80132e8 <_dtoa_r+0x8b0>
 8013270:	9b05      	ldr	r3, [sp, #20]
 8013272:	f1c0 001c 	rsb	r0, r0, #28
 8013276:	4403      	add	r3, r0
 8013278:	9305      	str	r3, [sp, #20]
 801327a:	4405      	add	r5, r0
 801327c:	4480      	add	r8, r0
 801327e:	9b05      	ldr	r3, [sp, #20]
 8013280:	2b00      	cmp	r3, #0
 8013282:	dd05      	ble.n	8013290 <_dtoa_r+0x858>
 8013284:	461a      	mov	r2, r3
 8013286:	9904      	ldr	r1, [sp, #16]
 8013288:	4620      	mov	r0, r4
 801328a:	f000 fd67 	bl	8013d5c <__lshift>
 801328e:	9004      	str	r0, [sp, #16]
 8013290:	f1b8 0f00 	cmp.w	r8, #0
 8013294:	dd05      	ble.n	80132a2 <_dtoa_r+0x86a>
 8013296:	4639      	mov	r1, r7
 8013298:	4642      	mov	r2, r8
 801329a:	4620      	mov	r0, r4
 801329c:	f000 fd5e 	bl	8013d5c <__lshift>
 80132a0:	4607      	mov	r7, r0
 80132a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80132a4:	b353      	cbz	r3, 80132fc <_dtoa_r+0x8c4>
 80132a6:	4639      	mov	r1, r7
 80132a8:	9804      	ldr	r0, [sp, #16]
 80132aa:	f000 fdab 	bl	8013e04 <__mcmp>
 80132ae:	2800      	cmp	r0, #0
 80132b0:	da24      	bge.n	80132fc <_dtoa_r+0x8c4>
 80132b2:	2300      	movs	r3, #0
 80132b4:	220a      	movs	r2, #10
 80132b6:	9904      	ldr	r1, [sp, #16]
 80132b8:	4620      	mov	r0, r4
 80132ba:	f000 fbd9 	bl	8013a70 <__multadd>
 80132be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132c0:	9004      	str	r0, [sp, #16]
 80132c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	f000 814d 	beq.w	8013566 <_dtoa_r+0xb2e>
 80132cc:	2300      	movs	r3, #0
 80132ce:	4631      	mov	r1, r6
 80132d0:	220a      	movs	r2, #10
 80132d2:	4620      	mov	r0, r4
 80132d4:	f000 fbcc 	bl	8013a70 <__multadd>
 80132d8:	9b02      	ldr	r3, [sp, #8]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	4606      	mov	r6, r0
 80132de:	dc4f      	bgt.n	8013380 <_dtoa_r+0x948>
 80132e0:	9b06      	ldr	r3, [sp, #24]
 80132e2:	2b02      	cmp	r3, #2
 80132e4:	dd4c      	ble.n	8013380 <_dtoa_r+0x948>
 80132e6:	e011      	b.n	801330c <_dtoa_r+0x8d4>
 80132e8:	d0c9      	beq.n	801327e <_dtoa_r+0x846>
 80132ea:	9a05      	ldr	r2, [sp, #20]
 80132ec:	331c      	adds	r3, #28
 80132ee:	441a      	add	r2, r3
 80132f0:	9205      	str	r2, [sp, #20]
 80132f2:	441d      	add	r5, r3
 80132f4:	4498      	add	r8, r3
 80132f6:	e7c2      	b.n	801327e <_dtoa_r+0x846>
 80132f8:	4603      	mov	r3, r0
 80132fa:	e7f6      	b.n	80132ea <_dtoa_r+0x8b2>
 80132fc:	f1b9 0f00 	cmp.w	r9, #0
 8013300:	dc38      	bgt.n	8013374 <_dtoa_r+0x93c>
 8013302:	9b06      	ldr	r3, [sp, #24]
 8013304:	2b02      	cmp	r3, #2
 8013306:	dd35      	ble.n	8013374 <_dtoa_r+0x93c>
 8013308:	f8cd 9008 	str.w	r9, [sp, #8]
 801330c:	9b02      	ldr	r3, [sp, #8]
 801330e:	b963      	cbnz	r3, 801332a <_dtoa_r+0x8f2>
 8013310:	4639      	mov	r1, r7
 8013312:	2205      	movs	r2, #5
 8013314:	4620      	mov	r0, r4
 8013316:	f000 fbab 	bl	8013a70 <__multadd>
 801331a:	4601      	mov	r1, r0
 801331c:	4607      	mov	r7, r0
 801331e:	9804      	ldr	r0, [sp, #16]
 8013320:	f000 fd70 	bl	8013e04 <__mcmp>
 8013324:	2800      	cmp	r0, #0
 8013326:	f73f adcc 	bgt.w	8012ec2 <_dtoa_r+0x48a>
 801332a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801332c:	465d      	mov	r5, fp
 801332e:	ea6f 0a03 	mvn.w	sl, r3
 8013332:	f04f 0900 	mov.w	r9, #0
 8013336:	4639      	mov	r1, r7
 8013338:	4620      	mov	r0, r4
 801333a:	f000 fb82 	bl	8013a42 <_Bfree>
 801333e:	2e00      	cmp	r6, #0
 8013340:	f43f aeb7 	beq.w	80130b2 <_dtoa_r+0x67a>
 8013344:	f1b9 0f00 	cmp.w	r9, #0
 8013348:	d005      	beq.n	8013356 <_dtoa_r+0x91e>
 801334a:	45b1      	cmp	r9, r6
 801334c:	d003      	beq.n	8013356 <_dtoa_r+0x91e>
 801334e:	4649      	mov	r1, r9
 8013350:	4620      	mov	r0, r4
 8013352:	f000 fb76 	bl	8013a42 <_Bfree>
 8013356:	4631      	mov	r1, r6
 8013358:	4620      	mov	r0, r4
 801335a:	f000 fb72 	bl	8013a42 <_Bfree>
 801335e:	e6a8      	b.n	80130b2 <_dtoa_r+0x67a>
 8013360:	2700      	movs	r7, #0
 8013362:	463e      	mov	r6, r7
 8013364:	e7e1      	b.n	801332a <_dtoa_r+0x8f2>
 8013366:	f8dd a020 	ldr.w	sl, [sp, #32]
 801336a:	463e      	mov	r6, r7
 801336c:	e5a9      	b.n	8012ec2 <_dtoa_r+0x48a>
 801336e:	bf00      	nop
 8013370:	40240000 	.word	0x40240000
 8013374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013376:	f8cd 9008 	str.w	r9, [sp, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	f000 80fa 	beq.w	8013574 <_dtoa_r+0xb3c>
 8013380:	2d00      	cmp	r5, #0
 8013382:	dd05      	ble.n	8013390 <_dtoa_r+0x958>
 8013384:	4631      	mov	r1, r6
 8013386:	462a      	mov	r2, r5
 8013388:	4620      	mov	r0, r4
 801338a:	f000 fce7 	bl	8013d5c <__lshift>
 801338e:	4606      	mov	r6, r0
 8013390:	9b07      	ldr	r3, [sp, #28]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d04c      	beq.n	8013430 <_dtoa_r+0x9f8>
 8013396:	6871      	ldr	r1, [r6, #4]
 8013398:	4620      	mov	r0, r4
 801339a:	f000 fb1e 	bl	80139da <_Balloc>
 801339e:	6932      	ldr	r2, [r6, #16]
 80133a0:	3202      	adds	r2, #2
 80133a2:	4605      	mov	r5, r0
 80133a4:	0092      	lsls	r2, r2, #2
 80133a6:	f106 010c 	add.w	r1, r6, #12
 80133aa:	300c      	adds	r0, #12
 80133ac:	f7fe fabc 	bl	8011928 <memcpy>
 80133b0:	2201      	movs	r2, #1
 80133b2:	4629      	mov	r1, r5
 80133b4:	4620      	mov	r0, r4
 80133b6:	f000 fcd1 	bl	8013d5c <__lshift>
 80133ba:	9b00      	ldr	r3, [sp, #0]
 80133bc:	f8cd b014 	str.w	fp, [sp, #20]
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	46b1      	mov	r9, r6
 80133c6:	9307      	str	r3, [sp, #28]
 80133c8:	4606      	mov	r6, r0
 80133ca:	4639      	mov	r1, r7
 80133cc:	9804      	ldr	r0, [sp, #16]
 80133ce:	f7ff faa5 	bl	801291c <quorem>
 80133d2:	4649      	mov	r1, r9
 80133d4:	4605      	mov	r5, r0
 80133d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80133da:	9804      	ldr	r0, [sp, #16]
 80133dc:	f000 fd12 	bl	8013e04 <__mcmp>
 80133e0:	4632      	mov	r2, r6
 80133e2:	9000      	str	r0, [sp, #0]
 80133e4:	4639      	mov	r1, r7
 80133e6:	4620      	mov	r0, r4
 80133e8:	f000 fd26 	bl	8013e38 <__mdiff>
 80133ec:	68c3      	ldr	r3, [r0, #12]
 80133ee:	4602      	mov	r2, r0
 80133f0:	bb03      	cbnz	r3, 8013434 <_dtoa_r+0x9fc>
 80133f2:	4601      	mov	r1, r0
 80133f4:	9008      	str	r0, [sp, #32]
 80133f6:	9804      	ldr	r0, [sp, #16]
 80133f8:	f000 fd04 	bl	8013e04 <__mcmp>
 80133fc:	9a08      	ldr	r2, [sp, #32]
 80133fe:	4603      	mov	r3, r0
 8013400:	4611      	mov	r1, r2
 8013402:	4620      	mov	r0, r4
 8013404:	9308      	str	r3, [sp, #32]
 8013406:	f000 fb1c 	bl	8013a42 <_Bfree>
 801340a:	9b08      	ldr	r3, [sp, #32]
 801340c:	b9a3      	cbnz	r3, 8013438 <_dtoa_r+0xa00>
 801340e:	9a06      	ldr	r2, [sp, #24]
 8013410:	b992      	cbnz	r2, 8013438 <_dtoa_r+0xa00>
 8013412:	9a07      	ldr	r2, [sp, #28]
 8013414:	b982      	cbnz	r2, 8013438 <_dtoa_r+0xa00>
 8013416:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801341a:	d029      	beq.n	8013470 <_dtoa_r+0xa38>
 801341c:	9b00      	ldr	r3, [sp, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	dd01      	ble.n	8013426 <_dtoa_r+0x9ee>
 8013422:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013426:	9b05      	ldr	r3, [sp, #20]
 8013428:	1c5d      	adds	r5, r3, #1
 801342a:	f883 8000 	strb.w	r8, [r3]
 801342e:	e782      	b.n	8013336 <_dtoa_r+0x8fe>
 8013430:	4630      	mov	r0, r6
 8013432:	e7c2      	b.n	80133ba <_dtoa_r+0x982>
 8013434:	2301      	movs	r3, #1
 8013436:	e7e3      	b.n	8013400 <_dtoa_r+0x9c8>
 8013438:	9a00      	ldr	r2, [sp, #0]
 801343a:	2a00      	cmp	r2, #0
 801343c:	db04      	blt.n	8013448 <_dtoa_r+0xa10>
 801343e:	d125      	bne.n	801348c <_dtoa_r+0xa54>
 8013440:	9a06      	ldr	r2, [sp, #24]
 8013442:	bb1a      	cbnz	r2, 801348c <_dtoa_r+0xa54>
 8013444:	9a07      	ldr	r2, [sp, #28]
 8013446:	bb0a      	cbnz	r2, 801348c <_dtoa_r+0xa54>
 8013448:	2b00      	cmp	r3, #0
 801344a:	ddec      	ble.n	8013426 <_dtoa_r+0x9ee>
 801344c:	2201      	movs	r2, #1
 801344e:	9904      	ldr	r1, [sp, #16]
 8013450:	4620      	mov	r0, r4
 8013452:	f000 fc83 	bl	8013d5c <__lshift>
 8013456:	4639      	mov	r1, r7
 8013458:	9004      	str	r0, [sp, #16]
 801345a:	f000 fcd3 	bl	8013e04 <__mcmp>
 801345e:	2800      	cmp	r0, #0
 8013460:	dc03      	bgt.n	801346a <_dtoa_r+0xa32>
 8013462:	d1e0      	bne.n	8013426 <_dtoa_r+0x9ee>
 8013464:	f018 0f01 	tst.w	r8, #1
 8013468:	d0dd      	beq.n	8013426 <_dtoa_r+0x9ee>
 801346a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801346e:	d1d8      	bne.n	8013422 <_dtoa_r+0x9ea>
 8013470:	9b05      	ldr	r3, [sp, #20]
 8013472:	9a05      	ldr	r2, [sp, #20]
 8013474:	1c5d      	adds	r5, r3, #1
 8013476:	2339      	movs	r3, #57	; 0x39
 8013478:	7013      	strb	r3, [r2, #0]
 801347a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801347e:	2b39      	cmp	r3, #57	; 0x39
 8013480:	f105 32ff 	add.w	r2, r5, #4294967295
 8013484:	d04f      	beq.n	8013526 <_dtoa_r+0xaee>
 8013486:	3301      	adds	r3, #1
 8013488:	7013      	strb	r3, [r2, #0]
 801348a:	e754      	b.n	8013336 <_dtoa_r+0x8fe>
 801348c:	9a05      	ldr	r2, [sp, #20]
 801348e:	2b00      	cmp	r3, #0
 8013490:	f102 0501 	add.w	r5, r2, #1
 8013494:	dd06      	ble.n	80134a4 <_dtoa_r+0xa6c>
 8013496:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801349a:	d0e9      	beq.n	8013470 <_dtoa_r+0xa38>
 801349c:	f108 0801 	add.w	r8, r8, #1
 80134a0:	9b05      	ldr	r3, [sp, #20]
 80134a2:	e7c2      	b.n	801342a <_dtoa_r+0x9f2>
 80134a4:	9a02      	ldr	r2, [sp, #8]
 80134a6:	f805 8c01 	strb.w	r8, [r5, #-1]
 80134aa:	eba5 030b 	sub.w	r3, r5, fp
 80134ae:	4293      	cmp	r3, r2
 80134b0:	d021      	beq.n	80134f6 <_dtoa_r+0xabe>
 80134b2:	2300      	movs	r3, #0
 80134b4:	220a      	movs	r2, #10
 80134b6:	9904      	ldr	r1, [sp, #16]
 80134b8:	4620      	mov	r0, r4
 80134ba:	f000 fad9 	bl	8013a70 <__multadd>
 80134be:	45b1      	cmp	r9, r6
 80134c0:	9004      	str	r0, [sp, #16]
 80134c2:	f04f 0300 	mov.w	r3, #0
 80134c6:	f04f 020a 	mov.w	r2, #10
 80134ca:	4649      	mov	r1, r9
 80134cc:	4620      	mov	r0, r4
 80134ce:	d105      	bne.n	80134dc <_dtoa_r+0xaa4>
 80134d0:	f000 face 	bl	8013a70 <__multadd>
 80134d4:	4681      	mov	r9, r0
 80134d6:	4606      	mov	r6, r0
 80134d8:	9505      	str	r5, [sp, #20]
 80134da:	e776      	b.n	80133ca <_dtoa_r+0x992>
 80134dc:	f000 fac8 	bl	8013a70 <__multadd>
 80134e0:	4631      	mov	r1, r6
 80134e2:	4681      	mov	r9, r0
 80134e4:	2300      	movs	r3, #0
 80134e6:	220a      	movs	r2, #10
 80134e8:	4620      	mov	r0, r4
 80134ea:	f000 fac1 	bl	8013a70 <__multadd>
 80134ee:	4606      	mov	r6, r0
 80134f0:	e7f2      	b.n	80134d8 <_dtoa_r+0xaa0>
 80134f2:	f04f 0900 	mov.w	r9, #0
 80134f6:	2201      	movs	r2, #1
 80134f8:	9904      	ldr	r1, [sp, #16]
 80134fa:	4620      	mov	r0, r4
 80134fc:	f000 fc2e 	bl	8013d5c <__lshift>
 8013500:	4639      	mov	r1, r7
 8013502:	9004      	str	r0, [sp, #16]
 8013504:	f000 fc7e 	bl	8013e04 <__mcmp>
 8013508:	2800      	cmp	r0, #0
 801350a:	dcb6      	bgt.n	801347a <_dtoa_r+0xa42>
 801350c:	d102      	bne.n	8013514 <_dtoa_r+0xadc>
 801350e:	f018 0f01 	tst.w	r8, #1
 8013512:	d1b2      	bne.n	801347a <_dtoa_r+0xa42>
 8013514:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013518:	2b30      	cmp	r3, #48	; 0x30
 801351a:	f105 32ff 	add.w	r2, r5, #4294967295
 801351e:	f47f af0a 	bne.w	8013336 <_dtoa_r+0x8fe>
 8013522:	4615      	mov	r5, r2
 8013524:	e7f6      	b.n	8013514 <_dtoa_r+0xadc>
 8013526:	4593      	cmp	fp, r2
 8013528:	d105      	bne.n	8013536 <_dtoa_r+0xafe>
 801352a:	2331      	movs	r3, #49	; 0x31
 801352c:	f10a 0a01 	add.w	sl, sl, #1
 8013530:	f88b 3000 	strb.w	r3, [fp]
 8013534:	e6ff      	b.n	8013336 <_dtoa_r+0x8fe>
 8013536:	4615      	mov	r5, r2
 8013538:	e79f      	b.n	801347a <_dtoa_r+0xa42>
 801353a:	f8df b064 	ldr.w	fp, [pc, #100]	; 80135a0 <_dtoa_r+0xb68>
 801353e:	e007      	b.n	8013550 <_dtoa_r+0xb18>
 8013540:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013542:	f8df b060 	ldr.w	fp, [pc, #96]	; 80135a4 <_dtoa_r+0xb6c>
 8013546:	b11b      	cbz	r3, 8013550 <_dtoa_r+0xb18>
 8013548:	f10b 0308 	add.w	r3, fp, #8
 801354c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801354e:	6013      	str	r3, [r2, #0]
 8013550:	4658      	mov	r0, fp
 8013552:	b017      	add	sp, #92	; 0x5c
 8013554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013558:	9b06      	ldr	r3, [sp, #24]
 801355a:	2b01      	cmp	r3, #1
 801355c:	f77f ae35 	ble.w	80131ca <_dtoa_r+0x792>
 8013560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013562:	9307      	str	r3, [sp, #28]
 8013564:	e649      	b.n	80131fa <_dtoa_r+0x7c2>
 8013566:	9b02      	ldr	r3, [sp, #8]
 8013568:	2b00      	cmp	r3, #0
 801356a:	dc03      	bgt.n	8013574 <_dtoa_r+0xb3c>
 801356c:	9b06      	ldr	r3, [sp, #24]
 801356e:	2b02      	cmp	r3, #2
 8013570:	f73f aecc 	bgt.w	801330c <_dtoa_r+0x8d4>
 8013574:	465d      	mov	r5, fp
 8013576:	4639      	mov	r1, r7
 8013578:	9804      	ldr	r0, [sp, #16]
 801357a:	f7ff f9cf 	bl	801291c <quorem>
 801357e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013582:	f805 8b01 	strb.w	r8, [r5], #1
 8013586:	9a02      	ldr	r2, [sp, #8]
 8013588:	eba5 030b 	sub.w	r3, r5, fp
 801358c:	429a      	cmp	r2, r3
 801358e:	ddb0      	ble.n	80134f2 <_dtoa_r+0xaba>
 8013590:	2300      	movs	r3, #0
 8013592:	220a      	movs	r2, #10
 8013594:	9904      	ldr	r1, [sp, #16]
 8013596:	4620      	mov	r0, r4
 8013598:	f000 fa6a 	bl	8013a70 <__multadd>
 801359c:	9004      	str	r0, [sp, #16]
 801359e:	e7ea      	b.n	8013576 <_dtoa_r+0xb3e>
 80135a0:	08017659 	.word	0x08017659
 80135a4:	0801767d 	.word	0x0801767d

080135a8 <__sflush_r>:
 80135a8:	898a      	ldrh	r2, [r1, #12]
 80135aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80135ae:	4605      	mov	r5, r0
 80135b0:	0710      	lsls	r0, r2, #28
 80135b2:	460c      	mov	r4, r1
 80135b4:	d458      	bmi.n	8013668 <__sflush_r+0xc0>
 80135b6:	684b      	ldr	r3, [r1, #4]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	dc05      	bgt.n	80135c8 <__sflush_r+0x20>
 80135bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80135be:	2b00      	cmp	r3, #0
 80135c0:	dc02      	bgt.n	80135c8 <__sflush_r+0x20>
 80135c2:	2000      	movs	r0, #0
 80135c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80135c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135ca:	2e00      	cmp	r6, #0
 80135cc:	d0f9      	beq.n	80135c2 <__sflush_r+0x1a>
 80135ce:	2300      	movs	r3, #0
 80135d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80135d4:	682f      	ldr	r7, [r5, #0]
 80135d6:	6a21      	ldr	r1, [r4, #32]
 80135d8:	602b      	str	r3, [r5, #0]
 80135da:	d032      	beq.n	8013642 <__sflush_r+0x9a>
 80135dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80135de:	89a3      	ldrh	r3, [r4, #12]
 80135e0:	075a      	lsls	r2, r3, #29
 80135e2:	d505      	bpl.n	80135f0 <__sflush_r+0x48>
 80135e4:	6863      	ldr	r3, [r4, #4]
 80135e6:	1ac0      	subs	r0, r0, r3
 80135e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80135ea:	b10b      	cbz	r3, 80135f0 <__sflush_r+0x48>
 80135ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80135ee:	1ac0      	subs	r0, r0, r3
 80135f0:	2300      	movs	r3, #0
 80135f2:	4602      	mov	r2, r0
 80135f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80135f6:	6a21      	ldr	r1, [r4, #32]
 80135f8:	4628      	mov	r0, r5
 80135fa:	47b0      	blx	r6
 80135fc:	1c43      	adds	r3, r0, #1
 80135fe:	89a3      	ldrh	r3, [r4, #12]
 8013600:	d106      	bne.n	8013610 <__sflush_r+0x68>
 8013602:	6829      	ldr	r1, [r5, #0]
 8013604:	291d      	cmp	r1, #29
 8013606:	d848      	bhi.n	801369a <__sflush_r+0xf2>
 8013608:	4a29      	ldr	r2, [pc, #164]	; (80136b0 <__sflush_r+0x108>)
 801360a:	40ca      	lsrs	r2, r1
 801360c:	07d6      	lsls	r6, r2, #31
 801360e:	d544      	bpl.n	801369a <__sflush_r+0xf2>
 8013610:	2200      	movs	r2, #0
 8013612:	6062      	str	r2, [r4, #4]
 8013614:	04d9      	lsls	r1, r3, #19
 8013616:	6922      	ldr	r2, [r4, #16]
 8013618:	6022      	str	r2, [r4, #0]
 801361a:	d504      	bpl.n	8013626 <__sflush_r+0x7e>
 801361c:	1c42      	adds	r2, r0, #1
 801361e:	d101      	bne.n	8013624 <__sflush_r+0x7c>
 8013620:	682b      	ldr	r3, [r5, #0]
 8013622:	b903      	cbnz	r3, 8013626 <__sflush_r+0x7e>
 8013624:	6560      	str	r0, [r4, #84]	; 0x54
 8013626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013628:	602f      	str	r7, [r5, #0]
 801362a:	2900      	cmp	r1, #0
 801362c:	d0c9      	beq.n	80135c2 <__sflush_r+0x1a>
 801362e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013632:	4299      	cmp	r1, r3
 8013634:	d002      	beq.n	801363c <__sflush_r+0x94>
 8013636:	4628      	mov	r0, r5
 8013638:	f7fe f98a 	bl	8011950 <_free_r>
 801363c:	2000      	movs	r0, #0
 801363e:	6360      	str	r0, [r4, #52]	; 0x34
 8013640:	e7c0      	b.n	80135c4 <__sflush_r+0x1c>
 8013642:	2301      	movs	r3, #1
 8013644:	4628      	mov	r0, r5
 8013646:	47b0      	blx	r6
 8013648:	1c41      	adds	r1, r0, #1
 801364a:	d1c8      	bne.n	80135de <__sflush_r+0x36>
 801364c:	682b      	ldr	r3, [r5, #0]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d0c5      	beq.n	80135de <__sflush_r+0x36>
 8013652:	2b1d      	cmp	r3, #29
 8013654:	d001      	beq.n	801365a <__sflush_r+0xb2>
 8013656:	2b16      	cmp	r3, #22
 8013658:	d101      	bne.n	801365e <__sflush_r+0xb6>
 801365a:	602f      	str	r7, [r5, #0]
 801365c:	e7b1      	b.n	80135c2 <__sflush_r+0x1a>
 801365e:	89a3      	ldrh	r3, [r4, #12]
 8013660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013664:	81a3      	strh	r3, [r4, #12]
 8013666:	e7ad      	b.n	80135c4 <__sflush_r+0x1c>
 8013668:	690f      	ldr	r7, [r1, #16]
 801366a:	2f00      	cmp	r7, #0
 801366c:	d0a9      	beq.n	80135c2 <__sflush_r+0x1a>
 801366e:	0793      	lsls	r3, r2, #30
 8013670:	680e      	ldr	r6, [r1, #0]
 8013672:	bf08      	it	eq
 8013674:	694b      	ldreq	r3, [r1, #20]
 8013676:	600f      	str	r7, [r1, #0]
 8013678:	bf18      	it	ne
 801367a:	2300      	movne	r3, #0
 801367c:	eba6 0807 	sub.w	r8, r6, r7
 8013680:	608b      	str	r3, [r1, #8]
 8013682:	f1b8 0f00 	cmp.w	r8, #0
 8013686:	dd9c      	ble.n	80135c2 <__sflush_r+0x1a>
 8013688:	4643      	mov	r3, r8
 801368a:	463a      	mov	r2, r7
 801368c:	6a21      	ldr	r1, [r4, #32]
 801368e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013690:	4628      	mov	r0, r5
 8013692:	47b0      	blx	r6
 8013694:	2800      	cmp	r0, #0
 8013696:	dc06      	bgt.n	80136a6 <__sflush_r+0xfe>
 8013698:	89a3      	ldrh	r3, [r4, #12]
 801369a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801369e:	81a3      	strh	r3, [r4, #12]
 80136a0:	f04f 30ff 	mov.w	r0, #4294967295
 80136a4:	e78e      	b.n	80135c4 <__sflush_r+0x1c>
 80136a6:	4407      	add	r7, r0
 80136a8:	eba8 0800 	sub.w	r8, r8, r0
 80136ac:	e7e9      	b.n	8013682 <__sflush_r+0xda>
 80136ae:	bf00      	nop
 80136b0:	20400001 	.word	0x20400001

080136b4 <_fflush_r>:
 80136b4:	b538      	push	{r3, r4, r5, lr}
 80136b6:	690b      	ldr	r3, [r1, #16]
 80136b8:	4605      	mov	r5, r0
 80136ba:	460c      	mov	r4, r1
 80136bc:	b1db      	cbz	r3, 80136f6 <_fflush_r+0x42>
 80136be:	b118      	cbz	r0, 80136c8 <_fflush_r+0x14>
 80136c0:	6983      	ldr	r3, [r0, #24]
 80136c2:	b90b      	cbnz	r3, 80136c8 <_fflush_r+0x14>
 80136c4:	f000 f860 	bl	8013788 <__sinit>
 80136c8:	4b0c      	ldr	r3, [pc, #48]	; (80136fc <_fflush_r+0x48>)
 80136ca:	429c      	cmp	r4, r3
 80136cc:	d109      	bne.n	80136e2 <_fflush_r+0x2e>
 80136ce:	686c      	ldr	r4, [r5, #4]
 80136d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80136d4:	b17b      	cbz	r3, 80136f6 <_fflush_r+0x42>
 80136d6:	4621      	mov	r1, r4
 80136d8:	4628      	mov	r0, r5
 80136da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80136de:	f7ff bf63 	b.w	80135a8 <__sflush_r>
 80136e2:	4b07      	ldr	r3, [pc, #28]	; (8013700 <_fflush_r+0x4c>)
 80136e4:	429c      	cmp	r4, r3
 80136e6:	d101      	bne.n	80136ec <_fflush_r+0x38>
 80136e8:	68ac      	ldr	r4, [r5, #8]
 80136ea:	e7f1      	b.n	80136d0 <_fflush_r+0x1c>
 80136ec:	4b05      	ldr	r3, [pc, #20]	; (8013704 <_fflush_r+0x50>)
 80136ee:	429c      	cmp	r4, r3
 80136f0:	bf08      	it	eq
 80136f2:	68ec      	ldreq	r4, [r5, #12]
 80136f4:	e7ec      	b.n	80136d0 <_fflush_r+0x1c>
 80136f6:	2000      	movs	r0, #0
 80136f8:	bd38      	pop	{r3, r4, r5, pc}
 80136fa:	bf00      	nop
 80136fc:	080176ac 	.word	0x080176ac
 8013700:	080176cc 	.word	0x080176cc
 8013704:	0801768c 	.word	0x0801768c

08013708 <std>:
 8013708:	2300      	movs	r3, #0
 801370a:	b510      	push	{r4, lr}
 801370c:	4604      	mov	r4, r0
 801370e:	e9c0 3300 	strd	r3, r3, [r0]
 8013712:	6083      	str	r3, [r0, #8]
 8013714:	8181      	strh	r1, [r0, #12]
 8013716:	6643      	str	r3, [r0, #100]	; 0x64
 8013718:	81c2      	strh	r2, [r0, #14]
 801371a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801371e:	6183      	str	r3, [r0, #24]
 8013720:	4619      	mov	r1, r3
 8013722:	2208      	movs	r2, #8
 8013724:	305c      	adds	r0, #92	; 0x5c
 8013726:	f7fe f90a 	bl	801193e <memset>
 801372a:	4b05      	ldr	r3, [pc, #20]	; (8013740 <std+0x38>)
 801372c:	6263      	str	r3, [r4, #36]	; 0x24
 801372e:	4b05      	ldr	r3, [pc, #20]	; (8013744 <std+0x3c>)
 8013730:	62a3      	str	r3, [r4, #40]	; 0x28
 8013732:	4b05      	ldr	r3, [pc, #20]	; (8013748 <std+0x40>)
 8013734:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013736:	4b05      	ldr	r3, [pc, #20]	; (801374c <std+0x44>)
 8013738:	6224      	str	r4, [r4, #32]
 801373a:	6323      	str	r3, [r4, #48]	; 0x30
 801373c:	bd10      	pop	{r4, pc}
 801373e:	bf00      	nop
 8013740:	080126c1 	.word	0x080126c1
 8013744:	080126e3 	.word	0x080126e3
 8013748:	0801271b 	.word	0x0801271b
 801374c:	0801273f 	.word	0x0801273f

08013750 <_cleanup_r>:
 8013750:	4901      	ldr	r1, [pc, #4]	; (8013758 <_cleanup_r+0x8>)
 8013752:	f000 b885 	b.w	8013860 <_fwalk_reent>
 8013756:	bf00      	nop
 8013758:	080136b5 	.word	0x080136b5

0801375c <__sfmoreglue>:
 801375c:	b570      	push	{r4, r5, r6, lr}
 801375e:	1e4a      	subs	r2, r1, #1
 8013760:	2568      	movs	r5, #104	; 0x68
 8013762:	4355      	muls	r5, r2
 8013764:	460e      	mov	r6, r1
 8013766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801376a:	f7fe f93f 	bl	80119ec <_malloc_r>
 801376e:	4604      	mov	r4, r0
 8013770:	b140      	cbz	r0, 8013784 <__sfmoreglue+0x28>
 8013772:	2100      	movs	r1, #0
 8013774:	e9c0 1600 	strd	r1, r6, [r0]
 8013778:	300c      	adds	r0, #12
 801377a:	60a0      	str	r0, [r4, #8]
 801377c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013780:	f7fe f8dd 	bl	801193e <memset>
 8013784:	4620      	mov	r0, r4
 8013786:	bd70      	pop	{r4, r5, r6, pc}

08013788 <__sinit>:
 8013788:	6983      	ldr	r3, [r0, #24]
 801378a:	b510      	push	{r4, lr}
 801378c:	4604      	mov	r4, r0
 801378e:	bb33      	cbnz	r3, 80137de <__sinit+0x56>
 8013790:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013794:	6503      	str	r3, [r0, #80]	; 0x50
 8013796:	4b12      	ldr	r3, [pc, #72]	; (80137e0 <__sinit+0x58>)
 8013798:	4a12      	ldr	r2, [pc, #72]	; (80137e4 <__sinit+0x5c>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	6282      	str	r2, [r0, #40]	; 0x28
 801379e:	4298      	cmp	r0, r3
 80137a0:	bf04      	itt	eq
 80137a2:	2301      	moveq	r3, #1
 80137a4:	6183      	streq	r3, [r0, #24]
 80137a6:	f000 f81f 	bl	80137e8 <__sfp>
 80137aa:	6060      	str	r0, [r4, #4]
 80137ac:	4620      	mov	r0, r4
 80137ae:	f000 f81b 	bl	80137e8 <__sfp>
 80137b2:	60a0      	str	r0, [r4, #8]
 80137b4:	4620      	mov	r0, r4
 80137b6:	f000 f817 	bl	80137e8 <__sfp>
 80137ba:	2200      	movs	r2, #0
 80137bc:	60e0      	str	r0, [r4, #12]
 80137be:	2104      	movs	r1, #4
 80137c0:	6860      	ldr	r0, [r4, #4]
 80137c2:	f7ff ffa1 	bl	8013708 <std>
 80137c6:	2201      	movs	r2, #1
 80137c8:	2109      	movs	r1, #9
 80137ca:	68a0      	ldr	r0, [r4, #8]
 80137cc:	f7ff ff9c 	bl	8013708 <std>
 80137d0:	2202      	movs	r2, #2
 80137d2:	2112      	movs	r1, #18
 80137d4:	68e0      	ldr	r0, [r4, #12]
 80137d6:	f7ff ff97 	bl	8013708 <std>
 80137da:	2301      	movs	r3, #1
 80137dc:	61a3      	str	r3, [r4, #24]
 80137de:	bd10      	pop	{r4, pc}
 80137e0:	08017634 	.word	0x08017634
 80137e4:	08013751 	.word	0x08013751

080137e8 <__sfp>:
 80137e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ea:	4b1b      	ldr	r3, [pc, #108]	; (8013858 <__sfp+0x70>)
 80137ec:	681e      	ldr	r6, [r3, #0]
 80137ee:	69b3      	ldr	r3, [r6, #24]
 80137f0:	4607      	mov	r7, r0
 80137f2:	b913      	cbnz	r3, 80137fa <__sfp+0x12>
 80137f4:	4630      	mov	r0, r6
 80137f6:	f7ff ffc7 	bl	8013788 <__sinit>
 80137fa:	3648      	adds	r6, #72	; 0x48
 80137fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013800:	3b01      	subs	r3, #1
 8013802:	d503      	bpl.n	801380c <__sfp+0x24>
 8013804:	6833      	ldr	r3, [r6, #0]
 8013806:	b133      	cbz	r3, 8013816 <__sfp+0x2e>
 8013808:	6836      	ldr	r6, [r6, #0]
 801380a:	e7f7      	b.n	80137fc <__sfp+0x14>
 801380c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013810:	b16d      	cbz	r5, 801382e <__sfp+0x46>
 8013812:	3468      	adds	r4, #104	; 0x68
 8013814:	e7f4      	b.n	8013800 <__sfp+0x18>
 8013816:	2104      	movs	r1, #4
 8013818:	4638      	mov	r0, r7
 801381a:	f7ff ff9f 	bl	801375c <__sfmoreglue>
 801381e:	6030      	str	r0, [r6, #0]
 8013820:	2800      	cmp	r0, #0
 8013822:	d1f1      	bne.n	8013808 <__sfp+0x20>
 8013824:	230c      	movs	r3, #12
 8013826:	603b      	str	r3, [r7, #0]
 8013828:	4604      	mov	r4, r0
 801382a:	4620      	mov	r0, r4
 801382c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801382e:	4b0b      	ldr	r3, [pc, #44]	; (801385c <__sfp+0x74>)
 8013830:	6665      	str	r5, [r4, #100]	; 0x64
 8013832:	e9c4 5500 	strd	r5, r5, [r4]
 8013836:	60a5      	str	r5, [r4, #8]
 8013838:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801383c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013840:	2208      	movs	r2, #8
 8013842:	4629      	mov	r1, r5
 8013844:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013848:	f7fe f879 	bl	801193e <memset>
 801384c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013850:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013854:	e7e9      	b.n	801382a <__sfp+0x42>
 8013856:	bf00      	nop
 8013858:	08017634 	.word	0x08017634
 801385c:	ffff0001 	.word	0xffff0001

08013860 <_fwalk_reent>:
 8013860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013864:	4680      	mov	r8, r0
 8013866:	4689      	mov	r9, r1
 8013868:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801386c:	2600      	movs	r6, #0
 801386e:	b914      	cbnz	r4, 8013876 <_fwalk_reent+0x16>
 8013870:	4630      	mov	r0, r6
 8013872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013876:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801387a:	3f01      	subs	r7, #1
 801387c:	d501      	bpl.n	8013882 <_fwalk_reent+0x22>
 801387e:	6824      	ldr	r4, [r4, #0]
 8013880:	e7f5      	b.n	801386e <_fwalk_reent+0xe>
 8013882:	89ab      	ldrh	r3, [r5, #12]
 8013884:	2b01      	cmp	r3, #1
 8013886:	d907      	bls.n	8013898 <_fwalk_reent+0x38>
 8013888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801388c:	3301      	adds	r3, #1
 801388e:	d003      	beq.n	8013898 <_fwalk_reent+0x38>
 8013890:	4629      	mov	r1, r5
 8013892:	4640      	mov	r0, r8
 8013894:	47c8      	blx	r9
 8013896:	4306      	orrs	r6, r0
 8013898:	3568      	adds	r5, #104	; 0x68
 801389a:	e7ee      	b.n	801387a <_fwalk_reent+0x1a>

0801389c <_localeconv_r>:
 801389c:	4b04      	ldr	r3, [pc, #16]	; (80138b0 <_localeconv_r+0x14>)
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	6a18      	ldr	r0, [r3, #32]
 80138a2:	4b04      	ldr	r3, [pc, #16]	; (80138b4 <_localeconv_r+0x18>)
 80138a4:	2800      	cmp	r0, #0
 80138a6:	bf08      	it	eq
 80138a8:	4618      	moveq	r0, r3
 80138aa:	30f0      	adds	r0, #240	; 0xf0
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	20000430 	.word	0x20000430
 80138b4:	20000494 	.word	0x20000494

080138b8 <_lseek_r>:
 80138b8:	b538      	push	{r3, r4, r5, lr}
 80138ba:	4c07      	ldr	r4, [pc, #28]	; (80138d8 <_lseek_r+0x20>)
 80138bc:	4605      	mov	r5, r0
 80138be:	4608      	mov	r0, r1
 80138c0:	4611      	mov	r1, r2
 80138c2:	2200      	movs	r2, #0
 80138c4:	6022      	str	r2, [r4, #0]
 80138c6:	461a      	mov	r2, r3
 80138c8:	f7f1 fcd0 	bl	800526c <_lseek>
 80138cc:	1c43      	adds	r3, r0, #1
 80138ce:	d102      	bne.n	80138d6 <_lseek_r+0x1e>
 80138d0:	6823      	ldr	r3, [r4, #0]
 80138d2:	b103      	cbz	r3, 80138d6 <_lseek_r+0x1e>
 80138d4:	602b      	str	r3, [r5, #0]
 80138d6:	bd38      	pop	{r3, r4, r5, pc}
 80138d8:	200065a8 	.word	0x200065a8

080138dc <__swhatbuf_r>:
 80138dc:	b570      	push	{r4, r5, r6, lr}
 80138de:	460e      	mov	r6, r1
 80138e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138e4:	2900      	cmp	r1, #0
 80138e6:	b096      	sub	sp, #88	; 0x58
 80138e8:	4614      	mov	r4, r2
 80138ea:	461d      	mov	r5, r3
 80138ec:	da07      	bge.n	80138fe <__swhatbuf_r+0x22>
 80138ee:	2300      	movs	r3, #0
 80138f0:	602b      	str	r3, [r5, #0]
 80138f2:	89b3      	ldrh	r3, [r6, #12]
 80138f4:	061a      	lsls	r2, r3, #24
 80138f6:	d410      	bmi.n	801391a <__swhatbuf_r+0x3e>
 80138f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138fc:	e00e      	b.n	801391c <__swhatbuf_r+0x40>
 80138fe:	466a      	mov	r2, sp
 8013900:	f000 fd22 	bl	8014348 <_fstat_r>
 8013904:	2800      	cmp	r0, #0
 8013906:	dbf2      	blt.n	80138ee <__swhatbuf_r+0x12>
 8013908:	9a01      	ldr	r2, [sp, #4]
 801390a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801390e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013912:	425a      	negs	r2, r3
 8013914:	415a      	adcs	r2, r3
 8013916:	602a      	str	r2, [r5, #0]
 8013918:	e7ee      	b.n	80138f8 <__swhatbuf_r+0x1c>
 801391a:	2340      	movs	r3, #64	; 0x40
 801391c:	2000      	movs	r0, #0
 801391e:	6023      	str	r3, [r4, #0]
 8013920:	b016      	add	sp, #88	; 0x58
 8013922:	bd70      	pop	{r4, r5, r6, pc}

08013924 <__smakebuf_r>:
 8013924:	898b      	ldrh	r3, [r1, #12]
 8013926:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013928:	079d      	lsls	r5, r3, #30
 801392a:	4606      	mov	r6, r0
 801392c:	460c      	mov	r4, r1
 801392e:	d507      	bpl.n	8013940 <__smakebuf_r+0x1c>
 8013930:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013934:	6023      	str	r3, [r4, #0]
 8013936:	6123      	str	r3, [r4, #16]
 8013938:	2301      	movs	r3, #1
 801393a:	6163      	str	r3, [r4, #20]
 801393c:	b002      	add	sp, #8
 801393e:	bd70      	pop	{r4, r5, r6, pc}
 8013940:	ab01      	add	r3, sp, #4
 8013942:	466a      	mov	r2, sp
 8013944:	f7ff ffca 	bl	80138dc <__swhatbuf_r>
 8013948:	9900      	ldr	r1, [sp, #0]
 801394a:	4605      	mov	r5, r0
 801394c:	4630      	mov	r0, r6
 801394e:	f7fe f84d 	bl	80119ec <_malloc_r>
 8013952:	b948      	cbnz	r0, 8013968 <__smakebuf_r+0x44>
 8013954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013958:	059a      	lsls	r2, r3, #22
 801395a:	d4ef      	bmi.n	801393c <__smakebuf_r+0x18>
 801395c:	f023 0303 	bic.w	r3, r3, #3
 8013960:	f043 0302 	orr.w	r3, r3, #2
 8013964:	81a3      	strh	r3, [r4, #12]
 8013966:	e7e3      	b.n	8013930 <__smakebuf_r+0xc>
 8013968:	4b0d      	ldr	r3, [pc, #52]	; (80139a0 <__smakebuf_r+0x7c>)
 801396a:	62b3      	str	r3, [r6, #40]	; 0x28
 801396c:	89a3      	ldrh	r3, [r4, #12]
 801396e:	6020      	str	r0, [r4, #0]
 8013970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013974:	81a3      	strh	r3, [r4, #12]
 8013976:	9b00      	ldr	r3, [sp, #0]
 8013978:	6163      	str	r3, [r4, #20]
 801397a:	9b01      	ldr	r3, [sp, #4]
 801397c:	6120      	str	r0, [r4, #16]
 801397e:	b15b      	cbz	r3, 8013998 <__smakebuf_r+0x74>
 8013980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013984:	4630      	mov	r0, r6
 8013986:	f000 fcf1 	bl	801436c <_isatty_r>
 801398a:	b128      	cbz	r0, 8013998 <__smakebuf_r+0x74>
 801398c:	89a3      	ldrh	r3, [r4, #12]
 801398e:	f023 0303 	bic.w	r3, r3, #3
 8013992:	f043 0301 	orr.w	r3, r3, #1
 8013996:	81a3      	strh	r3, [r4, #12]
 8013998:	89a3      	ldrh	r3, [r4, #12]
 801399a:	431d      	orrs	r5, r3
 801399c:	81a5      	strh	r5, [r4, #12]
 801399e:	e7cd      	b.n	801393c <__smakebuf_r+0x18>
 80139a0:	08013751 	.word	0x08013751

080139a4 <memmove>:
 80139a4:	4288      	cmp	r0, r1
 80139a6:	b510      	push	{r4, lr}
 80139a8:	eb01 0302 	add.w	r3, r1, r2
 80139ac:	d807      	bhi.n	80139be <memmove+0x1a>
 80139ae:	1e42      	subs	r2, r0, #1
 80139b0:	4299      	cmp	r1, r3
 80139b2:	d00a      	beq.n	80139ca <memmove+0x26>
 80139b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80139b8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80139bc:	e7f8      	b.n	80139b0 <memmove+0xc>
 80139be:	4283      	cmp	r3, r0
 80139c0:	d9f5      	bls.n	80139ae <memmove+0xa>
 80139c2:	1881      	adds	r1, r0, r2
 80139c4:	1ad2      	subs	r2, r2, r3
 80139c6:	42d3      	cmn	r3, r2
 80139c8:	d100      	bne.n	80139cc <memmove+0x28>
 80139ca:	bd10      	pop	{r4, pc}
 80139cc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80139d0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80139d4:	e7f7      	b.n	80139c6 <memmove+0x22>

080139d6 <__malloc_lock>:
 80139d6:	4770      	bx	lr

080139d8 <__malloc_unlock>:
 80139d8:	4770      	bx	lr

080139da <_Balloc>:
 80139da:	b570      	push	{r4, r5, r6, lr}
 80139dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80139de:	4604      	mov	r4, r0
 80139e0:	460e      	mov	r6, r1
 80139e2:	b93d      	cbnz	r5, 80139f4 <_Balloc+0x1a>
 80139e4:	2010      	movs	r0, #16
 80139e6:	f7fd ff8f 	bl	8011908 <malloc>
 80139ea:	6260      	str	r0, [r4, #36]	; 0x24
 80139ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80139f0:	6005      	str	r5, [r0, #0]
 80139f2:	60c5      	str	r5, [r0, #12]
 80139f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80139f6:	68eb      	ldr	r3, [r5, #12]
 80139f8:	b183      	cbz	r3, 8013a1c <_Balloc+0x42>
 80139fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139fc:	68db      	ldr	r3, [r3, #12]
 80139fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013a02:	b9b8      	cbnz	r0, 8013a34 <_Balloc+0x5a>
 8013a04:	2101      	movs	r1, #1
 8013a06:	fa01 f506 	lsl.w	r5, r1, r6
 8013a0a:	1d6a      	adds	r2, r5, #5
 8013a0c:	0092      	lsls	r2, r2, #2
 8013a0e:	4620      	mov	r0, r4
 8013a10:	f000 fabe 	bl	8013f90 <_calloc_r>
 8013a14:	b160      	cbz	r0, 8013a30 <_Balloc+0x56>
 8013a16:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013a1a:	e00e      	b.n	8013a3a <_Balloc+0x60>
 8013a1c:	2221      	movs	r2, #33	; 0x21
 8013a1e:	2104      	movs	r1, #4
 8013a20:	4620      	mov	r0, r4
 8013a22:	f000 fab5 	bl	8013f90 <_calloc_r>
 8013a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a28:	60e8      	str	r0, [r5, #12]
 8013a2a:	68db      	ldr	r3, [r3, #12]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d1e4      	bne.n	80139fa <_Balloc+0x20>
 8013a30:	2000      	movs	r0, #0
 8013a32:	bd70      	pop	{r4, r5, r6, pc}
 8013a34:	6802      	ldr	r2, [r0, #0]
 8013a36:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a40:	e7f7      	b.n	8013a32 <_Balloc+0x58>

08013a42 <_Bfree>:
 8013a42:	b570      	push	{r4, r5, r6, lr}
 8013a44:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8013a46:	4606      	mov	r6, r0
 8013a48:	460d      	mov	r5, r1
 8013a4a:	b93c      	cbnz	r4, 8013a5c <_Bfree+0x1a>
 8013a4c:	2010      	movs	r0, #16
 8013a4e:	f7fd ff5b 	bl	8011908 <malloc>
 8013a52:	6270      	str	r0, [r6, #36]	; 0x24
 8013a54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013a58:	6004      	str	r4, [r0, #0]
 8013a5a:	60c4      	str	r4, [r0, #12]
 8013a5c:	b13d      	cbz	r5, 8013a6e <_Bfree+0x2c>
 8013a5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013a60:	686a      	ldr	r2, [r5, #4]
 8013a62:	68db      	ldr	r3, [r3, #12]
 8013a64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a68:	6029      	str	r1, [r5, #0]
 8013a6a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013a6e:	bd70      	pop	{r4, r5, r6, pc}

08013a70 <__multadd>:
 8013a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a74:	690d      	ldr	r5, [r1, #16]
 8013a76:	461f      	mov	r7, r3
 8013a78:	4606      	mov	r6, r0
 8013a7a:	460c      	mov	r4, r1
 8013a7c:	f101 0c14 	add.w	ip, r1, #20
 8013a80:	2300      	movs	r3, #0
 8013a82:	f8dc 0000 	ldr.w	r0, [ip]
 8013a86:	b281      	uxth	r1, r0
 8013a88:	fb02 7101 	mla	r1, r2, r1, r7
 8013a8c:	0c0f      	lsrs	r7, r1, #16
 8013a8e:	0c00      	lsrs	r0, r0, #16
 8013a90:	fb02 7000 	mla	r0, r2, r0, r7
 8013a94:	b289      	uxth	r1, r1
 8013a96:	3301      	adds	r3, #1
 8013a98:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013a9c:	429d      	cmp	r5, r3
 8013a9e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8013aa6:	dcec      	bgt.n	8013a82 <__multadd+0x12>
 8013aa8:	b1d7      	cbz	r7, 8013ae0 <__multadd+0x70>
 8013aaa:	68a3      	ldr	r3, [r4, #8]
 8013aac:	42ab      	cmp	r3, r5
 8013aae:	dc12      	bgt.n	8013ad6 <__multadd+0x66>
 8013ab0:	6861      	ldr	r1, [r4, #4]
 8013ab2:	4630      	mov	r0, r6
 8013ab4:	3101      	adds	r1, #1
 8013ab6:	f7ff ff90 	bl	80139da <_Balloc>
 8013aba:	6922      	ldr	r2, [r4, #16]
 8013abc:	3202      	adds	r2, #2
 8013abe:	f104 010c 	add.w	r1, r4, #12
 8013ac2:	4680      	mov	r8, r0
 8013ac4:	0092      	lsls	r2, r2, #2
 8013ac6:	300c      	adds	r0, #12
 8013ac8:	f7fd ff2e 	bl	8011928 <memcpy>
 8013acc:	4621      	mov	r1, r4
 8013ace:	4630      	mov	r0, r6
 8013ad0:	f7ff ffb7 	bl	8013a42 <_Bfree>
 8013ad4:	4644      	mov	r4, r8
 8013ad6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013ada:	3501      	adds	r5, #1
 8013adc:	615f      	str	r7, [r3, #20]
 8013ade:	6125      	str	r5, [r4, #16]
 8013ae0:	4620      	mov	r0, r4
 8013ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013ae6 <__hi0bits>:
 8013ae6:	0c02      	lsrs	r2, r0, #16
 8013ae8:	0412      	lsls	r2, r2, #16
 8013aea:	4603      	mov	r3, r0
 8013aec:	b9b2      	cbnz	r2, 8013b1c <__hi0bits+0x36>
 8013aee:	0403      	lsls	r3, r0, #16
 8013af0:	2010      	movs	r0, #16
 8013af2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8013af6:	bf04      	itt	eq
 8013af8:	021b      	lsleq	r3, r3, #8
 8013afa:	3008      	addeq	r0, #8
 8013afc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013b00:	bf04      	itt	eq
 8013b02:	011b      	lsleq	r3, r3, #4
 8013b04:	3004      	addeq	r0, #4
 8013b06:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8013b0a:	bf04      	itt	eq
 8013b0c:	009b      	lsleq	r3, r3, #2
 8013b0e:	3002      	addeq	r0, #2
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	db06      	blt.n	8013b22 <__hi0bits+0x3c>
 8013b14:	005b      	lsls	r3, r3, #1
 8013b16:	d503      	bpl.n	8013b20 <__hi0bits+0x3a>
 8013b18:	3001      	adds	r0, #1
 8013b1a:	4770      	bx	lr
 8013b1c:	2000      	movs	r0, #0
 8013b1e:	e7e8      	b.n	8013af2 <__hi0bits+0xc>
 8013b20:	2020      	movs	r0, #32
 8013b22:	4770      	bx	lr

08013b24 <__lo0bits>:
 8013b24:	6803      	ldr	r3, [r0, #0]
 8013b26:	f013 0207 	ands.w	r2, r3, #7
 8013b2a:	4601      	mov	r1, r0
 8013b2c:	d00b      	beq.n	8013b46 <__lo0bits+0x22>
 8013b2e:	07da      	lsls	r2, r3, #31
 8013b30:	d423      	bmi.n	8013b7a <__lo0bits+0x56>
 8013b32:	0798      	lsls	r0, r3, #30
 8013b34:	bf49      	itett	mi
 8013b36:	085b      	lsrmi	r3, r3, #1
 8013b38:	089b      	lsrpl	r3, r3, #2
 8013b3a:	2001      	movmi	r0, #1
 8013b3c:	600b      	strmi	r3, [r1, #0]
 8013b3e:	bf5c      	itt	pl
 8013b40:	600b      	strpl	r3, [r1, #0]
 8013b42:	2002      	movpl	r0, #2
 8013b44:	4770      	bx	lr
 8013b46:	b298      	uxth	r0, r3
 8013b48:	b9a8      	cbnz	r0, 8013b76 <__lo0bits+0x52>
 8013b4a:	0c1b      	lsrs	r3, r3, #16
 8013b4c:	2010      	movs	r0, #16
 8013b4e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013b52:	bf04      	itt	eq
 8013b54:	0a1b      	lsreq	r3, r3, #8
 8013b56:	3008      	addeq	r0, #8
 8013b58:	071a      	lsls	r2, r3, #28
 8013b5a:	bf04      	itt	eq
 8013b5c:	091b      	lsreq	r3, r3, #4
 8013b5e:	3004      	addeq	r0, #4
 8013b60:	079a      	lsls	r2, r3, #30
 8013b62:	bf04      	itt	eq
 8013b64:	089b      	lsreq	r3, r3, #2
 8013b66:	3002      	addeq	r0, #2
 8013b68:	07da      	lsls	r2, r3, #31
 8013b6a:	d402      	bmi.n	8013b72 <__lo0bits+0x4e>
 8013b6c:	085b      	lsrs	r3, r3, #1
 8013b6e:	d006      	beq.n	8013b7e <__lo0bits+0x5a>
 8013b70:	3001      	adds	r0, #1
 8013b72:	600b      	str	r3, [r1, #0]
 8013b74:	4770      	bx	lr
 8013b76:	4610      	mov	r0, r2
 8013b78:	e7e9      	b.n	8013b4e <__lo0bits+0x2a>
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	4770      	bx	lr
 8013b7e:	2020      	movs	r0, #32
 8013b80:	4770      	bx	lr

08013b82 <__i2b>:
 8013b82:	b510      	push	{r4, lr}
 8013b84:	460c      	mov	r4, r1
 8013b86:	2101      	movs	r1, #1
 8013b88:	f7ff ff27 	bl	80139da <_Balloc>
 8013b8c:	2201      	movs	r2, #1
 8013b8e:	6144      	str	r4, [r0, #20]
 8013b90:	6102      	str	r2, [r0, #16]
 8013b92:	bd10      	pop	{r4, pc}

08013b94 <__multiply>:
 8013b94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b98:	4614      	mov	r4, r2
 8013b9a:	690a      	ldr	r2, [r1, #16]
 8013b9c:	6923      	ldr	r3, [r4, #16]
 8013b9e:	429a      	cmp	r2, r3
 8013ba0:	bfb8      	it	lt
 8013ba2:	460b      	movlt	r3, r1
 8013ba4:	4688      	mov	r8, r1
 8013ba6:	bfbc      	itt	lt
 8013ba8:	46a0      	movlt	r8, r4
 8013baa:	461c      	movlt	r4, r3
 8013bac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013bb0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013bb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013bb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013bbc:	eb07 0609 	add.w	r6, r7, r9
 8013bc0:	42b3      	cmp	r3, r6
 8013bc2:	bfb8      	it	lt
 8013bc4:	3101      	addlt	r1, #1
 8013bc6:	f7ff ff08 	bl	80139da <_Balloc>
 8013bca:	f100 0514 	add.w	r5, r0, #20
 8013bce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013bd2:	462b      	mov	r3, r5
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	4573      	cmp	r3, lr
 8013bd8:	d316      	bcc.n	8013c08 <__multiply+0x74>
 8013bda:	f104 0214 	add.w	r2, r4, #20
 8013bde:	f108 0114 	add.w	r1, r8, #20
 8013be2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8013be6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8013bea:	9300      	str	r3, [sp, #0]
 8013bec:	9b00      	ldr	r3, [sp, #0]
 8013bee:	9201      	str	r2, [sp, #4]
 8013bf0:	4293      	cmp	r3, r2
 8013bf2:	d80c      	bhi.n	8013c0e <__multiply+0x7a>
 8013bf4:	2e00      	cmp	r6, #0
 8013bf6:	dd03      	ble.n	8013c00 <__multiply+0x6c>
 8013bf8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d05d      	beq.n	8013cbc <__multiply+0x128>
 8013c00:	6106      	str	r6, [r0, #16]
 8013c02:	b003      	add	sp, #12
 8013c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c08:	f843 2b04 	str.w	r2, [r3], #4
 8013c0c:	e7e3      	b.n	8013bd6 <__multiply+0x42>
 8013c0e:	f8b2 b000 	ldrh.w	fp, [r2]
 8013c12:	f1bb 0f00 	cmp.w	fp, #0
 8013c16:	d023      	beq.n	8013c60 <__multiply+0xcc>
 8013c18:	4689      	mov	r9, r1
 8013c1a:	46ac      	mov	ip, r5
 8013c1c:	f04f 0800 	mov.w	r8, #0
 8013c20:	f859 4b04 	ldr.w	r4, [r9], #4
 8013c24:	f8dc a000 	ldr.w	sl, [ip]
 8013c28:	b2a3      	uxth	r3, r4
 8013c2a:	fa1f fa8a 	uxth.w	sl, sl
 8013c2e:	fb0b a303 	mla	r3, fp, r3, sl
 8013c32:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8013c36:	f8dc 4000 	ldr.w	r4, [ip]
 8013c3a:	4443      	add	r3, r8
 8013c3c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c40:	fb0b 840a 	mla	r4, fp, sl, r8
 8013c44:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8013c48:	46e2      	mov	sl, ip
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c50:	454f      	cmp	r7, r9
 8013c52:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8013c56:	f84a 3b04 	str.w	r3, [sl], #4
 8013c5a:	d82b      	bhi.n	8013cb4 <__multiply+0x120>
 8013c5c:	f8cc 8004 	str.w	r8, [ip, #4]
 8013c60:	9b01      	ldr	r3, [sp, #4]
 8013c62:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8013c66:	3204      	adds	r2, #4
 8013c68:	f1ba 0f00 	cmp.w	sl, #0
 8013c6c:	d020      	beq.n	8013cb0 <__multiply+0x11c>
 8013c6e:	682b      	ldr	r3, [r5, #0]
 8013c70:	4689      	mov	r9, r1
 8013c72:	46a8      	mov	r8, r5
 8013c74:	f04f 0b00 	mov.w	fp, #0
 8013c78:	f8b9 c000 	ldrh.w	ip, [r9]
 8013c7c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013c80:	fb0a 440c 	mla	r4, sl, ip, r4
 8013c84:	445c      	add	r4, fp
 8013c86:	46c4      	mov	ip, r8
 8013c88:	b29b      	uxth	r3, r3
 8013c8a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013c8e:	f84c 3b04 	str.w	r3, [ip], #4
 8013c92:	f859 3b04 	ldr.w	r3, [r9], #4
 8013c96:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8013c9a:	0c1b      	lsrs	r3, r3, #16
 8013c9c:	fb0a b303 	mla	r3, sl, r3, fp
 8013ca0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013ca4:	454f      	cmp	r7, r9
 8013ca6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8013caa:	d805      	bhi.n	8013cb8 <__multiply+0x124>
 8013cac:	f8c8 3004 	str.w	r3, [r8, #4]
 8013cb0:	3504      	adds	r5, #4
 8013cb2:	e79b      	b.n	8013bec <__multiply+0x58>
 8013cb4:	46d4      	mov	ip, sl
 8013cb6:	e7b3      	b.n	8013c20 <__multiply+0x8c>
 8013cb8:	46e0      	mov	r8, ip
 8013cba:	e7dd      	b.n	8013c78 <__multiply+0xe4>
 8013cbc:	3e01      	subs	r6, #1
 8013cbe:	e799      	b.n	8013bf4 <__multiply+0x60>

08013cc0 <__pow5mult>:
 8013cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013cc4:	4615      	mov	r5, r2
 8013cc6:	f012 0203 	ands.w	r2, r2, #3
 8013cca:	4606      	mov	r6, r0
 8013ccc:	460f      	mov	r7, r1
 8013cce:	d007      	beq.n	8013ce0 <__pow5mult+0x20>
 8013cd0:	3a01      	subs	r2, #1
 8013cd2:	4c21      	ldr	r4, [pc, #132]	; (8013d58 <__pow5mult+0x98>)
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013cda:	f7ff fec9 	bl	8013a70 <__multadd>
 8013cde:	4607      	mov	r7, r0
 8013ce0:	10ad      	asrs	r5, r5, #2
 8013ce2:	d035      	beq.n	8013d50 <__pow5mult+0x90>
 8013ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ce6:	b93c      	cbnz	r4, 8013cf8 <__pow5mult+0x38>
 8013ce8:	2010      	movs	r0, #16
 8013cea:	f7fd fe0d 	bl	8011908 <malloc>
 8013cee:	6270      	str	r0, [r6, #36]	; 0x24
 8013cf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013cf4:	6004      	str	r4, [r0, #0]
 8013cf6:	60c4      	str	r4, [r0, #12]
 8013cf8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013cfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d00:	b94c      	cbnz	r4, 8013d16 <__pow5mult+0x56>
 8013d02:	f240 2171 	movw	r1, #625	; 0x271
 8013d06:	4630      	mov	r0, r6
 8013d08:	f7ff ff3b 	bl	8013b82 <__i2b>
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d12:	4604      	mov	r4, r0
 8013d14:	6003      	str	r3, [r0, #0]
 8013d16:	f04f 0800 	mov.w	r8, #0
 8013d1a:	07eb      	lsls	r3, r5, #31
 8013d1c:	d50a      	bpl.n	8013d34 <__pow5mult+0x74>
 8013d1e:	4639      	mov	r1, r7
 8013d20:	4622      	mov	r2, r4
 8013d22:	4630      	mov	r0, r6
 8013d24:	f7ff ff36 	bl	8013b94 <__multiply>
 8013d28:	4639      	mov	r1, r7
 8013d2a:	4681      	mov	r9, r0
 8013d2c:	4630      	mov	r0, r6
 8013d2e:	f7ff fe88 	bl	8013a42 <_Bfree>
 8013d32:	464f      	mov	r7, r9
 8013d34:	106d      	asrs	r5, r5, #1
 8013d36:	d00b      	beq.n	8013d50 <__pow5mult+0x90>
 8013d38:	6820      	ldr	r0, [r4, #0]
 8013d3a:	b938      	cbnz	r0, 8013d4c <__pow5mult+0x8c>
 8013d3c:	4622      	mov	r2, r4
 8013d3e:	4621      	mov	r1, r4
 8013d40:	4630      	mov	r0, r6
 8013d42:	f7ff ff27 	bl	8013b94 <__multiply>
 8013d46:	6020      	str	r0, [r4, #0]
 8013d48:	f8c0 8000 	str.w	r8, [r0]
 8013d4c:	4604      	mov	r4, r0
 8013d4e:	e7e4      	b.n	8013d1a <__pow5mult+0x5a>
 8013d50:	4638      	mov	r0, r7
 8013d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d56:	bf00      	nop
 8013d58:	080177e0 	.word	0x080177e0

08013d5c <__lshift>:
 8013d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013d60:	460c      	mov	r4, r1
 8013d62:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013d66:	6923      	ldr	r3, [r4, #16]
 8013d68:	6849      	ldr	r1, [r1, #4]
 8013d6a:	eb0a 0903 	add.w	r9, sl, r3
 8013d6e:	68a3      	ldr	r3, [r4, #8]
 8013d70:	4607      	mov	r7, r0
 8013d72:	4616      	mov	r6, r2
 8013d74:	f109 0501 	add.w	r5, r9, #1
 8013d78:	42ab      	cmp	r3, r5
 8013d7a:	db32      	blt.n	8013de2 <__lshift+0x86>
 8013d7c:	4638      	mov	r0, r7
 8013d7e:	f7ff fe2c 	bl	80139da <_Balloc>
 8013d82:	2300      	movs	r3, #0
 8013d84:	4680      	mov	r8, r0
 8013d86:	f100 0114 	add.w	r1, r0, #20
 8013d8a:	461a      	mov	r2, r3
 8013d8c:	4553      	cmp	r3, sl
 8013d8e:	db2b      	blt.n	8013de8 <__lshift+0x8c>
 8013d90:	6920      	ldr	r0, [r4, #16]
 8013d92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013d96:	f104 0314 	add.w	r3, r4, #20
 8013d9a:	f016 021f 	ands.w	r2, r6, #31
 8013d9e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013da2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013da6:	d025      	beq.n	8013df4 <__lshift+0x98>
 8013da8:	f1c2 0e20 	rsb	lr, r2, #32
 8013dac:	2000      	movs	r0, #0
 8013dae:	681e      	ldr	r6, [r3, #0]
 8013db0:	468a      	mov	sl, r1
 8013db2:	4096      	lsls	r6, r2
 8013db4:	4330      	orrs	r0, r6
 8013db6:	f84a 0b04 	str.w	r0, [sl], #4
 8013dba:	f853 0b04 	ldr.w	r0, [r3], #4
 8013dbe:	459c      	cmp	ip, r3
 8013dc0:	fa20 f00e 	lsr.w	r0, r0, lr
 8013dc4:	d814      	bhi.n	8013df0 <__lshift+0x94>
 8013dc6:	6048      	str	r0, [r1, #4]
 8013dc8:	b108      	cbz	r0, 8013dce <__lshift+0x72>
 8013dca:	f109 0502 	add.w	r5, r9, #2
 8013dce:	3d01      	subs	r5, #1
 8013dd0:	4638      	mov	r0, r7
 8013dd2:	f8c8 5010 	str.w	r5, [r8, #16]
 8013dd6:	4621      	mov	r1, r4
 8013dd8:	f7ff fe33 	bl	8013a42 <_Bfree>
 8013ddc:	4640      	mov	r0, r8
 8013dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013de2:	3101      	adds	r1, #1
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	e7c7      	b.n	8013d78 <__lshift+0x1c>
 8013de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013dec:	3301      	adds	r3, #1
 8013dee:	e7cd      	b.n	8013d8c <__lshift+0x30>
 8013df0:	4651      	mov	r1, sl
 8013df2:	e7dc      	b.n	8013dae <__lshift+0x52>
 8013df4:	3904      	subs	r1, #4
 8013df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013dfa:	f841 2f04 	str.w	r2, [r1, #4]!
 8013dfe:	459c      	cmp	ip, r3
 8013e00:	d8f9      	bhi.n	8013df6 <__lshift+0x9a>
 8013e02:	e7e4      	b.n	8013dce <__lshift+0x72>

08013e04 <__mcmp>:
 8013e04:	6903      	ldr	r3, [r0, #16]
 8013e06:	690a      	ldr	r2, [r1, #16]
 8013e08:	1a9b      	subs	r3, r3, r2
 8013e0a:	b530      	push	{r4, r5, lr}
 8013e0c:	d10c      	bne.n	8013e28 <__mcmp+0x24>
 8013e0e:	0092      	lsls	r2, r2, #2
 8013e10:	3014      	adds	r0, #20
 8013e12:	3114      	adds	r1, #20
 8013e14:	1884      	adds	r4, r0, r2
 8013e16:	4411      	add	r1, r2
 8013e18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013e1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013e20:	4295      	cmp	r5, r2
 8013e22:	d003      	beq.n	8013e2c <__mcmp+0x28>
 8013e24:	d305      	bcc.n	8013e32 <__mcmp+0x2e>
 8013e26:	2301      	movs	r3, #1
 8013e28:	4618      	mov	r0, r3
 8013e2a:	bd30      	pop	{r4, r5, pc}
 8013e2c:	42a0      	cmp	r0, r4
 8013e2e:	d3f3      	bcc.n	8013e18 <__mcmp+0x14>
 8013e30:	e7fa      	b.n	8013e28 <__mcmp+0x24>
 8013e32:	f04f 33ff 	mov.w	r3, #4294967295
 8013e36:	e7f7      	b.n	8013e28 <__mcmp+0x24>

08013e38 <__mdiff>:
 8013e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e3c:	460d      	mov	r5, r1
 8013e3e:	4607      	mov	r7, r0
 8013e40:	4611      	mov	r1, r2
 8013e42:	4628      	mov	r0, r5
 8013e44:	4614      	mov	r4, r2
 8013e46:	f7ff ffdd 	bl	8013e04 <__mcmp>
 8013e4a:	1e06      	subs	r6, r0, #0
 8013e4c:	d108      	bne.n	8013e60 <__mdiff+0x28>
 8013e4e:	4631      	mov	r1, r6
 8013e50:	4638      	mov	r0, r7
 8013e52:	f7ff fdc2 	bl	80139da <_Balloc>
 8013e56:	2301      	movs	r3, #1
 8013e58:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e60:	bfa4      	itt	ge
 8013e62:	4623      	movge	r3, r4
 8013e64:	462c      	movge	r4, r5
 8013e66:	4638      	mov	r0, r7
 8013e68:	6861      	ldr	r1, [r4, #4]
 8013e6a:	bfa6      	itte	ge
 8013e6c:	461d      	movge	r5, r3
 8013e6e:	2600      	movge	r6, #0
 8013e70:	2601      	movlt	r6, #1
 8013e72:	f7ff fdb2 	bl	80139da <_Balloc>
 8013e76:	692b      	ldr	r3, [r5, #16]
 8013e78:	60c6      	str	r6, [r0, #12]
 8013e7a:	6926      	ldr	r6, [r4, #16]
 8013e7c:	f105 0914 	add.w	r9, r5, #20
 8013e80:	f104 0214 	add.w	r2, r4, #20
 8013e84:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8013e88:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013e8c:	f100 0514 	add.w	r5, r0, #20
 8013e90:	f04f 0e00 	mov.w	lr, #0
 8013e94:	f852 ab04 	ldr.w	sl, [r2], #4
 8013e98:	f859 4b04 	ldr.w	r4, [r9], #4
 8013e9c:	fa1e f18a 	uxtah	r1, lr, sl
 8013ea0:	b2a3      	uxth	r3, r4
 8013ea2:	1ac9      	subs	r1, r1, r3
 8013ea4:	0c23      	lsrs	r3, r4, #16
 8013ea6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8013eaa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013eae:	b289      	uxth	r1, r1
 8013eb0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013eb4:	45c8      	cmp	r8, r9
 8013eb6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8013eba:	4694      	mov	ip, r2
 8013ebc:	f845 3b04 	str.w	r3, [r5], #4
 8013ec0:	d8e8      	bhi.n	8013e94 <__mdiff+0x5c>
 8013ec2:	45bc      	cmp	ip, r7
 8013ec4:	d304      	bcc.n	8013ed0 <__mdiff+0x98>
 8013ec6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8013eca:	b183      	cbz	r3, 8013eee <__mdiff+0xb6>
 8013ecc:	6106      	str	r6, [r0, #16]
 8013ece:	e7c5      	b.n	8013e5c <__mdiff+0x24>
 8013ed0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013ed4:	fa1e f381 	uxtah	r3, lr, r1
 8013ed8:	141a      	asrs	r2, r3, #16
 8013eda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013ede:	b29b      	uxth	r3, r3
 8013ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013ee4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8013ee8:	f845 3b04 	str.w	r3, [r5], #4
 8013eec:	e7e9      	b.n	8013ec2 <__mdiff+0x8a>
 8013eee:	3e01      	subs	r6, #1
 8013ef0:	e7e9      	b.n	8013ec6 <__mdiff+0x8e>

08013ef2 <__d2b>:
 8013ef2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ef6:	460e      	mov	r6, r1
 8013ef8:	2101      	movs	r1, #1
 8013efa:	ec59 8b10 	vmov	r8, r9, d0
 8013efe:	4615      	mov	r5, r2
 8013f00:	f7ff fd6b 	bl	80139da <_Balloc>
 8013f04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8013f08:	4607      	mov	r7, r0
 8013f0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013f0e:	bb34      	cbnz	r4, 8013f5e <__d2b+0x6c>
 8013f10:	9301      	str	r3, [sp, #4]
 8013f12:	f1b8 0300 	subs.w	r3, r8, #0
 8013f16:	d027      	beq.n	8013f68 <__d2b+0x76>
 8013f18:	a802      	add	r0, sp, #8
 8013f1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8013f1e:	f7ff fe01 	bl	8013b24 <__lo0bits>
 8013f22:	9900      	ldr	r1, [sp, #0]
 8013f24:	b1f0      	cbz	r0, 8013f64 <__d2b+0x72>
 8013f26:	9a01      	ldr	r2, [sp, #4]
 8013f28:	f1c0 0320 	rsb	r3, r0, #32
 8013f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8013f30:	430b      	orrs	r3, r1
 8013f32:	40c2      	lsrs	r2, r0
 8013f34:	617b      	str	r3, [r7, #20]
 8013f36:	9201      	str	r2, [sp, #4]
 8013f38:	9b01      	ldr	r3, [sp, #4]
 8013f3a:	61bb      	str	r3, [r7, #24]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	bf14      	ite	ne
 8013f40:	2102      	movne	r1, #2
 8013f42:	2101      	moveq	r1, #1
 8013f44:	6139      	str	r1, [r7, #16]
 8013f46:	b1c4      	cbz	r4, 8013f7a <__d2b+0x88>
 8013f48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8013f4c:	4404      	add	r4, r0
 8013f4e:	6034      	str	r4, [r6, #0]
 8013f50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013f54:	6028      	str	r0, [r5, #0]
 8013f56:	4638      	mov	r0, r7
 8013f58:	b003      	add	sp, #12
 8013f5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013f62:	e7d5      	b.n	8013f10 <__d2b+0x1e>
 8013f64:	6179      	str	r1, [r7, #20]
 8013f66:	e7e7      	b.n	8013f38 <__d2b+0x46>
 8013f68:	a801      	add	r0, sp, #4
 8013f6a:	f7ff fddb 	bl	8013b24 <__lo0bits>
 8013f6e:	9b01      	ldr	r3, [sp, #4]
 8013f70:	617b      	str	r3, [r7, #20]
 8013f72:	2101      	movs	r1, #1
 8013f74:	6139      	str	r1, [r7, #16]
 8013f76:	3020      	adds	r0, #32
 8013f78:	e7e5      	b.n	8013f46 <__d2b+0x54>
 8013f7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013f7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013f82:	6030      	str	r0, [r6, #0]
 8013f84:	6918      	ldr	r0, [r3, #16]
 8013f86:	f7ff fdae 	bl	8013ae6 <__hi0bits>
 8013f8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013f8e:	e7e1      	b.n	8013f54 <__d2b+0x62>

08013f90 <_calloc_r>:
 8013f90:	b538      	push	{r3, r4, r5, lr}
 8013f92:	fb02 f401 	mul.w	r4, r2, r1
 8013f96:	4621      	mov	r1, r4
 8013f98:	f7fd fd28 	bl	80119ec <_malloc_r>
 8013f9c:	4605      	mov	r5, r0
 8013f9e:	b118      	cbz	r0, 8013fa8 <_calloc_r+0x18>
 8013fa0:	4622      	mov	r2, r4
 8013fa2:	2100      	movs	r1, #0
 8013fa4:	f7fd fccb 	bl	801193e <memset>
 8013fa8:	4628      	mov	r0, r5
 8013faa:	bd38      	pop	{r3, r4, r5, pc}

08013fac <_realloc_r>:
 8013fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fae:	4607      	mov	r7, r0
 8013fb0:	4614      	mov	r4, r2
 8013fb2:	460e      	mov	r6, r1
 8013fb4:	b921      	cbnz	r1, 8013fc0 <_realloc_r+0x14>
 8013fb6:	4611      	mov	r1, r2
 8013fb8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013fbc:	f7fd bd16 	b.w	80119ec <_malloc_r>
 8013fc0:	b922      	cbnz	r2, 8013fcc <_realloc_r+0x20>
 8013fc2:	f7fd fcc5 	bl	8011950 <_free_r>
 8013fc6:	4625      	mov	r5, r4
 8013fc8:	4628      	mov	r0, r5
 8013fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fcc:	f000 f9f0 	bl	80143b0 <_malloc_usable_size_r>
 8013fd0:	42a0      	cmp	r0, r4
 8013fd2:	d20f      	bcs.n	8013ff4 <_realloc_r+0x48>
 8013fd4:	4621      	mov	r1, r4
 8013fd6:	4638      	mov	r0, r7
 8013fd8:	f7fd fd08 	bl	80119ec <_malloc_r>
 8013fdc:	4605      	mov	r5, r0
 8013fde:	2800      	cmp	r0, #0
 8013fe0:	d0f2      	beq.n	8013fc8 <_realloc_r+0x1c>
 8013fe2:	4631      	mov	r1, r6
 8013fe4:	4622      	mov	r2, r4
 8013fe6:	f7fd fc9f 	bl	8011928 <memcpy>
 8013fea:	4631      	mov	r1, r6
 8013fec:	4638      	mov	r0, r7
 8013fee:	f7fd fcaf 	bl	8011950 <_free_r>
 8013ff2:	e7e9      	b.n	8013fc8 <_realloc_r+0x1c>
 8013ff4:	4635      	mov	r5, r6
 8013ff6:	e7e7      	b.n	8013fc8 <_realloc_r+0x1c>

08013ff8 <__ssputs_r>:
 8013ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ffc:	688e      	ldr	r6, [r1, #8]
 8013ffe:	429e      	cmp	r6, r3
 8014000:	4682      	mov	sl, r0
 8014002:	460c      	mov	r4, r1
 8014004:	4690      	mov	r8, r2
 8014006:	4699      	mov	r9, r3
 8014008:	d837      	bhi.n	801407a <__ssputs_r+0x82>
 801400a:	898a      	ldrh	r2, [r1, #12]
 801400c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014010:	d031      	beq.n	8014076 <__ssputs_r+0x7e>
 8014012:	6825      	ldr	r5, [r4, #0]
 8014014:	6909      	ldr	r1, [r1, #16]
 8014016:	1a6f      	subs	r7, r5, r1
 8014018:	6965      	ldr	r5, [r4, #20]
 801401a:	2302      	movs	r3, #2
 801401c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014020:	fb95 f5f3 	sdiv	r5, r5, r3
 8014024:	f109 0301 	add.w	r3, r9, #1
 8014028:	443b      	add	r3, r7
 801402a:	429d      	cmp	r5, r3
 801402c:	bf38      	it	cc
 801402e:	461d      	movcc	r5, r3
 8014030:	0553      	lsls	r3, r2, #21
 8014032:	d530      	bpl.n	8014096 <__ssputs_r+0x9e>
 8014034:	4629      	mov	r1, r5
 8014036:	f7fd fcd9 	bl	80119ec <_malloc_r>
 801403a:	4606      	mov	r6, r0
 801403c:	b950      	cbnz	r0, 8014054 <__ssputs_r+0x5c>
 801403e:	230c      	movs	r3, #12
 8014040:	f8ca 3000 	str.w	r3, [sl]
 8014044:	89a3      	ldrh	r3, [r4, #12]
 8014046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801404a:	81a3      	strh	r3, [r4, #12]
 801404c:	f04f 30ff 	mov.w	r0, #4294967295
 8014050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014054:	463a      	mov	r2, r7
 8014056:	6921      	ldr	r1, [r4, #16]
 8014058:	f7fd fc66 	bl	8011928 <memcpy>
 801405c:	89a3      	ldrh	r3, [r4, #12]
 801405e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014066:	81a3      	strh	r3, [r4, #12]
 8014068:	6126      	str	r6, [r4, #16]
 801406a:	6165      	str	r5, [r4, #20]
 801406c:	443e      	add	r6, r7
 801406e:	1bed      	subs	r5, r5, r7
 8014070:	6026      	str	r6, [r4, #0]
 8014072:	60a5      	str	r5, [r4, #8]
 8014074:	464e      	mov	r6, r9
 8014076:	454e      	cmp	r6, r9
 8014078:	d900      	bls.n	801407c <__ssputs_r+0x84>
 801407a:	464e      	mov	r6, r9
 801407c:	4632      	mov	r2, r6
 801407e:	4641      	mov	r1, r8
 8014080:	6820      	ldr	r0, [r4, #0]
 8014082:	f7ff fc8f 	bl	80139a4 <memmove>
 8014086:	68a3      	ldr	r3, [r4, #8]
 8014088:	1b9b      	subs	r3, r3, r6
 801408a:	60a3      	str	r3, [r4, #8]
 801408c:	6823      	ldr	r3, [r4, #0]
 801408e:	441e      	add	r6, r3
 8014090:	6026      	str	r6, [r4, #0]
 8014092:	2000      	movs	r0, #0
 8014094:	e7dc      	b.n	8014050 <__ssputs_r+0x58>
 8014096:	462a      	mov	r2, r5
 8014098:	f7ff ff88 	bl	8013fac <_realloc_r>
 801409c:	4606      	mov	r6, r0
 801409e:	2800      	cmp	r0, #0
 80140a0:	d1e2      	bne.n	8014068 <__ssputs_r+0x70>
 80140a2:	6921      	ldr	r1, [r4, #16]
 80140a4:	4650      	mov	r0, sl
 80140a6:	f7fd fc53 	bl	8011950 <_free_r>
 80140aa:	e7c8      	b.n	801403e <__ssputs_r+0x46>

080140ac <_svfiprintf_r>:
 80140ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140b0:	461d      	mov	r5, r3
 80140b2:	898b      	ldrh	r3, [r1, #12]
 80140b4:	061f      	lsls	r7, r3, #24
 80140b6:	b09d      	sub	sp, #116	; 0x74
 80140b8:	4680      	mov	r8, r0
 80140ba:	460c      	mov	r4, r1
 80140bc:	4616      	mov	r6, r2
 80140be:	d50f      	bpl.n	80140e0 <_svfiprintf_r+0x34>
 80140c0:	690b      	ldr	r3, [r1, #16]
 80140c2:	b96b      	cbnz	r3, 80140e0 <_svfiprintf_r+0x34>
 80140c4:	2140      	movs	r1, #64	; 0x40
 80140c6:	f7fd fc91 	bl	80119ec <_malloc_r>
 80140ca:	6020      	str	r0, [r4, #0]
 80140cc:	6120      	str	r0, [r4, #16]
 80140ce:	b928      	cbnz	r0, 80140dc <_svfiprintf_r+0x30>
 80140d0:	230c      	movs	r3, #12
 80140d2:	f8c8 3000 	str.w	r3, [r8]
 80140d6:	f04f 30ff 	mov.w	r0, #4294967295
 80140da:	e0c8      	b.n	801426e <_svfiprintf_r+0x1c2>
 80140dc:	2340      	movs	r3, #64	; 0x40
 80140de:	6163      	str	r3, [r4, #20]
 80140e0:	2300      	movs	r3, #0
 80140e2:	9309      	str	r3, [sp, #36]	; 0x24
 80140e4:	2320      	movs	r3, #32
 80140e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80140ea:	2330      	movs	r3, #48	; 0x30
 80140ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80140f0:	9503      	str	r5, [sp, #12]
 80140f2:	f04f 0b01 	mov.w	fp, #1
 80140f6:	4637      	mov	r7, r6
 80140f8:	463d      	mov	r5, r7
 80140fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80140fe:	b10b      	cbz	r3, 8014104 <_svfiprintf_r+0x58>
 8014100:	2b25      	cmp	r3, #37	; 0x25
 8014102:	d13e      	bne.n	8014182 <_svfiprintf_r+0xd6>
 8014104:	ebb7 0a06 	subs.w	sl, r7, r6
 8014108:	d00b      	beq.n	8014122 <_svfiprintf_r+0x76>
 801410a:	4653      	mov	r3, sl
 801410c:	4632      	mov	r2, r6
 801410e:	4621      	mov	r1, r4
 8014110:	4640      	mov	r0, r8
 8014112:	f7ff ff71 	bl	8013ff8 <__ssputs_r>
 8014116:	3001      	adds	r0, #1
 8014118:	f000 80a4 	beq.w	8014264 <_svfiprintf_r+0x1b8>
 801411c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801411e:	4453      	add	r3, sl
 8014120:	9309      	str	r3, [sp, #36]	; 0x24
 8014122:	783b      	ldrb	r3, [r7, #0]
 8014124:	2b00      	cmp	r3, #0
 8014126:	f000 809d 	beq.w	8014264 <_svfiprintf_r+0x1b8>
 801412a:	2300      	movs	r3, #0
 801412c:	f04f 32ff 	mov.w	r2, #4294967295
 8014130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014134:	9304      	str	r3, [sp, #16]
 8014136:	9307      	str	r3, [sp, #28]
 8014138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801413c:	931a      	str	r3, [sp, #104]	; 0x68
 801413e:	462f      	mov	r7, r5
 8014140:	2205      	movs	r2, #5
 8014142:	f817 1b01 	ldrb.w	r1, [r7], #1
 8014146:	4850      	ldr	r0, [pc, #320]	; (8014288 <_svfiprintf_r+0x1dc>)
 8014148:	f7ec f86a 	bl	8000220 <memchr>
 801414c:	9b04      	ldr	r3, [sp, #16]
 801414e:	b9d0      	cbnz	r0, 8014186 <_svfiprintf_r+0xda>
 8014150:	06d9      	lsls	r1, r3, #27
 8014152:	bf44      	itt	mi
 8014154:	2220      	movmi	r2, #32
 8014156:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801415a:	071a      	lsls	r2, r3, #28
 801415c:	bf44      	itt	mi
 801415e:	222b      	movmi	r2, #43	; 0x2b
 8014160:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014164:	782a      	ldrb	r2, [r5, #0]
 8014166:	2a2a      	cmp	r2, #42	; 0x2a
 8014168:	d015      	beq.n	8014196 <_svfiprintf_r+0xea>
 801416a:	9a07      	ldr	r2, [sp, #28]
 801416c:	462f      	mov	r7, r5
 801416e:	2000      	movs	r0, #0
 8014170:	250a      	movs	r5, #10
 8014172:	4639      	mov	r1, r7
 8014174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014178:	3b30      	subs	r3, #48	; 0x30
 801417a:	2b09      	cmp	r3, #9
 801417c:	d94d      	bls.n	801421a <_svfiprintf_r+0x16e>
 801417e:	b1b8      	cbz	r0, 80141b0 <_svfiprintf_r+0x104>
 8014180:	e00f      	b.n	80141a2 <_svfiprintf_r+0xf6>
 8014182:	462f      	mov	r7, r5
 8014184:	e7b8      	b.n	80140f8 <_svfiprintf_r+0x4c>
 8014186:	4a40      	ldr	r2, [pc, #256]	; (8014288 <_svfiprintf_r+0x1dc>)
 8014188:	1a80      	subs	r0, r0, r2
 801418a:	fa0b f000 	lsl.w	r0, fp, r0
 801418e:	4318      	orrs	r0, r3
 8014190:	9004      	str	r0, [sp, #16]
 8014192:	463d      	mov	r5, r7
 8014194:	e7d3      	b.n	801413e <_svfiprintf_r+0x92>
 8014196:	9a03      	ldr	r2, [sp, #12]
 8014198:	1d11      	adds	r1, r2, #4
 801419a:	6812      	ldr	r2, [r2, #0]
 801419c:	9103      	str	r1, [sp, #12]
 801419e:	2a00      	cmp	r2, #0
 80141a0:	db01      	blt.n	80141a6 <_svfiprintf_r+0xfa>
 80141a2:	9207      	str	r2, [sp, #28]
 80141a4:	e004      	b.n	80141b0 <_svfiprintf_r+0x104>
 80141a6:	4252      	negs	r2, r2
 80141a8:	f043 0302 	orr.w	r3, r3, #2
 80141ac:	9207      	str	r2, [sp, #28]
 80141ae:	9304      	str	r3, [sp, #16]
 80141b0:	783b      	ldrb	r3, [r7, #0]
 80141b2:	2b2e      	cmp	r3, #46	; 0x2e
 80141b4:	d10c      	bne.n	80141d0 <_svfiprintf_r+0x124>
 80141b6:	787b      	ldrb	r3, [r7, #1]
 80141b8:	2b2a      	cmp	r3, #42	; 0x2a
 80141ba:	d133      	bne.n	8014224 <_svfiprintf_r+0x178>
 80141bc:	9b03      	ldr	r3, [sp, #12]
 80141be:	1d1a      	adds	r2, r3, #4
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	9203      	str	r2, [sp, #12]
 80141c4:	2b00      	cmp	r3, #0
 80141c6:	bfb8      	it	lt
 80141c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80141cc:	3702      	adds	r7, #2
 80141ce:	9305      	str	r3, [sp, #20]
 80141d0:	4d2e      	ldr	r5, [pc, #184]	; (801428c <_svfiprintf_r+0x1e0>)
 80141d2:	7839      	ldrb	r1, [r7, #0]
 80141d4:	2203      	movs	r2, #3
 80141d6:	4628      	mov	r0, r5
 80141d8:	f7ec f822 	bl	8000220 <memchr>
 80141dc:	b138      	cbz	r0, 80141ee <_svfiprintf_r+0x142>
 80141de:	2340      	movs	r3, #64	; 0x40
 80141e0:	1b40      	subs	r0, r0, r5
 80141e2:	fa03 f000 	lsl.w	r0, r3, r0
 80141e6:	9b04      	ldr	r3, [sp, #16]
 80141e8:	4303      	orrs	r3, r0
 80141ea:	3701      	adds	r7, #1
 80141ec:	9304      	str	r3, [sp, #16]
 80141ee:	7839      	ldrb	r1, [r7, #0]
 80141f0:	4827      	ldr	r0, [pc, #156]	; (8014290 <_svfiprintf_r+0x1e4>)
 80141f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80141f6:	2206      	movs	r2, #6
 80141f8:	1c7e      	adds	r6, r7, #1
 80141fa:	f7ec f811 	bl	8000220 <memchr>
 80141fe:	2800      	cmp	r0, #0
 8014200:	d038      	beq.n	8014274 <_svfiprintf_r+0x1c8>
 8014202:	4b24      	ldr	r3, [pc, #144]	; (8014294 <_svfiprintf_r+0x1e8>)
 8014204:	bb13      	cbnz	r3, 801424c <_svfiprintf_r+0x1a0>
 8014206:	9b03      	ldr	r3, [sp, #12]
 8014208:	3307      	adds	r3, #7
 801420a:	f023 0307 	bic.w	r3, r3, #7
 801420e:	3308      	adds	r3, #8
 8014210:	9303      	str	r3, [sp, #12]
 8014212:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014214:	444b      	add	r3, r9
 8014216:	9309      	str	r3, [sp, #36]	; 0x24
 8014218:	e76d      	b.n	80140f6 <_svfiprintf_r+0x4a>
 801421a:	fb05 3202 	mla	r2, r5, r2, r3
 801421e:	2001      	movs	r0, #1
 8014220:	460f      	mov	r7, r1
 8014222:	e7a6      	b.n	8014172 <_svfiprintf_r+0xc6>
 8014224:	2300      	movs	r3, #0
 8014226:	3701      	adds	r7, #1
 8014228:	9305      	str	r3, [sp, #20]
 801422a:	4619      	mov	r1, r3
 801422c:	250a      	movs	r5, #10
 801422e:	4638      	mov	r0, r7
 8014230:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014234:	3a30      	subs	r2, #48	; 0x30
 8014236:	2a09      	cmp	r2, #9
 8014238:	d903      	bls.n	8014242 <_svfiprintf_r+0x196>
 801423a:	2b00      	cmp	r3, #0
 801423c:	d0c8      	beq.n	80141d0 <_svfiprintf_r+0x124>
 801423e:	9105      	str	r1, [sp, #20]
 8014240:	e7c6      	b.n	80141d0 <_svfiprintf_r+0x124>
 8014242:	fb05 2101 	mla	r1, r5, r1, r2
 8014246:	2301      	movs	r3, #1
 8014248:	4607      	mov	r7, r0
 801424a:	e7f0      	b.n	801422e <_svfiprintf_r+0x182>
 801424c:	ab03      	add	r3, sp, #12
 801424e:	9300      	str	r3, [sp, #0]
 8014250:	4622      	mov	r2, r4
 8014252:	4b11      	ldr	r3, [pc, #68]	; (8014298 <_svfiprintf_r+0x1ec>)
 8014254:	a904      	add	r1, sp, #16
 8014256:	4640      	mov	r0, r8
 8014258:	f7fd fdf6 	bl	8011e48 <_printf_float>
 801425c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014260:	4681      	mov	r9, r0
 8014262:	d1d6      	bne.n	8014212 <_svfiprintf_r+0x166>
 8014264:	89a3      	ldrh	r3, [r4, #12]
 8014266:	065b      	lsls	r3, r3, #25
 8014268:	f53f af35 	bmi.w	80140d6 <_svfiprintf_r+0x2a>
 801426c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801426e:	b01d      	add	sp, #116	; 0x74
 8014270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014274:	ab03      	add	r3, sp, #12
 8014276:	9300      	str	r3, [sp, #0]
 8014278:	4622      	mov	r2, r4
 801427a:	4b07      	ldr	r3, [pc, #28]	; (8014298 <_svfiprintf_r+0x1ec>)
 801427c:	a904      	add	r1, sp, #16
 801427e:	4640      	mov	r0, r8
 8014280:	f7fe f898 	bl	80123b4 <_printf_i>
 8014284:	e7ea      	b.n	801425c <_svfiprintf_r+0x1b0>
 8014286:	bf00      	nop
 8014288:	08017638 	.word	0x08017638
 801428c:	0801763e 	.word	0x0801763e
 8014290:	08017642 	.word	0x08017642
 8014294:	08011e49 	.word	0x08011e49
 8014298:	08013ff9 	.word	0x08013ff9

0801429c <_read_r>:
 801429c:	b538      	push	{r3, r4, r5, lr}
 801429e:	4c07      	ldr	r4, [pc, #28]	; (80142bc <_read_r+0x20>)
 80142a0:	4605      	mov	r5, r0
 80142a2:	4608      	mov	r0, r1
 80142a4:	4611      	mov	r1, r2
 80142a6:	2200      	movs	r2, #0
 80142a8:	6022      	str	r2, [r4, #0]
 80142aa:	461a      	mov	r2, r3
 80142ac:	f7f0 ff7e 	bl	80051ac <_read>
 80142b0:	1c43      	adds	r3, r0, #1
 80142b2:	d102      	bne.n	80142ba <_read_r+0x1e>
 80142b4:	6823      	ldr	r3, [r4, #0]
 80142b6:	b103      	cbz	r3, 80142ba <_read_r+0x1e>
 80142b8:	602b      	str	r3, [r5, #0]
 80142ba:	bd38      	pop	{r3, r4, r5, pc}
 80142bc:	200065a8 	.word	0x200065a8

080142c0 <_raise_r>:
 80142c0:	291f      	cmp	r1, #31
 80142c2:	b538      	push	{r3, r4, r5, lr}
 80142c4:	4604      	mov	r4, r0
 80142c6:	460d      	mov	r5, r1
 80142c8:	d904      	bls.n	80142d4 <_raise_r+0x14>
 80142ca:	2316      	movs	r3, #22
 80142cc:	6003      	str	r3, [r0, #0]
 80142ce:	f04f 30ff 	mov.w	r0, #4294967295
 80142d2:	bd38      	pop	{r3, r4, r5, pc}
 80142d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80142d6:	b112      	cbz	r2, 80142de <_raise_r+0x1e>
 80142d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142dc:	b94b      	cbnz	r3, 80142f2 <_raise_r+0x32>
 80142de:	4620      	mov	r0, r4
 80142e0:	f000 f830 	bl	8014344 <_getpid_r>
 80142e4:	462a      	mov	r2, r5
 80142e6:	4601      	mov	r1, r0
 80142e8:	4620      	mov	r0, r4
 80142ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142ee:	f000 b817 	b.w	8014320 <_kill_r>
 80142f2:	2b01      	cmp	r3, #1
 80142f4:	d00a      	beq.n	801430c <_raise_r+0x4c>
 80142f6:	1c59      	adds	r1, r3, #1
 80142f8:	d103      	bne.n	8014302 <_raise_r+0x42>
 80142fa:	2316      	movs	r3, #22
 80142fc:	6003      	str	r3, [r0, #0]
 80142fe:	2001      	movs	r0, #1
 8014300:	e7e7      	b.n	80142d2 <_raise_r+0x12>
 8014302:	2400      	movs	r4, #0
 8014304:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014308:	4628      	mov	r0, r5
 801430a:	4798      	blx	r3
 801430c:	2000      	movs	r0, #0
 801430e:	e7e0      	b.n	80142d2 <_raise_r+0x12>

08014310 <raise>:
 8014310:	4b02      	ldr	r3, [pc, #8]	; (801431c <raise+0xc>)
 8014312:	4601      	mov	r1, r0
 8014314:	6818      	ldr	r0, [r3, #0]
 8014316:	f7ff bfd3 	b.w	80142c0 <_raise_r>
 801431a:	bf00      	nop
 801431c:	20000430 	.word	0x20000430

08014320 <_kill_r>:
 8014320:	b538      	push	{r3, r4, r5, lr}
 8014322:	4c07      	ldr	r4, [pc, #28]	; (8014340 <_kill_r+0x20>)
 8014324:	2300      	movs	r3, #0
 8014326:	4605      	mov	r5, r0
 8014328:	4608      	mov	r0, r1
 801432a:	4611      	mov	r1, r2
 801432c:	6023      	str	r3, [r4, #0]
 801432e:	f7f0 ff23 	bl	8005178 <_kill>
 8014332:	1c43      	adds	r3, r0, #1
 8014334:	d102      	bne.n	801433c <_kill_r+0x1c>
 8014336:	6823      	ldr	r3, [r4, #0]
 8014338:	b103      	cbz	r3, 801433c <_kill_r+0x1c>
 801433a:	602b      	str	r3, [r5, #0]
 801433c:	bd38      	pop	{r3, r4, r5, pc}
 801433e:	bf00      	nop
 8014340:	200065a8 	.word	0x200065a8

08014344 <_getpid_r>:
 8014344:	f7f0 bf10 	b.w	8005168 <_getpid>

08014348 <_fstat_r>:
 8014348:	b538      	push	{r3, r4, r5, lr}
 801434a:	4c07      	ldr	r4, [pc, #28]	; (8014368 <_fstat_r+0x20>)
 801434c:	2300      	movs	r3, #0
 801434e:	4605      	mov	r5, r0
 8014350:	4608      	mov	r0, r1
 8014352:	4611      	mov	r1, r2
 8014354:	6023      	str	r3, [r4, #0]
 8014356:	f7f0 ff6e 	bl	8005236 <_fstat>
 801435a:	1c43      	adds	r3, r0, #1
 801435c:	d102      	bne.n	8014364 <_fstat_r+0x1c>
 801435e:	6823      	ldr	r3, [r4, #0]
 8014360:	b103      	cbz	r3, 8014364 <_fstat_r+0x1c>
 8014362:	602b      	str	r3, [r5, #0]
 8014364:	bd38      	pop	{r3, r4, r5, pc}
 8014366:	bf00      	nop
 8014368:	200065a8 	.word	0x200065a8

0801436c <_isatty_r>:
 801436c:	b538      	push	{r3, r4, r5, lr}
 801436e:	4c06      	ldr	r4, [pc, #24]	; (8014388 <_isatty_r+0x1c>)
 8014370:	2300      	movs	r3, #0
 8014372:	4605      	mov	r5, r0
 8014374:	4608      	mov	r0, r1
 8014376:	6023      	str	r3, [r4, #0]
 8014378:	f7f0 ff6d 	bl	8005256 <_isatty>
 801437c:	1c43      	adds	r3, r0, #1
 801437e:	d102      	bne.n	8014386 <_isatty_r+0x1a>
 8014380:	6823      	ldr	r3, [r4, #0]
 8014382:	b103      	cbz	r3, 8014386 <_isatty_r+0x1a>
 8014384:	602b      	str	r3, [r5, #0]
 8014386:	bd38      	pop	{r3, r4, r5, pc}
 8014388:	200065a8 	.word	0x200065a8

0801438c <__ascii_mbtowc>:
 801438c:	b082      	sub	sp, #8
 801438e:	b901      	cbnz	r1, 8014392 <__ascii_mbtowc+0x6>
 8014390:	a901      	add	r1, sp, #4
 8014392:	b142      	cbz	r2, 80143a6 <__ascii_mbtowc+0x1a>
 8014394:	b14b      	cbz	r3, 80143aa <__ascii_mbtowc+0x1e>
 8014396:	7813      	ldrb	r3, [r2, #0]
 8014398:	600b      	str	r3, [r1, #0]
 801439a:	7812      	ldrb	r2, [r2, #0]
 801439c:	1c10      	adds	r0, r2, #0
 801439e:	bf18      	it	ne
 80143a0:	2001      	movne	r0, #1
 80143a2:	b002      	add	sp, #8
 80143a4:	4770      	bx	lr
 80143a6:	4610      	mov	r0, r2
 80143a8:	e7fb      	b.n	80143a2 <__ascii_mbtowc+0x16>
 80143aa:	f06f 0001 	mvn.w	r0, #1
 80143ae:	e7f8      	b.n	80143a2 <__ascii_mbtowc+0x16>

080143b0 <_malloc_usable_size_r>:
 80143b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143b4:	1f18      	subs	r0, r3, #4
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	bfbc      	itt	lt
 80143ba:	580b      	ldrlt	r3, [r1, r0]
 80143bc:	18c0      	addlt	r0, r0, r3
 80143be:	4770      	bx	lr

080143c0 <__ascii_wctomb>:
 80143c0:	b149      	cbz	r1, 80143d6 <__ascii_wctomb+0x16>
 80143c2:	2aff      	cmp	r2, #255	; 0xff
 80143c4:	bf85      	ittet	hi
 80143c6:	238a      	movhi	r3, #138	; 0x8a
 80143c8:	6003      	strhi	r3, [r0, #0]
 80143ca:	700a      	strbls	r2, [r1, #0]
 80143cc:	f04f 30ff 	movhi.w	r0, #4294967295
 80143d0:	bf98      	it	ls
 80143d2:	2001      	movls	r0, #1
 80143d4:	4770      	bx	lr
 80143d6:	4608      	mov	r0, r1
 80143d8:	4770      	bx	lr
 80143da:	0000      	movs	r0, r0
 80143dc:	0000      	movs	r0, r0
	...

080143e0 <cos>:
 80143e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80143e2:	ec51 0b10 	vmov	r0, r1, d0
 80143e6:	4a1e      	ldr	r2, [pc, #120]	; (8014460 <cos+0x80>)
 80143e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80143ec:	4293      	cmp	r3, r2
 80143ee:	dc06      	bgt.n	80143fe <cos+0x1e>
 80143f0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8014458 <cos+0x78>
 80143f4:	f001 fd94 	bl	8015f20 <__kernel_cos>
 80143f8:	ec51 0b10 	vmov	r0, r1, d0
 80143fc:	e007      	b.n	801440e <cos+0x2e>
 80143fe:	4a19      	ldr	r2, [pc, #100]	; (8014464 <cos+0x84>)
 8014400:	4293      	cmp	r3, r2
 8014402:	dd09      	ble.n	8014418 <cos+0x38>
 8014404:	ee10 2a10 	vmov	r2, s0
 8014408:	460b      	mov	r3, r1
 801440a:	f7eb ff5d 	bl	80002c8 <__aeabi_dsub>
 801440e:	ec41 0b10 	vmov	d0, r0, r1
 8014412:	b005      	add	sp, #20
 8014414:	f85d fb04 	ldr.w	pc, [sp], #4
 8014418:	4668      	mov	r0, sp
 801441a:	f001 fadd 	bl	80159d8 <__ieee754_rem_pio2>
 801441e:	f000 0003 	and.w	r0, r0, #3
 8014422:	2801      	cmp	r0, #1
 8014424:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014428:	ed9d 0b00 	vldr	d0, [sp]
 801442c:	d007      	beq.n	801443e <cos+0x5e>
 801442e:	2802      	cmp	r0, #2
 8014430:	d00e      	beq.n	8014450 <cos+0x70>
 8014432:	2800      	cmp	r0, #0
 8014434:	d0de      	beq.n	80143f4 <cos+0x14>
 8014436:	2001      	movs	r0, #1
 8014438:	f002 f97a 	bl	8016730 <__kernel_sin>
 801443c:	e7dc      	b.n	80143f8 <cos+0x18>
 801443e:	f002 f977 	bl	8016730 <__kernel_sin>
 8014442:	ec53 2b10 	vmov	r2, r3, d0
 8014446:	ee10 0a10 	vmov	r0, s0
 801444a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801444e:	e7de      	b.n	801440e <cos+0x2e>
 8014450:	f001 fd66 	bl	8015f20 <__kernel_cos>
 8014454:	e7f5      	b.n	8014442 <cos+0x62>
 8014456:	bf00      	nop
	...
 8014460:	3fe921fb 	.word	0x3fe921fb
 8014464:	7fefffff 	.word	0x7fefffff

08014468 <round>:
 8014468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801446a:	ec57 6b10 	vmov	r6, r7, d0
 801446e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8014472:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8014476:	2c13      	cmp	r4, #19
 8014478:	463b      	mov	r3, r7
 801447a:	463d      	mov	r5, r7
 801447c:	dc17      	bgt.n	80144ae <round+0x46>
 801447e:	2c00      	cmp	r4, #0
 8014480:	da09      	bge.n	8014496 <round+0x2e>
 8014482:	3401      	adds	r4, #1
 8014484:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8014488:	d103      	bne.n	8014492 <round+0x2a>
 801448a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801448e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8014492:	2100      	movs	r1, #0
 8014494:	e02c      	b.n	80144f0 <round+0x88>
 8014496:	4a18      	ldr	r2, [pc, #96]	; (80144f8 <round+0x90>)
 8014498:	4122      	asrs	r2, r4
 801449a:	4217      	tst	r7, r2
 801449c:	d100      	bne.n	80144a0 <round+0x38>
 801449e:	b19e      	cbz	r6, 80144c8 <round+0x60>
 80144a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80144a4:	4123      	asrs	r3, r4
 80144a6:	442b      	add	r3, r5
 80144a8:	ea23 0302 	bic.w	r3, r3, r2
 80144ac:	e7f1      	b.n	8014492 <round+0x2a>
 80144ae:	2c33      	cmp	r4, #51	; 0x33
 80144b0:	dd0d      	ble.n	80144ce <round+0x66>
 80144b2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80144b6:	d107      	bne.n	80144c8 <round+0x60>
 80144b8:	4630      	mov	r0, r6
 80144ba:	4639      	mov	r1, r7
 80144bc:	ee10 2a10 	vmov	r2, s0
 80144c0:	f7eb ff04 	bl	80002cc <__adddf3>
 80144c4:	4606      	mov	r6, r0
 80144c6:	460f      	mov	r7, r1
 80144c8:	ec47 6b10 	vmov	d0, r6, r7
 80144cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144ce:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80144d2:	f04f 30ff 	mov.w	r0, #4294967295
 80144d6:	40d0      	lsrs	r0, r2
 80144d8:	4206      	tst	r6, r0
 80144da:	d0f5      	beq.n	80144c8 <round+0x60>
 80144dc:	2201      	movs	r2, #1
 80144de:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80144e2:	fa02 f404 	lsl.w	r4, r2, r4
 80144e6:	1931      	adds	r1, r6, r4
 80144e8:	bf28      	it	cs
 80144ea:	189b      	addcs	r3, r3, r2
 80144ec:	ea21 0100 	bic.w	r1, r1, r0
 80144f0:	461f      	mov	r7, r3
 80144f2:	460e      	mov	r6, r1
 80144f4:	e7e8      	b.n	80144c8 <round+0x60>
 80144f6:	bf00      	nop
 80144f8:	000fffff 	.word	0x000fffff
 80144fc:	00000000 	.word	0x00000000

08014500 <sin>:
 8014500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014502:	ec51 0b10 	vmov	r0, r1, d0
 8014506:	4a20      	ldr	r2, [pc, #128]	; (8014588 <sin+0x88>)
 8014508:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801450c:	4293      	cmp	r3, r2
 801450e:	dc07      	bgt.n	8014520 <sin+0x20>
 8014510:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014580 <sin+0x80>
 8014514:	2000      	movs	r0, #0
 8014516:	f002 f90b 	bl	8016730 <__kernel_sin>
 801451a:	ec51 0b10 	vmov	r0, r1, d0
 801451e:	e007      	b.n	8014530 <sin+0x30>
 8014520:	4a1a      	ldr	r2, [pc, #104]	; (801458c <sin+0x8c>)
 8014522:	4293      	cmp	r3, r2
 8014524:	dd09      	ble.n	801453a <sin+0x3a>
 8014526:	ee10 2a10 	vmov	r2, s0
 801452a:	460b      	mov	r3, r1
 801452c:	f7eb fecc 	bl	80002c8 <__aeabi_dsub>
 8014530:	ec41 0b10 	vmov	d0, r0, r1
 8014534:	b005      	add	sp, #20
 8014536:	f85d fb04 	ldr.w	pc, [sp], #4
 801453a:	4668      	mov	r0, sp
 801453c:	f001 fa4c 	bl	80159d8 <__ieee754_rem_pio2>
 8014540:	f000 0003 	and.w	r0, r0, #3
 8014544:	2801      	cmp	r0, #1
 8014546:	ed9d 1b02 	vldr	d1, [sp, #8]
 801454a:	ed9d 0b00 	vldr	d0, [sp]
 801454e:	d004      	beq.n	801455a <sin+0x5a>
 8014550:	2802      	cmp	r0, #2
 8014552:	d005      	beq.n	8014560 <sin+0x60>
 8014554:	b970      	cbnz	r0, 8014574 <sin+0x74>
 8014556:	2001      	movs	r0, #1
 8014558:	e7dd      	b.n	8014516 <sin+0x16>
 801455a:	f001 fce1 	bl	8015f20 <__kernel_cos>
 801455e:	e7dc      	b.n	801451a <sin+0x1a>
 8014560:	2001      	movs	r0, #1
 8014562:	f002 f8e5 	bl	8016730 <__kernel_sin>
 8014566:	ec53 2b10 	vmov	r2, r3, d0
 801456a:	ee10 0a10 	vmov	r0, s0
 801456e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014572:	e7dd      	b.n	8014530 <sin+0x30>
 8014574:	f001 fcd4 	bl	8015f20 <__kernel_cos>
 8014578:	e7f5      	b.n	8014566 <sin+0x66>
 801457a:	bf00      	nop
 801457c:	f3af 8000 	nop.w
	...
 8014588:	3fe921fb 	.word	0x3fe921fb
 801458c:	7fefffff 	.word	0x7fefffff

08014590 <asin>:
 8014590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014592:	ed2d 8b02 	vpush	{d8}
 8014596:	4e26      	ldr	r6, [pc, #152]	; (8014630 <asin+0xa0>)
 8014598:	b08b      	sub	sp, #44	; 0x2c
 801459a:	ec55 4b10 	vmov	r4, r5, d0
 801459e:	f000 fa1b 	bl	80149d8 <__ieee754_asin>
 80145a2:	f996 3000 	ldrsb.w	r3, [r6]
 80145a6:	eeb0 8a40 	vmov.f32	s16, s0
 80145aa:	eef0 8a60 	vmov.f32	s17, s1
 80145ae:	3301      	adds	r3, #1
 80145b0:	d036      	beq.n	8014620 <asin+0x90>
 80145b2:	4622      	mov	r2, r4
 80145b4:	462b      	mov	r3, r5
 80145b6:	4620      	mov	r0, r4
 80145b8:	4629      	mov	r1, r5
 80145ba:	f7ec fad7 	bl	8000b6c <__aeabi_dcmpun>
 80145be:	4607      	mov	r7, r0
 80145c0:	bb70      	cbnz	r0, 8014620 <asin+0x90>
 80145c2:	ec45 4b10 	vmov	d0, r4, r5
 80145c6:	f002 fb0f 	bl	8016be8 <fabs>
 80145ca:	2200      	movs	r2, #0
 80145cc:	4b19      	ldr	r3, [pc, #100]	; (8014634 <asin+0xa4>)
 80145ce:	ec51 0b10 	vmov	r0, r1, d0
 80145d2:	f7ec fac1 	bl	8000b58 <__aeabi_dcmpgt>
 80145d6:	b318      	cbz	r0, 8014620 <asin+0x90>
 80145d8:	2301      	movs	r3, #1
 80145da:	9300      	str	r3, [sp, #0]
 80145dc:	4816      	ldr	r0, [pc, #88]	; (8014638 <asin+0xa8>)
 80145de:	4b17      	ldr	r3, [pc, #92]	; (801463c <asin+0xac>)
 80145e0:	9301      	str	r3, [sp, #4]
 80145e2:	9708      	str	r7, [sp, #32]
 80145e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80145e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80145ec:	f002 fb98 	bl	8016d20 <nan>
 80145f0:	f996 3000 	ldrsb.w	r3, [r6]
 80145f4:	2b02      	cmp	r3, #2
 80145f6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80145fa:	d104      	bne.n	8014606 <asin+0x76>
 80145fc:	f7fd f948 	bl	8011890 <__errno>
 8014600:	2321      	movs	r3, #33	; 0x21
 8014602:	6003      	str	r3, [r0, #0]
 8014604:	e004      	b.n	8014610 <asin+0x80>
 8014606:	4668      	mov	r0, sp
 8014608:	f002 fb86 	bl	8016d18 <matherr>
 801460c:	2800      	cmp	r0, #0
 801460e:	d0f5      	beq.n	80145fc <asin+0x6c>
 8014610:	9b08      	ldr	r3, [sp, #32]
 8014612:	b11b      	cbz	r3, 801461c <asin+0x8c>
 8014614:	f7fd f93c 	bl	8011890 <__errno>
 8014618:	9b08      	ldr	r3, [sp, #32]
 801461a:	6003      	str	r3, [r0, #0]
 801461c:	ed9d 8b06 	vldr	d8, [sp, #24]
 8014620:	eeb0 0a48 	vmov.f32	s0, s16
 8014624:	eef0 0a68 	vmov.f32	s1, s17
 8014628:	b00b      	add	sp, #44	; 0x2c
 801462a:	ecbd 8b02 	vpop	{d8}
 801462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014630:	20000600 	.word	0x20000600
 8014634:	3ff00000 	.word	0x3ff00000
 8014638:	08017633 	.word	0x08017633
 801463c:	080178f7 	.word	0x080178f7

08014640 <atan2>:
 8014640:	f000 bbda 	b.w	8014df8 <__ieee754_atan2>

08014644 <pow>:
 8014644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014648:	ed2d 8b04 	vpush	{d8-d9}
 801464c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8014920 <pow+0x2dc>
 8014650:	b08d      	sub	sp, #52	; 0x34
 8014652:	ec57 6b10 	vmov	r6, r7, d0
 8014656:	ec55 4b11 	vmov	r4, r5, d1
 801465a:	f000 fcad 	bl	8014fb8 <__ieee754_pow>
 801465e:	f999 3000 	ldrsb.w	r3, [r9]
 8014662:	9300      	str	r3, [sp, #0]
 8014664:	3301      	adds	r3, #1
 8014666:	eeb0 8a40 	vmov.f32	s16, s0
 801466a:	eef0 8a60 	vmov.f32	s17, s1
 801466e:	46c8      	mov	r8, r9
 8014670:	d05f      	beq.n	8014732 <pow+0xee>
 8014672:	4622      	mov	r2, r4
 8014674:	462b      	mov	r3, r5
 8014676:	4620      	mov	r0, r4
 8014678:	4629      	mov	r1, r5
 801467a:	f7ec fa77 	bl	8000b6c <__aeabi_dcmpun>
 801467e:	4683      	mov	fp, r0
 8014680:	2800      	cmp	r0, #0
 8014682:	d156      	bne.n	8014732 <pow+0xee>
 8014684:	4632      	mov	r2, r6
 8014686:	463b      	mov	r3, r7
 8014688:	4630      	mov	r0, r6
 801468a:	4639      	mov	r1, r7
 801468c:	f7ec fa6e 	bl	8000b6c <__aeabi_dcmpun>
 8014690:	9001      	str	r0, [sp, #4]
 8014692:	b1e8      	cbz	r0, 80146d0 <pow+0x8c>
 8014694:	2200      	movs	r2, #0
 8014696:	2300      	movs	r3, #0
 8014698:	4620      	mov	r0, r4
 801469a:	4629      	mov	r1, r5
 801469c:	f7ec fa34 	bl	8000b08 <__aeabi_dcmpeq>
 80146a0:	2800      	cmp	r0, #0
 80146a2:	d046      	beq.n	8014732 <pow+0xee>
 80146a4:	2301      	movs	r3, #1
 80146a6:	9302      	str	r3, [sp, #8]
 80146a8:	4b96      	ldr	r3, [pc, #600]	; (8014904 <pow+0x2c0>)
 80146aa:	9303      	str	r3, [sp, #12]
 80146ac:	4b96      	ldr	r3, [pc, #600]	; (8014908 <pow+0x2c4>)
 80146ae:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80146b2:	2200      	movs	r2, #0
 80146b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80146b8:	9b00      	ldr	r3, [sp, #0]
 80146ba:	2b02      	cmp	r3, #2
 80146bc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80146c0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80146c4:	d033      	beq.n	801472e <pow+0xea>
 80146c6:	a802      	add	r0, sp, #8
 80146c8:	f002 fb26 	bl	8016d18 <matherr>
 80146cc:	bb48      	cbnz	r0, 8014722 <pow+0xde>
 80146ce:	e05d      	b.n	801478c <pow+0x148>
 80146d0:	f04f 0a00 	mov.w	sl, #0
 80146d4:	f04f 0b00 	mov.w	fp, #0
 80146d8:	4652      	mov	r2, sl
 80146da:	465b      	mov	r3, fp
 80146dc:	4630      	mov	r0, r6
 80146de:	4639      	mov	r1, r7
 80146e0:	f7ec fa12 	bl	8000b08 <__aeabi_dcmpeq>
 80146e4:	ec4b ab19 	vmov	d9, sl, fp
 80146e8:	2800      	cmp	r0, #0
 80146ea:	d054      	beq.n	8014796 <pow+0x152>
 80146ec:	4652      	mov	r2, sl
 80146ee:	465b      	mov	r3, fp
 80146f0:	4620      	mov	r0, r4
 80146f2:	4629      	mov	r1, r5
 80146f4:	f7ec fa08 	bl	8000b08 <__aeabi_dcmpeq>
 80146f8:	4680      	mov	r8, r0
 80146fa:	b318      	cbz	r0, 8014744 <pow+0x100>
 80146fc:	2301      	movs	r3, #1
 80146fe:	9302      	str	r3, [sp, #8]
 8014700:	4b80      	ldr	r3, [pc, #512]	; (8014904 <pow+0x2c0>)
 8014702:	9303      	str	r3, [sp, #12]
 8014704:	9b01      	ldr	r3, [sp, #4]
 8014706:	930a      	str	r3, [sp, #40]	; 0x28
 8014708:	9b00      	ldr	r3, [sp, #0]
 801470a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801470e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014712:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d0d5      	beq.n	80146c6 <pow+0x82>
 801471a:	4b7b      	ldr	r3, [pc, #492]	; (8014908 <pow+0x2c4>)
 801471c:	2200      	movs	r2, #0
 801471e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014722:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014724:	b11b      	cbz	r3, 801472e <pow+0xea>
 8014726:	f7fd f8b3 	bl	8011890 <__errno>
 801472a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801472c:	6003      	str	r3, [r0, #0]
 801472e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8014732:	eeb0 0a48 	vmov.f32	s0, s16
 8014736:	eef0 0a68 	vmov.f32	s1, s17
 801473a:	b00d      	add	sp, #52	; 0x34
 801473c:	ecbd 8b04 	vpop	{d8-d9}
 8014740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014744:	ec45 4b10 	vmov	d0, r4, r5
 8014748:	f002 fa57 	bl	8016bfa <finite>
 801474c:	2800      	cmp	r0, #0
 801474e:	d0f0      	beq.n	8014732 <pow+0xee>
 8014750:	4652      	mov	r2, sl
 8014752:	465b      	mov	r3, fp
 8014754:	4620      	mov	r0, r4
 8014756:	4629      	mov	r1, r5
 8014758:	f7ec f9e0 	bl	8000b1c <__aeabi_dcmplt>
 801475c:	2800      	cmp	r0, #0
 801475e:	d0e8      	beq.n	8014732 <pow+0xee>
 8014760:	2301      	movs	r3, #1
 8014762:	9302      	str	r3, [sp, #8]
 8014764:	4b67      	ldr	r3, [pc, #412]	; (8014904 <pow+0x2c0>)
 8014766:	9303      	str	r3, [sp, #12]
 8014768:	f999 3000 	ldrsb.w	r3, [r9]
 801476c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8014770:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014774:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014778:	b913      	cbnz	r3, 8014780 <pow+0x13c>
 801477a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801477e:	e7a2      	b.n	80146c6 <pow+0x82>
 8014780:	4962      	ldr	r1, [pc, #392]	; (801490c <pow+0x2c8>)
 8014782:	2000      	movs	r0, #0
 8014784:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014788:	2b02      	cmp	r3, #2
 801478a:	d19c      	bne.n	80146c6 <pow+0x82>
 801478c:	f7fd f880 	bl	8011890 <__errno>
 8014790:	2321      	movs	r3, #33	; 0x21
 8014792:	6003      	str	r3, [r0, #0]
 8014794:	e7c5      	b.n	8014722 <pow+0xde>
 8014796:	eeb0 0a48 	vmov.f32	s0, s16
 801479a:	eef0 0a68 	vmov.f32	s1, s17
 801479e:	f002 fa2c 	bl	8016bfa <finite>
 80147a2:	9000      	str	r0, [sp, #0]
 80147a4:	2800      	cmp	r0, #0
 80147a6:	f040 8081 	bne.w	80148ac <pow+0x268>
 80147aa:	ec47 6b10 	vmov	d0, r6, r7
 80147ae:	f002 fa24 	bl	8016bfa <finite>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	d07a      	beq.n	80148ac <pow+0x268>
 80147b6:	ec45 4b10 	vmov	d0, r4, r5
 80147ba:	f002 fa1e 	bl	8016bfa <finite>
 80147be:	2800      	cmp	r0, #0
 80147c0:	d074      	beq.n	80148ac <pow+0x268>
 80147c2:	ec53 2b18 	vmov	r2, r3, d8
 80147c6:	ee18 0a10 	vmov	r0, s16
 80147ca:	4619      	mov	r1, r3
 80147cc:	f7ec f9ce 	bl	8000b6c <__aeabi_dcmpun>
 80147d0:	f999 9000 	ldrsb.w	r9, [r9]
 80147d4:	4b4b      	ldr	r3, [pc, #300]	; (8014904 <pow+0x2c0>)
 80147d6:	b1b0      	cbz	r0, 8014806 <pow+0x1c2>
 80147d8:	2201      	movs	r2, #1
 80147da:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80147de:	9b00      	ldr	r3, [sp, #0]
 80147e0:	930a      	str	r3, [sp, #40]	; 0x28
 80147e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80147e6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80147ea:	f1b9 0f00 	cmp.w	r9, #0
 80147ee:	d0c4      	beq.n	801477a <pow+0x136>
 80147f0:	4652      	mov	r2, sl
 80147f2:	465b      	mov	r3, fp
 80147f4:	4650      	mov	r0, sl
 80147f6:	4659      	mov	r1, fp
 80147f8:	f7ec f848 	bl	800088c <__aeabi_ddiv>
 80147fc:	f1b9 0f02 	cmp.w	r9, #2
 8014800:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014804:	e7c1      	b.n	801478a <pow+0x146>
 8014806:	2203      	movs	r2, #3
 8014808:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801480c:	900a      	str	r0, [sp, #40]	; 0x28
 801480e:	4629      	mov	r1, r5
 8014810:	4620      	mov	r0, r4
 8014812:	2200      	movs	r2, #0
 8014814:	4b3e      	ldr	r3, [pc, #248]	; (8014910 <pow+0x2cc>)
 8014816:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801481a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801481e:	f7eb ff0b 	bl	8000638 <__aeabi_dmul>
 8014822:	4604      	mov	r4, r0
 8014824:	460d      	mov	r5, r1
 8014826:	f1b9 0f00 	cmp.w	r9, #0
 801482a:	d124      	bne.n	8014876 <pow+0x232>
 801482c:	4b39      	ldr	r3, [pc, #228]	; (8014914 <pow+0x2d0>)
 801482e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014832:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014836:	4630      	mov	r0, r6
 8014838:	4652      	mov	r2, sl
 801483a:	465b      	mov	r3, fp
 801483c:	4639      	mov	r1, r7
 801483e:	f7ec f96d 	bl	8000b1c <__aeabi_dcmplt>
 8014842:	2800      	cmp	r0, #0
 8014844:	d056      	beq.n	80148f4 <pow+0x2b0>
 8014846:	ec45 4b10 	vmov	d0, r4, r5
 801484a:	f002 fa71 	bl	8016d30 <rint>
 801484e:	4622      	mov	r2, r4
 8014850:	462b      	mov	r3, r5
 8014852:	ec51 0b10 	vmov	r0, r1, d0
 8014856:	f7ec f957 	bl	8000b08 <__aeabi_dcmpeq>
 801485a:	b920      	cbnz	r0, 8014866 <pow+0x222>
 801485c:	4b2e      	ldr	r3, [pc, #184]	; (8014918 <pow+0x2d4>)
 801485e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8014862:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014866:	f998 3000 	ldrsb.w	r3, [r8]
 801486a:	2b02      	cmp	r3, #2
 801486c:	d142      	bne.n	80148f4 <pow+0x2b0>
 801486e:	f7fd f80f 	bl	8011890 <__errno>
 8014872:	2322      	movs	r3, #34	; 0x22
 8014874:	e78d      	b.n	8014792 <pow+0x14e>
 8014876:	4b29      	ldr	r3, [pc, #164]	; (801491c <pow+0x2d8>)
 8014878:	2200      	movs	r2, #0
 801487a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801487e:	4630      	mov	r0, r6
 8014880:	4652      	mov	r2, sl
 8014882:	465b      	mov	r3, fp
 8014884:	4639      	mov	r1, r7
 8014886:	f7ec f949 	bl	8000b1c <__aeabi_dcmplt>
 801488a:	2800      	cmp	r0, #0
 801488c:	d0eb      	beq.n	8014866 <pow+0x222>
 801488e:	ec45 4b10 	vmov	d0, r4, r5
 8014892:	f002 fa4d 	bl	8016d30 <rint>
 8014896:	4622      	mov	r2, r4
 8014898:	462b      	mov	r3, r5
 801489a:	ec51 0b10 	vmov	r0, r1, d0
 801489e:	f7ec f933 	bl	8000b08 <__aeabi_dcmpeq>
 80148a2:	2800      	cmp	r0, #0
 80148a4:	d1df      	bne.n	8014866 <pow+0x222>
 80148a6:	2200      	movs	r2, #0
 80148a8:	4b18      	ldr	r3, [pc, #96]	; (801490c <pow+0x2c8>)
 80148aa:	e7da      	b.n	8014862 <pow+0x21e>
 80148ac:	2200      	movs	r2, #0
 80148ae:	2300      	movs	r3, #0
 80148b0:	ec51 0b18 	vmov	r0, r1, d8
 80148b4:	f7ec f928 	bl	8000b08 <__aeabi_dcmpeq>
 80148b8:	2800      	cmp	r0, #0
 80148ba:	f43f af3a 	beq.w	8014732 <pow+0xee>
 80148be:	ec47 6b10 	vmov	d0, r6, r7
 80148c2:	f002 f99a 	bl	8016bfa <finite>
 80148c6:	2800      	cmp	r0, #0
 80148c8:	f43f af33 	beq.w	8014732 <pow+0xee>
 80148cc:	ec45 4b10 	vmov	d0, r4, r5
 80148d0:	f002 f993 	bl	8016bfa <finite>
 80148d4:	2800      	cmp	r0, #0
 80148d6:	f43f af2c 	beq.w	8014732 <pow+0xee>
 80148da:	2304      	movs	r3, #4
 80148dc:	9302      	str	r3, [sp, #8]
 80148de:	4b09      	ldr	r3, [pc, #36]	; (8014904 <pow+0x2c0>)
 80148e0:	9303      	str	r3, [sp, #12]
 80148e2:	2300      	movs	r3, #0
 80148e4:	930a      	str	r3, [sp, #40]	; 0x28
 80148e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80148ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80148ee:	ed8d 9b08 	vstr	d9, [sp, #32]
 80148f2:	e7b8      	b.n	8014866 <pow+0x222>
 80148f4:	a802      	add	r0, sp, #8
 80148f6:	f002 fa0f 	bl	8016d18 <matherr>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	f47f af11 	bne.w	8014722 <pow+0xde>
 8014900:	e7b5      	b.n	801486e <pow+0x22a>
 8014902:	bf00      	nop
 8014904:	080178fc 	.word	0x080178fc
 8014908:	3ff00000 	.word	0x3ff00000
 801490c:	fff00000 	.word	0xfff00000
 8014910:	3fe00000 	.word	0x3fe00000
 8014914:	47efffff 	.word	0x47efffff
 8014918:	c7efffff 	.word	0xc7efffff
 801491c:	7ff00000 	.word	0x7ff00000
 8014920:	20000600 	.word	0x20000600

08014924 <sqrt>:
 8014924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014928:	ed2d 8b02 	vpush	{d8}
 801492c:	b08b      	sub	sp, #44	; 0x2c
 801492e:	ec55 4b10 	vmov	r4, r5, d0
 8014932:	f001 fa43 	bl	8015dbc <__ieee754_sqrt>
 8014936:	4b26      	ldr	r3, [pc, #152]	; (80149d0 <sqrt+0xac>)
 8014938:	eeb0 8a40 	vmov.f32	s16, s0
 801493c:	eef0 8a60 	vmov.f32	s17, s1
 8014940:	f993 6000 	ldrsb.w	r6, [r3]
 8014944:	1c73      	adds	r3, r6, #1
 8014946:	d02a      	beq.n	801499e <sqrt+0x7a>
 8014948:	4622      	mov	r2, r4
 801494a:	462b      	mov	r3, r5
 801494c:	4620      	mov	r0, r4
 801494e:	4629      	mov	r1, r5
 8014950:	f7ec f90c 	bl	8000b6c <__aeabi_dcmpun>
 8014954:	4607      	mov	r7, r0
 8014956:	bb10      	cbnz	r0, 801499e <sqrt+0x7a>
 8014958:	f04f 0800 	mov.w	r8, #0
 801495c:	f04f 0900 	mov.w	r9, #0
 8014960:	4642      	mov	r2, r8
 8014962:	464b      	mov	r3, r9
 8014964:	4620      	mov	r0, r4
 8014966:	4629      	mov	r1, r5
 8014968:	f7ec f8d8 	bl	8000b1c <__aeabi_dcmplt>
 801496c:	b1b8      	cbz	r0, 801499e <sqrt+0x7a>
 801496e:	2301      	movs	r3, #1
 8014970:	9300      	str	r3, [sp, #0]
 8014972:	4b18      	ldr	r3, [pc, #96]	; (80149d4 <sqrt+0xb0>)
 8014974:	9301      	str	r3, [sp, #4]
 8014976:	9708      	str	r7, [sp, #32]
 8014978:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801497c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8014980:	b9b6      	cbnz	r6, 80149b0 <sqrt+0x8c>
 8014982:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8014986:	4668      	mov	r0, sp
 8014988:	f002 f9c6 	bl	8016d18 <matherr>
 801498c:	b1d0      	cbz	r0, 80149c4 <sqrt+0xa0>
 801498e:	9b08      	ldr	r3, [sp, #32]
 8014990:	b11b      	cbz	r3, 801499a <sqrt+0x76>
 8014992:	f7fc ff7d 	bl	8011890 <__errno>
 8014996:	9b08      	ldr	r3, [sp, #32]
 8014998:	6003      	str	r3, [r0, #0]
 801499a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801499e:	eeb0 0a48 	vmov.f32	s0, s16
 80149a2:	eef0 0a68 	vmov.f32	s1, s17
 80149a6:	b00b      	add	sp, #44	; 0x2c
 80149a8:	ecbd 8b02 	vpop	{d8}
 80149ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80149b0:	4642      	mov	r2, r8
 80149b2:	464b      	mov	r3, r9
 80149b4:	4640      	mov	r0, r8
 80149b6:	4649      	mov	r1, r9
 80149b8:	f7eb ff68 	bl	800088c <__aeabi_ddiv>
 80149bc:	2e02      	cmp	r6, #2
 80149be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80149c2:	d1e0      	bne.n	8014986 <sqrt+0x62>
 80149c4:	f7fc ff64 	bl	8011890 <__errno>
 80149c8:	2321      	movs	r3, #33	; 0x21
 80149ca:	6003      	str	r3, [r0, #0]
 80149cc:	e7df      	b.n	801498e <sqrt+0x6a>
 80149ce:	bf00      	nop
 80149d0:	20000600 	.word	0x20000600
 80149d4:	08017900 	.word	0x08017900

080149d8 <__ieee754_asin>:
 80149d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149dc:	ec55 4b10 	vmov	r4, r5, d0
 80149e0:	4bcb      	ldr	r3, [pc, #812]	; (8014d10 <__ieee754_asin+0x338>)
 80149e2:	b087      	sub	sp, #28
 80149e4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80149e8:	429f      	cmp	r7, r3
 80149ea:	9501      	str	r5, [sp, #4]
 80149ec:	dd31      	ble.n	8014a52 <__ieee754_asin+0x7a>
 80149ee:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80149f2:	ee10 3a10 	vmov	r3, s0
 80149f6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80149fa:	433b      	orrs	r3, r7
 80149fc:	d117      	bne.n	8014a2e <__ieee754_asin+0x56>
 80149fe:	a3aa      	add	r3, pc, #680	; (adr r3, 8014ca8 <__ieee754_asin+0x2d0>)
 8014a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a04:	ee10 0a10 	vmov	r0, s0
 8014a08:	4629      	mov	r1, r5
 8014a0a:	f7eb fe15 	bl	8000638 <__aeabi_dmul>
 8014a0e:	a3a8      	add	r3, pc, #672	; (adr r3, 8014cb0 <__ieee754_asin+0x2d8>)
 8014a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a14:	4606      	mov	r6, r0
 8014a16:	460f      	mov	r7, r1
 8014a18:	4620      	mov	r0, r4
 8014a1a:	4629      	mov	r1, r5
 8014a1c:	f7eb fe0c 	bl	8000638 <__aeabi_dmul>
 8014a20:	4602      	mov	r2, r0
 8014a22:	460b      	mov	r3, r1
 8014a24:	4630      	mov	r0, r6
 8014a26:	4639      	mov	r1, r7
 8014a28:	f7eb fc50 	bl	80002cc <__adddf3>
 8014a2c:	e00a      	b.n	8014a44 <__ieee754_asin+0x6c>
 8014a2e:	ee10 2a10 	vmov	r2, s0
 8014a32:	462b      	mov	r3, r5
 8014a34:	4620      	mov	r0, r4
 8014a36:	4629      	mov	r1, r5
 8014a38:	f7eb fc46 	bl	80002c8 <__aeabi_dsub>
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	460b      	mov	r3, r1
 8014a40:	f7eb ff24 	bl	800088c <__aeabi_ddiv>
 8014a44:	4604      	mov	r4, r0
 8014a46:	460d      	mov	r5, r1
 8014a48:	ec45 4b10 	vmov	d0, r4, r5
 8014a4c:	b007      	add	sp, #28
 8014a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a52:	4bb0      	ldr	r3, [pc, #704]	; (8014d14 <__ieee754_asin+0x33c>)
 8014a54:	429f      	cmp	r7, r3
 8014a56:	dc11      	bgt.n	8014a7c <__ieee754_asin+0xa4>
 8014a58:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8014a5c:	f280 80ae 	bge.w	8014bbc <__ieee754_asin+0x1e4>
 8014a60:	a395      	add	r3, pc, #596	; (adr r3, 8014cb8 <__ieee754_asin+0x2e0>)
 8014a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a66:	ee10 0a10 	vmov	r0, s0
 8014a6a:	4629      	mov	r1, r5
 8014a6c:	f7eb fc2e 	bl	80002cc <__adddf3>
 8014a70:	2200      	movs	r2, #0
 8014a72:	4ba9      	ldr	r3, [pc, #676]	; (8014d18 <__ieee754_asin+0x340>)
 8014a74:	f7ec f870 	bl	8000b58 <__aeabi_dcmpgt>
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	d1e5      	bne.n	8014a48 <__ieee754_asin+0x70>
 8014a7c:	ec45 4b10 	vmov	d0, r4, r5
 8014a80:	f002 f8b2 	bl	8016be8 <fabs>
 8014a84:	2000      	movs	r0, #0
 8014a86:	ec53 2b10 	vmov	r2, r3, d0
 8014a8a:	49a3      	ldr	r1, [pc, #652]	; (8014d18 <__ieee754_asin+0x340>)
 8014a8c:	f7eb fc1c 	bl	80002c8 <__aeabi_dsub>
 8014a90:	2200      	movs	r2, #0
 8014a92:	4ba2      	ldr	r3, [pc, #648]	; (8014d1c <__ieee754_asin+0x344>)
 8014a94:	f7eb fdd0 	bl	8000638 <__aeabi_dmul>
 8014a98:	a389      	add	r3, pc, #548	; (adr r3, 8014cc0 <__ieee754_asin+0x2e8>)
 8014a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a9e:	4604      	mov	r4, r0
 8014aa0:	460d      	mov	r5, r1
 8014aa2:	f7eb fdc9 	bl	8000638 <__aeabi_dmul>
 8014aa6:	a388      	add	r3, pc, #544	; (adr r3, 8014cc8 <__ieee754_asin+0x2f0>)
 8014aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014aac:	f7eb fc0e 	bl	80002cc <__adddf3>
 8014ab0:	4622      	mov	r2, r4
 8014ab2:	462b      	mov	r3, r5
 8014ab4:	f7eb fdc0 	bl	8000638 <__aeabi_dmul>
 8014ab8:	a385      	add	r3, pc, #532	; (adr r3, 8014cd0 <__ieee754_asin+0x2f8>)
 8014aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014abe:	f7eb fc03 	bl	80002c8 <__aeabi_dsub>
 8014ac2:	4622      	mov	r2, r4
 8014ac4:	462b      	mov	r3, r5
 8014ac6:	f7eb fdb7 	bl	8000638 <__aeabi_dmul>
 8014aca:	a383      	add	r3, pc, #524	; (adr r3, 8014cd8 <__ieee754_asin+0x300>)
 8014acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ad0:	f7eb fbfc 	bl	80002cc <__adddf3>
 8014ad4:	4622      	mov	r2, r4
 8014ad6:	462b      	mov	r3, r5
 8014ad8:	f7eb fdae 	bl	8000638 <__aeabi_dmul>
 8014adc:	a380      	add	r3, pc, #512	; (adr r3, 8014ce0 <__ieee754_asin+0x308>)
 8014ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ae2:	f7eb fbf1 	bl	80002c8 <__aeabi_dsub>
 8014ae6:	4622      	mov	r2, r4
 8014ae8:	462b      	mov	r3, r5
 8014aea:	f7eb fda5 	bl	8000638 <__aeabi_dmul>
 8014aee:	a37e      	add	r3, pc, #504	; (adr r3, 8014ce8 <__ieee754_asin+0x310>)
 8014af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af4:	f7eb fbea 	bl	80002cc <__adddf3>
 8014af8:	4622      	mov	r2, r4
 8014afa:	462b      	mov	r3, r5
 8014afc:	f7eb fd9c 	bl	8000638 <__aeabi_dmul>
 8014b00:	a37b      	add	r3, pc, #492	; (adr r3, 8014cf0 <__ieee754_asin+0x318>)
 8014b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b06:	4680      	mov	r8, r0
 8014b08:	4689      	mov	r9, r1
 8014b0a:	4620      	mov	r0, r4
 8014b0c:	4629      	mov	r1, r5
 8014b0e:	f7eb fd93 	bl	8000638 <__aeabi_dmul>
 8014b12:	a379      	add	r3, pc, #484	; (adr r3, 8014cf8 <__ieee754_asin+0x320>)
 8014b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b18:	f7eb fbd6 	bl	80002c8 <__aeabi_dsub>
 8014b1c:	4622      	mov	r2, r4
 8014b1e:	462b      	mov	r3, r5
 8014b20:	f7eb fd8a 	bl	8000638 <__aeabi_dmul>
 8014b24:	a376      	add	r3, pc, #472	; (adr r3, 8014d00 <__ieee754_asin+0x328>)
 8014b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2a:	f7eb fbcf 	bl	80002cc <__adddf3>
 8014b2e:	4622      	mov	r2, r4
 8014b30:	462b      	mov	r3, r5
 8014b32:	f7eb fd81 	bl	8000638 <__aeabi_dmul>
 8014b36:	a374      	add	r3, pc, #464	; (adr r3, 8014d08 <__ieee754_asin+0x330>)
 8014b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b3c:	f7eb fbc4 	bl	80002c8 <__aeabi_dsub>
 8014b40:	4622      	mov	r2, r4
 8014b42:	462b      	mov	r3, r5
 8014b44:	f7eb fd78 	bl	8000638 <__aeabi_dmul>
 8014b48:	4b73      	ldr	r3, [pc, #460]	; (8014d18 <__ieee754_asin+0x340>)
 8014b4a:	2200      	movs	r2, #0
 8014b4c:	f7eb fbbe 	bl	80002cc <__adddf3>
 8014b50:	ec45 4b10 	vmov	d0, r4, r5
 8014b54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014b58:	f001 f930 	bl	8015dbc <__ieee754_sqrt>
 8014b5c:	4b70      	ldr	r3, [pc, #448]	; (8014d20 <__ieee754_asin+0x348>)
 8014b5e:	429f      	cmp	r7, r3
 8014b60:	ec5b ab10 	vmov	sl, fp, d0
 8014b64:	f340 80de 	ble.w	8014d24 <__ieee754_asin+0x34c>
 8014b68:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014b6c:	4640      	mov	r0, r8
 8014b6e:	4649      	mov	r1, r9
 8014b70:	f7eb fe8c 	bl	800088c <__aeabi_ddiv>
 8014b74:	4652      	mov	r2, sl
 8014b76:	465b      	mov	r3, fp
 8014b78:	f7eb fd5e 	bl	8000638 <__aeabi_dmul>
 8014b7c:	4652      	mov	r2, sl
 8014b7e:	465b      	mov	r3, fp
 8014b80:	f7eb fba4 	bl	80002cc <__adddf3>
 8014b84:	4602      	mov	r2, r0
 8014b86:	460b      	mov	r3, r1
 8014b88:	f7eb fba0 	bl	80002cc <__adddf3>
 8014b8c:	a348      	add	r3, pc, #288	; (adr r3, 8014cb0 <__ieee754_asin+0x2d8>)
 8014b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b92:	f7eb fb99 	bl	80002c8 <__aeabi_dsub>
 8014b96:	4602      	mov	r2, r0
 8014b98:	460b      	mov	r3, r1
 8014b9a:	a143      	add	r1, pc, #268	; (adr r1, 8014ca8 <__ieee754_asin+0x2d0>)
 8014b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ba0:	f7eb fb92 	bl	80002c8 <__aeabi_dsub>
 8014ba4:	9b01      	ldr	r3, [sp, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	bfdc      	itt	le
 8014baa:	4602      	movle	r2, r0
 8014bac:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	460d      	mov	r5, r1
 8014bb4:	bfdc      	itt	le
 8014bb6:	4614      	movle	r4, r2
 8014bb8:	461d      	movle	r5, r3
 8014bba:	e745      	b.n	8014a48 <__ieee754_asin+0x70>
 8014bbc:	ee10 2a10 	vmov	r2, s0
 8014bc0:	ee10 0a10 	vmov	r0, s0
 8014bc4:	462b      	mov	r3, r5
 8014bc6:	4629      	mov	r1, r5
 8014bc8:	f7eb fd36 	bl	8000638 <__aeabi_dmul>
 8014bcc:	a33c      	add	r3, pc, #240	; (adr r3, 8014cc0 <__ieee754_asin+0x2e8>)
 8014bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bd2:	4606      	mov	r6, r0
 8014bd4:	460f      	mov	r7, r1
 8014bd6:	f7eb fd2f 	bl	8000638 <__aeabi_dmul>
 8014bda:	a33b      	add	r3, pc, #236	; (adr r3, 8014cc8 <__ieee754_asin+0x2f0>)
 8014bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014be0:	f7eb fb74 	bl	80002cc <__adddf3>
 8014be4:	4632      	mov	r2, r6
 8014be6:	463b      	mov	r3, r7
 8014be8:	f7eb fd26 	bl	8000638 <__aeabi_dmul>
 8014bec:	a338      	add	r3, pc, #224	; (adr r3, 8014cd0 <__ieee754_asin+0x2f8>)
 8014bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bf2:	f7eb fb69 	bl	80002c8 <__aeabi_dsub>
 8014bf6:	4632      	mov	r2, r6
 8014bf8:	463b      	mov	r3, r7
 8014bfa:	f7eb fd1d 	bl	8000638 <__aeabi_dmul>
 8014bfe:	a336      	add	r3, pc, #216	; (adr r3, 8014cd8 <__ieee754_asin+0x300>)
 8014c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c04:	f7eb fb62 	bl	80002cc <__adddf3>
 8014c08:	4632      	mov	r2, r6
 8014c0a:	463b      	mov	r3, r7
 8014c0c:	f7eb fd14 	bl	8000638 <__aeabi_dmul>
 8014c10:	a333      	add	r3, pc, #204	; (adr r3, 8014ce0 <__ieee754_asin+0x308>)
 8014c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c16:	f7eb fb57 	bl	80002c8 <__aeabi_dsub>
 8014c1a:	4632      	mov	r2, r6
 8014c1c:	463b      	mov	r3, r7
 8014c1e:	f7eb fd0b 	bl	8000638 <__aeabi_dmul>
 8014c22:	a331      	add	r3, pc, #196	; (adr r3, 8014ce8 <__ieee754_asin+0x310>)
 8014c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c28:	f7eb fb50 	bl	80002cc <__adddf3>
 8014c2c:	4632      	mov	r2, r6
 8014c2e:	463b      	mov	r3, r7
 8014c30:	f7eb fd02 	bl	8000638 <__aeabi_dmul>
 8014c34:	a32e      	add	r3, pc, #184	; (adr r3, 8014cf0 <__ieee754_asin+0x318>)
 8014c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c3a:	4680      	mov	r8, r0
 8014c3c:	4689      	mov	r9, r1
 8014c3e:	4630      	mov	r0, r6
 8014c40:	4639      	mov	r1, r7
 8014c42:	f7eb fcf9 	bl	8000638 <__aeabi_dmul>
 8014c46:	a32c      	add	r3, pc, #176	; (adr r3, 8014cf8 <__ieee754_asin+0x320>)
 8014c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4c:	f7eb fb3c 	bl	80002c8 <__aeabi_dsub>
 8014c50:	4632      	mov	r2, r6
 8014c52:	463b      	mov	r3, r7
 8014c54:	f7eb fcf0 	bl	8000638 <__aeabi_dmul>
 8014c58:	a329      	add	r3, pc, #164	; (adr r3, 8014d00 <__ieee754_asin+0x328>)
 8014c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c5e:	f7eb fb35 	bl	80002cc <__adddf3>
 8014c62:	4632      	mov	r2, r6
 8014c64:	463b      	mov	r3, r7
 8014c66:	f7eb fce7 	bl	8000638 <__aeabi_dmul>
 8014c6a:	a327      	add	r3, pc, #156	; (adr r3, 8014d08 <__ieee754_asin+0x330>)
 8014c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c70:	f7eb fb2a 	bl	80002c8 <__aeabi_dsub>
 8014c74:	4632      	mov	r2, r6
 8014c76:	463b      	mov	r3, r7
 8014c78:	f7eb fcde 	bl	8000638 <__aeabi_dmul>
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	4b26      	ldr	r3, [pc, #152]	; (8014d18 <__ieee754_asin+0x340>)
 8014c80:	f7eb fb24 	bl	80002cc <__adddf3>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	4640      	mov	r0, r8
 8014c8a:	4649      	mov	r1, r9
 8014c8c:	f7eb fdfe 	bl	800088c <__aeabi_ddiv>
 8014c90:	4622      	mov	r2, r4
 8014c92:	462b      	mov	r3, r5
 8014c94:	f7eb fcd0 	bl	8000638 <__aeabi_dmul>
 8014c98:	4602      	mov	r2, r0
 8014c9a:	460b      	mov	r3, r1
 8014c9c:	4620      	mov	r0, r4
 8014c9e:	4629      	mov	r1, r5
 8014ca0:	e6c2      	b.n	8014a28 <__ieee754_asin+0x50>
 8014ca2:	bf00      	nop
 8014ca4:	f3af 8000 	nop.w
 8014ca8:	54442d18 	.word	0x54442d18
 8014cac:	3ff921fb 	.word	0x3ff921fb
 8014cb0:	33145c07 	.word	0x33145c07
 8014cb4:	3c91a626 	.word	0x3c91a626
 8014cb8:	8800759c 	.word	0x8800759c
 8014cbc:	7e37e43c 	.word	0x7e37e43c
 8014cc0:	0dfdf709 	.word	0x0dfdf709
 8014cc4:	3f023de1 	.word	0x3f023de1
 8014cc8:	7501b288 	.word	0x7501b288
 8014ccc:	3f49efe0 	.word	0x3f49efe0
 8014cd0:	b5688f3b 	.word	0xb5688f3b
 8014cd4:	3fa48228 	.word	0x3fa48228
 8014cd8:	0e884455 	.word	0x0e884455
 8014cdc:	3fc9c155 	.word	0x3fc9c155
 8014ce0:	03eb6f7d 	.word	0x03eb6f7d
 8014ce4:	3fd4d612 	.word	0x3fd4d612
 8014ce8:	55555555 	.word	0x55555555
 8014cec:	3fc55555 	.word	0x3fc55555
 8014cf0:	b12e9282 	.word	0xb12e9282
 8014cf4:	3fb3b8c5 	.word	0x3fb3b8c5
 8014cf8:	1b8d0159 	.word	0x1b8d0159
 8014cfc:	3fe6066c 	.word	0x3fe6066c
 8014d00:	9c598ac8 	.word	0x9c598ac8
 8014d04:	40002ae5 	.word	0x40002ae5
 8014d08:	1c8a2d4b 	.word	0x1c8a2d4b
 8014d0c:	40033a27 	.word	0x40033a27
 8014d10:	3fefffff 	.word	0x3fefffff
 8014d14:	3fdfffff 	.word	0x3fdfffff
 8014d18:	3ff00000 	.word	0x3ff00000
 8014d1c:	3fe00000 	.word	0x3fe00000
 8014d20:	3fef3332 	.word	0x3fef3332
 8014d24:	ee10 2a10 	vmov	r2, s0
 8014d28:	ee10 0a10 	vmov	r0, s0
 8014d2c:	465b      	mov	r3, fp
 8014d2e:	4659      	mov	r1, fp
 8014d30:	f7eb facc 	bl	80002cc <__adddf3>
 8014d34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014d38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014d3c:	4640      	mov	r0, r8
 8014d3e:	4649      	mov	r1, r9
 8014d40:	f7eb fda4 	bl	800088c <__aeabi_ddiv>
 8014d44:	4602      	mov	r2, r0
 8014d46:	460b      	mov	r3, r1
 8014d48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014d4c:	f7eb fc74 	bl	8000638 <__aeabi_dmul>
 8014d50:	2600      	movs	r6, #0
 8014d52:	4680      	mov	r8, r0
 8014d54:	4689      	mov	r9, r1
 8014d56:	4632      	mov	r2, r6
 8014d58:	465b      	mov	r3, fp
 8014d5a:	4630      	mov	r0, r6
 8014d5c:	4659      	mov	r1, fp
 8014d5e:	f7eb fc6b 	bl	8000638 <__aeabi_dmul>
 8014d62:	4602      	mov	r2, r0
 8014d64:	460b      	mov	r3, r1
 8014d66:	4620      	mov	r0, r4
 8014d68:	4629      	mov	r1, r5
 8014d6a:	f7eb faad 	bl	80002c8 <__aeabi_dsub>
 8014d6e:	4632      	mov	r2, r6
 8014d70:	4604      	mov	r4, r0
 8014d72:	460d      	mov	r5, r1
 8014d74:	465b      	mov	r3, fp
 8014d76:	4650      	mov	r0, sl
 8014d78:	4659      	mov	r1, fp
 8014d7a:	f7eb faa7 	bl	80002cc <__adddf3>
 8014d7e:	4602      	mov	r2, r0
 8014d80:	460b      	mov	r3, r1
 8014d82:	4620      	mov	r0, r4
 8014d84:	4629      	mov	r1, r5
 8014d86:	f7eb fd81 	bl	800088c <__aeabi_ddiv>
 8014d8a:	4602      	mov	r2, r0
 8014d8c:	460b      	mov	r3, r1
 8014d8e:	f7eb fa9d 	bl	80002cc <__adddf3>
 8014d92:	4602      	mov	r2, r0
 8014d94:	460b      	mov	r3, r1
 8014d96:	a114      	add	r1, pc, #80	; (adr r1, 8014de8 <__ieee754_asin+0x410>)
 8014d98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014d9c:	f7eb fa94 	bl	80002c8 <__aeabi_dsub>
 8014da0:	4602      	mov	r2, r0
 8014da2:	460b      	mov	r3, r1
 8014da4:	4640      	mov	r0, r8
 8014da6:	4649      	mov	r1, r9
 8014da8:	f7eb fa8e 	bl	80002c8 <__aeabi_dsub>
 8014dac:	465f      	mov	r7, fp
 8014dae:	4604      	mov	r4, r0
 8014db0:	460d      	mov	r5, r1
 8014db2:	4632      	mov	r2, r6
 8014db4:	465b      	mov	r3, fp
 8014db6:	4630      	mov	r0, r6
 8014db8:	4639      	mov	r1, r7
 8014dba:	f7eb fa87 	bl	80002cc <__adddf3>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	a10b      	add	r1, pc, #44	; (adr r1, 8014df0 <__ieee754_asin+0x418>)
 8014dc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dc8:	f7eb fa7e 	bl	80002c8 <__aeabi_dsub>
 8014dcc:	4602      	mov	r2, r0
 8014dce:	460b      	mov	r3, r1
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	4629      	mov	r1, r5
 8014dd4:	f7eb fa78 	bl	80002c8 <__aeabi_dsub>
 8014dd8:	4602      	mov	r2, r0
 8014dda:	460b      	mov	r3, r1
 8014ddc:	a104      	add	r1, pc, #16	; (adr r1, 8014df0 <__ieee754_asin+0x418>)
 8014dde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014de2:	e6dd      	b.n	8014ba0 <__ieee754_asin+0x1c8>
 8014de4:	f3af 8000 	nop.w
 8014de8:	33145c07 	.word	0x33145c07
 8014dec:	3c91a626 	.word	0x3c91a626
 8014df0:	54442d18 	.word	0x54442d18
 8014df4:	3fe921fb 	.word	0x3fe921fb

08014df8 <__ieee754_atan2>:
 8014df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014dfc:	ec57 6b11 	vmov	r6, r7, d1
 8014e00:	4273      	negs	r3, r6
 8014e02:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8014e06:	4333      	orrs	r3, r6
 8014e08:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8014fb0 <__ieee754_atan2+0x1b8>
 8014e0c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014e10:	4573      	cmp	r3, lr
 8014e12:	ec51 0b10 	vmov	r0, r1, d0
 8014e16:	ee11 8a10 	vmov	r8, s2
 8014e1a:	d80a      	bhi.n	8014e32 <__ieee754_atan2+0x3a>
 8014e1c:	4244      	negs	r4, r0
 8014e1e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014e22:	4304      	orrs	r4, r0
 8014e24:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014e28:	4574      	cmp	r4, lr
 8014e2a:	468c      	mov	ip, r1
 8014e2c:	ee10 9a10 	vmov	r9, s0
 8014e30:	d907      	bls.n	8014e42 <__ieee754_atan2+0x4a>
 8014e32:	4632      	mov	r2, r6
 8014e34:	463b      	mov	r3, r7
 8014e36:	f7eb fa49 	bl	80002cc <__adddf3>
 8014e3a:	ec41 0b10 	vmov	d0, r0, r1
 8014e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014e42:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014e46:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014e4a:	4334      	orrs	r4, r6
 8014e4c:	d103      	bne.n	8014e56 <__ieee754_atan2+0x5e>
 8014e4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014e52:	f001 bd29 	b.w	80168a8 <atan>
 8014e56:	17bc      	asrs	r4, r7, #30
 8014e58:	f004 0402 	and.w	r4, r4, #2
 8014e5c:	ea53 0909 	orrs.w	r9, r3, r9
 8014e60:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014e64:	d107      	bne.n	8014e76 <__ieee754_atan2+0x7e>
 8014e66:	2c02      	cmp	r4, #2
 8014e68:	d073      	beq.n	8014f52 <__ieee754_atan2+0x15a>
 8014e6a:	2c03      	cmp	r4, #3
 8014e6c:	d1e5      	bne.n	8014e3a <__ieee754_atan2+0x42>
 8014e6e:	a13e      	add	r1, pc, #248	; (adr r1, 8014f68 <__ieee754_atan2+0x170>)
 8014e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e74:	e7e1      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014e76:	ea52 0808 	orrs.w	r8, r2, r8
 8014e7a:	d106      	bne.n	8014e8a <__ieee754_atan2+0x92>
 8014e7c:	f1bc 0f00 	cmp.w	ip, #0
 8014e80:	da6b      	bge.n	8014f5a <__ieee754_atan2+0x162>
 8014e82:	a13b      	add	r1, pc, #236	; (adr r1, 8014f70 <__ieee754_atan2+0x178>)
 8014e84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e88:	e7d7      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014e8a:	4572      	cmp	r2, lr
 8014e8c:	d120      	bne.n	8014ed0 <__ieee754_atan2+0xd8>
 8014e8e:	4293      	cmp	r3, r2
 8014e90:	d111      	bne.n	8014eb6 <__ieee754_atan2+0xbe>
 8014e92:	2c02      	cmp	r4, #2
 8014e94:	d007      	beq.n	8014ea6 <__ieee754_atan2+0xae>
 8014e96:	2c03      	cmp	r4, #3
 8014e98:	d009      	beq.n	8014eae <__ieee754_atan2+0xb6>
 8014e9a:	2c01      	cmp	r4, #1
 8014e9c:	d155      	bne.n	8014f4a <__ieee754_atan2+0x152>
 8014e9e:	a136      	add	r1, pc, #216	; (adr r1, 8014f78 <__ieee754_atan2+0x180>)
 8014ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014ea4:	e7c9      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014ea6:	a136      	add	r1, pc, #216	; (adr r1, 8014f80 <__ieee754_atan2+0x188>)
 8014ea8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014eac:	e7c5      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014eae:	a136      	add	r1, pc, #216	; (adr r1, 8014f88 <__ieee754_atan2+0x190>)
 8014eb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014eb4:	e7c1      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014eb6:	2c02      	cmp	r4, #2
 8014eb8:	d04b      	beq.n	8014f52 <__ieee754_atan2+0x15a>
 8014eba:	2c03      	cmp	r4, #3
 8014ebc:	d0d7      	beq.n	8014e6e <__ieee754_atan2+0x76>
 8014ebe:	2c01      	cmp	r4, #1
 8014ec0:	f04f 0000 	mov.w	r0, #0
 8014ec4:	d102      	bne.n	8014ecc <__ieee754_atan2+0xd4>
 8014ec6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8014eca:	e7b6      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014ecc:	2100      	movs	r1, #0
 8014ece:	e7b4      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014ed0:	4573      	cmp	r3, lr
 8014ed2:	d0d3      	beq.n	8014e7c <__ieee754_atan2+0x84>
 8014ed4:	1a9b      	subs	r3, r3, r2
 8014ed6:	151b      	asrs	r3, r3, #20
 8014ed8:	2b3c      	cmp	r3, #60	; 0x3c
 8014eda:	dc1e      	bgt.n	8014f1a <__ieee754_atan2+0x122>
 8014edc:	2f00      	cmp	r7, #0
 8014ede:	da01      	bge.n	8014ee4 <__ieee754_atan2+0xec>
 8014ee0:	333c      	adds	r3, #60	; 0x3c
 8014ee2:	db1e      	blt.n	8014f22 <__ieee754_atan2+0x12a>
 8014ee4:	4632      	mov	r2, r6
 8014ee6:	463b      	mov	r3, r7
 8014ee8:	f7eb fcd0 	bl	800088c <__aeabi_ddiv>
 8014eec:	ec41 0b10 	vmov	d0, r0, r1
 8014ef0:	f001 fe7a 	bl	8016be8 <fabs>
 8014ef4:	f001 fcd8 	bl	80168a8 <atan>
 8014ef8:	ec51 0b10 	vmov	r0, r1, d0
 8014efc:	2c01      	cmp	r4, #1
 8014efe:	d013      	beq.n	8014f28 <__ieee754_atan2+0x130>
 8014f00:	2c02      	cmp	r4, #2
 8014f02:	d015      	beq.n	8014f30 <__ieee754_atan2+0x138>
 8014f04:	2c00      	cmp	r4, #0
 8014f06:	d098      	beq.n	8014e3a <__ieee754_atan2+0x42>
 8014f08:	a321      	add	r3, pc, #132	; (adr r3, 8014f90 <__ieee754_atan2+0x198>)
 8014f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0e:	f7eb f9db 	bl	80002c8 <__aeabi_dsub>
 8014f12:	a321      	add	r3, pc, #132	; (adr r3, 8014f98 <__ieee754_atan2+0x1a0>)
 8014f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f18:	e014      	b.n	8014f44 <__ieee754_atan2+0x14c>
 8014f1a:	a121      	add	r1, pc, #132	; (adr r1, 8014fa0 <__ieee754_atan2+0x1a8>)
 8014f1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f20:	e7ec      	b.n	8014efc <__ieee754_atan2+0x104>
 8014f22:	2000      	movs	r0, #0
 8014f24:	2100      	movs	r1, #0
 8014f26:	e7e9      	b.n	8014efc <__ieee754_atan2+0x104>
 8014f28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	e784      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014f30:	a317      	add	r3, pc, #92	; (adr r3, 8014f90 <__ieee754_atan2+0x198>)
 8014f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f36:	f7eb f9c7 	bl	80002c8 <__aeabi_dsub>
 8014f3a:	4602      	mov	r2, r0
 8014f3c:	460b      	mov	r3, r1
 8014f3e:	a116      	add	r1, pc, #88	; (adr r1, 8014f98 <__ieee754_atan2+0x1a0>)
 8014f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f44:	f7eb f9c0 	bl	80002c8 <__aeabi_dsub>
 8014f48:	e777      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014f4a:	a117      	add	r1, pc, #92	; (adr r1, 8014fa8 <__ieee754_atan2+0x1b0>)
 8014f4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f50:	e773      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014f52:	a111      	add	r1, pc, #68	; (adr r1, 8014f98 <__ieee754_atan2+0x1a0>)
 8014f54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f58:	e76f      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014f5a:	a111      	add	r1, pc, #68	; (adr r1, 8014fa0 <__ieee754_atan2+0x1a8>)
 8014f5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014f60:	e76b      	b.n	8014e3a <__ieee754_atan2+0x42>
 8014f62:	bf00      	nop
 8014f64:	f3af 8000 	nop.w
 8014f68:	54442d18 	.word	0x54442d18
 8014f6c:	c00921fb 	.word	0xc00921fb
 8014f70:	54442d18 	.word	0x54442d18
 8014f74:	bff921fb 	.word	0xbff921fb
 8014f78:	54442d18 	.word	0x54442d18
 8014f7c:	bfe921fb 	.word	0xbfe921fb
 8014f80:	7f3321d2 	.word	0x7f3321d2
 8014f84:	4002d97c 	.word	0x4002d97c
 8014f88:	7f3321d2 	.word	0x7f3321d2
 8014f8c:	c002d97c 	.word	0xc002d97c
 8014f90:	33145c07 	.word	0x33145c07
 8014f94:	3ca1a626 	.word	0x3ca1a626
 8014f98:	54442d18 	.word	0x54442d18
 8014f9c:	400921fb 	.word	0x400921fb
 8014fa0:	54442d18 	.word	0x54442d18
 8014fa4:	3ff921fb 	.word	0x3ff921fb
 8014fa8:	54442d18 	.word	0x54442d18
 8014fac:	3fe921fb 	.word	0x3fe921fb
 8014fb0:	7ff00000 	.word	0x7ff00000
 8014fb4:	00000000 	.word	0x00000000

08014fb8 <__ieee754_pow>:
 8014fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014fbc:	b091      	sub	sp, #68	; 0x44
 8014fbe:	ed8d 1b00 	vstr	d1, [sp]
 8014fc2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014fc6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014fca:	ea58 0302 	orrs.w	r3, r8, r2
 8014fce:	ec57 6b10 	vmov	r6, r7, d0
 8014fd2:	f000 84be 	beq.w	8015952 <__ieee754_pow+0x99a>
 8014fd6:	4b7a      	ldr	r3, [pc, #488]	; (80151c0 <__ieee754_pow+0x208>)
 8014fd8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014fdc:	429c      	cmp	r4, r3
 8014fde:	463d      	mov	r5, r7
 8014fe0:	ee10 aa10 	vmov	sl, s0
 8014fe4:	dc09      	bgt.n	8014ffa <__ieee754_pow+0x42>
 8014fe6:	d103      	bne.n	8014ff0 <__ieee754_pow+0x38>
 8014fe8:	b93e      	cbnz	r6, 8014ffa <__ieee754_pow+0x42>
 8014fea:	45a0      	cmp	r8, r4
 8014fec:	dc0d      	bgt.n	801500a <__ieee754_pow+0x52>
 8014fee:	e001      	b.n	8014ff4 <__ieee754_pow+0x3c>
 8014ff0:	4598      	cmp	r8, r3
 8014ff2:	dc02      	bgt.n	8014ffa <__ieee754_pow+0x42>
 8014ff4:	4598      	cmp	r8, r3
 8014ff6:	d10e      	bne.n	8015016 <__ieee754_pow+0x5e>
 8014ff8:	b16a      	cbz	r2, 8015016 <__ieee754_pow+0x5e>
 8014ffa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014ffe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015002:	ea54 030a 	orrs.w	r3, r4, sl
 8015006:	f000 84a4 	beq.w	8015952 <__ieee754_pow+0x99a>
 801500a:	486e      	ldr	r0, [pc, #440]	; (80151c4 <__ieee754_pow+0x20c>)
 801500c:	b011      	add	sp, #68	; 0x44
 801500e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015012:	f001 be85 	b.w	8016d20 <nan>
 8015016:	2d00      	cmp	r5, #0
 8015018:	da53      	bge.n	80150c2 <__ieee754_pow+0x10a>
 801501a:	4b6b      	ldr	r3, [pc, #428]	; (80151c8 <__ieee754_pow+0x210>)
 801501c:	4598      	cmp	r8, r3
 801501e:	dc4d      	bgt.n	80150bc <__ieee754_pow+0x104>
 8015020:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8015024:	4598      	cmp	r8, r3
 8015026:	dd4c      	ble.n	80150c2 <__ieee754_pow+0x10a>
 8015028:	ea4f 5328 	mov.w	r3, r8, asr #20
 801502c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015030:	2b14      	cmp	r3, #20
 8015032:	dd26      	ble.n	8015082 <__ieee754_pow+0xca>
 8015034:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8015038:	fa22 f103 	lsr.w	r1, r2, r3
 801503c:	fa01 f303 	lsl.w	r3, r1, r3
 8015040:	4293      	cmp	r3, r2
 8015042:	d13e      	bne.n	80150c2 <__ieee754_pow+0x10a>
 8015044:	f001 0101 	and.w	r1, r1, #1
 8015048:	f1c1 0b02 	rsb	fp, r1, #2
 801504c:	2a00      	cmp	r2, #0
 801504e:	d15b      	bne.n	8015108 <__ieee754_pow+0x150>
 8015050:	4b5b      	ldr	r3, [pc, #364]	; (80151c0 <__ieee754_pow+0x208>)
 8015052:	4598      	cmp	r8, r3
 8015054:	d124      	bne.n	80150a0 <__ieee754_pow+0xe8>
 8015056:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801505a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801505e:	ea53 030a 	orrs.w	r3, r3, sl
 8015062:	f000 8476 	beq.w	8015952 <__ieee754_pow+0x99a>
 8015066:	4b59      	ldr	r3, [pc, #356]	; (80151cc <__ieee754_pow+0x214>)
 8015068:	429c      	cmp	r4, r3
 801506a:	dd2d      	ble.n	80150c8 <__ieee754_pow+0x110>
 801506c:	f1b9 0f00 	cmp.w	r9, #0
 8015070:	f280 8473 	bge.w	801595a <__ieee754_pow+0x9a2>
 8015074:	2000      	movs	r0, #0
 8015076:	2100      	movs	r1, #0
 8015078:	ec41 0b10 	vmov	d0, r0, r1
 801507c:	b011      	add	sp, #68	; 0x44
 801507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015082:	2a00      	cmp	r2, #0
 8015084:	d13e      	bne.n	8015104 <__ieee754_pow+0x14c>
 8015086:	f1c3 0314 	rsb	r3, r3, #20
 801508a:	fa48 f103 	asr.w	r1, r8, r3
 801508e:	fa01 f303 	lsl.w	r3, r1, r3
 8015092:	4543      	cmp	r3, r8
 8015094:	f040 8469 	bne.w	801596a <__ieee754_pow+0x9b2>
 8015098:	f001 0101 	and.w	r1, r1, #1
 801509c:	f1c1 0b02 	rsb	fp, r1, #2
 80150a0:	4b4b      	ldr	r3, [pc, #300]	; (80151d0 <__ieee754_pow+0x218>)
 80150a2:	4598      	cmp	r8, r3
 80150a4:	d118      	bne.n	80150d8 <__ieee754_pow+0x120>
 80150a6:	f1b9 0f00 	cmp.w	r9, #0
 80150aa:	f280 845a 	bge.w	8015962 <__ieee754_pow+0x9aa>
 80150ae:	4948      	ldr	r1, [pc, #288]	; (80151d0 <__ieee754_pow+0x218>)
 80150b0:	4632      	mov	r2, r6
 80150b2:	463b      	mov	r3, r7
 80150b4:	2000      	movs	r0, #0
 80150b6:	f7eb fbe9 	bl	800088c <__aeabi_ddiv>
 80150ba:	e7dd      	b.n	8015078 <__ieee754_pow+0xc0>
 80150bc:	f04f 0b02 	mov.w	fp, #2
 80150c0:	e7c4      	b.n	801504c <__ieee754_pow+0x94>
 80150c2:	f04f 0b00 	mov.w	fp, #0
 80150c6:	e7c1      	b.n	801504c <__ieee754_pow+0x94>
 80150c8:	f1b9 0f00 	cmp.w	r9, #0
 80150cc:	dad2      	bge.n	8015074 <__ieee754_pow+0xbc>
 80150ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80150d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80150d6:	e7cf      	b.n	8015078 <__ieee754_pow+0xc0>
 80150d8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80150dc:	d106      	bne.n	80150ec <__ieee754_pow+0x134>
 80150de:	4632      	mov	r2, r6
 80150e0:	463b      	mov	r3, r7
 80150e2:	4610      	mov	r0, r2
 80150e4:	4619      	mov	r1, r3
 80150e6:	f7eb faa7 	bl	8000638 <__aeabi_dmul>
 80150ea:	e7c5      	b.n	8015078 <__ieee754_pow+0xc0>
 80150ec:	4b39      	ldr	r3, [pc, #228]	; (80151d4 <__ieee754_pow+0x21c>)
 80150ee:	4599      	cmp	r9, r3
 80150f0:	d10a      	bne.n	8015108 <__ieee754_pow+0x150>
 80150f2:	2d00      	cmp	r5, #0
 80150f4:	db08      	blt.n	8015108 <__ieee754_pow+0x150>
 80150f6:	ec47 6b10 	vmov	d0, r6, r7
 80150fa:	b011      	add	sp, #68	; 0x44
 80150fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015100:	f000 be5c 	b.w	8015dbc <__ieee754_sqrt>
 8015104:	f04f 0b00 	mov.w	fp, #0
 8015108:	ec47 6b10 	vmov	d0, r6, r7
 801510c:	f001 fd6c 	bl	8016be8 <fabs>
 8015110:	ec51 0b10 	vmov	r0, r1, d0
 8015114:	f1ba 0f00 	cmp.w	sl, #0
 8015118:	d127      	bne.n	801516a <__ieee754_pow+0x1b2>
 801511a:	b124      	cbz	r4, 8015126 <__ieee754_pow+0x16e>
 801511c:	4b2c      	ldr	r3, [pc, #176]	; (80151d0 <__ieee754_pow+0x218>)
 801511e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8015122:	429a      	cmp	r2, r3
 8015124:	d121      	bne.n	801516a <__ieee754_pow+0x1b2>
 8015126:	f1b9 0f00 	cmp.w	r9, #0
 801512a:	da05      	bge.n	8015138 <__ieee754_pow+0x180>
 801512c:	4602      	mov	r2, r0
 801512e:	460b      	mov	r3, r1
 8015130:	2000      	movs	r0, #0
 8015132:	4927      	ldr	r1, [pc, #156]	; (80151d0 <__ieee754_pow+0x218>)
 8015134:	f7eb fbaa 	bl	800088c <__aeabi_ddiv>
 8015138:	2d00      	cmp	r5, #0
 801513a:	da9d      	bge.n	8015078 <__ieee754_pow+0xc0>
 801513c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8015140:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8015144:	ea54 030b 	orrs.w	r3, r4, fp
 8015148:	d108      	bne.n	801515c <__ieee754_pow+0x1a4>
 801514a:	4602      	mov	r2, r0
 801514c:	460b      	mov	r3, r1
 801514e:	4610      	mov	r0, r2
 8015150:	4619      	mov	r1, r3
 8015152:	f7eb f8b9 	bl	80002c8 <__aeabi_dsub>
 8015156:	4602      	mov	r2, r0
 8015158:	460b      	mov	r3, r1
 801515a:	e7ac      	b.n	80150b6 <__ieee754_pow+0xfe>
 801515c:	f1bb 0f01 	cmp.w	fp, #1
 8015160:	d18a      	bne.n	8015078 <__ieee754_pow+0xc0>
 8015162:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015166:	4619      	mov	r1, r3
 8015168:	e786      	b.n	8015078 <__ieee754_pow+0xc0>
 801516a:	0fed      	lsrs	r5, r5, #31
 801516c:	1e6b      	subs	r3, r5, #1
 801516e:	930d      	str	r3, [sp, #52]	; 0x34
 8015170:	ea5b 0303 	orrs.w	r3, fp, r3
 8015174:	d102      	bne.n	801517c <__ieee754_pow+0x1c4>
 8015176:	4632      	mov	r2, r6
 8015178:	463b      	mov	r3, r7
 801517a:	e7e8      	b.n	801514e <__ieee754_pow+0x196>
 801517c:	4b16      	ldr	r3, [pc, #88]	; (80151d8 <__ieee754_pow+0x220>)
 801517e:	4598      	cmp	r8, r3
 8015180:	f340 80fe 	ble.w	8015380 <__ieee754_pow+0x3c8>
 8015184:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8015188:	4598      	cmp	r8, r3
 801518a:	dd0a      	ble.n	80151a2 <__ieee754_pow+0x1ea>
 801518c:	4b0f      	ldr	r3, [pc, #60]	; (80151cc <__ieee754_pow+0x214>)
 801518e:	429c      	cmp	r4, r3
 8015190:	dc0d      	bgt.n	80151ae <__ieee754_pow+0x1f6>
 8015192:	f1b9 0f00 	cmp.w	r9, #0
 8015196:	f6bf af6d 	bge.w	8015074 <__ieee754_pow+0xbc>
 801519a:	a307      	add	r3, pc, #28	; (adr r3, 80151b8 <__ieee754_pow+0x200>)
 801519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151a0:	e79f      	b.n	80150e2 <__ieee754_pow+0x12a>
 80151a2:	4b0e      	ldr	r3, [pc, #56]	; (80151dc <__ieee754_pow+0x224>)
 80151a4:	429c      	cmp	r4, r3
 80151a6:	ddf4      	ble.n	8015192 <__ieee754_pow+0x1da>
 80151a8:	4b09      	ldr	r3, [pc, #36]	; (80151d0 <__ieee754_pow+0x218>)
 80151aa:	429c      	cmp	r4, r3
 80151ac:	dd18      	ble.n	80151e0 <__ieee754_pow+0x228>
 80151ae:	f1b9 0f00 	cmp.w	r9, #0
 80151b2:	dcf2      	bgt.n	801519a <__ieee754_pow+0x1e2>
 80151b4:	e75e      	b.n	8015074 <__ieee754_pow+0xbc>
 80151b6:	bf00      	nop
 80151b8:	8800759c 	.word	0x8800759c
 80151bc:	7e37e43c 	.word	0x7e37e43c
 80151c0:	7ff00000 	.word	0x7ff00000
 80151c4:	08017633 	.word	0x08017633
 80151c8:	433fffff 	.word	0x433fffff
 80151cc:	3fefffff 	.word	0x3fefffff
 80151d0:	3ff00000 	.word	0x3ff00000
 80151d4:	3fe00000 	.word	0x3fe00000
 80151d8:	41e00000 	.word	0x41e00000
 80151dc:	3feffffe 	.word	0x3feffffe
 80151e0:	2200      	movs	r2, #0
 80151e2:	4b63      	ldr	r3, [pc, #396]	; (8015370 <__ieee754_pow+0x3b8>)
 80151e4:	f7eb f870 	bl	80002c8 <__aeabi_dsub>
 80151e8:	a355      	add	r3, pc, #340	; (adr r3, 8015340 <__ieee754_pow+0x388>)
 80151ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151ee:	4604      	mov	r4, r0
 80151f0:	460d      	mov	r5, r1
 80151f2:	f7eb fa21 	bl	8000638 <__aeabi_dmul>
 80151f6:	a354      	add	r3, pc, #336	; (adr r3, 8015348 <__ieee754_pow+0x390>)
 80151f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fc:	4606      	mov	r6, r0
 80151fe:	460f      	mov	r7, r1
 8015200:	4620      	mov	r0, r4
 8015202:	4629      	mov	r1, r5
 8015204:	f7eb fa18 	bl	8000638 <__aeabi_dmul>
 8015208:	2200      	movs	r2, #0
 801520a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801520e:	4b59      	ldr	r3, [pc, #356]	; (8015374 <__ieee754_pow+0x3bc>)
 8015210:	4620      	mov	r0, r4
 8015212:	4629      	mov	r1, r5
 8015214:	f7eb fa10 	bl	8000638 <__aeabi_dmul>
 8015218:	4602      	mov	r2, r0
 801521a:	460b      	mov	r3, r1
 801521c:	a14c      	add	r1, pc, #304	; (adr r1, 8015350 <__ieee754_pow+0x398>)
 801521e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015222:	f7eb f851 	bl	80002c8 <__aeabi_dsub>
 8015226:	4622      	mov	r2, r4
 8015228:	462b      	mov	r3, r5
 801522a:	f7eb fa05 	bl	8000638 <__aeabi_dmul>
 801522e:	4602      	mov	r2, r0
 8015230:	460b      	mov	r3, r1
 8015232:	2000      	movs	r0, #0
 8015234:	4950      	ldr	r1, [pc, #320]	; (8015378 <__ieee754_pow+0x3c0>)
 8015236:	f7eb f847 	bl	80002c8 <__aeabi_dsub>
 801523a:	4622      	mov	r2, r4
 801523c:	462b      	mov	r3, r5
 801523e:	4680      	mov	r8, r0
 8015240:	4689      	mov	r9, r1
 8015242:	4620      	mov	r0, r4
 8015244:	4629      	mov	r1, r5
 8015246:	f7eb f9f7 	bl	8000638 <__aeabi_dmul>
 801524a:	4602      	mov	r2, r0
 801524c:	460b      	mov	r3, r1
 801524e:	4640      	mov	r0, r8
 8015250:	4649      	mov	r1, r9
 8015252:	f7eb f9f1 	bl	8000638 <__aeabi_dmul>
 8015256:	a340      	add	r3, pc, #256	; (adr r3, 8015358 <__ieee754_pow+0x3a0>)
 8015258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801525c:	f7eb f9ec 	bl	8000638 <__aeabi_dmul>
 8015260:	4602      	mov	r2, r0
 8015262:	460b      	mov	r3, r1
 8015264:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015268:	f7eb f82e 	bl	80002c8 <__aeabi_dsub>
 801526c:	4602      	mov	r2, r0
 801526e:	460b      	mov	r3, r1
 8015270:	4604      	mov	r4, r0
 8015272:	460d      	mov	r5, r1
 8015274:	4630      	mov	r0, r6
 8015276:	4639      	mov	r1, r7
 8015278:	f7eb f828 	bl	80002cc <__adddf3>
 801527c:	2000      	movs	r0, #0
 801527e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015282:	4632      	mov	r2, r6
 8015284:	463b      	mov	r3, r7
 8015286:	f7eb f81f 	bl	80002c8 <__aeabi_dsub>
 801528a:	4602      	mov	r2, r0
 801528c:	460b      	mov	r3, r1
 801528e:	4620      	mov	r0, r4
 8015290:	4629      	mov	r1, r5
 8015292:	f7eb f819 	bl	80002c8 <__aeabi_dsub>
 8015296:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8015298:	f10b 33ff 	add.w	r3, fp, #4294967295
 801529c:	4313      	orrs	r3, r2
 801529e:	4606      	mov	r6, r0
 80152a0:	460f      	mov	r7, r1
 80152a2:	f040 81eb 	bne.w	801567c <__ieee754_pow+0x6c4>
 80152a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8015360 <__ieee754_pow+0x3a8>
 80152aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80152ae:	2400      	movs	r4, #0
 80152b0:	4622      	mov	r2, r4
 80152b2:	462b      	mov	r3, r5
 80152b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80152b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80152bc:	f7eb f804 	bl	80002c8 <__aeabi_dsub>
 80152c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80152c4:	f7eb f9b8 	bl	8000638 <__aeabi_dmul>
 80152c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80152cc:	4680      	mov	r8, r0
 80152ce:	4689      	mov	r9, r1
 80152d0:	4630      	mov	r0, r6
 80152d2:	4639      	mov	r1, r7
 80152d4:	f7eb f9b0 	bl	8000638 <__aeabi_dmul>
 80152d8:	4602      	mov	r2, r0
 80152da:	460b      	mov	r3, r1
 80152dc:	4640      	mov	r0, r8
 80152de:	4649      	mov	r1, r9
 80152e0:	f7ea fff4 	bl	80002cc <__adddf3>
 80152e4:	4622      	mov	r2, r4
 80152e6:	462b      	mov	r3, r5
 80152e8:	4680      	mov	r8, r0
 80152ea:	4689      	mov	r9, r1
 80152ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80152f0:	f7eb f9a2 	bl	8000638 <__aeabi_dmul>
 80152f4:	460b      	mov	r3, r1
 80152f6:	4604      	mov	r4, r0
 80152f8:	460d      	mov	r5, r1
 80152fa:	4602      	mov	r2, r0
 80152fc:	4649      	mov	r1, r9
 80152fe:	4640      	mov	r0, r8
 8015300:	e9cd 4500 	strd	r4, r5, [sp]
 8015304:	f7ea ffe2 	bl	80002cc <__adddf3>
 8015308:	4b1c      	ldr	r3, [pc, #112]	; (801537c <__ieee754_pow+0x3c4>)
 801530a:	4299      	cmp	r1, r3
 801530c:	4606      	mov	r6, r0
 801530e:	460f      	mov	r7, r1
 8015310:	468b      	mov	fp, r1
 8015312:	f340 82f7 	ble.w	8015904 <__ieee754_pow+0x94c>
 8015316:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801531a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801531e:	4303      	orrs	r3, r0
 8015320:	f000 81ea 	beq.w	80156f8 <__ieee754_pow+0x740>
 8015324:	a310      	add	r3, pc, #64	; (adr r3, 8015368 <__ieee754_pow+0x3b0>)
 8015326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801532a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801532e:	f7eb f983 	bl	8000638 <__aeabi_dmul>
 8015332:	a30d      	add	r3, pc, #52	; (adr r3, 8015368 <__ieee754_pow+0x3b0>)
 8015334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015338:	e6d5      	b.n	80150e6 <__ieee754_pow+0x12e>
 801533a:	bf00      	nop
 801533c:	f3af 8000 	nop.w
 8015340:	60000000 	.word	0x60000000
 8015344:	3ff71547 	.word	0x3ff71547
 8015348:	f85ddf44 	.word	0xf85ddf44
 801534c:	3e54ae0b 	.word	0x3e54ae0b
 8015350:	55555555 	.word	0x55555555
 8015354:	3fd55555 	.word	0x3fd55555
 8015358:	652b82fe 	.word	0x652b82fe
 801535c:	3ff71547 	.word	0x3ff71547
 8015360:	00000000 	.word	0x00000000
 8015364:	bff00000 	.word	0xbff00000
 8015368:	8800759c 	.word	0x8800759c
 801536c:	7e37e43c 	.word	0x7e37e43c
 8015370:	3ff00000 	.word	0x3ff00000
 8015374:	3fd00000 	.word	0x3fd00000
 8015378:	3fe00000 	.word	0x3fe00000
 801537c:	408fffff 	.word	0x408fffff
 8015380:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8015384:	f04f 0200 	mov.w	r2, #0
 8015388:	da05      	bge.n	8015396 <__ieee754_pow+0x3de>
 801538a:	4bd3      	ldr	r3, [pc, #844]	; (80156d8 <__ieee754_pow+0x720>)
 801538c:	f7eb f954 	bl	8000638 <__aeabi_dmul>
 8015390:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8015394:	460c      	mov	r4, r1
 8015396:	1523      	asrs	r3, r4, #20
 8015398:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801539c:	4413      	add	r3, r2
 801539e:	9309      	str	r3, [sp, #36]	; 0x24
 80153a0:	4bce      	ldr	r3, [pc, #824]	; (80156dc <__ieee754_pow+0x724>)
 80153a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80153a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80153aa:	429c      	cmp	r4, r3
 80153ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80153b0:	dd08      	ble.n	80153c4 <__ieee754_pow+0x40c>
 80153b2:	4bcb      	ldr	r3, [pc, #812]	; (80156e0 <__ieee754_pow+0x728>)
 80153b4:	429c      	cmp	r4, r3
 80153b6:	f340 815e 	ble.w	8015676 <__ieee754_pow+0x6be>
 80153ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153bc:	3301      	adds	r3, #1
 80153be:	9309      	str	r3, [sp, #36]	; 0x24
 80153c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80153c4:	f04f 0a00 	mov.w	sl, #0
 80153c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80153cc:	930c      	str	r3, [sp, #48]	; 0x30
 80153ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80153d0:	4bc4      	ldr	r3, [pc, #784]	; (80156e4 <__ieee754_pow+0x72c>)
 80153d2:	4413      	add	r3, r2
 80153d4:	ed93 7b00 	vldr	d7, [r3]
 80153d8:	4629      	mov	r1, r5
 80153da:	ec53 2b17 	vmov	r2, r3, d7
 80153de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80153e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80153e6:	f7ea ff6f 	bl	80002c8 <__aeabi_dsub>
 80153ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80153ee:	4606      	mov	r6, r0
 80153f0:	460f      	mov	r7, r1
 80153f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80153f6:	f7ea ff69 	bl	80002cc <__adddf3>
 80153fa:	4602      	mov	r2, r0
 80153fc:	460b      	mov	r3, r1
 80153fe:	2000      	movs	r0, #0
 8015400:	49b9      	ldr	r1, [pc, #740]	; (80156e8 <__ieee754_pow+0x730>)
 8015402:	f7eb fa43 	bl	800088c <__aeabi_ddiv>
 8015406:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801540a:	4602      	mov	r2, r0
 801540c:	460b      	mov	r3, r1
 801540e:	4630      	mov	r0, r6
 8015410:	4639      	mov	r1, r7
 8015412:	f7eb f911 	bl	8000638 <__aeabi_dmul>
 8015416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801541a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801541e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8015422:	2300      	movs	r3, #0
 8015424:	9302      	str	r3, [sp, #8]
 8015426:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801542a:	106d      	asrs	r5, r5, #1
 801542c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015430:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8015434:	2200      	movs	r2, #0
 8015436:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801543a:	4640      	mov	r0, r8
 801543c:	4649      	mov	r1, r9
 801543e:	4614      	mov	r4, r2
 8015440:	461d      	mov	r5, r3
 8015442:	f7eb f8f9 	bl	8000638 <__aeabi_dmul>
 8015446:	4602      	mov	r2, r0
 8015448:	460b      	mov	r3, r1
 801544a:	4630      	mov	r0, r6
 801544c:	4639      	mov	r1, r7
 801544e:	f7ea ff3b 	bl	80002c8 <__aeabi_dsub>
 8015452:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015456:	4606      	mov	r6, r0
 8015458:	460f      	mov	r7, r1
 801545a:	4620      	mov	r0, r4
 801545c:	4629      	mov	r1, r5
 801545e:	f7ea ff33 	bl	80002c8 <__aeabi_dsub>
 8015462:	4602      	mov	r2, r0
 8015464:	460b      	mov	r3, r1
 8015466:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801546a:	f7ea ff2d 	bl	80002c8 <__aeabi_dsub>
 801546e:	4642      	mov	r2, r8
 8015470:	464b      	mov	r3, r9
 8015472:	f7eb f8e1 	bl	8000638 <__aeabi_dmul>
 8015476:	4602      	mov	r2, r0
 8015478:	460b      	mov	r3, r1
 801547a:	4630      	mov	r0, r6
 801547c:	4639      	mov	r1, r7
 801547e:	f7ea ff23 	bl	80002c8 <__aeabi_dsub>
 8015482:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8015486:	f7eb f8d7 	bl	8000638 <__aeabi_dmul>
 801548a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801548e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8015492:	4610      	mov	r0, r2
 8015494:	4619      	mov	r1, r3
 8015496:	f7eb f8cf 	bl	8000638 <__aeabi_dmul>
 801549a:	a37b      	add	r3, pc, #492	; (adr r3, 8015688 <__ieee754_pow+0x6d0>)
 801549c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154a0:	4604      	mov	r4, r0
 80154a2:	460d      	mov	r5, r1
 80154a4:	f7eb f8c8 	bl	8000638 <__aeabi_dmul>
 80154a8:	a379      	add	r3, pc, #484	; (adr r3, 8015690 <__ieee754_pow+0x6d8>)
 80154aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154ae:	f7ea ff0d 	bl	80002cc <__adddf3>
 80154b2:	4622      	mov	r2, r4
 80154b4:	462b      	mov	r3, r5
 80154b6:	f7eb f8bf 	bl	8000638 <__aeabi_dmul>
 80154ba:	a377      	add	r3, pc, #476	; (adr r3, 8015698 <__ieee754_pow+0x6e0>)
 80154bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154c0:	f7ea ff04 	bl	80002cc <__adddf3>
 80154c4:	4622      	mov	r2, r4
 80154c6:	462b      	mov	r3, r5
 80154c8:	f7eb f8b6 	bl	8000638 <__aeabi_dmul>
 80154cc:	a374      	add	r3, pc, #464	; (adr r3, 80156a0 <__ieee754_pow+0x6e8>)
 80154ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154d2:	f7ea fefb 	bl	80002cc <__adddf3>
 80154d6:	4622      	mov	r2, r4
 80154d8:	462b      	mov	r3, r5
 80154da:	f7eb f8ad 	bl	8000638 <__aeabi_dmul>
 80154de:	a372      	add	r3, pc, #456	; (adr r3, 80156a8 <__ieee754_pow+0x6f0>)
 80154e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154e4:	f7ea fef2 	bl	80002cc <__adddf3>
 80154e8:	4622      	mov	r2, r4
 80154ea:	462b      	mov	r3, r5
 80154ec:	f7eb f8a4 	bl	8000638 <__aeabi_dmul>
 80154f0:	a36f      	add	r3, pc, #444	; (adr r3, 80156b0 <__ieee754_pow+0x6f8>)
 80154f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154f6:	f7ea fee9 	bl	80002cc <__adddf3>
 80154fa:	4622      	mov	r2, r4
 80154fc:	4606      	mov	r6, r0
 80154fe:	460f      	mov	r7, r1
 8015500:	462b      	mov	r3, r5
 8015502:	4620      	mov	r0, r4
 8015504:	4629      	mov	r1, r5
 8015506:	f7eb f897 	bl	8000638 <__aeabi_dmul>
 801550a:	4602      	mov	r2, r0
 801550c:	460b      	mov	r3, r1
 801550e:	4630      	mov	r0, r6
 8015510:	4639      	mov	r1, r7
 8015512:	f7eb f891 	bl	8000638 <__aeabi_dmul>
 8015516:	4642      	mov	r2, r8
 8015518:	4604      	mov	r4, r0
 801551a:	460d      	mov	r5, r1
 801551c:	464b      	mov	r3, r9
 801551e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015522:	f7ea fed3 	bl	80002cc <__adddf3>
 8015526:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801552a:	f7eb f885 	bl	8000638 <__aeabi_dmul>
 801552e:	4622      	mov	r2, r4
 8015530:	462b      	mov	r3, r5
 8015532:	f7ea fecb 	bl	80002cc <__adddf3>
 8015536:	4642      	mov	r2, r8
 8015538:	4606      	mov	r6, r0
 801553a:	460f      	mov	r7, r1
 801553c:	464b      	mov	r3, r9
 801553e:	4640      	mov	r0, r8
 8015540:	4649      	mov	r1, r9
 8015542:	f7eb f879 	bl	8000638 <__aeabi_dmul>
 8015546:	2200      	movs	r2, #0
 8015548:	4b68      	ldr	r3, [pc, #416]	; (80156ec <__ieee754_pow+0x734>)
 801554a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801554e:	f7ea febd 	bl	80002cc <__adddf3>
 8015552:	4632      	mov	r2, r6
 8015554:	463b      	mov	r3, r7
 8015556:	f7ea feb9 	bl	80002cc <__adddf3>
 801555a:	9802      	ldr	r0, [sp, #8]
 801555c:	460d      	mov	r5, r1
 801555e:	4604      	mov	r4, r0
 8015560:	4602      	mov	r2, r0
 8015562:	460b      	mov	r3, r1
 8015564:	4640      	mov	r0, r8
 8015566:	4649      	mov	r1, r9
 8015568:	f7eb f866 	bl	8000638 <__aeabi_dmul>
 801556c:	2200      	movs	r2, #0
 801556e:	4680      	mov	r8, r0
 8015570:	4689      	mov	r9, r1
 8015572:	4b5e      	ldr	r3, [pc, #376]	; (80156ec <__ieee754_pow+0x734>)
 8015574:	4620      	mov	r0, r4
 8015576:	4629      	mov	r1, r5
 8015578:	f7ea fea6 	bl	80002c8 <__aeabi_dsub>
 801557c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015580:	f7ea fea2 	bl	80002c8 <__aeabi_dsub>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	4630      	mov	r0, r6
 801558a:	4639      	mov	r1, r7
 801558c:	f7ea fe9c 	bl	80002c8 <__aeabi_dsub>
 8015590:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015594:	f7eb f850 	bl	8000638 <__aeabi_dmul>
 8015598:	4622      	mov	r2, r4
 801559a:	4606      	mov	r6, r0
 801559c:	460f      	mov	r7, r1
 801559e:	462b      	mov	r3, r5
 80155a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80155a4:	f7eb f848 	bl	8000638 <__aeabi_dmul>
 80155a8:	4602      	mov	r2, r0
 80155aa:	460b      	mov	r3, r1
 80155ac:	4630      	mov	r0, r6
 80155ae:	4639      	mov	r1, r7
 80155b0:	f7ea fe8c 	bl	80002cc <__adddf3>
 80155b4:	4606      	mov	r6, r0
 80155b6:	460f      	mov	r7, r1
 80155b8:	4602      	mov	r2, r0
 80155ba:	460b      	mov	r3, r1
 80155bc:	4640      	mov	r0, r8
 80155be:	4649      	mov	r1, r9
 80155c0:	f7ea fe84 	bl	80002cc <__adddf3>
 80155c4:	9802      	ldr	r0, [sp, #8]
 80155c6:	a33c      	add	r3, pc, #240	; (adr r3, 80156b8 <__ieee754_pow+0x700>)
 80155c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155cc:	4604      	mov	r4, r0
 80155ce:	460d      	mov	r5, r1
 80155d0:	f7eb f832 	bl	8000638 <__aeabi_dmul>
 80155d4:	4642      	mov	r2, r8
 80155d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80155da:	464b      	mov	r3, r9
 80155dc:	4620      	mov	r0, r4
 80155de:	4629      	mov	r1, r5
 80155e0:	f7ea fe72 	bl	80002c8 <__aeabi_dsub>
 80155e4:	4602      	mov	r2, r0
 80155e6:	460b      	mov	r3, r1
 80155e8:	4630      	mov	r0, r6
 80155ea:	4639      	mov	r1, r7
 80155ec:	f7ea fe6c 	bl	80002c8 <__aeabi_dsub>
 80155f0:	a333      	add	r3, pc, #204	; (adr r3, 80156c0 <__ieee754_pow+0x708>)
 80155f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155f6:	f7eb f81f 	bl	8000638 <__aeabi_dmul>
 80155fa:	a333      	add	r3, pc, #204	; (adr r3, 80156c8 <__ieee754_pow+0x710>)
 80155fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015600:	4606      	mov	r6, r0
 8015602:	460f      	mov	r7, r1
 8015604:	4620      	mov	r0, r4
 8015606:	4629      	mov	r1, r5
 8015608:	f7eb f816 	bl	8000638 <__aeabi_dmul>
 801560c:	4602      	mov	r2, r0
 801560e:	460b      	mov	r3, r1
 8015610:	4630      	mov	r0, r6
 8015612:	4639      	mov	r1, r7
 8015614:	f7ea fe5a 	bl	80002cc <__adddf3>
 8015618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801561a:	4b35      	ldr	r3, [pc, #212]	; (80156f0 <__ieee754_pow+0x738>)
 801561c:	4413      	add	r3, r2
 801561e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015622:	f7ea fe53 	bl	80002cc <__adddf3>
 8015626:	4604      	mov	r4, r0
 8015628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801562a:	460d      	mov	r5, r1
 801562c:	f7ea ff9a 	bl	8000564 <__aeabi_i2d>
 8015630:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015632:	4b30      	ldr	r3, [pc, #192]	; (80156f4 <__ieee754_pow+0x73c>)
 8015634:	4413      	add	r3, r2
 8015636:	e9d3 8900 	ldrd	r8, r9, [r3]
 801563a:	4606      	mov	r6, r0
 801563c:	460f      	mov	r7, r1
 801563e:	4622      	mov	r2, r4
 8015640:	462b      	mov	r3, r5
 8015642:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015646:	f7ea fe41 	bl	80002cc <__adddf3>
 801564a:	4642      	mov	r2, r8
 801564c:	464b      	mov	r3, r9
 801564e:	f7ea fe3d 	bl	80002cc <__adddf3>
 8015652:	4632      	mov	r2, r6
 8015654:	463b      	mov	r3, r7
 8015656:	f7ea fe39 	bl	80002cc <__adddf3>
 801565a:	9802      	ldr	r0, [sp, #8]
 801565c:	4632      	mov	r2, r6
 801565e:	463b      	mov	r3, r7
 8015660:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015664:	f7ea fe30 	bl	80002c8 <__aeabi_dsub>
 8015668:	4642      	mov	r2, r8
 801566a:	464b      	mov	r3, r9
 801566c:	f7ea fe2c 	bl	80002c8 <__aeabi_dsub>
 8015670:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8015674:	e607      	b.n	8015286 <__ieee754_pow+0x2ce>
 8015676:	f04f 0a01 	mov.w	sl, #1
 801567a:	e6a5      	b.n	80153c8 <__ieee754_pow+0x410>
 801567c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80156d0 <__ieee754_pow+0x718>
 8015680:	e613      	b.n	80152aa <__ieee754_pow+0x2f2>
 8015682:	bf00      	nop
 8015684:	f3af 8000 	nop.w
 8015688:	4a454eef 	.word	0x4a454eef
 801568c:	3fca7e28 	.word	0x3fca7e28
 8015690:	93c9db65 	.word	0x93c9db65
 8015694:	3fcd864a 	.word	0x3fcd864a
 8015698:	a91d4101 	.word	0xa91d4101
 801569c:	3fd17460 	.word	0x3fd17460
 80156a0:	518f264d 	.word	0x518f264d
 80156a4:	3fd55555 	.word	0x3fd55555
 80156a8:	db6fabff 	.word	0xdb6fabff
 80156ac:	3fdb6db6 	.word	0x3fdb6db6
 80156b0:	33333303 	.word	0x33333303
 80156b4:	3fe33333 	.word	0x3fe33333
 80156b8:	e0000000 	.word	0xe0000000
 80156bc:	3feec709 	.word	0x3feec709
 80156c0:	dc3a03fd 	.word	0xdc3a03fd
 80156c4:	3feec709 	.word	0x3feec709
 80156c8:	145b01f5 	.word	0x145b01f5
 80156cc:	be3e2fe0 	.word	0xbe3e2fe0
 80156d0:	00000000 	.word	0x00000000
 80156d4:	3ff00000 	.word	0x3ff00000
 80156d8:	43400000 	.word	0x43400000
 80156dc:	0003988e 	.word	0x0003988e
 80156e0:	000bb679 	.word	0x000bb679
 80156e4:	08017908 	.word	0x08017908
 80156e8:	3ff00000 	.word	0x3ff00000
 80156ec:	40080000 	.word	0x40080000
 80156f0:	08017928 	.word	0x08017928
 80156f4:	08017918 	.word	0x08017918
 80156f8:	a3b4      	add	r3, pc, #720	; (adr r3, 80159cc <__ieee754_pow+0xa14>)
 80156fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156fe:	4640      	mov	r0, r8
 8015700:	4649      	mov	r1, r9
 8015702:	f7ea fde3 	bl	80002cc <__adddf3>
 8015706:	4622      	mov	r2, r4
 8015708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801570c:	462b      	mov	r3, r5
 801570e:	4630      	mov	r0, r6
 8015710:	4639      	mov	r1, r7
 8015712:	f7ea fdd9 	bl	80002c8 <__aeabi_dsub>
 8015716:	4602      	mov	r2, r0
 8015718:	460b      	mov	r3, r1
 801571a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801571e:	f7eb fa1b 	bl	8000b58 <__aeabi_dcmpgt>
 8015722:	2800      	cmp	r0, #0
 8015724:	f47f adfe 	bne.w	8015324 <__ieee754_pow+0x36c>
 8015728:	4aa3      	ldr	r2, [pc, #652]	; (80159b8 <__ieee754_pow+0xa00>)
 801572a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801572e:	4293      	cmp	r3, r2
 8015730:	f340 810a 	ble.w	8015948 <__ieee754_pow+0x990>
 8015734:	151b      	asrs	r3, r3, #20
 8015736:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801573a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801573e:	fa4a f303 	asr.w	r3, sl, r3
 8015742:	445b      	add	r3, fp
 8015744:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8015748:	4e9c      	ldr	r6, [pc, #624]	; (80159bc <__ieee754_pow+0xa04>)
 801574a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801574e:	4116      	asrs	r6, r2
 8015750:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8015754:	2000      	movs	r0, #0
 8015756:	ea23 0106 	bic.w	r1, r3, r6
 801575a:	f1c2 0214 	rsb	r2, r2, #20
 801575e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015762:	fa4a fa02 	asr.w	sl, sl, r2
 8015766:	f1bb 0f00 	cmp.w	fp, #0
 801576a:	4602      	mov	r2, r0
 801576c:	460b      	mov	r3, r1
 801576e:	4620      	mov	r0, r4
 8015770:	4629      	mov	r1, r5
 8015772:	bfb8      	it	lt
 8015774:	f1ca 0a00 	rsblt	sl, sl, #0
 8015778:	f7ea fda6 	bl	80002c8 <__aeabi_dsub>
 801577c:	e9cd 0100 	strd	r0, r1, [sp]
 8015780:	4642      	mov	r2, r8
 8015782:	464b      	mov	r3, r9
 8015784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015788:	f7ea fda0 	bl	80002cc <__adddf3>
 801578c:	2000      	movs	r0, #0
 801578e:	a378      	add	r3, pc, #480	; (adr r3, 8015970 <__ieee754_pow+0x9b8>)
 8015790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015794:	4604      	mov	r4, r0
 8015796:	460d      	mov	r5, r1
 8015798:	f7ea ff4e 	bl	8000638 <__aeabi_dmul>
 801579c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80157a0:	4606      	mov	r6, r0
 80157a2:	460f      	mov	r7, r1
 80157a4:	4620      	mov	r0, r4
 80157a6:	4629      	mov	r1, r5
 80157a8:	f7ea fd8e 	bl	80002c8 <__aeabi_dsub>
 80157ac:	4602      	mov	r2, r0
 80157ae:	460b      	mov	r3, r1
 80157b0:	4640      	mov	r0, r8
 80157b2:	4649      	mov	r1, r9
 80157b4:	f7ea fd88 	bl	80002c8 <__aeabi_dsub>
 80157b8:	a36f      	add	r3, pc, #444	; (adr r3, 8015978 <__ieee754_pow+0x9c0>)
 80157ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157be:	f7ea ff3b 	bl	8000638 <__aeabi_dmul>
 80157c2:	a36f      	add	r3, pc, #444	; (adr r3, 8015980 <__ieee754_pow+0x9c8>)
 80157c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157c8:	4680      	mov	r8, r0
 80157ca:	4689      	mov	r9, r1
 80157cc:	4620      	mov	r0, r4
 80157ce:	4629      	mov	r1, r5
 80157d0:	f7ea ff32 	bl	8000638 <__aeabi_dmul>
 80157d4:	4602      	mov	r2, r0
 80157d6:	460b      	mov	r3, r1
 80157d8:	4640      	mov	r0, r8
 80157da:	4649      	mov	r1, r9
 80157dc:	f7ea fd76 	bl	80002cc <__adddf3>
 80157e0:	4604      	mov	r4, r0
 80157e2:	460d      	mov	r5, r1
 80157e4:	4602      	mov	r2, r0
 80157e6:	460b      	mov	r3, r1
 80157e8:	4630      	mov	r0, r6
 80157ea:	4639      	mov	r1, r7
 80157ec:	f7ea fd6e 	bl	80002cc <__adddf3>
 80157f0:	4632      	mov	r2, r6
 80157f2:	463b      	mov	r3, r7
 80157f4:	4680      	mov	r8, r0
 80157f6:	4689      	mov	r9, r1
 80157f8:	f7ea fd66 	bl	80002c8 <__aeabi_dsub>
 80157fc:	4602      	mov	r2, r0
 80157fe:	460b      	mov	r3, r1
 8015800:	4620      	mov	r0, r4
 8015802:	4629      	mov	r1, r5
 8015804:	f7ea fd60 	bl	80002c8 <__aeabi_dsub>
 8015808:	4642      	mov	r2, r8
 801580a:	4606      	mov	r6, r0
 801580c:	460f      	mov	r7, r1
 801580e:	464b      	mov	r3, r9
 8015810:	4640      	mov	r0, r8
 8015812:	4649      	mov	r1, r9
 8015814:	f7ea ff10 	bl	8000638 <__aeabi_dmul>
 8015818:	a35b      	add	r3, pc, #364	; (adr r3, 8015988 <__ieee754_pow+0x9d0>)
 801581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801581e:	4604      	mov	r4, r0
 8015820:	460d      	mov	r5, r1
 8015822:	f7ea ff09 	bl	8000638 <__aeabi_dmul>
 8015826:	a35a      	add	r3, pc, #360	; (adr r3, 8015990 <__ieee754_pow+0x9d8>)
 8015828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801582c:	f7ea fd4c 	bl	80002c8 <__aeabi_dsub>
 8015830:	4622      	mov	r2, r4
 8015832:	462b      	mov	r3, r5
 8015834:	f7ea ff00 	bl	8000638 <__aeabi_dmul>
 8015838:	a357      	add	r3, pc, #348	; (adr r3, 8015998 <__ieee754_pow+0x9e0>)
 801583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583e:	f7ea fd45 	bl	80002cc <__adddf3>
 8015842:	4622      	mov	r2, r4
 8015844:	462b      	mov	r3, r5
 8015846:	f7ea fef7 	bl	8000638 <__aeabi_dmul>
 801584a:	a355      	add	r3, pc, #340	; (adr r3, 80159a0 <__ieee754_pow+0x9e8>)
 801584c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015850:	f7ea fd3a 	bl	80002c8 <__aeabi_dsub>
 8015854:	4622      	mov	r2, r4
 8015856:	462b      	mov	r3, r5
 8015858:	f7ea feee 	bl	8000638 <__aeabi_dmul>
 801585c:	a352      	add	r3, pc, #328	; (adr r3, 80159a8 <__ieee754_pow+0x9f0>)
 801585e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015862:	f7ea fd33 	bl	80002cc <__adddf3>
 8015866:	4622      	mov	r2, r4
 8015868:	462b      	mov	r3, r5
 801586a:	f7ea fee5 	bl	8000638 <__aeabi_dmul>
 801586e:	4602      	mov	r2, r0
 8015870:	460b      	mov	r3, r1
 8015872:	4640      	mov	r0, r8
 8015874:	4649      	mov	r1, r9
 8015876:	f7ea fd27 	bl	80002c8 <__aeabi_dsub>
 801587a:	4604      	mov	r4, r0
 801587c:	460d      	mov	r5, r1
 801587e:	4602      	mov	r2, r0
 8015880:	460b      	mov	r3, r1
 8015882:	4640      	mov	r0, r8
 8015884:	4649      	mov	r1, r9
 8015886:	f7ea fed7 	bl	8000638 <__aeabi_dmul>
 801588a:	2200      	movs	r2, #0
 801588c:	e9cd 0100 	strd	r0, r1, [sp]
 8015890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015894:	4620      	mov	r0, r4
 8015896:	4629      	mov	r1, r5
 8015898:	f7ea fd16 	bl	80002c8 <__aeabi_dsub>
 801589c:	4602      	mov	r2, r0
 801589e:	460b      	mov	r3, r1
 80158a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80158a4:	f7ea fff2 	bl	800088c <__aeabi_ddiv>
 80158a8:	4632      	mov	r2, r6
 80158aa:	4604      	mov	r4, r0
 80158ac:	460d      	mov	r5, r1
 80158ae:	463b      	mov	r3, r7
 80158b0:	4640      	mov	r0, r8
 80158b2:	4649      	mov	r1, r9
 80158b4:	f7ea fec0 	bl	8000638 <__aeabi_dmul>
 80158b8:	4632      	mov	r2, r6
 80158ba:	463b      	mov	r3, r7
 80158bc:	f7ea fd06 	bl	80002cc <__adddf3>
 80158c0:	4602      	mov	r2, r0
 80158c2:	460b      	mov	r3, r1
 80158c4:	4620      	mov	r0, r4
 80158c6:	4629      	mov	r1, r5
 80158c8:	f7ea fcfe 	bl	80002c8 <__aeabi_dsub>
 80158cc:	4642      	mov	r2, r8
 80158ce:	464b      	mov	r3, r9
 80158d0:	f7ea fcfa 	bl	80002c8 <__aeabi_dsub>
 80158d4:	4602      	mov	r2, r0
 80158d6:	460b      	mov	r3, r1
 80158d8:	2000      	movs	r0, #0
 80158da:	4939      	ldr	r1, [pc, #228]	; (80159c0 <__ieee754_pow+0xa08>)
 80158dc:	f7ea fcf4 	bl	80002c8 <__aeabi_dsub>
 80158e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80158e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80158e8:	4602      	mov	r2, r0
 80158ea:	460b      	mov	r3, r1
 80158ec:	da2f      	bge.n	801594e <__ieee754_pow+0x996>
 80158ee:	4650      	mov	r0, sl
 80158f0:	ec43 2b10 	vmov	d0, r2, r3
 80158f4:	f001 faa0 	bl	8016e38 <scalbn>
 80158f8:	ec51 0b10 	vmov	r0, r1, d0
 80158fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015900:	f7ff bbf1 	b.w	80150e6 <__ieee754_pow+0x12e>
 8015904:	4b2f      	ldr	r3, [pc, #188]	; (80159c4 <__ieee754_pow+0xa0c>)
 8015906:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801590a:	429e      	cmp	r6, r3
 801590c:	f77f af0c 	ble.w	8015728 <__ieee754_pow+0x770>
 8015910:	4b2d      	ldr	r3, [pc, #180]	; (80159c8 <__ieee754_pow+0xa10>)
 8015912:	440b      	add	r3, r1
 8015914:	4303      	orrs	r3, r0
 8015916:	d00b      	beq.n	8015930 <__ieee754_pow+0x978>
 8015918:	a325      	add	r3, pc, #148	; (adr r3, 80159b0 <__ieee754_pow+0x9f8>)
 801591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801591e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015922:	f7ea fe89 	bl	8000638 <__aeabi_dmul>
 8015926:	a322      	add	r3, pc, #136	; (adr r3, 80159b0 <__ieee754_pow+0x9f8>)
 8015928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801592c:	f7ff bbdb 	b.w	80150e6 <__ieee754_pow+0x12e>
 8015930:	4622      	mov	r2, r4
 8015932:	462b      	mov	r3, r5
 8015934:	f7ea fcc8 	bl	80002c8 <__aeabi_dsub>
 8015938:	4642      	mov	r2, r8
 801593a:	464b      	mov	r3, r9
 801593c:	f7eb f902 	bl	8000b44 <__aeabi_dcmpge>
 8015940:	2800      	cmp	r0, #0
 8015942:	f43f aef1 	beq.w	8015728 <__ieee754_pow+0x770>
 8015946:	e7e7      	b.n	8015918 <__ieee754_pow+0x960>
 8015948:	f04f 0a00 	mov.w	sl, #0
 801594c:	e718      	b.n	8015780 <__ieee754_pow+0x7c8>
 801594e:	4621      	mov	r1, r4
 8015950:	e7d4      	b.n	80158fc <__ieee754_pow+0x944>
 8015952:	2000      	movs	r0, #0
 8015954:	491a      	ldr	r1, [pc, #104]	; (80159c0 <__ieee754_pow+0xa08>)
 8015956:	f7ff bb8f 	b.w	8015078 <__ieee754_pow+0xc0>
 801595a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801595e:	f7ff bb8b 	b.w	8015078 <__ieee754_pow+0xc0>
 8015962:	4630      	mov	r0, r6
 8015964:	4639      	mov	r1, r7
 8015966:	f7ff bb87 	b.w	8015078 <__ieee754_pow+0xc0>
 801596a:	4693      	mov	fp, r2
 801596c:	f7ff bb98 	b.w	80150a0 <__ieee754_pow+0xe8>
 8015970:	00000000 	.word	0x00000000
 8015974:	3fe62e43 	.word	0x3fe62e43
 8015978:	fefa39ef 	.word	0xfefa39ef
 801597c:	3fe62e42 	.word	0x3fe62e42
 8015980:	0ca86c39 	.word	0x0ca86c39
 8015984:	be205c61 	.word	0xbe205c61
 8015988:	72bea4d0 	.word	0x72bea4d0
 801598c:	3e663769 	.word	0x3e663769
 8015990:	c5d26bf1 	.word	0xc5d26bf1
 8015994:	3ebbbd41 	.word	0x3ebbbd41
 8015998:	af25de2c 	.word	0xaf25de2c
 801599c:	3f11566a 	.word	0x3f11566a
 80159a0:	16bebd93 	.word	0x16bebd93
 80159a4:	3f66c16c 	.word	0x3f66c16c
 80159a8:	5555553e 	.word	0x5555553e
 80159ac:	3fc55555 	.word	0x3fc55555
 80159b0:	c2f8f359 	.word	0xc2f8f359
 80159b4:	01a56e1f 	.word	0x01a56e1f
 80159b8:	3fe00000 	.word	0x3fe00000
 80159bc:	000fffff 	.word	0x000fffff
 80159c0:	3ff00000 	.word	0x3ff00000
 80159c4:	4090cbff 	.word	0x4090cbff
 80159c8:	3f6f3400 	.word	0x3f6f3400
 80159cc:	652b82fe 	.word	0x652b82fe
 80159d0:	3c971547 	.word	0x3c971547
 80159d4:	00000000 	.word	0x00000000

080159d8 <__ieee754_rem_pio2>:
 80159d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159dc:	ec57 6b10 	vmov	r6, r7, d0
 80159e0:	4bc3      	ldr	r3, [pc, #780]	; (8015cf0 <__ieee754_rem_pio2+0x318>)
 80159e2:	b08d      	sub	sp, #52	; 0x34
 80159e4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80159e8:	4598      	cmp	r8, r3
 80159ea:	4604      	mov	r4, r0
 80159ec:	9704      	str	r7, [sp, #16]
 80159ee:	dc07      	bgt.n	8015a00 <__ieee754_rem_pio2+0x28>
 80159f0:	2200      	movs	r2, #0
 80159f2:	2300      	movs	r3, #0
 80159f4:	ed84 0b00 	vstr	d0, [r4]
 80159f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80159fc:	2500      	movs	r5, #0
 80159fe:	e027      	b.n	8015a50 <__ieee754_rem_pio2+0x78>
 8015a00:	4bbc      	ldr	r3, [pc, #752]	; (8015cf4 <__ieee754_rem_pio2+0x31c>)
 8015a02:	4598      	cmp	r8, r3
 8015a04:	dc75      	bgt.n	8015af2 <__ieee754_rem_pio2+0x11a>
 8015a06:	9b04      	ldr	r3, [sp, #16]
 8015a08:	4dbb      	ldr	r5, [pc, #748]	; (8015cf8 <__ieee754_rem_pio2+0x320>)
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	ee10 0a10 	vmov	r0, s0
 8015a10:	a3a9      	add	r3, pc, #676	; (adr r3, 8015cb8 <__ieee754_rem_pio2+0x2e0>)
 8015a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a16:	4639      	mov	r1, r7
 8015a18:	dd36      	ble.n	8015a88 <__ieee754_rem_pio2+0xb0>
 8015a1a:	f7ea fc55 	bl	80002c8 <__aeabi_dsub>
 8015a1e:	45a8      	cmp	r8, r5
 8015a20:	4606      	mov	r6, r0
 8015a22:	460f      	mov	r7, r1
 8015a24:	d018      	beq.n	8015a58 <__ieee754_rem_pio2+0x80>
 8015a26:	a3a6      	add	r3, pc, #664	; (adr r3, 8015cc0 <__ieee754_rem_pio2+0x2e8>)
 8015a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2c:	f7ea fc4c 	bl	80002c8 <__aeabi_dsub>
 8015a30:	4602      	mov	r2, r0
 8015a32:	460b      	mov	r3, r1
 8015a34:	e9c4 2300 	strd	r2, r3, [r4]
 8015a38:	4630      	mov	r0, r6
 8015a3a:	4639      	mov	r1, r7
 8015a3c:	f7ea fc44 	bl	80002c8 <__aeabi_dsub>
 8015a40:	a39f      	add	r3, pc, #636	; (adr r3, 8015cc0 <__ieee754_rem_pio2+0x2e8>)
 8015a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a46:	f7ea fc3f 	bl	80002c8 <__aeabi_dsub>
 8015a4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015a4e:	2501      	movs	r5, #1
 8015a50:	4628      	mov	r0, r5
 8015a52:	b00d      	add	sp, #52	; 0x34
 8015a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a58:	a39b      	add	r3, pc, #620	; (adr r3, 8015cc8 <__ieee754_rem_pio2+0x2f0>)
 8015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5e:	f7ea fc33 	bl	80002c8 <__aeabi_dsub>
 8015a62:	a39b      	add	r3, pc, #620	; (adr r3, 8015cd0 <__ieee754_rem_pio2+0x2f8>)
 8015a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a68:	4606      	mov	r6, r0
 8015a6a:	460f      	mov	r7, r1
 8015a6c:	f7ea fc2c 	bl	80002c8 <__aeabi_dsub>
 8015a70:	4602      	mov	r2, r0
 8015a72:	460b      	mov	r3, r1
 8015a74:	e9c4 2300 	strd	r2, r3, [r4]
 8015a78:	4630      	mov	r0, r6
 8015a7a:	4639      	mov	r1, r7
 8015a7c:	f7ea fc24 	bl	80002c8 <__aeabi_dsub>
 8015a80:	a393      	add	r3, pc, #588	; (adr r3, 8015cd0 <__ieee754_rem_pio2+0x2f8>)
 8015a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a86:	e7de      	b.n	8015a46 <__ieee754_rem_pio2+0x6e>
 8015a88:	f7ea fc20 	bl	80002cc <__adddf3>
 8015a8c:	45a8      	cmp	r8, r5
 8015a8e:	4606      	mov	r6, r0
 8015a90:	460f      	mov	r7, r1
 8015a92:	d016      	beq.n	8015ac2 <__ieee754_rem_pio2+0xea>
 8015a94:	a38a      	add	r3, pc, #552	; (adr r3, 8015cc0 <__ieee754_rem_pio2+0x2e8>)
 8015a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a9a:	f7ea fc17 	bl	80002cc <__adddf3>
 8015a9e:	4602      	mov	r2, r0
 8015aa0:	460b      	mov	r3, r1
 8015aa2:	e9c4 2300 	strd	r2, r3, [r4]
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	4639      	mov	r1, r7
 8015aaa:	f7ea fc0d 	bl	80002c8 <__aeabi_dsub>
 8015aae:	a384      	add	r3, pc, #528	; (adr r3, 8015cc0 <__ieee754_rem_pio2+0x2e8>)
 8015ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ab4:	f7ea fc0a 	bl	80002cc <__adddf3>
 8015ab8:	f04f 35ff 	mov.w	r5, #4294967295
 8015abc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015ac0:	e7c6      	b.n	8015a50 <__ieee754_rem_pio2+0x78>
 8015ac2:	a381      	add	r3, pc, #516	; (adr r3, 8015cc8 <__ieee754_rem_pio2+0x2f0>)
 8015ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ac8:	f7ea fc00 	bl	80002cc <__adddf3>
 8015acc:	a380      	add	r3, pc, #512	; (adr r3, 8015cd0 <__ieee754_rem_pio2+0x2f8>)
 8015ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ad2:	4606      	mov	r6, r0
 8015ad4:	460f      	mov	r7, r1
 8015ad6:	f7ea fbf9 	bl	80002cc <__adddf3>
 8015ada:	4602      	mov	r2, r0
 8015adc:	460b      	mov	r3, r1
 8015ade:	e9c4 2300 	strd	r2, r3, [r4]
 8015ae2:	4630      	mov	r0, r6
 8015ae4:	4639      	mov	r1, r7
 8015ae6:	f7ea fbef 	bl	80002c8 <__aeabi_dsub>
 8015aea:	a379      	add	r3, pc, #484	; (adr r3, 8015cd0 <__ieee754_rem_pio2+0x2f8>)
 8015aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015af0:	e7e0      	b.n	8015ab4 <__ieee754_rem_pio2+0xdc>
 8015af2:	4b82      	ldr	r3, [pc, #520]	; (8015cfc <__ieee754_rem_pio2+0x324>)
 8015af4:	4598      	cmp	r8, r3
 8015af6:	f300 80d0 	bgt.w	8015c9a <__ieee754_rem_pio2+0x2c2>
 8015afa:	f001 f875 	bl	8016be8 <fabs>
 8015afe:	ec57 6b10 	vmov	r6, r7, d0
 8015b02:	ee10 0a10 	vmov	r0, s0
 8015b06:	a374      	add	r3, pc, #464	; (adr r3, 8015cd8 <__ieee754_rem_pio2+0x300>)
 8015b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b0c:	4639      	mov	r1, r7
 8015b0e:	f7ea fd93 	bl	8000638 <__aeabi_dmul>
 8015b12:	2200      	movs	r2, #0
 8015b14:	4b7a      	ldr	r3, [pc, #488]	; (8015d00 <__ieee754_rem_pio2+0x328>)
 8015b16:	f7ea fbd9 	bl	80002cc <__adddf3>
 8015b1a:	f7eb f83d 	bl	8000b98 <__aeabi_d2iz>
 8015b1e:	4605      	mov	r5, r0
 8015b20:	f7ea fd20 	bl	8000564 <__aeabi_i2d>
 8015b24:	a364      	add	r3, pc, #400	; (adr r3, 8015cb8 <__ieee754_rem_pio2+0x2e0>)
 8015b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015b2e:	f7ea fd83 	bl	8000638 <__aeabi_dmul>
 8015b32:	4602      	mov	r2, r0
 8015b34:	460b      	mov	r3, r1
 8015b36:	4630      	mov	r0, r6
 8015b38:	4639      	mov	r1, r7
 8015b3a:	f7ea fbc5 	bl	80002c8 <__aeabi_dsub>
 8015b3e:	a360      	add	r3, pc, #384	; (adr r3, 8015cc0 <__ieee754_rem_pio2+0x2e8>)
 8015b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b44:	4682      	mov	sl, r0
 8015b46:	468b      	mov	fp, r1
 8015b48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015b4c:	f7ea fd74 	bl	8000638 <__aeabi_dmul>
 8015b50:	2d1f      	cmp	r5, #31
 8015b52:	4606      	mov	r6, r0
 8015b54:	460f      	mov	r7, r1
 8015b56:	dc0c      	bgt.n	8015b72 <__ieee754_rem_pio2+0x19a>
 8015b58:	1e6a      	subs	r2, r5, #1
 8015b5a:	4b6a      	ldr	r3, [pc, #424]	; (8015d04 <__ieee754_rem_pio2+0x32c>)
 8015b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015b60:	4543      	cmp	r3, r8
 8015b62:	d006      	beq.n	8015b72 <__ieee754_rem_pio2+0x19a>
 8015b64:	4632      	mov	r2, r6
 8015b66:	463b      	mov	r3, r7
 8015b68:	4650      	mov	r0, sl
 8015b6a:	4659      	mov	r1, fp
 8015b6c:	f7ea fbac 	bl	80002c8 <__aeabi_dsub>
 8015b70:	e00e      	b.n	8015b90 <__ieee754_rem_pio2+0x1b8>
 8015b72:	4632      	mov	r2, r6
 8015b74:	463b      	mov	r3, r7
 8015b76:	4650      	mov	r0, sl
 8015b78:	4659      	mov	r1, fp
 8015b7a:	f7ea fba5 	bl	80002c8 <__aeabi_dsub>
 8015b7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8015b82:	9305      	str	r3, [sp, #20]
 8015b84:	9a05      	ldr	r2, [sp, #20]
 8015b86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015b8a:	1ad3      	subs	r3, r2, r3
 8015b8c:	2b10      	cmp	r3, #16
 8015b8e:	dc02      	bgt.n	8015b96 <__ieee754_rem_pio2+0x1be>
 8015b90:	e9c4 0100 	strd	r0, r1, [r4]
 8015b94:	e039      	b.n	8015c0a <__ieee754_rem_pio2+0x232>
 8015b96:	a34c      	add	r3, pc, #304	; (adr r3, 8015cc8 <__ieee754_rem_pio2+0x2f0>)
 8015b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015ba0:	f7ea fd4a 	bl	8000638 <__aeabi_dmul>
 8015ba4:	4606      	mov	r6, r0
 8015ba6:	460f      	mov	r7, r1
 8015ba8:	4602      	mov	r2, r0
 8015baa:	460b      	mov	r3, r1
 8015bac:	4650      	mov	r0, sl
 8015bae:	4659      	mov	r1, fp
 8015bb0:	f7ea fb8a 	bl	80002c8 <__aeabi_dsub>
 8015bb4:	4602      	mov	r2, r0
 8015bb6:	460b      	mov	r3, r1
 8015bb8:	4680      	mov	r8, r0
 8015bba:	4689      	mov	r9, r1
 8015bbc:	4650      	mov	r0, sl
 8015bbe:	4659      	mov	r1, fp
 8015bc0:	f7ea fb82 	bl	80002c8 <__aeabi_dsub>
 8015bc4:	4632      	mov	r2, r6
 8015bc6:	463b      	mov	r3, r7
 8015bc8:	f7ea fb7e 	bl	80002c8 <__aeabi_dsub>
 8015bcc:	a340      	add	r3, pc, #256	; (adr r3, 8015cd0 <__ieee754_rem_pio2+0x2f8>)
 8015bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bd2:	4606      	mov	r6, r0
 8015bd4:	460f      	mov	r7, r1
 8015bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015bda:	f7ea fd2d 	bl	8000638 <__aeabi_dmul>
 8015bde:	4632      	mov	r2, r6
 8015be0:	463b      	mov	r3, r7
 8015be2:	f7ea fb71 	bl	80002c8 <__aeabi_dsub>
 8015be6:	4602      	mov	r2, r0
 8015be8:	460b      	mov	r3, r1
 8015bea:	4606      	mov	r6, r0
 8015bec:	460f      	mov	r7, r1
 8015bee:	4640      	mov	r0, r8
 8015bf0:	4649      	mov	r1, r9
 8015bf2:	f7ea fb69 	bl	80002c8 <__aeabi_dsub>
 8015bf6:	9a05      	ldr	r2, [sp, #20]
 8015bf8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	2b31      	cmp	r3, #49	; 0x31
 8015c00:	dc20      	bgt.n	8015c44 <__ieee754_rem_pio2+0x26c>
 8015c02:	e9c4 0100 	strd	r0, r1, [r4]
 8015c06:	46c2      	mov	sl, r8
 8015c08:	46cb      	mov	fp, r9
 8015c0a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8015c0e:	4650      	mov	r0, sl
 8015c10:	4642      	mov	r2, r8
 8015c12:	464b      	mov	r3, r9
 8015c14:	4659      	mov	r1, fp
 8015c16:	f7ea fb57 	bl	80002c8 <__aeabi_dsub>
 8015c1a:	463b      	mov	r3, r7
 8015c1c:	4632      	mov	r2, r6
 8015c1e:	f7ea fb53 	bl	80002c8 <__aeabi_dsub>
 8015c22:	9b04      	ldr	r3, [sp, #16]
 8015c24:	2b00      	cmp	r3, #0
 8015c26:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015c2a:	f6bf af11 	bge.w	8015a50 <__ieee754_rem_pio2+0x78>
 8015c2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015c32:	6063      	str	r3, [r4, #4]
 8015c34:	f8c4 8000 	str.w	r8, [r4]
 8015c38:	60a0      	str	r0, [r4, #8]
 8015c3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c3e:	60e3      	str	r3, [r4, #12]
 8015c40:	426d      	negs	r5, r5
 8015c42:	e705      	b.n	8015a50 <__ieee754_rem_pio2+0x78>
 8015c44:	a326      	add	r3, pc, #152	; (adr r3, 8015ce0 <__ieee754_rem_pio2+0x308>)
 8015c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c4e:	f7ea fcf3 	bl	8000638 <__aeabi_dmul>
 8015c52:	4606      	mov	r6, r0
 8015c54:	460f      	mov	r7, r1
 8015c56:	4602      	mov	r2, r0
 8015c58:	460b      	mov	r3, r1
 8015c5a:	4640      	mov	r0, r8
 8015c5c:	4649      	mov	r1, r9
 8015c5e:	f7ea fb33 	bl	80002c8 <__aeabi_dsub>
 8015c62:	4602      	mov	r2, r0
 8015c64:	460b      	mov	r3, r1
 8015c66:	4682      	mov	sl, r0
 8015c68:	468b      	mov	fp, r1
 8015c6a:	4640      	mov	r0, r8
 8015c6c:	4649      	mov	r1, r9
 8015c6e:	f7ea fb2b 	bl	80002c8 <__aeabi_dsub>
 8015c72:	4632      	mov	r2, r6
 8015c74:	463b      	mov	r3, r7
 8015c76:	f7ea fb27 	bl	80002c8 <__aeabi_dsub>
 8015c7a:	a31b      	add	r3, pc, #108	; (adr r3, 8015ce8 <__ieee754_rem_pio2+0x310>)
 8015c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c80:	4606      	mov	r6, r0
 8015c82:	460f      	mov	r7, r1
 8015c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015c88:	f7ea fcd6 	bl	8000638 <__aeabi_dmul>
 8015c8c:	4632      	mov	r2, r6
 8015c8e:	463b      	mov	r3, r7
 8015c90:	f7ea fb1a 	bl	80002c8 <__aeabi_dsub>
 8015c94:	4606      	mov	r6, r0
 8015c96:	460f      	mov	r7, r1
 8015c98:	e764      	b.n	8015b64 <__ieee754_rem_pio2+0x18c>
 8015c9a:	4b1b      	ldr	r3, [pc, #108]	; (8015d08 <__ieee754_rem_pio2+0x330>)
 8015c9c:	4598      	cmp	r8, r3
 8015c9e:	dd35      	ble.n	8015d0c <__ieee754_rem_pio2+0x334>
 8015ca0:	ee10 2a10 	vmov	r2, s0
 8015ca4:	463b      	mov	r3, r7
 8015ca6:	4630      	mov	r0, r6
 8015ca8:	4639      	mov	r1, r7
 8015caa:	f7ea fb0d 	bl	80002c8 <__aeabi_dsub>
 8015cae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8015cb2:	e9c4 0100 	strd	r0, r1, [r4]
 8015cb6:	e6a1      	b.n	80159fc <__ieee754_rem_pio2+0x24>
 8015cb8:	54400000 	.word	0x54400000
 8015cbc:	3ff921fb 	.word	0x3ff921fb
 8015cc0:	1a626331 	.word	0x1a626331
 8015cc4:	3dd0b461 	.word	0x3dd0b461
 8015cc8:	1a600000 	.word	0x1a600000
 8015ccc:	3dd0b461 	.word	0x3dd0b461
 8015cd0:	2e037073 	.word	0x2e037073
 8015cd4:	3ba3198a 	.word	0x3ba3198a
 8015cd8:	6dc9c883 	.word	0x6dc9c883
 8015cdc:	3fe45f30 	.word	0x3fe45f30
 8015ce0:	2e000000 	.word	0x2e000000
 8015ce4:	3ba3198a 	.word	0x3ba3198a
 8015ce8:	252049c1 	.word	0x252049c1
 8015cec:	397b839a 	.word	0x397b839a
 8015cf0:	3fe921fb 	.word	0x3fe921fb
 8015cf4:	4002d97b 	.word	0x4002d97b
 8015cf8:	3ff921fb 	.word	0x3ff921fb
 8015cfc:	413921fb 	.word	0x413921fb
 8015d00:	3fe00000 	.word	0x3fe00000
 8015d04:	08017938 	.word	0x08017938
 8015d08:	7fefffff 	.word	0x7fefffff
 8015d0c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8015d10:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8015d14:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8015d18:	4630      	mov	r0, r6
 8015d1a:	460f      	mov	r7, r1
 8015d1c:	f7ea ff3c 	bl	8000b98 <__aeabi_d2iz>
 8015d20:	f7ea fc20 	bl	8000564 <__aeabi_i2d>
 8015d24:	4602      	mov	r2, r0
 8015d26:	460b      	mov	r3, r1
 8015d28:	4630      	mov	r0, r6
 8015d2a:	4639      	mov	r1, r7
 8015d2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8015d30:	f7ea faca 	bl	80002c8 <__aeabi_dsub>
 8015d34:	2200      	movs	r2, #0
 8015d36:	4b1f      	ldr	r3, [pc, #124]	; (8015db4 <__ieee754_rem_pio2+0x3dc>)
 8015d38:	f7ea fc7e 	bl	8000638 <__aeabi_dmul>
 8015d3c:	460f      	mov	r7, r1
 8015d3e:	4606      	mov	r6, r0
 8015d40:	f7ea ff2a 	bl	8000b98 <__aeabi_d2iz>
 8015d44:	f7ea fc0e 	bl	8000564 <__aeabi_i2d>
 8015d48:	4602      	mov	r2, r0
 8015d4a:	460b      	mov	r3, r1
 8015d4c:	4630      	mov	r0, r6
 8015d4e:	4639      	mov	r1, r7
 8015d50:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015d54:	f7ea fab8 	bl	80002c8 <__aeabi_dsub>
 8015d58:	2200      	movs	r2, #0
 8015d5a:	4b16      	ldr	r3, [pc, #88]	; (8015db4 <__ieee754_rem_pio2+0x3dc>)
 8015d5c:	f7ea fc6c 	bl	8000638 <__aeabi_dmul>
 8015d60:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015d64:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8015d68:	f04f 0803 	mov.w	r8, #3
 8015d6c:	2600      	movs	r6, #0
 8015d6e:	2700      	movs	r7, #0
 8015d70:	4632      	mov	r2, r6
 8015d72:	463b      	mov	r3, r7
 8015d74:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8015d78:	f108 3aff 	add.w	sl, r8, #4294967295
 8015d7c:	f7ea fec4 	bl	8000b08 <__aeabi_dcmpeq>
 8015d80:	b9b0      	cbnz	r0, 8015db0 <__ieee754_rem_pio2+0x3d8>
 8015d82:	4b0d      	ldr	r3, [pc, #52]	; (8015db8 <__ieee754_rem_pio2+0x3e0>)
 8015d84:	9301      	str	r3, [sp, #4]
 8015d86:	2302      	movs	r3, #2
 8015d88:	9300      	str	r3, [sp, #0]
 8015d8a:	462a      	mov	r2, r5
 8015d8c:	4643      	mov	r3, r8
 8015d8e:	4621      	mov	r1, r4
 8015d90:	a806      	add	r0, sp, #24
 8015d92:	f000 f98d 	bl	80160b0 <__kernel_rem_pio2>
 8015d96:	9b04      	ldr	r3, [sp, #16]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	4605      	mov	r5, r0
 8015d9c:	f6bf ae58 	bge.w	8015a50 <__ieee754_rem_pio2+0x78>
 8015da0:	6863      	ldr	r3, [r4, #4]
 8015da2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015da6:	6063      	str	r3, [r4, #4]
 8015da8:	68e3      	ldr	r3, [r4, #12]
 8015daa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015dae:	e746      	b.n	8015c3e <__ieee754_rem_pio2+0x266>
 8015db0:	46d0      	mov	r8, sl
 8015db2:	e7dd      	b.n	8015d70 <__ieee754_rem_pio2+0x398>
 8015db4:	41700000 	.word	0x41700000
 8015db8:	080179b8 	.word	0x080179b8

08015dbc <__ieee754_sqrt>:
 8015dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015dc0:	4955      	ldr	r1, [pc, #340]	; (8015f18 <__ieee754_sqrt+0x15c>)
 8015dc2:	ec55 4b10 	vmov	r4, r5, d0
 8015dc6:	43a9      	bics	r1, r5
 8015dc8:	462b      	mov	r3, r5
 8015dca:	462a      	mov	r2, r5
 8015dcc:	d112      	bne.n	8015df4 <__ieee754_sqrt+0x38>
 8015dce:	ee10 2a10 	vmov	r2, s0
 8015dd2:	ee10 0a10 	vmov	r0, s0
 8015dd6:	4629      	mov	r1, r5
 8015dd8:	f7ea fc2e 	bl	8000638 <__aeabi_dmul>
 8015ddc:	4602      	mov	r2, r0
 8015dde:	460b      	mov	r3, r1
 8015de0:	4620      	mov	r0, r4
 8015de2:	4629      	mov	r1, r5
 8015de4:	f7ea fa72 	bl	80002cc <__adddf3>
 8015de8:	4604      	mov	r4, r0
 8015dea:	460d      	mov	r5, r1
 8015dec:	ec45 4b10 	vmov	d0, r4, r5
 8015df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015df4:	2d00      	cmp	r5, #0
 8015df6:	ee10 0a10 	vmov	r0, s0
 8015dfa:	4621      	mov	r1, r4
 8015dfc:	dc0f      	bgt.n	8015e1e <__ieee754_sqrt+0x62>
 8015dfe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8015e02:	4330      	orrs	r0, r6
 8015e04:	d0f2      	beq.n	8015dec <__ieee754_sqrt+0x30>
 8015e06:	b155      	cbz	r5, 8015e1e <__ieee754_sqrt+0x62>
 8015e08:	ee10 2a10 	vmov	r2, s0
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	4629      	mov	r1, r5
 8015e10:	f7ea fa5a 	bl	80002c8 <__aeabi_dsub>
 8015e14:	4602      	mov	r2, r0
 8015e16:	460b      	mov	r3, r1
 8015e18:	f7ea fd38 	bl	800088c <__aeabi_ddiv>
 8015e1c:	e7e4      	b.n	8015de8 <__ieee754_sqrt+0x2c>
 8015e1e:	151b      	asrs	r3, r3, #20
 8015e20:	d073      	beq.n	8015f0a <__ieee754_sqrt+0x14e>
 8015e22:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8015e26:	07dd      	lsls	r5, r3, #31
 8015e28:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8015e2c:	bf48      	it	mi
 8015e2e:	0fc8      	lsrmi	r0, r1, #31
 8015e30:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8015e34:	bf44      	itt	mi
 8015e36:	0049      	lslmi	r1, r1, #1
 8015e38:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8015e3c:	2500      	movs	r5, #0
 8015e3e:	1058      	asrs	r0, r3, #1
 8015e40:	0fcb      	lsrs	r3, r1, #31
 8015e42:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8015e46:	0049      	lsls	r1, r1, #1
 8015e48:	2316      	movs	r3, #22
 8015e4a:	462c      	mov	r4, r5
 8015e4c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8015e50:	19a7      	adds	r7, r4, r6
 8015e52:	4297      	cmp	r7, r2
 8015e54:	bfde      	ittt	le
 8015e56:	19bc      	addle	r4, r7, r6
 8015e58:	1bd2      	suble	r2, r2, r7
 8015e5a:	19ad      	addle	r5, r5, r6
 8015e5c:	0fcf      	lsrs	r7, r1, #31
 8015e5e:	3b01      	subs	r3, #1
 8015e60:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8015e64:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015e68:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015e6c:	d1f0      	bne.n	8015e50 <__ieee754_sqrt+0x94>
 8015e6e:	f04f 0c20 	mov.w	ip, #32
 8015e72:	469e      	mov	lr, r3
 8015e74:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8015e78:	42a2      	cmp	r2, r4
 8015e7a:	eb06 070e 	add.w	r7, r6, lr
 8015e7e:	dc02      	bgt.n	8015e86 <__ieee754_sqrt+0xca>
 8015e80:	d112      	bne.n	8015ea8 <__ieee754_sqrt+0xec>
 8015e82:	428f      	cmp	r7, r1
 8015e84:	d810      	bhi.n	8015ea8 <__ieee754_sqrt+0xec>
 8015e86:	2f00      	cmp	r7, #0
 8015e88:	eb07 0e06 	add.w	lr, r7, r6
 8015e8c:	da42      	bge.n	8015f14 <__ieee754_sqrt+0x158>
 8015e8e:	f1be 0f00 	cmp.w	lr, #0
 8015e92:	db3f      	blt.n	8015f14 <__ieee754_sqrt+0x158>
 8015e94:	f104 0801 	add.w	r8, r4, #1
 8015e98:	1b12      	subs	r2, r2, r4
 8015e9a:	428f      	cmp	r7, r1
 8015e9c:	bf88      	it	hi
 8015e9e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015ea2:	1bc9      	subs	r1, r1, r7
 8015ea4:	4433      	add	r3, r6
 8015ea6:	4644      	mov	r4, r8
 8015ea8:	0052      	lsls	r2, r2, #1
 8015eaa:	f1bc 0c01 	subs.w	ip, ip, #1
 8015eae:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8015eb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8015eb6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015eba:	d1dd      	bne.n	8015e78 <__ieee754_sqrt+0xbc>
 8015ebc:	430a      	orrs	r2, r1
 8015ebe:	d006      	beq.n	8015ece <__ieee754_sqrt+0x112>
 8015ec0:	1c5c      	adds	r4, r3, #1
 8015ec2:	bf13      	iteet	ne
 8015ec4:	3301      	addne	r3, #1
 8015ec6:	3501      	addeq	r5, #1
 8015ec8:	4663      	moveq	r3, ip
 8015eca:	f023 0301 	bicne.w	r3, r3, #1
 8015ece:	106a      	asrs	r2, r5, #1
 8015ed0:	085b      	lsrs	r3, r3, #1
 8015ed2:	07e9      	lsls	r1, r5, #31
 8015ed4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015ed8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015edc:	bf48      	it	mi
 8015ede:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8015ee2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8015ee6:	461c      	mov	r4, r3
 8015ee8:	e780      	b.n	8015dec <__ieee754_sqrt+0x30>
 8015eea:	0aca      	lsrs	r2, r1, #11
 8015eec:	3815      	subs	r0, #21
 8015eee:	0549      	lsls	r1, r1, #21
 8015ef0:	2a00      	cmp	r2, #0
 8015ef2:	d0fa      	beq.n	8015eea <__ieee754_sqrt+0x12e>
 8015ef4:	02d6      	lsls	r6, r2, #11
 8015ef6:	d50a      	bpl.n	8015f0e <__ieee754_sqrt+0x152>
 8015ef8:	f1c3 0420 	rsb	r4, r3, #32
 8015efc:	fa21 f404 	lsr.w	r4, r1, r4
 8015f00:	1e5d      	subs	r5, r3, #1
 8015f02:	4099      	lsls	r1, r3
 8015f04:	4322      	orrs	r2, r4
 8015f06:	1b43      	subs	r3, r0, r5
 8015f08:	e78b      	b.n	8015e22 <__ieee754_sqrt+0x66>
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	e7f0      	b.n	8015ef0 <__ieee754_sqrt+0x134>
 8015f0e:	0052      	lsls	r2, r2, #1
 8015f10:	3301      	adds	r3, #1
 8015f12:	e7ef      	b.n	8015ef4 <__ieee754_sqrt+0x138>
 8015f14:	46a0      	mov	r8, r4
 8015f16:	e7bf      	b.n	8015e98 <__ieee754_sqrt+0xdc>
 8015f18:	7ff00000 	.word	0x7ff00000
 8015f1c:	00000000 	.word	0x00000000

08015f20 <__kernel_cos>:
 8015f20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f24:	ec59 8b10 	vmov	r8, r9, d0
 8015f28:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8015f2c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8015f30:	ed2d 8b02 	vpush	{d8}
 8015f34:	eeb0 8a41 	vmov.f32	s16, s2
 8015f38:	eef0 8a61 	vmov.f32	s17, s3
 8015f3c:	da07      	bge.n	8015f4e <__kernel_cos+0x2e>
 8015f3e:	ee10 0a10 	vmov	r0, s0
 8015f42:	4649      	mov	r1, r9
 8015f44:	f7ea fe28 	bl	8000b98 <__aeabi_d2iz>
 8015f48:	2800      	cmp	r0, #0
 8015f4a:	f000 8089 	beq.w	8016060 <__kernel_cos+0x140>
 8015f4e:	4642      	mov	r2, r8
 8015f50:	464b      	mov	r3, r9
 8015f52:	4640      	mov	r0, r8
 8015f54:	4649      	mov	r1, r9
 8015f56:	f7ea fb6f 	bl	8000638 <__aeabi_dmul>
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	4b4e      	ldr	r3, [pc, #312]	; (8016098 <__kernel_cos+0x178>)
 8015f5e:	4604      	mov	r4, r0
 8015f60:	460d      	mov	r5, r1
 8015f62:	f7ea fb69 	bl	8000638 <__aeabi_dmul>
 8015f66:	a340      	add	r3, pc, #256	; (adr r3, 8016068 <__kernel_cos+0x148>)
 8015f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f6c:	4682      	mov	sl, r0
 8015f6e:	468b      	mov	fp, r1
 8015f70:	4620      	mov	r0, r4
 8015f72:	4629      	mov	r1, r5
 8015f74:	f7ea fb60 	bl	8000638 <__aeabi_dmul>
 8015f78:	a33d      	add	r3, pc, #244	; (adr r3, 8016070 <__kernel_cos+0x150>)
 8015f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f7e:	f7ea f9a5 	bl	80002cc <__adddf3>
 8015f82:	4622      	mov	r2, r4
 8015f84:	462b      	mov	r3, r5
 8015f86:	f7ea fb57 	bl	8000638 <__aeabi_dmul>
 8015f8a:	a33b      	add	r3, pc, #236	; (adr r3, 8016078 <__kernel_cos+0x158>)
 8015f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015f90:	f7ea f99a 	bl	80002c8 <__aeabi_dsub>
 8015f94:	4622      	mov	r2, r4
 8015f96:	462b      	mov	r3, r5
 8015f98:	f7ea fb4e 	bl	8000638 <__aeabi_dmul>
 8015f9c:	a338      	add	r3, pc, #224	; (adr r3, 8016080 <__kernel_cos+0x160>)
 8015f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fa2:	f7ea f993 	bl	80002cc <__adddf3>
 8015fa6:	4622      	mov	r2, r4
 8015fa8:	462b      	mov	r3, r5
 8015faa:	f7ea fb45 	bl	8000638 <__aeabi_dmul>
 8015fae:	a336      	add	r3, pc, #216	; (adr r3, 8016088 <__kernel_cos+0x168>)
 8015fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fb4:	f7ea f988 	bl	80002c8 <__aeabi_dsub>
 8015fb8:	4622      	mov	r2, r4
 8015fba:	462b      	mov	r3, r5
 8015fbc:	f7ea fb3c 	bl	8000638 <__aeabi_dmul>
 8015fc0:	a333      	add	r3, pc, #204	; (adr r3, 8016090 <__kernel_cos+0x170>)
 8015fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015fc6:	f7ea f981 	bl	80002cc <__adddf3>
 8015fca:	4622      	mov	r2, r4
 8015fcc:	462b      	mov	r3, r5
 8015fce:	f7ea fb33 	bl	8000638 <__aeabi_dmul>
 8015fd2:	4622      	mov	r2, r4
 8015fd4:	462b      	mov	r3, r5
 8015fd6:	f7ea fb2f 	bl	8000638 <__aeabi_dmul>
 8015fda:	ec53 2b18 	vmov	r2, r3, d8
 8015fde:	4604      	mov	r4, r0
 8015fe0:	460d      	mov	r5, r1
 8015fe2:	4640      	mov	r0, r8
 8015fe4:	4649      	mov	r1, r9
 8015fe6:	f7ea fb27 	bl	8000638 <__aeabi_dmul>
 8015fea:	460b      	mov	r3, r1
 8015fec:	4602      	mov	r2, r0
 8015fee:	4629      	mov	r1, r5
 8015ff0:	4620      	mov	r0, r4
 8015ff2:	f7ea f969 	bl	80002c8 <__aeabi_dsub>
 8015ff6:	4b29      	ldr	r3, [pc, #164]	; (801609c <__kernel_cos+0x17c>)
 8015ff8:	429e      	cmp	r6, r3
 8015ffa:	4680      	mov	r8, r0
 8015ffc:	4689      	mov	r9, r1
 8015ffe:	dc11      	bgt.n	8016024 <__kernel_cos+0x104>
 8016000:	4602      	mov	r2, r0
 8016002:	460b      	mov	r3, r1
 8016004:	4650      	mov	r0, sl
 8016006:	4659      	mov	r1, fp
 8016008:	f7ea f95e 	bl	80002c8 <__aeabi_dsub>
 801600c:	460b      	mov	r3, r1
 801600e:	4924      	ldr	r1, [pc, #144]	; (80160a0 <__kernel_cos+0x180>)
 8016010:	4602      	mov	r2, r0
 8016012:	2000      	movs	r0, #0
 8016014:	f7ea f958 	bl	80002c8 <__aeabi_dsub>
 8016018:	ecbd 8b02 	vpop	{d8}
 801601c:	ec41 0b10 	vmov	d0, r0, r1
 8016020:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016024:	4b1f      	ldr	r3, [pc, #124]	; (80160a4 <__kernel_cos+0x184>)
 8016026:	491e      	ldr	r1, [pc, #120]	; (80160a0 <__kernel_cos+0x180>)
 8016028:	429e      	cmp	r6, r3
 801602a:	bfcc      	ite	gt
 801602c:	4d1e      	ldrgt	r5, [pc, #120]	; (80160a8 <__kernel_cos+0x188>)
 801602e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8016032:	2400      	movs	r4, #0
 8016034:	4622      	mov	r2, r4
 8016036:	462b      	mov	r3, r5
 8016038:	2000      	movs	r0, #0
 801603a:	f7ea f945 	bl	80002c8 <__aeabi_dsub>
 801603e:	4622      	mov	r2, r4
 8016040:	4606      	mov	r6, r0
 8016042:	460f      	mov	r7, r1
 8016044:	462b      	mov	r3, r5
 8016046:	4650      	mov	r0, sl
 8016048:	4659      	mov	r1, fp
 801604a:	f7ea f93d 	bl	80002c8 <__aeabi_dsub>
 801604e:	4642      	mov	r2, r8
 8016050:	464b      	mov	r3, r9
 8016052:	f7ea f939 	bl	80002c8 <__aeabi_dsub>
 8016056:	4602      	mov	r2, r0
 8016058:	460b      	mov	r3, r1
 801605a:	4630      	mov	r0, r6
 801605c:	4639      	mov	r1, r7
 801605e:	e7d9      	b.n	8016014 <__kernel_cos+0xf4>
 8016060:	2000      	movs	r0, #0
 8016062:	490f      	ldr	r1, [pc, #60]	; (80160a0 <__kernel_cos+0x180>)
 8016064:	e7d8      	b.n	8016018 <__kernel_cos+0xf8>
 8016066:	bf00      	nop
 8016068:	be8838d4 	.word	0xbe8838d4
 801606c:	bda8fae9 	.word	0xbda8fae9
 8016070:	bdb4b1c4 	.word	0xbdb4b1c4
 8016074:	3e21ee9e 	.word	0x3e21ee9e
 8016078:	809c52ad 	.word	0x809c52ad
 801607c:	3e927e4f 	.word	0x3e927e4f
 8016080:	19cb1590 	.word	0x19cb1590
 8016084:	3efa01a0 	.word	0x3efa01a0
 8016088:	16c15177 	.word	0x16c15177
 801608c:	3f56c16c 	.word	0x3f56c16c
 8016090:	5555554c 	.word	0x5555554c
 8016094:	3fa55555 	.word	0x3fa55555
 8016098:	3fe00000 	.word	0x3fe00000
 801609c:	3fd33332 	.word	0x3fd33332
 80160a0:	3ff00000 	.word	0x3ff00000
 80160a4:	3fe90000 	.word	0x3fe90000
 80160a8:	3fd20000 	.word	0x3fd20000
 80160ac:	00000000 	.word	0x00000000

080160b0 <__kernel_rem_pio2>:
 80160b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160b4:	ed2d 8b02 	vpush	{d8}
 80160b8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80160bc:	1ed4      	subs	r4, r2, #3
 80160be:	9308      	str	r3, [sp, #32]
 80160c0:	9101      	str	r1, [sp, #4]
 80160c2:	4bc5      	ldr	r3, [pc, #788]	; (80163d8 <__kernel_rem_pio2+0x328>)
 80160c4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80160c6:	9009      	str	r0, [sp, #36]	; 0x24
 80160c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80160cc:	9304      	str	r3, [sp, #16]
 80160ce:	9b08      	ldr	r3, [sp, #32]
 80160d0:	3b01      	subs	r3, #1
 80160d2:	9307      	str	r3, [sp, #28]
 80160d4:	2318      	movs	r3, #24
 80160d6:	fb94 f4f3 	sdiv	r4, r4, r3
 80160da:	f06f 0317 	mvn.w	r3, #23
 80160de:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80160e2:	fb04 3303 	mla	r3, r4, r3, r3
 80160e6:	eb03 0a02 	add.w	sl, r3, r2
 80160ea:	9b04      	ldr	r3, [sp, #16]
 80160ec:	9a07      	ldr	r2, [sp, #28]
 80160ee:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80163c8 <__kernel_rem_pio2+0x318>
 80160f2:	eb03 0802 	add.w	r8, r3, r2
 80160f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80160f8:	1aa7      	subs	r7, r4, r2
 80160fa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80160fe:	ae22      	add	r6, sp, #136	; 0x88
 8016100:	2500      	movs	r5, #0
 8016102:	4545      	cmp	r5, r8
 8016104:	dd13      	ble.n	801612e <__kernel_rem_pio2+0x7e>
 8016106:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80163c8 <__kernel_rem_pio2+0x318>
 801610a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801610e:	2600      	movs	r6, #0
 8016110:	9b04      	ldr	r3, [sp, #16]
 8016112:	429e      	cmp	r6, r3
 8016114:	dc32      	bgt.n	801617c <__kernel_rem_pio2+0xcc>
 8016116:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016118:	9302      	str	r3, [sp, #8]
 801611a:	9b08      	ldr	r3, [sp, #32]
 801611c:	199d      	adds	r5, r3, r6
 801611e:	ab22      	add	r3, sp, #136	; 0x88
 8016120:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8016124:	9306      	str	r3, [sp, #24]
 8016126:	ec59 8b18 	vmov	r8, r9, d8
 801612a:	2700      	movs	r7, #0
 801612c:	e01f      	b.n	801616e <__kernel_rem_pio2+0xbe>
 801612e:	42ef      	cmn	r7, r5
 8016130:	d407      	bmi.n	8016142 <__kernel_rem_pio2+0x92>
 8016132:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8016136:	f7ea fa15 	bl	8000564 <__aeabi_i2d>
 801613a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801613e:	3501      	adds	r5, #1
 8016140:	e7df      	b.n	8016102 <__kernel_rem_pio2+0x52>
 8016142:	ec51 0b18 	vmov	r0, r1, d8
 8016146:	e7f8      	b.n	801613a <__kernel_rem_pio2+0x8a>
 8016148:	9906      	ldr	r1, [sp, #24]
 801614a:	9d02      	ldr	r5, [sp, #8]
 801614c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8016150:	9106      	str	r1, [sp, #24]
 8016152:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8016156:	9502      	str	r5, [sp, #8]
 8016158:	f7ea fa6e 	bl	8000638 <__aeabi_dmul>
 801615c:	4602      	mov	r2, r0
 801615e:	460b      	mov	r3, r1
 8016160:	4640      	mov	r0, r8
 8016162:	4649      	mov	r1, r9
 8016164:	f7ea f8b2 	bl	80002cc <__adddf3>
 8016168:	3701      	adds	r7, #1
 801616a:	4680      	mov	r8, r0
 801616c:	4689      	mov	r9, r1
 801616e:	9b07      	ldr	r3, [sp, #28]
 8016170:	429f      	cmp	r7, r3
 8016172:	dde9      	ble.n	8016148 <__kernel_rem_pio2+0x98>
 8016174:	e8eb 8902 	strd	r8, r9, [fp], #8
 8016178:	3601      	adds	r6, #1
 801617a:	e7c9      	b.n	8016110 <__kernel_rem_pio2+0x60>
 801617c:	9b04      	ldr	r3, [sp, #16]
 801617e:	aa0e      	add	r2, sp, #56	; 0x38
 8016180:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016184:	930c      	str	r3, [sp, #48]	; 0x30
 8016186:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8016188:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801618c:	9c04      	ldr	r4, [sp, #16]
 801618e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016190:	ab9a      	add	r3, sp, #616	; 0x268
 8016192:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8016196:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801619a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801619e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80161a2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80161a6:	ab9a      	add	r3, sp, #616	; 0x268
 80161a8:	445b      	add	r3, fp
 80161aa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80161ae:	2500      	movs	r5, #0
 80161b0:	1b63      	subs	r3, r4, r5
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	dc78      	bgt.n	80162a8 <__kernel_rem_pio2+0x1f8>
 80161b6:	4650      	mov	r0, sl
 80161b8:	ec49 8b10 	vmov	d0, r8, r9
 80161bc:	f000 fe3c 	bl	8016e38 <scalbn>
 80161c0:	ec57 6b10 	vmov	r6, r7, d0
 80161c4:	2200      	movs	r2, #0
 80161c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80161ca:	ee10 0a10 	vmov	r0, s0
 80161ce:	4639      	mov	r1, r7
 80161d0:	f7ea fa32 	bl	8000638 <__aeabi_dmul>
 80161d4:	ec41 0b10 	vmov	d0, r0, r1
 80161d8:	f000 fd1a 	bl	8016c10 <floor>
 80161dc:	2200      	movs	r2, #0
 80161de:	ec51 0b10 	vmov	r0, r1, d0
 80161e2:	4b7e      	ldr	r3, [pc, #504]	; (80163dc <__kernel_rem_pio2+0x32c>)
 80161e4:	f7ea fa28 	bl	8000638 <__aeabi_dmul>
 80161e8:	4602      	mov	r2, r0
 80161ea:	460b      	mov	r3, r1
 80161ec:	4630      	mov	r0, r6
 80161ee:	4639      	mov	r1, r7
 80161f0:	f7ea f86a 	bl	80002c8 <__aeabi_dsub>
 80161f4:	460f      	mov	r7, r1
 80161f6:	4606      	mov	r6, r0
 80161f8:	f7ea fcce 	bl	8000b98 <__aeabi_d2iz>
 80161fc:	9006      	str	r0, [sp, #24]
 80161fe:	f7ea f9b1 	bl	8000564 <__aeabi_i2d>
 8016202:	4602      	mov	r2, r0
 8016204:	460b      	mov	r3, r1
 8016206:	4630      	mov	r0, r6
 8016208:	4639      	mov	r1, r7
 801620a:	f7ea f85d 	bl	80002c8 <__aeabi_dsub>
 801620e:	f1ba 0f00 	cmp.w	sl, #0
 8016212:	4606      	mov	r6, r0
 8016214:	460f      	mov	r7, r1
 8016216:	dd6c      	ble.n	80162f2 <__kernel_rem_pio2+0x242>
 8016218:	1e62      	subs	r2, r4, #1
 801621a:	ab0e      	add	r3, sp, #56	; 0x38
 801621c:	f1ca 0118 	rsb	r1, sl, #24
 8016220:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8016224:	9d06      	ldr	r5, [sp, #24]
 8016226:	fa40 f301 	asr.w	r3, r0, r1
 801622a:	441d      	add	r5, r3
 801622c:	408b      	lsls	r3, r1
 801622e:	1ac0      	subs	r0, r0, r3
 8016230:	ab0e      	add	r3, sp, #56	; 0x38
 8016232:	9506      	str	r5, [sp, #24]
 8016234:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8016238:	f1ca 0317 	rsb	r3, sl, #23
 801623c:	fa40 f303 	asr.w	r3, r0, r3
 8016240:	9302      	str	r3, [sp, #8]
 8016242:	9b02      	ldr	r3, [sp, #8]
 8016244:	2b00      	cmp	r3, #0
 8016246:	dd62      	ble.n	801630e <__kernel_rem_pio2+0x25e>
 8016248:	9b06      	ldr	r3, [sp, #24]
 801624a:	2200      	movs	r2, #0
 801624c:	3301      	adds	r3, #1
 801624e:	9306      	str	r3, [sp, #24]
 8016250:	4615      	mov	r5, r2
 8016252:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8016256:	4294      	cmp	r4, r2
 8016258:	f300 8095 	bgt.w	8016386 <__kernel_rem_pio2+0x2d6>
 801625c:	f1ba 0f00 	cmp.w	sl, #0
 8016260:	dd07      	ble.n	8016272 <__kernel_rem_pio2+0x1c2>
 8016262:	f1ba 0f01 	cmp.w	sl, #1
 8016266:	f000 80a2 	beq.w	80163ae <__kernel_rem_pio2+0x2fe>
 801626a:	f1ba 0f02 	cmp.w	sl, #2
 801626e:	f000 80c1 	beq.w	80163f4 <__kernel_rem_pio2+0x344>
 8016272:	9b02      	ldr	r3, [sp, #8]
 8016274:	2b02      	cmp	r3, #2
 8016276:	d14a      	bne.n	801630e <__kernel_rem_pio2+0x25e>
 8016278:	4632      	mov	r2, r6
 801627a:	463b      	mov	r3, r7
 801627c:	2000      	movs	r0, #0
 801627e:	4958      	ldr	r1, [pc, #352]	; (80163e0 <__kernel_rem_pio2+0x330>)
 8016280:	f7ea f822 	bl	80002c8 <__aeabi_dsub>
 8016284:	4606      	mov	r6, r0
 8016286:	460f      	mov	r7, r1
 8016288:	2d00      	cmp	r5, #0
 801628a:	d040      	beq.n	801630e <__kernel_rem_pio2+0x25e>
 801628c:	4650      	mov	r0, sl
 801628e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80163d0 <__kernel_rem_pio2+0x320>
 8016292:	f000 fdd1 	bl	8016e38 <scalbn>
 8016296:	4630      	mov	r0, r6
 8016298:	4639      	mov	r1, r7
 801629a:	ec53 2b10 	vmov	r2, r3, d0
 801629e:	f7ea f813 	bl	80002c8 <__aeabi_dsub>
 80162a2:	4606      	mov	r6, r0
 80162a4:	460f      	mov	r7, r1
 80162a6:	e032      	b.n	801630e <__kernel_rem_pio2+0x25e>
 80162a8:	2200      	movs	r2, #0
 80162aa:	4b4e      	ldr	r3, [pc, #312]	; (80163e4 <__kernel_rem_pio2+0x334>)
 80162ac:	4640      	mov	r0, r8
 80162ae:	4649      	mov	r1, r9
 80162b0:	f7ea f9c2 	bl	8000638 <__aeabi_dmul>
 80162b4:	f7ea fc70 	bl	8000b98 <__aeabi_d2iz>
 80162b8:	f7ea f954 	bl	8000564 <__aeabi_i2d>
 80162bc:	2200      	movs	r2, #0
 80162be:	4b4a      	ldr	r3, [pc, #296]	; (80163e8 <__kernel_rem_pio2+0x338>)
 80162c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80162c4:	f7ea f9b8 	bl	8000638 <__aeabi_dmul>
 80162c8:	4602      	mov	r2, r0
 80162ca:	460b      	mov	r3, r1
 80162cc:	4640      	mov	r0, r8
 80162ce:	4649      	mov	r1, r9
 80162d0:	f7e9 fffa 	bl	80002c8 <__aeabi_dsub>
 80162d4:	f7ea fc60 	bl	8000b98 <__aeabi_d2iz>
 80162d8:	ab0e      	add	r3, sp, #56	; 0x38
 80162da:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80162de:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80162e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80162e6:	f7e9 fff1 	bl	80002cc <__adddf3>
 80162ea:	3501      	adds	r5, #1
 80162ec:	4680      	mov	r8, r0
 80162ee:	4689      	mov	r9, r1
 80162f0:	e75e      	b.n	80161b0 <__kernel_rem_pio2+0x100>
 80162f2:	d105      	bne.n	8016300 <__kernel_rem_pio2+0x250>
 80162f4:	1e63      	subs	r3, r4, #1
 80162f6:	aa0e      	add	r2, sp, #56	; 0x38
 80162f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80162fc:	15c3      	asrs	r3, r0, #23
 80162fe:	e79f      	b.n	8016240 <__kernel_rem_pio2+0x190>
 8016300:	2200      	movs	r2, #0
 8016302:	4b3a      	ldr	r3, [pc, #232]	; (80163ec <__kernel_rem_pio2+0x33c>)
 8016304:	f7ea fc1e 	bl	8000b44 <__aeabi_dcmpge>
 8016308:	2800      	cmp	r0, #0
 801630a:	d139      	bne.n	8016380 <__kernel_rem_pio2+0x2d0>
 801630c:	9002      	str	r0, [sp, #8]
 801630e:	2200      	movs	r2, #0
 8016310:	2300      	movs	r3, #0
 8016312:	4630      	mov	r0, r6
 8016314:	4639      	mov	r1, r7
 8016316:	f7ea fbf7 	bl	8000b08 <__aeabi_dcmpeq>
 801631a:	2800      	cmp	r0, #0
 801631c:	f000 80c7 	beq.w	80164ae <__kernel_rem_pio2+0x3fe>
 8016320:	1e65      	subs	r5, r4, #1
 8016322:	462b      	mov	r3, r5
 8016324:	2200      	movs	r2, #0
 8016326:	9904      	ldr	r1, [sp, #16]
 8016328:	428b      	cmp	r3, r1
 801632a:	da6a      	bge.n	8016402 <__kernel_rem_pio2+0x352>
 801632c:	2a00      	cmp	r2, #0
 801632e:	f000 8088 	beq.w	8016442 <__kernel_rem_pio2+0x392>
 8016332:	ab0e      	add	r3, sp, #56	; 0x38
 8016334:	f1aa 0a18 	sub.w	sl, sl, #24
 8016338:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 80b4 	beq.w	80164aa <__kernel_rem_pio2+0x3fa>
 8016342:	4650      	mov	r0, sl
 8016344:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80163d0 <__kernel_rem_pio2+0x320>
 8016348:	f000 fd76 	bl	8016e38 <scalbn>
 801634c:	00ec      	lsls	r4, r5, #3
 801634e:	ab72      	add	r3, sp, #456	; 0x1c8
 8016350:	191e      	adds	r6, r3, r4
 8016352:	ec59 8b10 	vmov	r8, r9, d0
 8016356:	f106 0a08 	add.w	sl, r6, #8
 801635a:	462f      	mov	r7, r5
 801635c:	2f00      	cmp	r7, #0
 801635e:	f280 80df 	bge.w	8016520 <__kernel_rem_pio2+0x470>
 8016362:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80163c8 <__kernel_rem_pio2+0x318>
 8016366:	f04f 0a00 	mov.w	sl, #0
 801636a:	eba5 030a 	sub.w	r3, r5, sl
 801636e:	2b00      	cmp	r3, #0
 8016370:	f2c0 810a 	blt.w	8016588 <__kernel_rem_pio2+0x4d8>
 8016374:	f8df b078 	ldr.w	fp, [pc, #120]	; 80163f0 <__kernel_rem_pio2+0x340>
 8016378:	ec59 8b18 	vmov	r8, r9, d8
 801637c:	2700      	movs	r7, #0
 801637e:	e0f5      	b.n	801656c <__kernel_rem_pio2+0x4bc>
 8016380:	2302      	movs	r3, #2
 8016382:	9302      	str	r3, [sp, #8]
 8016384:	e760      	b.n	8016248 <__kernel_rem_pio2+0x198>
 8016386:	ab0e      	add	r3, sp, #56	; 0x38
 8016388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801638c:	b94d      	cbnz	r5, 80163a2 <__kernel_rem_pio2+0x2f2>
 801638e:	b12b      	cbz	r3, 801639c <__kernel_rem_pio2+0x2ec>
 8016390:	a80e      	add	r0, sp, #56	; 0x38
 8016392:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8016396:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801639a:	2301      	movs	r3, #1
 801639c:	3201      	adds	r2, #1
 801639e:	461d      	mov	r5, r3
 80163a0:	e759      	b.n	8016256 <__kernel_rem_pio2+0x1a6>
 80163a2:	a80e      	add	r0, sp, #56	; 0x38
 80163a4:	1acb      	subs	r3, r1, r3
 80163a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80163aa:	462b      	mov	r3, r5
 80163ac:	e7f6      	b.n	801639c <__kernel_rem_pio2+0x2ec>
 80163ae:	1e62      	subs	r2, r4, #1
 80163b0:	ab0e      	add	r3, sp, #56	; 0x38
 80163b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80163ba:	a90e      	add	r1, sp, #56	; 0x38
 80163bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80163c0:	e757      	b.n	8016272 <__kernel_rem_pio2+0x1c2>
 80163c2:	bf00      	nop
 80163c4:	f3af 8000 	nop.w
	...
 80163d4:	3ff00000 	.word	0x3ff00000
 80163d8:	08017b00 	.word	0x08017b00
 80163dc:	40200000 	.word	0x40200000
 80163e0:	3ff00000 	.word	0x3ff00000
 80163e4:	3e700000 	.word	0x3e700000
 80163e8:	41700000 	.word	0x41700000
 80163ec:	3fe00000 	.word	0x3fe00000
 80163f0:	08017ac0 	.word	0x08017ac0
 80163f4:	1e62      	subs	r2, r4, #1
 80163f6:	ab0e      	add	r3, sp, #56	; 0x38
 80163f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80163fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8016400:	e7db      	b.n	80163ba <__kernel_rem_pio2+0x30a>
 8016402:	a90e      	add	r1, sp, #56	; 0x38
 8016404:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8016408:	3b01      	subs	r3, #1
 801640a:	430a      	orrs	r2, r1
 801640c:	e78b      	b.n	8016326 <__kernel_rem_pio2+0x276>
 801640e:	3301      	adds	r3, #1
 8016410:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8016414:	2900      	cmp	r1, #0
 8016416:	d0fa      	beq.n	801640e <__kernel_rem_pio2+0x35e>
 8016418:	9a08      	ldr	r2, [sp, #32]
 801641a:	4422      	add	r2, r4
 801641c:	00d2      	lsls	r2, r2, #3
 801641e:	a922      	add	r1, sp, #136	; 0x88
 8016420:	18e3      	adds	r3, r4, r3
 8016422:	9206      	str	r2, [sp, #24]
 8016424:	440a      	add	r2, r1
 8016426:	9302      	str	r3, [sp, #8]
 8016428:	f10b 0108 	add.w	r1, fp, #8
 801642c:	f102 0308 	add.w	r3, r2, #8
 8016430:	1c66      	adds	r6, r4, #1
 8016432:	910a      	str	r1, [sp, #40]	; 0x28
 8016434:	2500      	movs	r5, #0
 8016436:	930d      	str	r3, [sp, #52]	; 0x34
 8016438:	9b02      	ldr	r3, [sp, #8]
 801643a:	42b3      	cmp	r3, r6
 801643c:	da04      	bge.n	8016448 <__kernel_rem_pio2+0x398>
 801643e:	461c      	mov	r4, r3
 8016440:	e6a6      	b.n	8016190 <__kernel_rem_pio2+0xe0>
 8016442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016444:	2301      	movs	r3, #1
 8016446:	e7e3      	b.n	8016410 <__kernel_rem_pio2+0x360>
 8016448:	9b06      	ldr	r3, [sp, #24]
 801644a:	18ef      	adds	r7, r5, r3
 801644c:	ab22      	add	r3, sp, #136	; 0x88
 801644e:	441f      	add	r7, r3
 8016450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016452:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016456:	f7ea f885 	bl	8000564 <__aeabi_i2d>
 801645a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801645c:	461c      	mov	r4, r3
 801645e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016460:	e9c7 0100 	strd	r0, r1, [r7]
 8016464:	eb03 0b05 	add.w	fp, r3, r5
 8016468:	2700      	movs	r7, #0
 801646a:	f04f 0800 	mov.w	r8, #0
 801646e:	f04f 0900 	mov.w	r9, #0
 8016472:	9b07      	ldr	r3, [sp, #28]
 8016474:	429f      	cmp	r7, r3
 8016476:	dd08      	ble.n	801648a <__kernel_rem_pio2+0x3da>
 8016478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801647a:	aa72      	add	r2, sp, #456	; 0x1c8
 801647c:	18eb      	adds	r3, r5, r3
 801647e:	4413      	add	r3, r2
 8016480:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8016484:	3601      	adds	r6, #1
 8016486:	3508      	adds	r5, #8
 8016488:	e7d6      	b.n	8016438 <__kernel_rem_pio2+0x388>
 801648a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801648e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8016492:	f7ea f8d1 	bl	8000638 <__aeabi_dmul>
 8016496:	4602      	mov	r2, r0
 8016498:	460b      	mov	r3, r1
 801649a:	4640      	mov	r0, r8
 801649c:	4649      	mov	r1, r9
 801649e:	f7e9 ff15 	bl	80002cc <__adddf3>
 80164a2:	3701      	adds	r7, #1
 80164a4:	4680      	mov	r8, r0
 80164a6:	4689      	mov	r9, r1
 80164a8:	e7e3      	b.n	8016472 <__kernel_rem_pio2+0x3c2>
 80164aa:	3d01      	subs	r5, #1
 80164ac:	e741      	b.n	8016332 <__kernel_rem_pio2+0x282>
 80164ae:	f1ca 0000 	rsb	r0, sl, #0
 80164b2:	ec47 6b10 	vmov	d0, r6, r7
 80164b6:	f000 fcbf 	bl	8016e38 <scalbn>
 80164ba:	ec57 6b10 	vmov	r6, r7, d0
 80164be:	2200      	movs	r2, #0
 80164c0:	4b99      	ldr	r3, [pc, #612]	; (8016728 <__kernel_rem_pio2+0x678>)
 80164c2:	ee10 0a10 	vmov	r0, s0
 80164c6:	4639      	mov	r1, r7
 80164c8:	f7ea fb3c 	bl	8000b44 <__aeabi_dcmpge>
 80164cc:	b1f8      	cbz	r0, 801650e <__kernel_rem_pio2+0x45e>
 80164ce:	2200      	movs	r2, #0
 80164d0:	4b96      	ldr	r3, [pc, #600]	; (801672c <__kernel_rem_pio2+0x67c>)
 80164d2:	4630      	mov	r0, r6
 80164d4:	4639      	mov	r1, r7
 80164d6:	f7ea f8af 	bl	8000638 <__aeabi_dmul>
 80164da:	f7ea fb5d 	bl	8000b98 <__aeabi_d2iz>
 80164de:	4680      	mov	r8, r0
 80164e0:	f7ea f840 	bl	8000564 <__aeabi_i2d>
 80164e4:	2200      	movs	r2, #0
 80164e6:	4b90      	ldr	r3, [pc, #576]	; (8016728 <__kernel_rem_pio2+0x678>)
 80164e8:	f7ea f8a6 	bl	8000638 <__aeabi_dmul>
 80164ec:	460b      	mov	r3, r1
 80164ee:	4602      	mov	r2, r0
 80164f0:	4639      	mov	r1, r7
 80164f2:	4630      	mov	r0, r6
 80164f4:	f7e9 fee8 	bl	80002c8 <__aeabi_dsub>
 80164f8:	f7ea fb4e 	bl	8000b98 <__aeabi_d2iz>
 80164fc:	1c65      	adds	r5, r4, #1
 80164fe:	ab0e      	add	r3, sp, #56	; 0x38
 8016500:	f10a 0a18 	add.w	sl, sl, #24
 8016504:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8016508:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801650c:	e719      	b.n	8016342 <__kernel_rem_pio2+0x292>
 801650e:	4630      	mov	r0, r6
 8016510:	4639      	mov	r1, r7
 8016512:	f7ea fb41 	bl	8000b98 <__aeabi_d2iz>
 8016516:	ab0e      	add	r3, sp, #56	; 0x38
 8016518:	4625      	mov	r5, r4
 801651a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801651e:	e710      	b.n	8016342 <__kernel_rem_pio2+0x292>
 8016520:	ab0e      	add	r3, sp, #56	; 0x38
 8016522:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8016526:	f7ea f81d 	bl	8000564 <__aeabi_i2d>
 801652a:	4642      	mov	r2, r8
 801652c:	464b      	mov	r3, r9
 801652e:	f7ea f883 	bl	8000638 <__aeabi_dmul>
 8016532:	2200      	movs	r2, #0
 8016534:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8016538:	4b7c      	ldr	r3, [pc, #496]	; (801672c <__kernel_rem_pio2+0x67c>)
 801653a:	4640      	mov	r0, r8
 801653c:	4649      	mov	r1, r9
 801653e:	f7ea f87b 	bl	8000638 <__aeabi_dmul>
 8016542:	3f01      	subs	r7, #1
 8016544:	4680      	mov	r8, r0
 8016546:	4689      	mov	r9, r1
 8016548:	e708      	b.n	801635c <__kernel_rem_pio2+0x2ac>
 801654a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 801654e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016552:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8016556:	f7ea f86f 	bl	8000638 <__aeabi_dmul>
 801655a:	4602      	mov	r2, r0
 801655c:	460b      	mov	r3, r1
 801655e:	4640      	mov	r0, r8
 8016560:	4649      	mov	r1, r9
 8016562:	f7e9 feb3 	bl	80002cc <__adddf3>
 8016566:	3701      	adds	r7, #1
 8016568:	4680      	mov	r8, r0
 801656a:	4689      	mov	r9, r1
 801656c:	9b04      	ldr	r3, [sp, #16]
 801656e:	429f      	cmp	r7, r3
 8016570:	dc01      	bgt.n	8016576 <__kernel_rem_pio2+0x4c6>
 8016572:	45ba      	cmp	sl, r7
 8016574:	dae9      	bge.n	801654a <__kernel_rem_pio2+0x49a>
 8016576:	ab4a      	add	r3, sp, #296	; 0x128
 8016578:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801657c:	e9c3 8900 	strd	r8, r9, [r3]
 8016580:	f10a 0a01 	add.w	sl, sl, #1
 8016584:	3e08      	subs	r6, #8
 8016586:	e6f0      	b.n	801636a <__kernel_rem_pio2+0x2ba>
 8016588:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801658a:	2b03      	cmp	r3, #3
 801658c:	d85b      	bhi.n	8016646 <__kernel_rem_pio2+0x596>
 801658e:	e8df f003 	tbb	[pc, r3]
 8016592:	264a      	.short	0x264a
 8016594:	0226      	.short	0x0226
 8016596:	ab9a      	add	r3, sp, #616	; 0x268
 8016598:	441c      	add	r4, r3
 801659a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801659e:	46a2      	mov	sl, r4
 80165a0:	46ab      	mov	fp, r5
 80165a2:	f1bb 0f00 	cmp.w	fp, #0
 80165a6:	dc6c      	bgt.n	8016682 <__kernel_rem_pio2+0x5d2>
 80165a8:	46a2      	mov	sl, r4
 80165aa:	46ab      	mov	fp, r5
 80165ac:	f1bb 0f01 	cmp.w	fp, #1
 80165b0:	f300 8086 	bgt.w	80166c0 <__kernel_rem_pio2+0x610>
 80165b4:	2000      	movs	r0, #0
 80165b6:	2100      	movs	r1, #0
 80165b8:	2d01      	cmp	r5, #1
 80165ba:	f300 80a0 	bgt.w	80166fe <__kernel_rem_pio2+0x64e>
 80165be:	9b02      	ldr	r3, [sp, #8]
 80165c0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 80165c4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	f040 809e 	bne.w	801670a <__kernel_rem_pio2+0x65a>
 80165ce:	9b01      	ldr	r3, [sp, #4]
 80165d0:	e9c3 7800 	strd	r7, r8, [r3]
 80165d4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80165d8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80165dc:	e033      	b.n	8016646 <__kernel_rem_pio2+0x596>
 80165de:	3408      	adds	r4, #8
 80165e0:	ab4a      	add	r3, sp, #296	; 0x128
 80165e2:	441c      	add	r4, r3
 80165e4:	462e      	mov	r6, r5
 80165e6:	2000      	movs	r0, #0
 80165e8:	2100      	movs	r1, #0
 80165ea:	2e00      	cmp	r6, #0
 80165ec:	da3a      	bge.n	8016664 <__kernel_rem_pio2+0x5b4>
 80165ee:	9b02      	ldr	r3, [sp, #8]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d03d      	beq.n	8016670 <__kernel_rem_pio2+0x5c0>
 80165f4:	4602      	mov	r2, r0
 80165f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80165fa:	9c01      	ldr	r4, [sp, #4]
 80165fc:	e9c4 2300 	strd	r2, r3, [r4]
 8016600:	4602      	mov	r2, r0
 8016602:	460b      	mov	r3, r1
 8016604:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8016608:	f7e9 fe5e 	bl	80002c8 <__aeabi_dsub>
 801660c:	ae4c      	add	r6, sp, #304	; 0x130
 801660e:	2401      	movs	r4, #1
 8016610:	42a5      	cmp	r5, r4
 8016612:	da30      	bge.n	8016676 <__kernel_rem_pio2+0x5c6>
 8016614:	9b02      	ldr	r3, [sp, #8]
 8016616:	b113      	cbz	r3, 801661e <__kernel_rem_pio2+0x56e>
 8016618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801661c:	4619      	mov	r1, r3
 801661e:	9b01      	ldr	r3, [sp, #4]
 8016620:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8016624:	e00f      	b.n	8016646 <__kernel_rem_pio2+0x596>
 8016626:	ab9a      	add	r3, sp, #616	; 0x268
 8016628:	441c      	add	r4, r3
 801662a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801662e:	2000      	movs	r0, #0
 8016630:	2100      	movs	r1, #0
 8016632:	2d00      	cmp	r5, #0
 8016634:	da10      	bge.n	8016658 <__kernel_rem_pio2+0x5a8>
 8016636:	9b02      	ldr	r3, [sp, #8]
 8016638:	b113      	cbz	r3, 8016640 <__kernel_rem_pio2+0x590>
 801663a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801663e:	4619      	mov	r1, r3
 8016640:	9b01      	ldr	r3, [sp, #4]
 8016642:	e9c3 0100 	strd	r0, r1, [r3]
 8016646:	9b06      	ldr	r3, [sp, #24]
 8016648:	f003 0007 	and.w	r0, r3, #7
 801664c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8016650:	ecbd 8b02 	vpop	{d8}
 8016654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016658:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801665c:	f7e9 fe36 	bl	80002cc <__adddf3>
 8016660:	3d01      	subs	r5, #1
 8016662:	e7e6      	b.n	8016632 <__kernel_rem_pio2+0x582>
 8016664:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016668:	f7e9 fe30 	bl	80002cc <__adddf3>
 801666c:	3e01      	subs	r6, #1
 801666e:	e7bc      	b.n	80165ea <__kernel_rem_pio2+0x53a>
 8016670:	4602      	mov	r2, r0
 8016672:	460b      	mov	r3, r1
 8016674:	e7c1      	b.n	80165fa <__kernel_rem_pio2+0x54a>
 8016676:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801667a:	f7e9 fe27 	bl	80002cc <__adddf3>
 801667e:	3401      	adds	r4, #1
 8016680:	e7c6      	b.n	8016610 <__kernel_rem_pio2+0x560>
 8016682:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8016686:	ed3a 7b02 	vldmdb	sl!, {d7}
 801668a:	4640      	mov	r0, r8
 801668c:	ec53 2b17 	vmov	r2, r3, d7
 8016690:	4649      	mov	r1, r9
 8016692:	ed8d 7b04 	vstr	d7, [sp, #16]
 8016696:	f7e9 fe19 	bl	80002cc <__adddf3>
 801669a:	4602      	mov	r2, r0
 801669c:	460b      	mov	r3, r1
 801669e:	4606      	mov	r6, r0
 80166a0:	460f      	mov	r7, r1
 80166a2:	4640      	mov	r0, r8
 80166a4:	4649      	mov	r1, r9
 80166a6:	f7e9 fe0f 	bl	80002c8 <__aeabi_dsub>
 80166aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166ae:	f7e9 fe0d 	bl	80002cc <__adddf3>
 80166b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80166b6:	e9ca 0100 	strd	r0, r1, [sl]
 80166ba:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80166be:	e770      	b.n	80165a2 <__kernel_rem_pio2+0x4f2>
 80166c0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80166c4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80166c8:	4630      	mov	r0, r6
 80166ca:	ec53 2b17 	vmov	r2, r3, d7
 80166ce:	4639      	mov	r1, r7
 80166d0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80166d4:	f7e9 fdfa 	bl	80002cc <__adddf3>
 80166d8:	4602      	mov	r2, r0
 80166da:	460b      	mov	r3, r1
 80166dc:	4680      	mov	r8, r0
 80166de:	4689      	mov	r9, r1
 80166e0:	4630      	mov	r0, r6
 80166e2:	4639      	mov	r1, r7
 80166e4:	f7e9 fdf0 	bl	80002c8 <__aeabi_dsub>
 80166e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80166ec:	f7e9 fdee 	bl	80002cc <__adddf3>
 80166f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80166f4:	e9ca 0100 	strd	r0, r1, [sl]
 80166f8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80166fc:	e756      	b.n	80165ac <__kernel_rem_pio2+0x4fc>
 80166fe:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8016702:	f7e9 fde3 	bl	80002cc <__adddf3>
 8016706:	3d01      	subs	r5, #1
 8016708:	e756      	b.n	80165b8 <__kernel_rem_pio2+0x508>
 801670a:	9b01      	ldr	r3, [sp, #4]
 801670c:	9a01      	ldr	r2, [sp, #4]
 801670e:	601f      	str	r7, [r3, #0]
 8016710:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8016714:	605c      	str	r4, [r3, #4]
 8016716:	609d      	str	r5, [r3, #8]
 8016718:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801671c:	60d3      	str	r3, [r2, #12]
 801671e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016722:	6110      	str	r0, [r2, #16]
 8016724:	6153      	str	r3, [r2, #20]
 8016726:	e78e      	b.n	8016646 <__kernel_rem_pio2+0x596>
 8016728:	41700000 	.word	0x41700000
 801672c:	3e700000 	.word	0x3e700000

08016730 <__kernel_sin>:
 8016730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016734:	ec55 4b10 	vmov	r4, r5, d0
 8016738:	b085      	sub	sp, #20
 801673a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801673e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8016742:	ed8d 1b00 	vstr	d1, [sp]
 8016746:	9002      	str	r0, [sp, #8]
 8016748:	da06      	bge.n	8016758 <__kernel_sin+0x28>
 801674a:	ee10 0a10 	vmov	r0, s0
 801674e:	4629      	mov	r1, r5
 8016750:	f7ea fa22 	bl	8000b98 <__aeabi_d2iz>
 8016754:	2800      	cmp	r0, #0
 8016756:	d051      	beq.n	80167fc <__kernel_sin+0xcc>
 8016758:	4622      	mov	r2, r4
 801675a:	462b      	mov	r3, r5
 801675c:	4620      	mov	r0, r4
 801675e:	4629      	mov	r1, r5
 8016760:	f7e9 ff6a 	bl	8000638 <__aeabi_dmul>
 8016764:	4682      	mov	sl, r0
 8016766:	468b      	mov	fp, r1
 8016768:	4602      	mov	r2, r0
 801676a:	460b      	mov	r3, r1
 801676c:	4620      	mov	r0, r4
 801676e:	4629      	mov	r1, r5
 8016770:	f7e9 ff62 	bl	8000638 <__aeabi_dmul>
 8016774:	a341      	add	r3, pc, #260	; (adr r3, 801687c <__kernel_sin+0x14c>)
 8016776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801677a:	4680      	mov	r8, r0
 801677c:	4689      	mov	r9, r1
 801677e:	4650      	mov	r0, sl
 8016780:	4659      	mov	r1, fp
 8016782:	f7e9 ff59 	bl	8000638 <__aeabi_dmul>
 8016786:	a33f      	add	r3, pc, #252	; (adr r3, 8016884 <__kernel_sin+0x154>)
 8016788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801678c:	f7e9 fd9c 	bl	80002c8 <__aeabi_dsub>
 8016790:	4652      	mov	r2, sl
 8016792:	465b      	mov	r3, fp
 8016794:	f7e9 ff50 	bl	8000638 <__aeabi_dmul>
 8016798:	a33c      	add	r3, pc, #240	; (adr r3, 801688c <__kernel_sin+0x15c>)
 801679a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801679e:	f7e9 fd95 	bl	80002cc <__adddf3>
 80167a2:	4652      	mov	r2, sl
 80167a4:	465b      	mov	r3, fp
 80167a6:	f7e9 ff47 	bl	8000638 <__aeabi_dmul>
 80167aa:	a33a      	add	r3, pc, #232	; (adr r3, 8016894 <__kernel_sin+0x164>)
 80167ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b0:	f7e9 fd8a 	bl	80002c8 <__aeabi_dsub>
 80167b4:	4652      	mov	r2, sl
 80167b6:	465b      	mov	r3, fp
 80167b8:	f7e9 ff3e 	bl	8000638 <__aeabi_dmul>
 80167bc:	a337      	add	r3, pc, #220	; (adr r3, 801689c <__kernel_sin+0x16c>)
 80167be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167c2:	f7e9 fd83 	bl	80002cc <__adddf3>
 80167c6:	9b02      	ldr	r3, [sp, #8]
 80167c8:	4606      	mov	r6, r0
 80167ca:	460f      	mov	r7, r1
 80167cc:	b9db      	cbnz	r3, 8016806 <__kernel_sin+0xd6>
 80167ce:	4602      	mov	r2, r0
 80167d0:	460b      	mov	r3, r1
 80167d2:	4650      	mov	r0, sl
 80167d4:	4659      	mov	r1, fp
 80167d6:	f7e9 ff2f 	bl	8000638 <__aeabi_dmul>
 80167da:	a325      	add	r3, pc, #148	; (adr r3, 8016870 <__kernel_sin+0x140>)
 80167dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167e0:	f7e9 fd72 	bl	80002c8 <__aeabi_dsub>
 80167e4:	4642      	mov	r2, r8
 80167e6:	464b      	mov	r3, r9
 80167e8:	f7e9 ff26 	bl	8000638 <__aeabi_dmul>
 80167ec:	4602      	mov	r2, r0
 80167ee:	460b      	mov	r3, r1
 80167f0:	4620      	mov	r0, r4
 80167f2:	4629      	mov	r1, r5
 80167f4:	f7e9 fd6a 	bl	80002cc <__adddf3>
 80167f8:	4604      	mov	r4, r0
 80167fa:	460d      	mov	r5, r1
 80167fc:	ec45 4b10 	vmov	d0, r4, r5
 8016800:	b005      	add	sp, #20
 8016802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016806:	2200      	movs	r2, #0
 8016808:	4b1b      	ldr	r3, [pc, #108]	; (8016878 <__kernel_sin+0x148>)
 801680a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801680e:	f7e9 ff13 	bl	8000638 <__aeabi_dmul>
 8016812:	4632      	mov	r2, r6
 8016814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016818:	463b      	mov	r3, r7
 801681a:	4640      	mov	r0, r8
 801681c:	4649      	mov	r1, r9
 801681e:	f7e9 ff0b 	bl	8000638 <__aeabi_dmul>
 8016822:	4602      	mov	r2, r0
 8016824:	460b      	mov	r3, r1
 8016826:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801682a:	f7e9 fd4d 	bl	80002c8 <__aeabi_dsub>
 801682e:	4652      	mov	r2, sl
 8016830:	465b      	mov	r3, fp
 8016832:	f7e9 ff01 	bl	8000638 <__aeabi_dmul>
 8016836:	e9dd 2300 	ldrd	r2, r3, [sp]
 801683a:	f7e9 fd45 	bl	80002c8 <__aeabi_dsub>
 801683e:	a30c      	add	r3, pc, #48	; (adr r3, 8016870 <__kernel_sin+0x140>)
 8016840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016844:	4606      	mov	r6, r0
 8016846:	460f      	mov	r7, r1
 8016848:	4640      	mov	r0, r8
 801684a:	4649      	mov	r1, r9
 801684c:	f7e9 fef4 	bl	8000638 <__aeabi_dmul>
 8016850:	4602      	mov	r2, r0
 8016852:	460b      	mov	r3, r1
 8016854:	4630      	mov	r0, r6
 8016856:	4639      	mov	r1, r7
 8016858:	f7e9 fd38 	bl	80002cc <__adddf3>
 801685c:	4602      	mov	r2, r0
 801685e:	460b      	mov	r3, r1
 8016860:	4620      	mov	r0, r4
 8016862:	4629      	mov	r1, r5
 8016864:	f7e9 fd30 	bl	80002c8 <__aeabi_dsub>
 8016868:	e7c6      	b.n	80167f8 <__kernel_sin+0xc8>
 801686a:	bf00      	nop
 801686c:	f3af 8000 	nop.w
 8016870:	55555549 	.word	0x55555549
 8016874:	3fc55555 	.word	0x3fc55555
 8016878:	3fe00000 	.word	0x3fe00000
 801687c:	5acfd57c 	.word	0x5acfd57c
 8016880:	3de5d93a 	.word	0x3de5d93a
 8016884:	8a2b9ceb 	.word	0x8a2b9ceb
 8016888:	3e5ae5e6 	.word	0x3e5ae5e6
 801688c:	57b1fe7d 	.word	0x57b1fe7d
 8016890:	3ec71de3 	.word	0x3ec71de3
 8016894:	19c161d5 	.word	0x19c161d5
 8016898:	3f2a01a0 	.word	0x3f2a01a0
 801689c:	1110f8a6 	.word	0x1110f8a6
 80168a0:	3f811111 	.word	0x3f811111
 80168a4:	00000000 	.word	0x00000000

080168a8 <atan>:
 80168a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168ac:	ec55 4b10 	vmov	r4, r5, d0
 80168b0:	4bc3      	ldr	r3, [pc, #780]	; (8016bc0 <atan+0x318>)
 80168b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80168b6:	429e      	cmp	r6, r3
 80168b8:	46ab      	mov	fp, r5
 80168ba:	dd18      	ble.n	80168ee <atan+0x46>
 80168bc:	4bc1      	ldr	r3, [pc, #772]	; (8016bc4 <atan+0x31c>)
 80168be:	429e      	cmp	r6, r3
 80168c0:	dc01      	bgt.n	80168c6 <atan+0x1e>
 80168c2:	d109      	bne.n	80168d8 <atan+0x30>
 80168c4:	b144      	cbz	r4, 80168d8 <atan+0x30>
 80168c6:	4622      	mov	r2, r4
 80168c8:	462b      	mov	r3, r5
 80168ca:	4620      	mov	r0, r4
 80168cc:	4629      	mov	r1, r5
 80168ce:	f7e9 fcfd 	bl	80002cc <__adddf3>
 80168d2:	4604      	mov	r4, r0
 80168d4:	460d      	mov	r5, r1
 80168d6:	e006      	b.n	80168e6 <atan+0x3e>
 80168d8:	f1bb 0f00 	cmp.w	fp, #0
 80168dc:	f340 8131 	ble.w	8016b42 <atan+0x29a>
 80168e0:	a59b      	add	r5, pc, #620	; (adr r5, 8016b50 <atan+0x2a8>)
 80168e2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80168e6:	ec45 4b10 	vmov	d0, r4, r5
 80168ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168ee:	4bb6      	ldr	r3, [pc, #728]	; (8016bc8 <atan+0x320>)
 80168f0:	429e      	cmp	r6, r3
 80168f2:	dc14      	bgt.n	801691e <atan+0x76>
 80168f4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80168f8:	429e      	cmp	r6, r3
 80168fa:	dc0d      	bgt.n	8016918 <atan+0x70>
 80168fc:	a396      	add	r3, pc, #600	; (adr r3, 8016b58 <atan+0x2b0>)
 80168fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016902:	ee10 0a10 	vmov	r0, s0
 8016906:	4629      	mov	r1, r5
 8016908:	f7e9 fce0 	bl	80002cc <__adddf3>
 801690c:	2200      	movs	r2, #0
 801690e:	4baf      	ldr	r3, [pc, #700]	; (8016bcc <atan+0x324>)
 8016910:	f7ea f922 	bl	8000b58 <__aeabi_dcmpgt>
 8016914:	2800      	cmp	r0, #0
 8016916:	d1e6      	bne.n	80168e6 <atan+0x3e>
 8016918:	f04f 3aff 	mov.w	sl, #4294967295
 801691c:	e02b      	b.n	8016976 <atan+0xce>
 801691e:	f000 f963 	bl	8016be8 <fabs>
 8016922:	4bab      	ldr	r3, [pc, #684]	; (8016bd0 <atan+0x328>)
 8016924:	429e      	cmp	r6, r3
 8016926:	ec55 4b10 	vmov	r4, r5, d0
 801692a:	f300 80bf 	bgt.w	8016aac <atan+0x204>
 801692e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016932:	429e      	cmp	r6, r3
 8016934:	f300 80a0 	bgt.w	8016a78 <atan+0x1d0>
 8016938:	ee10 2a10 	vmov	r2, s0
 801693c:	ee10 0a10 	vmov	r0, s0
 8016940:	462b      	mov	r3, r5
 8016942:	4629      	mov	r1, r5
 8016944:	f7e9 fcc2 	bl	80002cc <__adddf3>
 8016948:	2200      	movs	r2, #0
 801694a:	4ba0      	ldr	r3, [pc, #640]	; (8016bcc <atan+0x324>)
 801694c:	f7e9 fcbc 	bl	80002c8 <__aeabi_dsub>
 8016950:	2200      	movs	r2, #0
 8016952:	4606      	mov	r6, r0
 8016954:	460f      	mov	r7, r1
 8016956:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801695a:	4620      	mov	r0, r4
 801695c:	4629      	mov	r1, r5
 801695e:	f7e9 fcb5 	bl	80002cc <__adddf3>
 8016962:	4602      	mov	r2, r0
 8016964:	460b      	mov	r3, r1
 8016966:	4630      	mov	r0, r6
 8016968:	4639      	mov	r1, r7
 801696a:	f7e9 ff8f 	bl	800088c <__aeabi_ddiv>
 801696e:	f04f 0a00 	mov.w	sl, #0
 8016972:	4604      	mov	r4, r0
 8016974:	460d      	mov	r5, r1
 8016976:	4622      	mov	r2, r4
 8016978:	462b      	mov	r3, r5
 801697a:	4620      	mov	r0, r4
 801697c:	4629      	mov	r1, r5
 801697e:	f7e9 fe5b 	bl	8000638 <__aeabi_dmul>
 8016982:	4602      	mov	r2, r0
 8016984:	460b      	mov	r3, r1
 8016986:	4680      	mov	r8, r0
 8016988:	4689      	mov	r9, r1
 801698a:	f7e9 fe55 	bl	8000638 <__aeabi_dmul>
 801698e:	a374      	add	r3, pc, #464	; (adr r3, 8016b60 <atan+0x2b8>)
 8016990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016994:	4606      	mov	r6, r0
 8016996:	460f      	mov	r7, r1
 8016998:	f7e9 fe4e 	bl	8000638 <__aeabi_dmul>
 801699c:	a372      	add	r3, pc, #456	; (adr r3, 8016b68 <atan+0x2c0>)
 801699e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169a2:	f7e9 fc93 	bl	80002cc <__adddf3>
 80169a6:	4632      	mov	r2, r6
 80169a8:	463b      	mov	r3, r7
 80169aa:	f7e9 fe45 	bl	8000638 <__aeabi_dmul>
 80169ae:	a370      	add	r3, pc, #448	; (adr r3, 8016b70 <atan+0x2c8>)
 80169b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169b4:	f7e9 fc8a 	bl	80002cc <__adddf3>
 80169b8:	4632      	mov	r2, r6
 80169ba:	463b      	mov	r3, r7
 80169bc:	f7e9 fe3c 	bl	8000638 <__aeabi_dmul>
 80169c0:	a36d      	add	r3, pc, #436	; (adr r3, 8016b78 <atan+0x2d0>)
 80169c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169c6:	f7e9 fc81 	bl	80002cc <__adddf3>
 80169ca:	4632      	mov	r2, r6
 80169cc:	463b      	mov	r3, r7
 80169ce:	f7e9 fe33 	bl	8000638 <__aeabi_dmul>
 80169d2:	a36b      	add	r3, pc, #428	; (adr r3, 8016b80 <atan+0x2d8>)
 80169d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169d8:	f7e9 fc78 	bl	80002cc <__adddf3>
 80169dc:	4632      	mov	r2, r6
 80169de:	463b      	mov	r3, r7
 80169e0:	f7e9 fe2a 	bl	8000638 <__aeabi_dmul>
 80169e4:	a368      	add	r3, pc, #416	; (adr r3, 8016b88 <atan+0x2e0>)
 80169e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169ea:	f7e9 fc6f 	bl	80002cc <__adddf3>
 80169ee:	4642      	mov	r2, r8
 80169f0:	464b      	mov	r3, r9
 80169f2:	f7e9 fe21 	bl	8000638 <__aeabi_dmul>
 80169f6:	a366      	add	r3, pc, #408	; (adr r3, 8016b90 <atan+0x2e8>)
 80169f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169fc:	4680      	mov	r8, r0
 80169fe:	4689      	mov	r9, r1
 8016a00:	4630      	mov	r0, r6
 8016a02:	4639      	mov	r1, r7
 8016a04:	f7e9 fe18 	bl	8000638 <__aeabi_dmul>
 8016a08:	a363      	add	r3, pc, #396	; (adr r3, 8016b98 <atan+0x2f0>)
 8016a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a0e:	f7e9 fc5b 	bl	80002c8 <__aeabi_dsub>
 8016a12:	4632      	mov	r2, r6
 8016a14:	463b      	mov	r3, r7
 8016a16:	f7e9 fe0f 	bl	8000638 <__aeabi_dmul>
 8016a1a:	a361      	add	r3, pc, #388	; (adr r3, 8016ba0 <atan+0x2f8>)
 8016a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a20:	f7e9 fc52 	bl	80002c8 <__aeabi_dsub>
 8016a24:	4632      	mov	r2, r6
 8016a26:	463b      	mov	r3, r7
 8016a28:	f7e9 fe06 	bl	8000638 <__aeabi_dmul>
 8016a2c:	a35e      	add	r3, pc, #376	; (adr r3, 8016ba8 <atan+0x300>)
 8016a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a32:	f7e9 fc49 	bl	80002c8 <__aeabi_dsub>
 8016a36:	4632      	mov	r2, r6
 8016a38:	463b      	mov	r3, r7
 8016a3a:	f7e9 fdfd 	bl	8000638 <__aeabi_dmul>
 8016a3e:	a35c      	add	r3, pc, #368	; (adr r3, 8016bb0 <atan+0x308>)
 8016a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016a44:	f7e9 fc40 	bl	80002c8 <__aeabi_dsub>
 8016a48:	4632      	mov	r2, r6
 8016a4a:	463b      	mov	r3, r7
 8016a4c:	f7e9 fdf4 	bl	8000638 <__aeabi_dmul>
 8016a50:	4602      	mov	r2, r0
 8016a52:	460b      	mov	r3, r1
 8016a54:	4640      	mov	r0, r8
 8016a56:	4649      	mov	r1, r9
 8016a58:	f7e9 fc38 	bl	80002cc <__adddf3>
 8016a5c:	4622      	mov	r2, r4
 8016a5e:	462b      	mov	r3, r5
 8016a60:	f7e9 fdea 	bl	8000638 <__aeabi_dmul>
 8016a64:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016a68:	4602      	mov	r2, r0
 8016a6a:	460b      	mov	r3, r1
 8016a6c:	d14b      	bne.n	8016b06 <atan+0x25e>
 8016a6e:	4620      	mov	r0, r4
 8016a70:	4629      	mov	r1, r5
 8016a72:	f7e9 fc29 	bl	80002c8 <__aeabi_dsub>
 8016a76:	e72c      	b.n	80168d2 <atan+0x2a>
 8016a78:	ee10 0a10 	vmov	r0, s0
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	4b53      	ldr	r3, [pc, #332]	; (8016bcc <atan+0x324>)
 8016a80:	4629      	mov	r1, r5
 8016a82:	f7e9 fc21 	bl	80002c8 <__aeabi_dsub>
 8016a86:	2200      	movs	r2, #0
 8016a88:	4606      	mov	r6, r0
 8016a8a:	460f      	mov	r7, r1
 8016a8c:	4b4f      	ldr	r3, [pc, #316]	; (8016bcc <atan+0x324>)
 8016a8e:	4620      	mov	r0, r4
 8016a90:	4629      	mov	r1, r5
 8016a92:	f7e9 fc1b 	bl	80002cc <__adddf3>
 8016a96:	4602      	mov	r2, r0
 8016a98:	460b      	mov	r3, r1
 8016a9a:	4630      	mov	r0, r6
 8016a9c:	4639      	mov	r1, r7
 8016a9e:	f7e9 fef5 	bl	800088c <__aeabi_ddiv>
 8016aa2:	f04f 0a01 	mov.w	sl, #1
 8016aa6:	4604      	mov	r4, r0
 8016aa8:	460d      	mov	r5, r1
 8016aaa:	e764      	b.n	8016976 <atan+0xce>
 8016aac:	4b49      	ldr	r3, [pc, #292]	; (8016bd4 <atan+0x32c>)
 8016aae:	429e      	cmp	r6, r3
 8016ab0:	dc1d      	bgt.n	8016aee <atan+0x246>
 8016ab2:	ee10 0a10 	vmov	r0, s0
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	4b47      	ldr	r3, [pc, #284]	; (8016bd8 <atan+0x330>)
 8016aba:	4629      	mov	r1, r5
 8016abc:	f7e9 fc04 	bl	80002c8 <__aeabi_dsub>
 8016ac0:	2200      	movs	r2, #0
 8016ac2:	4606      	mov	r6, r0
 8016ac4:	460f      	mov	r7, r1
 8016ac6:	4b44      	ldr	r3, [pc, #272]	; (8016bd8 <atan+0x330>)
 8016ac8:	4620      	mov	r0, r4
 8016aca:	4629      	mov	r1, r5
 8016acc:	f7e9 fdb4 	bl	8000638 <__aeabi_dmul>
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	4b3e      	ldr	r3, [pc, #248]	; (8016bcc <atan+0x324>)
 8016ad4:	f7e9 fbfa 	bl	80002cc <__adddf3>
 8016ad8:	4602      	mov	r2, r0
 8016ada:	460b      	mov	r3, r1
 8016adc:	4630      	mov	r0, r6
 8016ade:	4639      	mov	r1, r7
 8016ae0:	f7e9 fed4 	bl	800088c <__aeabi_ddiv>
 8016ae4:	f04f 0a02 	mov.w	sl, #2
 8016ae8:	4604      	mov	r4, r0
 8016aea:	460d      	mov	r5, r1
 8016aec:	e743      	b.n	8016976 <atan+0xce>
 8016aee:	462b      	mov	r3, r5
 8016af0:	ee10 2a10 	vmov	r2, s0
 8016af4:	2000      	movs	r0, #0
 8016af6:	4939      	ldr	r1, [pc, #228]	; (8016bdc <atan+0x334>)
 8016af8:	f7e9 fec8 	bl	800088c <__aeabi_ddiv>
 8016afc:	f04f 0a03 	mov.w	sl, #3
 8016b00:	4604      	mov	r4, r0
 8016b02:	460d      	mov	r5, r1
 8016b04:	e737      	b.n	8016976 <atan+0xce>
 8016b06:	4b36      	ldr	r3, [pc, #216]	; (8016be0 <atan+0x338>)
 8016b08:	4e36      	ldr	r6, [pc, #216]	; (8016be4 <atan+0x33c>)
 8016b0a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8016b0e:	4456      	add	r6, sl
 8016b10:	449a      	add	sl, r3
 8016b12:	e9da 2300 	ldrd	r2, r3, [sl]
 8016b16:	f7e9 fbd7 	bl	80002c8 <__aeabi_dsub>
 8016b1a:	4622      	mov	r2, r4
 8016b1c:	462b      	mov	r3, r5
 8016b1e:	f7e9 fbd3 	bl	80002c8 <__aeabi_dsub>
 8016b22:	4602      	mov	r2, r0
 8016b24:	460b      	mov	r3, r1
 8016b26:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016b2a:	f7e9 fbcd 	bl	80002c8 <__aeabi_dsub>
 8016b2e:	f1bb 0f00 	cmp.w	fp, #0
 8016b32:	4604      	mov	r4, r0
 8016b34:	460d      	mov	r5, r1
 8016b36:	f6bf aed6 	bge.w	80168e6 <atan+0x3e>
 8016b3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016b3e:	461d      	mov	r5, r3
 8016b40:	e6d1      	b.n	80168e6 <atan+0x3e>
 8016b42:	a51d      	add	r5, pc, #116	; (adr r5, 8016bb8 <atan+0x310>)
 8016b44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016b48:	e6cd      	b.n	80168e6 <atan+0x3e>
 8016b4a:	bf00      	nop
 8016b4c:	f3af 8000 	nop.w
 8016b50:	54442d18 	.word	0x54442d18
 8016b54:	3ff921fb 	.word	0x3ff921fb
 8016b58:	8800759c 	.word	0x8800759c
 8016b5c:	7e37e43c 	.word	0x7e37e43c
 8016b60:	e322da11 	.word	0xe322da11
 8016b64:	3f90ad3a 	.word	0x3f90ad3a
 8016b68:	24760deb 	.word	0x24760deb
 8016b6c:	3fa97b4b 	.word	0x3fa97b4b
 8016b70:	a0d03d51 	.word	0xa0d03d51
 8016b74:	3fb10d66 	.word	0x3fb10d66
 8016b78:	c54c206e 	.word	0xc54c206e
 8016b7c:	3fb745cd 	.word	0x3fb745cd
 8016b80:	920083ff 	.word	0x920083ff
 8016b84:	3fc24924 	.word	0x3fc24924
 8016b88:	5555550d 	.word	0x5555550d
 8016b8c:	3fd55555 	.word	0x3fd55555
 8016b90:	2c6a6c2f 	.word	0x2c6a6c2f
 8016b94:	bfa2b444 	.word	0xbfa2b444
 8016b98:	52defd9a 	.word	0x52defd9a
 8016b9c:	3fadde2d 	.word	0x3fadde2d
 8016ba0:	af749a6d 	.word	0xaf749a6d
 8016ba4:	3fb3b0f2 	.word	0x3fb3b0f2
 8016ba8:	fe231671 	.word	0xfe231671
 8016bac:	3fbc71c6 	.word	0x3fbc71c6
 8016bb0:	9998ebc4 	.word	0x9998ebc4
 8016bb4:	3fc99999 	.word	0x3fc99999
 8016bb8:	54442d18 	.word	0x54442d18
 8016bbc:	bff921fb 	.word	0xbff921fb
 8016bc0:	440fffff 	.word	0x440fffff
 8016bc4:	7ff00000 	.word	0x7ff00000
 8016bc8:	3fdbffff 	.word	0x3fdbffff
 8016bcc:	3ff00000 	.word	0x3ff00000
 8016bd0:	3ff2ffff 	.word	0x3ff2ffff
 8016bd4:	40037fff 	.word	0x40037fff
 8016bd8:	3ff80000 	.word	0x3ff80000
 8016bdc:	bff00000 	.word	0xbff00000
 8016be0:	08017b30 	.word	0x08017b30
 8016be4:	08017b10 	.word	0x08017b10

08016be8 <fabs>:
 8016be8:	ec51 0b10 	vmov	r0, r1, d0
 8016bec:	ee10 2a10 	vmov	r2, s0
 8016bf0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016bf4:	ec43 2b10 	vmov	d0, r2, r3
 8016bf8:	4770      	bx	lr

08016bfa <finite>:
 8016bfa:	ee10 3a90 	vmov	r3, s1
 8016bfe:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8016c02:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8016c06:	0fc0      	lsrs	r0, r0, #31
 8016c08:	4770      	bx	lr
 8016c0a:	0000      	movs	r0, r0
 8016c0c:	0000      	movs	r0, r0
	...

08016c10 <floor>:
 8016c10:	ec51 0b10 	vmov	r0, r1, d0
 8016c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8016c1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8016c20:	2e13      	cmp	r6, #19
 8016c22:	460c      	mov	r4, r1
 8016c24:	ee10 5a10 	vmov	r5, s0
 8016c28:	4680      	mov	r8, r0
 8016c2a:	dc34      	bgt.n	8016c96 <floor+0x86>
 8016c2c:	2e00      	cmp	r6, #0
 8016c2e:	da16      	bge.n	8016c5e <floor+0x4e>
 8016c30:	a335      	add	r3, pc, #212	; (adr r3, 8016d08 <floor+0xf8>)
 8016c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c36:	f7e9 fb49 	bl	80002cc <__adddf3>
 8016c3a:	2200      	movs	r2, #0
 8016c3c:	2300      	movs	r3, #0
 8016c3e:	f7e9 ff8b 	bl	8000b58 <__aeabi_dcmpgt>
 8016c42:	b148      	cbz	r0, 8016c58 <floor+0x48>
 8016c44:	2c00      	cmp	r4, #0
 8016c46:	da59      	bge.n	8016cfc <floor+0xec>
 8016c48:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8016c4c:	4a30      	ldr	r2, [pc, #192]	; (8016d10 <floor+0x100>)
 8016c4e:	432b      	orrs	r3, r5
 8016c50:	2500      	movs	r5, #0
 8016c52:	42ab      	cmp	r3, r5
 8016c54:	bf18      	it	ne
 8016c56:	4614      	movne	r4, r2
 8016c58:	4621      	mov	r1, r4
 8016c5a:	4628      	mov	r0, r5
 8016c5c:	e025      	b.n	8016caa <floor+0x9a>
 8016c5e:	4f2d      	ldr	r7, [pc, #180]	; (8016d14 <floor+0x104>)
 8016c60:	4137      	asrs	r7, r6
 8016c62:	ea01 0307 	and.w	r3, r1, r7
 8016c66:	4303      	orrs	r3, r0
 8016c68:	d01f      	beq.n	8016caa <floor+0x9a>
 8016c6a:	a327      	add	r3, pc, #156	; (adr r3, 8016d08 <floor+0xf8>)
 8016c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c70:	f7e9 fb2c 	bl	80002cc <__adddf3>
 8016c74:	2200      	movs	r2, #0
 8016c76:	2300      	movs	r3, #0
 8016c78:	f7e9 ff6e 	bl	8000b58 <__aeabi_dcmpgt>
 8016c7c:	2800      	cmp	r0, #0
 8016c7e:	d0eb      	beq.n	8016c58 <floor+0x48>
 8016c80:	2c00      	cmp	r4, #0
 8016c82:	bfbe      	ittt	lt
 8016c84:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8016c88:	fa43 f606 	asrlt.w	r6, r3, r6
 8016c8c:	19a4      	addlt	r4, r4, r6
 8016c8e:	ea24 0407 	bic.w	r4, r4, r7
 8016c92:	2500      	movs	r5, #0
 8016c94:	e7e0      	b.n	8016c58 <floor+0x48>
 8016c96:	2e33      	cmp	r6, #51	; 0x33
 8016c98:	dd0b      	ble.n	8016cb2 <floor+0xa2>
 8016c9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016c9e:	d104      	bne.n	8016caa <floor+0x9a>
 8016ca0:	ee10 2a10 	vmov	r2, s0
 8016ca4:	460b      	mov	r3, r1
 8016ca6:	f7e9 fb11 	bl	80002cc <__adddf3>
 8016caa:	ec41 0b10 	vmov	d0, r0, r1
 8016cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016cb2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8016cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8016cba:	fa23 f707 	lsr.w	r7, r3, r7
 8016cbe:	4207      	tst	r7, r0
 8016cc0:	d0f3      	beq.n	8016caa <floor+0x9a>
 8016cc2:	a311      	add	r3, pc, #68	; (adr r3, 8016d08 <floor+0xf8>)
 8016cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cc8:	f7e9 fb00 	bl	80002cc <__adddf3>
 8016ccc:	2200      	movs	r2, #0
 8016cce:	2300      	movs	r3, #0
 8016cd0:	f7e9 ff42 	bl	8000b58 <__aeabi_dcmpgt>
 8016cd4:	2800      	cmp	r0, #0
 8016cd6:	d0bf      	beq.n	8016c58 <floor+0x48>
 8016cd8:	2c00      	cmp	r4, #0
 8016cda:	da02      	bge.n	8016ce2 <floor+0xd2>
 8016cdc:	2e14      	cmp	r6, #20
 8016cde:	d103      	bne.n	8016ce8 <floor+0xd8>
 8016ce0:	3401      	adds	r4, #1
 8016ce2:	ea25 0507 	bic.w	r5, r5, r7
 8016ce6:	e7b7      	b.n	8016c58 <floor+0x48>
 8016ce8:	2301      	movs	r3, #1
 8016cea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8016cee:	fa03 f606 	lsl.w	r6, r3, r6
 8016cf2:	4435      	add	r5, r6
 8016cf4:	4545      	cmp	r5, r8
 8016cf6:	bf38      	it	cc
 8016cf8:	18e4      	addcc	r4, r4, r3
 8016cfa:	e7f2      	b.n	8016ce2 <floor+0xd2>
 8016cfc:	2500      	movs	r5, #0
 8016cfe:	462c      	mov	r4, r5
 8016d00:	e7aa      	b.n	8016c58 <floor+0x48>
 8016d02:	bf00      	nop
 8016d04:	f3af 8000 	nop.w
 8016d08:	8800759c 	.word	0x8800759c
 8016d0c:	7e37e43c 	.word	0x7e37e43c
 8016d10:	bff00000 	.word	0xbff00000
 8016d14:	000fffff 	.word	0x000fffff

08016d18 <matherr>:
 8016d18:	2000      	movs	r0, #0
 8016d1a:	4770      	bx	lr
 8016d1c:	0000      	movs	r0, r0
	...

08016d20 <nan>:
 8016d20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016d28 <nan+0x8>
 8016d24:	4770      	bx	lr
 8016d26:	bf00      	nop
 8016d28:	00000000 	.word	0x00000000
 8016d2c:	7ff80000 	.word	0x7ff80000

08016d30 <rint>:
 8016d30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016d32:	ec51 0b10 	vmov	r0, r1, d0
 8016d36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016d3a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8016d3e:	2e13      	cmp	r6, #19
 8016d40:	460b      	mov	r3, r1
 8016d42:	ee10 4a10 	vmov	r4, s0
 8016d46:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8016d4a:	dc56      	bgt.n	8016dfa <rint+0xca>
 8016d4c:	2e00      	cmp	r6, #0
 8016d4e:	da2b      	bge.n	8016da8 <rint+0x78>
 8016d50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8016d54:	4302      	orrs	r2, r0
 8016d56:	d023      	beq.n	8016da0 <rint+0x70>
 8016d58:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8016d5c:	4302      	orrs	r2, r0
 8016d5e:	4254      	negs	r4, r2
 8016d60:	4314      	orrs	r4, r2
 8016d62:	0c4b      	lsrs	r3, r1, #17
 8016d64:	0b24      	lsrs	r4, r4, #12
 8016d66:	045b      	lsls	r3, r3, #17
 8016d68:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8016d6c:	ea44 0103 	orr.w	r1, r4, r3
 8016d70:	460b      	mov	r3, r1
 8016d72:	492f      	ldr	r1, [pc, #188]	; (8016e30 <rint+0x100>)
 8016d74:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8016d78:	e9d1 6700 	ldrd	r6, r7, [r1]
 8016d7c:	4602      	mov	r2, r0
 8016d7e:	4639      	mov	r1, r7
 8016d80:	4630      	mov	r0, r6
 8016d82:	f7e9 faa3 	bl	80002cc <__adddf3>
 8016d86:	e9cd 0100 	strd	r0, r1, [sp]
 8016d8a:	463b      	mov	r3, r7
 8016d8c:	4632      	mov	r2, r6
 8016d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016d92:	f7e9 fa99 	bl	80002c8 <__aeabi_dsub>
 8016d96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016d9a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8016d9e:	4639      	mov	r1, r7
 8016da0:	ec41 0b10 	vmov	d0, r0, r1
 8016da4:	b003      	add	sp, #12
 8016da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016da8:	4a22      	ldr	r2, [pc, #136]	; (8016e34 <rint+0x104>)
 8016daa:	4132      	asrs	r2, r6
 8016dac:	ea01 0702 	and.w	r7, r1, r2
 8016db0:	4307      	orrs	r7, r0
 8016db2:	d0f5      	beq.n	8016da0 <rint+0x70>
 8016db4:	0852      	lsrs	r2, r2, #1
 8016db6:	4011      	ands	r1, r2
 8016db8:	430c      	orrs	r4, r1
 8016dba:	d00b      	beq.n	8016dd4 <rint+0xa4>
 8016dbc:	ea23 0202 	bic.w	r2, r3, r2
 8016dc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8016dc4:	2e13      	cmp	r6, #19
 8016dc6:	fa43 f306 	asr.w	r3, r3, r6
 8016dca:	bf0c      	ite	eq
 8016dcc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8016dd0:	2400      	movne	r4, #0
 8016dd2:	4313      	orrs	r3, r2
 8016dd4:	4916      	ldr	r1, [pc, #88]	; (8016e30 <rint+0x100>)
 8016dd6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8016dda:	4622      	mov	r2, r4
 8016ddc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016de0:	4620      	mov	r0, r4
 8016de2:	4629      	mov	r1, r5
 8016de4:	f7e9 fa72 	bl	80002cc <__adddf3>
 8016de8:	e9cd 0100 	strd	r0, r1, [sp]
 8016dec:	4622      	mov	r2, r4
 8016dee:	462b      	mov	r3, r5
 8016df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016df4:	f7e9 fa68 	bl	80002c8 <__aeabi_dsub>
 8016df8:	e7d2      	b.n	8016da0 <rint+0x70>
 8016dfa:	2e33      	cmp	r6, #51	; 0x33
 8016dfc:	dd07      	ble.n	8016e0e <rint+0xde>
 8016dfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8016e02:	d1cd      	bne.n	8016da0 <rint+0x70>
 8016e04:	ee10 2a10 	vmov	r2, s0
 8016e08:	f7e9 fa60 	bl	80002cc <__adddf3>
 8016e0c:	e7c8      	b.n	8016da0 <rint+0x70>
 8016e0e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8016e12:	f04f 32ff 	mov.w	r2, #4294967295
 8016e16:	40f2      	lsrs	r2, r6
 8016e18:	4210      	tst	r0, r2
 8016e1a:	d0c1      	beq.n	8016da0 <rint+0x70>
 8016e1c:	0852      	lsrs	r2, r2, #1
 8016e1e:	4210      	tst	r0, r2
 8016e20:	bf1f      	itttt	ne
 8016e22:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8016e26:	ea20 0202 	bicne.w	r2, r0, r2
 8016e2a:	4134      	asrne	r4, r6
 8016e2c:	4314      	orrne	r4, r2
 8016e2e:	e7d1      	b.n	8016dd4 <rint+0xa4>
 8016e30:	08017b50 	.word	0x08017b50
 8016e34:	000fffff 	.word	0x000fffff

08016e38 <scalbn>:
 8016e38:	b570      	push	{r4, r5, r6, lr}
 8016e3a:	ec55 4b10 	vmov	r4, r5, d0
 8016e3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8016e42:	4606      	mov	r6, r0
 8016e44:	462b      	mov	r3, r5
 8016e46:	b9aa      	cbnz	r2, 8016e74 <scalbn+0x3c>
 8016e48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8016e4c:	4323      	orrs	r3, r4
 8016e4e:	d03b      	beq.n	8016ec8 <scalbn+0x90>
 8016e50:	4b31      	ldr	r3, [pc, #196]	; (8016f18 <scalbn+0xe0>)
 8016e52:	4629      	mov	r1, r5
 8016e54:	2200      	movs	r2, #0
 8016e56:	ee10 0a10 	vmov	r0, s0
 8016e5a:	f7e9 fbed 	bl	8000638 <__aeabi_dmul>
 8016e5e:	4b2f      	ldr	r3, [pc, #188]	; (8016f1c <scalbn+0xe4>)
 8016e60:	429e      	cmp	r6, r3
 8016e62:	4604      	mov	r4, r0
 8016e64:	460d      	mov	r5, r1
 8016e66:	da12      	bge.n	8016e8e <scalbn+0x56>
 8016e68:	a327      	add	r3, pc, #156	; (adr r3, 8016f08 <scalbn+0xd0>)
 8016e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6e:	f7e9 fbe3 	bl	8000638 <__aeabi_dmul>
 8016e72:	e009      	b.n	8016e88 <scalbn+0x50>
 8016e74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8016e78:	428a      	cmp	r2, r1
 8016e7a:	d10c      	bne.n	8016e96 <scalbn+0x5e>
 8016e7c:	ee10 2a10 	vmov	r2, s0
 8016e80:	4620      	mov	r0, r4
 8016e82:	4629      	mov	r1, r5
 8016e84:	f7e9 fa22 	bl	80002cc <__adddf3>
 8016e88:	4604      	mov	r4, r0
 8016e8a:	460d      	mov	r5, r1
 8016e8c:	e01c      	b.n	8016ec8 <scalbn+0x90>
 8016e8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8016e92:	460b      	mov	r3, r1
 8016e94:	3a36      	subs	r2, #54	; 0x36
 8016e96:	4432      	add	r2, r6
 8016e98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8016e9c:	428a      	cmp	r2, r1
 8016e9e:	dd0b      	ble.n	8016eb8 <scalbn+0x80>
 8016ea0:	ec45 4b11 	vmov	d1, r4, r5
 8016ea4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8016f10 <scalbn+0xd8>
 8016ea8:	f7fb fb96 	bl	80125d8 <copysign>
 8016eac:	a318      	add	r3, pc, #96	; (adr r3, 8016f10 <scalbn+0xd8>)
 8016eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb2:	ec51 0b10 	vmov	r0, r1, d0
 8016eb6:	e7da      	b.n	8016e6e <scalbn+0x36>
 8016eb8:	2a00      	cmp	r2, #0
 8016eba:	dd08      	ble.n	8016ece <scalbn+0x96>
 8016ebc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016ec0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016ec4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016ec8:	ec45 4b10 	vmov	d0, r4, r5
 8016ecc:	bd70      	pop	{r4, r5, r6, pc}
 8016ece:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8016ed2:	da0d      	bge.n	8016ef0 <scalbn+0xb8>
 8016ed4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8016ed8:	429e      	cmp	r6, r3
 8016eda:	ec45 4b11 	vmov	d1, r4, r5
 8016ede:	dce1      	bgt.n	8016ea4 <scalbn+0x6c>
 8016ee0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8016f08 <scalbn+0xd0>
 8016ee4:	f7fb fb78 	bl	80125d8 <copysign>
 8016ee8:	a307      	add	r3, pc, #28	; (adr r3, 8016f08 <scalbn+0xd0>)
 8016eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eee:	e7e0      	b.n	8016eb2 <scalbn+0x7a>
 8016ef0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8016ef4:	3236      	adds	r2, #54	; 0x36
 8016ef6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8016efa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8016efe:	4620      	mov	r0, r4
 8016f00:	4629      	mov	r1, r5
 8016f02:	2200      	movs	r2, #0
 8016f04:	4b06      	ldr	r3, [pc, #24]	; (8016f20 <scalbn+0xe8>)
 8016f06:	e7b2      	b.n	8016e6e <scalbn+0x36>
 8016f08:	c2f8f359 	.word	0xc2f8f359
 8016f0c:	01a56e1f 	.word	0x01a56e1f
 8016f10:	8800759c 	.word	0x8800759c
 8016f14:	7e37e43c 	.word	0x7e37e43c
 8016f18:	43500000 	.word	0x43500000
 8016f1c:	ffff3cb0 	.word	0xffff3cb0
 8016f20:	3c900000 	.word	0x3c900000

08016f24 <_init>:
 8016f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f26:	bf00      	nop
 8016f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f2a:	bc08      	pop	{r3}
 8016f2c:	469e      	mov	lr, r3
 8016f2e:	4770      	bx	lr

08016f30 <_fini>:
 8016f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f32:	bf00      	nop
 8016f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016f36:	bc08      	pop	{r3}
 8016f38:	469e      	mov	lr, r3
 8016f3a:	4770      	bx	lr
