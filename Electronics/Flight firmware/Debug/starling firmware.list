
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012ef4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b78  080130c8  080130c8  000230c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c40  08013c40  00030388  2**0
                  CONTENTS
  4 .ARM          00000008  08013c40  08013c40  00023c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c48  08013c48  00030388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c48  08013c48  00023c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c4c  08013c4c  00023c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000388  20000000  08013c50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005f9c  20000388  08013fd8  00030388  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006324  08013fd8  00036324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c389  00000000  00000000  000303b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005d3b  00000000  00000000  0005c741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002028  00000000  00000000  00062480  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d98  00000000  00000000  000644a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a2cd  00000000  00000000  00066240  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e2b1  00000000  00000000  0009050d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5cd1  00000000  00000000  000ae7be  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0019448f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a10  00000000  00000000  0019450c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000388 	.word	0x20000388
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080130ac 	.word	0x080130ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000038c 	.word	0x2000038c
 800020c:	080130ac 	.word	0x080130ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f003 fa9e 	bl	8004530 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f006 fe86 	bl	8007d18 <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f007 f81b 	bl	800805c <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f003 fa7a 	bl	8004530 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f003 fa5b 	bl	8004530 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f006 fd12 	bl	8007ab0 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f006 ffdb 	bl	800805c <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f003 fa3a 	bl	8004530 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f002 fd08 	bl	8003b20 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f002 fd00 	bl	8003b20 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f002 fcf8 	bl	8003b20 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	665a      	str	r2, [r3, #100]	; 0x64

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	669a      	str	r2, [r3, #104]	; 0x68



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f002 fcea 	bl	8003b20 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f002 fce2 	bl	8003b20 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f002 fcda 	bl	8003b20 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f002 fcd2 	bl	8003b20 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f002 fcca 	bl	8003b20 <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f002 fcc7 	bl	8003b20 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	641a      	str	r2, [r3, #64]	; 0x40

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40

080011bc <LSM_pollsensors>:

uint8_t LSM_pollsensors(lsm6dso *imu) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80011c4:	f107 0318 	add.w	r3, r7, #24
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	731a      	strb	r2, [r3, #12]
 80011d2:	23a2      	movs	r3, #162	; 0xa2
 80011d4:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6858      	ldr	r0, [r3, #4]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	891b      	ldrh	r3, [r3, #8]
 80011de:	2200      	movs	r2, #0
 80011e0:	4619      	mov	r1, r3
 80011e2:	f003 f9a5 	bl	8004530 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0208 	add.w	r2, r7, #8
 80011ee:	f107 0118 	add.w	r1, r7, #24
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	9300      	str	r3, [sp, #0]
 80011f8:	230d      	movs	r3, #13
 80011fa:	f006 fd8d 	bl	8007d18 <HAL_SPI_TransmitReceive>
 80011fe:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 8001200:	2b00      	cmp	r3, #0
 8001202:	bf0c      	ite	eq
 8001204:	2301      	moveq	r3, #1
 8001206:	2300      	movne	r3, #0
 8001208:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 13,
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800120e:	bf00      	nop
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f006 ff21 	bl	800805c <HAL_SPI_GetState>
 800121a:	4603      	mov	r3, r0
 800121c:	2b01      	cmp	r3, #1
 800121e:	d1f7      	bne.n	8001210 <LSM_pollsensors+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6858      	ldr	r0, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	891b      	ldrh	r3, [r3, #8]
 8001228:	2201      	movs	r2, #1
 800122a:	4619      	mov	r1, r3
 800122c:	f003 f980 	bl	8004530 <HAL_GPIO_WritePin>

    if (status == 1) {
 8001230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001234:	2b01      	cmp	r3, #1
 8001236:	d13b      	bne.n	80012b0 <LSM_pollsensors+0xf4>
        // 0, gxl, gxh, gyl, gyh etc.
        imu->rawGyro[0] = rxBuf[2] << 8 | rxBuf[1];
 8001238:	7abb      	ldrb	r3, [r7, #10]
 800123a:	021b      	lsls	r3, r3, #8
 800123c:	b21a      	sxth	r2, r3
 800123e:	7a7b      	ldrb	r3, [r7, #9]
 8001240:	b21b      	sxth	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b21a      	sxth	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	835a      	strh	r2, [r3, #26]
        imu->rawGyro[1] = rxBuf[4] << 8 | rxBuf[3];
 800124a:	7b3b      	ldrb	r3, [r7, #12]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7afb      	ldrb	r3, [r7, #11]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21a      	sxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	839a      	strh	r2, [r3, #28]
        imu->rawGyro[2] = rxBuf[6] << 8 | rxBuf[5];
 800125c:	7bbb      	ldrb	r3, [r7, #14]
 800125e:	021b      	lsls	r3, r3, #8
 8001260:	b21a      	sxth	r2, r3
 8001262:	7b7b      	ldrb	r3, [r7, #13]
 8001264:	b21b      	sxth	r3, r3
 8001266:	4313      	orrs	r3, r2
 8001268:	b21a      	sxth	r2, r3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	83da      	strh	r2, [r3, #30]

        imu->rawAcc[0] = rxBuf[8] << 8 | rxBuf[7];
 800126e:	7c3b      	ldrb	r3, [r7, #16]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	b21a      	sxth	r2, r3
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	b21b      	sxth	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b21a      	sxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        imu->rawAcc[1] = rxBuf[10] << 8 | rxBuf[9];
 8001282:	7cbb      	ldrb	r3, [r7, #18]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	b21a      	sxth	r2, r3
 8001288:	7c7b      	ldrb	r3, [r7, #17]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        imu->rawAcc[2] = rxBuf[12] << 8 | rxBuf[11];
 8001296:	7d3b      	ldrb	r3, [r7, #20]
 8001298:	021b      	lsls	r3, r3, #8
 800129a:	b21a      	sxth	r2, r3
 800129c:	7cfb      	ldrb	r3, [r7, #19]
 800129e:	b21b      	sxth	r3, r3
 80012a0:	4313      	orrs	r3, r2
 80012a2:	b21a      	sxth	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

        // convert units
        LSM_Convert(imu);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f000 f808 	bl	80012c0 <LSM_Convert>

    }

    return status;
 80012b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0000      	movs	r0, r0
	...

080012c0 <LSM_Convert>:

uint8_t LSM_Convert(lsm6dso *imu) {
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80012ec:	ee07 3a90 	vmov	s15, r3
 80012f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80012fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800130a:	ee07 3a90 	vmov	s15, r3
 800130e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff f92e 	bl	8000588 <__aeabi_f2d>
 800132c:	a367      	add	r3, pc, #412	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f981 	bl	8000638 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	f7ff fc73 	bl	8000c28 <__aeabi_d2f>
 8001342:	4602      	mov	r2, r0
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	659a      	str	r2, [r3, #88]	; 0x58
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a35e      	add	r3, pc, #376	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff f96e 	bl	8000638 <__aeabi_dmul>
 800135c:	4603      	mov	r3, r0
 800135e:	460c      	mov	r4, r1
 8001360:	4618      	mov	r0, r3
 8001362:	4621      	mov	r1, r4
 8001364:	f7ff fc60 	bl	8000c28 <__aeabi_d2f>
 8001368:	4602      	mov	r2, r0
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	65da      	str	r2, [r3, #92]	; 0x5c
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	a354      	add	r3, pc, #336	; (adr r3, 80014cc <LSM_Convert+0x20c>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f95b 	bl	8000638 <__aeabi_dmul>
 8001382:	4603      	mov	r3, r0
 8001384:	460c      	mov	r4, r1
 8001386:	4618      	mov	r0, r3
 8001388:	4621      	mov	r1, r4
 800138a:	f7ff fc4d 	bl	8000c28 <__aeabi_d2f>
 800138e:	4602      	mov	r2, r0
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	661a      	str	r2, [r3, #96]	; 0x60

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 800139a:	ee07 3a90 	vmov	s15, r3
 800139e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	edc3 7a08 	vstr	s15, [r3, #32]
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80013c2:	ee07 3a90 	vmov	s15, r3
 80013c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80013da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 80013f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001402:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8b9 	bl	8000588 <__aeabi_f2d>
 8001416:	a32a      	add	r3, pc, #168	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f90c 	bl	8000638 <__aeabi_dmul>
 8001420:	4603      	mov	r3, r0
 8001422:	460c      	mov	r4, r1
 8001424:	4618      	mov	r0, r3
 8001426:	4621      	mov	r1, r4
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <LSM_Convert+0x208>)
 800142e:	f7ff fa2d 	bl	800088c <__aeabi_ddiv>
 8001432:	4603      	mov	r3, r0
 8001434:	460c      	mov	r4, r1
 8001436:	4618      	mov	r0, r3
 8001438:	4621      	mov	r1, r4
 800143a:	f7ff fbf5 	bl	8000c28 <__aeabi_d2f>
 800143e:	4602      	mov	r2, r0
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff f89d 	bl	8000588 <__aeabi_f2d>
 800144e:	a31c      	add	r3, pc, #112	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7ff f8f0 	bl	8000638 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	4618      	mov	r0, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f04f 0200 	mov.w	r2, #0
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <LSM_Convert+0x208>)
 8001466:	f7ff fa11 	bl	800088c <__aeabi_ddiv>
 800146a:	4603      	mov	r3, r0
 800146c:	460c      	mov	r4, r1
 800146e:	4618      	mov	r0, r3
 8001470:	4621      	mov	r1, r4
 8001472:	f7ff fbd9 	bl	8000c28 <__aeabi_d2f>
 8001476:	4602      	mov	r2, r0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	631a      	str	r2, [r3, #48]	; 0x30
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f881 	bl	8000588 <__aeabi_f2d>
 8001486:	a30e      	add	r3, pc, #56	; (adr r3, 80014c0 <LSM_Convert+0x200>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f8d4 	bl	8000638 <__aeabi_dmul>
 8001490:	4603      	mov	r3, r0
 8001492:	460c      	mov	r4, r1
 8001494:	4618      	mov	r0, r3
 8001496:	4621      	mov	r1, r4
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <LSM_Convert+0x208>)
 800149e:	f7ff f9f5 	bl	800088c <__aeabi_ddiv>
 80014a2:	4603      	mov	r3, r0
 80014a4:	460c      	mov	r4, r1
 80014a6:	4618      	mov	r0, r3
 80014a8:	4621      	mov	r1, r4
 80014aa:	f7ff fbbd 	bl	8000c28 <__aeabi_d2f>
 80014ae:	4602      	mov	r2, r0
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80014b4:	bf00      	nop
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd90      	pop	{r4, r7, pc}
 80014be:	bf00      	nop
 80014c0:	54442eea 	.word	0x54442eea
 80014c4:	400921fb 	.word	0x400921fb
 80014c8:	40668000 	.word	0x40668000
 80014cc:	3a92a305 	.word	0x3a92a305
 80014d0:	40239d01 	.word	0x40239d01

080014d4 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af04      	add	r7, sp, #16
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	4613      	mov	r3, r2
 80014e0:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	68ba      	ldr	r2, [r7, #8]
 80014ec:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c

    uint8_t txBuf[2] = {0x00, 0x00};
 8001508:	2300      	movs	r3, #0
 800150a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800150e:	2300      	movs	r3, #0
 8001510:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	791b      	ldrb	r3, [r3, #4]
 800151c:	b299      	uxth	r1, r3
 800151e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001522:	9302      	str	r3, [sp, #8]
 8001524:	2301      	movs	r3, #1
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800152c:	9300      	str	r3, [sp, #0]
 800152e:	2301      	movs	r3, #1
 8001530:	220d      	movs	r2, #13
 8001532:	f003 fa49 	bl	80049c8 <HAL_I2C_Mem_Read>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	bf0c      	ite	eq
 800153c:	2301      	moveq	r3, #1
 800153e:	2300      	movne	r3, #0
 8001540:	b2db      	uxtb	r3, r3
 8001542:	b2da      	uxtb	r2, r3
 8001544:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001548:	4413      	add	r3, r2
 800154a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 800154e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001552:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001556:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800155a:	2b10      	cmp	r3, #16
 800155c:	d001      	beq.n	8001562 <SPL06_Init+0x8e>

        return 0;
 800155e:	2300      	movs	r3, #0
 8001560:	e139      	b.n	80017d6 <SPL06_Init+0x302>

    }
    HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f002 fadc 	bl	8003b20 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 8001568:	2390      	movs	r3, #144	; 0x90
 800156a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	b299      	uxth	r1, r3
 8001578:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	2313      	movs	r3, #19
 8001580:	9301      	str	r3, [sp, #4]
 8001582:	f107 0310 	add.w	r3, r7, #16
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2301      	movs	r3, #1
 800158a:	2210      	movs	r2, #16
 800158c:	f003 fa1c 	bl	80049c8 <HAL_I2C_Mem_Read>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	bf0c      	ite	eq
 8001596:	2301      	moveq	r3, #1
 8001598:	2300      	movne	r3, #0
 800159a:	b2db      	uxtb	r3, r3
 800159c:	b2da      	uxtb	r2, r3
 800159e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015a2:	4413      	add	r3, r2
 80015a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80015a8:	7c3b      	ldrb	r3, [r7, #16]
 80015aa:	011b      	lsls	r3, r3, #4
 80015ac:	b21a      	sxth	r2, r3
 80015ae:	7c7b      	ldrb	r3, [r7, #17]
 80015b0:	091b      	lsrs	r3, r3, #4
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d008      	beq.n	80015e0 <SPL06_Init+0x10c>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015d4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80015d8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80015dc:	b21b      	sxth	r3, r3
 80015de:	e002      	b.n	80015e6 <SPL06_Init+0x112>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 80015ea:	7c7b      	ldrb	r3, [r7, #17]
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80015f4:	b21a      	sxth	r2, r3
 80015f6:	7cbb      	ldrb	r3, [r7, #18]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21a      	sxth	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001608:	b29b      	uxth	r3, r3
 800160a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <SPL06_Init+0x150>
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001618:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800161c:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001620:	b21b      	sxth	r3, r3
 8001622:	e002      	b.n	800162a <SPL06_Init+0x156>
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 800162e:	7cfb      	ldrb	r3, [r7, #19]
 8001630:	031a      	lsls	r2, r3, #12
 8001632:	7d3b      	ldrb	r3, [r7, #20]
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4313      	orrs	r3, r2
 8001638:	7d7a      	ldrb	r2, [r7, #21]
 800163a:	0912      	lsrs	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	4313      	orrs	r3, r2
 8001640:	461a      	mov	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d006      	beq.n	8001660 <SPL06_Init+0x18c>
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800165a:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 800165e:	e001      	b.n	8001664 <SPL06_Init+0x190>
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 8001668:	7d7b      	ldrb	r3, [r7, #21]
 800166a:	041b      	lsls	r3, r3, #16
 800166c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001670:	7dbb      	ldrb	r3, [r7, #22]
 8001672:	021b      	lsls	r3, r3, #8
 8001674:	4313      	orrs	r3, r2
 8001676:	7dfa      	ldrb	r2, [r7, #23]
 8001678:	4313      	orrs	r3, r2
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d006      	beq.n	800169a <SPL06_Init+0x1c6>
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 8001694:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001698:	e001      	b.n	800169e <SPL06_Init+0x1ca>
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	699b      	ldr	r3, [r3, #24]
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80016a2:	7e3b      	ldrb	r3, [r7, #24]
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	b21a      	sxth	r2, r3
 80016a8:	7e7b      	ldrb	r3, [r7, #25]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21a      	sxth	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80016b4:	7ebb      	ldrb	r3, [r7, #26]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	b21a      	sxth	r2, r3
 80016ba:	7efb      	ldrb	r3, [r7, #27]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	4313      	orrs	r3, r2
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80016c6:	7f3b      	ldrb	r3, [r7, #28]
 80016c8:	021b      	lsls	r3, r3, #8
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	7f7b      	ldrb	r3, [r7, #29]
 80016ce:	b21b      	sxth	r3, r3
 80016d0:	4313      	orrs	r3, r2
 80016d2:	b21a      	sxth	r2, r3
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80016d8:	7fbb      	ldrb	r3, [r7, #30]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b21a      	sxth	r2, r3
 80016de:	7ffb      	ldrb	r3, [r7, #31]
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21a      	sxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 80016ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	4313      	orrs	r3, r2
 80016fa:	b21a      	sxth	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001700:	2019      	movs	r0, #25
 8001702:	f002 fa0d 	bl	8003b20 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0x33;
 8001706:	2333      	movs	r3, #51	; 0x33
 8001708:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	791b      	ldrb	r3, [r3, #4]
 8001714:	b299      	uxth	r1, r3
 8001716:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800171a:	9302      	str	r3, [sp, #8]
 800171c:	2301      	movs	r3, #1
 800171e:	9301      	str	r3, [sp, #4]
 8001720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	2301      	movs	r3, #1
 8001728:	2206      	movs	r2, #6
 800172a:	f003 f853 	bl	80047d4 <HAL_I2C_Mem_Write>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	bf0c      	ite	eq
 8001734:	2301      	moveq	r3, #1
 8001736:	2300      	movne	r3, #0
 8001738:	b2db      	uxtb	r3, r3
 800173a:	b2da      	uxtb	r2, r3
 800173c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001740:	4413      	add	r3, r2
 8001742:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 8001746:	200a      	movs	r0, #10
 8001748:	f002 f9ea 	bl	8003b20 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 800174c:	23b3      	movs	r3, #179	; 0xb3
 800174e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	6818      	ldr	r0, [r3, #0]
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	791b      	ldrb	r3, [r3, #4]
 800175a:	b299      	uxth	r1, r3
 800175c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001760:	9302      	str	r3, [sp, #8]
 8001762:	2301      	movs	r3, #1
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	2207      	movs	r2, #7
 8001770:	f003 f830 	bl	80047d4 <HAL_I2C_Mem_Write>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	bf0c      	ite	eq
 800177a:	2301      	moveq	r3, #1
 800177c:	2300      	movne	r3, #0
 800177e:	b2db      	uxtb	r3, r3
 8001780:	b2da      	uxtb	r2, r3
 8001782:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001786:	4413      	add	r3, r2
 8001788:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 800178c:	200a      	movs	r0, #10
 800178e:	f002 f9c7 	bl	8003b20 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 8001792:	23ff      	movs	r3, #255	; 0xff
 8001794:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	6818      	ldr	r0, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	791b      	ldrb	r3, [r3, #4]
 80017a0:	b299      	uxth	r1, r3
 80017a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017a6:	9302      	str	r3, [sp, #8]
 80017a8:	2301      	movs	r3, #1
 80017aa:	9301      	str	r3, [sp, #4]
 80017ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	2208      	movs	r2, #8
 80017b6:	f003 f80d 	bl	80047d4 <HAL_I2C_Mem_Write>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017cc:	4413      	add	r3, r2
 80017ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80017d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3740      	adds	r7, #64	; 0x40
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
	...

080017e0 <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80017ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80017ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80017f2:	edc7 1a02 	vstr	s3, [r7, #8]
 80017f6:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d105      	bne.n	800180a <Quaternion_set+0x2a>
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <Quaternion_set+0x4c>)
 8001800:	4a0b      	ldr	r2, [pc, #44]	; (8001830 <Quaternion_set+0x50>)
 8001802:	211b      	movs	r1, #27
 8001804:	480b      	ldr	r0, [pc, #44]	; (8001834 <Quaternion_set+0x54>)
 8001806:	f00d f877 	bl	800e8f8 <__assert_func>
    output->w = w;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	60da      	str	r2, [r3, #12]
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	080130c8 	.word	0x080130c8
 8001830:	08013680 	.word	0x08013680
 8001834:	080130d8 	.word	0x080130d8

08001838 <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <Quaternion_setIdentity+0x1a>
 8001846:	4b0a      	ldr	r3, [pc, #40]	; (8001870 <Quaternion_setIdentity+0x38>)
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <Quaternion_setIdentity+0x3c>)
 800184a:	2124      	movs	r1, #36	; 0x24
 800184c:	480a      	ldr	r0, [pc, #40]	; (8001878 <Quaternion_setIdentity+0x40>)
 800184e:	f00d f853 	bl	800e8f8 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	eddf 1a09 	vldr	s3, [pc, #36]	; 800187c <Quaternion_setIdentity+0x44>
 8001858:	ed9f 1a08 	vldr	s2, [pc, #32]	; 800187c <Quaternion_setIdentity+0x44>
 800185c:	eddf 0a07 	vldr	s1, [pc, #28]	; 800187c <Quaternion_setIdentity+0x44>
 8001860:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001864:	f7ff ffbc 	bl	80017e0 <Quaternion_set>
}
 8001868:	bf00      	nop
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	080130f4 	.word	0x080130f4
 8001874:	08013690 	.word	0x08013690
 8001878:	080130d8 	.word	0x080130d8
 800187c:	00000000 	.word	0x00000000

08001880 <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	edd3 7a00 	vldr	s15, [r3]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	ed93 7a01 	vldr	s14, [r3, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edd3 6a02 	vldr	s13, [r3, #8]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	ed93 6a03 	vldr	s12, [r3, #12]
 80018a2:	6838      	ldr	r0, [r7, #0]
 80018a4:	eef0 1a46 	vmov.f32	s3, s12
 80018a8:	eeb0 1a66 	vmov.f32	s2, s13
 80018ac:	eef0 0a47 	vmov.f32	s1, s14
 80018b0:	eeb0 0a67 	vmov.f32	s0, s15
 80018b4:	f7ff ff94 	bl	80017e0 <Quaternion_set>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}

080018c0 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d105      	bne.n	80018dc <Quaternion_toEulerZYX+0x1c>
 80018d0:	4b87      	ldr	r3, [pc, #540]	; (8001af0 <Quaternion_toEulerZYX+0x230>)
 80018d2:	4a88      	ldr	r2, [pc, #544]	; (8001af4 <Quaternion_toEulerZYX+0x234>)
 80018d4:	2185      	movs	r1, #133	; 0x85
 80018d6:	4888      	ldr	r0, [pc, #544]	; (8001af8 <Quaternion_toEulerZYX+0x238>)
 80018d8:	f00d f80e 	bl	800e8f8 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	ed93 7a00 	vldr	s14, [r3]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80018e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 6a02 	vldr	s13, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80018f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001900:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001904:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	ed93 7a01 	vldr	s14, [r3, #4]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	edd3 7a01 	vldr	s15, [r3, #4]
 8001914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	edd3 6a02 	vldr	s13, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	edd3 7a02 	vldr	s15, [r3, #8]
 8001924:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	f7fe fcc8 	bl	80002cc <__adddf3>
 800193c:	4603      	mov	r3, r0
 800193e:	460c      	mov	r4, r1
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	496c      	ldr	r1, [pc, #432]	; (8001afc <Quaternion_toEulerZYX+0x23c>)
 800194a:	f7fe fcbd 	bl	80002c8 <__aeabi_dsub>
 800194e:	4603      	mov	r3, r0
 8001950:	460c      	mov	r4, r1
 8001952:	4618      	mov	r0, r3
 8001954:	4621      	mov	r1, r4
 8001956:	f7ff f967 	bl	8000c28 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 800195e:	69f8      	ldr	r0, [r7, #28]
 8001960:	f7fe fe12 	bl	8000588 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	69b8      	ldr	r0, [r7, #24]
 800196a:	f7fe fe0d 	bl	8000588 <__aeabi_f2d>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	ec43 2b11 	vmov	d1, r2, r3
 8001976:	ec45 4b10 	vmov	d0, r4, r5
 800197a:	f00f fe31 	bl	80115e0 <atan2>
 800197e:	ec54 3b10 	vmov	r3, r4, d0
 8001982:	4618      	mov	r0, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f7ff f94f 	bl	8000c28 <__aeabi_d2f>
 800198a:	4602      	mov	r2, r0
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	ed93 7a00 	vldr	s14, [r3]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	edd3 7a02 	vldr	s15, [r3, #8]
 800199c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edd3 6a03 	vldr	s13, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019b4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019b8:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 80019bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80019c0:	eef0 7ae7 	vabs.f32	s15, s15
 80019c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	db15      	blt.n	80019fe <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7fe fdd8 	bl	8000588 <__aeabi_f2d>
 80019d8:	4603      	mov	r3, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	ec44 3b11 	vmov	d1, r3, r4
 80019e0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 8001ae8 <Quaternion_toEulerZYX+0x228>
 80019e4:	f00d fe4a 	bl	800f67c <copysign>
 80019e8:	ec52 1b10 	vmov	r1, r2, d0
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	1d1c      	adds	r4, r3, #4
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	f7ff f918 	bl	8000c28 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	6023      	str	r3, [r4, #0]
 80019fc:	e012      	b.n	8001a24 <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 80019fe:	6978      	ldr	r0, [r7, #20]
 8001a00:	f7fe fdc2 	bl	8000588 <__aeabi_f2d>
 8001a04:	4603      	mov	r3, r0
 8001a06:	460c      	mov	r4, r1
 8001a08:	ec44 3b10 	vmov	d0, r3, r4
 8001a0c:	f00f fd90 	bl	8011530 <asin>
 8001a10:	ec52 1b10 	vmov	r1, r2, d0
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	1d1c      	adds	r4, r3, #4
 8001a18:	4608      	mov	r0, r1
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	f7ff f904 	bl	8000c28 <__aeabi_d2f>
 8001a20:	4603      	mov	r3, r0
 8001a22:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	ed93 7a00 	vldr	s14, [r3]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a4c:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	ed93 7a02 	vldr	s14, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a74:	ee17 0a90 	vmov	r0, s15
 8001a78:	f7fe fd86 	bl	8000588 <__aeabi_f2d>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	f7fe fc24 	bl	80002cc <__adddf3>
 8001a84:	4603      	mov	r3, r0
 8001a86:	460c      	mov	r4, r1
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4623      	mov	r3, r4
 8001a8c:	f04f 0000 	mov.w	r0, #0
 8001a90:	491a      	ldr	r1, [pc, #104]	; (8001afc <Quaternion_toEulerZYX+0x23c>)
 8001a92:	f7fe fc19 	bl	80002c8 <__aeabi_dsub>
 8001a96:	4603      	mov	r3, r0
 8001a98:	460c      	mov	r4, r1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	4621      	mov	r1, r4
 8001a9e:	f7ff f8c3 	bl	8000c28 <__aeabi_d2f>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 8001aa6:	6938      	ldr	r0, [r7, #16]
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7fe fd69 	bl	8000588 <__aeabi_f2d>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	ec43 2b11 	vmov	d1, r2, r3
 8001abe:	ec45 4b10 	vmov	d0, r4, r5
 8001ac2:	f00f fd8d 	bl	80115e0 <atan2>
 8001ac6:	ec52 1b10 	vmov	r1, r2, d0
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	f103 0408 	add.w	r4, r3, #8
 8001ad0:	4608      	mov	r0, r1
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	f7ff f8a8 	bl	8000c28 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	6023      	str	r3, [r4, #0]
}
 8001adc:	bf00      	nop
 8001ade:	3720      	adds	r7, #32
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	54442d18 	.word	0x54442d18
 8001aec:	3ff921fb 	.word	0x3ff921fb
 8001af0:	080130c8 	.word	0x080130c8
 8001af4:	080136a8 	.word	0x080136a8
 8001af8:	080130d8 	.word	0x080130d8
 8001afc:	3ff00000 	.word	0x3ff00000

08001b00 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d105      	bne.n	8001b1c <Quaternion_conjugate+0x1c>
 8001b10:	4b12      	ldr	r3, [pc, #72]	; (8001b5c <Quaternion_conjugate+0x5c>)
 8001b12:	4a13      	ldr	r2, [pc, #76]	; (8001b60 <Quaternion_conjugate+0x60>)
 8001b14:	21b7      	movs	r1, #183	; 0xb7
 8001b16:	4813      	ldr	r0, [pc, #76]	; (8001b64 <Quaternion_conjugate+0x64>)
 8001b18:	f00c feee 	bl	800e8f8 <__assert_func>
    output->w = q->w;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b2a:	eef1 7a67 	vneg.f32	s15, s15
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3a:	eef1 7a67 	vneg.f32	s15, s15
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b4a:	eef1 7a67 	vneg.f32	s15, s15
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8001b54:	bf00      	nop
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	080130c8 	.word	0x080130c8
 8001b60:	080136c0 	.word	0x080136c0
 8001b64:	080130d8 	.word	0x080130d8

08001b68 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8001b68:	b590      	push	{r4, r7, lr}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d105      	bne.n	8001b86 <Quaternion_multiply+0x1e>
 8001b7a:	4b58      	ldr	r3, [pc, #352]	; (8001cdc <Quaternion_multiply+0x174>)
 8001b7c:	4a58      	ldr	r2, [pc, #352]	; (8001ce0 <Quaternion_multiply+0x178>)
 8001b7e:	21d2      	movs	r1, #210	; 0xd2
 8001b80:	4858      	ldr	r0, [pc, #352]	; (8001ce4 <Quaternion_multiply+0x17c>)
 8001b82:	f00c feb9 	bl	800e8f8 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	ed93 7a00 	vldr	s14, [r3]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	edd3 6a01 	vldr	s13, [r3, #4]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ba6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	edd3 6a02 	vldr	s13, [r3, #8]
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bd2:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	edd3 7a00 	vldr	s15, [r3]
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	edd3 6a00 	vldr	s13, [r3]
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c22:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	ed93 7a00 	vldr	s14, [r3]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	edd3 7a00 	vldr	s15, [r3]
 8001c56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001c82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	edd3 6a01 	vldr	s13, [r3, #4]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	edd3 6a03 	vldr	s13, [r3, #12]
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	edd3 7a00 	vldr	s15, [r3]
 8001cba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc2:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	461c      	mov	r4, r3
 8001cca:	f107 0310 	add.w	r3, r7, #16
 8001cce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cd0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001cd4:	bf00      	nop
 8001cd6:	3724      	adds	r7, #36	; 0x24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd90      	pop	{r4, r7, pc}
 8001cdc:	080130c8 	.word	0x080130c8
 8001ce0:	080136d8 	.word	0x080136d8
 8001ce4:	080130d8 	.word	0x080130d8

08001ce8 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b092      	sub	sp, #72	; 0x48
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <Quaternion_rotate+0x1e>
 8001cfa:	4bbc      	ldr	r3, [pc, #752]	; (8001fec <Quaternion_rotate+0x304>)
 8001cfc:	4abc      	ldr	r2, [pc, #752]	; (8001ff0 <Quaternion_rotate+0x308>)
 8001cfe:	21e6      	movs	r1, #230	; 0xe6
 8001d00:	48bc      	ldr	r0, [pc, #752]	; (8001ff4 <Quaternion_rotate+0x30c>)
 8001d02:	f00c fdf9 	bl	800e8f8 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	ed93 7a00 	vldr	s14, [r3]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d16:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d3e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	ed93 7a03 	vldr	s14, [r3, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d52:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	ed93 7a00 	vldr	s14, [r3]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d66:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	ed93 7a00 	vldr	s14, [r3]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d7a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a03 	vldr	s15, [r3, #12]
 8001d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001da2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	ed93 7a01 	vldr	s14, [r3, #4]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	edd3 7a03 	vldr	s15, [r3, #12]
 8001db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dca:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	ed93 7a00 	vldr	s14, [r3]
 8001dd4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001dd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ddc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001de0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	3308      	adds	r3, #8
 8001de8:	edd3 7a00 	vldr	s15, [r3]
 8001dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001df8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	3304      	adds	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e08:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	edd3 6a00 	vldr	s13, [r3]
 8001e12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001e16:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001e1a:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8001e1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e22:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	edd3 7a00 	vldr	s15, [r3]
 8001e2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001e3a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3308      	adds	r3, #8
 8001e42:	edd3 7a00 	vldr	s15, [r3]
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4a:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	edd3 6a00 	vldr	s13, [r3]
 8001e54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001e58:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8001e5c:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	edd3 6a00 	vldr	s13, [r3]
 8001e66:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8001e72:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8001e76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e7a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	edd3 6a00 	vldr	s13, [r3]
 8001e90:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001e94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e9c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001ea0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	3308      	adds	r3, #8
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8001eb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eb8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8001ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	edd3 6a00 	vldr	s13, [r3]
 8001ed2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eda:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	edd3 6a00 	vldr	s13, [r3]
 8001ee6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001eea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eee:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8001ef2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001ef6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	3308      	adds	r3, #8
 8001efe:	edd3 7a00 	vldr	s15, [r3]
 8001f02:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8001f06:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	edd3 6a00 	vldr	s13, [r3]
 8001f12:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001f16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f1a:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8001f1e:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8001f22:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001f26:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f34:	edd7 7a08 	vldr	s15, [r7, #32]
 8001f38:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	3308      	adds	r3, #8
 8001f50:	edd3 6a00 	vldr	s13, [r3]
 8001f54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5c:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8001f60:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f64:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8001f72:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3308      	adds	r3, #8
 8001f7a:	edd3 6a00 	vldr	s13, [r3]
 8001f7e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001f82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f8a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f8e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3304      	adds	r3, #4
 8001f96:	edd3 7a00 	vldr	s15, [r3]
 8001f9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f9e:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	3308      	adds	r3, #8
 8001fa6:	edd3 6a00 	vldr	s13, [r3]
 8001faa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8001fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8001fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	3308      	adds	r3, #8
 8001fba:	edd3 6a00 	vldr	s13, [r3]
 8001fbe:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8001fca:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3308      	adds	r3, #8
 8001fe0:	69fa      	ldr	r2, [r7, #28]
 8001fe2:	601a      	str	r2, [r3, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3748      	adds	r7, #72	; 0x48
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	080130c8 	.word	0x080130c8
 8001ff0:	080136ec 	.word	0x080136ec
 8001ff4:	080130d8 	.word	0x080130d8

08001ff8 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8001ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ffa:	b08b      	sub	sp, #44	; 0x2c
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	ed87 0a02 	vstr	s0, [r7, #8]
 8002004:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	ed93 7a00 	vldr	s14, [r3]
 800200c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002010:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002014:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800201c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	3304      	adds	r3, #4
 8002024:	ed93 7a00 	vldr	s14, [r3]
 8002028:	edd7 7a02 	vldr	s15, [r7, #8]
 800202c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002030:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002034:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002038:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3308      	adds	r3, #8
 8002040:	ed93 7a00 	vldr	s14, [r3]
 8002044:	edd7 7a02 	vldr	s15, [r7, #8]
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002050:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002054:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8002058:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800205c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002060:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002064:	edd7 6a08 	vldr	s13, [r7, #32]
 8002068:	edd7 7a08 	vldr	s15, [r7, #32]
 800206c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002070:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002074:	edd7 6a07 	vldr	s13, [r7, #28]
 8002078:	edd7 7a07 	vldr	s15, [r7, #28]
 800207c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002080:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002084:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS) {
 8002088:	69b8      	ldr	r0, [r7, #24]
 800208a:	f7fe fa7d 	bl	8000588 <__aeabi_f2d>
 800208e:	a336      	add	r3, pc, #216	; (adr r3, 8002168 <Quaternion_fromRate+0x170>)
 8002090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002094:	f7fe fd60 	bl	8000b58 <__aeabi_dcmpgt>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d05c      	beq.n	8002158 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 800209e:	69b8      	ldr	r0, [r7, #24]
 80020a0:	f7fe fa72 	bl	8000588 <__aeabi_f2d>
 80020a4:	4603      	mov	r3, r0
 80020a6:	460c      	mov	r4, r1
 80020a8:	ec44 3b10 	vmov	d0, r3, r4
 80020ac:	f00f fa9a 	bl	80115e4 <sqrt>
 80020b0:	ec54 3b10 	vmov	r3, r4, d0
 80020b4:	4618      	mov	r0, r3
 80020b6:	4621      	mov	r1, r4
 80020b8:	f7fe fdb6 	bl	8000c28 <__aeabi_d2f>
 80020bc:	4603      	mov	r3, r0
 80020be:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 80020c0:	69b8      	ldr	r0, [r7, #24]
 80020c2:	f7fe fa61 	bl	8000588 <__aeabi_f2d>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	ec44 3b10 	vmov	d0, r3, r4
 80020ce:	f00f f9e7 	bl	80114a0 <sin>
 80020d2:	ec56 5b10 	vmov	r5, r6, d0
 80020d6:	69b8      	ldr	r0, [r7, #24]
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	4603      	mov	r3, r0
 80020de:	460c      	mov	r4, r1
 80020e0:	461a      	mov	r2, r3
 80020e2:	4623      	mov	r3, r4
 80020e4:	4628      	mov	r0, r5
 80020e6:	4631      	mov	r1, r6
 80020e8:	f7fe fbd0 	bl	800088c <__aeabi_ddiv>
 80020ec:	4603      	mov	r3, r0
 80020ee:	460c      	mov	r4, r1
 80020f0:	4618      	mov	r0, r3
 80020f2:	4621      	mov	r1, r4
 80020f4:	f7fe fd98 	bl	8000c28 <__aeabi_d2f>
 80020f8:	4603      	mov	r3, r0
 80020fa:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 80020fc:	69b8      	ldr	r0, [r7, #24]
 80020fe:	f7fe fa43 	bl	8000588 <__aeabi_f2d>
 8002102:	4603      	mov	r3, r0
 8002104:	460c      	mov	r4, r1
 8002106:	ec44 3b10 	vmov	d0, r3, r4
 800210a:	f00f f985 	bl	8011418 <cos>
 800210e:	ec54 3b10 	vmov	r3, r4, d0
 8002112:	4618      	mov	r0, r3
 8002114:	4621      	mov	r1, r4
 8002116:	f7fe fd87 	bl	8000c28 <__aeabi_d2f>
 800211a:	4602      	mov	r2, r0
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8002120:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002124:	edd7 7a05 	vldr	s15, [r7, #20]
 8002128:	ee67 7a27 	vmul.f32	s15, s14, s15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8002132:	ed97 7a08 	vldr	s14, [r7, #32]
 8002136:	edd7 7a05 	vldr	s15, [r7, #20]
 800213a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8002144:	ed97 7a07 	vldr	s14, [r7, #28]
 8002148:	edd7 7a05 	vldr	s15, [r7, #20]
 800214c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8002156:	e002      	b.n	800215e <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7ff fb6d 	bl	8001838 <Quaternion_setIdentity>
}
 800215e:	bf00      	nop
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002166:	bf00      	nop
 8002168:	e2308c3a 	.word	0xe2308c3a
 800216c:	3e45798e 	.word	0x3e45798e

08002170 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002170:	b480      	push	{r7}
 8002172:	b085      	sub	sp, #20
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4a07      	ldr	r2, [pc, #28]	; (800219c <vApplicationGetIdleTaskMemory+0x2c>)
 8002180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <vApplicationGetIdleTaskMemory+0x30>)
 8002186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	200003a4 	.word	0x200003a4
 80021a0:	200003f8 	.word	0x200003f8

080021a4 <servoToggleTest>:
        }

    }
}

void servoToggleTest() {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
    while (1) {
        htim2.Instance->CCR4 = 1000;
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <servoToggleTest+0x2c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_Delay(2000);
 80021b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021b6:	f001 fcb3 	bl	8003b20 <HAL_Delay>
        htim2.Instance->CCR4 = 2000;
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <servoToggleTest+0x2c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80021c2:	641a      	str	r2, [r3, #64]	; 0x40
        HAL_Delay(2000);
 80021c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80021c8:	f001 fcaa 	bl	8003b20 <HAL_Delay>
        htim2.Instance->CCR4 = 1000;
 80021cc:	e7ec      	b.n	80021a8 <servoToggleTest+0x4>
 80021ce:	bf00      	nop
 80021d0:	2000454c 	.word	0x2000454c

080021d4 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 80021d8:	2214      	movs	r2, #20
 80021da:	2122      	movs	r1, #34	; 0x22
 80021dc:	2064      	movs	r0, #100	; 0x64
 80021de:	f000 fe17 	bl	8002e10 <changeLed>

    changeLed(255, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	20ff      	movs	r0, #255	; 0xff
 80021e8:	f000 fe12 	bl	8002e10 <changeLed>
    playtone(1046, 100, 10);
 80021ec:	220a      	movs	r2, #10
 80021ee:	2164      	movs	r1, #100	; 0x64
 80021f0:	f240 4016 	movw	r0, #1046	; 0x416
 80021f4:	f000 fd14 	bl	8002c20 <playtone>
    HAL_Delay(100);
 80021f8:	2064      	movs	r0, #100	; 0x64
 80021fa:	f001 fc91 	bl	8003b20 <HAL_Delay>
    changeLed(0, 255, 0);
 80021fe:	2200      	movs	r2, #0
 8002200:	21ff      	movs	r1, #255	; 0xff
 8002202:	2000      	movs	r0, #0
 8002204:	f000 fe04 	bl	8002e10 <changeLed>
    playtone(1319, 100, 10);
 8002208:	220a      	movs	r2, #10
 800220a:	2164      	movs	r1, #100	; 0x64
 800220c:	f240 5027 	movw	r0, #1319	; 0x527
 8002210:	f000 fd06 	bl	8002c20 <playtone>
    return;
 8002214:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 8002216:	bd80      	pop	{r7, pc}

08002218 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 8002220:	af06      	add	r7, sp, #24
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002222:	f001 fc3b 	bl	8003a9c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002226:	f000 f96b 	bl	8002500 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800222a:	f000 fc27 	bl	8002a7c <MX_GPIO_Init>
    MX_TIM3_Init();
 800222e:	f000 fb8b 	bl	8002948 <MX_TIM3_Init>
    MX_SPI2_Init();
 8002232:	f000 fab9 	bl	80027a8 <MX_SPI2_Init>
    MX_SPI3_Init();
 8002236:	f000 faed 	bl	8002814 <MX_SPI3_Init>
    MX_TIM2_Init();
 800223a:	f000 fb21 	bl	8002880 <MX_TIM2_Init>
    MX_SPI1_Init();
 800223e:	f000 fa7d 	bl	800273c <MX_SPI1_Init>
    MX_FATFS_Init();
 8002242:	f008 f9eb 	bl	800a61c <MX_FATFS_Init>
    MX_I2C3_Init();
 8002246:	f000 fa4b 	bl	80026e0 <MX_I2C3_Init>
    MX_ADC1_Init();
 800224a:	f000 f9f5 	bl	8002638 <MX_ADC1_Init>
    /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800224e:	210c      	movs	r1, #12
 8002250:	489d      	ldr	r0, [pc, #628]	; (80024c8 <main+0x2b0>)
 8002252:	f006 f837 	bl	80082c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002256:	2104      	movs	r1, #4
 8002258:	489b      	ldr	r0, [pc, #620]	; (80024c8 <main+0x2b0>)
 800225a:	f006 f833 	bl	80082c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800225e:	2108      	movs	r1, #8
 8002260:	4899      	ldr	r0, [pc, #612]	; (80024c8 <main+0x2b0>)
 8002262:	f006 f82f 	bl	80082c4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002266:	2100      	movs	r1, #0
 8002268:	4897      	ldr	r0, [pc, #604]	; (80024c8 <main+0x2b0>)
 800226a:	f006 f82b 	bl	80082c4 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800226e:	210c      	movs	r1, #12
 8002270:	4896      	ldr	r0, [pc, #600]	; (80024cc <main+0x2b4>)
 8002272:	f006 f827 	bl	80082c4 <HAL_TIM_PWM_Start>

    startupMusic();
 8002276:	f7ff ffad 	bl	80021d4 <startupMusic>

    changeLed(90, 0, 0);
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	205a      	movs	r0, #90	; 0x5a
 8002280:	f000 fdc6 	bl	8002e10 <changeLed>

    htim3.Instance->CCR2 = 0;
 8002284:	4b90      	ldr	r3, [pc, #576]	; (80024c8 <main+0x2b0>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2200      	movs	r2, #0
 800228a:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 800228c:	4b8e      	ldr	r3, [pc, #568]	; (80024c8 <main+0x2b0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	22ff      	movs	r2, #255	; 0xff
 8002292:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8002294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002298:	f001 fc42 	bl	8003b20 <HAL_Delay>

    //BWtest();
    uint8_t is_tx = 0;
 800229c:	2300      	movs	r3, #0
 800229e:	f887 3227 	strb.w	r3, [r7, #551]	; 0x227
    //loraTesting(is_tx);
    //loraOrientation(is_tx);
    servoToggleTest();
 80022a2:	f7ff ff7f 	bl	80021a4 <servoToggleTest>

    // LSM6dso setup
    lsm6dso imu;
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,
 80022a6:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80022aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ae:	4a88      	ldr	r2, [pc, #544]	; (80024d0 <main+0x2b8>)
 80022b0:	4988      	ldr	r1, [pc, #544]	; (80024d4 <main+0x2bc>)
 80022b2:	f7fe ff09 	bl	80010c8 <LSM_init>
 80022b6:	4603      	mov	r3, r0
 80022b8:	f887 3226 	strb.w	r3, [r7, #550]	; 0x226
            SPI2_NSS_Pin);

    SPL06 baro;
    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 80022bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80022c0:	2277      	movs	r2, #119	; 0x77
 80022c2:	4985      	ldr	r1, [pc, #532]	; (80024d8 <main+0x2c0>)
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff f905 	bl	80014d4 <SPL06_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	f887 3225 	strb.w	r3, [r7, #549]	; 0x225

    if (barostatus != 5) {
 80022d0:	f897 3225 	ldrb.w	r3, [r7, #549]	; 0x225
 80022d4:	2b05      	cmp	r3, #5
 80022d6:	d010      	beq.n	80022fa <main+0xe2>
        while (1) {

            HAL_Delay(100);
 80022d8:	2064      	movs	r0, #100	; 0x64
 80022da:	f001 fc21 	bl	8003b20 <HAL_Delay>
            changeLed(100, 0, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2100      	movs	r1, #0
 80022e2:	2064      	movs	r0, #100	; 0x64
 80022e4:	f000 fd94 	bl	8002e10 <changeLed>
            HAL_Delay(100);
 80022e8:	2064      	movs	r0, #100	; 0x64
 80022ea:	f001 fc19 	bl	8003b20 <HAL_Delay>
            changeLed(0, 0, 0);
 80022ee:	2200      	movs	r2, #0
 80022f0:	2100      	movs	r1, #0
 80022f2:	2000      	movs	r0, #0
 80022f4:	f000 fd8c 	bl	8002e10 <changeLed>
            HAL_Delay(100);
 80022f8:	e7ee      	b.n	80022d8 <main+0xc0>
        }
    }

    //SDTesting();

    float yrot = 0;
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    uint32_t lasttime = HAL_GetTick();
 8002302:	f001 fc01 	bl	8003b08 <HAL_GetTick>
 8002306:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
    uint32_t nowtime = HAL_GetTick();
 800230a:	f001 fbfd 	bl	8003b08 <HAL_GetTick>
 800230e:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
    float dt = 0;
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    uint16_t rawadc;

    Orientation ori;
    orientation_init(&ori);
 800231a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fe97 	bl	8003052 <orientation_init>
    uint32_t counter = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    /* add queues, ... */
    /* USER CODE END RTOS_QUEUES */

    /* Create the thread(s) */
    /* definition and creation of ledTask */
    osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 800232a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800232e:	4a6b      	ldr	r2, [pc, #428]	; (80024dc <main+0x2c4>)
 8002330:	461c      	mov	r4, r3
 8002332:	4615      	mov	r5, r2
 8002334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002338:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800233c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8002340:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002344:	2100      	movs	r1, #0
 8002346:	4618      	mov	r0, r3
 8002348:	f00a fb5c 	bl	800ca04 <osThreadCreate>
 800234c:	4602      	mov	r2, r0
 800234e:	4b64      	ldr	r3, [pc, #400]	; (80024e0 <main+0x2c8>)
 8002350:	601a      	str	r2, [r3, #0]

    /* definition and creation of musicTask */
    osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8002352:	f107 0320 	add.w	r3, r7, #32
 8002356:	4a63      	ldr	r2, [pc, #396]	; (80024e4 <main+0x2cc>)
 8002358:	461c      	mov	r4, r3
 800235a:	4615      	mov	r5, r2
 800235c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800235e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8002368:	f107 0320 	add.w	r3, r7, #32
 800236c:	2100      	movs	r1, #0
 800236e:	4618      	mov	r0, r3
 8002370:	f00a fb48 	bl	800ca04 <osThreadCreate>
 8002374:	4602      	mov	r2, r0
 8002376:	4b5c      	ldr	r3, [pc, #368]	; (80024e8 <main+0x2d0>)
 8002378:	601a      	str	r2, [r3, #0]

    /* definition and creation of stateMachineTas */
    osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	4a5b      	ldr	r2, [pc, #364]	; (80024ec <main+0x2d4>)
 800237e:	461c      	mov	r4, r3
 8002380:	4615      	mov	r5, r2
 8002382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800238a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 800238e:	1d3b      	adds	r3, r7, #4
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f00a fb36 	bl	800ca04 <osThreadCreate>
 8002398:	4602      	mov	r2, r0
 800239a:	4b55      	ldr	r3, [pc, #340]	; (80024f0 <main+0x2d8>)
 800239c:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
    /* USER CODE END RTOS_THREADS */

    /* Start scheduler */
    osKernelStart();
 800239e:	f00a fb2a 	bl	800c9f6 <osKernelStart>

        /* USER CODE END WHILE */

        /* USER CODE BEGIN 3 */
        //SPL06_Read(&baro);
        LSM_pollsensors(&imu);
 80023a2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe ff08 	bl	80011bc <LSM_pollsensors>
        //sprintf(printBuffer, "gx: %f, gy: %f, gz: %f\r\n", imu.gyroRPS[0], imu.gyroRPS[1], imu.gyroRPS[2]);
        //sprintf(printBuffer, "y:%f,o:%f,g:%f,V:%d\r\n", yrot, imu.gyroDPSOffset[1],
        //        imu.gyroDPS[1], rawadc);
        //sprintf(printBuffer, "T:%f\r\n", (float) (25 + (((rawadc - 943) * 3.3 / 4096.0)) / 0.0025));

        changeLed(0, 0, 100);
 80023ac:	2264      	movs	r2, #100	; 0x64
 80023ae:	2100      	movs	r1, #0
 80023b0:	2000      	movs	r0, #0
 80023b2:	f000 fd2d 	bl	8002e10 <changeLed>
        nowtime = HAL_GetTick();
 80023b6:	f001 fba7 	bl	8003b08 <HAL_GetTick>
 80023ba:	f8c7 021c 	str.w	r0, [r7, #540]	; 0x21c
        dt = (nowtime - lasttime) / 1000.0;
 80023be:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80023c2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f8bb 	bl	8000544 <__aeabi_ui2d>
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	4b48      	ldr	r3, [pc, #288]	; (80024f4 <main+0x2dc>)
 80023d4:	f7fe fa5a 	bl	800088c <__aeabi_ddiv>
 80023d8:	4603      	mov	r3, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	4618      	mov	r0, r3
 80023de:	4621      	mov	r1, r4
 80023e0:	f7fe fc22 	bl	8000c28 <__aeabi_d2f>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
        lasttime = nowtime;
 80023ea:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80023ee:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

        orientation_setGyro(&ori, imu.gyroRPS);
 80023f2:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80023f6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80023fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fe54 	bl	80030ae <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8002406:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800240a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800240e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f000 fe61 	bl	80030dc <orientation_setAcc>
        orientation_update(&ori, dt);
 800241a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800241e:	ed97 0a86 	vldr	s0, [r7, #536]	; 0x218
 8002422:	4618      	mov	r0, r3
 8002424:	f000 fe74 	bl	8003110 <orientation_update>

        //sprintf(printBuffer, "z:%f,y:%f,x:%f\r\n", ori.eulerZYX[0], ori.eulerZYX[1], ori.eulerZYX[2]);
        if (counter % 30 == 0) {
 8002428:	f8d7 1228 	ldr.w	r1, [r7, #552]	; 0x228
 800242c:	4b32      	ldr	r3, [pc, #200]	; (80024f8 <main+0x2e0>)
 800242e:	fba3 2301 	umull	r2, r3, r3, r1
 8002432:	091a      	lsrs	r2, r3, #4
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	1aca      	subs	r2, r1, r3
 800243e:	2a00      	cmp	r2, #0
 8002440:	d139      	bne.n	80024b6 <main+0x29e>
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 8002442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002446:	681b      	ldr	r3, [r3, #0]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f89d 	bl	8000588 <__aeabi_f2d>
 800244e:	4682      	mov	sl, r0
 8002450:	468b      	mov	fp, r1
                    ori.orientationQuat.w, ori.orientationQuat.v[0],
 8002452:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002456:	685b      	ldr	r3, [r3, #4]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f895 	bl	8000588 <__aeabi_f2d>
 800245e:	4604      	mov	r4, r0
 8002460:	460d      	mov	r5, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 8002462:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002466:	689b      	ldr	r3, [r3, #8]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f88d 	bl	8000588 <__aeabi_f2d>
 800246e:	4680      	mov	r8, r0
 8002470:	4689      	mov	r9, r1
                    ori.orientationQuat.v[1], ori.orientationQuat.v[2]);
 8002472:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002476:	68db      	ldr	r3, [r3, #12]
            sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",
 8002478:	4618      	mov	r0, r3
 800247a:	f7fe f885 	bl	8000588 <__aeabi_f2d>
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8002486:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800248a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800248e:	e9cd 4500 	strd	r4, r5, [sp]
 8002492:	4652      	mov	r2, sl
 8002494:	465b      	mov	r3, fp
 8002496:	4919      	ldr	r1, [pc, #100]	; (80024fc <main+0x2e4>)
 8002498:	f00d f910 	bl	800f6bc <siprintf>
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",ori.horQuat.w,ori.horQuat.v[0],ori.horQuat.v[1],ori.horQuat.v[2]);
            //sprintf(printBuffer, "Counter: %d\r\n",counter);
            //sprintf(printBuffer, "gx: %d, gy: %d, gz: %d\r\n", imu.rawGyro[0], imu.rawGyro[1], imu.rawGyro[2]);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 800249c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fd feb5 	bl	8000210 <strlen>
 80024a6:	4603      	mov	r3, r0
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f00b fd7f 	bl	800dfb4 <CDC_Transmit_FS>
        }
        counter++;
 80024b6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80024ba:	3301      	adds	r3, #1
 80024bc:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

        HAL_Delay(1);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f001 fb2d 	bl	8003b20 <HAL_Delay>
        LSM_pollsensors(&imu);
 80024c6:	e76c      	b.n	80023a2 <main+0x18a>
 80024c8:	20004410 	.word	0x20004410
 80024cc:	2000454c 	.word	0x2000454c
 80024d0:	40020400 	.word	0x40020400
 80024d4:	200043b4 	.word	0x200043b4
 80024d8:	20004360 	.word	0x20004360
 80024dc:	08013334 	.word	0x08013334
 80024e0:	2000440c 	.word	0x2000440c
 80024e4:	0801335c 	.word	0x0801335c
 80024e8:	2000458c 	.word	0x2000458c
 80024ec:	08013388 	.word	0x08013388
 80024f0:	200044f0 	.word	0x200044f0
 80024f4:	408f4000 	.word	0x408f4000
 80024f8:	88888889 	.word	0x88888889
 80024fc:	08013128 	.word	0x08013128

08002500 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002500:	b580      	push	{r7, lr}
 8002502:	b0ac      	sub	sp, #176	; 0xb0
 8002504:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002506:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800250a:	2234      	movs	r2, #52	; 0x34
 800250c:	2100      	movs	r1, #0
 800250e:	4618      	mov	r0, r3
 8002510:	f00c fa67 	bl	800e9e2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002514:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	225c      	movs	r2, #92	; 0x5c
 800252a:	2100      	movs	r1, #0
 800252c:	4618      	mov	r0, r3
 800252e:	f00c fa58 	bl	800e9e2 <memset>

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b3e      	ldr	r3, [pc, #248]	; (8002630 <SystemClock_Config+0x130>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a3d      	ldr	r2, [pc, #244]	; (8002630 <SystemClock_Config+0x130>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b3b      	ldr	r3, [pc, #236]	; (8002630 <SystemClock_Config+0x130>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800254e:	2300      	movs	r3, #0
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	4b38      	ldr	r3, [pc, #224]	; (8002634 <SystemClock_Config+0x134>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a37      	ldr	r2, [pc, #220]	; (8002634 <SystemClock_Config+0x134>)
 8002558:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <SystemClock_Config+0x134>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002566:	607b      	str	r3, [r7, #4]
 8002568:	687b      	ldr	r3, [r7, #4]
    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800256a:	2301      	movs	r3, #1
 800256c:	67fb      	str	r3, [r7, #124]	; 0x7c
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800256e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002572:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002576:	2302      	movs	r3, #2
 8002578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800257c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002580:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    RCC_OscInitStruct.PLL.PLLM = 4;
 8002584:	2304      	movs	r3, #4
 8002586:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    RCC_OscInitStruct.PLL.PLLN = 180;
 800258a:	23b4      	movs	r3, #180	; 0xb4
 800258c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002590:	2302      	movs	r3, #2
 8002592:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    RCC_OscInitStruct.PLL.PLLQ = 8;
 8002596:	2308      	movs	r3, #8
 8002598:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    RCC_OscInitStruct.PLL.PLLR = 2;
 800259c:	2302      	movs	r3, #2
 800259e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80025a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 ffc4 	bl	8007534 <HAL_RCC_OscConfig>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <SystemClock_Config+0xb6>
        Error_Handler();
 80025b2:	f000 fc97 	bl	8002ee4 <Error_Handler>
    }
    /** Activate the Over-Drive mode
     */
    if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80025b6:	f004 f957 	bl	8006868 <HAL_PWREx_EnableOverDrive>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <SystemClock_Config+0xc4>
        Error_Handler();
 80025c0:	f000 fc90 	bl	8002ee4 <Error_Handler>
    }
    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80025c4:	230f      	movs	r3, #15
 80025c6:	66bb      	str	r3, [r7, #104]	; 0x68
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c8:	2302      	movs	r3, #2
 80025ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	673b      	str	r3, [r7, #112]	; 0x70
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80025d4:	677b      	str	r3, [r7, #116]	; 0x74
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025da:	67bb      	str	r3, [r7, #120]	; 0x78

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80025dc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80025e0:	2105      	movs	r1, #5
 80025e2:	4618      	mov	r0, r3
 80025e4:	f004 f990 	bl	8006908 <HAL_RCC_ClockConfig>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <SystemClock_Config+0xf2>
        Error_Handler();
 80025ee:	f000 fc79 	bl	8002ee4 <Error_Handler>
    }
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80025f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025f6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 80025f8:	2304      	movs	r3, #4
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 80025fc:	2360      	movs	r3, #96	; 0x60
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002600:	2302      	movs	r3, #2
 8002602:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8002604:	2304      	movs	r3, #4
 8002606:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002608:	2301      	movs	r3, #1
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800260c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002610:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002612:	f107 030c 	add.w	r3, r7, #12
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fac2 	bl	8006ba0 <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <SystemClock_Config+0x126>
        Error_Handler();
 8002622:	f000 fc5f 	bl	8002ee4 <Error_Handler>
    }
}
 8002626:	bf00      	nop
 8002628:	37b0      	adds	r7, #176	; 0xb0
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40007000 	.word	0x40007000

08002638 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = { 0 };
 800263e:	463b      	mov	r3, r7
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
    /* USER CODE BEGIN ADC1_Init 1 */

    /* USER CODE END ADC1_Init 1 */
    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 800264a:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <MX_ADC1_Init+0x98>)
 800264c:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <MX_ADC1_Init+0x9c>)
 800264e:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002652:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002656:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_ADC1_Init+0x98>)
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800265e:	4b1c      	ldr	r3, [pc, #112]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002666:	2200      	movs	r2, #0
 8002668:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 800266a:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <MX_ADC1_Init+0x98>)
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002672:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002674:	2200      	movs	r2, #0
 8002676:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <MX_ADC1_Init+0x98>)
 800267a:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <MX_ADC1_Init+0xa0>)
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800267e:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8002684:	4b12      	ldr	r3, [pc, #72]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002686:	2201      	movs	r2, #1
 8002688:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_ADC1_Init+0x98>)
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <MX_ADC1_Init+0x98>)
 8002694:	2201      	movs	r2, #1
 8002696:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <MX_ADC1_Init+0x98>)
 800269a:	f001 fa63 	bl	8003b64 <HAL_ADC_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_ADC1_Init+0x70>
        Error_Handler();
 80026a4:	f000 fc1e 	bl	8002ee4 <Error_Handler>
    }
    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_ADC1_Init+0xa4>)
 80026aa:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 80026ac:	2301      	movs	r3, #1
 80026ae:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80026b4:	463b      	mov	r3, r7
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_ADC1_Init+0x98>)
 80026ba:	f001 fa97 	bl	8003bec <HAL_ADC_ConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_ADC1_Init+0x90>
        Error_Handler();
 80026c4:	f000 fc0e 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	200044a8 	.word	0x200044a8
 80026d4:	40012000 	.word	0x40012000
 80026d8:	0f000001 	.word	0x0f000001
 80026dc:	10000012 	.word	0x10000012

080026e0 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <MX_I2C3_Init+0x50>)
 80026e6:	4a13      	ldr	r2, [pc, #76]	; (8002734 <MX_I2C3_Init+0x54>)
 80026e8:	601a      	str	r2, [r3, #0]
    hi2c3.Init.ClockSpeed = 100000;
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <MX_I2C3_Init+0x50>)
 80026ec:	4a12      	ldr	r2, [pc, #72]	; (8002738 <MX_I2C3_Init+0x58>)
 80026ee:	605a      	str	r2, [r3, #4]
    hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <MX_I2C3_Init+0x50>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	609a      	str	r2, [r3, #8]
    hi2c3.Init.OwnAddress1 = 0;
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <MX_I2C3_Init+0x50>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	60da      	str	r2, [r3, #12]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026fc:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <MX_I2C3_Init+0x50>)
 80026fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002702:	611a      	str	r2, [r3, #16]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002704:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <MX_I2C3_Init+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2 = 0;
 800270a:	4b09      	ldr	r3, [pc, #36]	; (8002730 <MX_I2C3_Init+0x50>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002710:	4b07      	ldr	r3, [pc, #28]	; (8002730 <MX_I2C3_Init+0x50>)
 8002712:	2200      	movs	r2, #0
 8002714:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002716:	4b06      	ldr	r3, [pc, #24]	; (8002730 <MX_I2C3_Init+0x50>)
 8002718:	2200      	movs	r2, #0
 800271a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800271c:	4804      	ldr	r0, [pc, #16]	; (8002730 <MX_I2C3_Init+0x50>)
 800271e:	f001 ff21 	bl	8004564 <HAL_I2C_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <MX_I2C3_Init+0x4c>
        Error_Handler();
 8002728:	f000 fbdc 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */

}
 800272c:	bf00      	nop
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20004360 	.word	0x20004360
 8002734:	40005c00 	.word	0x40005c00
 8002738:	000186a0 	.word	0x000186a0

0800273c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI1_Init 1 */

    /* USER CODE END SPI1_Init 1 */
    /* SPI1 parameter configuration*/
    hspi1.Instance = SPI1;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002742:	4a18      	ldr	r2, [pc, #96]	; (80027a4 <MX_SPI1_Init+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002748:	f44f 7282 	mov.w	r2, #260	; 0x104
 800274c:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002750:	2200      	movs	r2, #0
 8002752:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002756:	2200      	movs	r2, #0
 8002758:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800275a:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <MX_SPI1_Init+0x64>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8002766:	4b0e      	ldr	r3, [pc, #56]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002768:	f44f 7200 	mov.w	r2, #512	; 0x200
 800276c:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800276e:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002770:	2238      	movs	r2, #56	; 0x38
 8002772:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002774:	4b0a      	ldr	r3, [pc, #40]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800277a:	4b09      	ldr	r3, [pc, #36]	; (80027a0 <MX_SPI1_Init+0x64>)
 800277c:	2200      	movs	r2, #0
 800277e:	625a      	str	r2, [r3, #36]	; 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002782:	2200      	movs	r2, #0
 8002784:	629a      	str	r2, [r3, #40]	; 0x28
    hspi1.Init.CRCPolynomial = 10;
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <MX_SPI1_Init+0x64>)
 8002788:	220a      	movs	r2, #10
 800278a:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800278c:	4804      	ldr	r0, [pc, #16]	; (80027a0 <MX_SPI1_Init+0x64>)
 800278e:	f005 f92b 	bl	80079e8 <HAL_SPI_Init>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <MX_SPI1_Init+0x60>
        Error_Handler();
 8002798:	f000 fba4 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI1_Init 2 */

    /* USER CODE END SPI1_Init 2 */

}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200044f4 	.word	0x200044f4
 80027a4:	40013000 	.word	0x40013000

080027a8 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <MX_SPI2_Init+0x64>)
 80027ae:	4a18      	ldr	r2, [pc, #96]	; (8002810 <MX_SPI2_Init+0x68>)
 80027b0:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 80027b2:	4b16      	ldr	r3, [pc, #88]	; (800280c <MX_SPI2_Init+0x64>)
 80027b4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027b8:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027ba:	4b14      	ldr	r3, [pc, #80]	; (800280c <MX_SPI2_Init+0x64>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027c0:	4b12      	ldr	r3, [pc, #72]	; (800280c <MX_SPI2_Init+0x64>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027c6:	4b11      	ldr	r3, [pc, #68]	; (800280c <MX_SPI2_Init+0x64>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027cc:	4b0f      	ldr	r3, [pc, #60]	; (800280c <MX_SPI2_Init+0x64>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <MX_SPI2_Init+0x64>)
 80027d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d8:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <MX_SPI2_Init+0x64>)
 80027dc:	2210      	movs	r2, #16
 80027de:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027e0:	4b0a      	ldr	r3, [pc, #40]	; (800280c <MX_SPI2_Init+0x64>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027e6:	4b09      	ldr	r3, [pc, #36]	; (800280c <MX_SPI2_Init+0x64>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ec:	4b07      	ldr	r3, [pc, #28]	; (800280c <MX_SPI2_Init+0x64>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <MX_SPI2_Init+0x64>)
 80027f4:	220a      	movs	r2, #10
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 80027f8:	4804      	ldr	r0, [pc, #16]	; (800280c <MX_SPI2_Init+0x64>)
 80027fa:	f005 f8f5 	bl	80079e8 <HAL_SPI_Init>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <MX_SPI2_Init+0x60>
        Error_Handler();
 8002804:	f000 fb6e 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */

}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}
 800280c:	200043b4 	.word	0x200043b4
 8002810:	40003800 	.word	0x40003800

08002814 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI3_Init 1 */

    /* USER CODE END SPI3_Init 1 */
    /* SPI3 parameter configuration*/
    hspi3.Instance = SPI3;
 8002818:	4b17      	ldr	r3, [pc, #92]	; (8002878 <MX_SPI3_Init+0x64>)
 800281a:	4a18      	ldr	r2, [pc, #96]	; (800287c <MX_SPI3_Init+0x68>)
 800281c:	601a      	str	r2, [r3, #0]
    hspi3.Init.Mode = SPI_MODE_MASTER;
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <MX_SPI3_Init+0x64>)
 8002820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002824:	605a      	str	r2, [r3, #4]
    hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <MX_SPI3_Init+0x64>)
 8002828:	2200      	movs	r2, #0
 800282a:	609a      	str	r2, [r3, #8]
    hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <MX_SPI3_Init+0x64>)
 800282e:	2200      	movs	r2, #0
 8002830:	60da      	str	r2, [r3, #12]
    hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_SPI3_Init+0x64>)
 8002834:	2200      	movs	r2, #0
 8002836:	611a      	str	r2, [r3, #16]
    hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_SPI3_Init+0x64>)
 800283a:	2200      	movs	r2, #0
 800283c:	615a      	str	r2, [r3, #20]
    hspi3.Init.NSS = SPI_NSS_SOFT;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_SPI3_Init+0x64>)
 8002840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002844:	619a      	str	r2, [r3, #24]
    hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_SPI3_Init+0x64>)
 8002848:	2210      	movs	r2, #16
 800284a:	61da      	str	r2, [r3, #28]
    hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800284c:	4b0a      	ldr	r3, [pc, #40]	; (8002878 <MX_SPI3_Init+0x64>)
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
    hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_SPI3_Init+0x64>)
 8002854:	2200      	movs	r2, #0
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
    hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002858:	4b07      	ldr	r3, [pc, #28]	; (8002878 <MX_SPI3_Init+0x64>)
 800285a:	2200      	movs	r2, #0
 800285c:	629a      	str	r2, [r3, #40]	; 0x28
    hspi3.Init.CRCPolynomial = 10;
 800285e:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_SPI3_Init+0x64>)
 8002860:	220a      	movs	r2, #10
 8002862:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8002864:	4804      	ldr	r0, [pc, #16]	; (8002878 <MX_SPI3_Init+0x64>)
 8002866:	f005 f8bf 	bl	80079e8 <HAL_SPI_Init>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <MX_SPI3_Init+0x60>
        Error_Handler();
 8002870:	f000 fb38 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN SPI3_Init 2 */

    /* USER CODE END SPI3_Init 2 */

}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20004450 	.word	0x20004450
 800287c:	40003c00 	.word	0x40003c00

08002880 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002886:	f107 0320 	add.w	r3, r7, #32
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	605a      	str	r2, [r3, #4]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	60da      	str	r2, [r3, #12]
 800289c:	611a      	str	r2, [r3, #16]
 800289e:	615a      	str	r2, [r3, #20]
 80028a0:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028a8:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 90 - 1;
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028ac:	2259      	movs	r2, #89	; 0x59
 80028ae:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 20000 - 1;
 80028b6:	4b23      	ldr	r3, [pc, #140]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80028bc:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028c4:	4b1f      	ldr	r3, [pc, #124]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80028ca:	481e      	ldr	r0, [pc, #120]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028cc:	f005 fccf 	bl	800826e <HAL_TIM_PWM_Init>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM2_Init+0x5a>
        Error_Handler();
 80028d6:	f000 fb05 	bl	8002ee4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80028e2:	f107 0320 	add.w	r3, r7, #32
 80028e6:	4619      	mov	r1, r3
 80028e8:	4816      	ldr	r0, [pc, #88]	; (8002944 <MX_TIM2_Init+0xc4>)
 80028ea:	f006 fae7 	bl	8008ebc <HAL_TIMEx_MasterConfigSynchronization>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <MX_TIM2_Init+0x78>
            != HAL_OK) {
        Error_Handler();
 80028f4:	f000 faf6 	bl	8002ee4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028f8:	2360      	movs	r3, #96	; 0x60
 80028fa:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 1000;
 80028fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002900:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	2200      	movs	r2, #0
 800290e:	4619      	mov	r1, r3
 8002910:	480c      	ldr	r0, [pc, #48]	; (8002944 <MX_TIM2_Init+0xc4>)
 8002912:	f005 fe1d 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <MX_TIM2_Init+0xa0>
            != HAL_OK) {
        Error_Handler();
 800291c:	f000 fae2 	bl	8002ee4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 8002920:	1d3b      	adds	r3, r7, #4
 8002922:	220c      	movs	r2, #12
 8002924:	4619      	mov	r1, r3
 8002926:	4807      	ldr	r0, [pc, #28]	; (8002944 <MX_TIM2_Init+0xc4>)
 8002928:	f005 fe12 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <MX_TIM2_Init+0xb6>
            != HAL_OK) {
        Error_Handler();
 8002932:	f000 fad7 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8002936:	4803      	ldr	r0, [pc, #12]	; (8002944 <MX_TIM2_Init+0xc4>)
 8002938:	f000 fea6 	bl	8003688 <HAL_TIM_MspPostInit>

}
 800293c:	bf00      	nop
 800293e:	3728      	adds	r7, #40	; 0x28
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	2000454c 	.word	0x2000454c

08002948 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002948:	b580      	push	{r7, lr}
 800294a:	b08e      	sub	sp, #56	; 0x38
 800294c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800294e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002966:	1d3b      	adds	r3, r7, #4
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	605a      	str	r2, [r3, #4]
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	60da      	str	r2, [r3, #12]
 8002972:	611a      	str	r2, [r3, #16]
 8002974:	615a      	str	r2, [r3, #20]
 8002976:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8002978:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <MX_TIM3_Init+0x12c>)
 800297a:	4a3f      	ldr	r2, [pc, #252]	; (8002a78 <MX_TIM3_Init+0x130>)
 800297c:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 90 - 1;
 800297e:	4b3d      	ldr	r3, [pc, #244]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002980:	2259      	movs	r2, #89	; 0x59
 8002982:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002984:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 256 - 1;
 800298a:	4b3a      	ldr	r3, [pc, #232]	; (8002a74 <MX_TIM3_Init+0x12c>)
 800298c:	22ff      	movs	r2, #255	; 0xff
 800298e:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002990:	4b38      	ldr	r3, [pc, #224]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002996:	4b37      	ldr	r3, [pc, #220]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800299c:	4835      	ldr	r0, [pc, #212]	; (8002a74 <MX_TIM3_Init+0x12c>)
 800299e:	f005 fc17 	bl	80081d0 <HAL_TIM_Base_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d001      	beq.n	80029ac <MX_TIM3_Init+0x64>
        Error_Handler();
 80029a8:	f000 fa9c 	bl	8002ee4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029b0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80029b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029b6:	4619      	mov	r1, r3
 80029b8:	482e      	ldr	r0, [pc, #184]	; (8002a74 <MX_TIM3_Init+0x12c>)
 80029ba:	f005 fe8f 	bl	80086dc <HAL_TIM_ConfigClockSource>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <MX_TIM3_Init+0x80>
        Error_Handler();
 80029c4:	f000 fa8e 	bl	8002ee4 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80029c8:	482a      	ldr	r0, [pc, #168]	; (8002a74 <MX_TIM3_Init+0x12c>)
 80029ca:	f005 fc50 	bl	800826e <HAL_TIM_PWM_Init>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_TIM3_Init+0x90>
        Error_Handler();
 80029d4:	f000 fa86 	bl	8002ee4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80029e0:	f107 0320 	add.w	r3, r7, #32
 80029e4:	4619      	mov	r1, r3
 80029e6:	4823      	ldr	r0, [pc, #140]	; (8002a74 <MX_TIM3_Init+0x12c>)
 80029e8:	f006 fa68 	bl	8008ebc <HAL_TIMEx_MasterConfigSynchronization>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <MX_TIM3_Init+0xae>
            != HAL_OK) {
        Error_Handler();
 80029f2:	f000 fa77 	bl	8002ee4 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029f6:	2360      	movs	r3, #96	; 0x60
 80029f8:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80029fe:	2302      	movs	r3, #2
 8002a00:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002a06:	1d3b      	adds	r3, r7, #4
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	4819      	ldr	r0, [pc, #100]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002a0e:	f005 fd9f 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <MX_TIM3_Init+0xd4>
            != HAL_OK) {
        Error_Handler();
 8002a18:	f000 fa64 	bl	8002ee4 <Error_Handler>
    }
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	2204      	movs	r2, #4
 8002a24:	4619      	mov	r1, r3
 8002a26:	4813      	ldr	r0, [pc, #76]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002a28:	f005 fd92 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <MX_TIM3_Init+0xee>
            != HAL_OK) {
        Error_Handler();
 8002a32:	f000 fa57 	bl	8002ee4 <Error_Handler>
    }
    sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002a36:	2302      	movs	r3, #2
 8002a38:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	2208      	movs	r2, #8
 8002a3e:	4619      	mov	r1, r3
 8002a40:	480c      	ldr	r0, [pc, #48]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002a42:	f005 fd85 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <MX_TIM3_Init+0x108>
            != HAL_OK) {
        Error_Handler();
 8002a4c:	f000 fa4a 	bl	8002ee4 <Error_Handler>
    }
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 8002a50:	1d3b      	adds	r3, r7, #4
 8002a52:	220c      	movs	r2, #12
 8002a54:	4619      	mov	r1, r3
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002a58:	f005 fd7a 	bl	8008550 <HAL_TIM_PWM_ConfigChannel>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_TIM3_Init+0x11e>
            != HAL_OK) {
        Error_Handler();
 8002a62:	f000 fa3f 	bl	8002ee4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 8002a66:	4803      	ldr	r0, [pc, #12]	; (8002a74 <MX_TIM3_Init+0x12c>)
 8002a68:	f000 fe0e 	bl	8003688 <HAL_TIM_MspPostInit>

}
 8002a6c:	bf00      	nop
 8002a6e:	3738      	adds	r7, #56	; 0x38
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20004410 	.word	0x20004410
 8002a78:	40000400 	.word	0x40000400

08002a7c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002a82:	f107 0314 	add.w	r3, r7, #20
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	60da      	str	r2, [r3, #12]
 8002a90:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a5c      	ldr	r2, [pc, #368]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002a9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	4b56      	ldr	r3, [pc, #344]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	4a55      	ldr	r2, [pc, #340]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002ab8:	f043 0304 	orr.w	r3, r3, #4
 8002abc:	6313      	str	r3, [r2, #48]	; 0x30
 8002abe:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
 8002ace:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	4a4e      	ldr	r2, [pc, #312]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8002ada:	4b4c      	ldr	r3, [pc, #304]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60bb      	str	r3, [r7, #8]
 8002ae4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
 8002aea:	4b48      	ldr	r3, [pc, #288]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	4a47      	ldr	r2, [pc, #284]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	; 0x30
 8002af6:	4b45      	ldr	r3, [pc, #276]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	607b      	str	r3, [r7, #4]
 8002b00:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	4a40      	ldr	r2, [pc, #256]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	6313      	str	r3, [r2, #48]	; 0x30
 8002b12:	4b3e      	ldr	r3, [pc, #248]	; (8002c0c <MX_GPIO_Init+0x190>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	603b      	str	r3, [r7, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2110      	movs	r1, #16
 8002b22:	483b      	ldr	r0, [pc, #236]	; (8002c10 <MX_GPIO_Init+0x194>)
 8002b24:	f001 fd04 	bl	8004530 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b2e:	4839      	ldr	r0, [pc, #228]	; (8002c14 <MX_GPIO_Init+0x198>)
 8002b30:	f001 fcfe 	bl	8004530 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 8002b34:	2200      	movs	r2, #0
 8002b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b3a:	4837      	ldr	r0, [pc, #220]	; (8002c18 <MX_GPIO_Init+0x19c>)
 8002b3c:	f001 fcf8 	bl	8004530 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8002b40:	2201      	movs	r2, #1
 8002b42:	2140      	movs	r1, #64	; 0x40
 8002b44:	4833      	ldr	r0, [pc, #204]	; (8002c14 <MX_GPIO_Init+0x198>)
 8002b46:	f001 fcf3 	bl	8004530 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : SD_NSS_Pin */
    GPIO_InitStruct.Pin = SD_NSS_Pin;
 8002b4a:	2310      	movs	r3, #16
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b56:	2300      	movs	r3, #0
 8002b58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	482b      	ldr	r0, [pc, #172]	; (8002c10 <MX_GPIO_Init+0x194>)
 8002b62:	f001 fb53 	bl	800420c <HAL_GPIO_Init>

    /*Configure GPIO pin : DEBUG_Pin */
    GPIO_InitStruct.Pin = DEBUG_Pin;
 8002b66:	2320      	movs	r3, #32
 8002b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DEBUG_GPIO_Port, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	4825      	ldr	r0, [pc, #148]	; (8002c10 <MX_GPIO_Init+0x194>)
 8002b7a:	f001 fb47 	bl	800420c <HAL_GPIO_Init>

    /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
    GPIO_InitStruct.Pin = SPI2_NSS_Pin | LORA_RESET_Pin;
 8002b7e:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8002b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b90:	f107 0314 	add.w	r3, r7, #20
 8002b94:	4619      	mov	r1, r3
 8002b96:	481f      	ldr	r0, [pc, #124]	; (8002c14 <MX_GPIO_Init+0x198>)
 8002b98:	f001 fb38 	bl	800420c <HAL_GPIO_Init>

    /*Configure GPIO pin : LORA_NSS_Pin */
    GPIO_InitStruct.Pin = LORA_NSS_Pin;
 8002b9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2300      	movs	r3, #0
 8002bac:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LORA_NSS_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4818      	ldr	r0, [pc, #96]	; (8002c18 <MX_GPIO_Init+0x19c>)
 8002bb6:	f001 fb29 	bl	800420c <HAL_GPIO_Init>

    /*Configure GPIO pin : LORA_DIO1_Pin */
    GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8002bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4810      	ldr	r0, [pc, #64]	; (8002c10 <MX_GPIO_Init+0x194>)
 8002bd0:	f001 fb1c 	bl	800420c <HAL_GPIO_Init>

    /*Configure GPIO pin : LORA_BUSY_Pin */
    GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <MX_GPIO_Init+0x1a0>)
 8002be8:	f001 fb10 	bl	800420c <HAL_GPIO_Init>

    /*Configure GPIO pin : SD_DETECT_Pin */
    GPIO_InitStruct.Pin = SD_DETECT_Pin;
 8002bec:	2310      	movs	r3, #16
 8002bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <MX_GPIO_Init+0x198>)
 8002c00:	f001 fb04 	bl	800420c <HAL_GPIO_Init>

}
 8002c04:	bf00      	nop
 8002c06:	3728      	adds	r7, #40	; 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020800 	.word	0x40020800
 8002c14:	40020400 	.word	0x40020400
 8002c18:	40020000 	.word	0x40020000
 8002c1c:	40020c00 	.word	0x40020c00

08002c20 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	80fb      	strh	r3, [r7, #6]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	80bb      	strh	r3, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8002c32:	4b37      	ldr	r3, [pc, #220]	; (8002d10 <playtone+0xf0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c38:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8002c3a:	4b35      	ldr	r3, [pc, #212]	; (8002d10 <playtone+0xf0>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c40:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <playtone+0xf0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c48:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8002c4a:	88fb      	ldrh	r3, [r7, #6]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f7fd fc89 	bl	8000564 <__aeabi_i2d>
 8002c52:	4603      	mov	r3, r0
 8002c54:	460c      	mov	r4, r1
 8002c56:	461a      	mov	r2, r3
 8002c58:	4623      	mov	r3, r4
 8002c5a:	a12b      	add	r1, pc, #172	; (adr r1, 8002d08 <playtone+0xe8>)
 8002c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c60:	f7fd fe14 	bl	800088c <__aeabi_ddiv>
 8002c64:	4603      	mov	r3, r0
 8002c66:	460c      	mov	r4, r1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	4621      	mov	r1, r4
 8002c6c:	f7fd ffbc 	bl	8000be8 <__aeabi_d2uiz>
 8002c70:	4603      	mov	r3, r0
 8002c72:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8002c74:	4b26      	ldr	r3, [pc, #152]	; (8002d10 <playtone+0xf0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8002c7c:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <playtone+0xf0>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8002c84:	78fb      	ldrb	r3, [r7, #3]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	fb02 f203 	mul.w	r2, r2, r3
 8002c8c:	4b20      	ldr	r3, [pc, #128]	; (8002d10 <playtone+0xf0>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4920      	ldr	r1, [pc, #128]	; (8002d14 <playtone+0xf4>)
 8002c92:	fba1 1202 	umull	r1, r2, r1, r2
 8002c96:	0992      	lsrs	r2, r2, #6
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8002c9a:	8afb      	ldrh	r3, [r7, #22]
 8002c9c:	68fa      	ldr	r2, [r7, #12]
 8002c9e:	fb02 f203 	mul.w	r2, r2, r3
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <playtone+0xf0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	0a12      	lsrs	r2, r2, #8
 8002ca8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8002caa:	8abb      	ldrh	r3, [r7, #20]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	fb02 f203 	mul.w	r2, r2, r3
 8002cb2:	4b17      	ldr	r3, [pc, #92]	; (8002d10 <playtone+0xf0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0a12      	lsrs	r2, r2, #8
 8002cb8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8002cba:	8a7b      	ldrh	r3, [r7, #18]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	fb02 f203 	mul.w	r2, r2, r3
 8002cc2:	4b13      	ldr	r3, [pc, #76]	; (8002d10 <playtone+0xf0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	0a12      	lsrs	r2, r2, #8
 8002cc8:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 8002cca:	88bb      	ldrh	r3, [r7, #4]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 ff27 	bl	8003b20 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8002cd2:	4b0f      	ldr	r3, [pc, #60]	; (8002d10 <playtone+0xf0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <playtone+0xf0>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	22ff      	movs	r2, #255	; 0xff
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8002ce2:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <playtone+0xf0>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	8afa      	ldrh	r2, [r7, #22]
 8002ce8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8002cea:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <playtone+0xf0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	8aba      	ldrh	r2, [r7, #20]
 8002cf0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <playtone+0xf0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	8a7a      	ldrh	r2, [r7, #18]
 8002cf8:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002cfa:	bf00      	nop
 8002cfc:	371c      	adds	r7, #28
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}
 8002d02:	bf00      	nop
 8002d04:	f3af 8000 	nop.w
 8002d08:	00000000 	.word	0x00000000
 8002d0c:	412e8480 	.word	0x412e8480
 8002d10:	20004410 	.word	0x20004410
 8002d14:	51eb851f 	.word	0x51eb851f

08002d18 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 8002d18:	b590      	push	{r4, r7, lr}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
 8002d22:	460b      	mov	r3, r1
 8002d24:	80bb      	strh	r3, [r7, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8002d2a:	4b37      	ldr	r3, [pc, #220]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d30:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8002d32:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d38:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8002d3a:	4b33      	ldr	r3, [pc, #204]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fd fc0d 	bl	8000564 <__aeabi_i2d>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	460c      	mov	r4, r1
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4623      	mov	r3, r4
 8002d52:	a12b      	add	r1, pc, #172	; (adr r1, 8002e00 <playtoneRTOS+0xe8>)
 8002d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d58:	f7fd fd98 	bl	800088c <__aeabi_ddiv>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	460c      	mov	r4, r1
 8002d60:	4618      	mov	r0, r3
 8002d62:	4621      	mov	r1, r4
 8002d64:	f7fd ff40 	bl	8000be8 <__aeabi_d2uiz>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2200      	movs	r2, #0
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	fb02 f203 	mul.w	r2, r2, r3
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4920      	ldr	r1, [pc, #128]	; (8002e0c <playtoneRTOS+0xf4>)
 8002d8a:	fba1 1202 	umull	r1, r2, r1, r2
 8002d8e:	0992      	lsrs	r2, r2, #6
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8002d92:	8afb      	ldrh	r3, [r7, #22]
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	fb02 f203 	mul.w	r2, r2, r3
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <playtoneRTOS+0xf0>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	0a12      	lsrs	r2, r2, #8
 8002da0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8002da2:	8abb      	ldrh	r3, [r7, #20]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	fb02 f203 	mul.w	r2, r2, r3
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <playtoneRTOS+0xf0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	0a12      	lsrs	r2, r2, #8
 8002db0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 8002db2:	8a7b      	ldrh	r3, [r7, #18]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	fb02 f203 	mul.w	r2, r2, r3
 8002dba:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <playtoneRTOS+0xf0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0a12      	lsrs	r2, r2, #8
 8002dc0:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 8002dc2:	88bb      	ldrh	r3, [r7, #4]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f009 fe69 	bl	800ca9c <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 8002dca:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <playtoneRTOS+0xf0>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8002dd2:	4b0d      	ldr	r3, [pc, #52]	; (8002e08 <playtoneRTOS+0xf0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	22ff      	movs	r2, #255	; 0xff
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <playtoneRTOS+0xf0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	8afa      	ldrh	r2, [r7, #22]
 8002de0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8002de2:	4b09      	ldr	r3, [pc, #36]	; (8002e08 <playtoneRTOS+0xf0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	8aba      	ldrh	r2, [r7, #20]
 8002de8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8002dea:	4b07      	ldr	r3, [pc, #28]	; (8002e08 <playtoneRTOS+0xf0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	8a7a      	ldrh	r2, [r7, #18]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002df2:	bf00      	nop
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	f3af 8000 	nop.w
 8002e00:	00000000 	.word	0x00000000
 8002e04:	412e8480 	.word	0x412e8480
 8002e08:	20004410 	.word	0x20004410
 8002e0c:	51eb851f 	.word	0x51eb851f

08002e10 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	71bb      	strb	r3, [r7, #6]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <changeLed+0x38>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	79fa      	ldrb	r2, [r7, #7]
 8002e28:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <changeLed+0x38>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	79ba      	ldrb	r2, [r7, #6]
 8002e30:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8002e32:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <changeLed+0x38>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	797a      	ldrb	r2, [r7, #5]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40

}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20004410 	.word	0x20004410

08002e4c <StartLedTask>:
 * @brief  Function implementing the ledTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const *argument) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 8002e54:	f00a ffdc 	bl	800de10 <MX_USB_DEVICE_Init>
    /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        changeLed(0, 100, 0);
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2164      	movs	r1, #100	; 0x64
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f7ff ffd7 	bl	8002e10 <changeLed>
        osDelay(1000);
 8002e62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e66:	f009 fe19 	bl	800ca9c <osDelay>
        changeLed(0, 0, 100);
 8002e6a:	2264      	movs	r2, #100	; 0x64
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f7ff ffce 	bl	8002e10 <changeLed>
        osDelay(1000);
 8002e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e78:	f009 fe10 	bl	800ca9c <osDelay>
        changeLed(0, 100, 0);
 8002e7c:	e7ec      	b.n	8002e58 <StartLedTask+0xc>

08002e7e <StartMusicTask>:
 * @brief Function implementing the musicTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const *argument) {
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */
    for (;;) {
        playtoneRTOS(587, 100, 10);
 8002e86:	220a      	movs	r2, #10
 8002e88:	2164      	movs	r1, #100	; 0x64
 8002e8a:	f240 204b 	movw	r0, #587	; 0x24b
 8002e8e:	f7ff ff43 	bl	8002d18 <playtoneRTOS>
        osDelay(412);
 8002e92:	f44f 70ce 	mov.w	r0, #412	; 0x19c
 8002e96:	f009 fe01 	bl	800ca9c <osDelay>
        playtoneRTOS(932, 100, 10);
 8002e9a:	220a      	movs	r2, #10
 8002e9c:	2164      	movs	r1, #100	; 0x64
 8002e9e:	f44f 7069 	mov.w	r0, #932	; 0x3a4
 8002ea2:	f7ff ff39 	bl	8002d18 <playtoneRTOS>
        osDelay(412);
 8002ea6:	f44f 70ce 	mov.w	r0, #412	; 0x19c
 8002eaa:	f009 fdf7 	bl	800ca9c <osDelay>
        playtoneRTOS(587, 100, 10);
 8002eae:	e7ea      	b.n	8002e86 <StartMusicTask+0x8>

08002eb0 <startStateMachine>:
 * @brief Function implementing the stateMachineTas thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const *argument) {
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN startStateMachine */
    /* Infinite loop */
    for (;;) {

        osDelay(1);
 8002eb8:	2001      	movs	r0, #1
 8002eba:	f009 fdef 	bl	800ca9c <osDelay>
 8002ebe:	e7fb      	b.n	8002eb8 <startStateMachine+0x8>

08002ec0 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN Callback 0 */

    /* USER CODE END Callback 0 */
    if (htim->Instance == TIM1) {
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
        HAL_IncTick();
 8002ed2:	f000 fe05 	bl	8003ae0 <HAL_IncTick>
    }
    /* USER CODE BEGIN Callback 1 */

    /* USER CODE END Callback 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40010000 	.word	0x40010000

08002ee4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ee8:	b672      	cpsid	i
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8002eea:	e7fe      	b.n	8002eea <Error_Handler+0x6>

08002eec <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3304      	adds	r3, #4
 8002efc:	ed93 7a00 	vldr	s14, [r3]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	3308      	adds	r3, #8
 8002f04:	edd3 7a00 	vldr	s15, [r3]
 8002f08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	3308      	adds	r3, #8
 8002f10:	edd3 6a00 	vldr	s13, [r3]
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3304      	adds	r3, #4
 8002f18:	edd3 7a00 	vldr	s15, [r3]
 8002f1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	ed93 7a00 	vldr	s14, [r3]
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	edd3 6a00 	vldr	s13, [r3]
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3308      	adds	r3, #8
 8002f46:	edd3 7a00 	vldr	s15, [r3]
 8002f4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3304      	adds	r3, #4
 8002f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f56:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	ed93 7a00 	vldr	s14, [r3]
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	3304      	adds	r3, #4
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3304      	adds	r3, #4
 8002f70:	edd3 6a00 	vldr	s13, [r3]
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	edd3 7a00 	vldr	s15, [r3]
 8002f7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3308      	adds	r3, #8
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	edc3 7a00 	vstr	s15, [r3]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 8002f96:	b480      	push	{r7}
 8002f98:	b085      	sub	sp, #20
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	ed93 7a00 	vldr	s14, [r3]
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	edd3 7a00 	vldr	s15, [r3]
 8002fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	ed93 7a00 	vldr	s14, [r3]
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	3304      	adds	r3, #4
 8002fc4:	edd3 7a00 	vldr	s15, [r3]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3304      	adds	r3, #4
 8002fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd0:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	ed93 7a00 	vldr	s14, [r3]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	3308      	adds	r3, #8
 8002fe0:	edd3 7a00 	vldr	s15, [r3]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fec:	edc3 7a00 	vstr	s15, [r3]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	ed93 7a00 	vldr	s14, [r3]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	edd3 6a00 	vldr	s13, [r3]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003028:	ee37 7a27 	vadd.f32	s14, s14, s15
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3308      	adds	r3, #8
 8003030:	edd3 6a00 	vldr	s13, [r3]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	3308      	adds	r3, #8
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003040:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <orientation_init>:

void orientation_init(Orientation *ori) {
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4618      	mov	r0, r3
 800305e:	f7fe fbeb 	bl	8001838 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3370      	adds	r3, #112	; 0x70
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fbe6 	bl	8001838 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3360      	adds	r3, #96	; 0x60
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fbe1 	bl	8001838 <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800308c:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[0];
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[1];
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[2];
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689a      	ldr	r2, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[0];
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[1];
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[2];
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	645a      	str	r2, [r3, #68]	; 0x44
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	0000      	movs	r0, r0
 800310c:	0000      	movs	r0, r0
	...

08003110 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt) {
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b08f      	sub	sp, #60	; 0x3c
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	ed87 0a00 	vstr	s0, [r7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3348      	adds	r3, #72	; 0x48
 8003128:	461a      	mov	r2, r3
 800312a:	f7fe fddd 	bl	8001ce8 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f103 0048 	add.w	r0, r3, #72	; 0x48
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	3354      	adds	r3, #84	; 0x54
 8003138:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800313c:	4619      	mov	r1, r3
 800313e:	f7ff fed5 	bl	8002eec <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3310      	adds	r3, #16
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f7fe fcd8 	bl	8001b00 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	3310      	adds	r3, #16
 8003154:	f107 021c 	add.w	r2, r7, #28
 8003158:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800315c:	4618      	mov	r0, r3
 800315e:	f7fe fdc3 	bl	8001ce8 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4618      	mov	r0, r3
 8003166:	f7fd fa0f 	bl	8000588 <__aeabi_f2d>
 800316a:	a347      	add	r3, pc, #284	; (adr r3, 8003288 <orientation_update+0x178>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd fa62 	bl	8000638 <__aeabi_dmul>
 8003174:	4603      	mov	r3, r0
 8003176:	460c      	mov	r4, r1
 8003178:	4618      	mov	r0, r3
 800317a:	4621      	mov	r1, r4
 800317c:	f7fd fd54 	bl	8000c28 <__aeabi_d2f>
 8003180:	4603      	mov	r3, r0
 8003182:	61fb      	str	r3, [r7, #28]
    correctionBody[1] = correctionBody[1] * 0.1;
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd f9fe 	bl	8000588 <__aeabi_f2d>
 800318c:	a33e      	add	r3, pc, #248	; (adr r3, 8003288 <orientation_update+0x178>)
 800318e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003192:	f7fd fa51 	bl	8000638 <__aeabi_dmul>
 8003196:	4603      	mov	r3, r0
 8003198:	460c      	mov	r4, r1
 800319a:	4618      	mov	r0, r3
 800319c:	4621      	mov	r1, r4
 800319e:	f7fd fd43 	bl	8000c28 <__aeabi_d2f>
 80031a2:	4603      	mov	r3, r0
 80031a4:	623b      	str	r3, [r7, #32]
    correctionBody[2] = correctionBody[2] * 0.1;
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd f9ed 	bl	8000588 <__aeabi_f2d>
 80031ae:	a336      	add	r3, pc, #216	; (adr r3, 8003288 <orientation_update+0x178>)
 80031b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b4:	f7fd fa40 	bl	8000638 <__aeabi_dmul>
 80031b8:	4603      	mov	r3, r0
 80031ba:	460c      	mov	r4, r1
 80031bc:	4618      	mov	r0, r3
 80031be:	4621      	mov	r1, r4
 80031c0:	f7fd fd32 	bl	8000c28 <__aeabi_d2f>
 80031c4:	4603      	mov	r3, r0
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	333c      	adds	r3, #60	; 0x3c
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff ff15 	bl	8002ffc <vector_lenSquared>
 80031d2:	ee10 3a10 	vmov	r3, s0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7fd f9d6 	bl	8000588 <__aeabi_f2d>
 80031dc:	a32c      	add	r3, pc, #176	; (adr r3, 8003290 <orientation_update+0x180>)
 80031de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e2:	f7fd fb53 	bl	800088c <__aeabi_ddiv>
 80031e6:	4603      	mov	r3, r0
 80031e8:	460c      	mov	r4, r1
 80031ea:	4618      	mov	r0, r3
 80031ec:	4621      	mov	r1, r4
 80031ee:	f7fd fd1b 	bl	8000c28 <__aeabi_d2f>
 80031f2:	4603      	mov	r3, r0
 80031f4:	637b      	str	r3, [r7, #52]	; 0x34
    if (GsSquared > 0.81 && GsSquared < 1.21) {
 80031f6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031f8:	f7fd f9c6 	bl	8000588 <__aeabi_f2d>
 80031fc:	a326      	add	r3, pc, #152	; (adr r3, 8003298 <orientation_update+0x188>)
 80031fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003202:	f7fd fca9 	bl	8000b58 <__aeabi_dcmpgt>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <orientation_update+0x128>
 800320c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800320e:	f7fd f9bb 	bl	8000588 <__aeabi_f2d>
 8003212:	a323      	add	r3, pc, #140	; (adr r3, 80032a0 <orientation_update+0x190>)
 8003214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003218:	f7fd fc80 	bl	8000b1c <__aeabi_dcmplt>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <orientation_update+0x128>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800322e:	f107 031c 	add.w	r3, r7, #28
 8003232:	4619      	mov	r1, r3
 8003234:	f7ff feaf 	bl	8002f96 <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	3320      	adds	r3, #32
 8003242:	4619      	mov	r1, r3
 8003244:	ed97 0a00 	vldr	s0, [r7]
 8003248:	4610      	mov	r0, r2
 800324a:	f7fe fed5 	bl	8001ff8 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3320      	adds	r3, #32
 8003254:	f107 020c 	add.w	r2, r7, #12
 8003258:	4619      	mov	r1, r3
 800325a:	f7fe fc85 	bl	8001b68 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	f107 030c 	add.w	r3, r7, #12
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f7fe fb0a 	bl	8001880 <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3380      	adds	r3, #128	; 0x80
 8003272:	4619      	mov	r1, r3
 8003274:	4610      	mov	r0, r2
 8003276:	f7fe fb23 	bl	80018c0 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 800327a:	bf00      	nop
 800327c:	373c      	adds	r7, #60	; 0x3c
 800327e:	46bd      	mov	sp, r7
 8003280:	bd90      	pop	{r4, r7, pc}
 8003282:	bf00      	nop
 8003284:	f3af 8000 	nop.w
 8003288:	9999999a 	.word	0x9999999a
 800328c:	3fb99999 	.word	0x3fb99999
 8003290:	9339d914 	.word	0x9339d914
 8003294:	40580ae7 	.word	0x40580ae7
 8003298:	1eb851ec 	.word	0x1eb851ec
 800329c:	3fe9eb85 	.word	0x3fe9eb85
 80032a0:	f5c28f5c 	.word	0xf5c28f5c
 80032a4:	3ff35c28 	.word	0x3ff35c28

080032a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_MspInit+0x54>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a11      	ldr	r2, [pc, #68]	; (80032fc <HAL_MspInit+0x54>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b0f      	ldr	r3, [pc, #60]	; (80032fc <HAL_MspInit+0x54>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	607b      	str	r3, [r7, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <HAL_MspInit+0x54>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a0a      	ldr	r2, [pc, #40]	; (80032fc <HAL_MspInit+0x54>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <HAL_MspInit+0x54>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032e6:	2200      	movs	r2, #0
 80032e8:	210f      	movs	r1, #15
 80032ea:	f06f 0001 	mvn.w	r0, #1
 80032ee:	f000 ff63 	bl	80041b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	40023800 	.word	0x40023800

08003300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003308:	f107 0314 	add.w	r3, r7, #20
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	609a      	str	r2, [r3, #8]
 8003314:	60da      	str	r2, [r3, #12]
 8003316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a17      	ldr	r2, [pc, #92]	; (800337c <HAL_ADC_MspInit+0x7c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d127      	bne.n	8003372 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	4b16      	ldr	r3, [pc, #88]	; (8003380 <HAL_ADC_MspInit+0x80>)
 8003328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <HAL_ADC_MspInit+0x80>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	6453      	str	r3, [r2, #68]	; 0x44
 8003332:	4b13      	ldr	r3, [pc, #76]	; (8003380 <HAL_ADC_MspInit+0x80>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333a:	613b      	str	r3, [r7, #16]
 800333c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_ADC_MspInit+0x80>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	4a0e      	ldr	r2, [pc, #56]	; (8003380 <HAL_ADC_MspInit+0x80>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6313      	str	r3, [r2, #48]	; 0x30
 800334e:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <HAL_ADC_MspInit+0x80>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	f003 0304 	and.w	r3, r3, #4
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 800335a:	2304      	movs	r3, #4
 800335c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800335e:	2303      	movs	r3, #3
 8003360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8003366:	f107 0314 	add.w	r3, r7, #20
 800336a:	4619      	mov	r1, r3
 800336c:	4805      	ldr	r0, [pc, #20]	; (8003384 <HAL_ADC_MspInit+0x84>)
 800336e:	f000 ff4d 	bl	800420c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003372:	bf00      	nop
 8003374:	3728      	adds	r7, #40	; 0x28
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40012000 	.word	0x40012000
 8003380:	40023800 	.word	0x40023800
 8003384:	40020800 	.word	0x40020800

08003388 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a29      	ldr	r2, [pc, #164]	; (800344c <HAL_I2C_MspInit+0xc4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d14b      	bne.n	8003442 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	4a27      	ldr	r2, [pc, #156]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033b4:	f043 0304 	orr.w	r3, r3, #4
 80033b8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033be:	f003 0304 	and.w	r3, r3, #4
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b21      	ldr	r3, [pc, #132]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	4a20      	ldr	r2, [pc, #128]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033d0:	f043 0301 	orr.w	r3, r3, #1
 80033d4:	6313      	str	r3, [r2, #48]	; 0x30
 80033d6:	4b1e      	ldr	r3, [pc, #120]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80033e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033e8:	2312      	movs	r3, #18
 80033ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033ec:	2301      	movs	r3, #1
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033f0:	2303      	movs	r3, #3
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80033f4:	2304      	movs	r3, #4
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	4619      	mov	r1, r3
 80033fe:	4815      	ldr	r0, [pc, #84]	; (8003454 <HAL_I2C_MspInit+0xcc>)
 8003400:	f000 ff04 	bl	800420c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800340a:	2312      	movs	r3, #18
 800340c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003416:	2304      	movs	r3, #4
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	4619      	mov	r1, r3
 8003420:	480d      	ldr	r0, [pc, #52]	; (8003458 <HAL_I2C_MspInit+0xd0>)
 8003422:	f000 fef3 	bl	800420c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b09      	ldr	r3, [pc, #36]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	4a08      	ldr	r2, [pc, #32]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 8003430:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003434:	6413      	str	r3, [r2, #64]	; 0x40
 8003436:	4b06      	ldr	r3, [pc, #24]	; (8003450 <HAL_I2C_MspInit+0xc8>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	; 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40005c00 	.word	0x40005c00
 8003450:	40023800 	.word	0x40023800
 8003454:	40020800 	.word	0x40020800
 8003458:	40020000 	.word	0x40020000

0800345c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b08e      	sub	sp, #56	; 0x38
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a5b      	ldr	r2, [pc, #364]	; (80035e8 <HAL_SPI_MspInit+0x18c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d12c      	bne.n	80034d8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
 8003482:	4b5a      	ldr	r3, [pc, #360]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a59      	ldr	r2, [pc, #356]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003488:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003496:	623b      	str	r3, [r7, #32]
 8003498:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	4b53      	ldr	r3, [pc, #332]	; (80035ec <HAL_SPI_MspInit+0x190>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	4a52      	ldr	r2, [pc, #328]	; (80035ec <HAL_SPI_MspInit+0x190>)
 80034a4:	f043 0301 	orr.w	r3, r3, #1
 80034a8:	6313      	str	r3, [r2, #48]	; 0x30
 80034aa:	4b50      	ldr	r3, [pc, #320]	; (80035ec <HAL_SPI_MspInit+0x190>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	f003 0301 	and.w	r3, r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80034b6:	23e0      	movs	r3, #224	; 0xe0
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034ba:	2302      	movs	r3, #2
 80034bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c2:	2303      	movs	r3, #3
 80034c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80034c6:	2305      	movs	r3, #5
 80034c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80034ce:	4619      	mov	r1, r3
 80034d0:	4847      	ldr	r0, [pc, #284]	; (80035f0 <HAL_SPI_MspInit+0x194>)
 80034d2:	f000 fe9b 	bl	800420c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80034d6:	e082      	b.n	80035de <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a45      	ldr	r2, [pc, #276]	; (80035f4 <HAL_SPI_MspInit+0x198>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d12d      	bne.n	800353e <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_SPI_MspInit+0x190>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <HAL_SPI_MspInit+0x190>)
 80034ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
 80034f2:	4b3e      	ldr	r3, [pc, #248]	; (80035ec <HAL_SPI_MspInit+0x190>)
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034fa:	61bb      	str	r3, [r7, #24]
 80034fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
 8003502:	4b3a      	ldr	r3, [pc, #232]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	4a39      	ldr	r2, [pc, #228]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	6313      	str	r3, [r2, #48]	; 0x30
 800350e:	4b37      	ldr	r3, [pc, #220]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	617b      	str	r3, [r7, #20]
 8003518:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800351a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800351e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003528:	2303      	movs	r3, #3
 800352a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800352c:	2305      	movs	r3, #5
 800352e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003534:	4619      	mov	r1, r3
 8003536:	4830      	ldr	r0, [pc, #192]	; (80035f8 <HAL_SPI_MspInit+0x19c>)
 8003538:	f000 fe68 	bl	800420c <HAL_GPIO_Init>
}
 800353c:	e04f      	b.n	80035de <HAL_SPI_MspInit+0x182>
  else if(hspi->Instance==SPI3)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a2e      	ldr	r2, [pc, #184]	; (80035fc <HAL_SPI_MspInit+0x1a0>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d14a      	bne.n	80035de <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003548:	2300      	movs	r3, #0
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <HAL_SPI_MspInit+0x190>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a26      	ldr	r2, [pc, #152]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <HAL_SPI_MspInit+0x190>)
 800355a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003564:	2300      	movs	r3, #0
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	4b20      	ldr	r3, [pc, #128]	; (80035ec <HAL_SPI_MspInit+0x190>)
 800356a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356c:	4a1f      	ldr	r2, [pc, #124]	; (80035ec <HAL_SPI_MspInit+0x190>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	6313      	str	r3, [r2, #48]	; 0x30
 8003574:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003580:	2300      	movs	r3, #0
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	4a18      	ldr	r2, [pc, #96]	; (80035ec <HAL_SPI_MspInit+0x190>)
 800358a:	f043 0302 	orr.w	r3, r3, #2
 800358e:	6313      	str	r3, [r2, #48]	; 0x30
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <HAL_SPI_MspInit+0x190>)
 8003592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800359c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a2:	2302      	movs	r3, #2
 80035a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035aa:	2303      	movs	r3, #3
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035ae:	2306      	movs	r3, #6
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b6:	4619      	mov	r1, r3
 80035b8:	4811      	ldr	r0, [pc, #68]	; (8003600 <HAL_SPI_MspInit+0x1a4>)
 80035ba:	f000 fe27 	bl	800420c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80035be:	2320      	movs	r3, #32
 80035c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80035ce:	2306      	movs	r3, #6
 80035d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035d6:	4619      	mov	r1, r3
 80035d8:	4807      	ldr	r0, [pc, #28]	; (80035f8 <HAL_SPI_MspInit+0x19c>)
 80035da:	f000 fe17 	bl	800420c <HAL_GPIO_Init>
}
 80035de:	bf00      	nop
 80035e0:	3738      	adds	r7, #56	; 0x38
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40013000 	.word	0x40013000
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020000 	.word	0x40020000
 80035f4:	40003800 	.word	0x40003800
 80035f8:	40020400 	.word	0x40020400
 80035fc:	40003c00 	.word	0x40003c00
 8003600:	40020800 	.word	0x40020800

08003604 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d10d      	bne.n	8003632 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	4b09      	ldr	r3, [pc, #36]	; (8003640 <HAL_TIM_PWM_MspInit+0x3c>)
 800361c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361e:	4a08      	ldr	r2, [pc, #32]	; (8003640 <HAL_TIM_PWM_MspInit+0x3c>)
 8003620:	f043 0301 	orr.w	r3, r3, #1
 8003624:	6413      	str	r3, [r2, #64]	; 0x40
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_TIM_PWM_MspInit+0x3c>)
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003632:	bf00      	nop
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
 800363e:	bf00      	nop
 8003640:	40023800 	.word	0x40023800

08003644 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0b      	ldr	r2, [pc, #44]	; (8003680 <HAL_TIM_Base_MspInit+0x3c>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d10d      	bne.n	8003672 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <HAL_TIM_Base_MspInit+0x40>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <HAL_TIM_Base_MspInit+0x40>)
 8003660:	f043 0302 	orr.w	r3, r3, #2
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <HAL_TIM_Base_MspInit+0x40>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40000400 	.word	0x40000400
 8003684:	40023800 	.word	0x40023800

08003688 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003690:	f107 0314 	add.w	r3, r7, #20
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	605a      	str	r2, [r3, #4]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036a8:	d11e      	bne.n	80036e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
 80036ae:	4b31      	ldr	r3, [pc, #196]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	4a30      	ldr	r2, [pc, #192]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 80036b4:	f043 0301 	orr.w	r3, r3, #1
 80036b8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ba:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80036c6:	2309      	movs	r3, #9
 80036c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ca:	2302      	movs	r3, #2
 80036cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ce:	2300      	movs	r3, #0
 80036d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036d2:	2300      	movs	r3, #0
 80036d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80036d6:	2301      	movs	r3, #1
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f107 0314 	add.w	r3, r7, #20
 80036de:	4619      	mov	r1, r3
 80036e0:	4825      	ldr	r0, [pc, #148]	; (8003778 <HAL_TIM_MspPostInit+0xf0>)
 80036e2:	f000 fd93 	bl	800420c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036e6:	e041      	b.n	800376c <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a23      	ldr	r2, [pc, #140]	; (800377c <HAL_TIM_MspPostInit+0xf4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d13c      	bne.n	800376c <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b1f      	ldr	r3, [pc, #124]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 80036fc:	f043 0302 	orr.w	r3, r3, #2
 8003700:	6313      	str	r3, [r2, #48]	; 0x30
 8003702:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 8003704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a17      	ldr	r2, [pc, #92]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	6313      	str	r3, [r2, #48]	; 0x30
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_TIM_MspPostInit+0xec>)
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	f003 0304 	and.w	r3, r3, #4
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800372a:	2302      	movs	r3, #2
 800372c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800373a:	2302      	movs	r3, #2
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800373e:	f107 0314 	add.w	r3, r7, #20
 8003742:	4619      	mov	r1, r3
 8003744:	480e      	ldr	r0, [pc, #56]	; (8003780 <HAL_TIM_MspPostInit+0xf8>)
 8003746:	f000 fd61 	bl	800420c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 800374a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003750:	2302      	movs	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003758:	2300      	movs	r3, #0
 800375a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800375c:	2302      	movs	r3, #2
 800375e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003760:	f107 0314 	add.w	r3, r7, #20
 8003764:	4619      	mov	r1, r3
 8003766:	4807      	ldr	r0, [pc, #28]	; (8003784 <HAL_TIM_MspPostInit+0xfc>)
 8003768:	f000 fd50 	bl	800420c <HAL_GPIO_Init>
}
 800376c:	bf00      	nop
 800376e:	3728      	adds	r7, #40	; 0x28
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	40023800 	.word	0x40023800
 8003778:	40020000 	.word	0x40020000
 800377c:	40000400 	.word	0x40000400
 8003780:	40020400 	.word	0x40020400
 8003784:	40020800 	.word	0x40020800

08003788 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08c      	sub	sp, #48	; 0x30
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003790:	2300      	movs	r3, #0
 8003792:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8003794:	2300      	movs	r3, #0
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8003798:	2200      	movs	r2, #0
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	2019      	movs	r0, #25
 800379e:	f000 fd0b 	bl	80041b8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037a2:	2019      	movs	r0, #25
 80037a4:	f000 fd24 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80037a8:	2300      	movs	r3, #0
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_InitTick+0xa4>)
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	4a1e      	ldr	r2, [pc, #120]	; (800382c <HAL_InitTick+0xa4>)
 80037b2:	f043 0301 	orr.w	r3, r3, #1
 80037b6:	6453      	str	r3, [r2, #68]	; 0x44
 80037b8:	4b1c      	ldr	r3, [pc, #112]	; (800382c <HAL_InitTick+0xa4>)
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80037c4:	f107 0210 	add.w	r2, r7, #16
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4611      	mov	r1, r2
 80037ce:	4618      	mov	r0, r3
 80037d0:	f003 f9b4 	bl	8006b3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80037d4:	f003 f99e 	bl	8006b14 <HAL_RCC_GetPCLK2Freq>
 80037d8:	4603      	mov	r3, r0
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80037de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e0:	4a13      	ldr	r2, [pc, #76]	; (8003830 <HAL_InitTick+0xa8>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	0c9b      	lsrs	r3, r3, #18
 80037e8:	3b01      	subs	r3, #1
 80037ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80037ec:	4b11      	ldr	r3, [pc, #68]	; (8003834 <HAL_InitTick+0xac>)
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_InitTick+0xb0>)
 80037f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <HAL_InitTick+0xac>)
 80037f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80037f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80037fa:	4a0e      	ldr	r2, [pc, #56]	; (8003834 <HAL_InitTick+0xac>)
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <HAL_InitTick+0xac>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <HAL_InitTick+0xac>)
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800380c:	4809      	ldr	r0, [pc, #36]	; (8003834 <HAL_InitTick+0xac>)
 800380e:	f004 fcdf 	bl	80081d0 <HAL_TIM_Base_Init>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d104      	bne.n	8003822 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003818:	4806      	ldr	r0, [pc, #24]	; (8003834 <HAL_InitTick+0xac>)
 800381a:	f004 fd04 	bl	8008226 <HAL_TIM_Base_Start_IT>
 800381e:	4603      	mov	r3, r0
 8003820:	e000      	b.n	8003824 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
}
 8003824:	4618      	mov	r0, r3
 8003826:	3730      	adds	r7, #48	; 0x30
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40023800 	.word	0x40023800
 8003830:	431bde83 	.word	0x431bde83
 8003834:	20004590 	.word	0x20004590
 8003838:	40010000 	.word	0x40010000

0800383c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <NMI_Handler+0x4>

08003842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003846:	e7fe      	b.n	8003846 <HardFault_Handler+0x4>

08003848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003848:	b480      	push	{r7}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800384c:	e7fe      	b.n	800384c <MemManage_Handler+0x4>

0800384e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800384e:	b480      	push	{r7}
 8003850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003852:	e7fe      	b.n	8003852 <BusFault_Handler+0x4>

08003854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <UsageFault_Handler+0x4>

0800385a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800386e:	f004 fd67 	bl	8008340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20004590 	.word	0x20004590

0800387c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <OTG_FS_IRQHandler+0x10>)
 8003882:	f001 ff79 	bl	8005778 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20005f18 	.word	0x20005f18

08003890 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
	return 1;
 8003894:	2301      	movs	r3, #1
}
 8003896:	4618      	mov	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <_kill>:

int _kill(int pid, int sig)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80038aa:	f00b f843 	bl	800e934 <__errno>
 80038ae:	4602      	mov	r2, r0
 80038b0:	2316      	movs	r3, #22
 80038b2:	6013      	str	r3, [r2, #0]
	return -1;
 80038b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <_exit>:

void _exit (int status)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80038c8:	f04f 31ff 	mov.w	r1, #4294967295
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f7ff ffe7 	bl	80038a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80038d2:	e7fe      	b.n	80038d2 <_exit+0x12>

080038d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e00a      	b.n	80038fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038e6:	f3af 8000 	nop.w
 80038ea:	4601      	mov	r1, r0
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	60ba      	str	r2, [r7, #8]
 80038f2:	b2ca      	uxtb	r2, r1
 80038f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	3301      	adds	r3, #1
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	dbf0      	blt.n	80038e6 <_read+0x12>
	}

return len;
 8003904:	687b      	ldr	r3, [r7, #4]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
 800391e:	e009      	b.n	8003934 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	1c5a      	adds	r2, r3, #1
 8003924:	60ba      	str	r2, [r7, #8]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	3301      	adds	r3, #1
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	dbf1      	blt.n	8003920 <_write+0x12>
	}
	return len;
 800393c:	687b      	ldr	r3, [r7, #4]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3718      	adds	r7, #24
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <_close>:

int _close(int file)
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
	return -1;
 800394e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003952:	4618      	mov	r0, r3
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800395e:	b480      	push	{r7}
 8003960:	b083      	sub	sp, #12
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
 8003966:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800396e:	605a      	str	r2, [r3, #4]
	return 0;
 8003970:	2300      	movs	r3, #0
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <_isatty>:

int _isatty(int file)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
	return 1;
 8003986:	2301      	movs	r3, #1
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
	return 0;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3714      	adds	r7, #20
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
	...

080039b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039b8:	4a14      	ldr	r2, [pc, #80]	; (8003a0c <_sbrk+0x5c>)
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <_sbrk+0x60>)
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039c4:	4b13      	ldr	r3, [pc, #76]	; (8003a14 <_sbrk+0x64>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d102      	bne.n	80039d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <_sbrk+0x64>)
 80039ce:	4a12      	ldr	r2, [pc, #72]	; (8003a18 <_sbrk+0x68>)
 80039d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039d2:	4b10      	ldr	r3, [pc, #64]	; (8003a14 <_sbrk+0x64>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4413      	add	r3, r2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d207      	bcs.n	80039f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039e0:	f00a ffa8 	bl	800e934 <__errno>
 80039e4:	4602      	mov	r2, r0
 80039e6:	230c      	movs	r3, #12
 80039e8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80039ea:	f04f 33ff 	mov.w	r3, #4294967295
 80039ee:	e009      	b.n	8003a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <_sbrk+0x64>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <_sbrk+0x64>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4413      	add	r3, r2
 80039fe:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <_sbrk+0x64>)
 8003a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3718      	adds	r7, #24
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20020000 	.word	0x20020000
 8003a10:	00000400 	.word	0x00000400
 8003a14:	200005f8 	.word	0x200005f8
 8003a18:	20006328 	.word	0x20006328

08003a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a20:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <SystemInit+0x28>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a26:	4a07      	ldr	r2, [pc, #28]	; (8003a44 <SystemInit+0x28>)
 8003a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003a30:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <SystemInit+0x28>)
 8003a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a36:	609a      	str	r2, [r3, #8]
#endif
}
 8003a38:	bf00      	nop
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	e000ed00 	.word	0xe000ed00

08003a48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003a48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003a4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003a4e:	e003      	b.n	8003a58 <LoopCopyDataInit>

08003a50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003a52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003a54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003a56:	3104      	adds	r1, #4

08003a58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003a58:	480b      	ldr	r0, [pc, #44]	; (8003a88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003a5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003a5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003a60:	d3f6      	bcc.n	8003a50 <CopyDataInit>
  ldr  r2, =_sbss
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003a64:	e002      	b.n	8003a6c <LoopFillZerobss>

08003a66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003a66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003a68:	f842 3b04 	str.w	r3, [r2], #4

08003a6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003a6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003a70:	d3f9      	bcc.n	8003a66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003a72:	f7ff ffd3 	bl	8003a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a76:	f00a ff75 	bl	800e964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a7a:	f7fe fbcd 	bl	8002218 <main>
  bx  lr    
 8003a7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003a80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003a84:	08013c50 	.word	0x08013c50
  ldr  r0, =_sdata
 8003a88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003a8c:	20000388 	.word	0x20000388
  ldr  r2, =_sbss
 8003a90:	20000388 	.word	0x20000388
  ldr  r3, = _ebss
 8003a94:	20006324 	.word	0x20006324

08003a98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a98:	e7fe      	b.n	8003a98 <ADC_IRQHandler>
	...

08003a9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003aa0:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <HAL_Init+0x40>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0d      	ldr	r2, [pc, #52]	; (8003adc <HAL_Init+0x40>)
 8003aa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <HAL_Init+0x40>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <HAL_Init+0x40>)
 8003ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ab6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_Init+0x40>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a07      	ldr	r2, [pc, #28]	; (8003adc <HAL_Init+0x40>)
 8003abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ac2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac4:	2003      	movs	r0, #3
 8003ac6:	f000 fb6c 	bl	80041a2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7ff fe5c 	bl	8003788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad0:	f7ff fbea 	bl	80032a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	40023c00 	.word	0x40023c00

08003ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae4:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_IncTick+0x20>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_IncTick+0x24>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_IncTick+0x24>)
 8003af2:	6013      	str	r3, [r2, #0]
}
 8003af4:	bf00      	nop
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000008 	.word	0x20000008
 8003b04:	200045d0 	.word	0x200045d0

08003b08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b0c:	4b03      	ldr	r3, [pc, #12]	; (8003b1c <HAL_GetTick+0x14>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	200045d0 	.word	0x200045d0

08003b20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b28:	f7ff ffee 	bl	8003b08 <HAL_GetTick>
 8003b2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d005      	beq.n	8003b46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_Delay+0x40>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4413      	add	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b46:	bf00      	nop
 8003b48:	f7ff ffde 	bl	8003b08 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d8f7      	bhi.n	8003b48 <HAL_Delay+0x28>
  {
  }
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000008 	.word	0x20000008

08003b64 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e033      	b.n	8003be2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d109      	bne.n	8003b96 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fbbc 	bl	8003300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d118      	bne.n	8003bd4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003baa:	f023 0302 	bic.w	r3, r3, #2
 8003bae:	f043 0202 	orr.w	r2, r3, #2
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f94a 	bl	8003e50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f023 0303 	bic.w	r3, r3, #3
 8003bca:	f043 0201 	orr.w	r2, r3, #1
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	641a      	str	r2, [r3, #64]	; 0x40
 8003bd2:	e001      	b.n	8003bd8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
	...

08003bec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x1c>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e113      	b.n	8003e30 <HAL_ADC_ConfigChannel+0x244>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d925      	bls.n	8003c64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68d9      	ldr	r1, [r3, #12]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	461a      	mov	r2, r3
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3b1e      	subs	r3, #30
 8003c2e:	2207      	movs	r2, #7
 8003c30:	fa02 f303 	lsl.w	r3, r2, r3
 8003c34:	43da      	mvns	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	400a      	ands	r2, r1
 8003c3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68d9      	ldr	r1, [r3, #12]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	4618      	mov	r0, r3
 8003c50:	4603      	mov	r3, r0
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4403      	add	r3, r0
 8003c56:	3b1e      	subs	r3, #30
 8003c58:	409a      	lsls	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	60da      	str	r2, [r3, #12]
 8003c62:	e022      	b.n	8003caa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6919      	ldr	r1, [r3, #16]
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	461a      	mov	r2, r3
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	2207      	movs	r2, #7
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43da      	mvns	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	400a      	ands	r2, r1
 8003c86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6919      	ldr	r1, [r3, #16]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	4618      	mov	r0, r3
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4403      	add	r3, r0
 8003ca0:	409a      	lsls	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b06      	cmp	r3, #6
 8003cb0:	d824      	bhi.n	8003cfc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4413      	add	r3, r2
 8003cc2:	3b05      	subs	r3, #5
 8003cc4:	221f      	movs	r2, #31
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43da      	mvns	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	400a      	ands	r2, r1
 8003cd2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	3b05      	subs	r3, #5
 8003cee:	fa00 f203 	lsl.w	r2, r0, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	635a      	str	r2, [r3, #52]	; 0x34
 8003cfa:	e04c      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b0c      	cmp	r3, #12
 8003d02:	d824      	bhi.n	8003d4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	3b23      	subs	r3, #35	; 0x23
 8003d16:	221f      	movs	r2, #31
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	400a      	ands	r2, r1
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	4618      	mov	r0, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	009b      	lsls	r3, r3, #2
 8003d3c:	4413      	add	r3, r2
 8003d3e:	3b23      	subs	r3, #35	; 0x23
 8003d40:	fa00 f203 	lsl.w	r2, r0, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d4c:	e023      	b.n	8003d96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3b41      	subs	r3, #65	; 0x41
 8003d60:	221f      	movs	r2, #31
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43da      	mvns	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	400a      	ands	r2, r1
 8003d6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b41      	subs	r3, #65	; 0x41
 8003d8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d96:	4b29      	ldr	r3, [pc, #164]	; (8003e3c <HAL_ADC_ConfigChannel+0x250>)
 8003d98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a28      	ldr	r2, [pc, #160]	; (8003e40 <HAL_ADC_ConfigChannel+0x254>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10f      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x1d8>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b12      	cmp	r3, #18
 8003daa:	d10b      	bne.n	8003dc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a1d      	ldr	r2, [pc, #116]	; (8003e40 <HAL_ADC_ConfigChannel+0x254>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d12b      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x23a>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a1c      	ldr	r2, [pc, #112]	; (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d003      	beq.n	8003de0 <HAL_ADC_ConfigChannel+0x1f4>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b11      	cmp	r3, #17
 8003dde:	d122      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a11      	ldr	r2, [pc, #68]	; (8003e44 <HAL_ADC_ConfigChannel+0x258>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d111      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e02:	4b11      	ldr	r3, [pc, #68]	; (8003e48 <HAL_ADC_ConfigChannel+0x25c>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_ADC_ConfigChannel+0x260>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	0c9a      	lsrs	r2, r3, #18
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e18:	e002      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1f9      	bne.n	8003e1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr
 8003e3c:	40012300 	.word	0x40012300
 8003e40:	40012000 	.word	0x40012000
 8003e44:	10000012 	.word	0x10000012
 8003e48:	20000000 	.word	0x20000000
 8003e4c:	431bde83 	.word	0x431bde83

08003e50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e58:	4b79      	ldr	r3, [pc, #484]	; (8004040 <ADC_Init+0x1f0>)
 8003e5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	431a      	orrs	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003e84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	021a      	lsls	r2, r3, #8
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ea8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6859      	ldr	r1, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689a      	ldr	r2, [r3, #8]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003eca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6899      	ldr	r1, [r3, #8]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee2:	4a58      	ldr	r2, [pc, #352]	; (8004044 <ADC_Init+0x1f4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ef6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6899      	ldr	r1, [r3, #8]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6899      	ldr	r1, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	e00f      	b.n	8003f4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003f3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0202 	bic.w	r2, r2, #2
 8003f5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6899      	ldr	r1, [r3, #8]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	7e1b      	ldrb	r3, [r3, #24]
 8003f68:	005a      	lsls	r2, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01b      	beq.n	8003fb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003f9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6859      	ldr	r1, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	035a      	lsls	r2, r3, #13
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	e007      	b.n	8003fc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	051a      	lsls	r2, r3, #20
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ff8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6899      	ldr	r1, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004006:	025a      	lsls	r2, r3, #9
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	695b      	ldr	r3, [r3, #20]
 800402a:	029a      	lsls	r2, r3, #10
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	430a      	orrs	r2, r1
 8004032:	609a      	str	r2, [r3, #8]
}
 8004034:	bf00      	nop
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	40012300 	.word	0x40012300
 8004044:	0f000001 	.word	0x0f000001

08004048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407a:	4a04      	ldr	r2, [pc, #16]	; (800408c <__NVIC_SetPriorityGrouping+0x44>)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	60d3      	str	r3, [r2, #12]
}
 8004080:	bf00      	nop
 8004082:	3714      	adds	r7, #20
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	; (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4907      	ldr	r1, [pc, #28]	; (80040e4 <__NVIC_EnableIRQ+0x38>)
 80040c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	; (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	; (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	79fb      	ldrb	r3, [r7, #7]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	; 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f1c3 0307 	rsb	r3, r3, #7
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf28      	it	cs
 800415a:	2304      	movcs	r3, #4
 800415c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3304      	adds	r3, #4
 8004162:	2b06      	cmp	r3, #6
 8004164:	d902      	bls.n	800416c <NVIC_EncodePriority+0x30>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b03      	subs	r3, #3
 800416a:	e000      	b.n	800416e <NVIC_EncodePriority+0x32>
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	401a      	ands	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004184:	f04f 31ff 	mov.w	r1, #4294967295
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43d9      	mvns	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	4313      	orrs	r3, r2
         );
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	; 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b082      	sub	sp, #8
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff ff4c 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041ca:	f7ff ff61 	bl	8004090 <__NVIC_GetPriorityGrouping>
 80041ce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f7ff ffb1 	bl	800413c <NVIC_EncodePriority>
 80041da:	4602      	mov	r2, r0
 80041dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff ff80 	bl	80040e8 <__NVIC_SetPriority>
}
 80041e8:	bf00      	nop
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041fe:	4618      	mov	r0, r3
 8004200:	f7ff ff54 	bl	80040ac <__NVIC_EnableIRQ>
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800420c:	b480      	push	{r7}
 800420e:	b089      	sub	sp, #36	; 0x24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800421e:	2300      	movs	r3, #0
 8004220:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
 8004226:	e165      	b.n	80044f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004228:	2201      	movs	r2, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4013      	ands	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	429a      	cmp	r2, r3
 8004242:	f040 8154 	bne.w	80044ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d00b      	beq.n	8004266 <HAL_GPIO_Init+0x5a>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b02      	cmp	r3, #2
 8004254:	d007      	beq.n	8004266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800425a:	2b11      	cmp	r3, #17
 800425c:	d003      	beq.n	8004266 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	2b12      	cmp	r3, #18
 8004264:	d130      	bne.n	80042c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	2203      	movs	r2, #3
 8004272:	fa02 f303 	lsl.w	r3, r2, r3
 8004276:	43db      	mvns	r3, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4013      	ands	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	005b      	lsls	r3, r3, #1
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	4313      	orrs	r3, r2
 800428e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800429c:	2201      	movs	r2, #1
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	43db      	mvns	r3, r3
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	4013      	ands	r3, r2
 80042aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	091b      	lsrs	r3, r3, #4
 80042b2:	f003 0201 	and.w	r2, r3, #1
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4313      	orrs	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69ba      	ldr	r2, [r7, #24]
 80042c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2203      	movs	r2, #3
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	4013      	ands	r3, r2
 80042de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d003      	beq.n	8004308 <HAL_GPIO_Init+0xfc>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b12      	cmp	r3, #18
 8004306:	d123      	bne.n	8004350 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	08da      	lsrs	r2, r3, #3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3208      	adds	r2, #8
 8004310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004314:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	220f      	movs	r2, #15
 8004320:	fa02 f303 	lsl.w	r3, r2, r3
 8004324:	43db      	mvns	r3, r3
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	4013      	ands	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	fa02 f303 	lsl.w	r3, r2, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4313      	orrs	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	08da      	lsrs	r2, r3, #3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3208      	adds	r2, #8
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2203      	movs	r2, #3
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0203 	and.w	r2, r3, #3
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	fa02 f303 	lsl.w	r3, r2, r3
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	4313      	orrs	r3, r2
 800437c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800438c:	2b00      	cmp	r3, #0
 800438e:	f000 80ae 	beq.w	80044ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	4b5c      	ldr	r3, [pc, #368]	; (8004508 <HAL_GPIO_Init+0x2fc>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	4a5b      	ldr	r2, [pc, #364]	; (8004508 <HAL_GPIO_Init+0x2fc>)
 800439c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043a0:	6453      	str	r3, [r2, #68]	; 0x44
 80043a2:	4b59      	ldr	r3, [pc, #356]	; (8004508 <HAL_GPIO_Init+0x2fc>)
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043aa:	60fb      	str	r3, [r7, #12]
 80043ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043ae:	4a57      	ldr	r2, [pc, #348]	; (800450c <HAL_GPIO_Init+0x300>)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	089b      	lsrs	r3, r3, #2
 80043b4:	3302      	adds	r3, #2
 80043b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	f003 0303 	and.w	r3, r3, #3
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	220f      	movs	r2, #15
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4013      	ands	r3, r2
 80043d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <HAL_GPIO_Init+0x304>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d025      	beq.n	8004426 <HAL_GPIO_Init+0x21a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a4d      	ldr	r2, [pc, #308]	; (8004514 <HAL_GPIO_Init+0x308>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d01f      	beq.n	8004422 <HAL_GPIO_Init+0x216>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a4c      	ldr	r2, [pc, #304]	; (8004518 <HAL_GPIO_Init+0x30c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d019      	beq.n	800441e <HAL_GPIO_Init+0x212>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a4b      	ldr	r2, [pc, #300]	; (800451c <HAL_GPIO_Init+0x310>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d013      	beq.n	800441a <HAL_GPIO_Init+0x20e>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a4a      	ldr	r2, [pc, #296]	; (8004520 <HAL_GPIO_Init+0x314>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d00d      	beq.n	8004416 <HAL_GPIO_Init+0x20a>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a49      	ldr	r2, [pc, #292]	; (8004524 <HAL_GPIO_Init+0x318>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d007      	beq.n	8004412 <HAL_GPIO_Init+0x206>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a48      	ldr	r2, [pc, #288]	; (8004528 <HAL_GPIO_Init+0x31c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d101      	bne.n	800440e <HAL_GPIO_Init+0x202>
 800440a:	2306      	movs	r3, #6
 800440c:	e00c      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 800440e:	2307      	movs	r3, #7
 8004410:	e00a      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 8004412:	2305      	movs	r3, #5
 8004414:	e008      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 8004416:	2304      	movs	r3, #4
 8004418:	e006      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 800441a:	2303      	movs	r3, #3
 800441c:	e004      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 800441e:	2302      	movs	r3, #2
 8004420:	e002      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_GPIO_Init+0x21c>
 8004426:	2300      	movs	r3, #0
 8004428:	69fa      	ldr	r2, [r7, #28]
 800442a:	f002 0203 	and.w	r2, r2, #3
 800442e:	0092      	lsls	r2, r2, #2
 8004430:	4093      	lsls	r3, r2
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004438:	4934      	ldr	r1, [pc, #208]	; (800450c <HAL_GPIO_Init+0x300>)
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	089b      	lsrs	r3, r3, #2
 800443e:	3302      	adds	r3, #2
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004446:	4b39      	ldr	r3, [pc, #228]	; (800452c <HAL_GPIO_Init+0x320>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	43db      	mvns	r3, r3
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	4013      	ands	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d003      	beq.n	800446a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800446a:	4a30      	ldr	r2, [pc, #192]	; (800452c <HAL_GPIO_Init+0x320>)
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004470:	4b2e      	ldr	r3, [pc, #184]	; (800452c <HAL_GPIO_Init+0x320>)
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	43db      	mvns	r3, r3
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	4013      	ands	r3, r2
 800447e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	4313      	orrs	r3, r2
 8004492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004494:	4a25      	ldr	r2, [pc, #148]	; (800452c <HAL_GPIO_Init+0x320>)
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800449a:	4b24      	ldr	r3, [pc, #144]	; (800452c <HAL_GPIO_Init+0x320>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044be:	4a1b      	ldr	r2, [pc, #108]	; (800452c <HAL_GPIO_Init+0x320>)
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044c4:	4b19      	ldr	r3, [pc, #100]	; (800452c <HAL_GPIO_Init+0x320>)
 80044c6:	68db      	ldr	r3, [r3, #12]
 80044c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044e8:	4a10      	ldr	r2, [pc, #64]	; (800452c <HAL_GPIO_Init+0x320>)
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	3301      	adds	r3, #1
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	2b0f      	cmp	r3, #15
 80044f8:	f67f ae96 	bls.w	8004228 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80044fc:	bf00      	nop
 80044fe:	3724      	adds	r7, #36	; 0x24
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	40023800 	.word	0x40023800
 800450c:	40013800 	.word	0x40013800
 8004510:	40020000 	.word	0x40020000
 8004514:	40020400 	.word	0x40020400
 8004518:	40020800 	.word	0x40020800
 800451c:	40020c00 	.word	0x40020c00
 8004520:	40021000 	.word	0x40021000
 8004524:	40021400 	.word	0x40021400
 8004528:	40021800 	.word	0x40021800
 800452c:	40013c00 	.word	0x40013c00

08004530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	807b      	strh	r3, [r7, #2]
 800453c:	4613      	mov	r3, r2
 800453e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004540:	787b      	ldrb	r3, [r7, #1]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004546:	887a      	ldrh	r2, [r7, #2]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800454c:	e003      	b.n	8004556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800454e:	887b      	ldrh	r3, [r7, #2]
 8004550:	041a      	lsls	r2, r3, #16
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	619a      	str	r2, [r3, #24]
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
	...

08004564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e11f      	b.n	80047b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d106      	bne.n	8004590 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fefc 	bl	8003388 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2224      	movs	r2, #36	; 0x24
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 0201 	bic.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045c8:	f002 fa90 	bl	8006aec <HAL_RCC_GetPCLK1Freq>
 80045cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4a7b      	ldr	r2, [pc, #492]	; (80047c0 <HAL_I2C_Init+0x25c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d807      	bhi.n	80045e8 <HAL_I2C_Init+0x84>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	4a7a      	ldr	r2, [pc, #488]	; (80047c4 <HAL_I2C_Init+0x260>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	bf94      	ite	ls
 80045e0:	2301      	movls	r3, #1
 80045e2:	2300      	movhi	r3, #0
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	e006      	b.n	80045f6 <HAL_I2C_Init+0x92>
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	4a77      	ldr	r2, [pc, #476]	; (80047c8 <HAL_I2C_Init+0x264>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	bf94      	ite	ls
 80045f0:	2301      	movls	r3, #1
 80045f2:	2300      	movhi	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e0db      	b.n	80047b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	4a72      	ldr	r2, [pc, #456]	; (80047cc <HAL_I2C_Init+0x268>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	0c9b      	lsrs	r3, r3, #18
 8004608:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	430a      	orrs	r2, r1
 800461c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a64      	ldr	r2, [pc, #400]	; (80047c0 <HAL_I2C_Init+0x25c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d802      	bhi.n	8004638 <HAL_I2C_Init+0xd4>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	3301      	adds	r3, #1
 8004636:	e009      	b.n	800464c <HAL_I2C_Init+0xe8>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	4a63      	ldr	r2, [pc, #396]	; (80047d0 <HAL_I2C_Init+0x26c>)
 8004644:	fba2 2303 	umull	r2, r3, r2, r3
 8004648:	099b      	lsrs	r3, r3, #6
 800464a:	3301      	adds	r3, #1
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	430b      	orrs	r3, r1
 8004652:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	69db      	ldr	r3, [r3, #28]
 800465a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800465e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	4956      	ldr	r1, [pc, #344]	; (80047c0 <HAL_I2C_Init+0x25c>)
 8004668:	428b      	cmp	r3, r1
 800466a:	d80d      	bhi.n	8004688 <HAL_I2C_Init+0x124>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	1e59      	subs	r1, r3, #1
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	fbb1 f3f3 	udiv	r3, r1, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	2b04      	cmp	r3, #4
 8004682:	bf38      	it	cc
 8004684:	2304      	movcc	r3, #4
 8004686:	e04f      	b.n	8004728 <HAL_I2C_Init+0x1c4>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d111      	bne.n	80046b4 <HAL_I2C_Init+0x150>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	1e58      	subs	r0, r3, #1
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	460b      	mov	r3, r1
 800469a:	005b      	lsls	r3, r3, #1
 800469c:	440b      	add	r3, r1
 800469e:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	e012      	b.n	80046da <HAL_I2C_Init+0x176>
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1e58      	subs	r0, r3, #1
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6859      	ldr	r1, [r3, #4]
 80046bc:	460b      	mov	r3, r1
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	0099      	lsls	r1, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ca:	3301      	adds	r3, #1
 80046cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf0c      	ite	eq
 80046d4:	2301      	moveq	r3, #1
 80046d6:	2300      	movne	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <HAL_I2C_Init+0x17e>
 80046de:	2301      	movs	r3, #1
 80046e0:	e022      	b.n	8004728 <HAL_I2C_Init+0x1c4>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d10e      	bne.n	8004708 <HAL_I2C_Init+0x1a4>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1e58      	subs	r0, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6859      	ldr	r1, [r3, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	440b      	add	r3, r1
 80046f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046fc:	3301      	adds	r3, #1
 80046fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	e00f      	b.n	8004728 <HAL_I2C_Init+0x1c4>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	1e58      	subs	r0, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6859      	ldr	r1, [r3, #4]
 8004710:	460b      	mov	r3, r1
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	0099      	lsls	r1, r3, #2
 8004718:	440b      	add	r3, r1
 800471a:	fbb0 f3f3 	udiv	r3, r0, r3
 800471e:	3301      	adds	r3, #1
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004728:	6879      	ldr	r1, [r7, #4]
 800472a:	6809      	ldr	r1, [r1, #0]
 800472c:	4313      	orrs	r3, r2
 800472e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	69da      	ldr	r2, [r3, #28]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	431a      	orrs	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004756:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6911      	ldr	r1, [r2, #16]
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	68d2      	ldr	r2, [r2, #12]
 8004762:	4311      	orrs	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	6812      	ldr	r2, [r2, #0]
 8004768:	430b      	orrs	r3, r1
 800476a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	695a      	ldr	r2, [r3, #20]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	431a      	orrs	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	430a      	orrs	r2, r1
 8004786:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2220      	movs	r2, #32
 80047a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	000186a0 	.word	0x000186a0
 80047c4:	001e847f 	.word	0x001e847f
 80047c8:	003d08ff 	.word	0x003d08ff
 80047cc:	431bde83 	.word	0x431bde83
 80047d0:	10624dd3 	.word	0x10624dd3

080047d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b088      	sub	sp, #32
 80047d8:	af02      	add	r7, sp, #8
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	461a      	mov	r2, r3
 80047e2:	4603      	mov	r3, r0
 80047e4:	817b      	strh	r3, [r7, #10]
 80047e6:	460b      	mov	r3, r1
 80047e8:	813b      	strh	r3, [r7, #8]
 80047ea:	4613      	mov	r3, r2
 80047ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047ee:	f7ff f98b 	bl	8003b08 <HAL_GetTick>
 80047f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	f040 80d9 	bne.w	80049b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	2319      	movs	r3, #25
 8004808:	2201      	movs	r2, #1
 800480a:	496d      	ldr	r1, [pc, #436]	; (80049c0 <HAL_I2C_Mem_Write+0x1ec>)
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f000 fc7f 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004818:	2302      	movs	r3, #2
 800481a:	e0cc      	b.n	80049b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004822:	2b01      	cmp	r3, #1
 8004824:	d101      	bne.n	800482a <HAL_I2C_Mem_Write+0x56>
 8004826:	2302      	movs	r3, #2
 8004828:	e0c5      	b.n	80049b6 <HAL_I2C_Mem_Write+0x1e2>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0301 	and.w	r3, r3, #1
 800483c:	2b01      	cmp	r3, #1
 800483e:	d007      	beq.n	8004850 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800485e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2221      	movs	r2, #33	; 0x21
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2240      	movs	r2, #64	; 0x40
 800486c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29a      	uxth	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a4d      	ldr	r2, [pc, #308]	; (80049c4 <HAL_I2C_Mem_Write+0x1f0>)
 8004890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004892:	88f8      	ldrh	r0, [r7, #6]
 8004894:	893a      	ldrh	r2, [r7, #8]
 8004896:	8979      	ldrh	r1, [r7, #10]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	9300      	str	r3, [sp, #0]
 80048a0:	4603      	mov	r3, r0
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fab6 	bl	8004e14 <I2C_RequestMemoryWrite>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d052      	beq.n	8004954 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e081      	b.n	80049b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 fd00 	bl	80052bc <I2C_WaitOnTXEFlagUntilTimeout>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00d      	beq.n	80048de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d107      	bne.n	80048da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e06b      	b.n	80049b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e2:	781a      	ldrb	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	1c5a      	adds	r2, r3, #1
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f8:	3b01      	subs	r3, #1
 80048fa:	b29a      	uxth	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29b      	uxth	r3, r3
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0304 	and.w	r3, r3, #4
 8004918:	2b04      	cmp	r3, #4
 800491a:	d11b      	bne.n	8004954 <HAL_I2C_Mem_Write+0x180>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004920:	2b00      	cmp	r3, #0
 8004922:	d017      	beq.n	8004954 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004928:	781a      	ldrb	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1aa      	bne.n	80048b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fcec 	bl	800533e <I2C_WaitOnBTFFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	2b04      	cmp	r3, #4
 8004972:	d107      	bne.n	8004984 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004982:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e016      	b.n	80049b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004996:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e000      	b.n	80049b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049b4:	2302      	movs	r3, #2
  }
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	00100002 	.word	0x00100002
 80049c4:	ffff0000 	.word	0xffff0000

080049c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b08c      	sub	sp, #48	; 0x30
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	4608      	mov	r0, r1
 80049d2:	4611      	mov	r1, r2
 80049d4:	461a      	mov	r2, r3
 80049d6:	4603      	mov	r3, r0
 80049d8:	817b      	strh	r3, [r7, #10]
 80049da:	460b      	mov	r3, r1
 80049dc:	813b      	strh	r3, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049e2:	f7ff f891 	bl	8003b08 <HAL_GetTick>
 80049e6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	f040 8208 	bne.w	8004e06 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	2319      	movs	r3, #25
 80049fc:	2201      	movs	r2, #1
 80049fe:	497b      	ldr	r1, [pc, #492]	; (8004bec <HAL_I2C_Mem_Read+0x224>)
 8004a00:	68f8      	ldr	r0, [r7, #12]
 8004a02:	f000 fb85 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e1fb      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_I2C_Mem_Read+0x56>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e1f4      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d007      	beq.n	8004a44 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2222      	movs	r2, #34	; 0x22
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2240      	movs	r2, #64	; 0x40
 8004a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a6e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	4a5b      	ldr	r2, [pc, #364]	; (8004bf0 <HAL_I2C_Mem_Read+0x228>)
 8004a84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a86:	88f8      	ldrh	r0, [r7, #6]
 8004a88:	893a      	ldrh	r2, [r7, #8]
 8004a8a:	8979      	ldrh	r1, [r7, #10]
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	9301      	str	r3, [sp, #4]
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	4603      	mov	r3, r0
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f000 fa52 	bl	8004f40 <I2C_RequestMemoryRead>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d001      	beq.n	8004aa6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e1b0      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d113      	bne.n	8004ad6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	623b      	str	r3, [r7, #32]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	623b      	str	r3, [r7, #32]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e184      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d11b      	bne.n	8004b16 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	61fb      	str	r3, [r7, #28]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	699b      	ldr	r3, [r3, #24]
 8004b00:	61fb      	str	r3, [r7, #28]
 8004b02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e164      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d11b      	bne.n	8004b56 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	61bb      	str	r3, [r7, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	61bb      	str	r3, [r7, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	61bb      	str	r3, [r7, #24]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	e144      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b56:	2300      	movs	r3, #0
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	617b      	str	r3, [r7, #20]
 8004b6a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b6c:	e138      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b72:	2b03      	cmp	r3, #3
 8004b74:	f200 80f1 	bhi.w	8004d5a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d123      	bne.n	8004bc8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 fc1b 	bl	80053c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d001      	beq.n	8004b94 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e139      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691a      	ldr	r2, [r3, #16]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	b29a      	uxth	r2, r3
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bc6:	e10b      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d14e      	bne.n	8004c6e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	4906      	ldr	r1, [pc, #24]	; (8004bf4 <HAL_I2C_Mem_Read+0x22c>)
 8004bda:	68f8      	ldr	r0, [r7, #12]
 8004bdc:	f000 fa98 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e10e      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
 8004bea:	bf00      	nop
 8004bec:	00100002 	.word	0x00100002
 8004bf0:	ffff0000 	.word	0xffff0000
 8004bf4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691a      	ldr	r2, [r3, #16]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	3b01      	subs	r3, #1
 8004c34:	b29a      	uxth	r2, r3
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c44:	b2d2      	uxtb	r2, r2
 8004c46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c56:	3b01      	subs	r3, #1
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	3b01      	subs	r3, #1
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c6c:	e0b8      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	2200      	movs	r2, #0
 8004c76:	4966      	ldr	r1, [pc, #408]	; (8004e10 <HAL_I2C_Mem_Read+0x448>)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fa49 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0bf      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca2:	b2d2      	uxtb	r2, r2
 8004ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004caa:	1c5a      	adds	r2, r3, #1
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	494f      	ldr	r1, [pc, #316]	; (8004e10 <HAL_I2C_Mem_Read+0x448>)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fa1b 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e091      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	691a      	ldr	r2, [r3, #16]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	b2d2      	uxtb	r2, r2
 8004d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	1c5a      	adds	r2, r3, #1
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	b29a      	uxth	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	691a      	ldr	r2, [r3, #16]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	b2d2      	uxtb	r2, r2
 8004d32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d58:	e042      	b.n	8004de0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d5c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fb2e 	bl	80053c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e04c      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d118      	bne.n	8004de0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	691a      	ldr	r2, [r3, #16]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc0:	1c5a      	adds	r2, r3, #1
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	b29a      	uxth	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	f47f aec2 	bne.w	8004b6e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2220      	movs	r2, #32
 8004dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	e000      	b.n	8004e08 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e06:	2302      	movs	r3, #2
  }
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3728      	adds	r7, #40	; 0x28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	00010004 	.word	0x00010004

08004e14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	4608      	mov	r0, r1
 8004e1e:	4611      	mov	r1, r2
 8004e20:	461a      	mov	r2, r3
 8004e22:	4603      	mov	r3, r0
 8004e24:	817b      	strh	r3, [r7, #10]
 8004e26:	460b      	mov	r3, r1
 8004e28:	813b      	strh	r3, [r7, #8]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f960 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e64:	d103      	bne.n	8004e6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e05f      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e72:	897b      	ldrh	r3, [r7, #10]
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	6a3a      	ldr	r2, [r7, #32]
 8004e86:	492d      	ldr	r1, [pc, #180]	; (8004f3c <I2C_RequestMemoryWrite+0x128>)
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f000 f998 	bl	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e04c      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	617b      	str	r3, [r7, #20]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	617b      	str	r3, [r7, #20]
 8004eac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb0:	6a39      	ldr	r1, [r7, #32]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fa02 	bl	80052bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	2b04      	cmp	r3, #4
 8004ec4:	d107      	bne.n	8004ed6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e02b      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004eda:	88fb      	ldrh	r3, [r7, #6]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee0:	893b      	ldrh	r3, [r7, #8]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]
 8004eea:	e021      	b.n	8004f30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004eec:	893b      	ldrh	r3, [r7, #8]
 8004eee:	0a1b      	lsrs	r3, r3, #8
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004efc:	6a39      	ldr	r1, [r7, #32]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f9dc 	bl	80052bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d107      	bne.n	8004f22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e005      	b.n	8004f32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f26:	893b      	ldrh	r3, [r7, #8]
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	00010002 	.word	0x00010002

08004f40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af02      	add	r7, sp, #8
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	4608      	mov	r0, r1
 8004f4a:	4611      	mov	r1, r2
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4603      	mov	r3, r0
 8004f50:	817b      	strh	r3, [r7, #10]
 8004f52:	460b      	mov	r3, r1
 8004f54:	813b      	strh	r3, [r7, #8]
 8004f56:	4613      	mov	r3, r2
 8004f58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f86:	68f8      	ldr	r0, [r7, #12]
 8004f88:	f000 f8c2 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00d      	beq.n	8004fae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa0:	d103      	bne.n	8004faa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e0aa      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fae:	897b      	ldrh	r3, [r7, #10]
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004fbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	6a3a      	ldr	r2, [r7, #32]
 8004fc2:	4952      	ldr	r1, [pc, #328]	; (800510c <I2C_RequestMemoryRead+0x1cc>)
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f000 f8fa 	bl	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d001      	beq.n	8004fd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e097      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	617b      	str	r3, [r7, #20]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	617b      	str	r3, [r7, #20]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fec:	6a39      	ldr	r1, [r7, #32]
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f000 f964 	bl	80052bc <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00d      	beq.n	8005016 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d107      	bne.n	8005012 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005010:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e076      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	2b01      	cmp	r3, #1
 800501a:	d105      	bne.n	8005028 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800501c:	893b      	ldrh	r3, [r7, #8]
 800501e:	b2da      	uxtb	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	611a      	str	r2, [r3, #16]
 8005026:	e021      	b.n	800506c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005028:	893b      	ldrh	r3, [r7, #8]
 800502a:	0a1b      	lsrs	r3, r3, #8
 800502c:	b29b      	uxth	r3, r3
 800502e:	b2da      	uxtb	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005038:	6a39      	ldr	r1, [r7, #32]
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f93e 	bl	80052bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00d      	beq.n	8005062 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	2b04      	cmp	r3, #4
 800504c:	d107      	bne.n	800505e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800505c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e050      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005062:	893b      	ldrh	r3, [r7, #8]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	6a39      	ldr	r1, [r7, #32]
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f000 f923 	bl	80052bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	2b04      	cmp	r3, #4
 8005082:	d107      	bne.n	8005094 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	e035      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80050b4:	68f8      	ldr	r0, [r7, #12]
 80050b6:	f000 f82b 	bl	8005110 <I2C_WaitOnFlagUntilTimeout>
 80050ba:	4603      	mov	r3, r0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00d      	beq.n	80050dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ce:	d103      	bne.n	80050d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e013      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050dc:	897b      	ldrh	r3, [r7, #10]
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ee:	6a3a      	ldr	r2, [r7, #32]
 80050f0:	4906      	ldr	r1, [pc, #24]	; (800510c <I2C_RequestMemoryRead+0x1cc>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f863 	bl	80051be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	00010002 	.word	0x00010002

08005110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	4613      	mov	r3, r2
 800511e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005120:	e025      	b.n	800516e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005128:	d021      	beq.n	800516e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512a:	f7fe fced 	bl	8003b08 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d302      	bcc.n	8005140 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d116      	bne.n	800516e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f043 0220 	orr.w	r2, r3, #32
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e023      	b.n	80051b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10d      	bne.n	8005194 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695b      	ldr	r3, [r3, #20]
 800517e:	43da      	mvns	r2, r3
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	4013      	ands	r3, r2
 8005184:	b29b      	uxth	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	461a      	mov	r2, r3
 8005192:	e00c      	b.n	80051ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	43da      	mvns	r2, r3
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	4013      	ands	r3, r2
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	461a      	mov	r2, r3
 80051ae:	79fb      	ldrb	r3, [r7, #7]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d0b6      	beq.n	8005122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b084      	sub	sp, #16
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80051cc:	e051      	b.n	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051dc:	d123      	bne.n	8005226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	f043 0204 	orr.w	r2, r3, #4
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e046      	b.n	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800522c:	d021      	beq.n	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800522e:	f7fe fc6b 	bl	8003b08 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	429a      	cmp	r2, r3
 800523c:	d302      	bcc.n	8005244 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d116      	bne.n	8005272 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f043 0220 	orr.w	r2, r3, #32
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800526e:	2301      	movs	r3, #1
 8005270:	e020      	b.n	80052b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	0c1b      	lsrs	r3, r3, #16
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b01      	cmp	r3, #1
 800527a:	d10c      	bne.n	8005296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	43da      	mvns	r2, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4013      	ands	r3, r2
 8005288:	b29b      	uxth	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	bf14      	ite	ne
 800528e:	2301      	movne	r3, #1
 8005290:	2300      	moveq	r3, #0
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e00b      	b.n	80052ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	43da      	mvns	r2, r3
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	4013      	ands	r3, r2
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	bf14      	ite	ne
 80052a8:	2301      	movne	r3, #1
 80052aa:	2300      	moveq	r3, #0
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d18d      	bne.n	80051ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c8:	e02d      	b.n	8005326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f000 f8ce 	bl	800546c <I2C_IsAcknowledgeFailed>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e02d      	b.n	8005336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d021      	beq.n	8005326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7fe fc11 	bl	8003b08 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d116      	bne.n	8005326 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2220      	movs	r2, #32
 8005302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e007      	b.n	8005336 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	695b      	ldr	r3, [r3, #20]
 800532c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d1ca      	bne.n	80052ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800534a:	e02d      	b.n	80053a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 f88d 	bl	800546c <I2C_IsAcknowledgeFailed>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d001      	beq.n	800535c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	e02d      	b.n	80053b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005362:	d021      	beq.n	80053a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005364:	f7fe fbd0 	bl	8003b08 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	429a      	cmp	r2, r3
 8005372:	d302      	bcc.n	800537a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d116      	bne.n	80053a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2220      	movs	r2, #32
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f043 0220 	orr.w	r2, r3, #32
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e007      	b.n	80053b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d1ca      	bne.n	800534c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053b6:	2300      	movs	r3, #0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80053cc:	e042      	b.n	8005454 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b10      	cmp	r3, #16
 80053da:	d119      	bne.n	8005410 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f06f 0210 	mvn.w	r2, #16
 80053e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e029      	b.n	8005464 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005410:	f7fe fb7a 	bl	8003b08 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	429a      	cmp	r2, r3
 800541e:	d302      	bcc.n	8005426 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d116      	bne.n	8005454 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2220      	movs	r2, #32
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005440:	f043 0220 	orr.w	r2, r3, #32
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e007      	b.n	8005464 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695b      	ldr	r3, [r3, #20]
 800545a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d1b5      	bne.n	80053ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d11b      	bne.n	80054bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800548c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	f043 0204 	orr.w	r2, r3, #4
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80054ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054cc:	b08f      	sub	sp, #60	; 0x3c
 80054ce:	af0a      	add	r7, sp, #40	; 0x28
 80054d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d101      	bne.n	80054dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e116      	b.n	800570a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f008 feb4 	bl	800e264 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2203      	movs	r2, #3
 8005500:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f003 fe73 	bl	8009206 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	603b      	str	r3, [r7, #0]
 8005526:	687e      	ldr	r6, [r7, #4]
 8005528:	466d      	mov	r5, sp
 800552a:	f106 0410 	add.w	r4, r6, #16
 800552e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005532:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005534:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005536:	e894 0003 	ldmia.w	r4, {r0, r1}
 800553a:	e885 0003 	stmia.w	r5, {r0, r1}
 800553e:	1d33      	adds	r3, r6, #4
 8005540:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005542:	6838      	ldr	r0, [r7, #0]
 8005544:	f003 fd4a 	bl	8008fdc <USB_CoreInit>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2202      	movs	r2, #2
 8005552:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e0d7      	b.n	800570a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	2100      	movs	r1, #0
 8005560:	4618      	mov	r0, r3
 8005562:	f003 fe61 	bl	8009228 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
 800556a:	e04a      	b.n	8005602 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800556c:	7bfa      	ldrb	r2, [r7, #15]
 800556e:	6879      	ldr	r1, [r7, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	00db      	lsls	r3, r3, #3
 8005574:	1a9b      	subs	r3, r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	440b      	add	r3, r1
 800557a:	333d      	adds	r3, #61	; 0x3d
 800557c:	2201      	movs	r2, #1
 800557e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005580:	7bfa      	ldrb	r2, [r7, #15]
 8005582:	6879      	ldr	r1, [r7, #4]
 8005584:	4613      	mov	r3, r2
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	440b      	add	r3, r1
 800558e:	333c      	adds	r3, #60	; 0x3c
 8005590:	7bfa      	ldrb	r2, [r7, #15]
 8005592:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005594:	7bfa      	ldrb	r2, [r7, #15]
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	b298      	uxth	r0, r3
 800559a:	6879      	ldr	r1, [r7, #4]
 800559c:	4613      	mov	r3, r2
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	440b      	add	r3, r1
 80055a6:	3342      	adds	r3, #66	; 0x42
 80055a8:	4602      	mov	r2, r0
 80055aa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80055ac:	7bfa      	ldrb	r2, [r7, #15]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	333f      	adds	r3, #63	; 0x3f
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80055c0:	7bfa      	ldrb	r2, [r7, #15]
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	1a9b      	subs	r3, r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	3344      	adds	r3, #68	; 0x44
 80055d0:	2200      	movs	r2, #0
 80055d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80055d4:	7bfa      	ldrb	r2, [r7, #15]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	3348      	adds	r3, #72	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80055e8:	7bfa      	ldrb	r2, [r7, #15]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	1a9b      	subs	r3, r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	3350      	adds	r3, #80	; 0x50
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
 80055fe:	3301      	adds	r3, #1
 8005600:	73fb      	strb	r3, [r7, #15]
 8005602:	7bfa      	ldrb	r2, [r7, #15]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d3af      	bcc.n	800556c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800560c:	2300      	movs	r3, #0
 800560e:	73fb      	strb	r3, [r7, #15]
 8005610:	e044      	b.n	800569c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005612:	7bfa      	ldrb	r2, [r7, #15]
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	1a9b      	subs	r3, r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	440b      	add	r3, r1
 8005620:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8005624:	2200      	movs	r2, #0
 8005626:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005628:	7bfa      	ldrb	r2, [r7, #15]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	00db      	lsls	r3, r3, #3
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800563a:	7bfa      	ldrb	r2, [r7, #15]
 800563c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800563e:	7bfa      	ldrb	r2, [r7, #15]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005654:	7bfa      	ldrb	r2, [r7, #15]
 8005656:	6879      	ldr	r1, [r7, #4]
 8005658:	4613      	mov	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	1a9b      	subs	r3, r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	440b      	add	r3, r1
 8005662:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005666:	2200      	movs	r2, #0
 8005668:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800566a:	7bfa      	ldrb	r2, [r7, #15]
 800566c:	6879      	ldr	r1, [r7, #4]
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	1a9b      	subs	r3, r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	440b      	add	r3, r1
 8005678:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800567c:	2200      	movs	r2, #0
 800567e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005680:	7bfa      	ldrb	r2, [r7, #15]
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	00db      	lsls	r3, r3, #3
 8005688:	1a9b      	subs	r3, r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005692:	2200      	movs	r2, #0
 8005694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005696:	7bfb      	ldrb	r3, [r7, #15]
 8005698:	3301      	adds	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d3b5      	bcc.n	8005612 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	687e      	ldr	r6, [r7, #4]
 80056ae:	466d      	mov	r5, sp
 80056b0:	f106 0410 	add.w	r4, r6, #16
 80056b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80056bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80056c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80056c4:	1d33      	adds	r3, r6, #4
 80056c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f003 fdd7 	bl	800927c <USB_DevInit>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d005      	beq.n	80056e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e014      	b.n	800570a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d102      	bne.n	80056fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f001 f891 	bl	8006820 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4618      	mov	r0, r3
 8005704:	f004 fe12 	bl	800a32c <USB_DevDisconnect>

  return HAL_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005712 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_PCD_Start+0x1c>
 800572a:	2302      	movs	r3, #2
 800572c:	e020      	b.n	8005770 <HAL_PCD_Start+0x5e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	2b01      	cmp	r3, #1
 800573c:	d109      	bne.n	8005752 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005742:	2b01      	cmp	r3, #1
 8005744:	d005      	beq.n	8005752 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800574a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f003 fd44 	bl	80091e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4618      	mov	r0, r3
 8005762:	f004 fdc2 	bl	800a2ea <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b08d      	sub	sp, #52	; 0x34
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f004 fe80 	bl	800a494 <USB_GetMode>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 83ca 	bne.w	8005f30 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f004 fde4 	bl	800a36e <USB_ReadInterrupts>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 83c0 	beq.w	8005f2e <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f004 fddb 	bl	800a36e <USB_ReadInterrupts>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d107      	bne.n	80057d2 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	695a      	ldr	r2, [r3, #20]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f002 0202 	and.w	r2, r2, #2
 80057d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f004 fdc9 	bl	800a36e <USB_ReadInterrupts>
 80057dc:	4603      	mov	r3, r0
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d161      	bne.n	80058aa <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	699a      	ldr	r2, [r3, #24]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f022 0210 	bic.w	r2, r2, #16
 80057f4:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	f003 020f 	and.w	r2, r3, #15
 8005802:	4613      	mov	r3, r2
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	4413      	add	r3, r2
 8005812:	3304      	adds	r3, #4
 8005814:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	0c5b      	lsrs	r3, r3, #17
 800581a:	f003 030f 	and.w	r3, r3, #15
 800581e:	2b02      	cmp	r3, #2
 8005820:	d124      	bne.n	800586c <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005828:	4013      	ands	r3, r2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d035      	beq.n	800589a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	091b      	lsrs	r3, r3, #4
 8005836:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005838:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800583c:	b29b      	uxth	r3, r3
 800583e:	461a      	mov	r2, r3
 8005840:	6a38      	ldr	r0, [r7, #32]
 8005842:	f004 fc2f 	bl	800a0a4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	091b      	lsrs	r3, r3, #4
 800584e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005852:	441a      	add	r2, r3
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	699a      	ldr	r2, [r3, #24]
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	091b      	lsrs	r3, r3, #4
 8005860:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005864:	441a      	add	r2, r3
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	619a      	str	r2, [r3, #24]
 800586a:	e016      	b.n	800589a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	0c5b      	lsrs	r3, r3, #17
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	2b06      	cmp	r3, #6
 8005876:	d110      	bne.n	800589a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800587e:	2208      	movs	r2, #8
 8005880:	4619      	mov	r1, r3
 8005882:	6a38      	ldr	r0, [r7, #32]
 8005884:	f004 fc0e 	bl	800a0a4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	699a      	ldr	r2, [r3, #24]
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	091b      	lsrs	r3, r3, #4
 8005890:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005894:	441a      	add	r2, r3
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699a      	ldr	r2, [r3, #24]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f042 0210 	orr.w	r2, r2, #16
 80058a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4618      	mov	r0, r3
 80058b0:	f004 fd5d 	bl	800a36e <USB_ReadInterrupts>
 80058b4:	4603      	mov	r3, r0
 80058b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80058be:	d16e      	bne.n	800599e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80058c0:	2300      	movs	r3, #0
 80058c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f004 fd63 	bl	800a394 <USB_ReadDevAllOutEpInterrupt>
 80058ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80058d0:	e062      	b.n	8005998 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d057      	beq.n	800598c <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	b2d2      	uxtb	r2, r2
 80058e4:	4611      	mov	r1, r2
 80058e6:	4618      	mov	r0, r3
 80058e8:	f004 fd88 	bl	800a3fc <USB_ReadDevOutEPInterrupt>
 80058ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d00c      	beq.n	8005912 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005904:	461a      	mov	r2, r3
 8005906:	2301      	movs	r3, #1
 8005908:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800590a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f000 fddd 	bl	80064cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f003 0308 	and.w	r3, r3, #8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00c      	beq.n	8005936 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005928:	461a      	mov	r2, r3
 800592a:	2308      	movs	r3, #8
 800592c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800592e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fed7 	bl	80066e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d008      	beq.n	8005952 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594c:	461a      	mov	r2, r3
 800594e:	2310      	movs	r3, #16
 8005950:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005968:	461a      	mov	r2, r3
 800596a:	2320      	movs	r3, #32
 800596c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005974:	2b00      	cmp	r3, #0
 8005976:	d009      	beq.n	800598c <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005984:	461a      	mov	r2, r3
 8005986:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800598a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	3301      	adds	r3, #1
 8005990:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	085b      	lsrs	r3, r3, #1
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	2b00      	cmp	r3, #0
 800599c:	d199      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f004 fce3 	bl	800a36e <USB_ReadInterrupts>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059b2:	f040 80c0 	bne.w	8005b36 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f004 fd04 	bl	800a3c8 <USB_ReadDevAllInEpInterrupt>
 80059c0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059c6:	e0b2      	b.n	8005b2e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80a7 	beq.w	8005b22 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	4611      	mov	r1, r2
 80059de:	4618      	mov	r0, r3
 80059e0:	f004 fd2a 	bl	800a438 <USB_ReadDevInEPInterrupt>
 80059e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	f003 0301 	and.w	r3, r3, #1
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d057      	beq.n	8005aa0 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	f003 030f 	and.w	r3, r3, #15
 80059f6:	2201      	movs	r2, #1
 80059f8:	fa02 f303 	lsl.w	r3, r2, r3
 80059fc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69f9      	ldr	r1, [r7, #28]
 8005a0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a10:	4013      	ands	r3, r2
 8005a12:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a20:	461a      	mov	r2, r3
 8005a22:	2301      	movs	r3, #1
 8005a24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d132      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a2e:	6879      	ldr	r1, [r7, #4]
 8005a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a32:	4613      	mov	r3, r2
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	3348      	adds	r3, #72	; 0x48
 8005a3e:	6819      	ldr	r1, [r3, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a44:	4613      	mov	r3, r2
 8005a46:	00db      	lsls	r3, r3, #3
 8005a48:	1a9b      	subs	r3, r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4403      	add	r3, r0
 8005a4e:	3344      	adds	r3, #68	; 0x44
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4419      	add	r1, r3
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	1a9b      	subs	r3, r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4403      	add	r3, r0
 8005a62:	3348      	adds	r3, #72	; 0x48
 8005a64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d113      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x31c>
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a70:	4613      	mov	r3, r2
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	440b      	add	r3, r1
 8005a7a:	3350      	adds	r3, #80	; 0x50
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d108      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2101      	movs	r1, #1
 8005a90:	f004 fd32 	bl	800a4f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f008 fc63 	bl	800e366 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	2308      	movs	r3, #8
 8005aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f003 0310 	and.w	r3, r3, #16
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	2310      	movs	r3, #16
 8005ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aee:	461a      	mov	r2, r3
 8005af0:	2340      	movs	r3, #64	; 0x40
 8005af2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b00:	015a      	lsls	r2, r3, #5
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	4413      	add	r3, r2
 8005b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0a:	461a      	mov	r2, r3
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fc48 	bl	80063b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	3301      	adds	r3, #1
 8005b26:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2a:	085b      	lsrs	r3, r3, #1
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f47f af49 	bne.w	80059c8 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f004 fc17 	bl	800a36e <USB_ReadInterrupts>
 8005b40:	4603      	mov	r3, r0
 8005b42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b4a:	d122      	bne.n	8005b92 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	69fa      	ldr	r2, [r7, #28]
 8005b56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b5a:	f023 0301 	bic.w	r3, r3, #1
 8005b5e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d108      	bne.n	8005b7c <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005b72:	2100      	movs	r1, #0
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f008 fe45 	bl	800e804 <HAL_PCDEx_LPM_Callback>
 8005b7a:	e002      	b.n	8005b82 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f008 fc69 	bl	800e454 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	695a      	ldr	r2, [r3, #20]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f004 fbe9 	bl	800a36e <USB_ReadInterrupts>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ba2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba6:	d112      	bne.n	8005bce <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f003 0301 	and.w	r3, r3, #1
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d102      	bne.n	8005bbe <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f008 fc25 	bl	800e408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bcc:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f004 fbcb 	bl	800a36e <USB_ReadInterrupts>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be2:	d121      	bne.n	8005c28 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005bf2:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d111      	bne.n	8005c22 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	089b      	lsrs	r3, r3, #2
 8005c0e:	f003 020f 	and.w	r2, r3, #15
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c18:	2101      	movs	r1, #1
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f008 fdf2 	bl	800e804 <HAL_PCDEx_LPM_Callback>
 8005c20:	e002      	b.n	8005c28 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f008 fbf0 	bl	800e408 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f004 fb9e 	bl	800a36e <USB_ReadInterrupts>
 8005c32:	4603      	mov	r3, r0
 8005c34:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	f040 80c7 	bne.w	8005dce <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2110      	movs	r1, #16
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 fc6c 	bl	8009538 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c64:	e056      	b.n	8005d14 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	461a      	mov	r2, r3
 8005c74:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c78:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	69fa      	ldr	r2, [r7, #28]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c98:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	69fb      	ldr	r3, [r7, #28]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005caa:	0151      	lsls	r1, r2, #5
 8005cac:	69fa      	ldr	r2, [r7, #28]
 8005cae:	440a      	add	r2, r1
 8005cb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cb4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cb8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	015a      	lsls	r2, r3, #5
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ccc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	69fb      	ldr	r3, [r7, #28]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cde:	0151      	lsls	r1, r2, #5
 8005ce0:	69fa      	ldr	r2, [r7, #28]
 8005ce2:	440a      	add	r2, r1
 8005ce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cfe:	0151      	lsls	r1, r2, #5
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	440a      	add	r2, r1
 8005d04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d08:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d0c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d10:	3301      	adds	r3, #1
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d3a3      	bcc.n	8005c66 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	69fa      	ldr	r2, [r7, #28]
 8005d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d30:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d016      	beq.n	8005d68 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d4a:	f043 030b 	orr.w	r3, r3, #11
 8005d4e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d5a:	69fa      	ldr	r2, [r7, #28]
 8005d5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d60:	f043 030b 	orr.w	r3, r3, #11
 8005d64:	6453      	str	r3, [r2, #68]	; 0x44
 8005d66:	e015      	b.n	8005d94 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	695b      	ldr	r3, [r3, #20]
 8005d70:	69fa      	ldr	r2, [r7, #28]
 8005d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d76:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005d7a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005d7e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	69fa      	ldr	r2, [r7, #28]
 8005d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8e:	f043 030b 	orr.w	r3, r3, #11
 8005d92:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005da2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005da6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005db8:	461a      	mov	r2, r3
 8005dba:	f004 fb9d 	bl	800a4f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	695a      	ldr	r2, [r3, #20]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005dcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f004 facb 	bl	800a36e <USB_ReadInterrupts>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de2:	d124      	bne.n	8005e2e <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f004 fb61 	bl	800a4b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f003 fc01 	bl	80095fa <USB_GetDevSpeed>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681c      	ldr	r4, [r3, #0]
 8005e04:	f000 fe66 	bl	8006ad4 <HAL_RCC_GetHCLKFreq>
 8005e08:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	4620      	mov	r0, r4
 8005e14:	f003 f944 	bl	80090a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f008 facc 	bl	800e3b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f004 fa9b 	bl	800a36e <USB_ReadInterrupts>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	f003 0308 	and.w	r3, r3, #8
 8005e3e:	2b08      	cmp	r3, #8
 8005e40:	d10a      	bne.n	8005e58 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f008 faa9 	bl	800e39a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	695a      	ldr	r2, [r3, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f002 0208 	and.w	r2, r2, #8
 8005e56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f004 fa86 	bl	800a36e <USB_ReadInterrupts>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e6c:	d10f      	bne.n	8005e8e <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f008 fb0b 	bl	800e494 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005e8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f004 fa6b 	bl	800a36e <USB_ReadInterrupts>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ea2:	d10f      	bne.n	8005ec4 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	4619      	mov	r1, r3
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f008 fade 	bl	800e470 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	695a      	ldr	r2, [r3, #20]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f004 fa50 	bl	800a36e <USB_ReadInterrupts>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed8:	d10a      	bne.n	8005ef0 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f008 faec 	bl	800e4b8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695a      	ldr	r2, [r3, #20]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f004 fa3a 	bl	800a36e <USB_ReadInterrupts>
 8005efa:	4603      	mov	r3, r0
 8005efc:	f003 0304 	and.w	r3, r3, #4
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d115      	bne.n	8005f30 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	f003 0304 	and.w	r3, r3, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f008 fadc 	bl	800e4d4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6859      	ldr	r1, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	430a      	orrs	r2, r1
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	e000      	b.n	8005f30 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8005f2e:	bf00      	nop
    }
  }
}
 8005f30:	3734      	adds	r7, #52	; 0x34
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd90      	pop	{r4, r7, pc}

08005f36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f36:	b580      	push	{r7, lr}
 8005f38:	b082      	sub	sp, #8
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
 8005f3e:	460b      	mov	r3, r1
 8005f40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d101      	bne.n	8005f50 <HAL_PCD_SetAddress+0x1a>
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	e013      	b.n	8005f78 <HAL_PCD_SetAddress+0x42>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	78fa      	ldrb	r2, [r7, #3]
 8005f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	78fa      	ldrb	r2, [r7, #3]
 8005f66:	4611      	mov	r1, r2
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f004 f998 	bl	800a29e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b084      	sub	sp, #16
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	4608      	mov	r0, r1
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	461a      	mov	r2, r3
 8005f8e:	4603      	mov	r3, r0
 8005f90:	70fb      	strb	r3, [r7, #3]
 8005f92:	460b      	mov	r3, r1
 8005f94:	803b      	strh	r3, [r7, #0]
 8005f96:	4613      	mov	r3, r2
 8005f98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	da0f      	bge.n	8005fc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fa6:	78fb      	ldrb	r3, [r7, #3]
 8005fa8:	f003 020f 	and.w	r2, r3, #15
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	1a9b      	subs	r3, r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	3338      	adds	r3, #56	; 0x38
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3304      	adds	r3, #4
 8005fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	705a      	strb	r2, [r3, #1]
 8005fc4:	e00f      	b.n	8005fe6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	f003 020f 	and.w	r2, r3, #15
 8005fcc:	4613      	mov	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	4413      	add	r3, r2
 8005fdc:	3304      	adds	r3, #4
 8005fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	f003 030f 	and.w	r3, r3, #15
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ff2:	883a      	ldrh	r2, [r7, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	78ba      	ldrb	r2, [r7, #2]
 8005ffc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d004      	beq.n	8006010 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	b29a      	uxth	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006010:	78bb      	ldrb	r3, [r7, #2]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d102      	bne.n	800601c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_PCD_EP_Open+0xaa>
 8006026:	2302      	movs	r3, #2
 8006028:	e00e      	b.n	8006048 <HAL_PCD_EP_Open+0xc8>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	68f9      	ldr	r1, [r7, #12]
 8006038:	4618      	mov	r0, r3
 800603a:	f003 fb03 	bl	8009644 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8006046:	7afb      	ldrb	r3, [r7, #11]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b084      	sub	sp, #16
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	460b      	mov	r3, r1
 800605a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800605c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006060:	2b00      	cmp	r3, #0
 8006062:	da0f      	bge.n	8006084 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006064:	78fb      	ldrb	r3, [r7, #3]
 8006066:	f003 020f 	and.w	r2, r3, #15
 800606a:	4613      	mov	r3, r2
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	3338      	adds	r3, #56	; 0x38
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	4413      	add	r3, r2
 8006078:	3304      	adds	r3, #4
 800607a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	705a      	strb	r2, [r3, #1]
 8006082:	e00f      	b.n	80060a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 020f 	and.w	r2, r3, #15
 800608a:	4613      	mov	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	1a9b      	subs	r3, r3, r2
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060a4:	78fb      	ldrb	r3, [r7, #3]
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_PCD_EP_Close+0x6e>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e00e      	b.n	80060dc <HAL_PCD_EP_Close+0x8c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f003 fb41 	bl	8009754 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3710      	adds	r7, #16
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	460b      	mov	r3, r1
 80060f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060f4:	7afb      	ldrb	r3, [r7, #11]
 80060f6:	f003 020f 	and.w	r2, r3, #15
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	1a9b      	subs	r3, r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	3304      	adds	r3, #4
 800610c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	683a      	ldr	r2, [r7, #0]
 8006118:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	2200      	movs	r2, #0
 800611e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	2200      	movs	r2, #0
 8006124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f003 030f 	and.w	r3, r3, #15
 800612c:	b2da      	uxtb	r2, r3
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b01      	cmp	r3, #1
 8006138:	d102      	bne.n	8006140 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	f003 fe1c 	bl	8009d94 <USB_EP0StartXfer>
 800615c:	e008      	b.n	8006170 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	b2db      	uxtb	r3, r3
 8006168:	461a      	mov	r2, r3
 800616a:	6979      	ldr	r1, [r7, #20]
 800616c:	f003 fbce 	bl	800990c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}

0800617a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
 8006182:	460b      	mov	r3, r1
 8006184:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006186:	78fb      	ldrb	r3, [r7, #3]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	00db      	lsls	r3, r3, #3
 8006192:	1a9b      	subs	r3, r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800619c:	681b      	ldr	r3, [r3, #0]
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b086      	sub	sp, #24
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	460b      	mov	r3, r1
 80061b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	f003 020f 	and.w	r2, r3, #15
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	1a9b      	subs	r3, r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	3338      	adds	r3, #56	; 0x38
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	4413      	add	r3, r2
 80061ce:	3304      	adds	r3, #4
 80061d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2200      	movs	r2, #0
 80061e2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	2201      	movs	r2, #1
 80061e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061ea:	7afb      	ldrb	r3, [r7, #11]
 80061ec:	f003 030f 	and.w	r3, r3, #15
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d102      	bne.n	8006204 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006204:	7afb      	ldrb	r3, [r7, #11]
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	2b00      	cmp	r3, #0
 800620c:	d109      	bne.n	8006222 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6818      	ldr	r0, [r3, #0]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	6979      	ldr	r1, [r7, #20]
 800621c:	f003 fdba 	bl	8009d94 <USB_EP0StartXfer>
 8006220:	e008      	b.n	8006234 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6818      	ldr	r0, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	6979      	ldr	r1, [r7, #20]
 8006230:	f003 fb6c 	bl	800990c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3718      	adds	r7, #24
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800623e:	b580      	push	{r7, lr}
 8006240:	b084      	sub	sp, #16
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
 8006246:	460b      	mov	r3, r1
 8006248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800624a:	78fb      	ldrb	r3, [r7, #3]
 800624c:	f003 020f 	and.w	r2, r3, #15
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d901      	bls.n	800625c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e050      	b.n	80062fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800625c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006260:	2b00      	cmp	r3, #0
 8006262:	da0f      	bge.n	8006284 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006264:	78fb      	ldrb	r3, [r7, #3]
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	4613      	mov	r3, r2
 800626c:	00db      	lsls	r3, r3, #3
 800626e:	1a9b      	subs	r3, r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	3338      	adds	r3, #56	; 0x38
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	4413      	add	r3, r2
 8006278:	3304      	adds	r3, #4
 800627a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2201      	movs	r2, #1
 8006280:	705a      	strb	r2, [r3, #1]
 8006282:	e00d      	b.n	80062a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006284:	78fa      	ldrb	r2, [r7, #3]
 8006286:	4613      	mov	r3, r2
 8006288:	00db      	lsls	r3, r3, #3
 800628a:	1a9b      	subs	r3, r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4413      	add	r3, r2
 8006296:	3304      	adds	r3, #4
 8006298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2201      	movs	r2, #1
 80062a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a6:	78fb      	ldrb	r3, [r7, #3]
 80062a8:	f003 030f 	and.w	r3, r3, #15
 80062ac:	b2da      	uxtb	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_PCD_EP_SetStall+0x82>
 80062bc:	2302      	movs	r3, #2
 80062be:	e01e      	b.n	80062fe <HAL_PCD_EP_SetStall+0xc0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68f9      	ldr	r1, [r7, #12]
 80062ce:	4618      	mov	r0, r3
 80062d0:	f003 ff11 	bl	800a0f6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	b2d9      	uxtb	r1, r3
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80062ee:	461a      	mov	r2, r3
 80062f0:	f004 f902 	bl	800a4f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	6078      	str	r0, [r7, #4]
 800630e:	460b      	mov	r3, r1
 8006310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	f003 020f 	and.w	r2, r3, #15
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	429a      	cmp	r2, r3
 800631e:	d901      	bls.n	8006324 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e042      	b.n	80063aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006328:	2b00      	cmp	r3, #0
 800632a:	da0f      	bge.n	800634c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800632c:	78fb      	ldrb	r3, [r7, #3]
 800632e:	f003 020f 	and.w	r2, r3, #15
 8006332:	4613      	mov	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	1a9b      	subs	r3, r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	3338      	adds	r3, #56	; 0x38
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	4413      	add	r3, r2
 8006340:	3304      	adds	r3, #4
 8006342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	705a      	strb	r2, [r3, #1]
 800634a:	e00f      	b.n	800636c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	1a9b      	subs	r3, r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	3304      	adds	r3, #4
 8006364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006372:	78fb      	ldrb	r3, [r7, #3]
 8006374:	f003 030f 	and.w	r3, r3, #15
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006384:	2b01      	cmp	r3, #1
 8006386:	d101      	bne.n	800638c <HAL_PCD_EP_ClrStall+0x86>
 8006388:	2302      	movs	r3, #2
 800638a:	e00e      	b.n	80063aa <HAL_PCD_EP_ClrStall+0xa4>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68f9      	ldr	r1, [r7, #12]
 800639a:	4618      	mov	r0, r3
 800639c:	f003 ff19 	bl	800a1d2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b08a      	sub	sp, #40	; 0x28
 80063b6:	af02      	add	r7, sp, #8
 80063b8:	6078      	str	r0, [r7, #4]
 80063ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	4613      	mov	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	1a9b      	subs	r3, r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	3338      	adds	r3, #56	; 0x38
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	4413      	add	r3, r2
 80063d6:	3304      	adds	r3, #4
 80063d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	699a      	ldr	r2, [r3, #24]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d901      	bls.n	80063ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e06c      	b.n	80064c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	69fa      	ldr	r2, [r7, #28]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d902      	bls.n	8006406 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3303      	adds	r3, #3
 800640a:	089b      	lsrs	r3, r3, #2
 800640c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800640e:	e02b      	b.n	8006468 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	695a      	ldr	r2, [r3, #20]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	429a      	cmp	r2, r3
 8006424:	d902      	bls.n	800642c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	3303      	adds	r3, #3
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	68d9      	ldr	r1, [r3, #12]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	b2da      	uxtb	r2, r3
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006444:	b2db      	uxtb	r3, r3
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	4603      	mov	r3, r0
 800644a:	6978      	ldr	r0, [r7, #20]
 800644c:	f003 fdf5 	bl	800a03a <USB_WritePacket>

    ep->xfer_buff  += len;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	68da      	ldr	r2, [r3, #12]
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	441a      	add	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	699a      	ldr	r2, [r3, #24]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	441a      	add	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	015a      	lsls	r2, r3, #5
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	4413      	add	r3, r2
 8006470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006474:	699b      	ldr	r3, [r3, #24]
 8006476:	b29b      	uxth	r3, r3
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	429a      	cmp	r2, r3
 800647c:	d809      	bhi.n	8006492 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	699a      	ldr	r2, [r3, #24]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006486:	429a      	cmp	r2, r3
 8006488:	d203      	bcs.n	8006492 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d1be      	bne.n	8006410 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	429a      	cmp	r2, r3
 800649c:	d811      	bhi.n	80064c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	f003 030f 	and.w	r3, r3, #15
 80064a4:	2201      	movs	r2, #1
 80064a6:	fa02 f303 	lsl.w	r3, r2, r3
 80064aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	43db      	mvns	r3, r3
 80064b8:	6939      	ldr	r1, [r7, #16]
 80064ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064be:	4013      	ands	r3, r2
 80064c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3720      	adds	r7, #32
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	333c      	adds	r3, #60	; 0x3c
 80064e4:	3304      	adds	r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	f040 80a0 	bne.w	8006644 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f003 0308 	and.w	r3, r3, #8
 800650a:	2b00      	cmp	r3, #0
 800650c:	d015      	beq.n	800653a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4a72      	ldr	r2, [pc, #456]	; (80066dc <PCD_EP_OutXfrComplete_int+0x210>)
 8006512:	4293      	cmp	r3, r2
 8006514:	f240 80dd 	bls.w	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 80d7 	beq.w	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	015a      	lsls	r2, r3, #5
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	4413      	add	r3, r2
 800652c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006530:	461a      	mov	r2, r3
 8006532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006536:	6093      	str	r3, [r2, #8]
 8006538:	e0cb      	b.n	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d009      	beq.n	8006558 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	461a      	mov	r2, r3
 8006552:	2320      	movs	r3, #32
 8006554:	6093      	str	r3, [r2, #8]
 8006556:	e0bc      	b.n	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800655e:	2b00      	cmp	r3, #0
 8006560:	f040 80b7 	bne.w	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4a5d      	ldr	r2, [pc, #372]	; (80066dc <PCD_EP_OutXfrComplete_int+0x210>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d90f      	bls.n	800658c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	015a      	lsls	r2, r3, #5
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	4413      	add	r3, r2
 800657e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006582:	461a      	mov	r2, r3
 8006584:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006588:	6093      	str	r3, [r2, #8]
 800658a:	e0a2      	b.n	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800658c:	6879      	ldr	r1, [r7, #4]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	4613      	mov	r3, r2
 8006592:	00db      	lsls	r3, r3, #3
 8006594:	1a9b      	subs	r3, r3, r2
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	440b      	add	r3, r1
 800659a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800659e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	0159      	lsls	r1, r3, #5
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	440b      	add	r3, r1
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80065b2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4613      	mov	r3, r2
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	1a9b      	subs	r3, r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4403      	add	r3, r0
 80065c2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80065c6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80065c8:	6879      	ldr	r1, [r7, #4]
 80065ca:	683a      	ldr	r2, [r7, #0]
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	1a9b      	subs	r3, r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80065da:	6819      	ldr	r1, [r3, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	683a      	ldr	r2, [r7, #0]
 80065e0:	4613      	mov	r3, r2
 80065e2:	00db      	lsls	r3, r3, #3
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4403      	add	r3, r0
 80065ea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4419      	add	r1, r3
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	683a      	ldr	r2, [r7, #0]
 80065f6:	4613      	mov	r3, r2
 80065f8:	00db      	lsls	r3, r3, #3
 80065fa:	1a9b      	subs	r3, r3, r2
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	4403      	add	r3, r0
 8006600:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006604:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d114      	bne.n	8006636 <PCD_EP_OutXfrComplete_int+0x16a>
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d108      	bne.n	8006636 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800662e:	461a      	mov	r2, r3
 8006630:	2101      	movs	r1, #1
 8006632:	f003 ff61 	bl	800a4f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	4619      	mov	r1, r3
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f007 fe77 	bl	800e330 <HAL_PCD_DataOutStageCallback>
 8006642:	e046      	b.n	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a26      	ldr	r2, [pc, #152]	; (80066e0 <PCD_EP_OutXfrComplete_int+0x214>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d124      	bne.n	8006696 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	015a      	lsls	r2, r3, #5
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	4413      	add	r3, r2
 800665e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006662:	461a      	mov	r2, r3
 8006664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006668:	6093      	str	r3, [r2, #8]
 800666a:	e032      	b.n	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d008      	beq.n	8006688 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006682:	461a      	mov	r2, r3
 8006684:	2320      	movs	r3, #32
 8006686:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	b2db      	uxtb	r3, r3
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f007 fe4e 	bl	800e330 <HAL_PCD_DataOutStageCallback>
 8006694:	e01d      	b.n	80066d2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d114      	bne.n	80066c6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800669c:	6879      	ldr	r1, [r7, #4]
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	4613      	mov	r3, r2
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	1a9b      	subs	r3, r3, r2
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	440b      	add	r3, r1
 80066aa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d108      	bne.n	80066c6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066be:	461a      	mov	r2, r3
 80066c0:	2100      	movs	r1, #0
 80066c2:	f003 ff19 	bl	800a4f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f007 fe2f 	bl	800e330 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80066d2:	2300      	movs	r3, #0
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	4f54300a 	.word	0x4f54300a
 80066e0:	4f54310a 	.word	0x4f54310a

080066e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	333c      	adds	r3, #60	; 0x3c
 80066fc:	3304      	adds	r3, #4
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a15      	ldr	r2, [pc, #84]	; (800676c <PCD_EP_OutSetupPacket_int+0x88>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d90e      	bls.n	8006738 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006720:	2b00      	cmp	r3, #0
 8006722:	d009      	beq.n	8006738 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	461a      	mov	r2, r3
 8006732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006736:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f007 fde7 	bl	800e30c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a0a      	ldr	r2, [pc, #40]	; (800676c <PCD_EP_OutSetupPacket_int+0x88>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d90c      	bls.n	8006760 <PCD_EP_OutSetupPacket_int+0x7c>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d108      	bne.n	8006760 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006758:	461a      	mov	r2, r3
 800675a:	2101      	movs	r1, #1
 800675c:	f003 fecc 	bl	800a4f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3718      	adds	r7, #24
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	4f54300a 	.word	0x4f54300a

08006770 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	460b      	mov	r3, r1
 800677a:	70fb      	strb	r3, [r7, #3]
 800677c:	4613      	mov	r3, r2
 800677e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006788:	78fb      	ldrb	r3, [r7, #3]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d107      	bne.n	800679e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800678e:	883b      	ldrh	r3, [r7, #0]
 8006790:	0419      	lsls	r1, r3, #16
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	430a      	orrs	r2, r1
 800679a:	629a      	str	r2, [r3, #40]	; 0x28
 800679c:	e028      	b.n	80067f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	4413      	add	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067ac:	2300      	movs	r3, #0
 80067ae:	73fb      	strb	r3, [r7, #15]
 80067b0:	e00d      	b.n	80067ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
 80067b8:	3340      	adds	r3, #64	; 0x40
 80067ba:	009b      	lsls	r3, r3, #2
 80067bc:	4413      	add	r3, r2
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	0c1b      	lsrs	r3, r3, #16
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	4413      	add	r3, r2
 80067c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067c8:	7bfb      	ldrb	r3, [r7, #15]
 80067ca:	3301      	adds	r3, #1
 80067cc:	73fb      	strb	r3, [r7, #15]
 80067ce:	7bfa      	ldrb	r2, [r7, #15]
 80067d0:	78fb      	ldrb	r3, [r7, #3]
 80067d2:	3b01      	subs	r3, #1
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d3ec      	bcc.n	80067b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80067d8:	883b      	ldrh	r3, [r7, #0]
 80067da:	0418      	lsls	r0, r3, #16
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6819      	ldr	r1, [r3, #0]
 80067e0:	78fb      	ldrb	r3, [r7, #3]
 80067e2:	3b01      	subs	r3, #1
 80067e4:	68ba      	ldr	r2, [r7, #8]
 80067e6:	4302      	orrs	r2, r0
 80067e8:	3340      	adds	r3, #64	; 0x40
 80067ea:	009b      	lsls	r3, r3, #2
 80067ec:	440b      	add	r3, r1
 80067ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	460b      	mov	r3, r1
 8006808:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	887a      	ldrh	r2, [r7, #2]
 8006810:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006820:	b480      	push	{r7}
 8006822:	b085      	sub	sp, #20
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800684e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006852:	f043 0303 	orr.w	r3, r3, #3
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800685a:	2300      	movs	r3, #0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3714      	adds	r7, #20
 8006860:	46bd      	mov	sp, r7
 8006862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006866:	4770      	bx	lr

08006868 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006872:	2300      	movs	r3, #0
 8006874:	603b      	str	r3, [r7, #0]
 8006876:	4b20      	ldr	r3, [pc, #128]	; (80068f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687a:	4a1f      	ldr	r2, [pc, #124]	; (80068f8 <HAL_PWREx_EnableOverDrive+0x90>)
 800687c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006880:	6413      	str	r3, [r2, #64]	; 0x40
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <HAL_PWREx_EnableOverDrive+0x90>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800688e:	4b1b      	ldr	r3, [pc, #108]	; (80068fc <HAL_PWREx_EnableOverDrive+0x94>)
 8006890:	2201      	movs	r2, #1
 8006892:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006894:	f7fd f938 	bl	8003b08 <HAL_GetTick>
 8006898:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800689a:	e009      	b.n	80068b0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800689c:	f7fd f934 	bl	8003b08 <HAL_GetTick>
 80068a0:	4602      	mov	r2, r0
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068aa:	d901      	bls.n	80068b0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e01f      	b.n	80068f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068b0:	4b13      	ldr	r3, [pc, #76]	; (8006900 <HAL_PWREx_EnableOverDrive+0x98>)
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068bc:	d1ee      	bne.n	800689c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068be:	4b11      	ldr	r3, [pc, #68]	; (8006904 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068c0:	2201      	movs	r2, #1
 80068c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068c4:	f7fd f920 	bl	8003b08 <HAL_GetTick>
 80068c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068ca:	e009      	b.n	80068e0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068cc:	f7fd f91c 	bl	8003b08 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068da:	d901      	bls.n	80068e0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e007      	b.n	80068f0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068e0:	4b07      	ldr	r3, [pc, #28]	; (8006900 <HAL_PWREx_EnableOverDrive+0x98>)
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068ec:	d1ee      	bne.n	80068cc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	40023800 	.word	0x40023800
 80068fc:	420e0040 	.word	0x420e0040
 8006900:	40007000 	.word	0x40007000
 8006904:	420e0044 	.word	0x420e0044

08006908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e0cc      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800691c:	4b68      	ldr	r3, [pc, #416]	; (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 030f 	and.w	r3, r3, #15
 8006924:	683a      	ldr	r2, [r7, #0]
 8006926:	429a      	cmp	r2, r3
 8006928:	d90c      	bls.n	8006944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800692a:	4b65      	ldr	r3, [pc, #404]	; (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	b2d2      	uxtb	r2, r2
 8006930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006932:	4b63      	ldr	r3, [pc, #396]	; (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 030f 	and.w	r3, r3, #15
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	429a      	cmp	r2, r3
 800693e:	d001      	beq.n	8006944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0b8      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d020      	beq.n	8006992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0304 	and.w	r3, r3, #4
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800695c:	4b59      	ldr	r3, [pc, #356]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	4a58      	ldr	r2, [pc, #352]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006974:	4b53      	ldr	r3, [pc, #332]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	4a52      	ldr	r2, [pc, #328]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800697e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006980:	4b50      	ldr	r3, [pc, #320]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	494d      	ldr	r1, [pc, #308]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800698e:	4313      	orrs	r3, r2
 8006990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d044      	beq.n	8006a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d107      	bne.n	80069b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069a6:	4b47      	ldr	r3, [pc, #284]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d119      	bne.n	80069e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e07f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d003      	beq.n	80069c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d107      	bne.n	80069d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c6:	4b3f      	ldr	r3, [pc, #252]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d109      	bne.n	80069e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e06f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069d6:	4b3b      	ldr	r3, [pc, #236]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f003 0302 	and.w	r3, r3, #2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e067      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80069e6:	4b37      	ldr	r3, [pc, #220]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 0203 	bic.w	r2, r3, #3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4934      	ldr	r1, [pc, #208]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80069f4:	4313      	orrs	r3, r2
 80069f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069f8:	f7fd f886 	bl	8003b08 <HAL_GetTick>
 80069fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069fe:	e00a      	b.n	8006a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a00:	f7fd f882 	bl	8003b08 <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d901      	bls.n	8006a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e04f      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a16:	4b2b      	ldr	r3, [pc, #172]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f003 020c 	and.w	r2, r3, #12
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d1eb      	bne.n	8006a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006a28:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d20c      	bcs.n	8006a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a36:	4b22      	ldr	r3, [pc, #136]	; (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a38:	683a      	ldr	r2, [r7, #0]
 8006a3a:	b2d2      	uxtb	r2, r2
 8006a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a3e:	4b20      	ldr	r3, [pc, #128]	; (8006ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 030f 	and.w	r3, r3, #15
 8006a46:	683a      	ldr	r2, [r7, #0]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d001      	beq.n	8006a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e032      	b.n	8006ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d008      	beq.n	8006a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a5c:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4916      	ldr	r1, [pc, #88]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0308 	and.w	r3, r3, #8
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d009      	beq.n	8006a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006a7a:	4b12      	ldr	r3, [pc, #72]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	490e      	ldr	r1, [pc, #56]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006a8e:	f000 fbb1 	bl	80071f4 <HAL_RCC_GetSysClockFreq>
 8006a92:	4601      	mov	r1, r0
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	091b      	lsrs	r3, r3, #4
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	4a0a      	ldr	r2, [pc, #40]	; (8006ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8006aa0:	5cd3      	ldrb	r3, [r2, r3]
 8006aa2:	fa21 f303 	lsr.w	r3, r1, r3
 8006aa6:	4a09      	ldr	r2, [pc, #36]	; (8006acc <HAL_RCC_ClockConfig+0x1c4>)
 8006aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f7fc fe6a 	bl	8003788 <HAL_InitTick>

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023c00 	.word	0x40023c00
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	08013700 	.word	0x08013700
 8006acc:	20000000 	.word	0x20000000
 8006ad0:	20000004 	.word	0x20000004

08006ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad8:	4b03      	ldr	r3, [pc, #12]	; (8006ae8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ada:	681b      	ldr	r3, [r3, #0]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	20000000 	.word	0x20000000

08006aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006af0:	f7ff fff0 	bl	8006ad4 <HAL_RCC_GetHCLKFreq>
 8006af4:	4601      	mov	r1, r0
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	0a9b      	lsrs	r3, r3, #10
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	4a03      	ldr	r2, [pc, #12]	; (8006b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b02:	5cd3      	ldrb	r3, [r2, r3]
 8006b04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	40023800 	.word	0x40023800
 8006b10:	08013710 	.word	0x08013710

08006b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b18:	f7ff ffdc 	bl	8006ad4 <HAL_RCC_GetHCLKFreq>
 8006b1c:	4601      	mov	r1, r0
 8006b1e:	4b05      	ldr	r3, [pc, #20]	; (8006b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	0b5b      	lsrs	r3, r3, #13
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	4a03      	ldr	r2, [pc, #12]	; (8006b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b2a:	5cd3      	ldrb	r3, [r2, r3]
 8006b2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	40023800 	.word	0x40023800
 8006b38:	08013710 	.word	0x08013710

08006b3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b083      	sub	sp, #12
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	220f      	movs	r2, #15
 8006b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006b4c:	4b12      	ldr	r3, [pc, #72]	; (8006b98 <HAL_RCC_GetClockConfig+0x5c>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0203 	and.w	r2, r3, #3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006b58:	4b0f      	ldr	r3, [pc, #60]	; (8006b98 <HAL_RCC_GetClockConfig+0x5c>)
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <HAL_RCC_GetClockConfig+0x5c>)
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006b70:	4b09      	ldr	r3, [pc, #36]	; (8006b98 <HAL_RCC_GetClockConfig+0x5c>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	08db      	lsrs	r3, r3, #3
 8006b76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006b7e:	4b07      	ldr	r3, [pc, #28]	; (8006b9c <HAL_RCC_GetClockConfig+0x60>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 020f 	and.w	r2, r3, #15
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	601a      	str	r2, [r3, #0]
}
 8006b8a:	bf00      	nop
 8006b8c:	370c      	adds	r7, #12
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40023c00 	.word	0x40023c00

08006ba0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08c      	sub	sp, #48	; 0x30
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8006bac:	2300      	movs	r3, #0
 8006bae:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d010      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006bd8:	4b6f      	ldr	r3, [pc, #444]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bde:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	496c      	ldr	r1, [pc, #432]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d010      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006c06:	4b64      	ldr	r3, [pc, #400]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c14:	4960      	ldr	r1, [pc, #384]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d101      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8006c24:	2301      	movs	r3, #1
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0304 	and.w	r3, r3, #4
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d017      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c34:	4b58      	ldr	r3, [pc, #352]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	4955      	ldr	r1, [pc, #340]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c52:	d101      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8006c54:	2301      	movs	r3, #1
 8006c56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d101      	bne.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 0308 	and.w	r3, r3, #8
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d017      	beq.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006c70:	4b49      	ldr	r3, [pc, #292]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7e:	4946      	ldr	r1, [pc, #280]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c8e:	d101      	bne.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006c90:	2301      	movs	r3, #1
 8006c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 808a 	beq.w	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb6:	4a38      	ldr	r2, [pc, #224]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006cbe:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006cca:	4b34      	ldr	r3, [pc, #208]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a33      	ldr	r2, [pc, #204]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cd4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006cd6:	f7fc ff17 	bl	8003b08 <HAL_GetTick>
 8006cda:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cdc:	e008      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006cde:	f7fc ff13 	bl	8003b08 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e278      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cf0:	4b2a      	ldr	r3, [pc, #168]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0f0      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cfc:	4b26      	ldr	r3, [pc, #152]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d04:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d02f      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d14:	6a3a      	ldr	r2, [r7, #32]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d028      	beq.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d1a:	4b1f      	ldr	r3, [pc, #124]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d22:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d24:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006d26:	2201      	movs	r2, #1
 8006d28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006d2a:	4b1d      	ldr	r3, [pc, #116]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006d30:	4a19      	ldr	r2, [pc, #100]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006d36:	4b18      	ldr	r3, [pc, #96]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d114      	bne.n	8006d6c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d42:	f7fc fee1 	bl	8003b08 <HAL_GetTick>
 8006d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d48:	e00a      	b.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d4a:	f7fc fedd 	bl	8003b08 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e240      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d60:	4b0d      	ldr	r3, [pc, #52]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	f003 0302 	and.w	r3, r3, #2
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d0ee      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d78:	d114      	bne.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8006d7a:	4b07      	ldr	r3, [pc, #28]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d8e:	4902      	ldr	r1, [pc, #8]	; (8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8006d90:	4313      	orrs	r3, r2
 8006d92:	608b      	str	r3, [r1, #8]
 8006d94:	e00c      	b.n	8006db0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8006d96:	bf00      	nop
 8006d98:	40023800 	.word	0x40023800
 8006d9c:	40007000 	.word	0x40007000
 8006da0:	42470e40 	.word	0x42470e40
 8006da4:	4b4a      	ldr	r3, [pc, #296]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4a49      	ldr	r2, [pc, #292]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006daa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006dae:	6093      	str	r3, [r2, #8]
 8006db0:	4b47      	ldr	r3, [pc, #284]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006db2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dbc:	4944      	ldr	r1, [pc, #272]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f003 0310 	and.w	r3, r3, #16
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d004      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8006dd4:	4b3f      	ldr	r3, [pc, #252]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8006dd6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00a      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006de4:	4b3a      	ldr	r3, [pc, #232]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006df2:	4937      	ldr	r1, [pc, #220]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006e06:	4b32      	ldr	r3, [pc, #200]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e0c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e14:	492e      	ldr	r1, [pc, #184]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e16:	4313      	orrs	r3, r2
 8006e18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d011      	beq.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e28:	4b29      	ldr	r3, [pc, #164]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e2e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e36:	4926      	ldr	r1, [pc, #152]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e46:	d101      	bne.n	8006e4c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d00a      	beq.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006e58:	4b1d      	ldr	r3, [pc, #116]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	491a      	ldr	r1, [pc, #104]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d011      	beq.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8006e7a:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e80:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e88:	4911      	ldr	r1, [pc, #68]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e98:	d101      	bne.n	8006e9e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d005      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eac:	f040 80ff 	bne.w	80070ae <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006eb0:	4b09      	ldr	r3, [pc, #36]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eb6:	f7fc fe27 	bl	8003b08 <HAL_GetTick>
 8006eba:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ebc:	e00e      	b.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006ebe:	f7fc fe23 	bl	8003b08 <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d907      	bls.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e188      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	424711e0 	.word	0x424711e0
 8006ed8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006edc:	4b7e      	ldr	r3, [pc, #504]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1ea      	bne.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d028      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d124      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006f10:	4b71      	ldr	r3, [pc, #452]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f16:	0c1b      	lsrs	r3, r3, #16
 8006f18:	f003 0303 	and.w	r3, r3, #3
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006f22:	4b6d      	ldr	r3, [pc, #436]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f28:	0e1b      	lsrs	r3, r3, #24
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	019b      	lsls	r3, r3, #6
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	3b01      	subs	r3, #1
 8006f42:	041b      	lsls	r3, r3, #16
 8006f44:	431a      	orrs	r2, r3
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	061b      	lsls	r3, r3, #24
 8006f4a:	431a      	orrs	r2, r3
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	071b      	lsls	r3, r3, #28
 8006f52:	4961      	ldr	r1, [pc, #388]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f003 0304 	and.w	r3, r3, #4
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d004      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f6e:	d00a      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d035      	beq.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f84:	d130      	bne.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006f86:	4b54      	ldr	r3, [pc, #336]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f8c:	0c1b      	lsrs	r3, r3, #16
 8006f8e:	f003 0303 	and.w	r3, r3, #3
 8006f92:	3301      	adds	r3, #1
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f98:	4b4f      	ldr	r3, [pc, #316]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f9e:	0f1b      	lsrs	r3, r3, #28
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	685a      	ldr	r2, [r3, #4]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	019b      	lsls	r3, r3, #6
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	041b      	lsls	r3, r3, #16
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	061b      	lsls	r3, r3, #24
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	071b      	lsls	r3, r3, #28
 8006fc8:	4943      	ldr	r1, [pc, #268]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006fd0:	4b41      	ldr	r3, [pc, #260]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd6:	f023 021f 	bic.w	r2, r3, #31
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	493d      	ldr	r1, [pc, #244]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d029      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ffc:	d124      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8006ffe:	4b36      	ldr	r3, [pc, #216]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007004:	0c1b      	lsrs	r3, r3, #16
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	3301      	adds	r3, #1
 800700c:	005b      	lsls	r3, r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007010:	4b31      	ldr	r3, [pc, #196]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007012:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007016:	0f1b      	lsrs	r3, r3, #28
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685a      	ldr	r2, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	019b      	lsls	r3, r3, #6
 8007028:	431a      	orrs	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	3b01      	subs	r3, #1
 8007032:	041b      	lsls	r3, r3, #16
 8007034:	431a      	orrs	r2, r3
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	061b      	lsls	r3, r3, #24
 800703a:	431a      	orrs	r2, r3
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	071b      	lsls	r3, r3, #28
 8007040:	4925      	ldr	r1, [pc, #148]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007042:	4313      	orrs	r3, r2
 8007044:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007050:	2b00      	cmp	r3, #0
 8007052:	d016      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	019b      	lsls	r3, r3, #6
 800705e:	431a      	orrs	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	68db      	ldr	r3, [r3, #12]
 8007064:	085b      	lsrs	r3, r3, #1
 8007066:	3b01      	subs	r3, #1
 8007068:	041b      	lsls	r3, r3, #16
 800706a:	431a      	orrs	r2, r3
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	061b      	lsls	r3, r3, #24
 8007072:	431a      	orrs	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	071b      	lsls	r3, r3, #28
 800707a:	4917      	ldr	r1, [pc, #92]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800707c:	4313      	orrs	r3, r2
 800707e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007082:	4b16      	ldr	r3, [pc, #88]	; (80070dc <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007088:	f7fc fd3e 	bl	8003b08 <HAL_GetTick>
 800708c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007090:	f7fc fd3a 	bl	8003b08 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e09f      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80070a2:	4b0d      	ldr	r3, [pc, #52]	; (80070d8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d0f0      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	f040 8095 	bne.w	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070b6:	4b0a      	ldr	r3, [pc, #40]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070bc:	f7fc fd24 	bl	8003b08 <HAL_GetTick>
 80070c0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070c2:	e00f      	b.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80070c4:	f7fc fd20 	bl	8003b08 <HAL_GetTick>
 80070c8:	4602      	mov	r2, r0
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	2b02      	cmp	r3, #2
 80070d0:	d908      	bls.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e085      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80070d6:	bf00      	nop
 80070d8:	40023800 	.word	0x40023800
 80070dc:	42470068 	.word	0x42470068
 80070e0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070e4:	4b41      	ldr	r3, [pc, #260]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80070f0:	d0e8      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	2b00      	cmp	r3, #0
 8007104:	d009      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800710e:	2b00      	cmp	r3, #0
 8007110:	d02b      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	d127      	bne.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800711a:	4b34      	ldr	r3, [pc, #208]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800711c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007120:	0c1b      	lsrs	r3, r3, #16
 8007122:	f003 0303 	and.w	r3, r3, #3
 8007126:	3301      	adds	r3, #1
 8007128:	005b      	lsls	r3, r3, #1
 800712a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	699a      	ldr	r2, [r3, #24]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	69db      	ldr	r3, [r3, #28]
 8007134:	019b      	lsls	r3, r3, #6
 8007136:	431a      	orrs	r2, r3
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	3b01      	subs	r3, #1
 800713e:	041b      	lsls	r3, r3, #16
 8007140:	431a      	orrs	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	4928      	ldr	r1, [pc, #160]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007150:	4b26      	ldr	r3, [pc, #152]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007156:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715e:	3b01      	subs	r3, #1
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	4922      	ldr	r1, [pc, #136]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007164:	4313      	orrs	r3, r2
 8007166:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d01d      	beq.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800717e:	d118      	bne.n	80071b2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007180:	4b1a      	ldr	r3, [pc, #104]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8007182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007186:	0e1b      	lsrs	r3, r3, #24
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699a      	ldr	r2, [r3, #24]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	019b      	lsls	r3, r3, #6
 8007198:	431a      	orrs	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	085b      	lsrs	r3, r3, #1
 80071a0:	3b01      	subs	r3, #1
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	431a      	orrs	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	061b      	lsls	r3, r3, #24
 80071aa:	4910      	ldr	r1, [pc, #64]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071ac:	4313      	orrs	r3, r2
 80071ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071b2:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071b8:	f7fc fca6 	bl	8003b08 <HAL_GetTick>
 80071bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071be:	e008      	b.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80071c0:	f7fc fca2 	bl	8003b08 <HAL_GetTick>
 80071c4:	4602      	mov	r2, r0
 80071c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c8:	1ad3      	subs	r3, r2, r3
 80071ca:	2b02      	cmp	r3, #2
 80071cc:	d901      	bls.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e007      	b.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071d2:	4b06      	ldr	r3, [pc, #24]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071de:	d1ef      	bne.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3730      	adds	r7, #48	; 0x30
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	40023800 	.word	0x40023800
 80071f0:	42470070 	.word	0x42470070

080071f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80071fe:	2300      	movs	r3, #0
 8007200:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800720e:	4bc6      	ldr	r3, [pc, #792]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 030c 	and.w	r3, r3, #12
 8007216:	2b0c      	cmp	r3, #12
 8007218:	f200 817e 	bhi.w	8007518 <HAL_RCC_GetSysClockFreq+0x324>
 800721c:	a201      	add	r2, pc, #4	; (adr r2, 8007224 <HAL_RCC_GetSysClockFreq+0x30>)
 800721e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007222:	bf00      	nop
 8007224:	08007259 	.word	0x08007259
 8007228:	08007519 	.word	0x08007519
 800722c:	08007519 	.word	0x08007519
 8007230:	08007519 	.word	0x08007519
 8007234:	0800725f 	.word	0x0800725f
 8007238:	08007519 	.word	0x08007519
 800723c:	08007519 	.word	0x08007519
 8007240:	08007519 	.word	0x08007519
 8007244:	08007265 	.word	0x08007265
 8007248:	08007519 	.word	0x08007519
 800724c:	08007519 	.word	0x08007519
 8007250:	08007519 	.word	0x08007519
 8007254:	080073c1 	.word	0x080073c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007258:	4bb4      	ldr	r3, [pc, #720]	; (800752c <HAL_RCC_GetSysClockFreq+0x338>)
 800725a:	613b      	str	r3, [r7, #16]
       break;
 800725c:	e15f      	b.n	800751e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800725e:	4bb4      	ldr	r3, [pc, #720]	; (8007530 <HAL_RCC_GetSysClockFreq+0x33c>)
 8007260:	613b      	str	r3, [r7, #16]
      break;
 8007262:	e15c      	b.n	800751e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007264:	4bb0      	ldr	r3, [pc, #704]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800726c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800726e:	4bae      	ldr	r3, [pc, #696]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04a      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800727a:	4bab      	ldr	r3, [pc, #684]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	099b      	lsrs	r3, r3, #6
 8007280:	f04f 0400 	mov.w	r4, #0
 8007284:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007288:	f04f 0200 	mov.w	r2, #0
 800728c:	ea03 0501 	and.w	r5, r3, r1
 8007290:	ea04 0602 	and.w	r6, r4, r2
 8007294:	4629      	mov	r1, r5
 8007296:	4632      	mov	r2, r6
 8007298:	f04f 0300 	mov.w	r3, #0
 800729c:	f04f 0400 	mov.w	r4, #0
 80072a0:	0154      	lsls	r4, r2, #5
 80072a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80072a6:	014b      	lsls	r3, r1, #5
 80072a8:	4619      	mov	r1, r3
 80072aa:	4622      	mov	r2, r4
 80072ac:	1b49      	subs	r1, r1, r5
 80072ae:	eb62 0206 	sbc.w	r2, r2, r6
 80072b2:	f04f 0300 	mov.w	r3, #0
 80072b6:	f04f 0400 	mov.w	r4, #0
 80072ba:	0194      	lsls	r4, r2, #6
 80072bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80072c0:	018b      	lsls	r3, r1, #6
 80072c2:	1a5b      	subs	r3, r3, r1
 80072c4:	eb64 0402 	sbc.w	r4, r4, r2
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	f04f 0200 	mov.w	r2, #0
 80072d0:	00e2      	lsls	r2, r4, #3
 80072d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80072d6:	00d9      	lsls	r1, r3, #3
 80072d8:	460b      	mov	r3, r1
 80072da:	4614      	mov	r4, r2
 80072dc:	195b      	adds	r3, r3, r5
 80072de:	eb44 0406 	adc.w	r4, r4, r6
 80072e2:	f04f 0100 	mov.w	r1, #0
 80072e6:	f04f 0200 	mov.w	r2, #0
 80072ea:	0262      	lsls	r2, r4, #9
 80072ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80072f0:	0259      	lsls	r1, r3, #9
 80072f2:	460b      	mov	r3, r1
 80072f4:	4614      	mov	r4, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	4621      	mov	r1, r4
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f04f 0400 	mov.w	r4, #0
 8007300:	461a      	mov	r2, r3
 8007302:	4623      	mov	r3, r4
 8007304:	f7f9 fce0 	bl	8000cc8 <__aeabi_uldivmod>
 8007308:	4603      	mov	r3, r0
 800730a:	460c      	mov	r4, r1
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e049      	b.n	80073a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007310:	4b85      	ldr	r3, [pc, #532]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	099b      	lsrs	r3, r3, #6
 8007316:	f04f 0400 	mov.w	r4, #0
 800731a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800731e:	f04f 0200 	mov.w	r2, #0
 8007322:	ea03 0501 	and.w	r5, r3, r1
 8007326:	ea04 0602 	and.w	r6, r4, r2
 800732a:	4629      	mov	r1, r5
 800732c:	4632      	mov	r2, r6
 800732e:	f04f 0300 	mov.w	r3, #0
 8007332:	f04f 0400 	mov.w	r4, #0
 8007336:	0154      	lsls	r4, r2, #5
 8007338:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800733c:	014b      	lsls	r3, r1, #5
 800733e:	4619      	mov	r1, r3
 8007340:	4622      	mov	r2, r4
 8007342:	1b49      	subs	r1, r1, r5
 8007344:	eb62 0206 	sbc.w	r2, r2, r6
 8007348:	f04f 0300 	mov.w	r3, #0
 800734c:	f04f 0400 	mov.w	r4, #0
 8007350:	0194      	lsls	r4, r2, #6
 8007352:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007356:	018b      	lsls	r3, r1, #6
 8007358:	1a5b      	subs	r3, r3, r1
 800735a:	eb64 0402 	sbc.w	r4, r4, r2
 800735e:	f04f 0100 	mov.w	r1, #0
 8007362:	f04f 0200 	mov.w	r2, #0
 8007366:	00e2      	lsls	r2, r4, #3
 8007368:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800736c:	00d9      	lsls	r1, r3, #3
 800736e:	460b      	mov	r3, r1
 8007370:	4614      	mov	r4, r2
 8007372:	195b      	adds	r3, r3, r5
 8007374:	eb44 0406 	adc.w	r4, r4, r6
 8007378:	f04f 0100 	mov.w	r1, #0
 800737c:	f04f 0200 	mov.w	r2, #0
 8007380:	02a2      	lsls	r2, r4, #10
 8007382:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007386:	0299      	lsls	r1, r3, #10
 8007388:	460b      	mov	r3, r1
 800738a:	4614      	mov	r4, r2
 800738c:	4618      	mov	r0, r3
 800738e:	4621      	mov	r1, r4
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f04f 0400 	mov.w	r4, #0
 8007396:	461a      	mov	r2, r3
 8007398:	4623      	mov	r3, r4
 800739a:	f7f9 fc95 	bl	8000cc8 <__aeabi_uldivmod>
 800739e:	4603      	mov	r3, r0
 80073a0:	460c      	mov	r4, r1
 80073a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80073a4:	4b60      	ldr	r3, [pc, #384]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	f003 0303 	and.w	r3, r3, #3
 80073ae:	3301      	adds	r3, #1
 80073b0:	005b      	lsls	r3, r3, #1
 80073b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073bc:	613b      	str	r3, [r7, #16]
      break;
 80073be:	e0ae      	b.n	800751e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073c0:	4b59      	ldr	r3, [pc, #356]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073ca:	4b57      	ldr	r3, [pc, #348]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d04a      	beq.n	800746c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073d6:	4b54      	ldr	r3, [pc, #336]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	099b      	lsrs	r3, r3, #6
 80073dc:	f04f 0400 	mov.w	r4, #0
 80073e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80073e4:	f04f 0200 	mov.w	r2, #0
 80073e8:	ea03 0501 	and.w	r5, r3, r1
 80073ec:	ea04 0602 	and.w	r6, r4, r2
 80073f0:	4629      	mov	r1, r5
 80073f2:	4632      	mov	r2, r6
 80073f4:	f04f 0300 	mov.w	r3, #0
 80073f8:	f04f 0400 	mov.w	r4, #0
 80073fc:	0154      	lsls	r4, r2, #5
 80073fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007402:	014b      	lsls	r3, r1, #5
 8007404:	4619      	mov	r1, r3
 8007406:	4622      	mov	r2, r4
 8007408:	1b49      	subs	r1, r1, r5
 800740a:	eb62 0206 	sbc.w	r2, r2, r6
 800740e:	f04f 0300 	mov.w	r3, #0
 8007412:	f04f 0400 	mov.w	r4, #0
 8007416:	0194      	lsls	r4, r2, #6
 8007418:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800741c:	018b      	lsls	r3, r1, #6
 800741e:	1a5b      	subs	r3, r3, r1
 8007420:	eb64 0402 	sbc.w	r4, r4, r2
 8007424:	f04f 0100 	mov.w	r1, #0
 8007428:	f04f 0200 	mov.w	r2, #0
 800742c:	00e2      	lsls	r2, r4, #3
 800742e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007432:	00d9      	lsls	r1, r3, #3
 8007434:	460b      	mov	r3, r1
 8007436:	4614      	mov	r4, r2
 8007438:	195b      	adds	r3, r3, r5
 800743a:	eb44 0406 	adc.w	r4, r4, r6
 800743e:	f04f 0100 	mov.w	r1, #0
 8007442:	f04f 0200 	mov.w	r2, #0
 8007446:	0262      	lsls	r2, r4, #9
 8007448:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800744c:	0259      	lsls	r1, r3, #9
 800744e:	460b      	mov	r3, r1
 8007450:	4614      	mov	r4, r2
 8007452:	4618      	mov	r0, r3
 8007454:	4621      	mov	r1, r4
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f04f 0400 	mov.w	r4, #0
 800745c:	461a      	mov	r2, r3
 800745e:	4623      	mov	r3, r4
 8007460:	f7f9 fc32 	bl	8000cc8 <__aeabi_uldivmod>
 8007464:	4603      	mov	r3, r0
 8007466:	460c      	mov	r4, r1
 8007468:	617b      	str	r3, [r7, #20]
 800746a:	e049      	b.n	8007500 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800746c:	4b2e      	ldr	r3, [pc, #184]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	099b      	lsrs	r3, r3, #6
 8007472:	f04f 0400 	mov.w	r4, #0
 8007476:	f240 11ff 	movw	r1, #511	; 0x1ff
 800747a:	f04f 0200 	mov.w	r2, #0
 800747e:	ea03 0501 	and.w	r5, r3, r1
 8007482:	ea04 0602 	and.w	r6, r4, r2
 8007486:	4629      	mov	r1, r5
 8007488:	4632      	mov	r2, r6
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	f04f 0400 	mov.w	r4, #0
 8007492:	0154      	lsls	r4, r2, #5
 8007494:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007498:	014b      	lsls	r3, r1, #5
 800749a:	4619      	mov	r1, r3
 800749c:	4622      	mov	r2, r4
 800749e:	1b49      	subs	r1, r1, r5
 80074a0:	eb62 0206 	sbc.w	r2, r2, r6
 80074a4:	f04f 0300 	mov.w	r3, #0
 80074a8:	f04f 0400 	mov.w	r4, #0
 80074ac:	0194      	lsls	r4, r2, #6
 80074ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80074b2:	018b      	lsls	r3, r1, #6
 80074b4:	1a5b      	subs	r3, r3, r1
 80074b6:	eb64 0402 	sbc.w	r4, r4, r2
 80074ba:	f04f 0100 	mov.w	r1, #0
 80074be:	f04f 0200 	mov.w	r2, #0
 80074c2:	00e2      	lsls	r2, r4, #3
 80074c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80074c8:	00d9      	lsls	r1, r3, #3
 80074ca:	460b      	mov	r3, r1
 80074cc:	4614      	mov	r4, r2
 80074ce:	195b      	adds	r3, r3, r5
 80074d0:	eb44 0406 	adc.w	r4, r4, r6
 80074d4:	f04f 0100 	mov.w	r1, #0
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	02a2      	lsls	r2, r4, #10
 80074de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80074e2:	0299      	lsls	r1, r3, #10
 80074e4:	460b      	mov	r3, r1
 80074e6:	4614      	mov	r4, r2
 80074e8:	4618      	mov	r0, r3
 80074ea:	4621      	mov	r1, r4
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f04f 0400 	mov.w	r4, #0
 80074f2:	461a      	mov	r2, r3
 80074f4:	4623      	mov	r3, r4
 80074f6:	f7f9 fbe7 	bl	8000cc8 <__aeabi_uldivmod>
 80074fa:	4603      	mov	r3, r0
 80074fc:	460c      	mov	r4, r1
 80074fe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8007500:	4b09      	ldr	r3, [pc, #36]	; (8007528 <HAL_RCC_GetSysClockFreq+0x334>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	0f1b      	lsrs	r3, r3, #28
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	fbb2 f3f3 	udiv	r3, r2, r3
 8007514:	613b      	str	r3, [r7, #16]
      break;
 8007516:	e002      	b.n	800751e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <HAL_RCC_GetSysClockFreq+0x338>)
 800751a:	613b      	str	r3, [r7, #16]
      break;
 800751c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800751e:	693b      	ldr	r3, [r7, #16]
}
 8007520:	4618      	mov	r0, r3
 8007522:	371c      	adds	r7, #28
 8007524:	46bd      	mov	sp, r7
 8007526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007528:	40023800 	.word	0x40023800
 800752c:	00f42400 	.word	0x00f42400
 8007530:	007a1200 	.word	0x007a1200

08007534 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800753c:	2300      	movs	r3, #0
 800753e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b00      	cmp	r3, #0
 800754a:	f000 8083 	beq.w	8007654 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800754e:	4b95      	ldr	r3, [pc, #596]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 030c 	and.w	r3, r3, #12
 8007556:	2b04      	cmp	r3, #4
 8007558:	d019      	beq.n	800758e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800755a:	4b92      	ldr	r3, [pc, #584]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007562:	2b08      	cmp	r3, #8
 8007564:	d106      	bne.n	8007574 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8007566:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800756e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007572:	d00c      	beq.n	800758e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007574:	4b8b      	ldr	r3, [pc, #556]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800757c:	2b0c      	cmp	r3, #12
 800757e:	d112      	bne.n	80075a6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007580:	4b88      	ldr	r3, [pc, #544]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758c:	d10b      	bne.n	80075a6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800758e:	4b85      	ldr	r3, [pc, #532]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d05b      	beq.n	8007652 <HAL_RCC_OscConfig+0x11e>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d157      	bne.n	8007652 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e216      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ae:	d106      	bne.n	80075be <HAL_RCC_OscConfig+0x8a>
 80075b0:	4b7c      	ldr	r3, [pc, #496]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a7b      	ldr	r2, [pc, #492]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e01d      	b.n	80075fa <HAL_RCC_OscConfig+0xc6>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c6:	d10c      	bne.n	80075e2 <HAL_RCC_OscConfig+0xae>
 80075c8:	4b76      	ldr	r3, [pc, #472]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a75      	ldr	r2, [pc, #468]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	4b73      	ldr	r3, [pc, #460]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a72      	ldr	r2, [pc, #456]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075de:	6013      	str	r3, [r2, #0]
 80075e0:	e00b      	b.n	80075fa <HAL_RCC_OscConfig+0xc6>
 80075e2:	4b70      	ldr	r3, [pc, #448]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a6f      	ldr	r2, [pc, #444]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	4b6d      	ldr	r3, [pc, #436]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a6c      	ldr	r2, [pc, #432]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80075f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	685b      	ldr	r3, [r3, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d013      	beq.n	800762a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007602:	f7fc fa81 	bl	8003b08 <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800760a:	f7fc fa7d 	bl	8003b08 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b64      	cmp	r3, #100	; 0x64
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e1db      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800761c:	4b61      	ldr	r3, [pc, #388]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0xd6>
 8007628:	e014      	b.n	8007654 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800762a:	f7fc fa6d 	bl	8003b08 <HAL_GetTick>
 800762e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007630:	e008      	b.n	8007644 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007632:	f7fc fa69 	bl	8003b08 <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	2b64      	cmp	r3, #100	; 0x64
 800763e:	d901      	bls.n	8007644 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8007640:	2303      	movs	r3, #3
 8007642:	e1c7      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007644:	4b57      	ldr	r3, [pc, #348]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1f0      	bne.n	8007632 <HAL_RCC_OscConfig+0xfe>
 8007650:	e000      	b.n	8007654 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007652:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d06f      	beq.n	8007740 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007660:	4b50      	ldr	r3, [pc, #320]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f003 030c 	and.w	r3, r3, #12
 8007668:	2b00      	cmp	r3, #0
 800766a:	d017      	beq.n	800769c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800766c:	4b4d      	ldr	r3, [pc, #308]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007674:	2b08      	cmp	r3, #8
 8007676:	d105      	bne.n	8007684 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8007678:	4b4a      	ldr	r3, [pc, #296]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007684:	4b47      	ldr	r3, [pc, #284]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800768c:	2b0c      	cmp	r3, #12
 800768e:	d11c      	bne.n	80076ca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007690:	4b44      	ldr	r3, [pc, #272]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d116      	bne.n	80076ca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769c:	4b41      	ldr	r3, [pc, #260]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d005      	beq.n	80076b4 <HAL_RCC_OscConfig+0x180>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d001      	beq.n	80076b4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e18f      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076b4:	4b3b      	ldr	r3, [pc, #236]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	00db      	lsls	r3, r3, #3
 80076c2:	4938      	ldr	r1, [pc, #224]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076c8:	e03a      	b.n	8007740 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d020      	beq.n	8007714 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076d2:	4b35      	ldr	r3, [pc, #212]	; (80077a8 <HAL_RCC_OscConfig+0x274>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d8:	f7fc fa16 	bl	8003b08 <HAL_GetTick>
 80076dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076de:	e008      	b.n	80076f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076e0:	f7fc fa12 	bl	8003b08 <HAL_GetTick>
 80076e4:	4602      	mov	r2, r0
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	1ad3      	subs	r3, r2, r3
 80076ea:	2b02      	cmp	r3, #2
 80076ec:	d901      	bls.n	80076f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e170      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076f2:	4b2c      	ldr	r3, [pc, #176]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0302 	and.w	r3, r3, #2
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d0f0      	beq.n	80076e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076fe:	4b29      	ldr	r3, [pc, #164]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4925      	ldr	r1, [pc, #148]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 800770e:	4313      	orrs	r3, r2
 8007710:	600b      	str	r3, [r1, #0]
 8007712:	e015      	b.n	8007740 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007714:	4b24      	ldr	r3, [pc, #144]	; (80077a8 <HAL_RCC_OscConfig+0x274>)
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800771a:	f7fc f9f5 	bl	8003b08 <HAL_GetTick>
 800771e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007720:	e008      	b.n	8007734 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007722:	f7fc f9f1 	bl	8003b08 <HAL_GetTick>
 8007726:	4602      	mov	r2, r0
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	2b02      	cmp	r3, #2
 800772e:	d901      	bls.n	8007734 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8007730:	2303      	movs	r3, #3
 8007732:	e14f      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007734:	4b1b      	ldr	r3, [pc, #108]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f003 0302 	and.w	r3, r3, #2
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1f0      	bne.n	8007722 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	2b00      	cmp	r3, #0
 800774a:	d037      	beq.n	80077bc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d016      	beq.n	8007782 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007754:	4b15      	ldr	r3, [pc, #84]	; (80077ac <HAL_RCC_OscConfig+0x278>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775a:	f7fc f9d5 	bl	8003b08 <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007762:	f7fc f9d1 	bl	8003b08 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e12f      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007774:	4b0b      	ldr	r3, [pc, #44]	; (80077a4 <HAL_RCC_OscConfig+0x270>)
 8007776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f0      	beq.n	8007762 <HAL_RCC_OscConfig+0x22e>
 8007780:	e01c      	b.n	80077bc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007782:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <HAL_RCC_OscConfig+0x278>)
 8007784:	2200      	movs	r2, #0
 8007786:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007788:	f7fc f9be 	bl	8003b08 <HAL_GetTick>
 800778c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800778e:	e00f      	b.n	80077b0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007790:	f7fc f9ba 	bl	8003b08 <HAL_GetTick>
 8007794:	4602      	mov	r2, r0
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	1ad3      	subs	r3, r2, r3
 800779a:	2b02      	cmp	r3, #2
 800779c:	d908      	bls.n	80077b0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800779e:	2303      	movs	r3, #3
 80077a0:	e118      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
 80077a2:	bf00      	nop
 80077a4:	40023800 	.word	0x40023800
 80077a8:	42470000 	.word	0x42470000
 80077ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b0:	4b8a      	ldr	r3, [pc, #552]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80077b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1e9      	bne.n	8007790 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8097 	beq.w	80078f8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80077ca:	2300      	movs	r3, #0
 80077cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ce:	4b83      	ldr	r3, [pc, #524]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d10f      	bne.n	80077fa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
 80077de:	4b7f      	ldr	r3, [pc, #508]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	4a7e      	ldr	r2, [pc, #504]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80077e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077e8:	6413      	str	r3, [r2, #64]	; 0x40
 80077ea:	4b7c      	ldr	r3, [pc, #496]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80077ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80077f6:	2301      	movs	r3, #1
 80077f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077fa:	4b79      	ldr	r3, [pc, #484]	; (80079e0 <HAL_RCC_OscConfig+0x4ac>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007802:	2b00      	cmp	r3, #0
 8007804:	d118      	bne.n	8007838 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007806:	4b76      	ldr	r3, [pc, #472]	; (80079e0 <HAL_RCC_OscConfig+0x4ac>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a75      	ldr	r2, [pc, #468]	; (80079e0 <HAL_RCC_OscConfig+0x4ac>)
 800780c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007810:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007812:	f7fc f979 	bl	8003b08 <HAL_GetTick>
 8007816:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007818:	e008      	b.n	800782c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800781a:	f7fc f975 	bl	8003b08 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	2b02      	cmp	r3, #2
 8007826:	d901      	bls.n	800782c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007828:	2303      	movs	r3, #3
 800782a:	e0d3      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800782c:	4b6c      	ldr	r3, [pc, #432]	; (80079e0 <HAL_RCC_OscConfig+0x4ac>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007834:	2b00      	cmp	r3, #0
 8007836:	d0f0      	beq.n	800781a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689b      	ldr	r3, [r3, #8]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d106      	bne.n	800784e <HAL_RCC_OscConfig+0x31a>
 8007840:	4b66      	ldr	r3, [pc, #408]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007844:	4a65      	ldr	r2, [pc, #404]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007846:	f043 0301 	orr.w	r3, r3, #1
 800784a:	6713      	str	r3, [r2, #112]	; 0x70
 800784c:	e01c      	b.n	8007888 <HAL_RCC_OscConfig+0x354>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	2b05      	cmp	r3, #5
 8007854:	d10c      	bne.n	8007870 <HAL_RCC_OscConfig+0x33c>
 8007856:	4b61      	ldr	r3, [pc, #388]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	4a60      	ldr	r2, [pc, #384]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 800785c:	f043 0304 	orr.w	r3, r3, #4
 8007860:	6713      	str	r3, [r2, #112]	; 0x70
 8007862:	4b5e      	ldr	r3, [pc, #376]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007866:	4a5d      	ldr	r2, [pc, #372]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	6713      	str	r3, [r2, #112]	; 0x70
 800786e:	e00b      	b.n	8007888 <HAL_RCC_OscConfig+0x354>
 8007870:	4b5a      	ldr	r3, [pc, #360]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007874:	4a59      	ldr	r2, [pc, #356]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007876:	f023 0301 	bic.w	r3, r3, #1
 800787a:	6713      	str	r3, [r2, #112]	; 0x70
 800787c:	4b57      	ldr	r3, [pc, #348]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007880:	4a56      	ldr	r2, [pc, #344]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007882:	f023 0304 	bic.w	r3, r3, #4
 8007886:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d015      	beq.n	80078bc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007890:	f7fc f93a 	bl	8003b08 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007896:	e00a      	b.n	80078ae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007898:	f7fc f936 	bl	8003b08 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d901      	bls.n	80078ae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e092      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ae:	4b4b      	ldr	r3, [pc, #300]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d0ee      	beq.n	8007898 <HAL_RCC_OscConfig+0x364>
 80078ba:	e014      	b.n	80078e6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078bc:	f7fc f924 	bl	8003b08 <HAL_GetTick>
 80078c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078c2:	e00a      	b.n	80078da <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078c4:	f7fc f920 	bl	8003b08 <HAL_GetTick>
 80078c8:	4602      	mov	r2, r0
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	1ad3      	subs	r3, r2, r3
 80078ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e07c      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078da:	4b40      	ldr	r3, [pc, #256]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80078dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1ee      	bne.n	80078c4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d105      	bne.n	80078f8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078ec:	4b3b      	ldr	r3, [pc, #236]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80078ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f0:	4a3a      	ldr	r2, [pc, #232]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80078f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d068      	beq.n	80079d2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007900:	4b36      	ldr	r3, [pc, #216]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 030c 	and.w	r3, r3, #12
 8007908:	2b08      	cmp	r3, #8
 800790a:	d060      	beq.n	80079ce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	2b02      	cmp	r3, #2
 8007912:	d145      	bne.n	80079a0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007914:	4b33      	ldr	r3, [pc, #204]	; (80079e4 <HAL_RCC_OscConfig+0x4b0>)
 8007916:	2200      	movs	r2, #0
 8007918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791a:	f7fc f8f5 	bl	8003b08 <HAL_GetTick>
 800791e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007920:	e008      	b.n	8007934 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007922:	f7fc f8f1 	bl	8003b08 <HAL_GetTick>
 8007926:	4602      	mov	r2, r0
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	2b02      	cmp	r3, #2
 800792e:	d901      	bls.n	8007934 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8007930:	2303      	movs	r3, #3
 8007932:	e04f      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007934:	4b29      	ldr	r3, [pc, #164]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1f0      	bne.n	8007922 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	69da      	ldr	r2, [r3, #28]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	431a      	orrs	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	019b      	lsls	r3, r3, #6
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007956:	085b      	lsrs	r3, r3, #1
 8007958:	3b01      	subs	r3, #1
 800795a:	041b      	lsls	r3, r3, #16
 800795c:	431a      	orrs	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007962:	061b      	lsls	r3, r3, #24
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	071b      	lsls	r3, r3, #28
 800796c:	491b      	ldr	r1, [pc, #108]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 800796e:	4313      	orrs	r3, r2
 8007970:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007972:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <HAL_RCC_OscConfig+0x4b0>)
 8007974:	2201      	movs	r2, #1
 8007976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007978:	f7fc f8c6 	bl	8003b08 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800797e:	e008      	b.n	8007992 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007980:	f7fc f8c2 	bl	8003b08 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b02      	cmp	r3, #2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e020      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0f0      	beq.n	8007980 <HAL_RCC_OscConfig+0x44c>
 800799e:	e018      	b.n	80079d2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079a0:	4b10      	ldr	r3, [pc, #64]	; (80079e4 <HAL_RCC_OscConfig+0x4b0>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a6:	f7fc f8af 	bl	8003b08 <HAL_GetTick>
 80079aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ac:	e008      	b.n	80079c0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079ae:	f7fc f8ab 	bl	8003b08 <HAL_GetTick>
 80079b2:	4602      	mov	r2, r0
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	d901      	bls.n	80079c0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	e009      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079c0:	4b06      	ldr	r3, [pc, #24]	; (80079dc <HAL_RCC_OscConfig+0x4a8>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f0      	bne.n	80079ae <HAL_RCC_OscConfig+0x47a>
 80079cc:	e001      	b.n	80079d2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3718      	adds	r7, #24
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40023800 	.word	0x40023800
 80079e0:	40007000 	.word	0x40007000
 80079e4:	42470060 	.word	0x42470060

080079e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e056      	b.n	8007aa8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2200      	movs	r2, #0
 80079fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d106      	bne.n	8007a1a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fb fd21 	bl	800345c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a30:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	431a      	orrs	r2, r3
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	431a      	orrs	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	431a      	orrs	r2, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	695b      	ldr	r3, [r3, #20]
 8007a4c:	431a      	orrs	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a56:	431a      	orrs	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	69db      	ldr	r3, [r3, #28]
 8007a5c:	431a      	orrs	r2, r3
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a1b      	ldr	r3, [r3, #32]
 8007a62:	ea42 0103 	orr.w	r1, r2, r3
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	0c1b      	lsrs	r3, r3, #16
 8007a78:	f003 0104 	and.w	r1, r3, #4
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	69da      	ldr	r2, [r3, #28]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a96:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b088      	sub	sp, #32
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	603b      	str	r3, [r7, #0]
 8007abc:	4613      	mov	r3, r2
 8007abe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d101      	bne.n	8007ad2 <HAL_SPI_Transmit+0x22>
 8007ace:	2302      	movs	r3, #2
 8007ad0:	e11e      	b.n	8007d10 <HAL_SPI_Transmit+0x260>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ada:	f7fc f815 	bl	8003b08 <HAL_GetTick>
 8007ade:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007ae0:	88fb      	ldrh	r3, [r7, #6]
 8007ae2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d002      	beq.n	8007af6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007af0:	2302      	movs	r3, #2
 8007af2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007af4:	e103      	b.n	8007cfe <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <HAL_SPI_Transmit+0x52>
 8007afc:	88fb      	ldrh	r3, [r7, #6]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d102      	bne.n	8007b08 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007b06:	e0fa      	b.n	8007cfe <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2203      	movs	r2, #3
 8007b0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	68ba      	ldr	r2, [r7, #8]
 8007b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	88fa      	ldrh	r2, [r7, #6]
 8007b20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	88fa      	ldrh	r2, [r7, #6]
 8007b26:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	2200      	movs	r2, #0
 8007b38:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4e:	d107      	bne.n	8007b60 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b5e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	d007      	beq.n	8007b7e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b7c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b86:	d14b      	bne.n	8007c20 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d002      	beq.n	8007b96 <HAL_SPI_Transmit+0xe6>
 8007b90:	8afb      	ldrh	r3, [r7, #22]
 8007b92:	2b01      	cmp	r3, #1
 8007b94:	d13e      	bne.n	8007c14 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	881a      	ldrh	r2, [r3, #0]
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	1c9a      	adds	r2, r3, #2
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	3b01      	subs	r3, #1
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007bba:	e02b      	b.n	8007c14 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d112      	bne.n	8007bf0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bce:	881a      	ldrh	r2, [r3, #0]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bda:	1c9a      	adds	r2, r3, #2
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	86da      	strh	r2, [r3, #54]	; 0x36
 8007bee:	e011      	b.n	8007c14 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bf0:	f7fb ff8a 	bl	8003b08 <HAL_GetTick>
 8007bf4:	4602      	mov	r2, r0
 8007bf6:	69bb      	ldr	r3, [r7, #24]
 8007bf8:	1ad3      	subs	r3, r2, r3
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d803      	bhi.n	8007c08 <HAL_SPI_Transmit+0x158>
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c06:	d102      	bne.n	8007c0e <HAL_SPI_Transmit+0x15e>
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007c0e:	2303      	movs	r3, #3
 8007c10:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007c12:	e074      	b.n	8007cfe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1ce      	bne.n	8007bbc <HAL_SPI_Transmit+0x10c>
 8007c1e:	e04c      	b.n	8007cba <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <HAL_SPI_Transmit+0x17e>
 8007c28:	8afb      	ldrh	r3, [r7, #22]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d140      	bne.n	8007cb0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	330c      	adds	r3, #12
 8007c38:	7812      	ldrb	r2, [r2, #0]
 8007c3a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c40:	1c5a      	adds	r2, r3, #1
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007c54:	e02c      	b.n	8007cb0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	f003 0302 	and.w	r3, r3, #2
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d113      	bne.n	8007c8c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29a      	uxth	r2, r3
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	86da      	strh	r2, [r3, #54]	; 0x36
 8007c8a:	e011      	b.n	8007cb0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c8c:	f7fb ff3c 	bl	8003b08 <HAL_GetTick>
 8007c90:	4602      	mov	r2, r0
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	683a      	ldr	r2, [r7, #0]
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d803      	bhi.n	8007ca4 <HAL_SPI_Transmit+0x1f4>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca2:	d102      	bne.n	8007caa <HAL_SPI_Transmit+0x1fa>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d102      	bne.n	8007cb0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8007caa:	2303      	movs	r3, #3
 8007cac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007cae:	e026      	b.n	8007cfe <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1cd      	bne.n	8007c56 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	68f8      	ldr	r0, [r7, #12]
 8007cc0:	f000 fa44 	bl	800814c <SPI_EndRxTxTransaction>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007cd8:	2300      	movs	r3, #0
 8007cda:	613b      	str	r3, [r7, #16]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	613b      	str	r3, [r7, #16]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	613b      	str	r3, [r7, #16]
 8007cec:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d002      	beq.n	8007cfc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	77fb      	strb	r3, [r7, #31]
 8007cfa:	e000      	b.n	8007cfe <HAL_SPI_Transmit+0x24e>
  }

error:
 8007cfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2201      	movs	r2, #1
 8007d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007d0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3720      	adds	r7, #32
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}

08007d18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08c      	sub	sp, #48	; 0x30
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
 8007d24:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007d26:	2301      	movs	r3, #1
 8007d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d101      	bne.n	8007d3e <HAL_SPI_TransmitReceive+0x26>
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e18a      	b.n	8008054 <HAL_SPI_TransmitReceive+0x33c>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d46:	f7fb fedf 	bl	8003b08 <HAL_GetTick>
 8007d4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007d5c:	887b      	ldrh	r3, [r7, #2]
 8007d5e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007d60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d00f      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x70>
 8007d68:	69fb      	ldr	r3, [r7, #28]
 8007d6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d6e:	d107      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d103      	bne.n	8007d80 <HAL_SPI_TransmitReceive+0x68>
 8007d78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d7c:	2b04      	cmp	r3, #4
 8007d7e:	d003      	beq.n	8007d88 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d80:	2302      	movs	r3, #2
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d86:	e15b      	b.n	8008040 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d005      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x82>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <HAL_SPI_TransmitReceive+0x82>
 8007d94:	887b      	ldrh	r3, [r7, #2]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d103      	bne.n	8007da2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007da0:	e14e      	b.n	8008040 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b04      	cmp	r3, #4
 8007dac:	d003      	beq.n	8007db6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2205      	movs	r2, #5
 8007db2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	887a      	ldrh	r2, [r7, #2]
 8007dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	887a      	ldrh	r2, [r7, #2]
 8007dcc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	887a      	ldrh	r2, [r7, #2]
 8007dd8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	887a      	ldrh	r2, [r7, #2]
 8007dde:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d007      	beq.n	8007e0a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e08:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e12:	d178      	bne.n	8007f06 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d002      	beq.n	8007e22 <HAL_SPI_TransmitReceive+0x10a>
 8007e1c:	8b7b      	ldrh	r3, [r7, #26]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d166      	bne.n	8007ef0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e26:	881a      	ldrh	r2, [r3, #0]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e32:	1c9a      	adds	r2, r3, #2
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	3b01      	subs	r3, #1
 8007e40:	b29a      	uxth	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e46:	e053      	b.n	8007ef0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	f003 0302 	and.w	r3, r3, #2
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d11b      	bne.n	8007e8e <HAL_SPI_TransmitReceive+0x176>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d016      	beq.n	8007e8e <HAL_SPI_TransmitReceive+0x176>
 8007e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d113      	bne.n	8007e8e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6a:	881a      	ldrh	r2, [r3, #0]
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e76:	1c9a      	adds	r2, r3, #2
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d119      	bne.n	8007ed0 <HAL_SPI_TransmitReceive+0x1b8>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d014      	beq.n	8007ed0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb0:	b292      	uxth	r2, r2
 8007eb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	1c9a      	adds	r2, r3, #2
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ed0:	f7fb fe1a 	bl	8003b08 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d807      	bhi.n	8007ef0 <HAL_SPI_TransmitReceive+0x1d8>
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee6:	d003      	beq.n	8007ef0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007eee:	e0a7      	b.n	8008040 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1a6      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x130>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d1a1      	bne.n	8007e48 <HAL_SPI_TransmitReceive+0x130>
 8007f04:	e07c      	b.n	8008000 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <HAL_SPI_TransmitReceive+0x1fc>
 8007f0e:	8b7b      	ldrh	r3, [r7, #26]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d16b      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	330c      	adds	r3, #12
 8007f1e:	7812      	ldrb	r2, [r2, #0]
 8007f20:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	3b01      	subs	r3, #1
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f3a:	e057      	b.n	8007fec <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689b      	ldr	r3, [r3, #8]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b02      	cmp	r3, #2
 8007f48:	d11c      	bne.n	8007f84 <HAL_SPI_TransmitReceive+0x26c>
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d017      	beq.n	8007f84 <HAL_SPI_TransmitReceive+0x26c>
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d114      	bne.n	8007f84 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	330c      	adds	r3, #12
 8007f64:	7812      	ldrb	r2, [r2, #0]
 8007f66:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f80:	2300      	movs	r3, #0
 8007f82:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d119      	bne.n	8007fc6 <HAL_SPI_TransmitReceive+0x2ae>
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d014      	beq.n	8007fc6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa6:	b2d2      	uxtb	r2, r2
 8007fa8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007fc6:	f7fb fd9f 	bl	8003b08 <HAL_GetTick>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d803      	bhi.n	8007fde <HAL_SPI_TransmitReceive+0x2c6>
 8007fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fdc:	d102      	bne.n	8007fe4 <HAL_SPI_TransmitReceive+0x2cc>
 8007fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d103      	bne.n	8007fec <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007fe4:	2303      	movs	r3, #3
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007fea:	e029      	b.n	8008040 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1a2      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x224>
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d19d      	bne.n	8007f3c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f8a1 	bl	800814c <SPI_EndRxTxTransaction>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2220      	movs	r2, #32
 800801a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800801c:	e010      	b.n	8008040 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10b      	bne.n	800803e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008026:	2300      	movs	r3, #0
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	617b      	str	r3, [r7, #20]
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	617b      	str	r3, [r7, #20]
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	e000      	b.n	8008040 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800803e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008054:	4618      	mov	r0, r3
 8008056:	3730      	adds	r7, #48	; 0x30
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800805c:	b480      	push	{r7}
 800805e:	b083      	sub	sp, #12
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800806a:	b2db      	uxtb	r3, r3
}
 800806c:	4618      	mov	r0, r3
 800806e:	370c      	adds	r7, #12
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b084      	sub	sp, #16
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	603b      	str	r3, [r7, #0]
 8008084:	4613      	mov	r3, r2
 8008086:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008088:	e04c      	b.n	8008124 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008090:	d048      	beq.n	8008124 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8008092:	f7fb fd39 	bl	8003b08 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d902      	bls.n	80080a8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d13d      	bne.n	8008124 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80080b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080c0:	d111      	bne.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ca:	d004      	beq.n	80080d6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d4:	d107      	bne.n	80080e6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681a      	ldr	r2, [r3, #0]
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ee:	d10f      	bne.n	8008110 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80080fe:	601a      	str	r2, [r3, #0]
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681a      	ldr	r2, [r3, #0]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800810e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	2200      	movs	r2, #0
 800811c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e00f      	b.n	8008144 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	689a      	ldr	r2, [r3, #8]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	4013      	ands	r3, r2
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	bf0c      	ite	eq
 8008134:	2301      	moveq	r3, #1
 8008136:	2300      	movne	r3, #0
 8008138:	b2db      	uxtb	r3, r3
 800813a:	461a      	mov	r2, r3
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	429a      	cmp	r2, r3
 8008140:	d1a3      	bne.n	800808a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8008142:	2300      	movs	r3, #0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af02      	add	r7, sp, #8
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008158:	4b1b      	ldr	r3, [pc, #108]	; (80081c8 <SPI_EndRxTxTransaction+0x7c>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <SPI_EndRxTxTransaction+0x80>)
 800815e:	fba2 2303 	umull	r2, r3, r2, r3
 8008162:	0d5b      	lsrs	r3, r3, #21
 8008164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008168:	fb02 f303 	mul.w	r3, r2, r3
 800816c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008176:	d112      	bne.n	800819e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2200      	movs	r2, #0
 8008180:	2180      	movs	r1, #128	; 0x80
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	f7ff ff78 	bl	8008078 <SPI_WaitFlagStateUntilTimeout>
 8008188:	4603      	mov	r3, r0
 800818a:	2b00      	cmp	r3, #0
 800818c:	d016      	beq.n	80081bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008192:	f043 0220 	orr.w	r2, r3, #32
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800819a:	2303      	movs	r3, #3
 800819c:	e00f      	b.n	80081be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b4:	2b80      	cmp	r3, #128	; 0x80
 80081b6:	d0f2      	beq.n	800819e <SPI_EndRxTxTransaction+0x52>
 80081b8:	e000      	b.n	80081bc <SPI_EndRxTxTransaction+0x70>
        break;
 80081ba:	bf00      	nop
  }

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3718      	adds	r7, #24
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000000 	.word	0x20000000
 80081cc:	165e9f81 	.word	0x165e9f81

080081d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e01d      	b.n	800821e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d106      	bne.n	80081fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fb fa24 	bl	8003644 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f000 fb44 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	68da      	ldr	r2, [r3, #12]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f042 0201 	orr.w	r2, r2, #1
 800823c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f003 0307 	and.w	r3, r3, #7
 8008248:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2b06      	cmp	r3, #6
 800824e:	d007      	beq.n	8008260 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f042 0201 	orr.w	r2, r2, #1
 800825e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e01d      	b.n	80082bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b00      	cmp	r3, #0
 800828a:	d106      	bne.n	800829a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7fb f9b5 	bl	8003604 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2202      	movs	r2, #2
 800829e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	4619      	mov	r1, r3
 80082ac:	4610      	mov	r0, r2
 80082ae:	f000 faf5 	bl	800889c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3708      	adds	r7, #8
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
 80082cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	6839      	ldr	r1, [r7, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fdca 	bl	8008e70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a15      	ldr	r2, [pc, #84]	; (8008338 <HAL_TIM_PWM_Start+0x74>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d004      	beq.n	80082f0 <HAL_TIM_PWM_Start+0x2c>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a14      	ldr	r2, [pc, #80]	; (800833c <HAL_TIM_PWM_Start+0x78>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d101      	bne.n	80082f4 <HAL_TIM_PWM_Start+0x30>
 80082f0:	2301      	movs	r3, #1
 80082f2:	e000      	b.n	80082f6 <HAL_TIM_PWM_Start+0x32>
 80082f4:	2300      	movs	r3, #0
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008308:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f003 0307 	and.w	r3, r3, #7
 8008314:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b06      	cmp	r3, #6
 800831a:	d007      	beq.n	800832c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f042 0201 	orr.w	r2, r2, #1
 800832a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000
 800833c:	40010400 	.word	0x40010400

08008340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	691b      	ldr	r3, [r3, #16]
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b02      	cmp	r3, #2
 8008354:	d122      	bne.n	800839c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b02      	cmp	r3, #2
 8008362:	d11b      	bne.n	800839c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f06f 0202 	mvn.w	r2, #2
 800836c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	699b      	ldr	r3, [r3, #24]
 800837a:	f003 0303 	and.w	r3, r3, #3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 fa6b 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 8008388:	e005      	b.n	8008396 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fa5d 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 fa6e 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2200      	movs	r2, #0
 800839a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	f003 0304 	and.w	r3, r3, #4
 80083a6:	2b04      	cmp	r3, #4
 80083a8:	d122      	bne.n	80083f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f003 0304 	and.w	r3, r3, #4
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	d11b      	bne.n	80083f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f06f 0204 	mvn.w	r2, #4
 80083c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d003      	beq.n	80083de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fa41 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 80083dc:	e005      	b.n	80083ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa33 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fa44 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2200      	movs	r2, #0
 80083ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b08      	cmp	r3, #8
 80083fc:	d122      	bne.n	8008444 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	68db      	ldr	r3, [r3, #12]
 8008404:	f003 0308 	and.w	r3, r3, #8
 8008408:	2b08      	cmp	r3, #8
 800840a:	d11b      	bne.n	8008444 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f06f 0208 	mvn.w	r2, #8
 8008414:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2204      	movs	r2, #4
 800841a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	69db      	ldr	r3, [r3, #28]
 8008422:	f003 0303 	and.w	r3, r3, #3
 8008426:	2b00      	cmp	r3, #0
 8008428:	d003      	beq.n	8008432 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fa17 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 8008430:	e005      	b.n	800843e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fa09 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 fa1a 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	f003 0310 	and.w	r3, r3, #16
 800844e:	2b10      	cmp	r3, #16
 8008450:	d122      	bne.n	8008498 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	f003 0310 	and.w	r3, r3, #16
 800845c:	2b10      	cmp	r3, #16
 800845e:	d11b      	bne.n	8008498 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f06f 0210 	mvn.w	r2, #16
 8008468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2208      	movs	r2, #8
 800846e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800847a:	2b00      	cmp	r3, #0
 800847c:	d003      	beq.n	8008486 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f9ed 	bl	800885e <HAL_TIM_IC_CaptureCallback>
 8008484:	e005      	b.n	8008492 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 f9df 	bl	800884a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f9f0 	bl	8008872 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	691b      	ldr	r3, [r3, #16]
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d10e      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68db      	ldr	r3, [r3, #12]
 80084ac:	f003 0301 	and.w	r3, r3, #1
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d107      	bne.n	80084c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f06f 0201 	mvn.w	r2, #1
 80084bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7fa fcfe 	bl	8002ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ce:	2b80      	cmp	r3, #128	; 0x80
 80084d0:	d10e      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084dc:	2b80      	cmp	r3, #128	; 0x80
 80084de:	d107      	bne.n	80084f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fd6c 	bl	8008fc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d10e      	bne.n	800851c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008508:	2b40      	cmp	r3, #64	; 0x40
 800850a:	d107      	bne.n	800851c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f9b5 	bl	8008886 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	f003 0320 	and.w	r3, r3, #32
 8008526:	2b20      	cmp	r3, #32
 8008528:	d10e      	bne.n	8008548 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68db      	ldr	r3, [r3, #12]
 8008530:	f003 0320 	and.w	r3, r3, #32
 8008534:	2b20      	cmp	r3, #32
 8008536:	d107      	bne.n	8008548 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f06f 0220 	mvn.w	r2, #32
 8008540:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fd36 	bl	8008fb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008548:	bf00      	nop
 800854a:	3708      	adds	r7, #8
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008562:	2b01      	cmp	r3, #1
 8008564:	d101      	bne.n	800856a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008566:	2302      	movs	r3, #2
 8008568:	e0b4      	b.n	80086d4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2201      	movs	r2, #1
 800856e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	2202      	movs	r2, #2
 8008576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b0c      	cmp	r3, #12
 800857e:	f200 809f 	bhi.w	80086c0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8008582:	a201      	add	r2, pc, #4	; (adr r2, 8008588 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8008584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008588:	080085bd 	.word	0x080085bd
 800858c:	080086c1 	.word	0x080086c1
 8008590:	080086c1 	.word	0x080086c1
 8008594:	080086c1 	.word	0x080086c1
 8008598:	080085fd 	.word	0x080085fd
 800859c:	080086c1 	.word	0x080086c1
 80085a0:	080086c1 	.word	0x080086c1
 80085a4:	080086c1 	.word	0x080086c1
 80085a8:	0800863f 	.word	0x0800863f
 80085ac:	080086c1 	.word	0x080086c1
 80085b0:	080086c1 	.word	0x080086c1
 80085b4:	080086c1 	.word	0x080086c1
 80085b8:	0800867f 	.word	0x0800867f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68b9      	ldr	r1, [r7, #8]
 80085c2:	4618      	mov	r0, r3
 80085c4:	f000 fa0a 	bl	80089dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	699a      	ldr	r2, [r3, #24]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f042 0208 	orr.w	r2, r2, #8
 80085d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	699a      	ldr	r2, [r3, #24]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f022 0204 	bic.w	r2, r2, #4
 80085e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	6999      	ldr	r1, [r3, #24]
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	430a      	orrs	r2, r1
 80085f8:	619a      	str	r2, [r3, #24]
      break;
 80085fa:	e062      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68b9      	ldr	r1, [r7, #8]
 8008602:	4618      	mov	r0, r3
 8008604:	f000 fa5a 	bl	8008abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	699a      	ldr	r2, [r3, #24]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	6999      	ldr	r1, [r3, #24]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	021a      	lsls	r2, r3, #8
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	430a      	orrs	r2, r1
 800863a:	619a      	str	r2, [r3, #24]
      break;
 800863c:	e041      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 faaf 	bl	8008ba8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	69da      	ldr	r2, [r3, #28]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f042 0208 	orr.w	r2, r2, #8
 8008658:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f022 0204 	bic.w	r2, r2, #4
 8008668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	69d9      	ldr	r1, [r3, #28]
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	691a      	ldr	r2, [r3, #16]
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	430a      	orrs	r2, r1
 800867a:	61da      	str	r2, [r3, #28]
      break;
 800867c:	e021      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	68b9      	ldr	r1, [r7, #8]
 8008684:	4618      	mov	r0, r3
 8008686:	f000 fb03 	bl	8008c90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69da      	ldr	r2, [r3, #28]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	69da      	ldr	r2, [r3, #28]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	69d9      	ldr	r1, [r3, #28]
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	021a      	lsls	r2, r3, #8
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	430a      	orrs	r2, r1
 80086bc:	61da      	str	r2, [r3, #28]
      break;
 80086be:	e000      	b.n	80086c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80086c0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2200      	movs	r2, #0
 80086ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d101      	bne.n	80086f4 <HAL_TIM_ConfigClockSource+0x18>
 80086f0:	2302      	movs	r3, #2
 80086f2:	e0a6      	b.n	8008842 <HAL_TIM_ConfigClockSource+0x166>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008712:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800871a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2b40      	cmp	r3, #64	; 0x40
 800872a:	d067      	beq.n	80087fc <HAL_TIM_ConfigClockSource+0x120>
 800872c:	2b40      	cmp	r3, #64	; 0x40
 800872e:	d80b      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x6c>
 8008730:	2b10      	cmp	r3, #16
 8008732:	d073      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x140>
 8008734:	2b10      	cmp	r3, #16
 8008736:	d802      	bhi.n	800873e <HAL_TIM_ConfigClockSource+0x62>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d06f      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800873c:	e078      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800873e:	2b20      	cmp	r3, #32
 8008740:	d06c      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x140>
 8008742:	2b30      	cmp	r3, #48	; 0x30
 8008744:	d06a      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008746:	e073      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008748:	2b70      	cmp	r3, #112	; 0x70
 800874a:	d00d      	beq.n	8008768 <HAL_TIM_ConfigClockSource+0x8c>
 800874c:	2b70      	cmp	r3, #112	; 0x70
 800874e:	d804      	bhi.n	800875a <HAL_TIM_ConfigClockSource+0x7e>
 8008750:	2b50      	cmp	r3, #80	; 0x50
 8008752:	d033      	beq.n	80087bc <HAL_TIM_ConfigClockSource+0xe0>
 8008754:	2b60      	cmp	r3, #96	; 0x60
 8008756:	d041      	beq.n	80087dc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8008758:	e06a      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800875a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800875e:	d066      	beq.n	800882e <HAL_TIM_ConfigClockSource+0x152>
 8008760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008764:	d017      	beq.n	8008796 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8008766:	e063      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	6899      	ldr	r1, [r3, #8]
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f000 fb5a 	bl	8008e30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800878a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	609a      	str	r2, [r3, #8]
      break;
 8008794:	e04c      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	6899      	ldr	r1, [r3, #8]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f000 fb43 	bl	8008e30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	689a      	ldr	r2, [r3, #8]
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80087b8:	609a      	str	r2, [r3, #8]
      break;
 80087ba:	e039      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6818      	ldr	r0, [r3, #0]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	6859      	ldr	r1, [r3, #4]
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	68db      	ldr	r3, [r3, #12]
 80087c8:	461a      	mov	r2, r3
 80087ca:	f000 fab7 	bl	8008d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	2150      	movs	r1, #80	; 0x50
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fb10 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 80087da:	e029      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	6859      	ldr	r1, [r3, #4]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	461a      	mov	r2, r3
 80087ea:	f000 fad6 	bl	8008d9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2160      	movs	r1, #96	; 0x60
 80087f4:	4618      	mov	r0, r3
 80087f6:	f000 fb00 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 80087fa:	e019      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6818      	ldr	r0, [r3, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6859      	ldr	r1, [r3, #4]
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	461a      	mov	r2, r3
 800880a:	f000 fa97 	bl	8008d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2140      	movs	r1, #64	; 0x40
 8008814:	4618      	mov	r0, r3
 8008816:	f000 faf0 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 800881a:	e009      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681a      	ldr	r2, [r3, #0]
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4619      	mov	r1, r3
 8008826:	4610      	mov	r0, r2
 8008828:	f000 fae7 	bl	8008dfa <TIM_ITRx_SetConfig>
      break;
 800882c:	e000      	b.n	8008830 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800882e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008852:	bf00      	nop
 8008854:	370c      	adds	r7, #12
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr

0800885e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800885e:	b480      	push	{r7}
 8008860:	b083      	sub	sp, #12
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008866:	bf00      	nop
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr

08008872 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008872:	b480      	push	{r7}
 8008874:	b083      	sub	sp, #12
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800888e:	bf00      	nop
 8008890:	370c      	adds	r7, #12
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
	...

0800889c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a40      	ldr	r2, [pc, #256]	; (80089b0 <TIM_Base_SetConfig+0x114>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d013      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ba:	d00f      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a3d      	ldr	r2, [pc, #244]	; (80089b4 <TIM_Base_SetConfig+0x118>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d00b      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a3c      	ldr	r2, [pc, #240]	; (80089b8 <TIM_Base_SetConfig+0x11c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d007      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a3b      	ldr	r2, [pc, #236]	; (80089bc <TIM_Base_SetConfig+0x120>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d003      	beq.n	80088dc <TIM_Base_SetConfig+0x40>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a3a      	ldr	r2, [pc, #232]	; (80089c0 <TIM_Base_SetConfig+0x124>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d108      	bne.n	80088ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	4a2f      	ldr	r2, [pc, #188]	; (80089b0 <TIM_Base_SetConfig+0x114>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d02b      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088fc:	d027      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a2c      	ldr	r2, [pc, #176]	; (80089b4 <TIM_Base_SetConfig+0x118>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d023      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	4a2b      	ldr	r2, [pc, #172]	; (80089b8 <TIM_Base_SetConfig+0x11c>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d01f      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a2a      	ldr	r2, [pc, #168]	; (80089bc <TIM_Base_SetConfig+0x120>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d01b      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a29      	ldr	r2, [pc, #164]	; (80089c0 <TIM_Base_SetConfig+0x124>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d017      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a28      	ldr	r2, [pc, #160]	; (80089c4 <TIM_Base_SetConfig+0x128>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d013      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a27      	ldr	r2, [pc, #156]	; (80089c8 <TIM_Base_SetConfig+0x12c>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d00f      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a26      	ldr	r2, [pc, #152]	; (80089cc <TIM_Base_SetConfig+0x130>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00b      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a25      	ldr	r2, [pc, #148]	; (80089d0 <TIM_Base_SetConfig+0x134>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d007      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a24      	ldr	r2, [pc, #144]	; (80089d4 <TIM_Base_SetConfig+0x138>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a23      	ldr	r2, [pc, #140]	; (80089d8 <TIM_Base_SetConfig+0x13c>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d108      	bne.n	8008960 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008954:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4313      	orrs	r3, r2
 800895e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a0a      	ldr	r2, [pc, #40]	; (80089b0 <TIM_Base_SetConfig+0x114>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d003      	beq.n	8008994 <TIM_Base_SetConfig+0xf8>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a0c      	ldr	r2, [pc, #48]	; (80089c0 <TIM_Base_SetConfig+0x124>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d103      	bne.n	800899c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	615a      	str	r2, [r3, #20]
}
 80089a2:	bf00      	nop
 80089a4:	3714      	adds	r7, #20
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40000400 	.word	0x40000400
 80089b8:	40000800 	.word	0x40000800
 80089bc:	40000c00 	.word	0x40000c00
 80089c0:	40010400 	.word	0x40010400
 80089c4:	40014000 	.word	0x40014000
 80089c8:	40014400 	.word	0x40014400
 80089cc:	40014800 	.word	0x40014800
 80089d0:	40001800 	.word	0x40001800
 80089d4:	40001c00 	.word	0x40001c00
 80089d8:	40002000 	.word	0x40002000

080089dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b480      	push	{r7}
 80089de:	b087      	sub	sp, #28
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	f023 0201 	bic.w	r2, r3, #1
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	f023 0302 	bic.w	r3, r3, #2
 8008a24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a20      	ldr	r2, [pc, #128]	; (8008ab4 <TIM_OC1_SetConfig+0xd8>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC1_SetConfig+0x64>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1f      	ldr	r2, [pc, #124]	; (8008ab8 <TIM_OC1_SetConfig+0xdc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10c      	bne.n	8008a5a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0308 	bic.w	r3, r3, #8
 8008a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	697a      	ldr	r2, [r7, #20]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f023 0304 	bic.w	r3, r3, #4
 8008a58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <TIM_OC1_SetConfig+0xd8>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d003      	beq.n	8008a6a <TIM_OC1_SetConfig+0x8e>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	4a14      	ldr	r2, [pc, #80]	; (8008ab8 <TIM_OC1_SetConfig+0xdc>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d111      	bne.n	8008a8e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	4313      	orrs	r3, r2
 8008a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	699b      	ldr	r3, [r3, #24]
 8008a88:	693a      	ldr	r2, [r7, #16]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68fa      	ldr	r2, [r7, #12]
 8008a98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	621a      	str	r2, [r3, #32]
}
 8008aa8:	bf00      	nop
 8008aaa:	371c      	adds	r7, #28
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr
 8008ab4:	40010000 	.word	0x40010000
 8008ab8:	40010400 	.word	0x40010400

08008abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f023 0210 	bic.w	r2, r3, #16
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	699b      	ldr	r3, [r3, #24]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	021b      	lsls	r3, r3, #8
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b00:	697b      	ldr	r3, [r7, #20]
 8008b02:	f023 0320 	bic.w	r3, r3, #32
 8008b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	011b      	lsls	r3, r3, #4
 8008b0e:	697a      	ldr	r2, [r7, #20]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4a22      	ldr	r2, [pc, #136]	; (8008ba0 <TIM_OC2_SetConfig+0xe4>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d003      	beq.n	8008b24 <TIM_OC2_SetConfig+0x68>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	4a21      	ldr	r2, [pc, #132]	; (8008ba4 <TIM_OC2_SetConfig+0xe8>)
 8008b20:	4293      	cmp	r3, r2
 8008b22:	d10d      	bne.n	8008b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	697a      	ldr	r2, [r7, #20]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4a17      	ldr	r2, [pc, #92]	; (8008ba0 <TIM_OC2_SetConfig+0xe4>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d003      	beq.n	8008b50 <TIM_OC2_SetConfig+0x94>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a16      	ldr	r2, [pc, #88]	; (8008ba4 <TIM_OC2_SetConfig+0xe8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d113      	bne.n	8008b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	695b      	ldr	r3, [r3, #20]
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	693a      	ldr	r2, [r7, #16]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	693a      	ldr	r2, [r7, #16]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	68fa      	ldr	r2, [r7, #12]
 8008b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	685a      	ldr	r2, [r3, #4]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	697a      	ldr	r2, [r7, #20]
 8008b90:	621a      	str	r2, [r3, #32]
}
 8008b92:	bf00      	nop
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	40010000 	.word	0x40010000
 8008ba4:	40010400 	.word	0x40010400

08008ba8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 0303 	bic.w	r3, r3, #3
 8008bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	021b      	lsls	r3, r3, #8
 8008bf8:	697a      	ldr	r2, [r7, #20]
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a21      	ldr	r2, [pc, #132]	; (8008c88 <TIM_OC3_SetConfig+0xe0>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d003      	beq.n	8008c0e <TIM_OC3_SetConfig+0x66>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a20      	ldr	r2, [pc, #128]	; (8008c8c <TIM_OC3_SetConfig+0xe4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d10d      	bne.n	8008c2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	697a      	ldr	r2, [r7, #20]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <TIM_OC3_SetConfig+0xe0>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC3_SetConfig+0x92>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	; (8008c8c <TIM_OC3_SetConfig+0xe4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d113      	bne.n	8008c62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	011b      	lsls	r3, r3, #4
 8008c50:	693a      	ldr	r2, [r7, #16]
 8008c52:	4313      	orrs	r3, r2
 8008c54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	011b      	lsls	r3, r3, #4
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	693a      	ldr	r2, [r7, #16]
 8008c66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	621a      	str	r2, [r3, #32]
}
 8008c7c:	bf00      	nop
 8008c7e:	371c      	adds	r7, #28
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400

08008c90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	69db      	ldr	r3, [r3, #28]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	021b      	lsls	r3, r3, #8
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	4313      	orrs	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	031b      	lsls	r3, r3, #12
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	4a12      	ldr	r2, [pc, #72]	; (8008d34 <TIM_OC4_SetConfig+0xa4>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d003      	beq.n	8008cf8 <TIM_OC4_SetConfig+0x68>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	4a11      	ldr	r2, [pc, #68]	; (8008d38 <TIM_OC4_SetConfig+0xa8>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d109      	bne.n	8008d0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	019b      	lsls	r3, r3, #6
 8008d06:	697a      	ldr	r2, [r7, #20]
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	68fa      	ldr	r2, [r7, #12]
 8008d16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	693a      	ldr	r2, [r7, #16]
 8008d24:	621a      	str	r2, [r3, #32]
}
 8008d26:	bf00      	nop
 8008d28:	371c      	adds	r7, #28
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40010000 	.word	0x40010000
 8008d38:	40010400 	.word	0x40010400

08008d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	f023 0201 	bic.w	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d72:	697b      	ldr	r3, [r7, #20]
 8008d74:	f023 030a 	bic.w	r3, r3, #10
 8008d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	621a      	str	r2, [r3, #32]
}
 8008d8e:	bf00      	nop
 8008d90:	371c      	adds	r7, #28
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr

08008d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	60f8      	str	r0, [r7, #12]
 8008da2:	60b9      	str	r1, [r7, #8]
 8008da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6a1b      	ldr	r3, [r3, #32]
 8008daa:	f023 0210 	bic.w	r2, r3, #16
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	699b      	ldr	r3, [r3, #24]
 8008db6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	6a1b      	ldr	r3, [r3, #32]
 8008dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008dc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	031b      	lsls	r3, r3, #12
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	011b      	lsls	r3, r3, #4
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	693a      	ldr	r2, [r7, #16]
 8008dec:	621a      	str	r2, [r3, #32]
}
 8008dee:	bf00      	nop
 8008df0:	371c      	adds	r7, #28
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b085      	sub	sp, #20
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e12:	683a      	ldr	r2, [r7, #0]
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	f043 0307 	orr.w	r3, r3, #7
 8008e1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	609a      	str	r2, [r3, #8]
}
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
 8008e3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	021a      	lsls	r2, r3, #8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	431a      	orrs	r2, r3
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	697a      	ldr	r2, [r7, #20]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	697a      	ldr	r2, [r7, #20]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	371c      	adds	r7, #28
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	f003 031f 	and.w	r3, r3, #31
 8008e82:	2201      	movs	r2, #1
 8008e84:	fa02 f303 	lsl.w	r3, r2, r3
 8008e88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	6a1a      	ldr	r2, [r3, #32]
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	43db      	mvns	r3, r3
 8008e92:	401a      	ands	r2, r3
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6a1a      	ldr	r2, [r3, #32]
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	f003 031f 	and.w	r3, r3, #31
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	621a      	str	r2, [r3, #32]
}
 8008eae:	bf00      	nop
 8008eb0:	371c      	adds	r7, #28
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
	...

08008ebc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ecc:	2b01      	cmp	r3, #1
 8008ece:	d101      	bne.n	8008ed4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ed0:	2302      	movs	r3, #2
 8008ed2:	e05a      	b.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2202      	movs	r2, #2
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689b      	ldr	r3, [r3, #8]
 8008ef2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008efa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d022      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f20:	d01d      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1d      	ldr	r2, [pc, #116]	; (8008f9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d018      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1b      	ldr	r2, [pc, #108]	; (8008fa0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d013      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1a      	ldr	r2, [pc, #104]	; (8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d00e      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a18      	ldr	r2, [pc, #96]	; (8008fa8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d009      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4a17      	ldr	r2, [pc, #92]	; (8008fac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d004      	beq.n	8008f5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a15      	ldr	r2, [pc, #84]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d10c      	bne.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	68ba      	ldr	r2, [r7, #8]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3714      	adds	r7, #20
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr
 8008f96:	bf00      	nop
 8008f98:	40010000 	.word	0x40010000
 8008f9c:	40000400 	.word	0x40000400
 8008fa0:	40000800 	.word	0x40000800
 8008fa4:	40000c00 	.word	0x40000c00
 8008fa8:	40010400 	.word	0x40010400
 8008fac:	40014000 	.word	0x40014000
 8008fb0:	40001800 	.word	0x40001800

08008fb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008fdc:	b084      	sub	sp, #16
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	f107 001c 	add.w	r0, r7, #28
 8008fea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d122      	bne.n	800903a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ff8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009008:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800901c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 fac0 	bl	800a5b4 <USB_CoreReset>
 8009034:	4603      	mov	r3, r0
 8009036:	73fb      	strb	r3, [r7, #15]
 8009038:	e01a      	b.n	8009070 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f001 fab4 	bl	800a5b4 <USB_CoreReset>
 800904c:	4603      	mov	r3, r0
 800904e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009052:	2b00      	cmp	r3, #0
 8009054:	d106      	bne.n	8009064 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800905a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	639a      	str	r2, [r3, #56]	; 0x38
 8009062:	e005      	b.n	8009070 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009068:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	2b01      	cmp	r3, #1
 8009074:	d10b      	bne.n	800908e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f043 0206 	orr.w	r2, r3, #6
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	f043 0220 	orr.w	r2, r3, #32
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800908e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009090:	4618      	mov	r0, r3
 8009092:	3710      	adds	r7, #16
 8009094:	46bd      	mov	sp, r7
 8009096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800909a:	b004      	add	sp, #16
 800909c:	4770      	bx	lr
	...

080090a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	4613      	mov	r3, r2
 80090ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80090ae:	79fb      	ldrb	r3, [r7, #7]
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d165      	bne.n	8009180 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4a41      	ldr	r2, [pc, #260]	; (80091bc <USB_SetTurnaroundTime+0x11c>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d906      	bls.n	80090ca <USB_SetTurnaroundTime+0x2a>
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4a40      	ldr	r2, [pc, #256]	; (80091c0 <USB_SetTurnaroundTime+0x120>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d802      	bhi.n	80090ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80090c4:	230f      	movs	r3, #15
 80090c6:	617b      	str	r3, [r7, #20]
 80090c8:	e062      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	4a3c      	ldr	r2, [pc, #240]	; (80091c0 <USB_SetTurnaroundTime+0x120>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d906      	bls.n	80090e0 <USB_SetTurnaroundTime+0x40>
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	4a3b      	ldr	r2, [pc, #236]	; (80091c4 <USB_SetTurnaroundTime+0x124>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d802      	bhi.n	80090e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80090da:	230e      	movs	r3, #14
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e057      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4a38      	ldr	r2, [pc, #224]	; (80091c4 <USB_SetTurnaroundTime+0x124>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d906      	bls.n	80090f6 <USB_SetTurnaroundTime+0x56>
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	4a37      	ldr	r2, [pc, #220]	; (80091c8 <USB_SetTurnaroundTime+0x128>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d802      	bhi.n	80090f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80090f0:	230d      	movs	r3, #13
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e04c      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	4a33      	ldr	r2, [pc, #204]	; (80091c8 <USB_SetTurnaroundTime+0x128>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d906      	bls.n	800910c <USB_SetTurnaroundTime+0x6c>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	4a32      	ldr	r2, [pc, #200]	; (80091cc <USB_SetTurnaroundTime+0x12c>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d802      	bhi.n	800910c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009106:	230c      	movs	r3, #12
 8009108:	617b      	str	r3, [r7, #20]
 800910a:	e041      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	4a2f      	ldr	r2, [pc, #188]	; (80091cc <USB_SetTurnaroundTime+0x12c>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d906      	bls.n	8009122 <USB_SetTurnaroundTime+0x82>
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	4a2e      	ldr	r2, [pc, #184]	; (80091d0 <USB_SetTurnaroundTime+0x130>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d802      	bhi.n	8009122 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800911c:	230b      	movs	r3, #11
 800911e:	617b      	str	r3, [r7, #20]
 8009120:	e036      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	4a2a      	ldr	r2, [pc, #168]	; (80091d0 <USB_SetTurnaroundTime+0x130>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d906      	bls.n	8009138 <USB_SetTurnaroundTime+0x98>
 800912a:	68bb      	ldr	r3, [r7, #8]
 800912c:	4a29      	ldr	r2, [pc, #164]	; (80091d4 <USB_SetTurnaroundTime+0x134>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d802      	bhi.n	8009138 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009132:	230a      	movs	r3, #10
 8009134:	617b      	str	r3, [r7, #20]
 8009136:	e02b      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	4a26      	ldr	r2, [pc, #152]	; (80091d4 <USB_SetTurnaroundTime+0x134>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d906      	bls.n	800914e <USB_SetTurnaroundTime+0xae>
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	4a25      	ldr	r2, [pc, #148]	; (80091d8 <USB_SetTurnaroundTime+0x138>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d802      	bhi.n	800914e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009148:	2309      	movs	r3, #9
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e020      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	4a21      	ldr	r2, [pc, #132]	; (80091d8 <USB_SetTurnaroundTime+0x138>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d906      	bls.n	8009164 <USB_SetTurnaroundTime+0xc4>
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	4a20      	ldr	r2, [pc, #128]	; (80091dc <USB_SetTurnaroundTime+0x13c>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d802      	bhi.n	8009164 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800915e:	2308      	movs	r3, #8
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	e015      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	4a1d      	ldr	r2, [pc, #116]	; (80091dc <USB_SetTurnaroundTime+0x13c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d906      	bls.n	800917a <USB_SetTurnaroundTime+0xda>
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	4a1c      	ldr	r2, [pc, #112]	; (80091e0 <USB_SetTurnaroundTime+0x140>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d802      	bhi.n	800917a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009174:	2307      	movs	r3, #7
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e00a      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800917a:	2306      	movs	r3, #6
 800917c:	617b      	str	r3, [r7, #20]
 800917e:	e007      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d102      	bne.n	800918c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009186:	2309      	movs	r3, #9
 8009188:	617b      	str	r3, [r7, #20]
 800918a:	e001      	b.n	8009190 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800918c:	2309      	movs	r3, #9
 800918e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68da      	ldr	r2, [r3, #12]
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	029b      	lsls	r3, r3, #10
 80091a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80091a8:	431a      	orrs	r2, r3
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	371c      	adds	r7, #28
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	00d8acbf 	.word	0x00d8acbf
 80091c0:	00e4e1bf 	.word	0x00e4e1bf
 80091c4:	00f423ff 	.word	0x00f423ff
 80091c8:	0106737f 	.word	0x0106737f
 80091cc:	011a499f 	.word	0x011a499f
 80091d0:	01312cff 	.word	0x01312cff
 80091d4:	014ca43f 	.word	0x014ca43f
 80091d8:	016e35ff 	.word	0x016e35ff
 80091dc:	01a6ab1f 	.word	0x01a6ab1f
 80091e0:	01e847ff 	.word	0x01e847ff

080091e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80091e4:	b480      	push	{r7}
 80091e6:	b083      	sub	sp, #12
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	f043 0201 	orr.w	r2, r3, #1
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	370c      	adds	r7, #12
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr

08009206 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f023 0201 	bic.w	r2, r3, #1
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009228:	b580      	push	{r7, lr}
 800922a:	b082      	sub	sp, #8
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
 8009230:	460b      	mov	r3, r1
 8009232:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009240:	78fb      	ldrb	r3, [r7, #3]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d106      	bne.n	8009254 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60da      	str	r2, [r3, #12]
 8009252:	e00b      	b.n	800926c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d106      	bne.n	8009268 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	60da      	str	r2, [r3, #12]
 8009266:	e001      	b.n	800926c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8009268:	2301      	movs	r3, #1
 800926a:	e003      	b.n	8009274 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800926c:	2032      	movs	r0, #50	; 0x32
 800926e:	f7fa fc57 	bl	8003b20 <HAL_Delay>

  return HAL_OK;
 8009272:	2300      	movs	r3, #0
}
 8009274:	4618      	mov	r0, r3
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800927c:	b084      	sub	sp, #16
 800927e:	b580      	push	{r7, lr}
 8009280:	b086      	sub	sp, #24
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800928a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800928e:	2300      	movs	r3, #0
 8009290:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009296:	2300      	movs	r3, #0
 8009298:	613b      	str	r3, [r7, #16]
 800929a:	e009      	b.n	80092b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800929c:	687a      	ldr	r2, [r7, #4]
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	3340      	adds	r3, #64	; 0x40
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4413      	add	r3, r2
 80092a6:	2200      	movs	r2, #0
 80092a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	3301      	adds	r3, #1
 80092ae:	613b      	str	r3, [r7, #16]
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	2b0e      	cmp	r3, #14
 80092b4:	d9f2      	bls.n	800929c <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80092b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d11c      	bne.n	80092f6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092ca:	f043 0302 	orr.w	r3, r3, #2
 80092ce:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	601a      	str	r2, [r3, #0]
 80092f4:	e005      	b.n	8009302 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092fa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009308:	461a      	mov	r2, r3
 800930a:	2300      	movs	r3, #0
 800930c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009314:	4619      	mov	r1, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931c:	461a      	mov	r2, r3
 800931e:	680b      	ldr	r3, [r1, #0]
 8009320:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	2b01      	cmp	r3, #1
 8009326:	d10c      	bne.n	8009342 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	2b00      	cmp	r3, #0
 800932c:	d104      	bne.n	8009338 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800932e:	2100      	movs	r1, #0
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f000 f949 	bl	80095c8 <USB_SetDevSpeed>
 8009336:	e008      	b.n	800934a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009338:	2101      	movs	r1, #1
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 f944 	bl	80095c8 <USB_SetDevSpeed>
 8009340:	e003      	b.n	800934a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009342:	2103      	movs	r1, #3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f000 f93f 	bl	80095c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800934a:	2110      	movs	r1, #16
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f8f3 	bl	8009538 <USB_FlushTxFifo>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009358:	2301      	movs	r3, #1
 800935a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f911 	bl	8009584 <USB_FlushRxFifo>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009372:	461a      	mov	r2, r3
 8009374:	2300      	movs	r3, #0
 8009376:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937e:	461a      	mov	r2, r3
 8009380:	2300      	movs	r3, #0
 8009382:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800938a:	461a      	mov	r2, r3
 800938c:	2300      	movs	r3, #0
 800938e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
 8009394:	e043      	b.n	800941e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009396:	693b      	ldr	r3, [r7, #16]
 8009398:	015a      	lsls	r2, r3, #5
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	4413      	add	r3, r2
 800939e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093ac:	d118      	bne.n	80093e0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d10a      	bne.n	80093ca <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	015a      	lsls	r2, r3, #5
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	4413      	add	r3, r2
 80093bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093c0:	461a      	mov	r2, r3
 80093c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80093c6:	6013      	str	r3, [r2, #0]
 80093c8:	e013      	b.n	80093f2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d6:	461a      	mov	r2, r3
 80093d8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80093dc:	6013      	str	r3, [r2, #0]
 80093de:	e008      	b.n	80093f2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	461a      	mov	r2, r3
 80093ee:	2300      	movs	r3, #0
 80093f0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fe:	461a      	mov	r2, r3
 8009400:	2300      	movs	r3, #0
 8009402:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009410:	461a      	mov	r2, r3
 8009412:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009416:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3301      	adds	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009420:	693a      	ldr	r2, [r7, #16]
 8009422:	429a      	cmp	r2, r3
 8009424:	d3b7      	bcc.n	8009396 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009426:	2300      	movs	r3, #0
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	e043      	b.n	80094b4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800943e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009442:	d118      	bne.n	8009476 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10a      	bne.n	8009460 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	015a      	lsls	r2, r3, #5
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4413      	add	r3, r2
 8009452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009456:	461a      	mov	r2, r3
 8009458:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800945c:	6013      	str	r3, [r2, #0]
 800945e:	e013      	b.n	8009488 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800946c:	461a      	mov	r2, r3
 800946e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	e008      	b.n	8009488 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009482:	461a      	mov	r2, r3
 8009484:	2300      	movs	r3, #0
 8009486:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	015a      	lsls	r2, r3, #5
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4413      	add	r3, r2
 8009490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009494:	461a      	mov	r2, r3
 8009496:	2300      	movs	r3, #0
 8009498:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a6:	461a      	mov	r2, r3
 80094a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80094ac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	3301      	adds	r3, #1
 80094b2:	613b      	str	r3, [r7, #16]
 80094b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b6:	693a      	ldr	r2, [r7, #16]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d3b7      	bcc.n	800942c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80094ce:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80094dc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d105      	bne.n	80094f0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	699b      	ldr	r3, [r3, #24]
 80094e8:	f043 0210 	orr.w	r2, r3, #16
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	699a      	ldr	r2, [r3, #24]
 80094f4:	4b0f      	ldr	r3, [pc, #60]	; (8009534 <USB_DevInit+0x2b8>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80094fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	699b      	ldr	r3, [r3, #24]
 8009506:	f043 0208 	orr.w	r2, r3, #8
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800950e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009510:	2b01      	cmp	r3, #1
 8009512:	d107      	bne.n	8009524 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800951c:	f043 0304 	orr.w	r3, r3, #4
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009524:	7dfb      	ldrb	r3, [r7, #23]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3718      	adds	r7, #24
 800952a:	46bd      	mov	sp, r7
 800952c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009530:	b004      	add	sp, #16
 8009532:	4770      	bx	lr
 8009534:	803c3800 	.word	0x803c3800

08009538 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009538:	b480      	push	{r7}
 800953a:	b085      	sub	sp, #20
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8009542:	2300      	movs	r3, #0
 8009544:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	019b      	lsls	r3, r3, #6
 800954a:	f043 0220 	orr.w	r2, r3, #32
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4a09      	ldr	r2, [pc, #36]	; (8009580 <USB_FlushTxFifo+0x48>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d901      	bls.n	8009564 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e006      	b.n	8009572 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	691b      	ldr	r3, [r3, #16]
 8009568:	f003 0320 	and.w	r3, r3, #32
 800956c:	2b20      	cmp	r3, #32
 800956e:	d0f0      	beq.n	8009552 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
 800957e:	bf00      	nop
 8009580:	00030d40 	.word	0x00030d40

08009584 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2210      	movs	r2, #16
 8009594:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	3301      	adds	r3, #1
 800959a:	60fb      	str	r3, [r7, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4a09      	ldr	r2, [pc, #36]	; (80095c4 <USB_FlushRxFifo+0x40>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d901      	bls.n	80095a8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80095a4:	2303      	movs	r3, #3
 80095a6:	e006      	b.n	80095b6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f003 0310 	and.w	r3, r3, #16
 80095b0:	2b10      	cmp	r3, #16
 80095b2:	d0f0      	beq.n	8009596 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	00030d40 	.word	0x00030d40

080095c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b085      	sub	sp, #20
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	460b      	mov	r3, r1
 80095d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	68f9      	ldr	r1, [r7, #12]
 80095e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095e8:	4313      	orrs	r3, r2
 80095ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80095ec:	2300      	movs	r3, #0
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80095fa:	b480      	push	{r7}
 80095fc:	b087      	sub	sp, #28
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0306 	and.w	r3, r3, #6
 8009612:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800961a:	2300      	movs	r3, #0
 800961c:	75fb      	strb	r3, [r7, #23]
 800961e:	e00a      	b.n	8009636 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2b02      	cmp	r3, #2
 8009624:	d002      	beq.n	800962c <USB_GetDevSpeed+0x32>
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b06      	cmp	r3, #6
 800962a:	d102      	bne.n	8009632 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800962c:	2302      	movs	r3, #2
 800962e:	75fb      	strb	r3, [r7, #23]
 8009630:	e001      	b.n	8009636 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009632:	230f      	movs	r3, #15
 8009634:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009644:	b480      	push	{r7}
 8009646:	b085      	sub	sp, #20
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009652:	683b      	ldr	r3, [r7, #0]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	785b      	ldrb	r3, [r3, #1]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d13a      	bne.n	80096d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	69da      	ldr	r2, [r3, #28]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 030f 	and.w	r3, r3, #15
 8009670:	2101      	movs	r1, #1
 8009672:	fa01 f303 	lsl.w	r3, r1, r3
 8009676:	b29b      	uxth	r3, r3
 8009678:	68f9      	ldr	r1, [r7, #12]
 800967a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800967e:	4313      	orrs	r3, r2
 8009680:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	015a      	lsls	r2, r3, #5
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	4413      	add	r3, r2
 800968a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d155      	bne.n	8009744 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	689b      	ldr	r3, [r3, #8]
 80096aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	78db      	ldrb	r3, [r3, #3]
 80096b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	059b      	lsls	r3, r3, #22
 80096ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80096bc:	4313      	orrs	r3, r2
 80096be:	68ba      	ldr	r2, [r7, #8]
 80096c0:	0151      	lsls	r1, r2, #5
 80096c2:	68fa      	ldr	r2, [r7, #12]
 80096c4:	440a      	add	r2, r1
 80096c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	e036      	b.n	8009744 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	69da      	ldr	r2, [r3, #28]
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	781b      	ldrb	r3, [r3, #0]
 80096e2:	f003 030f 	and.w	r3, r3, #15
 80096e6:	2101      	movs	r1, #1
 80096e8:	fa01 f303 	lsl.w	r3, r1, r3
 80096ec:	041b      	lsls	r3, r3, #16
 80096ee:	68f9      	ldr	r1, [r7, #12]
 80096f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f4:	4313      	orrs	r3, r2
 80096f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	015a      	lsls	r2, r3, #5
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800970a:	2b00      	cmp	r3, #0
 800970c:	d11a      	bne.n	8009744 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	78db      	ldrb	r3, [r3, #3]
 8009728:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800972a:	430b      	orrs	r3, r1
 800972c:	4313      	orrs	r3, r2
 800972e:	68ba      	ldr	r2, [r7, #8]
 8009730:	0151      	lsls	r1, r2, #5
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	440a      	add	r2, r1
 8009736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800973a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800973e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009742:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009744:	2300      	movs	r3, #0
}
 8009746:	4618      	mov	r0, r3
 8009748:	3714      	adds	r7, #20
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
	...

08009754 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009754:	b480      	push	{r7}
 8009756:	b085      	sub	sp, #20
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d161      	bne.n	8009834 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009782:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009786:	d11f      	bne.n	80097c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	015a      	lsls	r2, r3, #5
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	4413      	add	r3, r2
 8009790:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	68ba      	ldr	r2, [r7, #8]
 8009798:	0151      	lsls	r1, r2, #5
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	440a      	add	r2, r1
 800979e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	781b      	ldrb	r3, [r3, #0]
 80097d4:	f003 030f 	and.w	r3, r3, #15
 80097d8:	2101      	movs	r1, #1
 80097da:	fa01 f303 	lsl.w	r3, r1, r3
 80097de:	b29b      	uxth	r3, r3
 80097e0:	43db      	mvns	r3, r3
 80097e2:	68f9      	ldr	r1, [r7, #12]
 80097e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80097e8:	4013      	ands	r3, r2
 80097ea:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097f2:	69da      	ldr	r2, [r3, #28]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f003 030f 	and.w	r3, r3, #15
 80097fc:	2101      	movs	r1, #1
 80097fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009802:	b29b      	uxth	r3, r3
 8009804:	43db      	mvns	r3, r3
 8009806:	68f9      	ldr	r1, [r7, #12]
 8009808:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800980c:	4013      	ands	r3, r2
 800980e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	4413      	add	r3, r2
 8009818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	0159      	lsls	r1, r3, #5
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	440b      	add	r3, r1
 8009826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800982a:	4619      	mov	r1, r3
 800982c:	4b35      	ldr	r3, [pc, #212]	; (8009904 <USB_DeactivateEndpoint+0x1b0>)
 800982e:	4013      	ands	r3, r2
 8009830:	600b      	str	r3, [r1, #0]
 8009832:	e060      	b.n	80098f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800984a:	d11f      	bne.n	800988c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	68fa      	ldr	r2, [r7, #12]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009866:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800986a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	0151      	lsls	r1, r2, #5
 800987e:	68fa      	ldr	r2, [r7, #12]
 8009880:	440a      	add	r2, r1
 8009882:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009886:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800988a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009892:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	f003 030f 	and.w	r3, r3, #15
 800989c:	2101      	movs	r1, #1
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	041b      	lsls	r3, r3, #16
 80098a4:	43db      	mvns	r3, r3
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098ac:	4013      	ands	r3, r2
 80098ae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	f003 030f 	and.w	r3, r3, #15
 80098c0:	2101      	movs	r1, #1
 80098c2:	fa01 f303 	lsl.w	r3, r1, r3
 80098c6:	041b      	lsls	r3, r3, #16
 80098c8:	43db      	mvns	r3, r3
 80098ca:	68f9      	ldr	r1, [r7, #12]
 80098cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80098d0:	4013      	ands	r3, r2
 80098d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80098d4:	68bb      	ldr	r3, [r7, #8]
 80098d6:	015a      	lsls	r2, r3, #5
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	4413      	add	r3, r2
 80098dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	0159      	lsls	r1, r3, #5
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	440b      	add	r3, r1
 80098ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ee:	4619      	mov	r1, r3
 80098f0:	4b05      	ldr	r3, [pc, #20]	; (8009908 <USB_DeactivateEndpoint+0x1b4>)
 80098f2:	4013      	ands	r3, r2
 80098f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr
 8009904:	ec337800 	.word	0xec337800
 8009908:	eff37800 	.word	0xeff37800

0800990c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b08a      	sub	sp, #40	; 0x28
 8009910:	af02      	add	r7, sp, #8
 8009912:	60f8      	str	r0, [r7, #12]
 8009914:	60b9      	str	r1, [r7, #8]
 8009916:	4613      	mov	r3, r2
 8009918:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	785b      	ldrb	r3, [r3, #1]
 8009928:	2b01      	cmp	r3, #1
 800992a:	f040 815c 	bne.w	8009be6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d132      	bne.n	800999c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009942:	691b      	ldr	r3, [r3, #16]
 8009944:	69ba      	ldr	r2, [r7, #24]
 8009946:	0151      	lsls	r1, r2, #5
 8009948:	69fa      	ldr	r2, [r7, #28]
 800994a:	440a      	add	r2, r1
 800994c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009958:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800995a:	69bb      	ldr	r3, [r7, #24]
 800995c:	015a      	lsls	r2, r3, #5
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	69ba      	ldr	r2, [r7, #24]
 800996a:	0151      	lsls	r1, r2, #5
 800996c:	69fa      	ldr	r2, [r7, #28]
 800996e:	440a      	add	r2, r1
 8009970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009974:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800997a:	69bb      	ldr	r3, [r7, #24]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	69ba      	ldr	r2, [r7, #24]
 800998a:	0151      	lsls	r1, r2, #5
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	440a      	add	r2, r1
 8009990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009994:	0cdb      	lsrs	r3, r3, #19
 8009996:	04db      	lsls	r3, r3, #19
 8009998:	6113      	str	r3, [r2, #16]
 800999a:	e074      	b.n	8009a86 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	69ba      	ldr	r2, [r7, #24]
 80099ac:	0151      	lsls	r1, r2, #5
 80099ae:	69fa      	ldr	r2, [r7, #28]
 80099b0:	440a      	add	r2, r1
 80099b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b6:	0cdb      	lsrs	r3, r3, #19
 80099b8:	04db      	lsls	r3, r3, #19
 80099ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099bc:	69bb      	ldr	r3, [r7, #24]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	69ba      	ldr	r2, [r7, #24]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80099e0:	69bb      	ldr	r3, [r7, #24]
 80099e2:	015a      	lsls	r2, r3, #5
 80099e4:	69fb      	ldr	r3, [r7, #28]
 80099e6:	4413      	add	r3, r2
 80099e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ec:	691a      	ldr	r2, [r3, #16]
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	6959      	ldr	r1, [r3, #20]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	440b      	add	r3, r1
 80099f8:	1e59      	subs	r1, r3, #1
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a02:	04d9      	lsls	r1, r3, #19
 8009a04:	4b9d      	ldr	r3, [pc, #628]	; (8009c7c <USB_EPStartXfer+0x370>)
 8009a06:	400b      	ands	r3, r1
 8009a08:	69b9      	ldr	r1, [r7, #24]
 8009a0a:	0148      	lsls	r0, r1, #5
 8009a0c:	69f9      	ldr	r1, [r7, #28]
 8009a0e:	4401      	add	r1, r0
 8009a10:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a14:	4313      	orrs	r3, r2
 8009a16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	015a      	lsls	r2, r3, #5
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	4413      	add	r3, r2
 8009a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a24:	691a      	ldr	r2, [r3, #16]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a2e:	69b9      	ldr	r1, [r7, #24]
 8009a30:	0148      	lsls	r0, r1, #5
 8009a32:	69f9      	ldr	r1, [r7, #28]
 8009a34:	4401      	add	r1, r0
 8009a36:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	78db      	ldrb	r3, [r3, #3]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d11f      	bne.n	8009a86 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	69fb      	ldr	r3, [r7, #28]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	69ba      	ldr	r2, [r7, #24]
 8009a56:	0151      	lsls	r1, r2, #5
 8009a58:	69fa      	ldr	r2, [r7, #28]
 8009a5a:	440a      	add	r2, r1
 8009a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a60:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009a64:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	69ba      	ldr	r2, [r7, #24]
 8009a76:	0151      	lsls	r1, r2, #5
 8009a78:	69fa      	ldr	r2, [r7, #28]
 8009a7a:	440a      	add	r2, r1
 8009a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009a84:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d14b      	bne.n	8009b24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	691b      	ldr	r3, [r3, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d009      	beq.n	8009aa8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	691b      	ldr	r3, [r3, #16]
 8009aa6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	78db      	ldrb	r3, [r3, #3]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d128      	bne.n	8009b02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d110      	bne.n	8009ae2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	015a      	lsls	r2, r3, #5
 8009ac4:	69fb      	ldr	r3, [r7, #28]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	69ba      	ldr	r2, [r7, #24]
 8009ad0:	0151      	lsls	r1, r2, #5
 8009ad2:	69fa      	ldr	r2, [r7, #28]
 8009ad4:	440a      	add	r2, r1
 8009ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ada:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	e00f      	b.n	8009b02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	0151      	lsls	r1, r2, #5
 8009af4:	69fa      	ldr	r2, [r7, #28]
 8009af6:	440a      	add	r2, r1
 8009af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b02:	69bb      	ldr	r3, [r7, #24]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	69fb      	ldr	r3, [r7, #28]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	69ba      	ldr	r2, [r7, #24]
 8009b12:	0151      	lsls	r1, r2, #5
 8009b14:	69fa      	ldr	r2, [r7, #28]
 8009b16:	440a      	add	r2, r1
 8009b18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b1c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	e12f      	b.n	8009d84 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	015a      	lsls	r2, r3, #5
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	4413      	add	r3, r2
 8009b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	69ba      	ldr	r2, [r7, #24]
 8009b34:	0151      	lsls	r1, r2, #5
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	440a      	add	r2, r1
 8009b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	78db      	ldrb	r3, [r3, #3]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d015      	beq.n	8009b78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 8117 	beq.w	8009d84 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b56:	69fb      	ldr	r3, [r7, #28]
 8009b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	f003 030f 	and.w	r3, r3, #15
 8009b66:	2101      	movs	r1, #1
 8009b68:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6c:	69f9      	ldr	r1, [r7, #28]
 8009b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b72:	4313      	orrs	r3, r2
 8009b74:	634b      	str	r3, [r1, #52]	; 0x34
 8009b76:	e105      	b.n	8009d84 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b7e:	689b      	ldr	r3, [r3, #8]
 8009b80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d110      	bne.n	8009baa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	69fb      	ldr	r3, [r7, #28]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	69ba      	ldr	r2, [r7, #24]
 8009b98:	0151      	lsls	r1, r2, #5
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	440a      	add	r2, r1
 8009b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	e00f      	b.n	8009bca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009baa:	69bb      	ldr	r3, [r7, #24]
 8009bac:	015a      	lsls	r2, r3, #5
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	4413      	add	r3, r2
 8009bb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	69ba      	ldr	r2, [r7, #24]
 8009bba:	0151      	lsls	r1, r2, #5
 8009bbc:	69fa      	ldr	r2, [r7, #28]
 8009bbe:	440a      	add	r2, r1
 8009bc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bc8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	68d9      	ldr	r1, [r3, #12]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	781a      	ldrb	r2, [r3, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	b298      	uxth	r0, r3
 8009bd8:	79fb      	ldrb	r3, [r7, #7]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4603      	mov	r3, r0
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f000 fa2b 	bl	800a03a <USB_WritePacket>
 8009be4:	e0ce      	b.n	8009d84 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	69ba      	ldr	r2, [r7, #24]
 8009bf6:	0151      	lsls	r1, r2, #5
 8009bf8:	69fa      	ldr	r2, [r7, #28]
 8009bfa:	440a      	add	r2, r1
 8009bfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c00:	0cdb      	lsrs	r3, r3, #19
 8009c02:	04db      	lsls	r3, r3, #19
 8009c04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	69ba      	ldr	r2, [r7, #24]
 8009c16:	0151      	lsls	r1, r2, #5
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	440a      	add	r2, r1
 8009c1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009c24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009c28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	695b      	ldr	r3, [r3, #20]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d126      	bne.n	8009c80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	015a      	lsls	r2, r3, #5
 8009c36:	69fb      	ldr	r3, [r7, #28]
 8009c38:	4413      	add	r3, r2
 8009c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c3e:	691a      	ldr	r2, [r3, #16]
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	689b      	ldr	r3, [r3, #8]
 8009c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c48:	69b9      	ldr	r1, [r7, #24]
 8009c4a:	0148      	lsls	r0, r1, #5
 8009c4c:	69f9      	ldr	r1, [r7, #28]
 8009c4e:	4401      	add	r1, r0
 8009c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009c54:	4313      	orrs	r3, r2
 8009c56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	015a      	lsls	r2, r3, #5
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	4413      	add	r3, r2
 8009c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c64:	691b      	ldr	r3, [r3, #16]
 8009c66:	69ba      	ldr	r2, [r7, #24]
 8009c68:	0151      	lsls	r1, r2, #5
 8009c6a:	69fa      	ldr	r2, [r7, #28]
 8009c6c:	440a      	add	r2, r1
 8009c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c76:	6113      	str	r3, [r2, #16]
 8009c78:	e036      	b.n	8009ce8 <USB_EPStartXfer+0x3dc>
 8009c7a:	bf00      	nop
 8009c7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	695a      	ldr	r2, [r3, #20]
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	4413      	add	r3, r2
 8009c8a:	1e5a      	subs	r2, r3, #1
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c94:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca2:	691a      	ldr	r2, [r3, #16]
 8009ca4:	8afb      	ldrh	r3, [r7, #22]
 8009ca6:	04d9      	lsls	r1, r3, #19
 8009ca8:	4b39      	ldr	r3, [pc, #228]	; (8009d90 <USB_EPStartXfer+0x484>)
 8009caa:	400b      	ands	r3, r1
 8009cac:	69b9      	ldr	r1, [r7, #24]
 8009cae:	0148      	lsls	r0, r1, #5
 8009cb0:	69f9      	ldr	r1, [r7, #28]
 8009cb2:	4401      	add	r1, r0
 8009cb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8009cbc:	69bb      	ldr	r3, [r7, #24]
 8009cbe:	015a      	lsls	r2, r3, #5
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc8:	691a      	ldr	r2, [r3, #16]
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	8af9      	ldrh	r1, [r7, #22]
 8009cd0:	fb01 f303 	mul.w	r3, r1, r3
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	0148      	lsls	r0, r1, #5
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	4401      	add	r1, r0
 8009ce0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10d      	bne.n	8009d0a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	68d9      	ldr	r1, [r3, #12]
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d06:	460a      	mov	r2, r1
 8009d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	78db      	ldrb	r3, [r3, #3]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d128      	bne.n	8009d64 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e00f      	b.n	8009d64 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3720      	adds	r7, #32
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	1ff80000 	.word	0x1ff80000

08009d94 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	4613      	mov	r3, r2
 8009da0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8009da6:	68bb      	ldr	r3, [r7, #8]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	2b01      	cmp	r3, #1
 8009db2:	f040 80cd 	bne.w	8009f50 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d132      	bne.n	8009e24 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	693a      	ldr	r2, [r7, #16]
 8009dce:	0151      	lsls	r1, r2, #5
 8009dd0:	697a      	ldr	r2, [r7, #20]
 8009dd2:	440a      	add	r2, r1
 8009dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dd8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ddc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009de0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009de2:	693b      	ldr	r3, [r7, #16]
 8009de4:	015a      	lsls	r2, r3, #5
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	4413      	add	r3, r2
 8009dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dee:	691b      	ldr	r3, [r3, #16]
 8009df0:	693a      	ldr	r2, [r7, #16]
 8009df2:	0151      	lsls	r1, r2, #5
 8009df4:	697a      	ldr	r2, [r7, #20]
 8009df6:	440a      	add	r2, r1
 8009df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	015a      	lsls	r2, r3, #5
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	4413      	add	r3, r2
 8009e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	693a      	ldr	r2, [r7, #16]
 8009e12:	0151      	lsls	r1, r2, #5
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	440a      	add	r2, r1
 8009e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1c:	0cdb      	lsrs	r3, r3, #19
 8009e1e:	04db      	lsls	r3, r3, #19
 8009e20:	6113      	str	r3, [r2, #16]
 8009e22:	e04e      	b.n	8009ec2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e24:	693b      	ldr	r3, [r7, #16]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	691b      	ldr	r3, [r3, #16]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	0151      	lsls	r1, r2, #5
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	440a      	add	r2, r1
 8009e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3e:	0cdb      	lsrs	r3, r3, #19
 8009e40:	04db      	lsls	r3, r3, #19
 8009e42:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e50:	691b      	ldr	r3, [r3, #16]
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e5e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e62:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e66:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	695a      	ldr	r2, [r3, #20]
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d903      	bls.n	8009e7c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	689a      	ldr	r2, [r3, #8]
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e7c:	693b      	ldr	r3, [r7, #16]
 8009e7e:	015a      	lsls	r2, r3, #5
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	4413      	add	r3, r2
 8009e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	0151      	lsls	r1, r2, #5
 8009e8e:	697a      	ldr	r2, [r7, #20]
 8009e90:	440a      	add	r2, r1
 8009e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	015a      	lsls	r2, r3, #5
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	4413      	add	r3, r2
 8009ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009eb2:	6939      	ldr	r1, [r7, #16]
 8009eb4:	0148      	lsls	r0, r1, #5
 8009eb6:	6979      	ldr	r1, [r7, #20]
 8009eb8:	4401      	add	r1, r0
 8009eba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d11e      	bne.n	8009f06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d009      	beq.n	8009ee4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	015a      	lsls	r2, r3, #5
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	4413      	add	r3, r2
 8009ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009edc:	461a      	mov	r2, r3
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ee4:	693b      	ldr	r3, [r7, #16]
 8009ee6:	015a      	lsls	r2, r3, #5
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	4413      	add	r3, r2
 8009eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	693a      	ldr	r2, [r7, #16]
 8009ef4:	0151      	lsls	r1, r2, #5
 8009ef6:	697a      	ldr	r2, [r7, #20]
 8009ef8:	440a      	add	r2, r1
 8009efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009efe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f02:	6013      	str	r3, [r2, #0]
 8009f04:	e092      	b.n	800a02c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	0151      	lsls	r1, r2, #5
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	440a      	add	r2, r1
 8009f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009f24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d07e      	beq.n	800a02c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009f2e:	697b      	ldr	r3, [r7, #20]
 8009f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	f003 030f 	and.w	r3, r3, #15
 8009f3e:	2101      	movs	r1, #1
 8009f40:	fa01 f303 	lsl.w	r3, r1, r3
 8009f44:	6979      	ldr	r1, [r7, #20]
 8009f46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	634b      	str	r3, [r1, #52]	; 0x34
 8009f4e:	e06d      	b.n	800a02c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	693a      	ldr	r2, [r7, #16]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6a:	0cdb      	lsrs	r3, r3, #19
 8009f6c:	04db      	lsls	r3, r3, #19
 8009f6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009f70:	693b      	ldr	r3, [r7, #16]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f7c:	691b      	ldr	r3, [r3, #16]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	0151      	lsls	r1, r2, #5
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	440a      	add	r2, r1
 8009f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009f8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009f92:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	695b      	ldr	r3, [r3, #20]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	689a      	ldr	r2, [r3, #8]
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fa4:	693b      	ldr	r3, [r7, #16]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	697b      	ldr	r3, [r7, #20]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	693a      	ldr	r2, [r7, #16]
 8009fb4:	0151      	lsls	r1, r2, #5
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	440a      	add	r2, r1
 8009fba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fbe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009fc2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	015a      	lsls	r2, r3, #5
 8009fc8:	697b      	ldr	r3, [r7, #20]
 8009fca:	4413      	add	r3, r2
 8009fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd0:	691a      	ldr	r2, [r3, #16]
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fda:	6939      	ldr	r1, [r7, #16]
 8009fdc:	0148      	lsls	r0, r1, #5
 8009fde:	6979      	ldr	r1, [r7, #20]
 8009fe0:	4401      	add	r1, r0
 8009fe2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d10d      	bne.n	800a00c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d009      	beq.n	800a00c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	68d9      	ldr	r1, [r3, #12]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a008:	460a      	mov	r2, r1
 800a00a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	015a      	lsls	r2, r3, #5
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	4413      	add	r3, r2
 800a014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	693a      	ldr	r2, [r7, #16]
 800a01c:	0151      	lsls	r1, r2, #5
 800a01e:	697a      	ldr	r2, [r7, #20]
 800a020:	440a      	add	r2, r1
 800a022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a026:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a02a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a02c:	2300      	movs	r3, #0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	371c      	adds	r7, #28
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr

0800a03a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a03a:	b480      	push	{r7}
 800a03c:	b089      	sub	sp, #36	; 0x24
 800a03e:	af00      	add	r7, sp, #0
 800a040:	60f8      	str	r0, [r7, #12]
 800a042:	60b9      	str	r1, [r7, #8]
 800a044:	4611      	mov	r1, r2
 800a046:	461a      	mov	r2, r3
 800a048:	460b      	mov	r3, r1
 800a04a:	71fb      	strb	r3, [r7, #7]
 800a04c:	4613      	mov	r3, r2
 800a04e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a058:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d11a      	bne.n	800a096 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a060:	88bb      	ldrh	r3, [r7, #4]
 800a062:	3303      	adds	r3, #3
 800a064:	089b      	lsrs	r3, r3, #2
 800a066:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a068:	2300      	movs	r3, #0
 800a06a:	61bb      	str	r3, [r7, #24]
 800a06c:	e00f      	b.n	800a08e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a06e:	79fb      	ldrb	r3, [r7, #7]
 800a070:	031a      	lsls	r2, r3, #12
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	4413      	add	r3, r2
 800a076:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a07a:	461a      	mov	r2, r3
 800a07c:	69fb      	ldr	r3, [r7, #28]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	3304      	adds	r3, #4
 800a086:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a088:	69bb      	ldr	r3, [r7, #24]
 800a08a:	3301      	adds	r3, #1
 800a08c:	61bb      	str	r3, [r7, #24]
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	d3eb      	bcc.n	800a06e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a096:	2300      	movs	r3, #0
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3724      	adds	r7, #36	; 0x24
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b089      	sub	sp, #36	; 0x24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a0ba:	88fb      	ldrh	r3, [r7, #6]
 800a0bc:	3303      	adds	r3, #3
 800a0be:	089b      	lsrs	r3, r3, #2
 800a0c0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	e00b      	b.n	800a0e0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a0da:	69bb      	ldr	r3, [r7, #24]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	61bb      	str	r3, [r7, #24]
 800a0e0:	69ba      	ldr	r2, [r7, #24]
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d3ef      	bcc.n	800a0c8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a0e8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3724      	adds	r7, #36	; 0x24
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr

0800a0f6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a0f6:	b480      	push	{r7}
 800a0f8:	b085      	sub	sp, #20
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]
 800a0fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	781b      	ldrb	r3, [r3, #0]
 800a108:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	785b      	ldrb	r3, [r3, #1]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d12c      	bne.n	800a16c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	db12      	blt.n	800a14a <USB_EPSetStall+0x54>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d00f      	beq.n	800a14a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a12a:	68bb      	ldr	r3, [r7, #8]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a144:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a148:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68ba      	ldr	r2, [r7, #8]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	68fa      	ldr	r2, [r7, #12]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a164:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a168:	6013      	str	r3, [r2, #0]
 800a16a:	e02b      	b.n	800a1c4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	015a      	lsls	r2, r3, #5
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	4413      	add	r3, r2
 800a174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	db12      	blt.n	800a1a4 <USB_EPSetStall+0xae>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d00f      	beq.n	800a1a4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	015a      	lsls	r2, r3, #5
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	4413      	add	r3, r2
 800a18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68ba      	ldr	r2, [r7, #8]
 800a194:	0151      	lsls	r1, r2, #5
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	440a      	add	r2, r1
 800a19a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a19e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a1a2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68ba      	ldr	r2, [r7, #8]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a1be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a1c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b085      	sub	sp, #20
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	6078      	str	r0, [r7, #4]
 800a1da:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d128      	bne.n	800a240 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	015a      	lsls	r2, r3, #5
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	68ba      	ldr	r2, [r7, #8]
 800a1fe:	0151      	lsls	r1, r2, #5
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	440a      	add	r2, r1
 800a204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a208:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a20c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a20e:	683b      	ldr	r3, [r7, #0]
 800a210:	78db      	ldrb	r3, [r3, #3]
 800a212:	2b03      	cmp	r3, #3
 800a214:	d003      	beq.n	800a21e <USB_EPClearStall+0x4c>
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	78db      	ldrb	r3, [r3, #3]
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d138      	bne.n	800a290 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	68ba      	ldr	r2, [r7, #8]
 800a22e:	0151      	lsls	r1, r2, #5
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	440a      	add	r2, r1
 800a234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a23c:	6013      	str	r3, [r2, #0]
 800a23e:	e027      	b.n	800a290 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	015a      	lsls	r2, r3, #5
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	4413      	add	r3, r2
 800a248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	0151      	lsls	r1, r2, #5
 800a252:	68fa      	ldr	r2, [r7, #12]
 800a254:	440a      	add	r2, r1
 800a256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a25a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a25e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	78db      	ldrb	r3, [r3, #3]
 800a264:	2b03      	cmp	r3, #3
 800a266:	d003      	beq.n	800a270 <USB_EPClearStall+0x9e>
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	78db      	ldrb	r3, [r3, #3]
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d10f      	bne.n	800a290 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	015a      	lsls	r2, r3, #5
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4413      	add	r3, r2
 800a278:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	68ba      	ldr	r2, [r7, #8]
 800a280:	0151      	lsls	r1, r2, #5
 800a282:	68fa      	ldr	r2, [r7, #12]
 800a284:	440a      	add	r2, r1
 800a286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a28a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a28e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3714      	adds	r7, #20
 800a296:	46bd      	mov	sp, r7
 800a298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29c:	4770      	bx	lr

0800a29e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a29e:	b480      	push	{r7}
 800a2a0:	b085      	sub	sp, #20
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a2c0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2c8:	681a      	ldr	r2, [r3, #0]
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	011b      	lsls	r3, r3, #4
 800a2ce:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a2d2:	68f9      	ldr	r1, [r7, #12]
 800a2d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3714      	adds	r7, #20
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b085      	sub	sp, #20
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a304:	f023 0303 	bic.w	r3, r3, #3
 800a308:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a318:	f023 0302 	bic.w	r3, r3, #2
 800a31c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	68fa      	ldr	r2, [r7, #12]
 800a342:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a346:	f023 0303 	bic.w	r3, r3, #3
 800a34a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a35a:	f043 0302 	orr.w	r3, r3, #2
 800a35e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	3714      	adds	r7, #20
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	695b      	ldr	r3, [r3, #20]
 800a37a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	4013      	ands	r3, r2
 800a384:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a386:	68fb      	ldr	r3, [r7, #12]
}
 800a388:	4618      	mov	r0, r3
 800a38a:	3714      	adds	r7, #20
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a394:	b480      	push	{r7}
 800a396:	b085      	sub	sp, #20
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3a6:	699b      	ldr	r3, [r3, #24]
 800a3a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3b0:	69db      	ldr	r3, [r3, #28]
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	4013      	ands	r3, r2
 800a3b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	0c1b      	lsrs	r3, r3, #16
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3da:	699b      	ldr	r3, [r3, #24]
 800a3dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	68ba      	ldr	r2, [r7, #8]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	b29b      	uxth	r3, r3
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3714      	adds	r7, #20
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fa:	4770      	bx	lr

0800a3fc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a40c:	78fb      	ldrb	r3, [r7, #3]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	4413      	add	r3, r2
 800a414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	68ba      	ldr	r2, [r7, #8]
 800a426:	4013      	ands	r3, r2
 800a428:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a42a:	68bb      	ldr	r3, [r7, #8]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	460b      	mov	r3, r1
 800a442:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a44e:	691b      	ldr	r3, [r3, #16]
 800a450:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a45c:	78fb      	ldrb	r3, [r7, #3]
 800a45e:	f003 030f 	and.w	r3, r3, #15
 800a462:	68fa      	ldr	r2, [r7, #12]
 800a464:	fa22 f303 	lsr.w	r3, r2, r3
 800a468:	01db      	lsls	r3, r3, #7
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	693a      	ldr	r2, [r7, #16]
 800a46e:	4313      	orrs	r3, r2
 800a470:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	015a      	lsls	r2, r3, #5
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	4413      	add	r3, r2
 800a47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	4013      	ands	r3, r2
 800a484:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a486:	68bb      	ldr	r3, [r7, #8]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	371c      	adds	r7, #28
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr

0800a494 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a494:	b480      	push	{r7}
 800a496:	b083      	sub	sp, #12
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	f003 0301 	and.w	r3, r3, #1
}
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	370c      	adds	r7, #12
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ae:	4770      	bx	lr

0800a4b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b085      	sub	sp, #20
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ca:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a4ce:	f023 0307 	bic.w	r3, r3, #7
 800a4d2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4e6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3714      	adds	r7, #20
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f4:	4770      	bx	lr
	...

0800a4f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	460b      	mov	r3, r1
 800a502:	607a      	str	r2, [r7, #4]
 800a504:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	333c      	adds	r3, #60	; 0x3c
 800a50e:	3304      	adds	r3, #4
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	4a26      	ldr	r2, [pc, #152]	; (800a5b0 <USB_EP0_OutStart+0xb8>)
 800a518:	4293      	cmp	r3, r2
 800a51a:	d90a      	bls.n	800a532 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a528:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a52c:	d101      	bne.n	800a532 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	e037      	b.n	800a5a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a538:	461a      	mov	r2, r3
 800a53a:	2300      	movs	r3, #0
 800a53c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	697a      	ldr	r2, [r7, #20]
 800a548:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a54c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a550:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a560:	f043 0318 	orr.w	r3, r3, #24
 800a564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	697a      	ldr	r2, [r7, #20]
 800a570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a574:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a578:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a57a:	7afb      	ldrb	r3, [r7, #11]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d10f      	bne.n	800a5a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a586:	461a      	mov	r2, r3
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	697a      	ldr	r2, [r7, #20]
 800a596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a59a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a59e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a5a0:	2300      	movs	r3, #0
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	371c      	adds	r7, #28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	4f54300a 	.word	0x4f54300a

0800a5b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b085      	sub	sp, #20
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	3301      	adds	r3, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	4a13      	ldr	r2, [pc, #76]	; (800a618 <USB_CoreReset+0x64>)
 800a5ca:	4293      	cmp	r3, r2
 800a5cc:	d901      	bls.n	800a5d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e01b      	b.n	800a60a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	691b      	ldr	r3, [r3, #16]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	daf2      	bge.n	800a5c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	f043 0201 	orr.w	r2, r3, #1
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	60fb      	str	r3, [r7, #12]
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	4a09      	ldr	r2, [pc, #36]	; (800a618 <USB_CoreReset+0x64>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d901      	bls.n	800a5fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e006      	b.n	800a60a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	691b      	ldr	r3, [r3, #16]
 800a600:	f003 0301 	and.w	r3, r3, #1
 800a604:	2b01      	cmp	r3, #1
 800a606:	d0f0      	beq.n	800a5ea <USB_CoreReset+0x36>

  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3714      	adds	r7, #20
 800a60e:	46bd      	mov	sp, r7
 800a610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	00030d40 	.word	0x00030d40

0800a61c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a620:	4904      	ldr	r1, [pc, #16]	; (800a634 <MX_FATFS_Init+0x18>)
 800a622:	4805      	ldr	r0, [pc, #20]	; (800a638 <MX_FATFS_Init+0x1c>)
 800a624:	f002 f9c0 	bl	800c9a8 <FATFS_LinkDriver>
 800a628:	4603      	mov	r3, r0
 800a62a:	461a      	mov	r2, r3
 800a62c:	4b03      	ldr	r3, [pc, #12]	; (800a63c <MX_FATFS_Init+0x20>)
 800a62e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a630:	bf00      	nop
 800a632:	bd80      	pop	{r7, pc}
 800a634:	200045d4 	.word	0x200045d4
 800a638:	2000000c 	.word	0x2000000c
 800a63c:	200045d8 	.word	0x200045d8

0800a640 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b082      	sub	sp, #8
 800a644:	af00      	add	r7, sp, #0
 800a646:	4603      	mov	r3, r0
 800a648:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800a64a:	79fb      	ldrb	r3, [r7, #7]
 800a64c:	4618      	mov	r0, r3
 800a64e:	f000 f9d7 	bl	800aa00 <USER_SPI_initialize>
 800a652:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b082      	sub	sp, #8
 800a660:	af00      	add	r7, sp, #0
 800a662:	4603      	mov	r3, r0
 800a664:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	4618      	mov	r0, r3
 800a66a:	f000 fab3 	bl	800abd4 <USER_SPI_status>
 800a66e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a670:	4618      	mov	r0, r3
 800a672:	3708      	adds	r7, #8
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b084      	sub	sp, #16
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60b9      	str	r1, [r7, #8]
 800a680:	607a      	str	r2, [r7, #4]
 800a682:	603b      	str	r3, [r7, #0]
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800a688:	7bf8      	ldrb	r0, [r7, #15]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	68b9      	ldr	r1, [r7, #8]
 800a690:	f000 fab6 	bl	800ac00 <USER_SPI_read>
 800a694:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a696:	4618      	mov	r0, r3
 800a698:	3710      	adds	r7, #16
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b084      	sub	sp, #16
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800a6ae:	7bf8      	ldrb	r0, [r7, #15]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	68b9      	ldr	r1, [r7, #8]
 800a6b6:	f000 fb09 	bl	800accc <USER_SPI_write>
 800a6ba:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3710      	adds	r7, #16
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	603a      	str	r2, [r7, #0]
 800a6ce:	71fb      	strb	r3, [r7, #7]
 800a6d0:	460b      	mov	r3, r1
 800a6d2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800a6d4:	79b9      	ldrb	r1, [r7, #6]
 800a6d6:	79fb      	ldrb	r3, [r7, #7]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f000 fb72 	bl	800adc4 <USER_SPI_ioctl>
 800a6e0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	3708      	adds	r7, #8
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
	...

0800a6ec <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800a6f4:	f7f9 fa08 	bl	8003b08 <HAL_GetTick>
 800a6f8:	4602      	mov	r2, r0
 800a6fa:	4b04      	ldr	r3, [pc, #16]	; (800a70c <SPI_Timer_On+0x20>)
 800a6fc:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800a6fe:	4a04      	ldr	r2, [pc, #16]	; (800a710 <SPI_Timer_On+0x24>)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6013      	str	r3, [r2, #0]
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	20004a40 	.word	0x20004a40
 800a710:	20004a44 	.word	0x20004a44

0800a714 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800a718:	f7f9 f9f6 	bl	8003b08 <HAL_GetTick>
 800a71c:	4602      	mov	r2, r0
 800a71e:	4b06      	ldr	r3, [pc, #24]	; (800a738 <SPI_Timer_Status+0x24>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	1ad2      	subs	r2, r2, r3
 800a724:	4b05      	ldr	r3, [pc, #20]	; (800a73c <SPI_Timer_Status+0x28>)
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	429a      	cmp	r2, r3
 800a72a:	bf34      	ite	cc
 800a72c:	2301      	movcc	r3, #1
 800a72e:	2300      	movcs	r3, #0
 800a730:	b2db      	uxtb	r3, r3
}
 800a732:	4618      	mov	r0, r3
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	20004a40 	.word	0x20004a40
 800a73c:	20004a44 	.word	0x20004a44

0800a740 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b086      	sub	sp, #24
 800a744:	af02      	add	r7, sp, #8
 800a746:	4603      	mov	r3, r0
 800a748:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800a74a:	f107 020f 	add.w	r2, r7, #15
 800a74e:	1df9      	adds	r1, r7, #7
 800a750:	2332      	movs	r3, #50	; 0x32
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	2301      	movs	r3, #1
 800a756:	4804      	ldr	r0, [pc, #16]	; (800a768 <xchg_spi+0x28>)
 800a758:	f7fd fade 	bl	8007d18 <HAL_SPI_TransmitReceive>
    return rxDat;
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200044f4 	.word	0x200044f4

0800a76c <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800a76c:	b590      	push	{r4, r7, lr}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800a776:	2300      	movs	r3, #0
 800a778:	60fb      	str	r3, [r7, #12]
 800a77a:	e00a      	b.n	800a792 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	18d4      	adds	r4, r2, r3
 800a782:	20ff      	movs	r0, #255	; 0xff
 800a784:	f7ff ffdc 	bl	800a740 <xchg_spi>
 800a788:	4603      	mov	r3, r0
 800a78a:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	3301      	adds	r3, #1
 800a790:	60fb      	str	r3, [r7, #12]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d3f0      	bcc.n	800a77c <rcvr_spi_multi+0x10>
    }
}
 800a79a:	bf00      	nop
 800a79c:	3714      	adds	r7, #20
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd90      	pop	{r4, r7, pc}

0800a7a2 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
 800a7aa:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	e009      	b.n	800a7c6 <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7ff ffc0 	bl	800a740 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	60fb      	str	r3, [r7, #12]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d3f1      	bcc.n	800a7b2 <xmit_spi_multi+0x10>
    }
}
 800a7ce:	bf00      	nop
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b086      	sub	sp, #24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800a7de:	f7f9 f993 	bl	8003b08 <HAL_GetTick>
 800a7e2:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800a7e8:	20ff      	movs	r0, #255	; 0xff
 800a7ea:	f7ff ffa9 	bl	800a740 <xchg_spi>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	2bff      	cmp	r3, #255	; 0xff
 800a7f6:	d007      	beq.n	800a808 <wait_ready+0x32>
 800a7f8:	f7f9 f986 	bl	8003b08 <HAL_GetTick>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	697b      	ldr	r3, [r7, #20]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	693a      	ldr	r2, [r7, #16]
 800a804:	429a      	cmp	r2, r3
 800a806:	d8ef      	bhi.n	800a7e8 <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800a808:	7bfb      	ldrb	r3, [r7, #15]
 800a80a:	2bff      	cmp	r3, #255	; 0xff
 800a80c:	bf0c      	ite	eq
 800a80e:	2301      	moveq	r3, #1
 800a810:	2300      	movne	r3, #0
 800a812:	b2db      	uxtb	r3, r3
}
 800a814:	4618      	mov	r0, r3
 800a816:	3718      	adds	r7, #24
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800a820:	2201      	movs	r2, #1
 800a822:	2110      	movs	r1, #16
 800a824:	4803      	ldr	r0, [pc, #12]	; (800a834 <despiselect+0x18>)
 800a826:	f7f9 fe83 	bl	8004530 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800a82a:	20ff      	movs	r0, #255	; 0xff
 800a82c:	f7ff ff88 	bl	800a740 <xchg_spi>

}
 800a830:	bf00      	nop
 800a832:	bd80      	pop	{r7, pc}
 800a834:	40020800 	.word	0x40020800

0800a838 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800a83c:	2200      	movs	r2, #0
 800a83e:	2110      	movs	r1, #16
 800a840:	4809      	ldr	r0, [pc, #36]	; (800a868 <spiselect+0x30>)
 800a842:	f7f9 fe75 	bl	8004530 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800a846:	20ff      	movs	r0, #255	; 0xff
 800a848:	f7ff ff7a 	bl	800a740 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800a84c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a850:	f7ff ffc1 	bl	800a7d6 <wait_ready>
 800a854:	4603      	mov	r3, r0
 800a856:	2b00      	cmp	r3, #0
 800a858:	d001      	beq.n	800a85e <spiselect+0x26>
 800a85a:	2301      	movs	r3, #1
 800a85c:	e002      	b.n	800a864 <spiselect+0x2c>

    despiselect();
 800a85e:	f7ff ffdd 	bl	800a81c <despiselect>
    return 0;   /* Timeout */
 800a862:	2300      	movs	r3, #0
}
 800a864:	4618      	mov	r0, r3
 800a866:	bd80      	pop	{r7, pc}
 800a868:	40020800 	.word	0x40020800

0800a86c <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800a876:	20c8      	movs	r0, #200	; 0xc8
 800a878:	f7ff ff38 	bl	800a6ec <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800a87c:	20ff      	movs	r0, #255	; 0xff
 800a87e:	f7ff ff5f 	bl	800a740 <xchg_spi>
 800a882:	4603      	mov	r3, r0
 800a884:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800a886:	7bfb      	ldrb	r3, [r7, #15]
 800a888:	2bff      	cmp	r3, #255	; 0xff
 800a88a:	d104      	bne.n	800a896 <rcvr_datablock+0x2a>
 800a88c:	f7ff ff42 	bl	800a714 <SPI_Timer_Status>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1f2      	bne.n	800a87c <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800a896:	7bfb      	ldrb	r3, [r7, #15]
 800a898:	2bfe      	cmp	r3, #254	; 0xfe
 800a89a:	d001      	beq.n	800a8a0 <rcvr_datablock+0x34>
 800a89c:	2300      	movs	r3, #0
 800a89e:	e00a      	b.n	800a8b6 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff ff62 	bl	800a76c <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800a8a8:	20ff      	movs	r0, #255	; 0xff
 800a8aa:	f7ff ff49 	bl	800a740 <xchg_spi>
 800a8ae:	20ff      	movs	r0, #255	; 0xff
 800a8b0:	f7ff ff46 	bl	800a740 <xchg_spi>

    return 1;                       /* Function succeeded */
 800a8b4:	2301      	movs	r3, #1
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3710      	adds	r7, #16
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}

0800a8be <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800a8be:	b580      	push	{r7, lr}
 800a8c0:	b084      	sub	sp, #16
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800a8ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a8ce:	f7ff ff82 	bl	800a7d6 <wait_ready>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d101      	bne.n	800a8dc <xmit_datablock+0x1e>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	e01e      	b.n	800a91a <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7ff ff2e 	bl	800a740 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800a8e4:	78fb      	ldrb	r3, [r7, #3]
 800a8e6:	2bfd      	cmp	r3, #253	; 0xfd
 800a8e8:	d016      	beq.n	800a918 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800a8ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff ff57 	bl	800a7a2 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800a8f4:	20ff      	movs	r0, #255	; 0xff
 800a8f6:	f7ff ff23 	bl	800a740 <xchg_spi>
 800a8fa:	20ff      	movs	r0, #255	; 0xff
 800a8fc:	f7ff ff20 	bl	800a740 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800a900:	20ff      	movs	r0, #255	; 0xff
 800a902:	f7ff ff1d 	bl	800a740 <xchg_spi>
 800a906:	4603      	mov	r3, r0
 800a908:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	f003 031f 	and.w	r3, r3, #31
 800a910:	2b05      	cmp	r3, #5
 800a912:	d001      	beq.n	800a918 <xmit_datablock+0x5a>
 800a914:	2300      	movs	r3, #0
 800a916:	e000      	b.n	800a91a <xmit_datablock+0x5c>
    }
    return 1;
 800a918:	2301      	movs	r3, #1
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800a922:	b580      	push	{r7, lr}
 800a924:	b084      	sub	sp, #16
 800a926:	af00      	add	r7, sp, #0
 800a928:	4603      	mov	r3, r0
 800a92a:	6039      	str	r1, [r7, #0]
 800a92c:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800a92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a932:	2b00      	cmp	r3, #0
 800a934:	da0e      	bge.n	800a954 <send_cmd+0x32>
        cmd &= 0x7F;
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a93c:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800a93e:	2100      	movs	r1, #0
 800a940:	2037      	movs	r0, #55	; 0x37
 800a942:	f7ff ffee 	bl	800a922 <send_cmd>
 800a946:	4603      	mov	r3, r0
 800a948:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800a94a:	7bbb      	ldrb	r3, [r7, #14]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d901      	bls.n	800a954 <send_cmd+0x32>
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	e051      	b.n	800a9f8 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	2b0c      	cmp	r3, #12
 800a958:	d008      	beq.n	800a96c <send_cmd+0x4a>
        despiselect();
 800a95a:	f7ff ff5f 	bl	800a81c <despiselect>
        if (!spiselect()) return 0xFF;
 800a95e:	f7ff ff6b 	bl	800a838 <spiselect>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <send_cmd+0x4a>
 800a968:	23ff      	movs	r3, #255	; 0xff
 800a96a:	e045      	b.n	800a9f8 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a972:	b2db      	uxtb	r3, r3
 800a974:	4618      	mov	r0, r3
 800a976:	f7ff fee3 	bl	800a740 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	0e1b      	lsrs	r3, r3, #24
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	4618      	mov	r0, r3
 800a982:	f7ff fedd 	bl	800a740 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	0c1b      	lsrs	r3, r3, #16
 800a98a:	b2db      	uxtb	r3, r3
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff fed7 	bl	800a740 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	0a1b      	lsrs	r3, r3, #8
 800a996:	b2db      	uxtb	r3, r3
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fed1 	bl	800a740 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f7ff fecc 	bl	800a740 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800a9ac:	79fb      	ldrb	r3, [r7, #7]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d101      	bne.n	800a9b6 <send_cmd+0x94>
 800a9b2:	2395      	movs	r3, #149	; 0x95
 800a9b4:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	2b08      	cmp	r3, #8
 800a9ba:	d101      	bne.n	800a9c0 <send_cmd+0x9e>
 800a9bc:	2387      	movs	r3, #135	; 0x87
 800a9be:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800a9c0:	7bfb      	ldrb	r3, [r7, #15]
 800a9c2:	4618      	mov	r0, r3
 800a9c4:	f7ff febc 	bl	800a740 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800a9c8:	79fb      	ldrb	r3, [r7, #7]
 800a9ca:	2b0c      	cmp	r3, #12
 800a9cc:	d102      	bne.n	800a9d4 <send_cmd+0xb2>
 800a9ce:	20ff      	movs	r0, #255	; 0xff
 800a9d0:	f7ff feb6 	bl	800a740 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800a9d4:	230a      	movs	r3, #10
 800a9d6:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800a9d8:	20ff      	movs	r0, #255	; 0xff
 800a9da:	f7ff feb1 	bl	800a740 <xchg_spi>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800a9e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da05      	bge.n	800a9f6 <send_cmd+0xd4>
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	73fb      	strb	r3, [r7, #15]
 800a9f0:	7bfb      	ldrb	r3, [r7, #15]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1f0      	bne.n	800a9d8 <send_cmd+0xb6>

    return res;                         /* Return received response */
 800a9f6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800aa00:	b590      	push	{r4, r7, lr}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800aa0a:	79fb      	ldrb	r3, [r7, #7]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d001      	beq.n	800aa14 <USER_SPI_initialize+0x14>
 800aa10:	2301      	movs	r3, #1
 800aa12:	e0d4      	b.n	800abbe <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800aa14:	4b6c      	ldr	r3, [pc, #432]	; (800abc8 <USER_SPI_initialize+0x1c8>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d003      	beq.n	800aa2a <USER_SPI_initialize+0x2a>
 800aa22:	4b69      	ldr	r3, [pc, #420]	; (800abc8 <USER_SPI_initialize+0x1c8>)
 800aa24:	781b      	ldrb	r3, [r3, #0]
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	e0c9      	b.n	800abbe <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800aa2a:	4b68      	ldr	r3, [pc, #416]	; (800abcc <USER_SPI_initialize+0x1cc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681a      	ldr	r2, [r3, #0]
 800aa30:	4b66      	ldr	r3, [pc, #408]	; (800abcc <USER_SPI_initialize+0x1cc>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800aa38:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800aa3a:	230a      	movs	r3, #10
 800aa3c:	73fb      	strb	r3, [r7, #15]
 800aa3e:	e005      	b.n	800aa4c <USER_SPI_initialize+0x4c>
 800aa40:	20ff      	movs	r0, #255	; 0xff
 800aa42:	f7ff fe7d 	bl	800a740 <xchg_spi>
 800aa46:	7bfb      	ldrb	r3, [r7, #15]
 800aa48:	3b01      	subs	r3, #1
 800aa4a:	73fb      	strb	r3, [r7, #15]
 800aa4c:	7bfb      	ldrb	r3, [r7, #15]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d1f6      	bne.n	800aa40 <USER_SPI_initialize+0x40>

    ty = 0;
 800aa52:	2300      	movs	r3, #0
 800aa54:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800aa56:	2100      	movs	r1, #0
 800aa58:	2000      	movs	r0, #0
 800aa5a:	f7ff ff62 	bl	800a922 <send_cmd>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	f040 808b 	bne.w	800ab7c <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800aa66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800aa6a:	f7ff fe3f 	bl	800a6ec <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800aa6e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800aa72:	2008      	movs	r0, #8
 800aa74:	f7ff ff55 	bl	800a922 <send_cmd>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d151      	bne.n	800ab22 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800aa7e:	2300      	movs	r3, #0
 800aa80:	73fb      	strb	r3, [r7, #15]
 800aa82:	e00d      	b.n	800aaa0 <USER_SPI_initialize+0xa0>
 800aa84:	7bfc      	ldrb	r4, [r7, #15]
 800aa86:	20ff      	movs	r0, #255	; 0xff
 800aa88:	f7ff fe5a 	bl	800a740 <xchg_spi>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	461a      	mov	r2, r3
 800aa90:	f107 0310 	add.w	r3, r7, #16
 800aa94:	4423      	add	r3, r4
 800aa96:	f803 2c08 	strb.w	r2, [r3, #-8]
 800aa9a:	7bfb      	ldrb	r3, [r7, #15]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	73fb      	strb	r3, [r7, #15]
 800aaa0:	7bfb      	ldrb	r3, [r7, #15]
 800aaa2:	2b03      	cmp	r3, #3
 800aaa4:	d9ee      	bls.n	800aa84 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800aaa6:	7abb      	ldrb	r3, [r7, #10]
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d167      	bne.n	800ab7c <USER_SPI_initialize+0x17c>
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	2baa      	cmp	r3, #170	; 0xaa
 800aab0:	d164      	bne.n	800ab7c <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800aab2:	bf00      	nop
 800aab4:	f7ff fe2e 	bl	800a714 <SPI_Timer_Status>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d007      	beq.n	800aace <USER_SPI_initialize+0xce>
 800aabe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800aac2:	20a9      	movs	r0, #169	; 0xa9
 800aac4:	f7ff ff2d 	bl	800a922 <send_cmd>
 800aac8:	4603      	mov	r3, r0
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1f2      	bne.n	800aab4 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800aace:	f7ff fe21 	bl	800a714 <SPI_Timer_Status>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d051      	beq.n	800ab7c <USER_SPI_initialize+0x17c>
 800aad8:	2100      	movs	r1, #0
 800aada:	203a      	movs	r0, #58	; 0x3a
 800aadc:	f7ff ff21 	bl	800a922 <send_cmd>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d14a      	bne.n	800ab7c <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
 800aaea:	e00d      	b.n	800ab08 <USER_SPI_initialize+0x108>
 800aaec:	7bfc      	ldrb	r4, [r7, #15]
 800aaee:	20ff      	movs	r0, #255	; 0xff
 800aaf0:	f7ff fe26 	bl	800a740 <xchg_spi>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	461a      	mov	r2, r3
 800aaf8:	f107 0310 	add.w	r3, r7, #16
 800aafc:	4423      	add	r3, r4
 800aafe:	f803 2c08 	strb.w	r2, [r3, #-8]
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	3301      	adds	r3, #1
 800ab06:	73fb      	strb	r3, [r7, #15]
 800ab08:	7bfb      	ldrb	r3, [r7, #15]
 800ab0a:	2b03      	cmp	r3, #3
 800ab0c:	d9ee      	bls.n	800aaec <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800ab0e:	7a3b      	ldrb	r3, [r7, #8]
 800ab10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d001      	beq.n	800ab1c <USER_SPI_initialize+0x11c>
 800ab18:	230c      	movs	r3, #12
 800ab1a:	e000      	b.n	800ab1e <USER_SPI_initialize+0x11e>
 800ab1c:	2304      	movs	r3, #4
 800ab1e:	737b      	strb	r3, [r7, #13]
 800ab20:	e02c      	b.n	800ab7c <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800ab22:	2100      	movs	r1, #0
 800ab24:	20a9      	movs	r0, #169	; 0xa9
 800ab26:	f7ff fefc 	bl	800a922 <send_cmd>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d804      	bhi.n	800ab3a <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800ab30:	2302      	movs	r3, #2
 800ab32:	737b      	strb	r3, [r7, #13]
 800ab34:	23a9      	movs	r3, #169	; 0xa9
 800ab36:	73bb      	strb	r3, [r7, #14]
 800ab38:	e003      	b.n	800ab42 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	737b      	strb	r3, [r7, #13]
 800ab3e:	2301      	movs	r3, #1
 800ab40:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800ab42:	bf00      	nop
 800ab44:	f7ff fde6 	bl	800a714 <SPI_Timer_Status>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <USER_SPI_initialize+0x15e>
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2100      	movs	r1, #0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f7ff fee5 	bl	800a922 <send_cmd>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1f2      	bne.n	800ab44 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800ab5e:	f7ff fdd9 	bl	800a714 <SPI_Timer_Status>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d007      	beq.n	800ab78 <USER_SPI_initialize+0x178>
 800ab68:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ab6c:	2010      	movs	r0, #16
 800ab6e:	f7ff fed8 	bl	800a922 <send_cmd>
 800ab72:	4603      	mov	r3, r0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d001      	beq.n	800ab7c <USER_SPI_initialize+0x17c>
                ty = 0;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800ab7c:	4a14      	ldr	r2, [pc, #80]	; (800abd0 <USER_SPI_initialize+0x1d0>)
 800ab7e:	7b7b      	ldrb	r3, [r7, #13]
 800ab80:	7013      	strb	r3, [r2, #0]
    despiselect();
 800ab82:	f7ff fe4b 	bl	800a81c <despiselect>

    if (ty) {           /* OK */
 800ab86:	7b7b      	ldrb	r3, [r7, #13]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d012      	beq.n	800abb2 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800ab8c:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <USER_SPI_initialize+0x1cc>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ab96:	4b0d      	ldr	r3, [pc, #52]	; (800abcc <USER_SPI_initialize+0x1cc>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f042 0220 	orr.w	r2, r2, #32
 800ab9e:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800aba0:	4b09      	ldr	r3, [pc, #36]	; (800abc8 <USER_SPI_initialize+0x1c8>)
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	b2db      	uxtb	r3, r3
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	b2da      	uxtb	r2, r3
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <USER_SPI_initialize+0x1c8>)
 800abae:	701a      	strb	r2, [r3, #0]
 800abb0:	e002      	b.n	800abb8 <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800abb2:	4b05      	ldr	r3, [pc, #20]	; (800abc8 <USER_SPI_initialize+0x1c8>)
 800abb4:	2201      	movs	r2, #1
 800abb6:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800abb8:	4b03      	ldr	r3, [pc, #12]	; (800abc8 <USER_SPI_initialize+0x1c8>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	b2db      	uxtb	r3, r3
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3714      	adds	r7, #20
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd90      	pop	{r4, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	20000020 	.word	0x20000020
 800abcc:	200044f4 	.word	0x200044f4
 800abd0:	200005fc 	.word	0x200005fc

0800abd4 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800abde:	79fb      	ldrb	r3, [r7, #7]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d001      	beq.n	800abe8 <USER_SPI_status+0x14>
 800abe4:	2301      	movs	r3, #1
 800abe6:	e002      	b.n	800abee <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800abe8:	4b04      	ldr	r3, [pc, #16]	; (800abfc <USER_SPI_status+0x28>)
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	b2db      	uxtb	r3, r3
}
 800abee:	4618      	mov	r0, r3
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	20000020 	.word	0x20000020

0800ac00 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60b9      	str	r1, [r7, #8]
 800ac08:	607a      	str	r2, [r7, #4]
 800ac0a:	603b      	str	r3, [r7, #0]
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d102      	bne.n	800ac1c <USER_SPI_read+0x1c>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d101      	bne.n	800ac20 <USER_SPI_read+0x20>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	e04d      	b.n	800acbc <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800ac20:	4b28      	ldr	r3, [pc, #160]	; (800acc4 <USER_SPI_read+0xc4>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	b2db      	uxtb	r3, r3
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <USER_SPI_read+0x32>
 800ac2e:	2303      	movs	r3, #3
 800ac30:	e044      	b.n	800acbc <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800ac32:	4b25      	ldr	r3, [pc, #148]	; (800acc8 <USER_SPI_read+0xc8>)
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	f003 0308 	and.w	r3, r3, #8
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d102      	bne.n	800ac44 <USER_SPI_read+0x44>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	025b      	lsls	r3, r3, #9
 800ac42:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d111      	bne.n	800ac6e <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	2011      	movs	r0, #17
 800ac4e:	f7ff fe68 	bl	800a922 <send_cmd>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d129      	bne.n	800acac <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800ac58:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac5c:	68b8      	ldr	r0, [r7, #8]
 800ac5e:	f7ff fe05 	bl	800a86c <rcvr_datablock>
 800ac62:	4603      	mov	r3, r0
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d021      	beq.n	800acac <USER_SPI_read+0xac>
            count = 0;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	603b      	str	r3, [r7, #0]
 800ac6c:	e01e      	b.n	800acac <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800ac6e:	6879      	ldr	r1, [r7, #4]
 800ac70:	2012      	movs	r0, #18
 800ac72:	f7ff fe56 	bl	800a922 <send_cmd>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d117      	bne.n	800acac <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800ac7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ac80:	68b8      	ldr	r0, [r7, #8]
 800ac82:	f7ff fdf3 	bl	800a86c <rcvr_datablock>
 800ac86:	4603      	mov	r3, r0
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d00a      	beq.n	800aca2 <USER_SPI_read+0xa2>
                buff += 512;
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ac92:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	3b01      	subs	r3, #1
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1ed      	bne.n	800ac7c <USER_SPI_read+0x7c>
 800aca0:	e000      	b.n	800aca4 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800aca2:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800aca4:	2100      	movs	r1, #0
 800aca6:	200c      	movs	r0, #12
 800aca8:	f7ff fe3b 	bl	800a922 <send_cmd>
        }
    }
    despiselect();
 800acac:	f7ff fdb6 	bl	800a81c <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800acb0:	683b      	ldr	r3, [r7, #0]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bf14      	ite	ne
 800acb6:	2301      	movne	r3, #1
 800acb8:	2300      	moveq	r3, #0
 800acba:	b2db      	uxtb	r3, r3
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3710      	adds	r7, #16
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000020 	.word	0x20000020
 800acc8:	200005fc 	.word	0x200005fc

0800accc <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60b9      	str	r1, [r7, #8]
 800acd4:	607a      	str	r2, [r7, #4]
 800acd6:	603b      	str	r3, [r7, #0]
 800acd8:	4603      	mov	r3, r0
 800acda:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800acdc:	7bfb      	ldrb	r3, [r7, #15]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d102      	bne.n	800ace8 <USER_SPI_write+0x1c>
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d101      	bne.n	800acec <USER_SPI_write+0x20>
 800ace8:	2304      	movs	r3, #4
 800acea:	e063      	b.n	800adb4 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800acec:	4b33      	ldr	r3, [pc, #204]	; (800adbc <USER_SPI_write+0xf0>)
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d001      	beq.n	800acfe <USER_SPI_write+0x32>
 800acfa:	2303      	movs	r3, #3
 800acfc:	e05a      	b.n	800adb4 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800acfe:	4b2f      	ldr	r3, [pc, #188]	; (800adbc <USER_SPI_write+0xf0>)
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	f003 0304 	and.w	r3, r3, #4
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <USER_SPI_write+0x44>
 800ad0c:	2302      	movs	r3, #2
 800ad0e:	e051      	b.n	800adb4 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800ad10:	4b2b      	ldr	r3, [pc, #172]	; (800adc0 <USER_SPI_write+0xf4>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 0308 	and.w	r3, r3, #8
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d102      	bne.n	800ad22 <USER_SPI_write+0x56>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	025b      	lsls	r3, r3, #9
 800ad20:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	2b01      	cmp	r3, #1
 800ad26:	d110      	bne.n	800ad4a <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800ad28:	6879      	ldr	r1, [r7, #4]
 800ad2a:	2018      	movs	r0, #24
 800ad2c:	f7ff fdf9 	bl	800a922 <send_cmd>
 800ad30:	4603      	mov	r3, r0
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d136      	bne.n	800ada4 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800ad36:	21fe      	movs	r1, #254	; 0xfe
 800ad38:	68b8      	ldr	r0, [r7, #8]
 800ad3a:	f7ff fdc0 	bl	800a8be <xmit_datablock>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d02f      	beq.n	800ada4 <USER_SPI_write+0xd8>
            count = 0;
 800ad44:	2300      	movs	r3, #0
 800ad46:	603b      	str	r3, [r7, #0]
 800ad48:	e02c      	b.n	800ada4 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800ad4a:	4b1d      	ldr	r3, [pc, #116]	; (800adc0 <USER_SPI_write+0xf4>)
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	f003 0306 	and.w	r3, r3, #6
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <USER_SPI_write+0x92>
 800ad56:	6839      	ldr	r1, [r7, #0]
 800ad58:	2097      	movs	r0, #151	; 0x97
 800ad5a:	f7ff fde2 	bl	800a922 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	2019      	movs	r0, #25
 800ad62:	f7ff fdde 	bl	800a922 <send_cmd>
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d11b      	bne.n	800ada4 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800ad6c:	21fc      	movs	r1, #252	; 0xfc
 800ad6e:	68b8      	ldr	r0, [r7, #8]
 800ad70:	f7ff fda5 	bl	800a8be <xmit_datablock>
 800ad74:	4603      	mov	r3, r0
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <USER_SPI_write+0xc4>
                buff += 512;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800ad80:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800ad82:	683b      	ldr	r3, [r7, #0]
 800ad84:	3b01      	subs	r3, #1
 800ad86:	603b      	str	r3, [r7, #0]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d1ee      	bne.n	800ad6c <USER_SPI_write+0xa0>
 800ad8e:	e000      	b.n	800ad92 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800ad90:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800ad92:	21fd      	movs	r1, #253	; 0xfd
 800ad94:	2000      	movs	r0, #0
 800ad96:	f7ff fd92 	bl	800a8be <xmit_datablock>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <USER_SPI_write+0xd8>
 800ada0:	2301      	movs	r3, #1
 800ada2:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800ada4:	f7ff fd3a 	bl	800a81c <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	bf14      	ite	ne
 800adae:	2301      	movne	r3, #1
 800adb0:	2300      	moveq	r3, #0
 800adb2:	b2db      	uxtb	r3, r3
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20000020 	.word	0x20000020
 800adc0:	200005fc 	.word	0x200005fc

0800adc4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b08c      	sub	sp, #48	; 0x30
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	603a      	str	r2, [r7, #0]
 800adce:	71fb      	strb	r3, [r7, #7]
 800add0:	460b      	mov	r3, r1
 800add2:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800add4:	79fb      	ldrb	r3, [r7, #7]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <USER_SPI_ioctl+0x1a>
 800adda:	2304      	movs	r3, #4
 800addc:	e15a      	b.n	800b094 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800adde:	4baf      	ldr	r3, [pc, #700]	; (800b09c <USER_SPI_ioctl+0x2d8>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	f003 0301 	and.w	r3, r3, #1
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d001      	beq.n	800adf0 <USER_SPI_ioctl+0x2c>
 800adec:	2303      	movs	r3, #3
 800adee:	e151      	b.n	800b094 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800adf6:	79bb      	ldrb	r3, [r7, #6]
 800adf8:	2b04      	cmp	r3, #4
 800adfa:	f200 8136 	bhi.w	800b06a <USER_SPI_ioctl+0x2a6>
 800adfe:	a201      	add	r2, pc, #4	; (adr r2, 800ae04 <USER_SPI_ioctl+0x40>)
 800ae00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae04:	0800ae19 	.word	0x0800ae19
 800ae08:	0800ae2d 	.word	0x0800ae2d
 800ae0c:	0800b06b 	.word	0x0800b06b
 800ae10:	0800aed9 	.word	0x0800aed9
 800ae14:	0800afcf 	.word	0x0800afcf
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800ae18:	f7ff fd0e 	bl	800a838 <spiselect>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	f000 8127 	beq.w	800b072 <USER_SPI_ioctl+0x2ae>
 800ae24:	2300      	movs	r3, #0
 800ae26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800ae2a:	e122      	b.n	800b072 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800ae2c:	2100      	movs	r1, #0
 800ae2e:	2009      	movs	r0, #9
 800ae30:	f7ff fd77 	bl	800a922 <send_cmd>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f040 811d 	bne.w	800b076 <USER_SPI_ioctl+0x2b2>
 800ae3c:	f107 030c 	add.w	r3, r7, #12
 800ae40:	2110      	movs	r1, #16
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7ff fd12 	bl	800a86c <rcvr_datablock>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f000 8113 	beq.w	800b076 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800ae50:	7b3b      	ldrb	r3, [r7, #12]
 800ae52:	099b      	lsrs	r3, r3, #6
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	2b01      	cmp	r3, #1
 800ae58:	d111      	bne.n	800ae7e <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800ae5a:	7d7b      	ldrb	r3, [r7, #21]
 800ae5c:	461a      	mov	r2, r3
 800ae5e:	7d3b      	ldrb	r3, [r7, #20]
 800ae60:	021b      	lsls	r3, r3, #8
 800ae62:	4413      	add	r3, r2
 800ae64:	461a      	mov	r2, r3
 800ae66:	7cfb      	ldrb	r3, [r7, #19]
 800ae68:	041b      	lsls	r3, r3, #16
 800ae6a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800ae6e:	4413      	add	r3, r2
 800ae70:	3301      	adds	r3, #1
 800ae72:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	029a      	lsls	r2, r3, #10
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	601a      	str	r2, [r3, #0]
 800ae7c:	e028      	b.n	800aed0 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800ae7e:	7c7b      	ldrb	r3, [r7, #17]
 800ae80:	f003 030f 	and.w	r3, r3, #15
 800ae84:	b2da      	uxtb	r2, r3
 800ae86:	7dbb      	ldrb	r3, [r7, #22]
 800ae88:	09db      	lsrs	r3, r3, #7
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	4413      	add	r3, r2
 800ae8e:	b2da      	uxtb	r2, r3
 800ae90:	7d7b      	ldrb	r3, [r7, #21]
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	f003 0306 	and.w	r3, r3, #6
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	4413      	add	r3, r2
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	3302      	adds	r3, #2
 800aea2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800aea6:	7d3b      	ldrb	r3, [r7, #20]
 800aea8:	099b      	lsrs	r3, r3, #6
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	7cfb      	ldrb	r3, [r7, #19]
 800aeb0:	009b      	lsls	r3, r3, #2
 800aeb2:	441a      	add	r2, r3
 800aeb4:	7cbb      	ldrb	r3, [r7, #18]
 800aeb6:	029b      	lsls	r3, r3, #10
 800aeb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aebc:	4413      	add	r3, r2
 800aebe:	3301      	adds	r3, #1
 800aec0:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800aec2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aec6:	3b09      	subs	r3, #9
 800aec8:	69fa      	ldr	r2, [r7, #28]
 800aeca:	409a      	lsls	r2, r3
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800aed0:	2300      	movs	r3, #0
 800aed2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800aed6:	e0ce      	b.n	800b076 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800aed8:	4b71      	ldr	r3, [pc, #452]	; (800b0a0 <USER_SPI_ioctl+0x2dc>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	f003 0304 	and.w	r3, r3, #4
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d031      	beq.n	800af48 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800aee4:	2100      	movs	r1, #0
 800aee6:	208d      	movs	r0, #141	; 0x8d
 800aee8:	f7ff fd1b 	bl	800a922 <send_cmd>
 800aeec:	4603      	mov	r3, r0
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	f040 80c3 	bne.w	800b07a <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800aef4:	20ff      	movs	r0, #255	; 0xff
 800aef6:	f7ff fc23 	bl	800a740 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800aefa:	f107 030c 	add.w	r3, r7, #12
 800aefe:	2110      	movs	r1, #16
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff fcb3 	bl	800a86c <rcvr_datablock>
 800af06:	4603      	mov	r3, r0
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 80b6 	beq.w	800b07a <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800af0e:	2330      	movs	r3, #48	; 0x30
 800af10:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800af14:	e007      	b.n	800af26 <USER_SPI_ioctl+0x162>
 800af16:	20ff      	movs	r0, #255	; 0xff
 800af18:	f7ff fc12 	bl	800a740 <xchg_spi>
 800af1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800af20:	3b01      	subs	r3, #1
 800af22:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800af26:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f3      	bne.n	800af16 <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
 800af30:	091b      	lsrs	r3, r3, #4
 800af32:	b2db      	uxtb	r3, r3
 800af34:	461a      	mov	r2, r3
 800af36:	2310      	movs	r3, #16
 800af38:	fa03 f202 	lsl.w	r2, r3, r2
 800af3c:	683b      	ldr	r3, [r7, #0]
 800af3e:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800af40:	2300      	movs	r3, #0
 800af42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800af46:	e098      	b.n	800b07a <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800af48:	2100      	movs	r1, #0
 800af4a:	2009      	movs	r0, #9
 800af4c:	f7ff fce9 	bl	800a922 <send_cmd>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	f040 8091 	bne.w	800b07a <USER_SPI_ioctl+0x2b6>
 800af58:	f107 030c 	add.w	r3, r7, #12
 800af5c:	2110      	movs	r1, #16
 800af5e:	4618      	mov	r0, r3
 800af60:	f7ff fc84 	bl	800a86c <rcvr_datablock>
 800af64:	4603      	mov	r3, r0
 800af66:	2b00      	cmp	r3, #0
 800af68:	f000 8087 	beq.w	800b07a <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800af6c:	4b4c      	ldr	r3, [pc, #304]	; (800b0a0 <USER_SPI_ioctl+0x2dc>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d012      	beq.n	800af9e <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800af78:	7dbb      	ldrb	r3, [r7, #22]
 800af7a:	005b      	lsls	r3, r3, #1
 800af7c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800af80:	7dfa      	ldrb	r2, [r7, #23]
 800af82:	09d2      	lsrs	r2, r2, #7
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	4413      	add	r3, r2
 800af88:	1c5a      	adds	r2, r3, #1
 800af8a:	7e7b      	ldrb	r3, [r7, #25]
 800af8c:	099b      	lsrs	r3, r3, #6
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	3b01      	subs	r3, #1
 800af92:	fa02 f303 	lsl.w	r3, r2, r3
 800af96:	461a      	mov	r2, r3
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	601a      	str	r2, [r3, #0]
 800af9c:	e013      	b.n	800afc6 <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800af9e:	7dbb      	ldrb	r3, [r7, #22]
 800afa0:	109b      	asrs	r3, r3, #2
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	f003 031f 	and.w	r3, r3, #31
 800afa8:	3301      	adds	r3, #1
 800afaa:	7dfa      	ldrb	r2, [r7, #23]
 800afac:	00d2      	lsls	r2, r2, #3
 800afae:	f002 0218 	and.w	r2, r2, #24
 800afb2:	7df9      	ldrb	r1, [r7, #23]
 800afb4:	0949      	lsrs	r1, r1, #5
 800afb6:	b2c9      	uxtb	r1, r1
 800afb8:	440a      	add	r2, r1
 800afba:	3201      	adds	r2, #1
 800afbc:	fb02 f303 	mul.w	r3, r2, r3
 800afc0:	461a      	mov	r2, r3
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800afc6:	2300      	movs	r3, #0
 800afc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800afcc:	e055      	b.n	800b07a <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800afce:	4b34      	ldr	r3, [pc, #208]	; (800b0a0 <USER_SPI_ioctl+0x2dc>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	f003 0306 	and.w	r3, r3, #6
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d051      	beq.n	800b07e <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800afda:	f107 020c 	add.w	r2, r7, #12
 800afde:	79fb      	ldrb	r3, [r7, #7]
 800afe0:	210b      	movs	r1, #11
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff feee 	bl	800adc4 <USER_SPI_ioctl>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d149      	bne.n	800b082 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800afee:	7b3b      	ldrb	r3, [r7, #12]
 800aff0:	099b      	lsrs	r3, r3, #6
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d104      	bne.n	800b002 <USER_SPI_ioctl+0x23e>
 800aff8:	7dbb      	ldrb	r3, [r7, #22]
 800affa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800affe:	2b00      	cmp	r3, #0
 800b000:	d041      	beq.n	800b086 <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	623b      	str	r3, [r7, #32]
 800b006:	6a3b      	ldr	r3, [r7, #32]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b00c:	6a3b      	ldr	r3, [r7, #32]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800b012:	4b23      	ldr	r3, [pc, #140]	; (800b0a0 <USER_SPI_ioctl+0x2dc>)
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d105      	bne.n	800b02a <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800b01e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b020:	025b      	lsls	r3, r3, #9
 800b022:	62bb      	str	r3, [r7, #40]	; 0x28
 800b024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b026:	025b      	lsls	r3, r3, #9
 800b028:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800b02a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b02c:	2020      	movs	r0, #32
 800b02e:	f7ff fc78 	bl	800a922 <send_cmd>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d128      	bne.n	800b08a <USER_SPI_ioctl+0x2c6>
 800b038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b03a:	2021      	movs	r0, #33	; 0x21
 800b03c:	f7ff fc71 	bl	800a922 <send_cmd>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d121      	bne.n	800b08a <USER_SPI_ioctl+0x2c6>
 800b046:	2100      	movs	r1, #0
 800b048:	2026      	movs	r0, #38	; 0x26
 800b04a:	f7ff fc6a 	bl	800a922 <send_cmd>
 800b04e:	4603      	mov	r3, r0
 800b050:	2b00      	cmp	r3, #0
 800b052:	d11a      	bne.n	800b08a <USER_SPI_ioctl+0x2c6>
 800b054:	f247 5030 	movw	r0, #30000	; 0x7530
 800b058:	f7ff fbbd 	bl	800a7d6 <wait_ready>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d013      	beq.n	800b08a <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800b062:	2300      	movs	r3, #0
 800b064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800b068:	e00f      	b.n	800b08a <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800b06a:	2304      	movs	r3, #4
 800b06c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b070:	e00c      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        break;
 800b072:	bf00      	nop
 800b074:	e00a      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        break;
 800b076:	bf00      	nop
 800b078:	e008      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        break;
 800b07a:	bf00      	nop
 800b07c:	e006      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800b07e:	bf00      	nop
 800b080:	e004      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <USER_SPI_ioctl+0x2c8>
        break;
 800b08a:	bf00      	nop
    }

    despiselect();
 800b08c:	f7ff fbc6 	bl	800a81c <despiselect>

    return res;
 800b090:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b094:	4618      	mov	r0, r3
 800b096:	3730      	adds	r7, #48	; 0x30
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	20000020 	.word	0x20000020
 800b0a0:	200005fc 	.word	0x200005fc

0800b0a4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b0b0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b0b4:	f003 fc7a 	bl	800e9ac <malloc>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d105      	bne.n	800b0ce <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800b0ca:	2302      	movs	r3, #2
 800b0cc:	e066      	b.n	800b19c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	7c1b      	ldrb	r3, [r3, #16]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d119      	bne.n	800b112 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b0de:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	2181      	movs	r1, #129	; 0x81
 800b0e6:	6878      	ldr	r0, [r7, #4]
 800b0e8:	f003 fa69 	bl	800e5be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2201      	movs	r2, #1
 800b0f0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b0f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f003 fa5f 	bl	800e5be <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2201      	movs	r2, #1
 800b104:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2210      	movs	r2, #16
 800b10c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800b110:	e016      	b.n	800b140 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b112:	2340      	movs	r3, #64	; 0x40
 800b114:	2202      	movs	r2, #2
 800b116:	2181      	movs	r1, #129	; 0x81
 800b118:	6878      	ldr	r0, [r7, #4]
 800b11a:	f003 fa50 	bl	800e5be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b124:	2340      	movs	r3, #64	; 0x40
 800b126:	2202      	movs	r2, #2
 800b128:	2101      	movs	r1, #1
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	f003 fa47 	bl	800e5be <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2210      	movs	r2, #16
 800b13c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b140:	2308      	movs	r3, #8
 800b142:	2203      	movs	r2, #3
 800b144:	2182      	movs	r1, #130	; 0x82
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f003 fa39 	bl	800e5be <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2200      	movs	r2, #0
 800b162:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2200      	movs	r2, #0
 800b16a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	7c1b      	ldrb	r3, [r3, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d109      	bne.n	800b18a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b17c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b180:	2101      	movs	r1, #1
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f003 fb0a 	bl	800e79c <USBD_LL_PrepareReceive>
 800b188:	e007      	b.n	800b19a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b190:	2340      	movs	r3, #64	; 0x40
 800b192:	2101      	movs	r1, #1
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f003 fb01 	bl	800e79c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b19a:	2300      	movs	r3, #0
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b1b4:	2181      	movs	r1, #129	; 0x81
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f003 fa27 	bl	800e60a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b1c2:	2101      	movs	r1, #1
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f003 fa20 	bl	800e60a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b1d2:	2182      	movs	r1, #130	; 0x82
 800b1d4:	6878      	ldr	r0, [r7, #4]
 800b1d6:	f003 fa18 	bl	800e60a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d00e      	beq.n	800b212 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b204:	4618      	mov	r0, r3
 800b206:	f003 fbd9 	bl	800e9bc <free>
    pdev->pClassData = NULL;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	2200      	movs	r2, #0
 800b20e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800b212:	7bfb      	ldrb	r3, [r7, #15]
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b086      	sub	sp, #24
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b22c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b22e:	2300      	movs	r3, #0
 800b230:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b232:	2300      	movs	r3, #0
 800b234:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b242:	2b00      	cmp	r3, #0
 800b244:	d03a      	beq.n	800b2bc <USBD_CDC_Setup+0xa0>
 800b246:	2b20      	cmp	r3, #32
 800b248:	f040 8097 	bne.w	800b37a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	88db      	ldrh	r3, [r3, #6]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d029      	beq.n	800b2a8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	b25b      	sxtb	r3, r3
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	da11      	bge.n	800b282 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b264:	689b      	ldr	r3, [r3, #8]
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800b26a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b26c:	683a      	ldr	r2, [r7, #0]
 800b26e:	88d2      	ldrh	r2, [r2, #6]
 800b270:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b272:	6939      	ldr	r1, [r7, #16]
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	88db      	ldrh	r3, [r3, #6]
 800b278:	461a      	mov	r2, r3
 800b27a:	6878      	ldr	r0, [r7, #4]
 800b27c:	f001 fac7 	bl	800c80e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800b280:	e082      	b.n	800b388 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	785a      	ldrb	r2, [r3, #1]
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	88db      	ldrh	r3, [r3, #6]
 800b290:	b2da      	uxtb	r2, r3
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800b298:	6939      	ldr	r1, [r7, #16]
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	88db      	ldrh	r3, [r3, #6]
 800b29e:	461a      	mov	r2, r3
 800b2a0:	6878      	ldr	r0, [r7, #4]
 800b2a2:	f001 fae0 	bl	800c866 <USBD_CtlPrepareRx>
    break;
 800b2a6:	e06f      	b.n	800b388 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	683a      	ldr	r2, [r7, #0]
 800b2b2:	7850      	ldrb	r0, [r2, #1]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	6839      	ldr	r1, [r7, #0]
 800b2b8:	4798      	blx	r3
    break;
 800b2ba:	e065      	b.n	800b388 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	785b      	ldrb	r3, [r3, #1]
 800b2c0:	2b0b      	cmp	r3, #11
 800b2c2:	d84f      	bhi.n	800b364 <USBD_CDC_Setup+0x148>
 800b2c4:	a201      	add	r2, pc, #4	; (adr r2, 800b2cc <USBD_CDC_Setup+0xb0>)
 800b2c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ca:	bf00      	nop
 800b2cc:	0800b2fd 	.word	0x0800b2fd
 800b2d0:	0800b373 	.word	0x0800b373
 800b2d4:	0800b365 	.word	0x0800b365
 800b2d8:	0800b365 	.word	0x0800b365
 800b2dc:	0800b365 	.word	0x0800b365
 800b2e0:	0800b365 	.word	0x0800b365
 800b2e4:	0800b365 	.word	0x0800b365
 800b2e8:	0800b365 	.word	0x0800b365
 800b2ec:	0800b365 	.word	0x0800b365
 800b2f0:	0800b365 	.word	0x0800b365
 800b2f4:	0800b325 	.word	0x0800b325
 800b2f8:	0800b34d 	.word	0x0800b34d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b302:	2b03      	cmp	r3, #3
 800b304:	d107      	bne.n	800b316 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b306:	f107 030c 	add.w	r3, r7, #12
 800b30a:	2202      	movs	r2, #2
 800b30c:	4619      	mov	r1, r3
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f001 fa7d 	bl	800c80e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b314:	e030      	b.n	800b378 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f001 fa07 	bl	800c72c <USBD_CtlError>
        ret = USBD_FAIL;
 800b31e:	2303      	movs	r3, #3
 800b320:	75fb      	strb	r3, [r7, #23]
      break;
 800b322:	e029      	b.n	800b378 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d107      	bne.n	800b33e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b32e:	f107 030f 	add.w	r3, r7, #15
 800b332:	2201      	movs	r2, #1
 800b334:	4619      	mov	r1, r3
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f001 fa69 	bl	800c80e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800b33c:	e01c      	b.n	800b378 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800b33e:	6839      	ldr	r1, [r7, #0]
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f001 f9f3 	bl	800c72c <USBD_CtlError>
        ret = USBD_FAIL;
 800b346:	2303      	movs	r3, #3
 800b348:	75fb      	strb	r3, [r7, #23]
      break;
 800b34a:	e015      	b.n	800b378 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b352:	2b03      	cmp	r3, #3
 800b354:	d00f      	beq.n	800b376 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800b356:	6839      	ldr	r1, [r7, #0]
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f001 f9e7 	bl	800c72c <USBD_CtlError>
        ret = USBD_FAIL;
 800b35e:	2303      	movs	r3, #3
 800b360:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800b362:	e008      	b.n	800b376 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f001 f9e0 	bl	800c72c <USBD_CtlError>
      ret = USBD_FAIL;
 800b36c:	2303      	movs	r3, #3
 800b36e:	75fb      	strb	r3, [r7, #23]
      break;
 800b370:	e002      	b.n	800b378 <USBD_CDC_Setup+0x15c>
      break;
 800b372:	bf00      	nop
 800b374:	e008      	b.n	800b388 <USBD_CDC_Setup+0x16c>
      break;
 800b376:	bf00      	nop
    }
    break;
 800b378:	e006      	b.n	800b388 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f001 f9d5 	bl	800c72c <USBD_CtlError>
    ret = USBD_FAIL;
 800b382:	2303      	movs	r3, #3
 800b384:	75fb      	strb	r3, [r7, #23]
    break;
 800b386:	bf00      	nop
  }

  return (uint8_t)ret;
 800b388:	7dfb      	ldrb	r3, [r7, #23]
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop

0800b394 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b3a6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b3b2:	2303      	movs	r3, #3
 800b3b4:	e049      	b.n	800b44a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b3bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b3be:	78fa      	ldrb	r2, [r7, #3]
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	3318      	adds	r3, #24
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d029      	beq.n	800b428 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b3d4:	78fa      	ldrb	r2, [r7, #3]
 800b3d6:	6879      	ldr	r1, [r7, #4]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	009b      	lsls	r3, r3, #2
 800b3dc:	4413      	add	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	440b      	add	r3, r1
 800b3e2:	3318      	adds	r3, #24
 800b3e4:	681a      	ldr	r2, [r3, #0]
 800b3e6:	78f9      	ldrb	r1, [r7, #3]
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	00db      	lsls	r3, r3, #3
 800b3ee:	1a5b      	subs	r3, r3, r1
 800b3f0:	009b      	lsls	r3, r3, #2
 800b3f2:	4403      	add	r3, r0
 800b3f4:	3344      	adds	r3, #68	; 0x44
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3fc:	fb03 f301 	mul.w	r3, r3, r1
 800b400:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b402:	2b00      	cmp	r3, #0
 800b404:	d110      	bne.n	800b428 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	6879      	ldr	r1, [r7, #4]
 800b40a:	4613      	mov	r3, r2
 800b40c:	009b      	lsls	r3, r3, #2
 800b40e:	4413      	add	r3, r2
 800b410:	009b      	lsls	r3, r3, #2
 800b412:	440b      	add	r3, r1
 800b414:	3318      	adds	r3, #24
 800b416:	2200      	movs	r2, #0
 800b418:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b41a:	78f9      	ldrb	r1, [r7, #3]
 800b41c:	2300      	movs	r3, #0
 800b41e:	2200      	movs	r2, #0
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f003 f99a 	bl	800e75a <USBD_LL_Transmit>
 800b426:	e00f      	b.n	800b448 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b444:	78fa      	ldrb	r2, [r7, #3]
 800b446:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800b448:	2300      	movs	r3, #0
}
 800b44a:	4618      	mov	r0, r3
 800b44c:	3710      	adds	r7, #16
 800b44e:	46bd      	mov	sp, r7
 800b450:	bd80      	pop	{r7, pc}

0800b452 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b084      	sub	sp, #16
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
 800b45a:	460b      	mov	r3, r1
 800b45c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b464:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d101      	bne.n	800b474 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b470:	2303      	movs	r3, #3
 800b472:	e015      	b.n	800b4a0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b474:	78fb      	ldrb	r3, [r7, #3]
 800b476:	4619      	mov	r1, r3
 800b478:	6878      	ldr	r0, [r7, #4]
 800b47a:	f003 f9b0 	bl	800e7de <USBD_LL_GetRxDataSize>
 800b47e:	4602      	mov	r2, r0
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	68fa      	ldr	r2, [r7, #12]
 800b490:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b49a:	4611      	mov	r1, r2
 800b49c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b49e:	2300      	movs	r3, #0
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3710      	adds	r7, #16
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}

0800b4a8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b084      	sub	sp, #16
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b4b6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d015      	beq.n	800b4ee <USBD_CDC_EP0_RxReady+0x46>
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4c8:	2bff      	cmp	r3, #255	; 0xff
 800b4ca:	d010      	beq.n	800b4ee <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4d2:	689b      	ldr	r3, [r3, #8]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b4da:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b4dc:	68fa      	ldr	r2, [r7, #12]
 800b4de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b4e2:	b292      	uxth	r2, r2
 800b4e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	22ff      	movs	r2, #255	; 0xff
 800b4ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3710      	adds	r7, #16
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	bd80      	pop	{r7, pc}

0800b4f8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b083      	sub	sp, #12
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2243      	movs	r2, #67	; 0x43
 800b504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b506:	4b03      	ldr	r3, [pc, #12]	; (800b514 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b508:	4618      	mov	r0, r3
 800b50a:	370c      	adds	r7, #12
 800b50c:	46bd      	mov	sp, r7
 800b50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b512:	4770      	bx	lr
 800b514:	200000ac 	.word	0x200000ac

0800b518 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b518:	b480      	push	{r7}
 800b51a:	b083      	sub	sp, #12
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2243      	movs	r2, #67	; 0x43
 800b524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b526:	4b03      	ldr	r3, [pc, #12]	; (800b534 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b528:	4618      	mov	r0, r3
 800b52a:	370c      	adds	r7, #12
 800b52c:	46bd      	mov	sp, r7
 800b52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b532:	4770      	bx	lr
 800b534:	20000068 	.word	0x20000068

0800b538 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2243      	movs	r2, #67	; 0x43
 800b544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b546:	4b03      	ldr	r3, [pc, #12]	; (800b554 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b548:	4618      	mov	r0, r3
 800b54a:	370c      	adds	r7, #12
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	200000f0 	.word	0x200000f0

0800b558 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b558:	b480      	push	{r7}
 800b55a:	b083      	sub	sp, #12
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	220a      	movs	r2, #10
 800b564:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b566:	4b03      	ldr	r3, [pc, #12]	; (800b574 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	20000024 	.word	0x20000024

0800b578 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b578:	b480      	push	{r7}
 800b57a:	b083      	sub	sp, #12
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b588:	2303      	movs	r3, #3
 800b58a:	e004      	b.n	800b596 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b594:	2300      	movs	r3, #0
}
 800b596:	4618      	mov	r0, r3
 800b598:	370c      	adds	r7, #12
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr

0800b5a2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b5a2:	b480      	push	{r7}
 800b5a4:	b087      	sub	sp, #28
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5b4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b5be:	697b      	ldr	r3, [r7, #20]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	371c      	adds	r7, #28
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b5e4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	683a      	ldr	r2, [r7, #0]
 800b5ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b60a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b60c:	2301      	movs	r3, #1
 800b60e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b61a:	2303      	movs	r3, #3
 800b61c:	e01a      	b.n	800b654 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b624:	2b00      	cmp	r3, #0
 800b626:	d114      	bne.n	800b652 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b640:	68bb      	ldr	r3, [r7, #8]
 800b642:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b646:	2181      	movs	r1, #129	; 0x81
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f003 f886 	bl	800e75a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b652:	7bfb      	ldrb	r3, [r7, #15]
}
 800b654:	4618      	mov	r0, r3
 800b656:	3710      	adds	r7, #16
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}

0800b65c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b084      	sub	sp, #16
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b66a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b672:	2b00      	cmp	r3, #0
 800b674:	d101      	bne.n	800b67a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b676:	2303      	movs	r3, #3
 800b678:	e016      	b.n	800b6a8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	7c1b      	ldrb	r3, [r3, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d109      	bne.n	800b696 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b688:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b68c:	2101      	movs	r1, #1
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	f003 f884 	bl	800e79c <USBD_LL_PrepareReceive>
 800b694:	e007      	b.n	800b6a6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b69c:	2340      	movs	r3, #64	; 0x40
 800b69e:	2101      	movs	r1, #1
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f003 f87b 	bl	800e79c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b6a6:	2300      	movs	r3, #0
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3710      	adds	r7, #16
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}

0800b6b0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b086      	sub	sp, #24
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	60f8      	str	r0, [r7, #12]
 800b6b8:	60b9      	str	r1, [r7, #8]
 800b6ba:	4613      	mov	r3, r2
 800b6bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d101      	bne.n	800b6c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b6c4:	2303      	movs	r3, #3
 800b6c6:	e025      	b.n	800b714 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d003      	beq.n	800b6da <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d003      	beq.n	800b6ec <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	79fa      	ldrb	r2, [r7, #7]
 800b706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f002 fef1 	bl	800e4f0 <USBD_LL_Init>
 800b70e:	4603      	mov	r3, r0
 800b710:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b712:	7dfb      	ldrb	r3, [r7, #23]
}
 800b714:	4618      	mov	r0, r3
 800b716:	3718      	adds	r7, #24
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d101      	bne.n	800b734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b730:	2303      	movs	r3, #3
 800b732:	e010      	b.n	800b756 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b744:	f107 020e 	add.w	r2, r7, #14
 800b748:	4610      	mov	r0, r2
 800b74a:	4798      	blx	r3
 800b74c:	4602      	mov	r2, r0
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800b754:	2300      	movs	r3, #0
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f002 ff0e 	bl	800e588 <USBD_LL_Start>
 800b76c:	4603      	mov	r3, r0
}
 800b76e:	4618      	mov	r0, r3
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b776:	b480      	push	{r7}
 800b778:	b083      	sub	sp, #12
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	370c      	adds	r7, #12
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b78c:	b580      	push	{r7, lr}
 800b78e:	b084      	sub	sp, #16
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b798:	2303      	movs	r3, #3
 800b79a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d009      	beq.n	800b7ba <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	78fa      	ldrb	r2, [r7, #3]
 800b7b0:	4611      	mov	r1, r2
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	4798      	blx	r3
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3710      	adds	r7, #16
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	460b      	mov	r3, r1
 800b7ce:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d007      	beq.n	800b7ea <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7e0:	685b      	ldr	r3, [r3, #4]
 800b7e2:	78fa      	ldrb	r2, [r7, #3]
 800b7e4:	4611      	mov	r1, r2
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	4798      	blx	r3
  }

  return USBD_OK;
 800b7ea:	2300      	movs	r3, #0
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	4618      	mov	r0, r3
 800b808:	f000 ff56 	bl	800c6b8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2201      	movs	r2, #1
 800b810:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b81a:	461a      	mov	r2, r3
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b828:	f003 031f 	and.w	r3, r3, #31
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d00e      	beq.n	800b84e <USBD_LL_SetupStage+0x5a>
 800b830:	2b01      	cmp	r3, #1
 800b832:	d302      	bcc.n	800b83a <USBD_LL_SetupStage+0x46>
 800b834:	2b02      	cmp	r3, #2
 800b836:	d014      	beq.n	800b862 <USBD_LL_SetupStage+0x6e>
 800b838:	e01d      	b.n	800b876 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b840:	4619      	mov	r1, r3
 800b842:	6878      	ldr	r0, [r7, #4]
 800b844:	f000 fa18 	bl	800bc78 <USBD_StdDevReq>
 800b848:	4603      	mov	r3, r0
 800b84a:	73fb      	strb	r3, [r7, #15]
      break;
 800b84c:	e020      	b.n	800b890 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b854:	4619      	mov	r1, r3
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fa7c 	bl	800bd54 <USBD_StdItfReq>
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
      break;
 800b860:	e016      	b.n	800b890 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 fab8 	bl	800bde0 <USBD_StdEPReq>
 800b870:	4603      	mov	r3, r0
 800b872:	73fb      	strb	r3, [r7, #15]
      break;
 800b874:	e00c      	b.n	800b890 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b87c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b880:	b2db      	uxtb	r3, r3
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f002 fedf 	bl	800e648 <USBD_LL_StallEP>
 800b88a:	4603      	mov	r3, r0
 800b88c:	73fb      	strb	r3, [r7, #15]
      break;
 800b88e:	bf00      	nop
  }

  return ret;
 800b890:	7bfb      	ldrb	r3, [r7, #15]
}
 800b892:	4618      	mov	r0, r3
 800b894:	3710      	adds	r7, #16
 800b896:	46bd      	mov	sp, r7
 800b898:	bd80      	pop	{r7, pc}

0800b89a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b89a:	b580      	push	{r7, lr}
 800b89c:	b086      	sub	sp, #24
 800b89e:	af00      	add	r7, sp, #0
 800b8a0:	60f8      	str	r0, [r7, #12]
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	607a      	str	r2, [r7, #4]
 800b8a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b8a8:	7afb      	ldrb	r3, [r7, #11]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d137      	bne.n	800b91e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b8b4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8bc:	2b03      	cmp	r3, #3
 800b8be:	d14a      	bne.n	800b956 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d913      	bls.n	800b8f4 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	689a      	ldr	r2, [r3, #8]
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	1ad2      	subs	r2, r2, r3
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	68da      	ldr	r2, [r3, #12]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	689b      	ldr	r3, [r3, #8]
 800b8e2:	4293      	cmp	r3, r2
 800b8e4:	bf28      	it	cs
 800b8e6:	4613      	movcs	r3, r2
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	68f8      	ldr	r0, [r7, #12]
 800b8ee:	f000 ffd7 	bl	800c8a0 <USBD_CtlContinueRx>
 800b8f2:	e030      	b.n	800b956 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8fa:	691b      	ldr	r3, [r3, #16]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00a      	beq.n	800b916 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800b906:	2b03      	cmp	r3, #3
 800b908:	d105      	bne.n	800b916 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	68f8      	ldr	r0, [r7, #12]
 800b914:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800b916:	68f8      	ldr	r0, [r7, #12]
 800b918:	f000 ffd3 	bl	800c8c2 <USBD_CtlSendStatus>
 800b91c:	e01b      	b.n	800b956 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d013      	beq.n	800b952 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800b930:	2b03      	cmp	r3, #3
 800b932:	d10e      	bne.n	800b952 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b93a:	699b      	ldr	r3, [r3, #24]
 800b93c:	7afa      	ldrb	r2, [r7, #11]
 800b93e:	4611      	mov	r1, r2
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	4798      	blx	r3
 800b944:	4603      	mov	r3, r0
 800b946:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800b948:	7dfb      	ldrb	r3, [r7, #23]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d003      	beq.n	800b956 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800b94e:	7dfb      	ldrb	r3, [r7, #23]
 800b950:	e002      	b.n	800b958 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800b952:	2303      	movs	r3, #3
 800b954:	e000      	b.n	800b958 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	460b      	mov	r3, r1
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b96e:	7afb      	ldrb	r3, [r7, #11]
 800b970:	2b00      	cmp	r3, #0
 800b972:	d16a      	bne.n	800ba4a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	3314      	adds	r3, #20
 800b978:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b980:	2b02      	cmp	r3, #2
 800b982:	d155      	bne.n	800ba30 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	689a      	ldr	r2, [r3, #8]
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	68db      	ldr	r3, [r3, #12]
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d914      	bls.n	800b9ba <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b990:	693b      	ldr	r3, [r7, #16]
 800b992:	689a      	ldr	r2, [r3, #8]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	68db      	ldr	r3, [r3, #12]
 800b998:	1ad2      	subs	r2, r2, r3
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	6879      	ldr	r1, [r7, #4]
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f000 ff4c 	bl	800c844 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	2100      	movs	r1, #0
 800b9b2:	68f8      	ldr	r0, [r7, #12]
 800b9b4:	f002 fef2 	bl	800e79c <USBD_LL_PrepareReceive>
 800b9b8:	e03a      	b.n	800ba30 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d11c      	bne.n	800ba00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b9ce:	429a      	cmp	r2, r3
 800b9d0:	d316      	bcc.n	800ba00 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b9d2:	693b      	ldr	r3, [r7, #16]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d20f      	bcs.n	800ba00 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	68f8      	ldr	r0, [r7, #12]
 800b9e6:	f000 ff2d 	bl	800c844 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	68f8      	ldr	r0, [r7, #12]
 800b9fa:	f002 fecf 	bl	800e79c <USBD_LL_PrepareReceive>
 800b9fe:	e017      	b.n	800ba30 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d00a      	beq.n	800ba22 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d105      	bne.n	800ba22 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	68f8      	ldr	r0, [r7, #12]
 800ba20:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba22:	2180      	movs	r1, #128	; 0x80
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	f002 fe0f 	bl	800e648 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ba2a:	68f8      	ldr	r0, [r7, #12]
 800ba2c:	f000 ff5c 	bl	800c8e8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d123      	bne.n	800ba82 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ba3a:	68f8      	ldr	r0, [r7, #12]
 800ba3c:	f7ff fe9b 	bl	800b776 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ba48:	e01b      	b.n	800ba82 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba50:	695b      	ldr	r3, [r3, #20]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d013      	beq.n	800ba7e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ba5c:	2b03      	cmp	r3, #3
 800ba5e:	d10e      	bne.n	800ba7e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba66:	695b      	ldr	r3, [r3, #20]
 800ba68:	7afa      	ldrb	r2, [r7, #11]
 800ba6a:	4611      	mov	r1, r2
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	4798      	blx	r3
 800ba70:	4603      	mov	r3, r0
 800ba72:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ba74:	7dfb      	ldrb	r3, [r7, #23]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ba7a:	7dfb      	ldrb	r3, [r7, #23]
 800ba7c:	e002      	b.n	800ba84 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e000      	b.n	800ba84 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3718      	adds	r7, #24
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b082      	sub	sp, #8
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2200      	movs	r2, #0
 800baa8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d009      	beq.n	800bad0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	6852      	ldr	r2, [r2, #4]
 800bac8:	b2d2      	uxtb	r2, r2
 800baca:	4611      	mov	r1, r2
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bad0:	2340      	movs	r3, #64	; 0x40
 800bad2:	2200      	movs	r2, #0
 800bad4:	2100      	movs	r1, #0
 800bad6:	6878      	ldr	r0, [r7, #4]
 800bad8:	f002 fd71 	bl	800e5be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	2201      	movs	r2, #1
 800bae0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2240      	movs	r2, #64	; 0x40
 800bae8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baec:	2340      	movs	r3, #64	; 0x40
 800baee:	2200      	movs	r2, #0
 800baf0:	2180      	movs	r1, #128	; 0x80
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f002 fd63 	bl	800e5be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2240      	movs	r2, #64	; 0x40
 800bb02:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800bb04:	2300      	movs	r3, #0
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3708      	adds	r7, #8
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}

0800bb0e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b083      	sub	sp, #12
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	460b      	mov	r3, r1
 800bb18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	78fa      	ldrb	r2, [r7, #3]
 800bb1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bb20:	2300      	movs	r3, #0
}
 800bb22:	4618      	mov	r0, r3
 800bb24:	370c      	adds	r7, #12
 800bb26:	46bd      	mov	sp, r7
 800bb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2c:	4770      	bx	lr

0800bb2e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bb2e:	b480      	push	{r7}
 800bb30:	b083      	sub	sp, #12
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	2204      	movs	r2, #4
 800bb46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bb4a:	2300      	movs	r3, #0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	370c      	adds	r7, #12
 800bb50:	46bd      	mov	sp, r7
 800bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb56:	4770      	bx	lr

0800bb58 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb66:	2b04      	cmp	r3, #4
 800bb68:	d105      	bne.n	800bb76 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	370c      	adds	r7, #12
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr

0800bb84 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb92:	2b03      	cmp	r3, #3
 800bb94:	d10b      	bne.n	800bbae <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d005      	beq.n	800bbae <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba8:	69db      	ldr	r3, [r3, #28]
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbae:	2300      	movs	r3, #0
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3708      	adds	r7, #8
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	370c      	adds	r7, #12
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd0:	4770      	bx	lr

0800bbd2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbd2:	b480      	push	{r7}
 800bbd4:	b083      	sub	sp, #12
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800bbde:	2300      	movs	r3, #0
}
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr

0800bbec <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbf4:	2300      	movs	r3, #0
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr

0800bc02 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b082      	sub	sp, #8
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d009      	beq.n	800bc30 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	6852      	ldr	r2, [r2, #4]
 800bc28:	b2d2      	uxtb	r2, r2
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	4798      	blx	r3
  }

  return USBD_OK;
 800bc30:	2300      	movs	r3, #0
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3708      	adds	r7, #8
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}

0800bc3a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b087      	sub	sp, #28
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	3301      	adds	r3, #1
 800bc50:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc58:	8a3b      	ldrh	r3, [r7, #16]
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	b21a      	sxth	r2, r3
 800bc5e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	b21b      	sxth	r3, r3
 800bc66:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc68:	89fb      	ldrh	r3, [r7, #14]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	371c      	adds	r7, #28
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr
	...

0800bc78 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b084      	sub	sp, #16
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
 800bc80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc86:	683b      	ldr	r3, [r7, #0]
 800bc88:	781b      	ldrb	r3, [r3, #0]
 800bc8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc8e:	2b20      	cmp	r3, #32
 800bc90:	d004      	beq.n	800bc9c <USBD_StdDevReq+0x24>
 800bc92:	2b40      	cmp	r3, #64	; 0x40
 800bc94:	d002      	beq.n	800bc9c <USBD_StdDevReq+0x24>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d00a      	beq.n	800bcb0 <USBD_StdDevReq+0x38>
 800bc9a:	e050      	b.n	800bd3e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	6839      	ldr	r1, [r7, #0]
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	4798      	blx	r3
 800bcaa:	4603      	mov	r3, r0
 800bcac:	73fb      	strb	r3, [r7, #15]
    break;
 800bcae:	e04b      	b.n	800bd48 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	785b      	ldrb	r3, [r3, #1]
 800bcb4:	2b09      	cmp	r3, #9
 800bcb6:	d83c      	bhi.n	800bd32 <USBD_StdDevReq+0xba>
 800bcb8:	a201      	add	r2, pc, #4	; (adr r2, 800bcc0 <USBD_StdDevReq+0x48>)
 800bcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbe:	bf00      	nop
 800bcc0:	0800bd15 	.word	0x0800bd15
 800bcc4:	0800bd29 	.word	0x0800bd29
 800bcc8:	0800bd33 	.word	0x0800bd33
 800bccc:	0800bd1f 	.word	0x0800bd1f
 800bcd0:	0800bd33 	.word	0x0800bd33
 800bcd4:	0800bcf3 	.word	0x0800bcf3
 800bcd8:	0800bce9 	.word	0x0800bce9
 800bcdc:	0800bd33 	.word	0x0800bd33
 800bce0:	0800bd0b 	.word	0x0800bd0b
 800bce4:	0800bcfd 	.word	0x0800bcfd
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800bce8:	6839      	ldr	r1, [r7, #0]
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 f9ce 	bl	800c08c <USBD_GetDescriptor>
      break;
 800bcf0:	e024      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800bcf2:	6839      	ldr	r1, [r7, #0]
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f000 fb5d 	bl	800c3b4 <USBD_SetAddress>
      break;
 800bcfa:	e01f      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800bcfc:	6839      	ldr	r1, [r7, #0]
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fb9a 	bl	800c438 <USBD_SetConfig>
 800bd04:	4603      	mov	r3, r0
 800bd06:	73fb      	strb	r3, [r7, #15]
      break;
 800bd08:	e018      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800bd0a:	6839      	ldr	r1, [r7, #0]
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f000 fc37 	bl	800c580 <USBD_GetConfig>
      break;
 800bd12:	e013      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800bd14:	6839      	ldr	r1, [r7, #0]
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 fc66 	bl	800c5e8 <USBD_GetStatus>
      break;
 800bd1c:	e00e      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800bd1e:	6839      	ldr	r1, [r7, #0]
 800bd20:	6878      	ldr	r0, [r7, #4]
 800bd22:	f000 fc94 	bl	800c64e <USBD_SetFeature>
      break;
 800bd26:	e009      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fca3 	bl	800c676 <USBD_ClrFeature>
      break;
 800bd30:	e004      	b.n	800bd3c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800bd32:	6839      	ldr	r1, [r7, #0]
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	f000 fcf9 	bl	800c72c <USBD_CtlError>
      break;
 800bd3a:	bf00      	nop
    }
    break;
 800bd3c:	e004      	b.n	800bd48 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800bd3e:	6839      	ldr	r1, [r7, #0]
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fcf3 	bl	800c72c <USBD_CtlError>
    break;
 800bd46:	bf00      	nop
  }

  return ret;
 800bd48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3710      	adds	r7, #16
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	bf00      	nop

0800bd54 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b084      	sub	sp, #16
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
 800bd5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bd6a:	2b20      	cmp	r3, #32
 800bd6c:	d003      	beq.n	800bd76 <USBD_StdItfReq+0x22>
 800bd6e:	2b40      	cmp	r3, #64	; 0x40
 800bd70:	d001      	beq.n	800bd76 <USBD_StdItfReq+0x22>
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d12a      	bne.n	800bdcc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	2b02      	cmp	r3, #2
 800bd80:	d81d      	bhi.n	800bdbe <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	889b      	ldrh	r3, [r3, #4]
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b01      	cmp	r3, #1
 800bd8a:	d813      	bhi.n	800bdb4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	6839      	ldr	r1, [r7, #0]
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	4798      	blx	r3
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	88db      	ldrh	r3, [r3, #6]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d110      	bne.n	800bdc8 <USBD_StdItfReq+0x74>
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10d      	bne.n	800bdc8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f000 fd88 	bl	800c8c2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800bdb2:	e009      	b.n	800bdc8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800bdb4:	6839      	ldr	r1, [r7, #0]
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 fcb8 	bl	800c72c <USBD_CtlError>
      break;
 800bdbc:	e004      	b.n	800bdc8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800bdbe:	6839      	ldr	r1, [r7, #0]
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fcb3 	bl	800c72c <USBD_CtlError>
      break;
 800bdc6:	e000      	b.n	800bdca <USBD_StdItfReq+0x76>
      break;
 800bdc8:	bf00      	nop
    }
    break;
 800bdca:	e004      	b.n	800bdd6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fcac 	bl	800c72c <USBD_CtlError>
    break;
 800bdd4:	bf00      	nop
  }

  return ret;
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3710      	adds	r7, #16
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b084      	sub	sp, #16
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800bdea:	2300      	movs	r3, #0
 800bdec:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	889b      	ldrh	r3, [r3, #4]
 800bdf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	781b      	ldrb	r3, [r3, #0]
 800bdf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdfc:	2b20      	cmp	r3, #32
 800bdfe:	d004      	beq.n	800be0a <USBD_StdEPReq+0x2a>
 800be00:	2b40      	cmp	r3, #64	; 0x40
 800be02:	d002      	beq.n	800be0a <USBD_StdEPReq+0x2a>
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00a      	beq.n	800be1e <USBD_StdEPReq+0x3e>
 800be08:	e135      	b.n	800c076 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	6839      	ldr	r1, [r7, #0]
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	4798      	blx	r3
 800be18:	4603      	mov	r3, r0
 800be1a:	73fb      	strb	r3, [r7, #15]
    break;
 800be1c:	e130      	b.n	800c080 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	785b      	ldrb	r3, [r3, #1]
 800be22:	2b01      	cmp	r3, #1
 800be24:	d03e      	beq.n	800bea4 <USBD_StdEPReq+0xc4>
 800be26:	2b03      	cmp	r3, #3
 800be28:	d002      	beq.n	800be30 <USBD_StdEPReq+0x50>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d077      	beq.n	800bf1e <USBD_StdEPReq+0x13e>
 800be2e:	e11c      	b.n	800c06a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be36:	2b02      	cmp	r3, #2
 800be38:	d002      	beq.n	800be40 <USBD_StdEPReq+0x60>
 800be3a:	2b03      	cmp	r3, #3
 800be3c:	d015      	beq.n	800be6a <USBD_StdEPReq+0x8a>
 800be3e:	e02b      	b.n	800be98 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800be40:	7bbb      	ldrb	r3, [r7, #14]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d00c      	beq.n	800be60 <USBD_StdEPReq+0x80>
 800be46:	7bbb      	ldrb	r3, [r7, #14]
 800be48:	2b80      	cmp	r3, #128	; 0x80
 800be4a:	d009      	beq.n	800be60 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800be4c:	7bbb      	ldrb	r3, [r7, #14]
 800be4e:	4619      	mov	r1, r3
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f002 fbf9 	bl	800e648 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800be56:	2180      	movs	r1, #128	; 0x80
 800be58:	6878      	ldr	r0, [r7, #4]
 800be5a:	f002 fbf5 	bl	800e648 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800be5e:	e020      	b.n	800bea2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fc62 	bl	800c72c <USBD_CtlError>
        break;
 800be68:	e01b      	b.n	800bea2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	885b      	ldrh	r3, [r3, #2]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10e      	bne.n	800be90 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800be72:	7bbb      	ldrb	r3, [r7, #14]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00b      	beq.n	800be90 <USBD_StdEPReq+0xb0>
 800be78:	7bbb      	ldrb	r3, [r7, #14]
 800be7a:	2b80      	cmp	r3, #128	; 0x80
 800be7c:	d008      	beq.n	800be90 <USBD_StdEPReq+0xb0>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	88db      	ldrh	r3, [r3, #6]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d104      	bne.n	800be90 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800be86:	7bbb      	ldrb	r3, [r7, #14]
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f002 fbdc 	bl	800e648 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fd16 	bl	800c8c2 <USBD_CtlSendStatus>

        break;
 800be96:	e004      	b.n	800bea2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800be98:	6839      	ldr	r1, [r7, #0]
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f000 fc46 	bl	800c72c <USBD_CtlError>
        break;
 800bea0:	bf00      	nop
      }
      break;
 800bea2:	e0e7      	b.n	800c074 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d002      	beq.n	800beb4 <USBD_StdEPReq+0xd4>
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d015      	beq.n	800bede <USBD_StdEPReq+0xfe>
 800beb2:	e02d      	b.n	800bf10 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00c      	beq.n	800bed4 <USBD_StdEPReq+0xf4>
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b80      	cmp	r3, #128	; 0x80
 800bebe:	d009      	beq.n	800bed4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f002 fbbf 	bl	800e648 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800beca:	2180      	movs	r1, #128	; 0x80
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f002 fbbb 	bl	800e648 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800bed2:	e023      	b.n	800bf1c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800bed4:	6839      	ldr	r1, [r7, #0]
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f000 fc28 	bl	800c72c <USBD_CtlError>
        break;
 800bedc:	e01e      	b.n	800bf1c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800bede:	683b      	ldr	r3, [r7, #0]
 800bee0:	885b      	ldrh	r3, [r3, #2]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d119      	bne.n	800bf1a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800bee6:	7bbb      	ldrb	r3, [r7, #14]
 800bee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800beec:	2b00      	cmp	r3, #0
 800beee:	d004      	beq.n	800befa <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bef0:	7bbb      	ldrb	r3, [r7, #14]
 800bef2:	4619      	mov	r1, r3
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f002 fbc6 	bl	800e686 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f000 fce1 	bl	800c8c2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf06:	689b      	ldr	r3, [r3, #8]
 800bf08:	6839      	ldr	r1, [r7, #0]
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	4798      	blx	r3
        }
        break;
 800bf0e:	e004      	b.n	800bf1a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 fc0a 	bl	800c72c <USBD_CtlError>
        break;
 800bf18:	e000      	b.n	800bf1c <USBD_StdEPReq+0x13c>
        break;
 800bf1a:	bf00      	nop
      }
      break;
 800bf1c:	e0aa      	b.n	800c074 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf24:	2b02      	cmp	r3, #2
 800bf26:	d002      	beq.n	800bf2e <USBD_StdEPReq+0x14e>
 800bf28:	2b03      	cmp	r3, #3
 800bf2a:	d032      	beq.n	800bf92 <USBD_StdEPReq+0x1b2>
 800bf2c:	e097      	b.n	800c05e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf2e:	7bbb      	ldrb	r3, [r7, #14]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d007      	beq.n	800bf44 <USBD_StdEPReq+0x164>
 800bf34:	7bbb      	ldrb	r3, [r7, #14]
 800bf36:	2b80      	cmp	r3, #128	; 0x80
 800bf38:	d004      	beq.n	800bf44 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fbf5 	bl	800c72c <USBD_CtlError>
          break;
 800bf42:	e091      	b.n	800c068 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	da0b      	bge.n	800bf64 <USBD_StdEPReq+0x184>
 800bf4c:	7bbb      	ldrb	r3, [r7, #14]
 800bf4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bf52:	4613      	mov	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	4413      	add	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	3310      	adds	r3, #16
 800bf5c:	687a      	ldr	r2, [r7, #4]
 800bf5e:	4413      	add	r3, r2
 800bf60:	3304      	adds	r3, #4
 800bf62:	e00b      	b.n	800bf7c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800bf64:	7bbb      	ldrb	r3, [r7, #14]
 800bf66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	009b      	lsls	r3, r3, #2
 800bf6e:	4413      	add	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	4413      	add	r3, r2
 800bf7a:	3304      	adds	r3, #4
 800bf7c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2200      	movs	r2, #0
 800bf82:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	2202      	movs	r2, #2
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fc3f 	bl	800c80e <USBD_CtlSendData>
        break;
 800bf90:	e06a      	b.n	800c068 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800bf92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	da11      	bge.n	800bfbe <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bf9a:	7bbb      	ldrb	r3, [r7, #14]
 800bf9c:	f003 020f 	and.w	r2, r3, #15
 800bfa0:	6879      	ldr	r1, [r7, #4]
 800bfa2:	4613      	mov	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	4413      	add	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	440b      	add	r3, r1
 800bfac:	3324      	adds	r3, #36	; 0x24
 800bfae:	881b      	ldrh	r3, [r3, #0]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d117      	bne.n	800bfe4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bfb4:	6839      	ldr	r1, [r7, #0]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f000 fbb8 	bl	800c72c <USBD_CtlError>
            break;
 800bfbc:	e054      	b.n	800c068 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bfbe:	7bbb      	ldrb	r3, [r7, #14]
 800bfc0:	f003 020f 	and.w	r2, r3, #15
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	4613      	mov	r3, r2
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	440b      	add	r3, r1
 800bfd0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfd4:	881b      	ldrh	r3, [r3, #0]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d104      	bne.n	800bfe4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800bfda:	6839      	ldr	r1, [r7, #0]
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f000 fba5 	bl	800c72c <USBD_CtlError>
            break;
 800bfe2:	e041      	b.n	800c068 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bfe4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	da0b      	bge.n	800c004 <USBD_StdEPReq+0x224>
 800bfec:	7bbb      	ldrb	r3, [r7, #14]
 800bfee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	3310      	adds	r3, #16
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	4413      	add	r3, r2
 800c000:	3304      	adds	r3, #4
 800c002:	e00b      	b.n	800c01c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800c004:	7bbb      	ldrb	r3, [r7, #14]
 800c006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c00a:	4613      	mov	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	4413      	add	r3, r2
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c016:	687a      	ldr	r2, [r7, #4]
 800c018:	4413      	add	r3, r2
 800c01a:	3304      	adds	r3, #4
 800c01c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <USBD_StdEPReq+0x24a>
 800c024:	7bbb      	ldrb	r3, [r7, #14]
 800c026:	2b80      	cmp	r3, #128	; 0x80
 800c028:	d103      	bne.n	800c032 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2200      	movs	r2, #0
 800c02e:	601a      	str	r2, [r3, #0]
 800c030:	e00e      	b.n	800c050 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c032:	7bbb      	ldrb	r3, [r7, #14]
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f002 fb44 	bl	800e6c4 <USBD_LL_IsStallEP>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2201      	movs	r2, #1
 800c046:	601a      	str	r2, [r3, #0]
 800c048:	e002      	b.n	800c050 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	2202      	movs	r2, #2
 800c054:	4619      	mov	r1, r3
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fbd9 	bl	800c80e <USBD_CtlSendData>
          break;
 800c05c:	e004      	b.n	800c068 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 fb63 	bl	800c72c <USBD_CtlError>
        break;
 800c066:	bf00      	nop
      }
      break;
 800c068:	e004      	b.n	800c074 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fb5d 	bl	800c72c <USBD_CtlError>
      break;
 800c072:	bf00      	nop
    }
    break;
 800c074:	e004      	b.n	800c080 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800c076:	6839      	ldr	r1, [r7, #0]
 800c078:	6878      	ldr	r0, [r7, #4]
 800c07a:	f000 fb57 	bl	800c72c <USBD_CtlError>
    break;
 800c07e:	bf00      	nop
  }

  return ret;
 800c080:	7bfb      	ldrb	r3, [r7, #15]
}
 800c082:	4618      	mov	r0, r3
 800c084:	3710      	adds	r7, #16
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c096:	2300      	movs	r3, #0
 800c098:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c09a:	2300      	movs	r3, #0
 800c09c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	885b      	ldrh	r3, [r3, #2]
 800c0a6:	0a1b      	lsrs	r3, r3, #8
 800c0a8:	b29b      	uxth	r3, r3
 800c0aa:	3b01      	subs	r3, #1
 800c0ac:	2b0e      	cmp	r3, #14
 800c0ae:	f200 8152 	bhi.w	800c356 <USBD_GetDescriptor+0x2ca>
 800c0b2:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <USBD_GetDescriptor+0x2c>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c129 	.word	0x0800c129
 800c0bc:	0800c141 	.word	0x0800c141
 800c0c0:	0800c181 	.word	0x0800c181
 800c0c4:	0800c357 	.word	0x0800c357
 800c0c8:	0800c357 	.word	0x0800c357
 800c0cc:	0800c2f7 	.word	0x0800c2f7
 800c0d0:	0800c323 	.word	0x0800c323
 800c0d4:	0800c357 	.word	0x0800c357
 800c0d8:	0800c357 	.word	0x0800c357
 800c0dc:	0800c357 	.word	0x0800c357
 800c0e0:	0800c357 	.word	0x0800c357
 800c0e4:	0800c357 	.word	0x0800c357
 800c0e8:	0800c357 	.word	0x0800c357
 800c0ec:	0800c357 	.word	0x0800c357
 800c0f0:	0800c0f5 	.word	0x0800c0f5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0fa:	69db      	ldr	r3, [r3, #28]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d00b      	beq.n	800c118 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	7c12      	ldrb	r2, [r2, #16]
 800c10c:	f107 0108 	add.w	r1, r7, #8
 800c110:	4610      	mov	r0, r2
 800c112:	4798      	blx	r3
 800c114:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c116:	e126      	b.n	800c366 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c118:	6839      	ldr	r1, [r7, #0]
 800c11a:	6878      	ldr	r0, [r7, #4]
 800c11c:	f000 fb06 	bl	800c72c <USBD_CtlError>
      err++;
 800c120:	7afb      	ldrb	r3, [r7, #11]
 800c122:	3301      	adds	r3, #1
 800c124:	72fb      	strb	r3, [r7, #11]
    break;
 800c126:	e11e      	b.n	800c366 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	687a      	ldr	r2, [r7, #4]
 800c132:	7c12      	ldrb	r2, [r2, #16]
 800c134:	f107 0108 	add.w	r1, r7, #8
 800c138:	4610      	mov	r0, r2
 800c13a:	4798      	blx	r3
 800c13c:	60f8      	str	r0, [r7, #12]
    break;
 800c13e:	e112      	b.n	800c366 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7c1b      	ldrb	r3, [r3, #16]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10d      	bne.n	800c164 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c150:	f107 0208 	add.w	r2, r7, #8
 800c154:	4610      	mov	r0, r2
 800c156:	4798      	blx	r3
 800c158:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	3301      	adds	r3, #1
 800c15e:	2202      	movs	r2, #2
 800c160:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800c162:	e100      	b.n	800c366 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	f107 0208 	add.w	r2, r7, #8
 800c170:	4610      	mov	r0, r2
 800c172:	4798      	blx	r3
 800c174:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	3301      	adds	r3, #1
 800c17a:	2202      	movs	r2, #2
 800c17c:	701a      	strb	r2, [r3, #0]
    break;
 800c17e:	e0f2      	b.n	800c366 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	885b      	ldrh	r3, [r3, #2]
 800c184:	b2db      	uxtb	r3, r3
 800c186:	2b05      	cmp	r3, #5
 800c188:	f200 80ac 	bhi.w	800c2e4 <USBD_GetDescriptor+0x258>
 800c18c:	a201      	add	r2, pc, #4	; (adr r2, 800c194 <USBD_GetDescriptor+0x108>)
 800c18e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c192:	bf00      	nop
 800c194:	0800c1ad 	.word	0x0800c1ad
 800c198:	0800c1e1 	.word	0x0800c1e1
 800c19c:	0800c215 	.word	0x0800c215
 800c1a0:	0800c249 	.word	0x0800c249
 800c1a4:	0800c27d 	.word	0x0800c27d
 800c1a8:	0800c2b1 	.word	0x0800c2b1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1b2:	685b      	ldr	r3, [r3, #4]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00b      	beq.n	800c1d0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1be:	685b      	ldr	r3, [r3, #4]
 800c1c0:	687a      	ldr	r2, [r7, #4]
 800c1c2:	7c12      	ldrb	r2, [r2, #16]
 800c1c4:	f107 0108 	add.w	r1, r7, #8
 800c1c8:	4610      	mov	r0, r2
 800c1ca:	4798      	blx	r3
 800c1cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c1ce:	e091      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f000 faaa 	bl	800c72c <USBD_CtlError>
        err++;
 800c1d8:	7afb      	ldrb	r3, [r7, #11]
 800c1da:	3301      	adds	r3, #1
 800c1dc:	72fb      	strb	r3, [r7, #11]
      break;
 800c1de:	e089      	b.n	800c2f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1e6:	689b      	ldr	r3, [r3, #8]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d00b      	beq.n	800c204 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c1f2:	689b      	ldr	r3, [r3, #8]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	7c12      	ldrb	r2, [r2, #16]
 800c1f8:	f107 0108 	add.w	r1, r7, #8
 800c1fc:	4610      	mov	r0, r2
 800c1fe:	4798      	blx	r3
 800c200:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c202:	e077      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f000 fa90 	bl	800c72c <USBD_CtlError>
        err++;
 800c20c:	7afb      	ldrb	r3, [r7, #11]
 800c20e:	3301      	adds	r3, #1
 800c210:	72fb      	strb	r3, [r7, #11]
      break;
 800c212:	e06f      	b.n	800c2f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c21a:	68db      	ldr	r3, [r3, #12]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d00b      	beq.n	800c238 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c226:	68db      	ldr	r3, [r3, #12]
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	7c12      	ldrb	r2, [r2, #16]
 800c22c:	f107 0108 	add.w	r1, r7, #8
 800c230:	4610      	mov	r0, r2
 800c232:	4798      	blx	r3
 800c234:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c236:	e05d      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f000 fa76 	bl	800c72c <USBD_CtlError>
        err++;
 800c240:	7afb      	ldrb	r3, [r7, #11]
 800c242:	3301      	adds	r3, #1
 800c244:	72fb      	strb	r3, [r7, #11]
      break;
 800c246:	e055      	b.n	800c2f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c24e:	691b      	ldr	r3, [r3, #16]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d00b      	beq.n	800c26c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	7c12      	ldrb	r2, [r2, #16]
 800c260:	f107 0108 	add.w	r1, r7, #8
 800c264:	4610      	mov	r0, r2
 800c266:	4798      	blx	r3
 800c268:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c26a:	e043      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fa5c 	bl	800c72c <USBD_CtlError>
        err++;
 800c274:	7afb      	ldrb	r3, [r7, #11]
 800c276:	3301      	adds	r3, #1
 800c278:	72fb      	strb	r3, [r7, #11]
      break;
 800c27a:	e03b      	b.n	800c2f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00b      	beq.n	800c2a0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	687a      	ldr	r2, [r7, #4]
 800c292:	7c12      	ldrb	r2, [r2, #16]
 800c294:	f107 0108 	add.w	r1, r7, #8
 800c298:	4610      	mov	r0, r2
 800c29a:	4798      	blx	r3
 800c29c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c29e:	e029      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fa42 	bl	800c72c <USBD_CtlError>
        err++;
 800c2a8:	7afb      	ldrb	r3, [r7, #11]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	72fb      	strb	r3, [r7, #11]
      break;
 800c2ae:	e021      	b.n	800c2f4 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2b6:	699b      	ldr	r3, [r3, #24]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d00b      	beq.n	800c2d4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2c2:	699b      	ldr	r3, [r3, #24]
 800c2c4:	687a      	ldr	r2, [r7, #4]
 800c2c6:	7c12      	ldrb	r2, [r2, #16]
 800c2c8:	f107 0108 	add.w	r1, r7, #8
 800c2cc:	4610      	mov	r0, r2
 800c2ce:	4798      	blx	r3
 800c2d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c2d2:	e00f      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800c2d4:	6839      	ldr	r1, [r7, #0]
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 fa28 	bl	800c72c <USBD_CtlError>
        err++;
 800c2dc:	7afb      	ldrb	r3, [r7, #11]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	72fb      	strb	r3, [r7, #11]
      break;
 800c2e2:	e007      	b.n	800c2f4 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800c2e4:	6839      	ldr	r1, [r7, #0]
 800c2e6:	6878      	ldr	r0, [r7, #4]
 800c2e8:	f000 fa20 	bl	800c72c <USBD_CtlError>
      err++;
 800c2ec:	7afb      	ldrb	r3, [r7, #11]
 800c2ee:	3301      	adds	r3, #1
 800c2f0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800c2f2:	bf00      	nop
    }
    break;
 800c2f4:	e037      	b.n	800c366 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	7c1b      	ldrb	r3, [r3, #16]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d109      	bne.n	800c312 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c306:	f107 0208 	add.w	r2, r7, #8
 800c30a:	4610      	mov	r0, r2
 800c30c:	4798      	blx	r3
 800c30e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c310:	e029      	b.n	800c366 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fa09 	bl	800c72c <USBD_CtlError>
      err++;
 800c31a:	7afb      	ldrb	r3, [r7, #11]
 800c31c:	3301      	adds	r3, #1
 800c31e:	72fb      	strb	r3, [r7, #11]
    break;
 800c320:	e021      	b.n	800c366 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	7c1b      	ldrb	r3, [r3, #16]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d10d      	bne.n	800c346 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c332:	f107 0208 	add.w	r2, r7, #8
 800c336:	4610      	mov	r0, r2
 800c338:	4798      	blx	r3
 800c33a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	3301      	adds	r3, #1
 800c340:	2207      	movs	r2, #7
 800c342:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800c344:	e00f      	b.n	800c366 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 f9ef 	bl	800c72c <USBD_CtlError>
      err++;
 800c34e:	7afb      	ldrb	r3, [r7, #11]
 800c350:	3301      	adds	r3, #1
 800c352:	72fb      	strb	r3, [r7, #11]
    break;
 800c354:	e007      	b.n	800c366 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800c356:	6839      	ldr	r1, [r7, #0]
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f000 f9e7 	bl	800c72c <USBD_CtlError>
    err++;
 800c35e:	7afb      	ldrb	r3, [r7, #11]
 800c360:	3301      	adds	r3, #1
 800c362:	72fb      	strb	r3, [r7, #11]
    break;
 800c364:	bf00      	nop
  }

  if (err != 0U)
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d11e      	bne.n	800c3aa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	88db      	ldrh	r3, [r3, #6]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d016      	beq.n	800c3a2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800c374:	893b      	ldrh	r3, [r7, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d00e      	beq.n	800c398 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	88da      	ldrh	r2, [r3, #6]
 800c37e:	893b      	ldrh	r3, [r7, #8]
 800c380:	4293      	cmp	r3, r2
 800c382:	bf28      	it	cs
 800c384:	4613      	movcs	r3, r2
 800c386:	b29b      	uxth	r3, r3
 800c388:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800c38a:	893b      	ldrh	r3, [r7, #8]
 800c38c:	461a      	mov	r2, r3
 800c38e:	68f9      	ldr	r1, [r7, #12]
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f000 fa3c 	bl	800c80e <USBD_CtlSendData>
 800c396:	e009      	b.n	800c3ac <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f000 f9c6 	bl	800c72c <USBD_CtlError>
 800c3a0:	e004      	b.n	800c3ac <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fa8d 	bl	800c8c2 <USBD_CtlSendStatus>
 800c3a8:	e000      	b.n	800c3ac <USBD_GetDescriptor+0x320>
    return;
 800c3aa:	bf00      	nop
    }
  }
}
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop

0800c3b4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	889b      	ldrh	r3, [r3, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d130      	bne.n	800c428 <USBD_SetAddress+0x74>
 800c3c6:	683b      	ldr	r3, [r7, #0]
 800c3c8:	88db      	ldrh	r3, [r3, #6]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d12c      	bne.n	800c428 <USBD_SetAddress+0x74>
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	885b      	ldrh	r3, [r3, #2]
 800c3d2:	2b7f      	cmp	r3, #127	; 0x7f
 800c3d4:	d828      	bhi.n	800c428 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	885b      	ldrh	r3, [r3, #2]
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d104      	bne.n	800c3f6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c3ec:	6839      	ldr	r1, [r7, #0]
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 f99c 	bl	800c72c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3f4:	e01c      	b.n	800c430 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	7bfa      	ldrb	r2, [r7, #15]
 800c3fa:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	4619      	mov	r1, r3
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f002 f98a 	bl	800e71c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fa5a 	bl	800c8c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c40e:	7bfb      	ldrb	r3, [r7, #15]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d004      	beq.n	800c41e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2202      	movs	r2, #2
 800c418:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c41c:	e008      	b.n	800c430 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c426:	e003      	b.n	800c430 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f97e 	bl	800c72c <USBD_CtlError>
  }
}
 800c430:	bf00      	nop
 800c432:	3710      	adds	r7, #16
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}

0800c438 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c442:	2300      	movs	r3, #0
 800c444:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	885b      	ldrh	r3, [r3, #2]
 800c44a:	b2da      	uxtb	r2, r3
 800c44c:	4b4b      	ldr	r3, [pc, #300]	; (800c57c <USBD_SetConfig+0x144>)
 800c44e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c450:	4b4a      	ldr	r3, [pc, #296]	; (800c57c <USBD_SetConfig+0x144>)
 800c452:	781b      	ldrb	r3, [r3, #0]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d905      	bls.n	800c464 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f966 	bl	800c72c <USBD_CtlError>
    return USBD_FAIL;
 800c460:	2303      	movs	r3, #3
 800c462:	e087      	b.n	800c574 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d002      	beq.n	800c474 <USBD_SetConfig+0x3c>
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d025      	beq.n	800c4be <USBD_SetConfig+0x86>
 800c472:	e071      	b.n	800c558 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800c474:	4b41      	ldr	r3, [pc, #260]	; (800c57c <USBD_SetConfig+0x144>)
 800c476:	781b      	ldrb	r3, [r3, #0]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d01c      	beq.n	800c4b6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800c47c:	4b3f      	ldr	r3, [pc, #252]	; (800c57c <USBD_SetConfig+0x144>)
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	461a      	mov	r2, r3
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c486:	4b3d      	ldr	r3, [pc, #244]	; (800c57c <USBD_SetConfig+0x144>)
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	4619      	mov	r1, r3
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7ff f97d 	bl	800b78c <USBD_SetClassConfig>
 800c492:	4603      	mov	r3, r0
 800c494:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d004      	beq.n	800c4a6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800c49c:	6839      	ldr	r1, [r7, #0]
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	f000 f944 	bl	800c72c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c4a4:	e065      	b.n	800c572 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c4a6:	6878      	ldr	r0, [r7, #4]
 800c4a8:	f000 fa0b 	bl	800c8c2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2203      	movs	r2, #3
 800c4b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c4b4:	e05d      	b.n	800c572 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa03 	bl	800c8c2 <USBD_CtlSendStatus>
    break;
 800c4bc:	e059      	b.n	800c572 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800c4be:	4b2f      	ldr	r3, [pc, #188]	; (800c57c <USBD_SetConfig+0x144>)
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d112      	bne.n	800c4ec <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	2202      	movs	r2, #2
 800c4ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800c4ce:	4b2b      	ldr	r3, [pc, #172]	; (800c57c <USBD_SetConfig+0x144>)
 800c4d0:	781b      	ldrb	r3, [r3, #0]
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c4d8:	4b28      	ldr	r3, [pc, #160]	; (800c57c <USBD_SetConfig+0x144>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	4619      	mov	r1, r3
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f7ff f970 	bl	800b7c4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 f9ec 	bl	800c8c2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800c4ea:	e042      	b.n	800c572 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800c4ec:	4b23      	ldr	r3, [pc, #140]	; (800c57c <USBD_SetConfig+0x144>)
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	685b      	ldr	r3, [r3, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d02a      	beq.n	800c550 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	685b      	ldr	r3, [r3, #4]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	4619      	mov	r1, r3
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f7ff f95e 	bl	800b7c4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800c508:	4b1c      	ldr	r3, [pc, #112]	; (800c57c <USBD_SetConfig+0x144>)
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	461a      	mov	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800c512:	4b1a      	ldr	r3, [pc, #104]	; (800c57c <USBD_SetConfig+0x144>)
 800c514:	781b      	ldrb	r3, [r3, #0]
 800c516:	4619      	mov	r1, r3
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f7ff f937 	bl	800b78c <USBD_SetClassConfig>
 800c51e:	4603      	mov	r3, r0
 800c520:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800c522:	7bfb      	ldrb	r3, [r7, #15]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d00f      	beq.n	800c548 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f000 f8fe 	bl	800c72c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	4619      	mov	r1, r3
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f7ff f943 	bl	800b7c4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2202      	movs	r2, #2
 800c542:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800c546:	e014      	b.n	800c572 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 f9ba 	bl	800c8c2 <USBD_CtlSendStatus>
    break;
 800c54e:	e010      	b.n	800c572 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 f9b6 	bl	800c8c2 <USBD_CtlSendStatus>
    break;
 800c556:	e00c      	b.n	800c572 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f8e6 	bl	800c72c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c560:	4b06      	ldr	r3, [pc, #24]	; (800c57c <USBD_SetConfig+0x144>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	4619      	mov	r1, r3
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f7ff f92c 	bl	800b7c4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800c56c:	2303      	movs	r3, #3
 800c56e:	73fb      	strb	r3, [r7, #15]
    break;
 800c570:	bf00      	nop
  }

  return ret;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	200005fd 	.word	0x200005fd

0800c580 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b082      	sub	sp, #8
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
 800c588:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	88db      	ldrh	r3, [r3, #6]
 800c58e:	2b01      	cmp	r3, #1
 800c590:	d004      	beq.n	800c59c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c592:	6839      	ldr	r1, [r7, #0]
 800c594:	6878      	ldr	r0, [r7, #4]
 800c596:	f000 f8c9 	bl	800c72c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800c59a:	e021      	b.n	800c5e0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a2:	2b01      	cmp	r3, #1
 800c5a4:	db17      	blt.n	800c5d6 <USBD_GetConfig+0x56>
 800c5a6:	2b02      	cmp	r3, #2
 800c5a8:	dd02      	ble.n	800c5b0 <USBD_GetConfig+0x30>
 800c5aa:	2b03      	cmp	r3, #3
 800c5ac:	d00b      	beq.n	800c5c6 <USBD_GetConfig+0x46>
 800c5ae:	e012      	b.n	800c5d6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	3308      	adds	r3, #8
 800c5ba:	2201      	movs	r2, #1
 800c5bc:	4619      	mov	r1, r3
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f000 f925 	bl	800c80e <USBD_CtlSendData>
      break;
 800c5c4:	e00c      	b.n	800c5e0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	3304      	adds	r3, #4
 800c5ca:	2201      	movs	r2, #1
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 f91d 	bl	800c80e <USBD_CtlSendData>
      break;
 800c5d4:	e004      	b.n	800c5e0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800c5d6:	6839      	ldr	r1, [r7, #0]
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 f8a7 	bl	800c72c <USBD_CtlError>
      break;
 800c5de:	bf00      	nop
}
 800c5e0:	bf00      	nop
 800c5e2:	3708      	adds	r7, #8
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5f8:	3b01      	subs	r3, #1
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d81e      	bhi.n	800c63c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	88db      	ldrh	r3, [r3, #6]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d004      	beq.n	800c610 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f88f 	bl	800c72c <USBD_CtlError>
      break;
 800c60e:	e01a      	b.n	800c646 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d005      	beq.n	800c62c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	68db      	ldr	r3, [r3, #12]
 800c624:	f043 0202 	orr.w	r2, r3, #2
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	330c      	adds	r3, #12
 800c630:	2202      	movs	r2, #2
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f000 f8ea 	bl	800c80e <USBD_CtlSendData>
    break;
 800c63a:	e004      	b.n	800c646 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800c63c:	6839      	ldr	r1, [r7, #0]
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f000 f874 	bl	800c72c <USBD_CtlError>
    break;
 800c644:	bf00      	nop
  }
}
 800c646:	bf00      	nop
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b082      	sub	sp, #8
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
 800c656:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	885b      	ldrh	r3, [r3, #2]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d106      	bne.n	800c66e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2201      	movs	r2, #1
 800c664:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 f92a 	bl	800c8c2 <USBD_CtlSendStatus>
  }
}
 800c66e:	bf00      	nop
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b082      	sub	sp, #8
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c686:	3b01      	subs	r3, #1
 800c688:	2b02      	cmp	r3, #2
 800c68a:	d80b      	bhi.n	800c6a4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	885b      	ldrh	r3, [r3, #2]
 800c690:	2b01      	cmp	r3, #1
 800c692:	d10c      	bne.n	800c6ae <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f910 	bl	800c8c2 <USBD_CtlSendStatus>
      }
      break;
 800c6a2:	e004      	b.n	800c6ae <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f840 	bl	800c72c <USBD_CtlError>
      break;
 800c6ac:	e000      	b.n	800c6b0 <USBD_ClrFeature+0x3a>
      break;
 800c6ae:	bf00      	nop
  }
}
 800c6b0:	bf00      	nop
 800c6b2:	3708      	adds	r7, #8
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c6b8:	b580      	push	{r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	781a      	ldrb	r2, [r3, #0]
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	3301      	adds	r3, #1
 800c6d2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	781a      	ldrb	r2, [r3, #0]
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c6e2:	68f8      	ldr	r0, [r7, #12]
 800c6e4:	f7ff faa9 	bl	800bc3a <SWAPBYTE>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	3301      	adds	r3, #1
 800c6fa:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f7ff fa9c 	bl	800bc3a <SWAPBYTE>
 800c702:	4603      	mov	r3, r0
 800c704:	461a      	mov	r2, r3
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	3301      	adds	r3, #1
 800c70e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	3301      	adds	r3, #1
 800c714:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f7ff fa8f 	bl	800bc3a <SWAPBYTE>
 800c71c:	4603      	mov	r3, r0
 800c71e:	461a      	mov	r2, r3
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	80da      	strh	r2, [r3, #6]
}
 800c724:	bf00      	nop
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b082      	sub	sp, #8
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c736:	2180      	movs	r1, #128	; 0x80
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 ff85 	bl	800e648 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c73e:	2100      	movs	r1, #0
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f001 ff81 	bl	800e648 <USBD_LL_StallEP>
}
 800c746:	bf00      	nop
 800c748:	3708      	adds	r7, #8
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}

0800c74e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b086      	sub	sp, #24
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	60b9      	str	r1, [r7, #8]
 800c758:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c75a:	2300      	movs	r3, #0
 800c75c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d036      	beq.n	800c7d2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c768:	6938      	ldr	r0, [r7, #16]
 800c76a:	f000 f836 	bl	800c7da <USBD_GetLen>
 800c76e:	4603      	mov	r3, r0
 800c770:	3301      	adds	r3, #1
 800c772:	b29b      	uxth	r3, r3
 800c774:	005b      	lsls	r3, r3, #1
 800c776:	b29a      	uxth	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c77c:	7dfb      	ldrb	r3, [r7, #23]
 800c77e:	68ba      	ldr	r2, [r7, #8]
 800c780:	4413      	add	r3, r2
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	7812      	ldrb	r2, [r2, #0]
 800c786:	701a      	strb	r2, [r3, #0]
  idx++;
 800c788:	7dfb      	ldrb	r3, [r7, #23]
 800c78a:	3301      	adds	r3, #1
 800c78c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c78e:	7dfb      	ldrb	r3, [r7, #23]
 800c790:	68ba      	ldr	r2, [r7, #8]
 800c792:	4413      	add	r3, r2
 800c794:	2203      	movs	r2, #3
 800c796:	701a      	strb	r2, [r3, #0]
  idx++;
 800c798:	7dfb      	ldrb	r3, [r7, #23]
 800c79a:	3301      	adds	r3, #1
 800c79c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c79e:	e013      	b.n	800c7c8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c7a0:	7dfb      	ldrb	r3, [r7, #23]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	7812      	ldrb	r2, [r2, #0]
 800c7aa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	3301      	adds	r3, #1
 800c7b0:	613b      	str	r3, [r7, #16]
    idx++;
 800c7b2:	7dfb      	ldrb	r3, [r7, #23]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c7b8:	7dfb      	ldrb	r3, [r7, #23]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	4413      	add	r3, r2
 800c7be:	2200      	movs	r2, #0
 800c7c0:	701a      	strb	r2, [r3, #0]
    idx++;
 800c7c2:	7dfb      	ldrb	r3, [r7, #23]
 800c7c4:	3301      	adds	r3, #1
 800c7c6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d1e7      	bne.n	800c7a0 <USBD_GetString+0x52>
 800c7d0:	e000      	b.n	800c7d4 <USBD_GetString+0x86>
    return;
 800c7d2:	bf00      	nop
  }
}
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b085      	sub	sp, #20
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c7ea:	e005      	b.n	800c7f8 <USBD_GetLen+0x1e>
  {
    len++;
 800c7ec:	7bfb      	ldrb	r3, [r7, #15]
 800c7ee:	3301      	adds	r3, #1
 800c7f0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	781b      	ldrb	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1f5      	bne.n	800c7ec <USBD_GetLen+0x12>
  }

  return len;
 800c800:	7bfb      	ldrb	r3, [r7, #15]
}
 800c802:	4618      	mov	r0, r3
 800c804:	3714      	adds	r7, #20
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr

0800c80e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	60f8      	str	r0, [r7, #12]
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2202      	movs	r2, #2
 800c81e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	68ba      	ldr	r2, [r7, #8]
 800c832:	2100      	movs	r1, #0
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f001 ff90 	bl	800e75a <USBD_LL_Transmit>

  return USBD_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3710      	adds	r7, #16
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68ba      	ldr	r2, [r7, #8]
 800c854:	2100      	movs	r1, #0
 800c856:	68f8      	ldr	r0, [r7, #12]
 800c858:	f001 ff7f 	bl	800e75a <USBD_LL_Transmit>

  return USBD_OK;
 800c85c:	2300      	movs	r3, #0
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	60f8      	str	r0, [r7, #12]
 800c86e:	60b9      	str	r1, [r7, #8]
 800c870:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2203      	movs	r2, #3
 800c876:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	68ba      	ldr	r2, [r7, #8]
 800c88e:	2100      	movs	r1, #0
 800c890:	68f8      	ldr	r0, [r7, #12]
 800c892:	f001 ff83 	bl	800e79c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c896:	2300      	movs	r3, #0
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3710      	adds	r7, #16
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	68f8      	ldr	r0, [r7, #12]
 800c8b4:	f001 ff72 	bl	800e79c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c8b8:	2300      	movs	r3, #0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3710      	adds	r7, #16
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c8c2:	b580      	push	{r7, lr}
 800c8c4:	b082      	sub	sp, #8
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	2204      	movs	r2, #4
 800c8ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	2100      	movs	r1, #0
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f001 ff3e 	bl	800e75a <USBD_LL_Transmit>

  return USBD_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3708      	adds	r7, #8
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2205      	movs	r2, #5
 800c8f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8f8:	2300      	movs	r3, #0
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f001 ff4c 	bl	800e79c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	3708      	adds	r7, #8
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bd80      	pop	{r7, pc}
	...

0800c910 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	60f8      	str	r0, [r7, #12]
 800c918:	60b9      	str	r1, [r7, #8]
 800c91a:	4613      	mov	r3, r2
 800c91c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c91e:	2301      	movs	r3, #1
 800c920:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c922:	2300      	movs	r3, #0
 800c924:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c926:	4b1f      	ldr	r3, [pc, #124]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c928:	7a5b      	ldrb	r3, [r3, #9]
 800c92a:	b2db      	uxtb	r3, r3
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d131      	bne.n	800c994 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c930:	4b1c      	ldr	r3, [pc, #112]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c932:	7a5b      	ldrb	r3, [r3, #9]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	461a      	mov	r2, r3
 800c938:	4b1a      	ldr	r3, [pc, #104]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c93a:	2100      	movs	r1, #0
 800c93c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c93e:	4b19      	ldr	r3, [pc, #100]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c940:	7a5b      	ldrb	r3, [r3, #9]
 800c942:	b2db      	uxtb	r3, r3
 800c944:	4a17      	ldr	r2, [pc, #92]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	68fa      	ldr	r2, [r7, #12]
 800c94c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c94e:	4b15      	ldr	r3, [pc, #84]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c950:	7a5b      	ldrb	r3, [r3, #9]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	461a      	mov	r2, r3
 800c956:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c958:	4413      	add	r3, r2
 800c95a:	79fa      	ldrb	r2, [r7, #7]
 800c95c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c95e:	4b11      	ldr	r3, [pc, #68]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c960:	7a5b      	ldrb	r3, [r3, #9]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	1c5a      	adds	r2, r3, #1
 800c966:	b2d1      	uxtb	r1, r2
 800c968:	4a0e      	ldr	r2, [pc, #56]	; (800c9a4 <FATFS_LinkDriverEx+0x94>)
 800c96a:	7251      	strb	r1, [r2, #9]
 800c96c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c96e:	7dbb      	ldrb	r3, [r7, #22]
 800c970:	3330      	adds	r3, #48	; 0x30
 800c972:	b2da      	uxtb	r2, r3
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	3301      	adds	r3, #1
 800c97c:	223a      	movs	r2, #58	; 0x3a
 800c97e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	3302      	adds	r3, #2
 800c984:	222f      	movs	r2, #47	; 0x2f
 800c986:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	3303      	adds	r3, #3
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c990:	2300      	movs	r3, #0
 800c992:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c994:	7dfb      	ldrb	r3, [r7, #23]
}
 800c996:	4618      	mov	r0, r3
 800c998:	371c      	adds	r7, #28
 800c99a:	46bd      	mov	sp, r7
 800c99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a0:	4770      	bx	lr
 800c9a2:	bf00      	nop
 800c9a4:	20000600 	.word	0x20000600

0800c9a8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b082      	sub	sp, #8
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	6839      	ldr	r1, [r7, #0]
 800c9b6:	6878      	ldr	r0, [r7, #4]
 800c9b8:	f7ff ffaa 	bl	800c910 <FATFS_LinkDriverEx>
 800c9bc:	4603      	mov	r3, r0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3708      	adds	r7, #8
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}

0800c9c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b085      	sub	sp, #20
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c9d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9d8:	2b84      	cmp	r3, #132	; 0x84
 800c9da:	d005      	beq.n	800c9e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c9dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	3303      	adds	r3, #3
 800c9e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3714      	adds	r7, #20
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c9fa:	f000 fadb 	bl	800cfb4 <vTaskStartScheduler>
  
  return osOK;
 800c9fe:	2300      	movs	r3, #0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800ca04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca06:	b089      	sub	sp, #36	; 0x24
 800ca08:	af04      	add	r7, sp, #16
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	695b      	ldr	r3, [r3, #20]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d020      	beq.n	800ca58 <osThreadCreate+0x54>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	699b      	ldr	r3, [r3, #24]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d01c      	beq.n	800ca58 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	685c      	ldr	r4, [r3, #4]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681d      	ldr	r5, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	691e      	ldr	r6, [r3, #16]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca30:	4618      	mov	r0, r3
 800ca32:	f7ff ffc8 	bl	800c9c6 <makeFreeRtosPriority>
 800ca36:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	695b      	ldr	r3, [r3, #20]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca40:	9202      	str	r2, [sp, #8]
 800ca42:	9301      	str	r3, [sp, #4]
 800ca44:	9100      	str	r1, [sp, #0]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4629      	mov	r1, r5
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f000 f8ed 	bl	800cc2c <xTaskCreateStatic>
 800ca52:	4603      	mov	r3, r0
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	e01c      	b.n	800ca92 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	685c      	ldr	r4, [r3, #4]
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca64:	b29e      	uxth	r6, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff ffaa 	bl	800c9c6 <makeFreeRtosPriority>
 800ca72:	4602      	mov	r2, r0
 800ca74:	f107 030c 	add.w	r3, r7, #12
 800ca78:	9301      	str	r3, [sp, #4]
 800ca7a:	9200      	str	r2, [sp, #0]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	4632      	mov	r2, r6
 800ca80:	4629      	mov	r1, r5
 800ca82:	4620      	mov	r0, r4
 800ca84:	f000 f92c 	bl	800cce0 <xTaskCreate>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d001      	beq.n	800ca92 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	e000      	b.n	800ca94 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ca92:	68fb      	ldr	r3, [r7, #12]
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3714      	adds	r7, #20
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca9c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b084      	sub	sp, #16
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <osDelay+0x16>
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	e000      	b.n	800cab4 <osDelay+0x18>
 800cab2:	2301      	movs	r3, #1
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 fa49 	bl	800cf4c <vTaskDelay>
  
  return osOK;
 800caba:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f103 0208 	add.w	r2, r3, #8
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f04f 32ff 	mov.w	r2, #4294967295
 800cadc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f103 0208 	add.w	r2, r3, #8
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f103 0208 	add.w	r2, r3, #8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb12:	bf00      	nop
 800cb14:	370c      	adds	r7, #12
 800cb16:	46bd      	mov	sp, r7
 800cb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1c:	4770      	bx	lr

0800cb1e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b085      	sub	sp, #20
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	689a      	ldr	r2, [r3, #8]
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	683a      	ldr	r2, [r7, #0]
 800cb48:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	1c5a      	adds	r2, r3, #1
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	601a      	str	r2, [r3, #0]
}
 800cb5a:	bf00      	nop
 800cb5c:	3714      	adds	r7, #20
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr

0800cb66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb66:	b480      	push	{r7}
 800cb68:	b085      	sub	sp, #20
 800cb6a:	af00      	add	r7, sp, #0
 800cb6c:	6078      	str	r0, [r7, #4]
 800cb6e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb76:	68bb      	ldr	r3, [r7, #8]
 800cb78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb7c:	d103      	bne.n	800cb86 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	e00c      	b.n	800cba0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	3308      	adds	r3, #8
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	e002      	b.n	800cb94 <vListInsert+0x2e>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68ba      	ldr	r2, [r7, #8]
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	d2f6      	bcs.n	800cb8e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	685a      	ldr	r2, [r3, #4]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	683a      	ldr	r2, [r7, #0]
 800cbba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	601a      	str	r2, [r3, #0]
}
 800cbcc:	bf00      	nop
 800cbce:	3714      	adds	r7, #20
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd6:	4770      	bx	lr

0800cbd8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbd8:	b480      	push	{r7}
 800cbda:	b085      	sub	sp, #20
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	685b      	ldr	r3, [r3, #4]
 800cbea:	687a      	ldr	r2, [r7, #4]
 800cbec:	6892      	ldr	r2, [r2, #8]
 800cbee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	689b      	ldr	r3, [r3, #8]
 800cbf4:	687a      	ldr	r2, [r7, #4]
 800cbf6:	6852      	ldr	r2, [r2, #4]
 800cbf8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d103      	bne.n	800cc0c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2200      	movs	r2, #0
 800cc10:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	1e5a      	subs	r2, r3, #1
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3714      	adds	r7, #20
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b08e      	sub	sp, #56	; 0x38
 800cc30:	af04      	add	r7, sp, #16
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	60b9      	str	r1, [r7, #8]
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d109      	bne.n	800cc54 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc44:	f383 8811 	msr	BASEPRI, r3
 800cc48:	f3bf 8f6f 	isb	sy
 800cc4c:	f3bf 8f4f 	dsb	sy
 800cc50:	623b      	str	r3, [r7, #32]
 800cc52:	e7fe      	b.n	800cc52 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800cc54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d109      	bne.n	800cc6e <xTaskCreateStatic+0x42>
 800cc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc5e:	f383 8811 	msr	BASEPRI, r3
 800cc62:	f3bf 8f6f 	isb	sy
 800cc66:	f3bf 8f4f 	dsb	sy
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	e7fe      	b.n	800cc6c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc6e:	2354      	movs	r3, #84	; 0x54
 800cc70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b54      	cmp	r3, #84	; 0x54
 800cc76:	d009      	beq.n	800cc8c <xTaskCreateStatic+0x60>
 800cc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc7c:	f383 8811 	msr	BASEPRI, r3
 800cc80:	f3bf 8f6f 	isb	sy
 800cc84:	f3bf 8f4f 	dsb	sy
 800cc88:	61bb      	str	r3, [r7, #24]
 800cc8a:	e7fe      	b.n	800cc8a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cc8c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cc8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d01e      	beq.n	800ccd2 <xTaskCreateStatic+0xa6>
 800cc94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d01b      	beq.n	800ccd2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cc9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cca2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca6:	2202      	movs	r2, #2
 800cca8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ccac:	2300      	movs	r3, #0
 800ccae:	9303      	str	r3, [sp, #12]
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	9302      	str	r3, [sp, #8]
 800ccb4:	f107 0314 	add.w	r3, r7, #20
 800ccb8:	9301      	str	r3, [sp, #4]
 800ccba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	68b9      	ldr	r1, [r7, #8]
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 f850 	bl	800cd6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ccca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cccc:	f000 f8d4 	bl	800ce78 <prvAddNewTaskToReadyList>
 800ccd0:	e001      	b.n	800ccd6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccd6:	697b      	ldr	r3, [r7, #20]
	}
 800ccd8:	4618      	mov	r0, r3
 800ccda:	3728      	adds	r7, #40	; 0x28
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b08c      	sub	sp, #48	; 0x30
 800cce4:	af04      	add	r7, sp, #16
 800cce6:	60f8      	str	r0, [r7, #12]
 800cce8:	60b9      	str	r1, [r7, #8]
 800ccea:	603b      	str	r3, [r7, #0]
 800ccec:	4613      	mov	r3, r2
 800ccee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ccf0:	88fb      	ldrh	r3, [r7, #6]
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f000 feb5 	bl	800da64 <pvPortMalloc>
 800ccfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d00e      	beq.n	800cd20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd02:	2054      	movs	r0, #84	; 0x54
 800cd04:	f000 feae 	bl	800da64 <pvPortMalloc>
 800cd08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd0a:	69fb      	ldr	r3, [r7, #28]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d003      	beq.n	800cd18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd10:	69fb      	ldr	r3, [r7, #28]
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	631a      	str	r2, [r3, #48]	; 0x30
 800cd16:	e005      	b.n	800cd24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd18:	6978      	ldr	r0, [r7, #20]
 800cd1a:	f000 ff65 	bl	800dbe8 <vPortFree>
 800cd1e:	e001      	b.n	800cd24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd24:	69fb      	ldr	r3, [r7, #28]
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d017      	beq.n	800cd5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd2a:	69fb      	ldr	r3, [r7, #28]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd32:	88fa      	ldrh	r2, [r7, #6]
 800cd34:	2300      	movs	r3, #0
 800cd36:	9303      	str	r3, [sp, #12]
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	9302      	str	r3, [sp, #8]
 800cd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd3e:	9301      	str	r3, [sp, #4]
 800cd40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd42:	9300      	str	r3, [sp, #0]
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	68b9      	ldr	r1, [r7, #8]
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f000 f80e 	bl	800cd6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd4e:	69f8      	ldr	r0, [r7, #28]
 800cd50:	f000 f892 	bl	800ce78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd54:	2301      	movs	r3, #1
 800cd56:	61bb      	str	r3, [r7, #24]
 800cd58:	e002      	b.n	800cd60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd5a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd60:	69bb      	ldr	r3, [r7, #24]
	}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3720      	adds	r7, #32
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}

0800cd6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b088      	sub	sp, #32
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	60f8      	str	r0, [r7, #12]
 800cd72:	60b9      	str	r1, [r7, #8]
 800cd74:	607a      	str	r2, [r7, #4]
 800cd76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cd82:	3b01      	subs	r3, #1
 800cd84:	009b      	lsls	r3, r3, #2
 800cd86:	4413      	add	r3, r2
 800cd88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	f023 0307 	bic.w	r3, r3, #7
 800cd90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	f003 0307 	and.w	r3, r3, #7
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d009      	beq.n	800cdb0 <prvInitialiseNewTask+0x46>
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	f383 8811 	msr	BASEPRI, r3
 800cda4:	f3bf 8f6f 	isb	sy
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	617b      	str	r3, [r7, #20]
 800cdae:	e7fe      	b.n	800cdae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d01f      	beq.n	800cdf6 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	61fb      	str	r3, [r7, #28]
 800cdba:	e012      	b.n	800cde2 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cdbc:	68ba      	ldr	r2, [r7, #8]
 800cdbe:	69fb      	ldr	r3, [r7, #28]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	7819      	ldrb	r1, [r3, #0]
 800cdc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdc6:	69fb      	ldr	r3, [r7, #28]
 800cdc8:	4413      	add	r3, r2
 800cdca:	3334      	adds	r3, #52	; 0x34
 800cdcc:	460a      	mov	r2, r1
 800cdce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdd0:	68ba      	ldr	r2, [r7, #8]
 800cdd2:	69fb      	ldr	r3, [r7, #28]
 800cdd4:	4413      	add	r3, r2
 800cdd6:	781b      	ldrb	r3, [r3, #0]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d006      	beq.n	800cdea <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cddc:	69fb      	ldr	r3, [r7, #28]
 800cdde:	3301      	adds	r3, #1
 800cde0:	61fb      	str	r3, [r7, #28]
 800cde2:	69fb      	ldr	r3, [r7, #28]
 800cde4:	2b0f      	cmp	r3, #15
 800cde6:	d9e9      	bls.n	800cdbc <prvInitialiseNewTask+0x52>
 800cde8:	e000      	b.n	800cdec <prvInitialiseNewTask+0x82>
			{
				break;
 800cdea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cdec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdee:	2200      	movs	r2, #0
 800cdf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cdf4:	e003      	b.n	800cdfe <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdf8:	2200      	movs	r2, #0
 800cdfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cdfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce00:	2b06      	cmp	r3, #6
 800ce02:	d901      	bls.n	800ce08 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce04:	2306      	movs	r3, #6
 800ce06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce12:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ce14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce16:	2200      	movs	r2, #0
 800ce18:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce1c:	3304      	adds	r3, #4
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f7ff fe70 	bl	800cb04 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce26:	3318      	adds	r3, #24
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7ff fe6b 	bl	800cb04 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce36:	f1c3 0207 	rsb	r2, r3, #7
 800ce3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce46:	2200      	movs	r2, #0
 800ce48:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	68f9      	ldr	r1, [r7, #12]
 800ce56:	69b8      	ldr	r0, [r7, #24]
 800ce58:	f000 fbfe 	bl	800d658 <pxPortInitialiseStack>
 800ce5c:	4602      	mov	r2, r0
 800ce5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d002      	beq.n	800ce6e <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ce6e:	bf00      	nop
 800ce70:	3720      	adds	r7, #32
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b082      	sub	sp, #8
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ce80:	f000 fd14 	bl	800d8ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ce84:	4b2a      	ldr	r3, [pc, #168]	; (800cf30 <prvAddNewTaskToReadyList+0xb8>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	3301      	adds	r3, #1
 800ce8a:	4a29      	ldr	r2, [pc, #164]	; (800cf30 <prvAddNewTaskToReadyList+0xb8>)
 800ce8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ce8e:	4b29      	ldr	r3, [pc, #164]	; (800cf34 <prvAddNewTaskToReadyList+0xbc>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d109      	bne.n	800ceaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ce96:	4a27      	ldr	r2, [pc, #156]	; (800cf34 <prvAddNewTaskToReadyList+0xbc>)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ce9c:	4b24      	ldr	r3, [pc, #144]	; (800cf30 <prvAddNewTaskToReadyList+0xb8>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2b01      	cmp	r3, #1
 800cea2:	d110      	bne.n	800cec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cea4:	f000 fab8 	bl	800d418 <prvInitialiseTaskLists>
 800cea8:	e00d      	b.n	800cec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ceaa:	4b23      	ldr	r3, [pc, #140]	; (800cf38 <prvAddNewTaskToReadyList+0xc0>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d109      	bne.n	800cec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ceb2:	4b20      	ldr	r3, [pc, #128]	; (800cf34 <prvAddNewTaskToReadyList+0xbc>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebc:	429a      	cmp	r2, r3
 800cebe:	d802      	bhi.n	800cec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cec0:	4a1c      	ldr	r2, [pc, #112]	; (800cf34 <prvAddNewTaskToReadyList+0xbc>)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cec6:	4b1d      	ldr	r3, [pc, #116]	; (800cf3c <prvAddNewTaskToReadyList+0xc4>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	3301      	adds	r3, #1
 800cecc:	4a1b      	ldr	r2, [pc, #108]	; (800cf3c <prvAddNewTaskToReadyList+0xc4>)
 800cece:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	2201      	movs	r2, #1
 800ced6:	409a      	lsls	r2, r3
 800ced8:	4b19      	ldr	r3, [pc, #100]	; (800cf40 <prvAddNewTaskToReadyList+0xc8>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	4313      	orrs	r3, r2
 800cede:	4a18      	ldr	r2, [pc, #96]	; (800cf40 <prvAddNewTaskToReadyList+0xc8>)
 800cee0:	6013      	str	r3, [r2, #0]
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4a15      	ldr	r2, [pc, #84]	; (800cf44 <prvAddNewTaskToReadyList+0xcc>)
 800cef0:	441a      	add	r2, r3
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	3304      	adds	r3, #4
 800cef6:	4619      	mov	r1, r3
 800cef8:	4610      	mov	r0, r2
 800cefa:	f7ff fe10 	bl	800cb1e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cefe:	f000 fd03 	bl	800d908 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf02:	4b0d      	ldr	r3, [pc, #52]	; (800cf38 <prvAddNewTaskToReadyList+0xc0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00e      	beq.n	800cf28 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf0a:	4b0a      	ldr	r3, [pc, #40]	; (800cf34 <prvAddNewTaskToReadyList+0xbc>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d207      	bcs.n	800cf28 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf18:	4b0b      	ldr	r3, [pc, #44]	; (800cf48 <prvAddNewTaskToReadyList+0xd0>)
 800cf1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1e:	601a      	str	r2, [r3, #0]
 800cf20:	f3bf 8f4f 	dsb	sy
 800cf24:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	2000070c 	.word	0x2000070c
 800cf34:	2000060c 	.word	0x2000060c
 800cf38:	20000718 	.word	0x20000718
 800cf3c:	20000728 	.word	0x20000728
 800cf40:	20000714 	.word	0x20000714
 800cf44:	20000610 	.word	0x20000610
 800cf48:	e000ed04 	.word	0xe000ed04

0800cf4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cf54:	2300      	movs	r3, #0
 800cf56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d016      	beq.n	800cf8c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cf5e:	4b13      	ldr	r3, [pc, #76]	; (800cfac <vTaskDelay+0x60>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <vTaskDelay+0x2e>
 800cf66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	60bb      	str	r3, [r7, #8]
 800cf78:	e7fe      	b.n	800cf78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800cf7a:	f000 f879 	bl	800d070 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cf7e:	2100      	movs	r1, #0
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fb03 	bl	800d58c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cf86:	f000 f881 	bl	800d08c <xTaskResumeAll>
 800cf8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d107      	bne.n	800cfa2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800cf92:	4b07      	ldr	r3, [pc, #28]	; (800cfb0 <vTaskDelay+0x64>)
 800cf94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf98:	601a      	str	r2, [r3, #0]
 800cf9a:	f3bf 8f4f 	dsb	sy
 800cf9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfa2:	bf00      	nop
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20000734 	.word	0x20000734
 800cfb0:	e000ed04 	.word	0xe000ed04

0800cfb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b08a      	sub	sp, #40	; 0x28
 800cfb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cfc2:	463a      	mov	r2, r7
 800cfc4:	1d39      	adds	r1, r7, #4
 800cfc6:	f107 0308 	add.w	r3, r7, #8
 800cfca:	4618      	mov	r0, r3
 800cfcc:	f7f5 f8d0 	bl	8002170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	9202      	str	r2, [sp, #8]
 800cfd8:	9301      	str	r3, [sp, #4]
 800cfda:	2300      	movs	r3, #0
 800cfdc:	9300      	str	r3, [sp, #0]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	460a      	mov	r2, r1
 800cfe2:	491d      	ldr	r1, [pc, #116]	; (800d058 <vTaskStartScheduler+0xa4>)
 800cfe4:	481d      	ldr	r0, [pc, #116]	; (800d05c <vTaskStartScheduler+0xa8>)
 800cfe6:	f7ff fe21 	bl	800cc2c <xTaskCreateStatic>
 800cfea:	4602      	mov	r2, r0
 800cfec:	4b1c      	ldr	r3, [pc, #112]	; (800d060 <vTaskStartScheduler+0xac>)
 800cfee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cff0:	4b1b      	ldr	r3, [pc, #108]	; (800d060 <vTaskStartScheduler+0xac>)
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d002      	beq.n	800cffe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cff8:	2301      	movs	r3, #1
 800cffa:	617b      	str	r3, [r7, #20]
 800cffc:	e001      	b.n	800d002 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cffe:	2300      	movs	r3, #0
 800d000:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	2b01      	cmp	r3, #1
 800d006:	d115      	bne.n	800d034 <vTaskStartScheduler+0x80>
 800d008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d00c:	f383 8811 	msr	BASEPRI, r3
 800d010:	f3bf 8f6f 	isb	sy
 800d014:	f3bf 8f4f 	dsb	sy
 800d018:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d01a:	4b12      	ldr	r3, [pc, #72]	; (800d064 <vTaskStartScheduler+0xb0>)
 800d01c:	f04f 32ff 	mov.w	r2, #4294967295
 800d020:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d022:	4b11      	ldr	r3, [pc, #68]	; (800d068 <vTaskStartScheduler+0xb4>)
 800d024:	2201      	movs	r2, #1
 800d026:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d028:	4b10      	ldr	r3, [pc, #64]	; (800d06c <vTaskStartScheduler+0xb8>)
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d02e:	f000 fb9f 	bl	800d770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d032:	e00d      	b.n	800d050 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03a:	d109      	bne.n	800d050 <vTaskStartScheduler+0x9c>
 800d03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d040:	f383 8811 	msr	BASEPRI, r3
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	f3bf 8f4f 	dsb	sy
 800d04c:	60fb      	str	r3, [r7, #12]
 800d04e:	e7fe      	b.n	800d04e <vTaskStartScheduler+0x9a>
}
 800d050:	bf00      	nop
 800d052:	3718      	adds	r7, #24
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}
 800d058:	08013630 	.word	0x08013630
 800d05c:	0800d3e9 	.word	0x0800d3e9
 800d060:	20000730 	.word	0x20000730
 800d064:	2000072c 	.word	0x2000072c
 800d068:	20000718 	.word	0x20000718
 800d06c:	20000710 	.word	0x20000710

0800d070 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d070:	b480      	push	{r7}
 800d072:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d074:	4b04      	ldr	r3, [pc, #16]	; (800d088 <vTaskSuspendAll+0x18>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	3301      	adds	r3, #1
 800d07a:	4a03      	ldr	r2, [pc, #12]	; (800d088 <vTaskSuspendAll+0x18>)
 800d07c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d07e:	bf00      	nop
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	20000734 	.word	0x20000734

0800d08c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d092:	2300      	movs	r3, #0
 800d094:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d096:	2300      	movs	r3, #0
 800d098:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d09a:	4b41      	ldr	r3, [pc, #260]	; (800d1a0 <xTaskResumeAll+0x114>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d109      	bne.n	800d0b6 <xTaskResumeAll+0x2a>
 800d0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a6:	f383 8811 	msr	BASEPRI, r3
 800d0aa:	f3bf 8f6f 	isb	sy
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	603b      	str	r3, [r7, #0]
 800d0b4:	e7fe      	b.n	800d0b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d0b6:	f000 fbf9 	bl	800d8ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d0ba:	4b39      	ldr	r3, [pc, #228]	; (800d1a0 <xTaskResumeAll+0x114>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	3b01      	subs	r3, #1
 800d0c0:	4a37      	ldr	r2, [pc, #220]	; (800d1a0 <xTaskResumeAll+0x114>)
 800d0c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d0c4:	4b36      	ldr	r3, [pc, #216]	; (800d1a0 <xTaskResumeAll+0x114>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d161      	bne.n	800d190 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d0cc:	4b35      	ldr	r3, [pc, #212]	; (800d1a4 <xTaskResumeAll+0x118>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d05d      	beq.n	800d190 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d0d4:	e02e      	b.n	800d134 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0d6:	4b34      	ldr	r3, [pc, #208]	; (800d1a8 <xTaskResumeAll+0x11c>)
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	3318      	adds	r3, #24
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	f7ff fd78 	bl	800cbd8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	3304      	adds	r3, #4
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7ff fd73 	bl	800cbd8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f6:	2201      	movs	r2, #1
 800d0f8:	409a      	lsls	r2, r3
 800d0fa:	4b2c      	ldr	r3, [pc, #176]	; (800d1ac <xTaskResumeAll+0x120>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	4a2a      	ldr	r2, [pc, #168]	; (800d1ac <xTaskResumeAll+0x120>)
 800d102:	6013      	str	r3, [r2, #0]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d108:	4613      	mov	r3, r2
 800d10a:	009b      	lsls	r3, r3, #2
 800d10c:	4413      	add	r3, r2
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	4a27      	ldr	r2, [pc, #156]	; (800d1b0 <xTaskResumeAll+0x124>)
 800d112:	441a      	add	r2, r3
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	3304      	adds	r3, #4
 800d118:	4619      	mov	r1, r3
 800d11a:	4610      	mov	r0, r2
 800d11c:	f7ff fcff 	bl	800cb1e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d124:	4b23      	ldr	r3, [pc, #140]	; (800d1b4 <xTaskResumeAll+0x128>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d302      	bcc.n	800d134 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800d12e:	4b22      	ldr	r3, [pc, #136]	; (800d1b8 <xTaskResumeAll+0x12c>)
 800d130:	2201      	movs	r2, #1
 800d132:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d134:	4b1c      	ldr	r3, [pc, #112]	; (800d1a8 <xTaskResumeAll+0x11c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d1cc      	bne.n	800d0d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d001      	beq.n	800d146 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d142:	f000 fa03 	bl	800d54c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d146:	4b1d      	ldr	r3, [pc, #116]	; (800d1bc <xTaskResumeAll+0x130>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d010      	beq.n	800d174 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d152:	f000 f837 	bl	800d1c4 <xTaskIncrementTick>
 800d156:	4603      	mov	r3, r0
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d002      	beq.n	800d162 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800d15c:	4b16      	ldr	r3, [pc, #88]	; (800d1b8 <xTaskResumeAll+0x12c>)
 800d15e:	2201      	movs	r2, #1
 800d160:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	3b01      	subs	r3, #1
 800d166:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d1f1      	bne.n	800d152 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800d16e:	4b13      	ldr	r3, [pc, #76]	; (800d1bc <xTaskResumeAll+0x130>)
 800d170:	2200      	movs	r2, #0
 800d172:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d174:	4b10      	ldr	r3, [pc, #64]	; (800d1b8 <xTaskResumeAll+0x12c>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d009      	beq.n	800d190 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d17c:	2301      	movs	r3, #1
 800d17e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d180:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <xTaskResumeAll+0x134>)
 800d182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d186:	601a      	str	r2, [r3, #0]
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d190:	f000 fbba 	bl	800d908 <vPortExitCritical>

	return xAlreadyYielded;
 800d194:	68bb      	ldr	r3, [r7, #8]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}
 800d19e:	bf00      	nop
 800d1a0:	20000734 	.word	0x20000734
 800d1a4:	2000070c 	.word	0x2000070c
 800d1a8:	200006cc 	.word	0x200006cc
 800d1ac:	20000714 	.word	0x20000714
 800d1b0:	20000610 	.word	0x20000610
 800d1b4:	2000060c 	.word	0x2000060c
 800d1b8:	20000720 	.word	0x20000720
 800d1bc:	2000071c 	.word	0x2000071c
 800d1c0:	e000ed04 	.word	0xe000ed04

0800d1c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b086      	sub	sp, #24
 800d1c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1ce:	4b4e      	ldr	r3, [pc, #312]	; (800d308 <xTaskIncrementTick+0x144>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f040 8087 	bne.w	800d2e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d1d8:	4b4c      	ldr	r3, [pc, #304]	; (800d30c <xTaskIncrementTick+0x148>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	3301      	adds	r3, #1
 800d1de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d1e0:	4a4a      	ldr	r2, [pc, #296]	; (800d30c <xTaskIncrementTick+0x148>)
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d11f      	bne.n	800d22c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800d1ec:	4b48      	ldr	r3, [pc, #288]	; (800d310 <xTaskIncrementTick+0x14c>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d009      	beq.n	800d20a <xTaskIncrementTick+0x46>
 800d1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1fa:	f383 8811 	msr	BASEPRI, r3
 800d1fe:	f3bf 8f6f 	isb	sy
 800d202:	f3bf 8f4f 	dsb	sy
 800d206:	603b      	str	r3, [r7, #0]
 800d208:	e7fe      	b.n	800d208 <xTaskIncrementTick+0x44>
 800d20a:	4b41      	ldr	r3, [pc, #260]	; (800d310 <xTaskIncrementTick+0x14c>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	60fb      	str	r3, [r7, #12]
 800d210:	4b40      	ldr	r3, [pc, #256]	; (800d314 <xTaskIncrementTick+0x150>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	4a3e      	ldr	r2, [pc, #248]	; (800d310 <xTaskIncrementTick+0x14c>)
 800d216:	6013      	str	r3, [r2, #0]
 800d218:	4a3e      	ldr	r2, [pc, #248]	; (800d314 <xTaskIncrementTick+0x150>)
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6013      	str	r3, [r2, #0]
 800d21e:	4b3e      	ldr	r3, [pc, #248]	; (800d318 <xTaskIncrementTick+0x154>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	3301      	adds	r3, #1
 800d224:	4a3c      	ldr	r2, [pc, #240]	; (800d318 <xTaskIncrementTick+0x154>)
 800d226:	6013      	str	r3, [r2, #0]
 800d228:	f000 f990 	bl	800d54c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d22c:	4b3b      	ldr	r3, [pc, #236]	; (800d31c <xTaskIncrementTick+0x158>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	693a      	ldr	r2, [r7, #16]
 800d232:	429a      	cmp	r2, r3
 800d234:	d348      	bcc.n	800d2c8 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d236:	4b36      	ldr	r3, [pc, #216]	; (800d310 <xTaskIncrementTick+0x14c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d104      	bne.n	800d24a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d240:	4b36      	ldr	r3, [pc, #216]	; (800d31c <xTaskIncrementTick+0x158>)
 800d242:	f04f 32ff 	mov.w	r2, #4294967295
 800d246:	601a      	str	r2, [r3, #0]
					break;
 800d248:	e03e      	b.n	800d2c8 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d24a:	4b31      	ldr	r3, [pc, #196]	; (800d310 <xTaskIncrementTick+0x14c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	68db      	ldr	r3, [r3, #12]
 800d250:	68db      	ldr	r3, [r3, #12]
 800d252:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d25a:	693a      	ldr	r2, [r7, #16]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d203      	bcs.n	800d26a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d262:	4a2e      	ldr	r2, [pc, #184]	; (800d31c <xTaskIncrementTick+0x158>)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d268:	e02e      	b.n	800d2c8 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d26a:	68bb      	ldr	r3, [r7, #8]
 800d26c:	3304      	adds	r3, #4
 800d26e:	4618      	mov	r0, r3
 800d270:	f7ff fcb2 	bl	800cbd8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d004      	beq.n	800d286 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d27c:	68bb      	ldr	r3, [r7, #8]
 800d27e:	3318      	adds	r3, #24
 800d280:	4618      	mov	r0, r3
 800d282:	f7ff fca9 	bl	800cbd8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d286:	68bb      	ldr	r3, [r7, #8]
 800d288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28a:	2201      	movs	r2, #1
 800d28c:	409a      	lsls	r2, r3
 800d28e:	4b24      	ldr	r3, [pc, #144]	; (800d320 <xTaskIncrementTick+0x15c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4313      	orrs	r3, r2
 800d294:	4a22      	ldr	r2, [pc, #136]	; (800d320 <xTaskIncrementTick+0x15c>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29c:	4613      	mov	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4a1f      	ldr	r2, [pc, #124]	; (800d324 <xTaskIncrementTick+0x160>)
 800d2a6:	441a      	add	r2, r3
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	f7ff fc35 	bl	800cb1e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2b8:	4b1b      	ldr	r3, [pc, #108]	; (800d328 <xTaskIncrementTick+0x164>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d3b9      	bcc.n	800d236 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d2c6:	e7b6      	b.n	800d236 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d2c8:	4b17      	ldr	r3, [pc, #92]	; (800d328 <xTaskIncrementTick+0x164>)
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2ce:	4915      	ldr	r1, [pc, #84]	; (800d324 <xTaskIncrementTick+0x160>)
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	4413      	add	r3, r2
 800d2d6:	009b      	lsls	r3, r3, #2
 800d2d8:	440b      	add	r3, r1
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d907      	bls.n	800d2f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	617b      	str	r3, [r7, #20]
 800d2e4:	e004      	b.n	800d2f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d2e6:	4b11      	ldr	r3, [pc, #68]	; (800d32c <xTaskIncrementTick+0x168>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	4a0f      	ldr	r2, [pc, #60]	; (800d32c <xTaskIncrementTick+0x168>)
 800d2ee:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d2f0:	4b0f      	ldr	r3, [pc, #60]	; (800d330 <xTaskIncrementTick+0x16c>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d001      	beq.n	800d2fc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d2fc:	697b      	ldr	r3, [r7, #20]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3718      	adds	r7, #24
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	20000734 	.word	0x20000734
 800d30c:	20000710 	.word	0x20000710
 800d310:	200006c4 	.word	0x200006c4
 800d314:	200006c8 	.word	0x200006c8
 800d318:	20000724 	.word	0x20000724
 800d31c:	2000072c 	.word	0x2000072c
 800d320:	20000714 	.word	0x20000714
 800d324:	20000610 	.word	0x20000610
 800d328:	2000060c 	.word	0x2000060c
 800d32c:	2000071c 	.word	0x2000071c
 800d330:	20000720 	.word	0x20000720

0800d334 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d334:	b480      	push	{r7}
 800d336:	b087      	sub	sp, #28
 800d338:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d33a:	4b26      	ldr	r3, [pc, #152]	; (800d3d4 <vTaskSwitchContext+0xa0>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d003      	beq.n	800d34a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d342:	4b25      	ldr	r3, [pc, #148]	; (800d3d8 <vTaskSwitchContext+0xa4>)
 800d344:	2201      	movs	r2, #1
 800d346:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d348:	e03e      	b.n	800d3c8 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800d34a:	4b23      	ldr	r3, [pc, #140]	; (800d3d8 <vTaskSwitchContext+0xa4>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d350:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <vTaskSwitchContext+0xa8>)
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	fab3 f383 	clz	r3, r3
 800d35c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d35e:	7afb      	ldrb	r3, [r7, #11]
 800d360:	f1c3 031f 	rsb	r3, r3, #31
 800d364:	617b      	str	r3, [r7, #20]
 800d366:	491e      	ldr	r1, [pc, #120]	; (800d3e0 <vTaskSwitchContext+0xac>)
 800d368:	697a      	ldr	r2, [r7, #20]
 800d36a:	4613      	mov	r3, r2
 800d36c:	009b      	lsls	r3, r3, #2
 800d36e:	4413      	add	r3, r2
 800d370:	009b      	lsls	r3, r3, #2
 800d372:	440b      	add	r3, r1
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d109      	bne.n	800d38e <vTaskSwitchContext+0x5a>
	__asm volatile
 800d37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d37e:	f383 8811 	msr	BASEPRI, r3
 800d382:	f3bf 8f6f 	isb	sy
 800d386:	f3bf 8f4f 	dsb	sy
 800d38a:	607b      	str	r3, [r7, #4]
 800d38c:	e7fe      	b.n	800d38c <vTaskSwitchContext+0x58>
 800d38e:	697a      	ldr	r2, [r7, #20]
 800d390:	4613      	mov	r3, r2
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	4413      	add	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4a11      	ldr	r2, [pc, #68]	; (800d3e0 <vTaskSwitchContext+0xac>)
 800d39a:	4413      	add	r3, r2
 800d39c:	613b      	str	r3, [r7, #16]
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	685a      	ldr	r2, [r3, #4]
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	605a      	str	r2, [r3, #4]
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	685a      	ldr	r2, [r3, #4]
 800d3ac:	693b      	ldr	r3, [r7, #16]
 800d3ae:	3308      	adds	r3, #8
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d104      	bne.n	800d3be <vTaskSwitchContext+0x8a>
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	685a      	ldr	r2, [r3, #4]
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	605a      	str	r2, [r3, #4]
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	4a07      	ldr	r2, [pc, #28]	; (800d3e4 <vTaskSwitchContext+0xb0>)
 800d3c6:	6013      	str	r3, [r2, #0]
}
 800d3c8:	bf00      	nop
 800d3ca:	371c      	adds	r7, #28
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr
 800d3d4:	20000734 	.word	0x20000734
 800d3d8:	20000720 	.word	0x20000720
 800d3dc:	20000714 	.word	0x20000714
 800d3e0:	20000610 	.word	0x20000610
 800d3e4:	2000060c 	.word	0x2000060c

0800d3e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3f0:	f000 f852 	bl	800d498 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3f4:	4b06      	ldr	r3, [pc, #24]	; (800d410 <prvIdleTask+0x28>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	2b01      	cmp	r3, #1
 800d3fa:	d9f9      	bls.n	800d3f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3fc:	4b05      	ldr	r3, [pc, #20]	; (800d414 <prvIdleTask+0x2c>)
 800d3fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d402:	601a      	str	r2, [r3, #0]
 800d404:	f3bf 8f4f 	dsb	sy
 800d408:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d40c:	e7f0      	b.n	800d3f0 <prvIdleTask+0x8>
 800d40e:	bf00      	nop
 800d410:	20000610 	.word	0x20000610
 800d414:	e000ed04 	.word	0xe000ed04

0800d418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d41e:	2300      	movs	r3, #0
 800d420:	607b      	str	r3, [r7, #4]
 800d422:	e00c      	b.n	800d43e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	4613      	mov	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	4413      	add	r3, r2
 800d42c:	009b      	lsls	r3, r3, #2
 800d42e:	4a12      	ldr	r2, [pc, #72]	; (800d478 <prvInitialiseTaskLists+0x60>)
 800d430:	4413      	add	r3, r2
 800d432:	4618      	mov	r0, r3
 800d434:	f7ff fb46 	bl	800cac4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	3301      	adds	r3, #1
 800d43c:	607b      	str	r3, [r7, #4]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	2b06      	cmp	r3, #6
 800d442:	d9ef      	bls.n	800d424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d444:	480d      	ldr	r0, [pc, #52]	; (800d47c <prvInitialiseTaskLists+0x64>)
 800d446:	f7ff fb3d 	bl	800cac4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d44a:	480d      	ldr	r0, [pc, #52]	; (800d480 <prvInitialiseTaskLists+0x68>)
 800d44c:	f7ff fb3a 	bl	800cac4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d450:	480c      	ldr	r0, [pc, #48]	; (800d484 <prvInitialiseTaskLists+0x6c>)
 800d452:	f7ff fb37 	bl	800cac4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d456:	480c      	ldr	r0, [pc, #48]	; (800d488 <prvInitialiseTaskLists+0x70>)
 800d458:	f7ff fb34 	bl	800cac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d45c:	480b      	ldr	r0, [pc, #44]	; (800d48c <prvInitialiseTaskLists+0x74>)
 800d45e:	f7ff fb31 	bl	800cac4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d462:	4b0b      	ldr	r3, [pc, #44]	; (800d490 <prvInitialiseTaskLists+0x78>)
 800d464:	4a05      	ldr	r2, [pc, #20]	; (800d47c <prvInitialiseTaskLists+0x64>)
 800d466:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d468:	4b0a      	ldr	r3, [pc, #40]	; (800d494 <prvInitialiseTaskLists+0x7c>)
 800d46a:	4a05      	ldr	r2, [pc, #20]	; (800d480 <prvInitialiseTaskLists+0x68>)
 800d46c:	601a      	str	r2, [r3, #0]
}
 800d46e:	bf00      	nop
 800d470:	3708      	adds	r7, #8
 800d472:	46bd      	mov	sp, r7
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000610 	.word	0x20000610
 800d47c:	2000069c 	.word	0x2000069c
 800d480:	200006b0 	.word	0x200006b0
 800d484:	200006cc 	.word	0x200006cc
 800d488:	200006e0 	.word	0x200006e0
 800d48c:	200006f8 	.word	0x200006f8
 800d490:	200006c4 	.word	0x200006c4
 800d494:	200006c8 	.word	0x200006c8

0800d498 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d49e:	e019      	b.n	800d4d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4a0:	f000 fa04 	bl	800d8ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a4:	4b0f      	ldr	r3, [pc, #60]	; (800d4e4 <prvCheckTasksWaitingTermination+0x4c>)
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	3304      	adds	r3, #4
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff fb91 	bl	800cbd8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4b6:	4b0c      	ldr	r3, [pc, #48]	; (800d4e8 <prvCheckTasksWaitingTermination+0x50>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3b01      	subs	r3, #1
 800d4bc:	4a0a      	ldr	r2, [pc, #40]	; (800d4e8 <prvCheckTasksWaitingTermination+0x50>)
 800d4be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4c0:	4b0a      	ldr	r3, [pc, #40]	; (800d4ec <prvCheckTasksWaitingTermination+0x54>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	3b01      	subs	r3, #1
 800d4c6:	4a09      	ldr	r2, [pc, #36]	; (800d4ec <prvCheckTasksWaitingTermination+0x54>)
 800d4c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ca:	f000 fa1d 	bl	800d908 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4ce:	6878      	ldr	r0, [r7, #4]
 800d4d0:	f000 f80e 	bl	800d4f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4d4:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <prvCheckTasksWaitingTermination+0x54>)
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1e1      	bne.n	800d4a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4dc:	bf00      	nop
 800d4de:	3708      	adds	r7, #8
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	200006e0 	.word	0x200006e0
 800d4e8:	2000070c 	.word	0x2000070c
 800d4ec:	200006f4 	.word	0x200006f4

0800d4f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b084      	sub	sp, #16
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d506:	4618      	mov	r0, r3
 800d508:	f000 fb6e 	bl	800dbe8 <vPortFree>
				vPortFree( pxTCB );
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fb6b 	bl	800dbe8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d512:	e017      	b.n	800d544 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d51a:	2b01      	cmp	r3, #1
 800d51c:	d103      	bne.n	800d526 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fb62 	bl	800dbe8 <vPortFree>
	}
 800d524:	e00e      	b.n	800d544 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d52c:	2b02      	cmp	r3, #2
 800d52e:	d009      	beq.n	800d544 <prvDeleteTCB+0x54>
 800d530:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d534:	f383 8811 	msr	BASEPRI, r3
 800d538:	f3bf 8f6f 	isb	sy
 800d53c:	f3bf 8f4f 	dsb	sy
 800d540:	60fb      	str	r3, [r7, #12]
 800d542:	e7fe      	b.n	800d542 <prvDeleteTCB+0x52>
	}
 800d544:	bf00      	nop
 800d546:	3710      	adds	r7, #16
 800d548:	46bd      	mov	sp, r7
 800d54a:	bd80      	pop	{r7, pc}

0800d54c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d54c:	b480      	push	{r7}
 800d54e:	b083      	sub	sp, #12
 800d550:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d552:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <prvResetNextTaskUnblockTime+0x38>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d104      	bne.n	800d566 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d55c:	4b0a      	ldr	r3, [pc, #40]	; (800d588 <prvResetNextTaskUnblockTime+0x3c>)
 800d55e:	f04f 32ff 	mov.w	r2, #4294967295
 800d562:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d564:	e008      	b.n	800d578 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d566:	4b07      	ldr	r3, [pc, #28]	; (800d584 <prvResetNextTaskUnblockTime+0x38>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	68db      	ldr	r3, [r3, #12]
 800d56c:	68db      	ldr	r3, [r3, #12]
 800d56e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	685b      	ldr	r3, [r3, #4]
 800d574:	4a04      	ldr	r2, [pc, #16]	; (800d588 <prvResetNextTaskUnblockTime+0x3c>)
 800d576:	6013      	str	r3, [r2, #0]
}
 800d578:	bf00      	nop
 800d57a:	370c      	adds	r7, #12
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr
 800d584:	200006c4 	.word	0x200006c4
 800d588:	2000072c 	.word	0x2000072c

0800d58c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d596:	4b29      	ldr	r3, [pc, #164]	; (800d63c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d59c:	4b28      	ldr	r3, [pc, #160]	; (800d640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	3304      	adds	r3, #4
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7ff fb18 	bl	800cbd8 <uxListRemove>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10b      	bne.n	800d5c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d5ae:	4b24      	ldr	r3, [pc, #144]	; (800d640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5b4:	2201      	movs	r2, #1
 800d5b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5ba:	43da      	mvns	r2, r3
 800d5bc:	4b21      	ldr	r3, [pc, #132]	; (800d644 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4013      	ands	r3, r2
 800d5c2:	4a20      	ldr	r2, [pc, #128]	; (800d644 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5cc:	d10a      	bne.n	800d5e4 <prvAddCurrentTaskToDelayedList+0x58>
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d007      	beq.n	800d5e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5d4:	4b1a      	ldr	r3, [pc, #104]	; (800d640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3304      	adds	r3, #4
 800d5da:	4619      	mov	r1, r3
 800d5dc:	481a      	ldr	r0, [pc, #104]	; (800d648 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d5de:	f7ff fa9e 	bl	800cb1e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5e2:	e026      	b.n	800d632 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5e4:	68fa      	ldr	r2, [r7, #12]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5ec:	4b14      	ldr	r3, [pc, #80]	; (800d640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	68ba      	ldr	r2, [r7, #8]
 800d5f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5f4:	68ba      	ldr	r2, [r7, #8]
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d209      	bcs.n	800d610 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5fc:	4b13      	ldr	r3, [pc, #76]	; (800d64c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3304      	adds	r3, #4
 800d606:	4619      	mov	r1, r3
 800d608:	4610      	mov	r0, r2
 800d60a:	f7ff faac 	bl	800cb66 <vListInsert>
}
 800d60e:	e010      	b.n	800d632 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d610:	4b0f      	ldr	r3, [pc, #60]	; (800d650 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d612:	681a      	ldr	r2, [r3, #0]
 800d614:	4b0a      	ldr	r3, [pc, #40]	; (800d640 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3304      	adds	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	4610      	mov	r0, r2
 800d61e:	f7ff faa2 	bl	800cb66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d622:	4b0c      	ldr	r3, [pc, #48]	; (800d654 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	429a      	cmp	r2, r3
 800d62a:	d202      	bcs.n	800d632 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d62c:	4a09      	ldr	r2, [pc, #36]	; (800d654 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	6013      	str	r3, [r2, #0]
}
 800d632:	bf00      	nop
 800d634:	3710      	adds	r7, #16
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	20000710 	.word	0x20000710
 800d640:	2000060c 	.word	0x2000060c
 800d644:	20000714 	.word	0x20000714
 800d648:	200006f8 	.word	0x200006f8
 800d64c:	200006c8 	.word	0x200006c8
 800d650:	200006c4 	.word	0x200006c4
 800d654:	2000072c 	.word	0x2000072c

0800d658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d658:	b480      	push	{r7}
 800d65a:	b085      	sub	sp, #20
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	60f8      	str	r0, [r7, #12]
 800d660:	60b9      	str	r1, [r7, #8]
 800d662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	3b04      	subs	r3, #4
 800d668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	3b04      	subs	r3, #4
 800d676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	f023 0201 	bic.w	r2, r3, #1
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	3b04      	subs	r3, #4
 800d686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d688:	4a0c      	ldr	r2, [pc, #48]	; (800d6bc <pxPortInitialiseStack+0x64>)
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	3b14      	subs	r3, #20
 800d692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	3b04      	subs	r3, #4
 800d69e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f06f 0202 	mvn.w	r2, #2
 800d6a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3b20      	subs	r3, #32
 800d6ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3714      	adds	r7, #20
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ba:	4770      	bx	lr
 800d6bc:	0800d6c1 	.word	0x0800d6c1

0800d6c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b085      	sub	sp, #20
 800d6c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d6ca:	4b11      	ldr	r3, [pc, #68]	; (800d710 <prvTaskExitError+0x50>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d2:	d009      	beq.n	800d6e8 <prvTaskExitError+0x28>
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	60fb      	str	r3, [r7, #12]
 800d6e6:	e7fe      	b.n	800d6e6 <prvTaskExitError+0x26>
 800d6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ec:	f383 8811 	msr	BASEPRI, r3
 800d6f0:	f3bf 8f6f 	isb	sy
 800d6f4:	f3bf 8f4f 	dsb	sy
 800d6f8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d6fa:	bf00      	nop
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d0fc      	beq.n	800d6fc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d702:	bf00      	nop
 800d704:	3714      	adds	r7, #20
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop
 800d710:	20000134 	.word	0x20000134
	...

0800d720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d720:	4b07      	ldr	r3, [pc, #28]	; (800d740 <pxCurrentTCBConst2>)
 800d722:	6819      	ldr	r1, [r3, #0]
 800d724:	6808      	ldr	r0, [r1, #0]
 800d726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	f380 8809 	msr	PSP, r0
 800d72e:	f3bf 8f6f 	isb	sy
 800d732:	f04f 0000 	mov.w	r0, #0
 800d736:	f380 8811 	msr	BASEPRI, r0
 800d73a:	4770      	bx	lr
 800d73c:	f3af 8000 	nop.w

0800d740 <pxCurrentTCBConst2>:
 800d740:	2000060c 	.word	0x2000060c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop

0800d748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d748:	4808      	ldr	r0, [pc, #32]	; (800d76c <prvPortStartFirstTask+0x24>)
 800d74a:	6800      	ldr	r0, [r0, #0]
 800d74c:	6800      	ldr	r0, [r0, #0]
 800d74e:	f380 8808 	msr	MSP, r0
 800d752:	f04f 0000 	mov.w	r0, #0
 800d756:	f380 8814 	msr	CONTROL, r0
 800d75a:	b662      	cpsie	i
 800d75c:	b661      	cpsie	f
 800d75e:	f3bf 8f4f 	dsb	sy
 800d762:	f3bf 8f6f 	isb	sy
 800d766:	df00      	svc	0
 800d768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d76a:	bf00      	nop
 800d76c:	e000ed08 	.word	0xe000ed08

0800d770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b086      	sub	sp, #24
 800d774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d776:	4b44      	ldr	r3, [pc, #272]	; (800d888 <xPortStartScheduler+0x118>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a44      	ldr	r2, [pc, #272]	; (800d88c <xPortStartScheduler+0x11c>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d109      	bne.n	800d794 <xPortStartScheduler+0x24>
 800d780:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d784:	f383 8811 	msr	BASEPRI, r3
 800d788:	f3bf 8f6f 	isb	sy
 800d78c:	f3bf 8f4f 	dsb	sy
 800d790:	613b      	str	r3, [r7, #16]
 800d792:	e7fe      	b.n	800d792 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d794:	4b3c      	ldr	r3, [pc, #240]	; (800d888 <xPortStartScheduler+0x118>)
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	4a3d      	ldr	r2, [pc, #244]	; (800d890 <xPortStartScheduler+0x120>)
 800d79a:	4293      	cmp	r3, r2
 800d79c:	d109      	bne.n	800d7b2 <xPortStartScheduler+0x42>
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	60fb      	str	r3, [r7, #12]
 800d7b0:	e7fe      	b.n	800d7b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7b2:	4b38      	ldr	r3, [pc, #224]	; (800d894 <xPortStartScheduler+0x124>)
 800d7b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7be:	697b      	ldr	r3, [r7, #20]
 800d7c0:	22ff      	movs	r2, #255	; 0xff
 800d7c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7c4:	697b      	ldr	r3, [r7, #20]
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7cc:	78fb      	ldrb	r3, [r7, #3]
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	4b30      	ldr	r3, [pc, #192]	; (800d898 <xPortStartScheduler+0x128>)
 800d7d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7da:	4b30      	ldr	r3, [pc, #192]	; (800d89c <xPortStartScheduler+0x12c>)
 800d7dc:	2207      	movs	r2, #7
 800d7de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7e0:	e009      	b.n	800d7f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800d7e2:	4b2e      	ldr	r3, [pc, #184]	; (800d89c <xPortStartScheduler+0x12c>)
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	4a2c      	ldr	r2, [pc, #176]	; (800d89c <xPortStartScheduler+0x12c>)
 800d7ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7ec:	78fb      	ldrb	r3, [r7, #3]
 800d7ee:	b2db      	uxtb	r3, r3
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7f6:	78fb      	ldrb	r3, [r7, #3]
 800d7f8:	b2db      	uxtb	r3, r3
 800d7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d7fe:	2b80      	cmp	r3, #128	; 0x80
 800d800:	d0ef      	beq.n	800d7e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d802:	4b26      	ldr	r3, [pc, #152]	; (800d89c <xPortStartScheduler+0x12c>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f1c3 0307 	rsb	r3, r3, #7
 800d80a:	2b04      	cmp	r3, #4
 800d80c:	d009      	beq.n	800d822 <xPortStartScheduler+0xb2>
 800d80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d812:	f383 8811 	msr	BASEPRI, r3
 800d816:	f3bf 8f6f 	isb	sy
 800d81a:	f3bf 8f4f 	dsb	sy
 800d81e:	60bb      	str	r3, [r7, #8]
 800d820:	e7fe      	b.n	800d820 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d822:	4b1e      	ldr	r3, [pc, #120]	; (800d89c <xPortStartScheduler+0x12c>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	021b      	lsls	r3, r3, #8
 800d828:	4a1c      	ldr	r2, [pc, #112]	; (800d89c <xPortStartScheduler+0x12c>)
 800d82a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d82c:	4b1b      	ldr	r3, [pc, #108]	; (800d89c <xPortStartScheduler+0x12c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d834:	4a19      	ldr	r2, [pc, #100]	; (800d89c <xPortStartScheduler+0x12c>)
 800d836:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	b2da      	uxtb	r2, r3
 800d83c:	697b      	ldr	r3, [r7, #20]
 800d83e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d840:	4b17      	ldr	r3, [pc, #92]	; (800d8a0 <xPortStartScheduler+0x130>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a16      	ldr	r2, [pc, #88]	; (800d8a0 <xPortStartScheduler+0x130>)
 800d846:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d84a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d84c:	4b14      	ldr	r3, [pc, #80]	; (800d8a0 <xPortStartScheduler+0x130>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a13      	ldr	r2, [pc, #76]	; (800d8a0 <xPortStartScheduler+0x130>)
 800d852:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d856:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d858:	f000 f8d6 	bl	800da08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d85c:	4b11      	ldr	r3, [pc, #68]	; (800d8a4 <xPortStartScheduler+0x134>)
 800d85e:	2200      	movs	r2, #0
 800d860:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d862:	f000 f8f5 	bl	800da50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d866:	4b10      	ldr	r3, [pc, #64]	; (800d8a8 <xPortStartScheduler+0x138>)
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	4a0f      	ldr	r2, [pc, #60]	; (800d8a8 <xPortStartScheduler+0x138>)
 800d86c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d870:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d872:	f7ff ff69 	bl	800d748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d876:	f7ff fd5d 	bl	800d334 <vTaskSwitchContext>
	prvTaskExitError();
 800d87a:	f7ff ff21 	bl	800d6c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d87e:	2300      	movs	r3, #0
}
 800d880:	4618      	mov	r0, r3
 800d882:	3718      	adds	r7, #24
 800d884:	46bd      	mov	sp, r7
 800d886:	bd80      	pop	{r7, pc}
 800d888:	e000ed00 	.word	0xe000ed00
 800d88c:	410fc271 	.word	0x410fc271
 800d890:	410fc270 	.word	0x410fc270
 800d894:	e000e400 	.word	0xe000e400
 800d898:	20000738 	.word	0x20000738
 800d89c:	2000073c 	.word	0x2000073c
 800d8a0:	e000ed20 	.word	0xe000ed20
 800d8a4:	20000134 	.word	0x20000134
 800d8a8:	e000ef34 	.word	0xe000ef34

0800d8ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b6:	f383 8811 	msr	BASEPRI, r3
 800d8ba:	f3bf 8f6f 	isb	sy
 800d8be:	f3bf 8f4f 	dsb	sy
 800d8c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d8c4:	4b0e      	ldr	r3, [pc, #56]	; (800d900 <vPortEnterCritical+0x54>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	4a0d      	ldr	r2, [pc, #52]	; (800d900 <vPortEnterCritical+0x54>)
 800d8cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d8ce:	4b0c      	ldr	r3, [pc, #48]	; (800d900 <vPortEnterCritical+0x54>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d10e      	bne.n	800d8f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8d6:	4b0b      	ldr	r3, [pc, #44]	; (800d904 <vPortEnterCritical+0x58>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d009      	beq.n	800d8f4 <vPortEnterCritical+0x48>
 800d8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e4:	f383 8811 	msr	BASEPRI, r3
 800d8e8:	f3bf 8f6f 	isb	sy
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	603b      	str	r3, [r7, #0]
 800d8f2:	e7fe      	b.n	800d8f2 <vPortEnterCritical+0x46>
	}
}
 800d8f4:	bf00      	nop
 800d8f6:	370c      	adds	r7, #12
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8fe:	4770      	bx	lr
 800d900:	20000134 	.word	0x20000134
 800d904:	e000ed04 	.word	0xe000ed04

0800d908 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d90e:	4b11      	ldr	r3, [pc, #68]	; (800d954 <vPortExitCritical+0x4c>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d109      	bne.n	800d92a <vPortExitCritical+0x22>
 800d916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91a:	f383 8811 	msr	BASEPRI, r3
 800d91e:	f3bf 8f6f 	isb	sy
 800d922:	f3bf 8f4f 	dsb	sy
 800d926:	607b      	str	r3, [r7, #4]
 800d928:	e7fe      	b.n	800d928 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800d92a:	4b0a      	ldr	r3, [pc, #40]	; (800d954 <vPortExitCritical+0x4c>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	3b01      	subs	r3, #1
 800d930:	4a08      	ldr	r2, [pc, #32]	; (800d954 <vPortExitCritical+0x4c>)
 800d932:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d934:	4b07      	ldr	r3, [pc, #28]	; (800d954 <vPortExitCritical+0x4c>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <vPortExitCritical+0x3e>
 800d93c:	2300      	movs	r3, #0
 800d93e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d946:	bf00      	nop
 800d948:	370c      	adds	r7, #12
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr
 800d952:	bf00      	nop
 800d954:	20000134 	.word	0x20000134
	...

0800d960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d960:	f3ef 8009 	mrs	r0, PSP
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <pxCurrentTCBConst>)
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	f01e 0f10 	tst.w	lr, #16
 800d970:	bf08      	it	eq
 800d972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97a:	6010      	str	r0, [r2, #0]
 800d97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d984:	f380 8811 	msr	BASEPRI, r0
 800d988:	f3bf 8f4f 	dsb	sy
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f7ff fcd0 	bl	800d334 <vTaskSwitchContext>
 800d994:	f04f 0000 	mov.w	r0, #0
 800d998:	f380 8811 	msr	BASEPRI, r0
 800d99c:	bc09      	pop	{r0, r3}
 800d99e:	6819      	ldr	r1, [r3, #0]
 800d9a0:	6808      	ldr	r0, [r1, #0]
 800d9a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9a6:	f01e 0f10 	tst.w	lr, #16
 800d9aa:	bf08      	it	eq
 800d9ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9b0:	f380 8809 	msr	PSP, r0
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	4770      	bx	lr
 800d9ba:	bf00      	nop
 800d9bc:	f3af 8000 	nop.w

0800d9c0 <pxCurrentTCBConst>:
 800d9c0:	2000060c 	.word	0x2000060c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop

0800d9c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	f383 8811 	msr	BASEPRI, r3
 800d9d6:	f3bf 8f6f 	isb	sy
 800d9da:	f3bf 8f4f 	dsb	sy
 800d9de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9e0:	f7ff fbf0 	bl	800d1c4 <xTaskIncrementTick>
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d003      	beq.n	800d9f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9ea:	4b06      	ldr	r3, [pc, #24]	; (800da04 <SysTick_Handler+0x3c>)
 800d9ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f0:	601a      	str	r2, [r3, #0]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9f6:	683b      	ldr	r3, [r7, #0]
 800d9f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}
 800da04:	e000ed04 	.word	0xe000ed04

0800da08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da08:	b480      	push	{r7}
 800da0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da0c:	4b0b      	ldr	r3, [pc, #44]	; (800da3c <vPortSetupTimerInterrupt+0x34>)
 800da0e:	2200      	movs	r2, #0
 800da10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da12:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <vPortSetupTimerInterrupt+0x38>)
 800da14:	2200      	movs	r2, #0
 800da16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da18:	4b0a      	ldr	r3, [pc, #40]	; (800da44 <vPortSetupTimerInterrupt+0x3c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	4a0a      	ldr	r2, [pc, #40]	; (800da48 <vPortSetupTimerInterrupt+0x40>)
 800da1e:	fba2 2303 	umull	r2, r3, r2, r3
 800da22:	099b      	lsrs	r3, r3, #6
 800da24:	4a09      	ldr	r2, [pc, #36]	; (800da4c <vPortSetupTimerInterrupt+0x44>)
 800da26:	3b01      	subs	r3, #1
 800da28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da2a:	4b04      	ldr	r3, [pc, #16]	; (800da3c <vPortSetupTimerInterrupt+0x34>)
 800da2c:	2207      	movs	r2, #7
 800da2e:	601a      	str	r2, [r3, #0]
}
 800da30:	bf00      	nop
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	e000e010 	.word	0xe000e010
 800da40:	e000e018 	.word	0xe000e018
 800da44:	20000000 	.word	0x20000000
 800da48:	10624dd3 	.word	0x10624dd3
 800da4c:	e000e014 	.word	0xe000e014

0800da50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da60 <vPortEnableVFP+0x10>
 800da54:	6801      	ldr	r1, [r0, #0]
 800da56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da5a:	6001      	str	r1, [r0, #0]
 800da5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da5e:	bf00      	nop
 800da60:	e000ed88 	.word	0xe000ed88

0800da64 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b08a      	sub	sp, #40	; 0x28
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da6c:	2300      	movs	r3, #0
 800da6e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da70:	f7ff fafe 	bl	800d070 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da74:	4b57      	ldr	r3, [pc, #348]	; (800dbd4 <pvPortMalloc+0x170>)
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d101      	bne.n	800da80 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da7c:	f000 f90c 	bl	800dc98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da80:	4b55      	ldr	r3, [pc, #340]	; (800dbd8 <pvPortMalloc+0x174>)
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	4013      	ands	r3, r2
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f040 808c 	bne.w	800dba6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d01c      	beq.n	800dace <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800da94:	2208      	movs	r2, #8
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	4413      	add	r3, r2
 800da9a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f003 0307 	and.w	r3, r3, #7
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d013      	beq.n	800dace <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f023 0307 	bic.w	r3, r3, #7
 800daac:	3308      	adds	r3, #8
 800daae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f003 0307 	and.w	r3, r3, #7
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d009      	beq.n	800dace <pvPortMalloc+0x6a>
	__asm volatile
 800daba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dabe:	f383 8811 	msr	BASEPRI, r3
 800dac2:	f3bf 8f6f 	isb	sy
 800dac6:	f3bf 8f4f 	dsb	sy
 800daca:	617b      	str	r3, [r7, #20]
 800dacc:	e7fe      	b.n	800dacc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d068      	beq.n	800dba6 <pvPortMalloc+0x142>
 800dad4:	4b41      	ldr	r3, [pc, #260]	; (800dbdc <pvPortMalloc+0x178>)
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	429a      	cmp	r2, r3
 800dadc:	d863      	bhi.n	800dba6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dade:	4b40      	ldr	r3, [pc, #256]	; (800dbe0 <pvPortMalloc+0x17c>)
 800dae0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dae2:	4b3f      	ldr	r3, [pc, #252]	; (800dbe0 <pvPortMalloc+0x17c>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dae8:	e004      	b.n	800daf4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800daea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800daee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d903      	bls.n	800db06 <pvPortMalloc+0xa2>
 800dafe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d1f1      	bne.n	800daea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db06:	4b33      	ldr	r3, [pc, #204]	; (800dbd4 <pvPortMalloc+0x170>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d04a      	beq.n	800dba6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	2208      	movs	r2, #8
 800db16:	4413      	add	r3, r2
 800db18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	6a3b      	ldr	r3, [r7, #32]
 800db20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	1ad2      	subs	r2, r2, r3
 800db2a:	2308      	movs	r3, #8
 800db2c:	005b      	lsls	r3, r3, #1
 800db2e:	429a      	cmp	r2, r3
 800db30:	d91e      	bls.n	800db70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	4413      	add	r3, r2
 800db38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	f003 0307 	and.w	r3, r3, #7
 800db40:	2b00      	cmp	r3, #0
 800db42:	d009      	beq.n	800db58 <pvPortMalloc+0xf4>
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	613b      	str	r3, [r7, #16]
 800db56:	e7fe      	b.n	800db56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5a:	685a      	ldr	r2, [r3, #4]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	1ad2      	subs	r2, r2, r3
 800db60:	69bb      	ldr	r3, [r7, #24]
 800db62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db6a:	69b8      	ldr	r0, [r7, #24]
 800db6c:	f000 f8f6 	bl	800dd5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db70:	4b1a      	ldr	r3, [pc, #104]	; (800dbdc <pvPortMalloc+0x178>)
 800db72:	681a      	ldr	r2, [r3, #0]
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	1ad3      	subs	r3, r2, r3
 800db7a:	4a18      	ldr	r2, [pc, #96]	; (800dbdc <pvPortMalloc+0x178>)
 800db7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db7e:	4b17      	ldr	r3, [pc, #92]	; (800dbdc <pvPortMalloc+0x178>)
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	4b18      	ldr	r3, [pc, #96]	; (800dbe4 <pvPortMalloc+0x180>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d203      	bcs.n	800db92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db8a:	4b14      	ldr	r3, [pc, #80]	; (800dbdc <pvPortMalloc+0x178>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	4a15      	ldr	r2, [pc, #84]	; (800dbe4 <pvPortMalloc+0x180>)
 800db90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db94:	685a      	ldr	r2, [r3, #4]
 800db96:	4b10      	ldr	r3, [pc, #64]	; (800dbd8 <pvPortMalloc+0x174>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	431a      	orrs	r2, r3
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba2:	2200      	movs	r2, #0
 800dba4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dba6:	f7ff fa71 	bl	800d08c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbaa:	69fb      	ldr	r3, [r7, #28]
 800dbac:	f003 0307 	and.w	r3, r3, #7
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d009      	beq.n	800dbc8 <pvPortMalloc+0x164>
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	60fb      	str	r3, [r7, #12]
 800dbc6:	e7fe      	b.n	800dbc6 <pvPortMalloc+0x162>
	return pvReturn;
 800dbc8:	69fb      	ldr	r3, [r7, #28]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	3728      	adds	r7, #40	; 0x28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}
 800dbd2:	bf00      	nop
 800dbd4:	20004348 	.word	0x20004348
 800dbd8:	20004354 	.word	0x20004354
 800dbdc:	2000434c 	.word	0x2000434c
 800dbe0:	20004340 	.word	0x20004340
 800dbe4:	20004350 	.word	0x20004350

0800dbe8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b086      	sub	sp, #24
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d046      	beq.n	800dc88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dbfa:	2308      	movs	r3, #8
 800dbfc:	425b      	negs	r3, r3
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	4413      	add	r3, r2
 800dc02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc08:	693b      	ldr	r3, [r7, #16]
 800dc0a:	685a      	ldr	r2, [r3, #4]
 800dc0c:	4b20      	ldr	r3, [pc, #128]	; (800dc90 <vPortFree+0xa8>)
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	4013      	ands	r3, r2
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d109      	bne.n	800dc2a <vPortFree+0x42>
 800dc16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e7fe      	b.n	800dc28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d009      	beq.n	800dc46 <vPortFree+0x5e>
 800dc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc36:	f383 8811 	msr	BASEPRI, r3
 800dc3a:	f3bf 8f6f 	isb	sy
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	60bb      	str	r3, [r7, #8]
 800dc44:	e7fe      	b.n	800dc44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	4b11      	ldr	r3, [pc, #68]	; (800dc90 <vPortFree+0xa8>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	4013      	ands	r3, r2
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d019      	beq.n	800dc88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d115      	bne.n	800dc88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc5c:	693b      	ldr	r3, [r7, #16]
 800dc5e:	685a      	ldr	r2, [r3, #4]
 800dc60:	4b0b      	ldr	r3, [pc, #44]	; (800dc90 <vPortFree+0xa8>)
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	43db      	mvns	r3, r3
 800dc66:	401a      	ands	r2, r3
 800dc68:	693b      	ldr	r3, [r7, #16]
 800dc6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc6c:	f7ff fa00 	bl	800d070 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	685a      	ldr	r2, [r3, #4]
 800dc74:	4b07      	ldr	r3, [pc, #28]	; (800dc94 <vPortFree+0xac>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	4413      	add	r3, r2
 800dc7a:	4a06      	ldr	r2, [pc, #24]	; (800dc94 <vPortFree+0xac>)
 800dc7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc7e:	6938      	ldr	r0, [r7, #16]
 800dc80:	f000 f86c 	bl	800dd5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dc84:	f7ff fa02 	bl	800d08c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dc88:	bf00      	nop
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	20004354 	.word	0x20004354
 800dc94:	2000434c 	.word	0x2000434c

0800dc98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b085      	sub	sp, #20
 800dc9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dc9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800dca2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dca4:	4b27      	ldr	r3, [pc, #156]	; (800dd44 <prvHeapInit+0xac>)
 800dca6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	f003 0307 	and.w	r3, r3, #7
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d00c      	beq.n	800dccc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	3307      	adds	r3, #7
 800dcb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	f023 0307 	bic.w	r3, r3, #7
 800dcbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dcc0:	68ba      	ldr	r2, [r7, #8]
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	1ad3      	subs	r3, r2, r3
 800dcc6:	4a1f      	ldr	r2, [pc, #124]	; (800dd44 <prvHeapInit+0xac>)
 800dcc8:	4413      	add	r3, r2
 800dcca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcd0:	4a1d      	ldr	r2, [pc, #116]	; (800dd48 <prvHeapInit+0xb0>)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcd6:	4b1c      	ldr	r3, [pc, #112]	; (800dd48 <prvHeapInit+0xb0>)
 800dcd8:	2200      	movs	r2, #0
 800dcda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	68ba      	ldr	r2, [r7, #8]
 800dce0:	4413      	add	r3, r2
 800dce2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dce4:	2208      	movs	r2, #8
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	1a9b      	subs	r3, r3, r2
 800dcea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f023 0307 	bic.w	r3, r3, #7
 800dcf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	4a15      	ldr	r2, [pc, #84]	; (800dd4c <prvHeapInit+0xb4>)
 800dcf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dcfa:	4b14      	ldr	r3, [pc, #80]	; (800dd4c <prvHeapInit+0xb4>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd02:	4b12      	ldr	r3, [pc, #72]	; (800dd4c <prvHeapInit+0xb4>)
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	2200      	movs	r2, #0
 800dd08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	68fa      	ldr	r2, [r7, #12]
 800dd12:	1ad2      	subs	r2, r2, r3
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd18:	4b0c      	ldr	r3, [pc, #48]	; (800dd4c <prvHeapInit+0xb4>)
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	685b      	ldr	r3, [r3, #4]
 800dd24:	4a0a      	ldr	r2, [pc, #40]	; (800dd50 <prvHeapInit+0xb8>)
 800dd26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	685b      	ldr	r3, [r3, #4]
 800dd2c:	4a09      	ldr	r2, [pc, #36]	; (800dd54 <prvHeapInit+0xbc>)
 800dd2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd30:	4b09      	ldr	r3, [pc, #36]	; (800dd58 <prvHeapInit+0xc0>)
 800dd32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd36:	601a      	str	r2, [r3, #0]
}
 800dd38:	bf00      	nop
 800dd3a:	3714      	adds	r7, #20
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd42:	4770      	bx	lr
 800dd44:	20000740 	.word	0x20000740
 800dd48:	20004340 	.word	0x20004340
 800dd4c:	20004348 	.word	0x20004348
 800dd50:	20004350 	.word	0x20004350
 800dd54:	2000434c 	.word	0x2000434c
 800dd58:	20004354 	.word	0x20004354

0800dd5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b085      	sub	sp, #20
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd64:	4b28      	ldr	r3, [pc, #160]	; (800de08 <prvInsertBlockIntoFreeList+0xac>)
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	e002      	b.n	800dd70 <prvInsertBlockIntoFreeList+0x14>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	60fb      	str	r3, [r7, #12]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	687a      	ldr	r2, [r7, #4]
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d8f7      	bhi.n	800dd6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	685b      	ldr	r3, [r3, #4]
 800dd82:	68ba      	ldr	r2, [r7, #8]
 800dd84:	4413      	add	r3, r2
 800dd86:	687a      	ldr	r2, [r7, #4]
 800dd88:	429a      	cmp	r2, r3
 800dd8a:	d108      	bne.n	800dd9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	685a      	ldr	r2, [r3, #4]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	441a      	add	r2, r3
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	685b      	ldr	r3, [r3, #4]
 800dda6:	68ba      	ldr	r2, [r7, #8]
 800dda8:	441a      	add	r2, r3
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d118      	bne.n	800dde4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681a      	ldr	r2, [r3, #0]
 800ddb6:	4b15      	ldr	r3, [pc, #84]	; (800de0c <prvInsertBlockIntoFreeList+0xb0>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	429a      	cmp	r2, r3
 800ddbc:	d00d      	beq.n	800ddda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	685a      	ldr	r2, [r3, #4]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	685b      	ldr	r3, [r3, #4]
 800ddc8:	441a      	add	r2, r3
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	681a      	ldr	r2, [r3, #0]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	e008      	b.n	800ddec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddda:	4b0c      	ldr	r3, [pc, #48]	; (800de0c <prvInsertBlockIntoFreeList+0xb0>)
 800dddc:	681a      	ldr	r2, [r3, #0]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	601a      	str	r2, [r3, #0]
 800dde2:	e003      	b.n	800ddec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d002      	beq.n	800ddfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddfa:	bf00      	nop
 800ddfc:	3714      	adds	r7, #20
 800ddfe:	46bd      	mov	sp, r7
 800de00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de04:	4770      	bx	lr
 800de06:	bf00      	nop
 800de08:	20004340 	.word	0x20004340
 800de0c:	20004348 	.word	0x20004348

0800de10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800de14:	2200      	movs	r2, #0
 800de16:	4912      	ldr	r1, [pc, #72]	; (800de60 <MX_USB_DEVICE_Init+0x50>)
 800de18:	4812      	ldr	r0, [pc, #72]	; (800de64 <MX_USB_DEVICE_Init+0x54>)
 800de1a:	f7fd fc49 	bl	800b6b0 <USBD_Init>
 800de1e:	4603      	mov	r3, r0
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800de24:	f7f5 f85e 	bl	8002ee4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800de28:	490f      	ldr	r1, [pc, #60]	; (800de68 <MX_USB_DEVICE_Init+0x58>)
 800de2a:	480e      	ldr	r0, [pc, #56]	; (800de64 <MX_USB_DEVICE_Init+0x54>)
 800de2c:	f7fd fc76 	bl	800b71c <USBD_RegisterClass>
 800de30:	4603      	mov	r3, r0
 800de32:	2b00      	cmp	r3, #0
 800de34:	d001      	beq.n	800de3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800de36:	f7f5 f855 	bl	8002ee4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800de3a:	490c      	ldr	r1, [pc, #48]	; (800de6c <MX_USB_DEVICE_Init+0x5c>)
 800de3c:	4809      	ldr	r0, [pc, #36]	; (800de64 <MX_USB_DEVICE_Init+0x54>)
 800de3e:	f7fd fb9b 	bl	800b578 <USBD_CDC_RegisterInterface>
 800de42:	4603      	mov	r3, r0
 800de44:	2b00      	cmp	r3, #0
 800de46:	d001      	beq.n	800de4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800de48:	f7f5 f84c 	bl	8002ee4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800de4c:	4805      	ldr	r0, [pc, #20]	; (800de64 <MX_USB_DEVICE_Init+0x54>)
 800de4e:	f7fd fc86 	bl	800b75e <USBD_Start>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800de58:	f7f5 f844 	bl	8002ee4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800de5c:	bf00      	nop
 800de5e:	bd80      	pop	{r7, pc}
 800de60:	20000154 	.word	0x20000154
 800de64:	20004a48 	.word	0x20004a48
 800de68:	20000030 	.word	0x20000030
 800de6c:	20000140 	.word	0x20000140

0800de70 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de74:	2200      	movs	r2, #0
 800de76:	4905      	ldr	r1, [pc, #20]	; (800de8c <CDC_Init_FS+0x1c>)
 800de78:	4805      	ldr	r0, [pc, #20]	; (800de90 <CDC_Init_FS+0x20>)
 800de7a:	f7fd fb92 	bl	800b5a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de7e:	4905      	ldr	r1, [pc, #20]	; (800de94 <CDC_Init_FS+0x24>)
 800de80:	4803      	ldr	r0, [pc, #12]	; (800de90 <CDC_Init_FS+0x20>)
 800de82:	f7fd fba7 	bl	800b5d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de86:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800de88:	4618      	mov	r0, r3
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	20005518 	.word	0x20005518
 800de90:	20004a48 	.word	0x20004a48
 800de94:	20004d18 	.word	0x20004d18

0800de98 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de98:	b480      	push	{r7}
 800de9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de9c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	46bd      	mov	sp, r7
 800dea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea6:	4770      	bx	lr

0800dea8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
 800deae:	4603      	mov	r3, r0
 800deb0:	6039      	str	r1, [r7, #0]
 800deb2:	71fb      	strb	r3, [r7, #7]
 800deb4:	4613      	mov	r3, r2
 800deb6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800deb8:	79fb      	ldrb	r3, [r7, #7]
 800deba:	2b23      	cmp	r3, #35	; 0x23
 800debc:	d85c      	bhi.n	800df78 <CDC_Control_FS+0xd0>
 800debe:	a201      	add	r2, pc, #4	; (adr r2, 800dec4 <CDC_Control_FS+0x1c>)
 800dec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dec4:	0800df79 	.word	0x0800df79
 800dec8:	0800df79 	.word	0x0800df79
 800decc:	0800df79 	.word	0x0800df79
 800ded0:	0800df79 	.word	0x0800df79
 800ded4:	0800df79 	.word	0x0800df79
 800ded8:	0800df79 	.word	0x0800df79
 800dedc:	0800df79 	.word	0x0800df79
 800dee0:	0800df79 	.word	0x0800df79
 800dee4:	0800df79 	.word	0x0800df79
 800dee8:	0800df79 	.word	0x0800df79
 800deec:	0800df79 	.word	0x0800df79
 800def0:	0800df79 	.word	0x0800df79
 800def4:	0800df79 	.word	0x0800df79
 800def8:	0800df79 	.word	0x0800df79
 800defc:	0800df79 	.word	0x0800df79
 800df00:	0800df79 	.word	0x0800df79
 800df04:	0800df79 	.word	0x0800df79
 800df08:	0800df79 	.word	0x0800df79
 800df0c:	0800df79 	.word	0x0800df79
 800df10:	0800df79 	.word	0x0800df79
 800df14:	0800df79 	.word	0x0800df79
 800df18:	0800df79 	.word	0x0800df79
 800df1c:	0800df79 	.word	0x0800df79
 800df20:	0800df79 	.word	0x0800df79
 800df24:	0800df79 	.word	0x0800df79
 800df28:	0800df79 	.word	0x0800df79
 800df2c:	0800df79 	.word	0x0800df79
 800df30:	0800df79 	.word	0x0800df79
 800df34:	0800df79 	.word	0x0800df79
 800df38:	0800df79 	.word	0x0800df79
 800df3c:	0800df79 	.word	0x0800df79
 800df40:	0800df79 	.word	0x0800df79
 800df44:	0800df55 	.word	0x0800df55
 800df48:	0800df67 	.word	0x0800df67
 800df4c:	0800df79 	.word	0x0800df79
 800df50:	0800df79 	.word	0x0800df79
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 800df54:	4b0c      	ldr	r3, [pc, #48]	; (800df88 <CDC_Control_FS+0xe0>)
 800df56:	683a      	ldr	r2, [r7, #0]
 800df58:	6810      	ldr	r0, [r2, #0]
 800df5a:	6018      	str	r0, [r3, #0]
 800df5c:	8891      	ldrh	r1, [r2, #4]
 800df5e:	7992      	ldrb	r2, [r2, #6]
 800df60:	8099      	strh	r1, [r3, #4]
 800df62:	719a      	strb	r2, [r3, #6]
    break;
 800df64:	e009      	b.n	800df7a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 800df66:	683b      	ldr	r3, [r7, #0]
 800df68:	4a07      	ldr	r2, [pc, #28]	; (800df88 <CDC_Control_FS+0xe0>)
 800df6a:	6810      	ldr	r0, [r2, #0]
 800df6c:	6018      	str	r0, [r3, #0]
 800df6e:	8891      	ldrh	r1, [r2, #4]
 800df70:	7992      	ldrb	r2, [r2, #6]
 800df72:	8099      	strh	r1, [r3, #4]
 800df74:	719a      	strb	r2, [r3, #6]
    break;
 800df76:	e000      	b.n	800df7a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800df78:	bf00      	nop
  }

  return (USBD_OK);
 800df7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr
 800df88:	20000138 	.word	0x20000138

0800df8c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df96:	6879      	ldr	r1, [r7, #4]
 800df98:	4805      	ldr	r0, [pc, #20]	; (800dfb0 <CDC_Receive_FS+0x24>)
 800df9a:	f7fd fb1b 	bl	800b5d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df9e:	4804      	ldr	r0, [pc, #16]	; (800dfb0 <CDC_Receive_FS+0x24>)
 800dfa0:	f7fd fb5c 	bl	800b65c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dfa4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3708      	adds	r7, #8
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}
 800dfae:	bf00      	nop
 800dfb0:	20004a48 	.word	0x20004a48

0800dfb4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b084      	sub	sp, #16
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
 800dfbc:	460b      	mov	r3, r1
 800dfbe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dfc4:	4b0d      	ldr	r3, [pc, #52]	; (800dffc <CDC_Transmit_FS+0x48>)
 800dfc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d001      	beq.n	800dfda <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	e00b      	b.n	800dff2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dfda:	887b      	ldrh	r3, [r7, #2]
 800dfdc:	461a      	mov	r2, r3
 800dfde:	6879      	ldr	r1, [r7, #4]
 800dfe0:	4806      	ldr	r0, [pc, #24]	; (800dffc <CDC_Transmit_FS+0x48>)
 800dfe2:	f7fd fade 	bl	800b5a2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dfe6:	4805      	ldr	r0, [pc, #20]	; (800dffc <CDC_Transmit_FS+0x48>)
 800dfe8:	f7fd fb08 	bl	800b5fc <USBD_CDC_TransmitPacket>
 800dfec:	4603      	mov	r3, r0
 800dfee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3710      	adds	r7, #16
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20004a48 	.word	0x20004a48

0800e000 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e000:	b480      	push	{r7}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60f8      	str	r0, [r7, #12]
 800e008:	60b9      	str	r1, [r7, #8]
 800e00a:	4613      	mov	r3, r2
 800e00c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e012:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e016:	4618      	mov	r0, r3
 800e018:	371c      	adds	r7, #28
 800e01a:	46bd      	mov	sp, r7
 800e01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e020:	4770      	bx	lr
	...

0800e024 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e024:	b480      	push	{r7}
 800e026:	b083      	sub	sp, #12
 800e028:	af00      	add	r7, sp, #0
 800e02a:	4603      	mov	r3, r0
 800e02c:	6039      	str	r1, [r7, #0]
 800e02e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	2212      	movs	r2, #18
 800e034:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e036:	4b03      	ldr	r3, [pc, #12]	; (800e044 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e038:	4618      	mov	r0, r3
 800e03a:	370c      	adds	r7, #12
 800e03c:	46bd      	mov	sp, r7
 800e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e042:	4770      	bx	lr
 800e044:	20000174 	.word	0x20000174

0800e048 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	4603      	mov	r3, r0
 800e050:	6039      	str	r1, [r7, #0]
 800e052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2204      	movs	r2, #4
 800e058:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e05a:	4b03      	ldr	r3, [pc, #12]	; (800e068 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	370c      	adds	r7, #12
 800e060:	46bd      	mov	sp, r7
 800e062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e066:	4770      	bx	lr
 800e068:	20000194 	.word	0x20000194

0800e06c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	4603      	mov	r3, r0
 800e074:	6039      	str	r1, [r7, #0]
 800e076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d105      	bne.n	800e08a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e07e:	683a      	ldr	r2, [r7, #0]
 800e080:	4907      	ldr	r1, [pc, #28]	; (800e0a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e082:	4808      	ldr	r0, [pc, #32]	; (800e0a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e084:	f7fe fb63 	bl	800c74e <USBD_GetString>
 800e088:	e004      	b.n	800e094 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	4904      	ldr	r1, [pc, #16]	; (800e0a0 <USBD_FS_ProductStrDescriptor+0x34>)
 800e08e:	4805      	ldr	r0, [pc, #20]	; (800e0a4 <USBD_FS_ProductStrDescriptor+0x38>)
 800e090:	f7fe fb5d 	bl	800c74e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e094:	4b02      	ldr	r3, [pc, #8]	; (800e0a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e096:	4618      	mov	r0, r3
 800e098:	3708      	adds	r7, #8
 800e09a:	46bd      	mov	sp, r7
 800e09c:	bd80      	pop	{r7, pc}
 800e09e:	bf00      	nop
 800e0a0:	20005d18 	.word	0x20005d18
 800e0a4:	08013638 	.word	0x08013638

0800e0a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b082      	sub	sp, #8
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	6039      	str	r1, [r7, #0]
 800e0b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e0b4:	683a      	ldr	r2, [r7, #0]
 800e0b6:	4904      	ldr	r1, [pc, #16]	; (800e0c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e0b8:	4804      	ldr	r0, [pc, #16]	; (800e0cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e0ba:	f7fe fb48 	bl	800c74e <USBD_GetString>
  return USBD_StrDesc;
 800e0be:	4b02      	ldr	r3, [pc, #8]	; (800e0c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}
 800e0c8:	20005d18 	.word	0x20005d18
 800e0cc:	08013650 	.word	0x08013650

0800e0d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	4603      	mov	r3, r0
 800e0d8:	6039      	str	r1, [r7, #0]
 800e0da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	221a      	movs	r2, #26
 800e0e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e0e2:	f000 f855 	bl	800e190 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e0e6:	4b02      	ldr	r3, [pc, #8]	; (800e0f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3708      	adds	r7, #8
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	20000198 	.word	0x20000198

0800e0f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	6039      	str	r1, [r7, #0]
 800e0fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e100:	79fb      	ldrb	r3, [r7, #7]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d105      	bne.n	800e112 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	4907      	ldr	r1, [pc, #28]	; (800e128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e10a:	4808      	ldr	r0, [pc, #32]	; (800e12c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e10c:	f7fe fb1f 	bl	800c74e <USBD_GetString>
 800e110:	e004      	b.n	800e11c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e112:	683a      	ldr	r2, [r7, #0]
 800e114:	4904      	ldr	r1, [pc, #16]	; (800e128 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e116:	4805      	ldr	r0, [pc, #20]	; (800e12c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e118:	f7fe fb19 	bl	800c74e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e11c:	4b02      	ldr	r3, [pc, #8]	; (800e128 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3708      	adds	r7, #8
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	20005d18 	.word	0x20005d18
 800e12c:	08013664 	.word	0x08013664

0800e130 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b082      	sub	sp, #8
 800e134:	af00      	add	r7, sp, #0
 800e136:	4603      	mov	r3, r0
 800e138:	6039      	str	r1, [r7, #0]
 800e13a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e13c:	79fb      	ldrb	r3, [r7, #7]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d105      	bne.n	800e14e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e142:	683a      	ldr	r2, [r7, #0]
 800e144:	4907      	ldr	r1, [pc, #28]	; (800e164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e146:	4808      	ldr	r0, [pc, #32]	; (800e168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e148:	f7fe fb01 	bl	800c74e <USBD_GetString>
 800e14c:	e004      	b.n	800e158 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e14e:	683a      	ldr	r2, [r7, #0]
 800e150:	4904      	ldr	r1, [pc, #16]	; (800e164 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e152:	4805      	ldr	r0, [pc, #20]	; (800e168 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e154:	f7fe fafb 	bl	800c74e <USBD_GetString>
  }
  return USBD_StrDesc;
 800e158:	4b02      	ldr	r3, [pc, #8]	; (800e164 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e15a:	4618      	mov	r0, r3
 800e15c:	3708      	adds	r7, #8
 800e15e:	46bd      	mov	sp, r7
 800e160:	bd80      	pop	{r7, pc}
 800e162:	bf00      	nop
 800e164:	20005d18 	.word	0x20005d18
 800e168:	08013670 	.word	0x08013670

0800e16c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	4603      	mov	r3, r0
 800e174:	6039      	str	r1, [r7, #0]
 800e176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	220c      	movs	r2, #12
 800e17c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800e17e:	4b03      	ldr	r3, [pc, #12]	; (800e18c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800e180:	4618      	mov	r0, r3
 800e182:	370c      	adds	r7, #12
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	20000188 	.word	0x20000188

0800e190 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b084      	sub	sp, #16
 800e194:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e196:	4b0f      	ldr	r3, [pc, #60]	; (800e1d4 <Get_SerialNum+0x44>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e19c:	4b0e      	ldr	r3, [pc, #56]	; (800e1d8 <Get_SerialNum+0x48>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e1a2:	4b0e      	ldr	r3, [pc, #56]	; (800e1dc <Get_SerialNum+0x4c>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e1a8:	68fa      	ldr	r2, [r7, #12]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	4413      	add	r3, r2
 800e1ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d009      	beq.n	800e1ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e1b6:	2208      	movs	r2, #8
 800e1b8:	4909      	ldr	r1, [pc, #36]	; (800e1e0 <Get_SerialNum+0x50>)
 800e1ba:	68f8      	ldr	r0, [r7, #12]
 800e1bc:	f000 f814 	bl	800e1e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e1c0:	2204      	movs	r2, #4
 800e1c2:	4908      	ldr	r1, [pc, #32]	; (800e1e4 <Get_SerialNum+0x54>)
 800e1c4:	68b8      	ldr	r0, [r7, #8]
 800e1c6:	f000 f80f 	bl	800e1e8 <IntToUnicode>
  }
}
 800e1ca:	bf00      	nop
 800e1cc:	3710      	adds	r7, #16
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}
 800e1d2:	bf00      	nop
 800e1d4:	1fff7a10 	.word	0x1fff7a10
 800e1d8:	1fff7a14 	.word	0x1fff7a14
 800e1dc:	1fff7a18 	.word	0x1fff7a18
 800e1e0:	2000019a 	.word	0x2000019a
 800e1e4:	200001aa 	.word	0x200001aa

0800e1e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b087      	sub	sp, #28
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	60f8      	str	r0, [r7, #12]
 800e1f0:	60b9      	str	r1, [r7, #8]
 800e1f2:	4613      	mov	r3, r2
 800e1f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	75fb      	strb	r3, [r7, #23]
 800e1fe:	e027      	b.n	800e250 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	0f1b      	lsrs	r3, r3, #28
 800e204:	2b09      	cmp	r3, #9
 800e206:	d80b      	bhi.n	800e220 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	0f1b      	lsrs	r3, r3, #28
 800e20c:	b2da      	uxtb	r2, r3
 800e20e:	7dfb      	ldrb	r3, [r7, #23]
 800e210:	005b      	lsls	r3, r3, #1
 800e212:	4619      	mov	r1, r3
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	440b      	add	r3, r1
 800e218:	3230      	adds	r2, #48	; 0x30
 800e21a:	b2d2      	uxtb	r2, r2
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	e00a      	b.n	800e236 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	0f1b      	lsrs	r3, r3, #28
 800e224:	b2da      	uxtb	r2, r3
 800e226:	7dfb      	ldrb	r3, [r7, #23]
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	4619      	mov	r1, r3
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	440b      	add	r3, r1
 800e230:	3237      	adds	r2, #55	; 0x37
 800e232:	b2d2      	uxtb	r2, r2
 800e234:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	011b      	lsls	r3, r3, #4
 800e23a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e23c:	7dfb      	ldrb	r3, [r7, #23]
 800e23e:	005b      	lsls	r3, r3, #1
 800e240:	3301      	adds	r3, #1
 800e242:	68ba      	ldr	r2, [r7, #8]
 800e244:	4413      	add	r3, r2
 800e246:	2200      	movs	r2, #0
 800e248:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e24a:	7dfb      	ldrb	r3, [r7, #23]
 800e24c:	3301      	adds	r3, #1
 800e24e:	75fb      	strb	r3, [r7, #23]
 800e250:	7dfa      	ldrb	r2, [r7, #23]
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	429a      	cmp	r2, r3
 800e256:	d3d3      	bcc.n	800e200 <IntToUnicode+0x18>
  }
}
 800e258:	bf00      	nop
 800e25a:	371c      	adds	r7, #28
 800e25c:	46bd      	mov	sp, r7
 800e25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e262:	4770      	bx	lr

0800e264 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b08a      	sub	sp, #40	; 0x28
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e26c:	f107 0314 	add.w	r3, r7, #20
 800e270:	2200      	movs	r2, #0
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	605a      	str	r2, [r3, #4]
 800e276:	609a      	str	r2, [r3, #8]
 800e278:	60da      	str	r2, [r3, #12]
 800e27a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e284:	d13a      	bne.n	800e2fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e286:	2300      	movs	r3, #0
 800e288:	613b      	str	r3, [r7, #16]
 800e28a:	4b1e      	ldr	r3, [pc, #120]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e28c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e28e:	4a1d      	ldr	r2, [pc, #116]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e290:	f043 0301 	orr.w	r3, r3, #1
 800e294:	6313      	str	r3, [r2, #48]	; 0x30
 800e296:	4b1b      	ldr	r3, [pc, #108]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e29a:	f003 0301 	and.w	r3, r3, #1
 800e29e:	613b      	str	r3, [r7, #16]
 800e2a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e2a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e2a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e2a8:	2302      	movs	r3, #2
 800e2aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e2ac:	2300      	movs	r3, #0
 800e2ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e2b0:	2303      	movs	r3, #3
 800e2b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e2b4:	230a      	movs	r3, #10
 800e2b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e2b8:	f107 0314 	add.w	r3, r7, #20
 800e2bc:	4619      	mov	r1, r3
 800e2be:	4812      	ldr	r0, [pc, #72]	; (800e308 <HAL_PCD_MspInit+0xa4>)
 800e2c0:	f7f5 ffa4 	bl	800420c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e2c4:	4b0f      	ldr	r3, [pc, #60]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2c8:	4a0e      	ldr	r2, [pc, #56]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e2ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2ce:	6353      	str	r3, [r2, #52]	; 0x34
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60fb      	str	r3, [r7, #12]
 800e2d4:	4b0b      	ldr	r3, [pc, #44]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e2d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2d8:	4a0a      	ldr	r2, [pc, #40]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e2da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e2de:	6453      	str	r3, [r2, #68]	; 0x44
 800e2e0:	4b08      	ldr	r3, [pc, #32]	; (800e304 <HAL_PCD_MspInit+0xa0>)
 800e2e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2105      	movs	r1, #5
 800e2f0:	2043      	movs	r0, #67	; 0x43
 800e2f2:	f7f5 ff61 	bl	80041b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e2f6:	2043      	movs	r0, #67	; 0x43
 800e2f8:	f7f5 ff7a 	bl	80041f0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e2fc:	bf00      	nop
 800e2fe:	3728      	adds	r7, #40	; 0x28
 800e300:	46bd      	mov	sp, r7
 800e302:	bd80      	pop	{r7, pc}
 800e304:	40023800 	.word	0x40023800
 800e308:	40020000 	.word	0x40020000

0800e30c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
 800e312:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800e320:	4619      	mov	r1, r3
 800e322:	4610      	mov	r0, r2
 800e324:	f7fd fa66 	bl	800b7f4 <USBD_LL_SetupStage>
}
 800e328:	bf00      	nop
 800e32a:	3708      	adds	r7, #8
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}

0800e330 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e330:	b580      	push	{r7, lr}
 800e332:	b082      	sub	sp, #8
 800e334:	af00      	add	r7, sp, #0
 800e336:	6078      	str	r0, [r7, #4]
 800e338:	460b      	mov	r3, r1
 800e33a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e342:	78fa      	ldrb	r2, [r7, #3]
 800e344:	6879      	ldr	r1, [r7, #4]
 800e346:	4613      	mov	r3, r2
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	1a9b      	subs	r3, r3, r2
 800e34c:	009b      	lsls	r3, r3, #2
 800e34e:	440b      	add	r3, r1
 800e350:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800e354:	681a      	ldr	r2, [r3, #0]
 800e356:	78fb      	ldrb	r3, [r7, #3]
 800e358:	4619      	mov	r1, r3
 800e35a:	f7fd fa9e 	bl	800b89a <USBD_LL_DataOutStage>
}
 800e35e:	bf00      	nop
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e366:	b580      	push	{r7, lr}
 800e368:	b082      	sub	sp, #8
 800e36a:	af00      	add	r7, sp, #0
 800e36c:	6078      	str	r0, [r7, #4]
 800e36e:	460b      	mov	r3, r1
 800e370:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800e378:	78fa      	ldrb	r2, [r7, #3]
 800e37a:	6879      	ldr	r1, [r7, #4]
 800e37c:	4613      	mov	r3, r2
 800e37e:	00db      	lsls	r3, r3, #3
 800e380:	1a9b      	subs	r3, r3, r2
 800e382:	009b      	lsls	r3, r3, #2
 800e384:	440b      	add	r3, r1
 800e386:	3348      	adds	r3, #72	; 0x48
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	4619      	mov	r1, r3
 800e38e:	f7fd fae7 	bl	800b960 <USBD_LL_DataInStage>
}
 800e392:	bf00      	nop
 800e394:	3708      	adds	r7, #8
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f7fd fbeb 	bl	800bb84 <USBD_LL_SOF>
}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b084      	sub	sp, #16
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e3be:	2301      	movs	r3, #1
 800e3c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	68db      	ldr	r3, [r3, #12]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d102      	bne.n	800e3d0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	73fb      	strb	r3, [r7, #15]
 800e3ce:	e008      	b.n	800e3e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	68db      	ldr	r3, [r3, #12]
 800e3d4:	2b02      	cmp	r3, #2
 800e3d6:	d102      	bne.n	800e3de <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	73fb      	strb	r3, [r7, #15]
 800e3dc:	e001      	b.n	800e3e2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e3de:	f7f4 fd81 	bl	8002ee4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3e8:	7bfa      	ldrb	r2, [r7, #15]
 800e3ea:	4611      	mov	r1, r2
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7fd fb8e 	bl	800bb0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	f7fd fb47 	bl	800ba8c <USBD_LL_Reset>
}
 800e3fe:	bf00      	nop
 800e400:	3710      	adds	r7, #16
 800e402:	46bd      	mov	sp, r7
 800e404:	bd80      	pop	{r7, pc}
	...

0800e408 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b082      	sub	sp, #8
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e416:	4618      	mov	r0, r3
 800e418:	f7fd fb89 	bl	800bb2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	6812      	ldr	r2, [r2, #0]
 800e42a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e42e:	f043 0301 	orr.w	r3, r3, #1
 800e432:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6a1b      	ldr	r3, [r3, #32]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d005      	beq.n	800e448 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e43c:	4b04      	ldr	r3, [pc, #16]	; (800e450 <HAL_PCD_SuspendCallback+0x48>)
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	4a03      	ldr	r2, [pc, #12]	; (800e450 <HAL_PCD_SuspendCallback+0x48>)
 800e442:	f043 0306 	orr.w	r3, r3, #6
 800e446:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e448:	bf00      	nop
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	e000ed00 	.word	0xe000ed00

0800e454 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e462:	4618      	mov	r0, r3
 800e464:	f7fd fb78 	bl	800bb58 <USBD_LL_Resume>
}
 800e468:	bf00      	nop
 800e46a:	3708      	adds	r7, #8
 800e46c:	46bd      	mov	sp, r7
 800e46e:	bd80      	pop	{r7, pc}

0800e470 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	460b      	mov	r3, r1
 800e47a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e482:	78fa      	ldrb	r2, [r7, #3]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f7fd fba3 	bl	800bbd2 <USBD_LL_IsoOUTIncomplete>
}
 800e48c:	bf00      	nop
 800e48e:	3708      	adds	r7, #8
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}

0800e494 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
 800e49c:	460b      	mov	r3, r1
 800e49e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4a6:	78fa      	ldrb	r2, [r7, #3]
 800e4a8:	4611      	mov	r1, r2
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7fd fb84 	bl	800bbb8 <USBD_LL_IsoINIncomplete>
}
 800e4b0:	bf00      	nop
 800e4b2:	3708      	adds	r7, #8
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}

0800e4b8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b082      	sub	sp, #8
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7fd fb90 	bl	800bbec <USBD_LL_DevConnected>
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b082      	sub	sp, #8
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fd fb8d 	bl	800bc02 <USBD_LL_DevDisconnected>
}
 800e4e8:	bf00      	nop
 800e4ea:	3708      	adds	r7, #8
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d13c      	bne.n	800e57a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e500:	4a20      	ldr	r2, [pc, #128]	; (800e584 <USBD_LL_Init+0x94>)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	4a1e      	ldr	r2, [pc, #120]	; (800e584 <USBD_LL_Init+0x94>)
 800e50c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e510:	4b1c      	ldr	r3, [pc, #112]	; (800e584 <USBD_LL_Init+0x94>)
 800e512:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e516:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e518:	4b1a      	ldr	r3, [pc, #104]	; (800e584 <USBD_LL_Init+0x94>)
 800e51a:	2206      	movs	r2, #6
 800e51c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e51e:	4b19      	ldr	r3, [pc, #100]	; (800e584 <USBD_LL_Init+0x94>)
 800e520:	2202      	movs	r2, #2
 800e522:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e524:	4b17      	ldr	r3, [pc, #92]	; (800e584 <USBD_LL_Init+0x94>)
 800e526:	2200      	movs	r2, #0
 800e528:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e52a:	4b16      	ldr	r3, [pc, #88]	; (800e584 <USBD_LL_Init+0x94>)
 800e52c:	2202      	movs	r2, #2
 800e52e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e530:	4b14      	ldr	r3, [pc, #80]	; (800e584 <USBD_LL_Init+0x94>)
 800e532:	2200      	movs	r2, #0
 800e534:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e536:	4b13      	ldr	r3, [pc, #76]	; (800e584 <USBD_LL_Init+0x94>)
 800e538:	2200      	movs	r2, #0
 800e53a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e53c:	4b11      	ldr	r3, [pc, #68]	; (800e584 <USBD_LL_Init+0x94>)
 800e53e:	2200      	movs	r2, #0
 800e540:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e542:	4b10      	ldr	r3, [pc, #64]	; (800e584 <USBD_LL_Init+0x94>)
 800e544:	2200      	movs	r2, #0
 800e546:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e548:	4b0e      	ldr	r3, [pc, #56]	; (800e584 <USBD_LL_Init+0x94>)
 800e54a:	2200      	movs	r2, #0
 800e54c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e54e:	480d      	ldr	r0, [pc, #52]	; (800e584 <USBD_LL_Init+0x94>)
 800e550:	f7f6 ffbb 	bl	80054ca <HAL_PCD_Init>
 800e554:	4603      	mov	r3, r0
 800e556:	2b00      	cmp	r3, #0
 800e558:	d001      	beq.n	800e55e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e55a:	f7f4 fcc3 	bl	8002ee4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e55e:	2180      	movs	r1, #128	; 0x80
 800e560:	4808      	ldr	r0, [pc, #32]	; (800e584 <USBD_LL_Init+0x94>)
 800e562:	f7f8 f94c 	bl	80067fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e566:	2240      	movs	r2, #64	; 0x40
 800e568:	2100      	movs	r1, #0
 800e56a:	4806      	ldr	r0, [pc, #24]	; (800e584 <USBD_LL_Init+0x94>)
 800e56c:	f7f8 f900 	bl	8006770 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e570:	2280      	movs	r2, #128	; 0x80
 800e572:	2101      	movs	r1, #1
 800e574:	4803      	ldr	r0, [pc, #12]	; (800e584 <USBD_LL_Init+0x94>)
 800e576:	f7f8 f8fb 	bl	8006770 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e57a:	2300      	movs	r3, #0
}
 800e57c:	4618      	mov	r0, r3
 800e57e:	3708      	adds	r7, #8
 800e580:	46bd      	mov	sp, r7
 800e582:	bd80      	pop	{r7, pc}
 800e584:	20005f18 	.word	0x20005f18

0800e588 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e590:	2300      	movs	r3, #0
 800e592:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f7f7 f8b7 	bl	8005712 <HAL_PCD_Start>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5a8:	7bfb      	ldrb	r3, [r7, #15]
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f000 f978 	bl	800e8a0 <USBD_Get_USB_Status>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}

0800e5be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e5be:	b580      	push	{r7, lr}
 800e5c0:	b084      	sub	sp, #16
 800e5c2:	af00      	add	r7, sp, #0
 800e5c4:	6078      	str	r0, [r7, #4]
 800e5c6:	4608      	mov	r0, r1
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	461a      	mov	r2, r3
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	70fb      	strb	r3, [r7, #3]
 800e5d0:	460b      	mov	r3, r1
 800e5d2:	70bb      	strb	r3, [r7, #2]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d8:	2300      	movs	r3, #0
 800e5da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e5e6:	78bb      	ldrb	r3, [r7, #2]
 800e5e8:	883a      	ldrh	r2, [r7, #0]
 800e5ea:	78f9      	ldrb	r1, [r7, #3]
 800e5ec:	f7f7 fcc8 	bl	8005f80 <HAL_PCD_EP_Open>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f000 f952 	bl	800e8a0 <USBD_Get_USB_Status>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e600:	7bbb      	ldrb	r3, [r7, #14]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e60a:	b580      	push	{r7, lr}
 800e60c:	b084      	sub	sp, #16
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
 800e612:	460b      	mov	r3, r1
 800e614:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e616:	2300      	movs	r3, #0
 800e618:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e61a:	2300      	movs	r3, #0
 800e61c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e624:	78fa      	ldrb	r2, [r7, #3]
 800e626:	4611      	mov	r1, r2
 800e628:	4618      	mov	r0, r3
 800e62a:	f7f7 fd11 	bl	8006050 <HAL_PCD_EP_Close>
 800e62e:	4603      	mov	r3, r0
 800e630:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e632:	7bfb      	ldrb	r3, [r7, #15]
 800e634:	4618      	mov	r0, r3
 800e636:	f000 f933 	bl	800e8a0 <USBD_Get_USB_Status>
 800e63a:	4603      	mov	r3, r0
 800e63c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e63e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e640:	4618      	mov	r0, r3
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e662:	78fa      	ldrb	r2, [r7, #3]
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f7f7 fde9 	bl	800623e <HAL_PCD_EP_SetStall>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	4618      	mov	r0, r3
 800e674:	f000 f914 	bl	800e8a0 <USBD_Get_USB_Status>
 800e678:	4603      	mov	r3, r0
 800e67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b084      	sub	sp, #16
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
 800e68e:	460b      	mov	r3, r1
 800e690:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e692:	2300      	movs	r3, #0
 800e694:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6a0:	78fa      	ldrb	r2, [r7, #3]
 800e6a2:	4611      	mov	r1, r2
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f7f7 fe2e 	bl	8006306 <HAL_PCD_EP_ClrStall>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6ae:	7bfb      	ldrb	r3, [r7, #15]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f000 f8f5 	bl	800e8a0 <USBD_Get_USB_Status>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3710      	adds	r7, #16
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6c4:	b480      	push	{r7}
 800e6c6:	b085      	sub	sp, #20
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	460b      	mov	r3, r1
 800e6ce:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e6d6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e6d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da0b      	bge.n	800e6f8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e6e0:	78fb      	ldrb	r3, [r7, #3]
 800e6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	00db      	lsls	r3, r3, #3
 800e6ec:	1a9b      	subs	r3, r3, r2
 800e6ee:	009b      	lsls	r3, r3, #2
 800e6f0:	440b      	add	r3, r1
 800e6f2:	333e      	adds	r3, #62	; 0x3e
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	e00b      	b.n	800e710 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e6f8:	78fb      	ldrb	r3, [r7, #3]
 800e6fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e6fe:	68f9      	ldr	r1, [r7, #12]
 800e700:	4613      	mov	r3, r2
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	1a9b      	subs	r3, r3, r2
 800e706:	009b      	lsls	r3, r3, #2
 800e708:	440b      	add	r3, r1
 800e70a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e70e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e710:	4618      	mov	r0, r3
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	4770      	bx	lr

0800e71c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	460b      	mov	r3, r1
 800e726:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e728:	2300      	movs	r3, #0
 800e72a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e736:	78fa      	ldrb	r2, [r7, #3]
 800e738:	4611      	mov	r1, r2
 800e73a:	4618      	mov	r0, r3
 800e73c:	f7f7 fbfb 	bl	8005f36 <HAL_PCD_SetAddress>
 800e740:	4603      	mov	r3, r0
 800e742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e744:	7bfb      	ldrb	r3, [r7, #15]
 800e746:	4618      	mov	r0, r3
 800e748:	f000 f8aa 	bl	800e8a0 <USBD_Get_USB_Status>
 800e74c:	4603      	mov	r3, r0
 800e74e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e750:	7bbb      	ldrb	r3, [r7, #14]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	60f8      	str	r0, [r7, #12]
 800e762:	607a      	str	r2, [r7, #4]
 800e764:	603b      	str	r3, [r7, #0]
 800e766:	460b      	mov	r3, r1
 800e768:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e778:	7af9      	ldrb	r1, [r7, #11]
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	687a      	ldr	r2, [r7, #4]
 800e77e:	f7f7 fd14 	bl	80061aa <HAL_PCD_EP_Transmit>
 800e782:	4603      	mov	r3, r0
 800e784:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e786:	7dfb      	ldrb	r3, [r7, #23]
 800e788:	4618      	mov	r0, r3
 800e78a:	f000 f889 	bl	800e8a0 <USBD_Get_USB_Status>
 800e78e:	4603      	mov	r3, r0
 800e790:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e792:	7dbb      	ldrb	r3, [r7, #22]
}
 800e794:	4618      	mov	r0, r3
 800e796:	3718      	adds	r7, #24
 800e798:	46bd      	mov	sp, r7
 800e79a:	bd80      	pop	{r7, pc}

0800e79c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b086      	sub	sp, #24
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	60f8      	str	r0, [r7, #12]
 800e7a4:	607a      	str	r2, [r7, #4]
 800e7a6:	603b      	str	r3, [r7, #0]
 800e7a8:	460b      	mov	r3, r1
 800e7aa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e7ba:	7af9      	ldrb	r1, [r7, #11]
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	687a      	ldr	r2, [r7, #4]
 800e7c0:	f7f7 fc90 	bl	80060e4 <HAL_PCD_EP_Receive>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c8:	7dfb      	ldrb	r3, [r7, #23]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f000 f868 	bl	800e8a0 <USBD_Get_USB_Status>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e7d4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b082      	sub	sp, #8
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	460b      	mov	r3, r1
 800e7e8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e7f0:	78fa      	ldrb	r2, [r7, #3]
 800e7f2:	4611      	mov	r1, r2
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7f7 fcc0 	bl	800617a <HAL_PCD_EP_GetRxCount>
 800e7fa:	4603      	mov	r3, r0
}
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	3708      	adds	r7, #8
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}

0800e804 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
 800e80a:	6078      	str	r0, [r7, #4]
 800e80c:	460b      	mov	r3, r1
 800e80e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e810:	78fb      	ldrb	r3, [r7, #3]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d002      	beq.n	800e81c <HAL_PCDEx_LPM_Callback+0x18>
 800e816:	2b01      	cmp	r3, #1
 800e818:	d01f      	beq.n	800e85a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e81a:	e03b      	b.n	800e894 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6a1b      	ldr	r3, [r3, #32]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d007      	beq.n	800e834 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 800e824:	f7f3 fe6c 	bl	8002500 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e828:	4b1c      	ldr	r3, [pc, #112]	; (800e89c <HAL_PCDEx_LPM_Callback+0x98>)
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	4a1b      	ldr	r2, [pc, #108]	; (800e89c <HAL_PCDEx_LPM_Callback+0x98>)
 800e82e:	f023 0306 	bic.w	r3, r3, #6
 800e832:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	687a      	ldr	r2, [r7, #4]
 800e840:	6812      	ldr	r2, [r2, #0]
 800e842:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e846:	f023 0301 	bic.w	r3, r3, #1
 800e84a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e852:	4618      	mov	r0, r3
 800e854:	f7fd f980 	bl	800bb58 <USBD_LL_Resume>
    break;
 800e858:	e01c      	b.n	800e894 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	687a      	ldr	r2, [r7, #4]
 800e866:	6812      	ldr	r2, [r2, #0]
 800e868:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e86c:	f043 0301 	orr.w	r3, r3, #1
 800e870:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800e878:	4618      	mov	r0, r3
 800e87a:	f7fd f958 	bl	800bb2e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6a1b      	ldr	r3, [r3, #32]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d005      	beq.n	800e892 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e886:	4b05      	ldr	r3, [pc, #20]	; (800e89c <HAL_PCDEx_LPM_Callback+0x98>)
 800e888:	691b      	ldr	r3, [r3, #16]
 800e88a:	4a04      	ldr	r2, [pc, #16]	; (800e89c <HAL_PCDEx_LPM_Callback+0x98>)
 800e88c:	f043 0306 	orr.w	r3, r3, #6
 800e890:	6113      	str	r3, [r2, #16]
    break;
 800e892:	bf00      	nop
}
 800e894:	bf00      	nop
 800e896:	3708      	adds	r7, #8
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}
 800e89c:	e000ed00 	.word	0xe000ed00

0800e8a0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b085      	sub	sp, #20
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e8ae:	79fb      	ldrb	r3, [r7, #7]
 800e8b0:	2b03      	cmp	r3, #3
 800e8b2:	d817      	bhi.n	800e8e4 <USBD_Get_USB_Status+0x44>
 800e8b4:	a201      	add	r2, pc, #4	; (adr r2, 800e8bc <USBD_Get_USB_Status+0x1c>)
 800e8b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8ba:	bf00      	nop
 800e8bc:	0800e8cd 	.word	0x0800e8cd
 800e8c0:	0800e8d3 	.word	0x0800e8d3
 800e8c4:	0800e8d9 	.word	0x0800e8d9
 800e8c8:	0800e8df 	.word	0x0800e8df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	73fb      	strb	r3, [r7, #15]
    break;
 800e8d0:	e00b      	b.n	800e8ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e8d2:	2303      	movs	r3, #3
 800e8d4:	73fb      	strb	r3, [r7, #15]
    break;
 800e8d6:	e008      	b.n	800e8ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	73fb      	strb	r3, [r7, #15]
    break;
 800e8dc:	e005      	b.n	800e8ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e8de:	2303      	movs	r3, #3
 800e8e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e8e2:	e002      	b.n	800e8ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e8e4:	2303      	movs	r3, #3
 800e8e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e8e8:	bf00      	nop
  }
  return usb_status;
 800e8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3714      	adds	r7, #20
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f6:	4770      	bx	lr

0800e8f8 <__assert_func>:
 800e8f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e8fa:	461c      	mov	r4, r3
 800e8fc:	4b09      	ldr	r3, [pc, #36]	; (800e924 <__assert_func+0x2c>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	4605      	mov	r5, r0
 800e902:	68d8      	ldr	r0, [r3, #12]
 800e904:	b152      	cbz	r2, 800e91c <__assert_func+0x24>
 800e906:	4b08      	ldr	r3, [pc, #32]	; (800e928 <__assert_func+0x30>)
 800e908:	9100      	str	r1, [sp, #0]
 800e90a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e90e:	4907      	ldr	r1, [pc, #28]	; (800e92c <__assert_func+0x34>)
 800e910:	462b      	mov	r3, r5
 800e912:	4622      	mov	r2, r4
 800e914:	f000 f814 	bl	800e940 <fiprintf>
 800e918:	f001 f806 	bl	800f928 <abort>
 800e91c:	4b04      	ldr	r3, [pc, #16]	; (800e930 <__assert_func+0x38>)
 800e91e:	461a      	mov	r2, r3
 800e920:	e7f2      	b.n	800e908 <__assert_func+0x10>
 800e922:	bf00      	nop
 800e924:	200001b4 	.word	0x200001b4
 800e928:	08013718 	.word	0x08013718
 800e92c:	08013725 	.word	0x08013725
 800e930:	08013753 	.word	0x08013753

0800e934 <__errno>:
 800e934:	4b01      	ldr	r3, [pc, #4]	; (800e93c <__errno+0x8>)
 800e936:	6818      	ldr	r0, [r3, #0]
 800e938:	4770      	bx	lr
 800e93a:	bf00      	nop
 800e93c:	200001b4 	.word	0x200001b4

0800e940 <fiprintf>:
 800e940:	b40e      	push	{r1, r2, r3}
 800e942:	b503      	push	{r0, r1, lr}
 800e944:	4601      	mov	r1, r0
 800e946:	ab03      	add	r3, sp, #12
 800e948:	4805      	ldr	r0, [pc, #20]	; (800e960 <fiprintf+0x20>)
 800e94a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e94e:	6800      	ldr	r0, [r0, #0]
 800e950:	9301      	str	r3, [sp, #4]
 800e952:	f000 f921 	bl	800eb98 <_vfiprintf_r>
 800e956:	b002      	add	sp, #8
 800e958:	f85d eb04 	ldr.w	lr, [sp], #4
 800e95c:	b003      	add	sp, #12
 800e95e:	4770      	bx	lr
 800e960:	200001b4 	.word	0x200001b4

0800e964 <__libc_init_array>:
 800e964:	b570      	push	{r4, r5, r6, lr}
 800e966:	4e0d      	ldr	r6, [pc, #52]	; (800e99c <__libc_init_array+0x38>)
 800e968:	4c0d      	ldr	r4, [pc, #52]	; (800e9a0 <__libc_init_array+0x3c>)
 800e96a:	1ba4      	subs	r4, r4, r6
 800e96c:	10a4      	asrs	r4, r4, #2
 800e96e:	2500      	movs	r5, #0
 800e970:	42a5      	cmp	r5, r4
 800e972:	d109      	bne.n	800e988 <__libc_init_array+0x24>
 800e974:	4e0b      	ldr	r6, [pc, #44]	; (800e9a4 <__libc_init_array+0x40>)
 800e976:	4c0c      	ldr	r4, [pc, #48]	; (800e9a8 <__libc_init_array+0x44>)
 800e978:	f004 fb98 	bl	80130ac <_init>
 800e97c:	1ba4      	subs	r4, r4, r6
 800e97e:	10a4      	asrs	r4, r4, #2
 800e980:	2500      	movs	r5, #0
 800e982:	42a5      	cmp	r5, r4
 800e984:	d105      	bne.n	800e992 <__libc_init_array+0x2e>
 800e986:	bd70      	pop	{r4, r5, r6, pc}
 800e988:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e98c:	4798      	blx	r3
 800e98e:	3501      	adds	r5, #1
 800e990:	e7ee      	b.n	800e970 <__libc_init_array+0xc>
 800e992:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e996:	4798      	blx	r3
 800e998:	3501      	adds	r5, #1
 800e99a:	e7f2      	b.n	800e982 <__libc_init_array+0x1e>
 800e99c:	08013c48 	.word	0x08013c48
 800e9a0:	08013c48 	.word	0x08013c48
 800e9a4:	08013c48 	.word	0x08013c48
 800e9a8:	08013c4c 	.word	0x08013c4c

0800e9ac <malloc>:
 800e9ac:	4b02      	ldr	r3, [pc, #8]	; (800e9b8 <malloc+0xc>)
 800e9ae:	4601      	mov	r1, r0
 800e9b0:	6818      	ldr	r0, [r3, #0]
 800e9b2:	f000 b86d 	b.w	800ea90 <_malloc_r>
 800e9b6:	bf00      	nop
 800e9b8:	200001b4 	.word	0x200001b4

0800e9bc <free>:
 800e9bc:	4b02      	ldr	r3, [pc, #8]	; (800e9c8 <free+0xc>)
 800e9be:	4601      	mov	r1, r0
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	f000 b817 	b.w	800e9f4 <_free_r>
 800e9c6:	bf00      	nop
 800e9c8:	200001b4 	.word	0x200001b4

0800e9cc <memcpy>:
 800e9cc:	b510      	push	{r4, lr}
 800e9ce:	1e43      	subs	r3, r0, #1
 800e9d0:	440a      	add	r2, r1
 800e9d2:	4291      	cmp	r1, r2
 800e9d4:	d100      	bne.n	800e9d8 <memcpy+0xc>
 800e9d6:	bd10      	pop	{r4, pc}
 800e9d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9e0:	e7f7      	b.n	800e9d2 <memcpy+0x6>

0800e9e2 <memset>:
 800e9e2:	4402      	add	r2, r0
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d100      	bne.n	800e9ec <memset+0xa>
 800e9ea:	4770      	bx	lr
 800e9ec:	f803 1b01 	strb.w	r1, [r3], #1
 800e9f0:	e7f9      	b.n	800e9e6 <memset+0x4>
	...

0800e9f4 <_free_r>:
 800e9f4:	b538      	push	{r3, r4, r5, lr}
 800e9f6:	4605      	mov	r5, r0
 800e9f8:	2900      	cmp	r1, #0
 800e9fa:	d045      	beq.n	800ea88 <_free_r+0x94>
 800e9fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea00:	1f0c      	subs	r4, r1, #4
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	bfb8      	it	lt
 800ea06:	18e4      	addlt	r4, r4, r3
 800ea08:	f002 f801 	bl	8010a0e <__malloc_lock>
 800ea0c:	4a1f      	ldr	r2, [pc, #124]	; (800ea8c <_free_r+0x98>)
 800ea0e:	6813      	ldr	r3, [r2, #0]
 800ea10:	4610      	mov	r0, r2
 800ea12:	b933      	cbnz	r3, 800ea22 <_free_r+0x2e>
 800ea14:	6063      	str	r3, [r4, #4]
 800ea16:	6014      	str	r4, [r2, #0]
 800ea18:	4628      	mov	r0, r5
 800ea1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea1e:	f001 bff7 	b.w	8010a10 <__malloc_unlock>
 800ea22:	42a3      	cmp	r3, r4
 800ea24:	d90c      	bls.n	800ea40 <_free_r+0x4c>
 800ea26:	6821      	ldr	r1, [r4, #0]
 800ea28:	1862      	adds	r2, r4, r1
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	bf04      	itt	eq
 800ea2e:	681a      	ldreq	r2, [r3, #0]
 800ea30:	685b      	ldreq	r3, [r3, #4]
 800ea32:	6063      	str	r3, [r4, #4]
 800ea34:	bf04      	itt	eq
 800ea36:	1852      	addeq	r2, r2, r1
 800ea38:	6022      	streq	r2, [r4, #0]
 800ea3a:	6004      	str	r4, [r0, #0]
 800ea3c:	e7ec      	b.n	800ea18 <_free_r+0x24>
 800ea3e:	4613      	mov	r3, r2
 800ea40:	685a      	ldr	r2, [r3, #4]
 800ea42:	b10a      	cbz	r2, 800ea48 <_free_r+0x54>
 800ea44:	42a2      	cmp	r2, r4
 800ea46:	d9fa      	bls.n	800ea3e <_free_r+0x4a>
 800ea48:	6819      	ldr	r1, [r3, #0]
 800ea4a:	1858      	adds	r0, r3, r1
 800ea4c:	42a0      	cmp	r0, r4
 800ea4e:	d10b      	bne.n	800ea68 <_free_r+0x74>
 800ea50:	6820      	ldr	r0, [r4, #0]
 800ea52:	4401      	add	r1, r0
 800ea54:	1858      	adds	r0, r3, r1
 800ea56:	4282      	cmp	r2, r0
 800ea58:	6019      	str	r1, [r3, #0]
 800ea5a:	d1dd      	bne.n	800ea18 <_free_r+0x24>
 800ea5c:	6810      	ldr	r0, [r2, #0]
 800ea5e:	6852      	ldr	r2, [r2, #4]
 800ea60:	605a      	str	r2, [r3, #4]
 800ea62:	4401      	add	r1, r0
 800ea64:	6019      	str	r1, [r3, #0]
 800ea66:	e7d7      	b.n	800ea18 <_free_r+0x24>
 800ea68:	d902      	bls.n	800ea70 <_free_r+0x7c>
 800ea6a:	230c      	movs	r3, #12
 800ea6c:	602b      	str	r3, [r5, #0]
 800ea6e:	e7d3      	b.n	800ea18 <_free_r+0x24>
 800ea70:	6820      	ldr	r0, [r4, #0]
 800ea72:	1821      	adds	r1, r4, r0
 800ea74:	428a      	cmp	r2, r1
 800ea76:	bf04      	itt	eq
 800ea78:	6811      	ldreq	r1, [r2, #0]
 800ea7a:	6852      	ldreq	r2, [r2, #4]
 800ea7c:	6062      	str	r2, [r4, #4]
 800ea7e:	bf04      	itt	eq
 800ea80:	1809      	addeq	r1, r1, r0
 800ea82:	6021      	streq	r1, [r4, #0]
 800ea84:	605c      	str	r4, [r3, #4]
 800ea86:	e7c7      	b.n	800ea18 <_free_r+0x24>
 800ea88:	bd38      	pop	{r3, r4, r5, pc}
 800ea8a:	bf00      	nop
 800ea8c:	20004358 	.word	0x20004358

0800ea90 <_malloc_r>:
 800ea90:	b570      	push	{r4, r5, r6, lr}
 800ea92:	1ccd      	adds	r5, r1, #3
 800ea94:	f025 0503 	bic.w	r5, r5, #3
 800ea98:	3508      	adds	r5, #8
 800ea9a:	2d0c      	cmp	r5, #12
 800ea9c:	bf38      	it	cc
 800ea9e:	250c      	movcc	r5, #12
 800eaa0:	2d00      	cmp	r5, #0
 800eaa2:	4606      	mov	r6, r0
 800eaa4:	db01      	blt.n	800eaaa <_malloc_r+0x1a>
 800eaa6:	42a9      	cmp	r1, r5
 800eaa8:	d903      	bls.n	800eab2 <_malloc_r+0x22>
 800eaaa:	230c      	movs	r3, #12
 800eaac:	6033      	str	r3, [r6, #0]
 800eaae:	2000      	movs	r0, #0
 800eab0:	bd70      	pop	{r4, r5, r6, pc}
 800eab2:	f001 ffac 	bl	8010a0e <__malloc_lock>
 800eab6:	4a21      	ldr	r2, [pc, #132]	; (800eb3c <_malloc_r+0xac>)
 800eab8:	6814      	ldr	r4, [r2, #0]
 800eaba:	4621      	mov	r1, r4
 800eabc:	b991      	cbnz	r1, 800eae4 <_malloc_r+0x54>
 800eabe:	4c20      	ldr	r4, [pc, #128]	; (800eb40 <_malloc_r+0xb0>)
 800eac0:	6823      	ldr	r3, [r4, #0]
 800eac2:	b91b      	cbnz	r3, 800eacc <_malloc_r+0x3c>
 800eac4:	4630      	mov	r0, r6
 800eac6:	f000 fde9 	bl	800f69c <_sbrk_r>
 800eaca:	6020      	str	r0, [r4, #0]
 800eacc:	4629      	mov	r1, r5
 800eace:	4630      	mov	r0, r6
 800ead0:	f000 fde4 	bl	800f69c <_sbrk_r>
 800ead4:	1c43      	adds	r3, r0, #1
 800ead6:	d124      	bne.n	800eb22 <_malloc_r+0x92>
 800ead8:	230c      	movs	r3, #12
 800eada:	6033      	str	r3, [r6, #0]
 800eadc:	4630      	mov	r0, r6
 800eade:	f001 ff97 	bl	8010a10 <__malloc_unlock>
 800eae2:	e7e4      	b.n	800eaae <_malloc_r+0x1e>
 800eae4:	680b      	ldr	r3, [r1, #0]
 800eae6:	1b5b      	subs	r3, r3, r5
 800eae8:	d418      	bmi.n	800eb1c <_malloc_r+0x8c>
 800eaea:	2b0b      	cmp	r3, #11
 800eaec:	d90f      	bls.n	800eb0e <_malloc_r+0x7e>
 800eaee:	600b      	str	r3, [r1, #0]
 800eaf0:	50cd      	str	r5, [r1, r3]
 800eaf2:	18cc      	adds	r4, r1, r3
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f001 ff8b 	bl	8010a10 <__malloc_unlock>
 800eafa:	f104 000b 	add.w	r0, r4, #11
 800eafe:	1d23      	adds	r3, r4, #4
 800eb00:	f020 0007 	bic.w	r0, r0, #7
 800eb04:	1ac3      	subs	r3, r0, r3
 800eb06:	d0d3      	beq.n	800eab0 <_malloc_r+0x20>
 800eb08:	425a      	negs	r2, r3
 800eb0a:	50e2      	str	r2, [r4, r3]
 800eb0c:	e7d0      	b.n	800eab0 <_malloc_r+0x20>
 800eb0e:	428c      	cmp	r4, r1
 800eb10:	684b      	ldr	r3, [r1, #4]
 800eb12:	bf16      	itet	ne
 800eb14:	6063      	strne	r3, [r4, #4]
 800eb16:	6013      	streq	r3, [r2, #0]
 800eb18:	460c      	movne	r4, r1
 800eb1a:	e7eb      	b.n	800eaf4 <_malloc_r+0x64>
 800eb1c:	460c      	mov	r4, r1
 800eb1e:	6849      	ldr	r1, [r1, #4]
 800eb20:	e7cc      	b.n	800eabc <_malloc_r+0x2c>
 800eb22:	1cc4      	adds	r4, r0, #3
 800eb24:	f024 0403 	bic.w	r4, r4, #3
 800eb28:	42a0      	cmp	r0, r4
 800eb2a:	d005      	beq.n	800eb38 <_malloc_r+0xa8>
 800eb2c:	1a21      	subs	r1, r4, r0
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f000 fdb4 	bl	800f69c <_sbrk_r>
 800eb34:	3001      	adds	r0, #1
 800eb36:	d0cf      	beq.n	800ead8 <_malloc_r+0x48>
 800eb38:	6025      	str	r5, [r4, #0]
 800eb3a:	e7db      	b.n	800eaf4 <_malloc_r+0x64>
 800eb3c:	20004358 	.word	0x20004358
 800eb40:	2000435c 	.word	0x2000435c

0800eb44 <__sfputc_r>:
 800eb44:	6893      	ldr	r3, [r2, #8]
 800eb46:	3b01      	subs	r3, #1
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	b410      	push	{r4}
 800eb4c:	6093      	str	r3, [r2, #8]
 800eb4e:	da08      	bge.n	800eb62 <__sfputc_r+0x1e>
 800eb50:	6994      	ldr	r4, [r2, #24]
 800eb52:	42a3      	cmp	r3, r4
 800eb54:	db01      	blt.n	800eb5a <__sfputc_r+0x16>
 800eb56:	290a      	cmp	r1, #10
 800eb58:	d103      	bne.n	800eb62 <__sfputc_r+0x1e>
 800eb5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb5e:	f000 be11 	b.w	800f784 <__swbuf_r>
 800eb62:	6813      	ldr	r3, [r2, #0]
 800eb64:	1c58      	adds	r0, r3, #1
 800eb66:	6010      	str	r0, [r2, #0]
 800eb68:	7019      	strb	r1, [r3, #0]
 800eb6a:	4608      	mov	r0, r1
 800eb6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <__sfputs_r>:
 800eb72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb74:	4606      	mov	r6, r0
 800eb76:	460f      	mov	r7, r1
 800eb78:	4614      	mov	r4, r2
 800eb7a:	18d5      	adds	r5, r2, r3
 800eb7c:	42ac      	cmp	r4, r5
 800eb7e:	d101      	bne.n	800eb84 <__sfputs_r+0x12>
 800eb80:	2000      	movs	r0, #0
 800eb82:	e007      	b.n	800eb94 <__sfputs_r+0x22>
 800eb84:	463a      	mov	r2, r7
 800eb86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb8a:	4630      	mov	r0, r6
 800eb8c:	f7ff ffda 	bl	800eb44 <__sfputc_r>
 800eb90:	1c43      	adds	r3, r0, #1
 800eb92:	d1f3      	bne.n	800eb7c <__sfputs_r+0xa>
 800eb94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb98 <_vfiprintf_r>:
 800eb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb9c:	460c      	mov	r4, r1
 800eb9e:	b09d      	sub	sp, #116	; 0x74
 800eba0:	4617      	mov	r7, r2
 800eba2:	461d      	mov	r5, r3
 800eba4:	4606      	mov	r6, r0
 800eba6:	b118      	cbz	r0, 800ebb0 <_vfiprintf_r+0x18>
 800eba8:	6983      	ldr	r3, [r0, #24]
 800ebaa:	b90b      	cbnz	r3, 800ebb0 <_vfiprintf_r+0x18>
 800ebac:	f001 fe08 	bl	80107c0 <__sinit>
 800ebb0:	4b7c      	ldr	r3, [pc, #496]	; (800eda4 <_vfiprintf_r+0x20c>)
 800ebb2:	429c      	cmp	r4, r3
 800ebb4:	d158      	bne.n	800ec68 <_vfiprintf_r+0xd0>
 800ebb6:	6874      	ldr	r4, [r6, #4]
 800ebb8:	89a3      	ldrh	r3, [r4, #12]
 800ebba:	0718      	lsls	r0, r3, #28
 800ebbc:	d55e      	bpl.n	800ec7c <_vfiprintf_r+0xe4>
 800ebbe:	6923      	ldr	r3, [r4, #16]
 800ebc0:	2b00      	cmp	r3, #0
 800ebc2:	d05b      	beq.n	800ec7c <_vfiprintf_r+0xe4>
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebc8:	2320      	movs	r3, #32
 800ebca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebce:	2330      	movs	r3, #48	; 0x30
 800ebd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebd4:	9503      	str	r5, [sp, #12]
 800ebd6:	f04f 0b01 	mov.w	fp, #1
 800ebda:	46b8      	mov	r8, r7
 800ebdc:	4645      	mov	r5, r8
 800ebde:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ebe2:	b10b      	cbz	r3, 800ebe8 <_vfiprintf_r+0x50>
 800ebe4:	2b25      	cmp	r3, #37	; 0x25
 800ebe6:	d154      	bne.n	800ec92 <_vfiprintf_r+0xfa>
 800ebe8:	ebb8 0a07 	subs.w	sl, r8, r7
 800ebec:	d00b      	beq.n	800ec06 <_vfiprintf_r+0x6e>
 800ebee:	4653      	mov	r3, sl
 800ebf0:	463a      	mov	r2, r7
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4630      	mov	r0, r6
 800ebf6:	f7ff ffbc 	bl	800eb72 <__sfputs_r>
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	f000 80c2 	beq.w	800ed84 <_vfiprintf_r+0x1ec>
 800ec00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec02:	4453      	add	r3, sl
 800ec04:	9309      	str	r3, [sp, #36]	; 0x24
 800ec06:	f898 3000 	ldrb.w	r3, [r8]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	f000 80ba 	beq.w	800ed84 <_vfiprintf_r+0x1ec>
 800ec10:	2300      	movs	r3, #0
 800ec12:	f04f 32ff 	mov.w	r2, #4294967295
 800ec16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	9307      	str	r3, [sp, #28]
 800ec1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec22:	931a      	str	r3, [sp, #104]	; 0x68
 800ec24:	46a8      	mov	r8, r5
 800ec26:	2205      	movs	r2, #5
 800ec28:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ec2c:	485e      	ldr	r0, [pc, #376]	; (800eda8 <_vfiprintf_r+0x210>)
 800ec2e:	f7f1 faf7 	bl	8000220 <memchr>
 800ec32:	9b04      	ldr	r3, [sp, #16]
 800ec34:	bb78      	cbnz	r0, 800ec96 <_vfiprintf_r+0xfe>
 800ec36:	06d9      	lsls	r1, r3, #27
 800ec38:	bf44      	itt	mi
 800ec3a:	2220      	movmi	r2, #32
 800ec3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ec40:	071a      	lsls	r2, r3, #28
 800ec42:	bf44      	itt	mi
 800ec44:	222b      	movmi	r2, #43	; 0x2b
 800ec46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ec4a:	782a      	ldrb	r2, [r5, #0]
 800ec4c:	2a2a      	cmp	r2, #42	; 0x2a
 800ec4e:	d02a      	beq.n	800eca6 <_vfiprintf_r+0x10e>
 800ec50:	9a07      	ldr	r2, [sp, #28]
 800ec52:	46a8      	mov	r8, r5
 800ec54:	2000      	movs	r0, #0
 800ec56:	250a      	movs	r5, #10
 800ec58:	4641      	mov	r1, r8
 800ec5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec5e:	3b30      	subs	r3, #48	; 0x30
 800ec60:	2b09      	cmp	r3, #9
 800ec62:	d969      	bls.n	800ed38 <_vfiprintf_r+0x1a0>
 800ec64:	b360      	cbz	r0, 800ecc0 <_vfiprintf_r+0x128>
 800ec66:	e024      	b.n	800ecb2 <_vfiprintf_r+0x11a>
 800ec68:	4b50      	ldr	r3, [pc, #320]	; (800edac <_vfiprintf_r+0x214>)
 800ec6a:	429c      	cmp	r4, r3
 800ec6c:	d101      	bne.n	800ec72 <_vfiprintf_r+0xda>
 800ec6e:	68b4      	ldr	r4, [r6, #8]
 800ec70:	e7a2      	b.n	800ebb8 <_vfiprintf_r+0x20>
 800ec72:	4b4f      	ldr	r3, [pc, #316]	; (800edb0 <_vfiprintf_r+0x218>)
 800ec74:	429c      	cmp	r4, r3
 800ec76:	bf08      	it	eq
 800ec78:	68f4      	ldreq	r4, [r6, #12]
 800ec7a:	e79d      	b.n	800ebb8 <_vfiprintf_r+0x20>
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	4630      	mov	r0, r6
 800ec80:	f000 fde4 	bl	800f84c <__swsetup_r>
 800ec84:	2800      	cmp	r0, #0
 800ec86:	d09d      	beq.n	800ebc4 <_vfiprintf_r+0x2c>
 800ec88:	f04f 30ff 	mov.w	r0, #4294967295
 800ec8c:	b01d      	add	sp, #116	; 0x74
 800ec8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec92:	46a8      	mov	r8, r5
 800ec94:	e7a2      	b.n	800ebdc <_vfiprintf_r+0x44>
 800ec96:	4a44      	ldr	r2, [pc, #272]	; (800eda8 <_vfiprintf_r+0x210>)
 800ec98:	1a80      	subs	r0, r0, r2
 800ec9a:	fa0b f000 	lsl.w	r0, fp, r0
 800ec9e:	4318      	orrs	r0, r3
 800eca0:	9004      	str	r0, [sp, #16]
 800eca2:	4645      	mov	r5, r8
 800eca4:	e7be      	b.n	800ec24 <_vfiprintf_r+0x8c>
 800eca6:	9a03      	ldr	r2, [sp, #12]
 800eca8:	1d11      	adds	r1, r2, #4
 800ecaa:	6812      	ldr	r2, [r2, #0]
 800ecac:	9103      	str	r1, [sp, #12]
 800ecae:	2a00      	cmp	r2, #0
 800ecb0:	db01      	blt.n	800ecb6 <_vfiprintf_r+0x11e>
 800ecb2:	9207      	str	r2, [sp, #28]
 800ecb4:	e004      	b.n	800ecc0 <_vfiprintf_r+0x128>
 800ecb6:	4252      	negs	r2, r2
 800ecb8:	f043 0302 	orr.w	r3, r3, #2
 800ecbc:	9207      	str	r2, [sp, #28]
 800ecbe:	9304      	str	r3, [sp, #16]
 800ecc0:	f898 3000 	ldrb.w	r3, [r8]
 800ecc4:	2b2e      	cmp	r3, #46	; 0x2e
 800ecc6:	d10e      	bne.n	800ece6 <_vfiprintf_r+0x14e>
 800ecc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800eccc:	2b2a      	cmp	r3, #42	; 0x2a
 800ecce:	d138      	bne.n	800ed42 <_vfiprintf_r+0x1aa>
 800ecd0:	9b03      	ldr	r3, [sp, #12]
 800ecd2:	1d1a      	adds	r2, r3, #4
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	9203      	str	r2, [sp, #12]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	bfb8      	it	lt
 800ecdc:	f04f 33ff 	movlt.w	r3, #4294967295
 800ece0:	f108 0802 	add.w	r8, r8, #2
 800ece4:	9305      	str	r3, [sp, #20]
 800ece6:	4d33      	ldr	r5, [pc, #204]	; (800edb4 <_vfiprintf_r+0x21c>)
 800ece8:	f898 1000 	ldrb.w	r1, [r8]
 800ecec:	2203      	movs	r2, #3
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f7f1 fa96 	bl	8000220 <memchr>
 800ecf4:	b140      	cbz	r0, 800ed08 <_vfiprintf_r+0x170>
 800ecf6:	2340      	movs	r3, #64	; 0x40
 800ecf8:	1b40      	subs	r0, r0, r5
 800ecfa:	fa03 f000 	lsl.w	r0, r3, r0
 800ecfe:	9b04      	ldr	r3, [sp, #16]
 800ed00:	4303      	orrs	r3, r0
 800ed02:	f108 0801 	add.w	r8, r8, #1
 800ed06:	9304      	str	r3, [sp, #16]
 800ed08:	f898 1000 	ldrb.w	r1, [r8]
 800ed0c:	482a      	ldr	r0, [pc, #168]	; (800edb8 <_vfiprintf_r+0x220>)
 800ed0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed12:	2206      	movs	r2, #6
 800ed14:	f108 0701 	add.w	r7, r8, #1
 800ed18:	f7f1 fa82 	bl	8000220 <memchr>
 800ed1c:	2800      	cmp	r0, #0
 800ed1e:	d037      	beq.n	800ed90 <_vfiprintf_r+0x1f8>
 800ed20:	4b26      	ldr	r3, [pc, #152]	; (800edbc <_vfiprintf_r+0x224>)
 800ed22:	bb1b      	cbnz	r3, 800ed6c <_vfiprintf_r+0x1d4>
 800ed24:	9b03      	ldr	r3, [sp, #12]
 800ed26:	3307      	adds	r3, #7
 800ed28:	f023 0307 	bic.w	r3, r3, #7
 800ed2c:	3308      	adds	r3, #8
 800ed2e:	9303      	str	r3, [sp, #12]
 800ed30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed32:	444b      	add	r3, r9
 800ed34:	9309      	str	r3, [sp, #36]	; 0x24
 800ed36:	e750      	b.n	800ebda <_vfiprintf_r+0x42>
 800ed38:	fb05 3202 	mla	r2, r5, r2, r3
 800ed3c:	2001      	movs	r0, #1
 800ed3e:	4688      	mov	r8, r1
 800ed40:	e78a      	b.n	800ec58 <_vfiprintf_r+0xc0>
 800ed42:	2300      	movs	r3, #0
 800ed44:	f108 0801 	add.w	r8, r8, #1
 800ed48:	9305      	str	r3, [sp, #20]
 800ed4a:	4619      	mov	r1, r3
 800ed4c:	250a      	movs	r5, #10
 800ed4e:	4640      	mov	r0, r8
 800ed50:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed54:	3a30      	subs	r2, #48	; 0x30
 800ed56:	2a09      	cmp	r2, #9
 800ed58:	d903      	bls.n	800ed62 <_vfiprintf_r+0x1ca>
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d0c3      	beq.n	800ece6 <_vfiprintf_r+0x14e>
 800ed5e:	9105      	str	r1, [sp, #20]
 800ed60:	e7c1      	b.n	800ece6 <_vfiprintf_r+0x14e>
 800ed62:	fb05 2101 	mla	r1, r5, r1, r2
 800ed66:	2301      	movs	r3, #1
 800ed68:	4680      	mov	r8, r0
 800ed6a:	e7f0      	b.n	800ed4e <_vfiprintf_r+0x1b6>
 800ed6c:	ab03      	add	r3, sp, #12
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	4622      	mov	r2, r4
 800ed72:	4b13      	ldr	r3, [pc, #76]	; (800edc0 <_vfiprintf_r+0x228>)
 800ed74:	a904      	add	r1, sp, #16
 800ed76:	4630      	mov	r0, r6
 800ed78:	f000 f8b8 	bl	800eeec <_printf_float>
 800ed7c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ed80:	4681      	mov	r9, r0
 800ed82:	d1d5      	bne.n	800ed30 <_vfiprintf_r+0x198>
 800ed84:	89a3      	ldrh	r3, [r4, #12]
 800ed86:	065b      	lsls	r3, r3, #25
 800ed88:	f53f af7e 	bmi.w	800ec88 <_vfiprintf_r+0xf0>
 800ed8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed8e:	e77d      	b.n	800ec8c <_vfiprintf_r+0xf4>
 800ed90:	ab03      	add	r3, sp, #12
 800ed92:	9300      	str	r3, [sp, #0]
 800ed94:	4622      	mov	r2, r4
 800ed96:	4b0a      	ldr	r3, [pc, #40]	; (800edc0 <_vfiprintf_r+0x228>)
 800ed98:	a904      	add	r1, sp, #16
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f000 fb5c 	bl	800f458 <_printf_i>
 800eda0:	e7ec      	b.n	800ed7c <_vfiprintf_r+0x1e4>
 800eda2:	bf00      	nop
 800eda4:	080137cc 	.word	0x080137cc
 800eda8:	08013758 	.word	0x08013758
 800edac:	080137ec 	.word	0x080137ec
 800edb0:	080137ac 	.word	0x080137ac
 800edb4:	0801375e 	.word	0x0801375e
 800edb8:	08013762 	.word	0x08013762
 800edbc:	0800eeed 	.word	0x0800eeed
 800edc0:	0800eb73 	.word	0x0800eb73

0800edc4 <__cvt>:
 800edc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800edc8:	ec55 4b10 	vmov	r4, r5, d0
 800edcc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800edce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800edd2:	2d00      	cmp	r5, #0
 800edd4:	460e      	mov	r6, r1
 800edd6:	4691      	mov	r9, r2
 800edd8:	4619      	mov	r1, r3
 800edda:	bfb8      	it	lt
 800eddc:	4622      	movlt	r2, r4
 800edde:	462b      	mov	r3, r5
 800ede0:	f027 0720 	bic.w	r7, r7, #32
 800ede4:	bfbb      	ittet	lt
 800ede6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800edea:	461d      	movlt	r5, r3
 800edec:	2300      	movge	r3, #0
 800edee:	232d      	movlt	r3, #45	; 0x2d
 800edf0:	bfb8      	it	lt
 800edf2:	4614      	movlt	r4, r2
 800edf4:	2f46      	cmp	r7, #70	; 0x46
 800edf6:	700b      	strb	r3, [r1, #0]
 800edf8:	d004      	beq.n	800ee04 <__cvt+0x40>
 800edfa:	2f45      	cmp	r7, #69	; 0x45
 800edfc:	d100      	bne.n	800ee00 <__cvt+0x3c>
 800edfe:	3601      	adds	r6, #1
 800ee00:	2102      	movs	r1, #2
 800ee02:	e000      	b.n	800ee06 <__cvt+0x42>
 800ee04:	2103      	movs	r1, #3
 800ee06:	ab03      	add	r3, sp, #12
 800ee08:	9301      	str	r3, [sp, #4]
 800ee0a:	ab02      	add	r3, sp, #8
 800ee0c:	9300      	str	r3, [sp, #0]
 800ee0e:	4632      	mov	r2, r6
 800ee10:	4653      	mov	r3, sl
 800ee12:	ec45 4b10 	vmov	d0, r4, r5
 800ee16:	f000 fe2b 	bl	800fa70 <_dtoa_r>
 800ee1a:	2f47      	cmp	r7, #71	; 0x47
 800ee1c:	4680      	mov	r8, r0
 800ee1e:	d102      	bne.n	800ee26 <__cvt+0x62>
 800ee20:	f019 0f01 	tst.w	r9, #1
 800ee24:	d026      	beq.n	800ee74 <__cvt+0xb0>
 800ee26:	2f46      	cmp	r7, #70	; 0x46
 800ee28:	eb08 0906 	add.w	r9, r8, r6
 800ee2c:	d111      	bne.n	800ee52 <__cvt+0x8e>
 800ee2e:	f898 3000 	ldrb.w	r3, [r8]
 800ee32:	2b30      	cmp	r3, #48	; 0x30
 800ee34:	d10a      	bne.n	800ee4c <__cvt+0x88>
 800ee36:	2200      	movs	r2, #0
 800ee38:	2300      	movs	r3, #0
 800ee3a:	4620      	mov	r0, r4
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	f7f1 fe63 	bl	8000b08 <__aeabi_dcmpeq>
 800ee42:	b918      	cbnz	r0, 800ee4c <__cvt+0x88>
 800ee44:	f1c6 0601 	rsb	r6, r6, #1
 800ee48:	f8ca 6000 	str.w	r6, [sl]
 800ee4c:	f8da 3000 	ldr.w	r3, [sl]
 800ee50:	4499      	add	r9, r3
 800ee52:	2200      	movs	r2, #0
 800ee54:	2300      	movs	r3, #0
 800ee56:	4620      	mov	r0, r4
 800ee58:	4629      	mov	r1, r5
 800ee5a:	f7f1 fe55 	bl	8000b08 <__aeabi_dcmpeq>
 800ee5e:	b938      	cbnz	r0, 800ee70 <__cvt+0xac>
 800ee60:	2230      	movs	r2, #48	; 0x30
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	454b      	cmp	r3, r9
 800ee66:	d205      	bcs.n	800ee74 <__cvt+0xb0>
 800ee68:	1c59      	adds	r1, r3, #1
 800ee6a:	9103      	str	r1, [sp, #12]
 800ee6c:	701a      	strb	r2, [r3, #0]
 800ee6e:	e7f8      	b.n	800ee62 <__cvt+0x9e>
 800ee70:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee74:	9b03      	ldr	r3, [sp, #12]
 800ee76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ee78:	eba3 0308 	sub.w	r3, r3, r8
 800ee7c:	4640      	mov	r0, r8
 800ee7e:	6013      	str	r3, [r2, #0]
 800ee80:	b004      	add	sp, #16
 800ee82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ee86 <__exponent>:
 800ee86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee88:	2900      	cmp	r1, #0
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	bfba      	itte	lt
 800ee8e:	4249      	neglt	r1, r1
 800ee90:	232d      	movlt	r3, #45	; 0x2d
 800ee92:	232b      	movge	r3, #43	; 0x2b
 800ee94:	2909      	cmp	r1, #9
 800ee96:	f804 2b02 	strb.w	r2, [r4], #2
 800ee9a:	7043      	strb	r3, [r0, #1]
 800ee9c:	dd20      	ble.n	800eee0 <__exponent+0x5a>
 800ee9e:	f10d 0307 	add.w	r3, sp, #7
 800eea2:	461f      	mov	r7, r3
 800eea4:	260a      	movs	r6, #10
 800eea6:	fb91 f5f6 	sdiv	r5, r1, r6
 800eeaa:	fb06 1115 	mls	r1, r6, r5, r1
 800eeae:	3130      	adds	r1, #48	; 0x30
 800eeb0:	2d09      	cmp	r5, #9
 800eeb2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eeb6:	f103 32ff 	add.w	r2, r3, #4294967295
 800eeba:	4629      	mov	r1, r5
 800eebc:	dc09      	bgt.n	800eed2 <__exponent+0x4c>
 800eebe:	3130      	adds	r1, #48	; 0x30
 800eec0:	3b02      	subs	r3, #2
 800eec2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800eec6:	42bb      	cmp	r3, r7
 800eec8:	4622      	mov	r2, r4
 800eeca:	d304      	bcc.n	800eed6 <__exponent+0x50>
 800eecc:	1a10      	subs	r0, r2, r0
 800eece:	b003      	add	sp, #12
 800eed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eed2:	4613      	mov	r3, r2
 800eed4:	e7e7      	b.n	800eea6 <__exponent+0x20>
 800eed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eeda:	f804 2b01 	strb.w	r2, [r4], #1
 800eede:	e7f2      	b.n	800eec6 <__exponent+0x40>
 800eee0:	2330      	movs	r3, #48	; 0x30
 800eee2:	4419      	add	r1, r3
 800eee4:	7083      	strb	r3, [r0, #2]
 800eee6:	1d02      	adds	r2, r0, #4
 800eee8:	70c1      	strb	r1, [r0, #3]
 800eeea:	e7ef      	b.n	800eecc <__exponent+0x46>

0800eeec <_printf_float>:
 800eeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef0:	b08d      	sub	sp, #52	; 0x34
 800eef2:	460c      	mov	r4, r1
 800eef4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800eef8:	4616      	mov	r6, r2
 800eefa:	461f      	mov	r7, r3
 800eefc:	4605      	mov	r5, r0
 800eefe:	f001 fce9 	bl	80108d4 <_localeconv_r>
 800ef02:	6803      	ldr	r3, [r0, #0]
 800ef04:	9304      	str	r3, [sp, #16]
 800ef06:	4618      	mov	r0, r3
 800ef08:	f7f1 f982 	bl	8000210 <strlen>
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	930a      	str	r3, [sp, #40]	; 0x28
 800ef10:	f8d8 3000 	ldr.w	r3, [r8]
 800ef14:	9005      	str	r0, [sp, #20]
 800ef16:	3307      	adds	r3, #7
 800ef18:	f023 0307 	bic.w	r3, r3, #7
 800ef1c:	f103 0208 	add.w	r2, r3, #8
 800ef20:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ef24:	f8d4 b000 	ldr.w	fp, [r4]
 800ef28:	f8c8 2000 	str.w	r2, [r8]
 800ef2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ef34:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ef38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ef3c:	9307      	str	r3, [sp, #28]
 800ef3e:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef42:	f04f 32ff 	mov.w	r2, #4294967295
 800ef46:	4ba7      	ldr	r3, [pc, #668]	; (800f1e4 <_printf_float+0x2f8>)
 800ef48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef4c:	f7f1 fe0e 	bl	8000b6c <__aeabi_dcmpun>
 800ef50:	bb70      	cbnz	r0, 800efb0 <_printf_float+0xc4>
 800ef52:	f04f 32ff 	mov.w	r2, #4294967295
 800ef56:	4ba3      	ldr	r3, [pc, #652]	; (800f1e4 <_printf_float+0x2f8>)
 800ef58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef5c:	f7f1 fde8 	bl	8000b30 <__aeabi_dcmple>
 800ef60:	bb30      	cbnz	r0, 800efb0 <_printf_float+0xc4>
 800ef62:	2200      	movs	r2, #0
 800ef64:	2300      	movs	r3, #0
 800ef66:	4640      	mov	r0, r8
 800ef68:	4649      	mov	r1, r9
 800ef6a:	f7f1 fdd7 	bl	8000b1c <__aeabi_dcmplt>
 800ef6e:	b110      	cbz	r0, 800ef76 <_printf_float+0x8a>
 800ef70:	232d      	movs	r3, #45	; 0x2d
 800ef72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef76:	4a9c      	ldr	r2, [pc, #624]	; (800f1e8 <_printf_float+0x2fc>)
 800ef78:	4b9c      	ldr	r3, [pc, #624]	; (800f1ec <_printf_float+0x300>)
 800ef7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800ef7e:	bf8c      	ite	hi
 800ef80:	4690      	movhi	r8, r2
 800ef82:	4698      	movls	r8, r3
 800ef84:	2303      	movs	r3, #3
 800ef86:	f02b 0204 	bic.w	r2, fp, #4
 800ef8a:	6123      	str	r3, [r4, #16]
 800ef8c:	6022      	str	r2, [r4, #0]
 800ef8e:	f04f 0900 	mov.w	r9, #0
 800ef92:	9700      	str	r7, [sp, #0]
 800ef94:	4633      	mov	r3, r6
 800ef96:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef98:	4621      	mov	r1, r4
 800ef9a:	4628      	mov	r0, r5
 800ef9c:	f000 f9e6 	bl	800f36c <_printf_common>
 800efa0:	3001      	adds	r0, #1
 800efa2:	f040 808d 	bne.w	800f0c0 <_printf_float+0x1d4>
 800efa6:	f04f 30ff 	mov.w	r0, #4294967295
 800efaa:	b00d      	add	sp, #52	; 0x34
 800efac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb0:	4642      	mov	r2, r8
 800efb2:	464b      	mov	r3, r9
 800efb4:	4640      	mov	r0, r8
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 fdd8 	bl	8000b6c <__aeabi_dcmpun>
 800efbc:	b110      	cbz	r0, 800efc4 <_printf_float+0xd8>
 800efbe:	4a8c      	ldr	r2, [pc, #560]	; (800f1f0 <_printf_float+0x304>)
 800efc0:	4b8c      	ldr	r3, [pc, #560]	; (800f1f4 <_printf_float+0x308>)
 800efc2:	e7da      	b.n	800ef7a <_printf_float+0x8e>
 800efc4:	6861      	ldr	r1, [r4, #4]
 800efc6:	1c4b      	adds	r3, r1, #1
 800efc8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800efcc:	a80a      	add	r0, sp, #40	; 0x28
 800efce:	d13e      	bne.n	800f04e <_printf_float+0x162>
 800efd0:	2306      	movs	r3, #6
 800efd2:	6063      	str	r3, [r4, #4]
 800efd4:	2300      	movs	r3, #0
 800efd6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800efda:	ab09      	add	r3, sp, #36	; 0x24
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	ec49 8b10 	vmov	d0, r8, r9
 800efe2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800efe6:	6022      	str	r2, [r4, #0]
 800efe8:	f8cd a004 	str.w	sl, [sp, #4]
 800efec:	6861      	ldr	r1, [r4, #4]
 800efee:	4628      	mov	r0, r5
 800eff0:	f7ff fee8 	bl	800edc4 <__cvt>
 800eff4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800eff8:	2b47      	cmp	r3, #71	; 0x47
 800effa:	4680      	mov	r8, r0
 800effc:	d109      	bne.n	800f012 <_printf_float+0x126>
 800effe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f000:	1cd8      	adds	r0, r3, #3
 800f002:	db02      	blt.n	800f00a <_printf_float+0x11e>
 800f004:	6862      	ldr	r2, [r4, #4]
 800f006:	4293      	cmp	r3, r2
 800f008:	dd47      	ble.n	800f09a <_printf_float+0x1ae>
 800f00a:	f1aa 0a02 	sub.w	sl, sl, #2
 800f00e:	fa5f fa8a 	uxtb.w	sl, sl
 800f012:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f016:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f018:	d824      	bhi.n	800f064 <_printf_float+0x178>
 800f01a:	3901      	subs	r1, #1
 800f01c:	4652      	mov	r2, sl
 800f01e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f022:	9109      	str	r1, [sp, #36]	; 0x24
 800f024:	f7ff ff2f 	bl	800ee86 <__exponent>
 800f028:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f02a:	1813      	adds	r3, r2, r0
 800f02c:	2a01      	cmp	r2, #1
 800f02e:	4681      	mov	r9, r0
 800f030:	6123      	str	r3, [r4, #16]
 800f032:	dc02      	bgt.n	800f03a <_printf_float+0x14e>
 800f034:	6822      	ldr	r2, [r4, #0]
 800f036:	07d1      	lsls	r1, r2, #31
 800f038:	d501      	bpl.n	800f03e <_printf_float+0x152>
 800f03a:	3301      	adds	r3, #1
 800f03c:	6123      	str	r3, [r4, #16]
 800f03e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f042:	2b00      	cmp	r3, #0
 800f044:	d0a5      	beq.n	800ef92 <_printf_float+0xa6>
 800f046:	232d      	movs	r3, #45	; 0x2d
 800f048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f04c:	e7a1      	b.n	800ef92 <_printf_float+0xa6>
 800f04e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800f052:	f000 8177 	beq.w	800f344 <_printf_float+0x458>
 800f056:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800f05a:	d1bb      	bne.n	800efd4 <_printf_float+0xe8>
 800f05c:	2900      	cmp	r1, #0
 800f05e:	d1b9      	bne.n	800efd4 <_printf_float+0xe8>
 800f060:	2301      	movs	r3, #1
 800f062:	e7b6      	b.n	800efd2 <_printf_float+0xe6>
 800f064:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800f068:	d119      	bne.n	800f09e <_printf_float+0x1b2>
 800f06a:	2900      	cmp	r1, #0
 800f06c:	6863      	ldr	r3, [r4, #4]
 800f06e:	dd0c      	ble.n	800f08a <_printf_float+0x19e>
 800f070:	6121      	str	r1, [r4, #16]
 800f072:	b913      	cbnz	r3, 800f07a <_printf_float+0x18e>
 800f074:	6822      	ldr	r2, [r4, #0]
 800f076:	07d2      	lsls	r2, r2, #31
 800f078:	d502      	bpl.n	800f080 <_printf_float+0x194>
 800f07a:	3301      	adds	r3, #1
 800f07c:	440b      	add	r3, r1
 800f07e:	6123      	str	r3, [r4, #16]
 800f080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f082:	65a3      	str	r3, [r4, #88]	; 0x58
 800f084:	f04f 0900 	mov.w	r9, #0
 800f088:	e7d9      	b.n	800f03e <_printf_float+0x152>
 800f08a:	b913      	cbnz	r3, 800f092 <_printf_float+0x1a6>
 800f08c:	6822      	ldr	r2, [r4, #0]
 800f08e:	07d0      	lsls	r0, r2, #31
 800f090:	d501      	bpl.n	800f096 <_printf_float+0x1aa>
 800f092:	3302      	adds	r3, #2
 800f094:	e7f3      	b.n	800f07e <_printf_float+0x192>
 800f096:	2301      	movs	r3, #1
 800f098:	e7f1      	b.n	800f07e <_printf_float+0x192>
 800f09a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800f09e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f0a2:	4293      	cmp	r3, r2
 800f0a4:	db05      	blt.n	800f0b2 <_printf_float+0x1c6>
 800f0a6:	6822      	ldr	r2, [r4, #0]
 800f0a8:	6123      	str	r3, [r4, #16]
 800f0aa:	07d1      	lsls	r1, r2, #31
 800f0ac:	d5e8      	bpl.n	800f080 <_printf_float+0x194>
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	e7e5      	b.n	800f07e <_printf_float+0x192>
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	bfd4      	ite	le
 800f0b6:	f1c3 0302 	rsble	r3, r3, #2
 800f0ba:	2301      	movgt	r3, #1
 800f0bc:	4413      	add	r3, r2
 800f0be:	e7de      	b.n	800f07e <_printf_float+0x192>
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	055a      	lsls	r2, r3, #21
 800f0c4:	d407      	bmi.n	800f0d6 <_printf_float+0x1ea>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	4642      	mov	r2, r8
 800f0ca:	4631      	mov	r1, r6
 800f0cc:	4628      	mov	r0, r5
 800f0ce:	47b8      	blx	r7
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	d12b      	bne.n	800f12c <_printf_float+0x240>
 800f0d4:	e767      	b.n	800efa6 <_printf_float+0xba>
 800f0d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800f0da:	f240 80dc 	bls.w	800f296 <_printf_float+0x3aa>
 800f0de:	2200      	movs	r2, #0
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f0e6:	f7f1 fd0f 	bl	8000b08 <__aeabi_dcmpeq>
 800f0ea:	2800      	cmp	r0, #0
 800f0ec:	d033      	beq.n	800f156 <_printf_float+0x26a>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	4a41      	ldr	r2, [pc, #260]	; (800f1f8 <_printf_float+0x30c>)
 800f0f2:	4631      	mov	r1, r6
 800f0f4:	4628      	mov	r0, r5
 800f0f6:	47b8      	blx	r7
 800f0f8:	3001      	adds	r0, #1
 800f0fa:	f43f af54 	beq.w	800efa6 <_printf_float+0xba>
 800f0fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f102:	429a      	cmp	r2, r3
 800f104:	db02      	blt.n	800f10c <_printf_float+0x220>
 800f106:	6823      	ldr	r3, [r4, #0]
 800f108:	07d8      	lsls	r0, r3, #31
 800f10a:	d50f      	bpl.n	800f12c <_printf_float+0x240>
 800f10c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f110:	4631      	mov	r1, r6
 800f112:	4628      	mov	r0, r5
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	f43f af45 	beq.w	800efa6 <_printf_float+0xba>
 800f11c:	f04f 0800 	mov.w	r8, #0
 800f120:	f104 091a 	add.w	r9, r4, #26
 800f124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f126:	3b01      	subs	r3, #1
 800f128:	4543      	cmp	r3, r8
 800f12a:	dc09      	bgt.n	800f140 <_printf_float+0x254>
 800f12c:	6823      	ldr	r3, [r4, #0]
 800f12e:	079b      	lsls	r3, r3, #30
 800f130:	f100 8103 	bmi.w	800f33a <_printf_float+0x44e>
 800f134:	68e0      	ldr	r0, [r4, #12]
 800f136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f138:	4298      	cmp	r0, r3
 800f13a:	bfb8      	it	lt
 800f13c:	4618      	movlt	r0, r3
 800f13e:	e734      	b.n	800efaa <_printf_float+0xbe>
 800f140:	2301      	movs	r3, #1
 800f142:	464a      	mov	r2, r9
 800f144:	4631      	mov	r1, r6
 800f146:	4628      	mov	r0, r5
 800f148:	47b8      	blx	r7
 800f14a:	3001      	adds	r0, #1
 800f14c:	f43f af2b 	beq.w	800efa6 <_printf_float+0xba>
 800f150:	f108 0801 	add.w	r8, r8, #1
 800f154:	e7e6      	b.n	800f124 <_printf_float+0x238>
 800f156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f158:	2b00      	cmp	r3, #0
 800f15a:	dc2b      	bgt.n	800f1b4 <_printf_float+0x2c8>
 800f15c:	2301      	movs	r3, #1
 800f15e:	4a26      	ldr	r2, [pc, #152]	; (800f1f8 <_printf_float+0x30c>)
 800f160:	4631      	mov	r1, r6
 800f162:	4628      	mov	r0, r5
 800f164:	47b8      	blx	r7
 800f166:	3001      	adds	r0, #1
 800f168:	f43f af1d 	beq.w	800efa6 <_printf_float+0xba>
 800f16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f16e:	b923      	cbnz	r3, 800f17a <_printf_float+0x28e>
 800f170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f172:	b913      	cbnz	r3, 800f17a <_printf_float+0x28e>
 800f174:	6823      	ldr	r3, [r4, #0]
 800f176:	07d9      	lsls	r1, r3, #31
 800f178:	d5d8      	bpl.n	800f12c <_printf_float+0x240>
 800f17a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f17e:	4631      	mov	r1, r6
 800f180:	4628      	mov	r0, r5
 800f182:	47b8      	blx	r7
 800f184:	3001      	adds	r0, #1
 800f186:	f43f af0e 	beq.w	800efa6 <_printf_float+0xba>
 800f18a:	f04f 0900 	mov.w	r9, #0
 800f18e:	f104 0a1a 	add.w	sl, r4, #26
 800f192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f194:	425b      	negs	r3, r3
 800f196:	454b      	cmp	r3, r9
 800f198:	dc01      	bgt.n	800f19e <_printf_float+0x2b2>
 800f19a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f19c:	e794      	b.n	800f0c8 <_printf_float+0x1dc>
 800f19e:	2301      	movs	r3, #1
 800f1a0:	4652      	mov	r2, sl
 800f1a2:	4631      	mov	r1, r6
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	47b8      	blx	r7
 800f1a8:	3001      	adds	r0, #1
 800f1aa:	f43f aefc 	beq.w	800efa6 <_printf_float+0xba>
 800f1ae:	f109 0901 	add.w	r9, r9, #1
 800f1b2:	e7ee      	b.n	800f192 <_printf_float+0x2a6>
 800f1b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f1b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	bfa8      	it	ge
 800f1bc:	461a      	movge	r2, r3
 800f1be:	2a00      	cmp	r2, #0
 800f1c0:	4691      	mov	r9, r2
 800f1c2:	dd07      	ble.n	800f1d4 <_printf_float+0x2e8>
 800f1c4:	4613      	mov	r3, r2
 800f1c6:	4631      	mov	r1, r6
 800f1c8:	4642      	mov	r2, r8
 800f1ca:	4628      	mov	r0, r5
 800f1cc:	47b8      	blx	r7
 800f1ce:	3001      	adds	r0, #1
 800f1d0:	f43f aee9 	beq.w	800efa6 <_printf_float+0xba>
 800f1d4:	f104 031a 	add.w	r3, r4, #26
 800f1d8:	f04f 0b00 	mov.w	fp, #0
 800f1dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1e0:	9306      	str	r3, [sp, #24]
 800f1e2:	e015      	b.n	800f210 <_printf_float+0x324>
 800f1e4:	7fefffff 	.word	0x7fefffff
 800f1e8:	0801376d 	.word	0x0801376d
 800f1ec:	08013769 	.word	0x08013769
 800f1f0:	08013775 	.word	0x08013775
 800f1f4:	08013771 	.word	0x08013771
 800f1f8:	08013779 	.word	0x08013779
 800f1fc:	2301      	movs	r3, #1
 800f1fe:	9a06      	ldr	r2, [sp, #24]
 800f200:	4631      	mov	r1, r6
 800f202:	4628      	mov	r0, r5
 800f204:	47b8      	blx	r7
 800f206:	3001      	adds	r0, #1
 800f208:	f43f aecd 	beq.w	800efa6 <_printf_float+0xba>
 800f20c:	f10b 0b01 	add.w	fp, fp, #1
 800f210:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800f214:	ebaa 0309 	sub.w	r3, sl, r9
 800f218:	455b      	cmp	r3, fp
 800f21a:	dcef      	bgt.n	800f1fc <_printf_float+0x310>
 800f21c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f220:	429a      	cmp	r2, r3
 800f222:	44d0      	add	r8, sl
 800f224:	db15      	blt.n	800f252 <_printf_float+0x366>
 800f226:	6823      	ldr	r3, [r4, #0]
 800f228:	07da      	lsls	r2, r3, #31
 800f22a:	d412      	bmi.n	800f252 <_printf_float+0x366>
 800f22c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f22e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f230:	eba3 020a 	sub.w	r2, r3, sl
 800f234:	eba3 0a01 	sub.w	sl, r3, r1
 800f238:	4592      	cmp	sl, r2
 800f23a:	bfa8      	it	ge
 800f23c:	4692      	movge	sl, r2
 800f23e:	f1ba 0f00 	cmp.w	sl, #0
 800f242:	dc0e      	bgt.n	800f262 <_printf_float+0x376>
 800f244:	f04f 0800 	mov.w	r8, #0
 800f248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f24c:	f104 091a 	add.w	r9, r4, #26
 800f250:	e019      	b.n	800f286 <_printf_float+0x39a>
 800f252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f256:	4631      	mov	r1, r6
 800f258:	4628      	mov	r0, r5
 800f25a:	47b8      	blx	r7
 800f25c:	3001      	adds	r0, #1
 800f25e:	d1e5      	bne.n	800f22c <_printf_float+0x340>
 800f260:	e6a1      	b.n	800efa6 <_printf_float+0xba>
 800f262:	4653      	mov	r3, sl
 800f264:	4642      	mov	r2, r8
 800f266:	4631      	mov	r1, r6
 800f268:	4628      	mov	r0, r5
 800f26a:	47b8      	blx	r7
 800f26c:	3001      	adds	r0, #1
 800f26e:	d1e9      	bne.n	800f244 <_printf_float+0x358>
 800f270:	e699      	b.n	800efa6 <_printf_float+0xba>
 800f272:	2301      	movs	r3, #1
 800f274:	464a      	mov	r2, r9
 800f276:	4631      	mov	r1, r6
 800f278:	4628      	mov	r0, r5
 800f27a:	47b8      	blx	r7
 800f27c:	3001      	adds	r0, #1
 800f27e:	f43f ae92 	beq.w	800efa6 <_printf_float+0xba>
 800f282:	f108 0801 	add.w	r8, r8, #1
 800f286:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f28a:	1a9b      	subs	r3, r3, r2
 800f28c:	eba3 030a 	sub.w	r3, r3, sl
 800f290:	4543      	cmp	r3, r8
 800f292:	dcee      	bgt.n	800f272 <_printf_float+0x386>
 800f294:	e74a      	b.n	800f12c <_printf_float+0x240>
 800f296:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f298:	2a01      	cmp	r2, #1
 800f29a:	dc01      	bgt.n	800f2a0 <_printf_float+0x3b4>
 800f29c:	07db      	lsls	r3, r3, #31
 800f29e:	d53a      	bpl.n	800f316 <_printf_float+0x42a>
 800f2a0:	2301      	movs	r3, #1
 800f2a2:	4642      	mov	r2, r8
 800f2a4:	4631      	mov	r1, r6
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	47b8      	blx	r7
 800f2aa:	3001      	adds	r0, #1
 800f2ac:	f43f ae7b 	beq.w	800efa6 <_printf_float+0xba>
 800f2b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2b4:	4631      	mov	r1, r6
 800f2b6:	4628      	mov	r0, r5
 800f2b8:	47b8      	blx	r7
 800f2ba:	3001      	adds	r0, #1
 800f2bc:	f108 0801 	add.w	r8, r8, #1
 800f2c0:	f43f ae71 	beq.w	800efa6 <_printf_float+0xba>
 800f2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f103 3aff 	add.w	sl, r3, #4294967295
 800f2cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f2d0:	2300      	movs	r3, #0
 800f2d2:	f7f1 fc19 	bl	8000b08 <__aeabi_dcmpeq>
 800f2d6:	b9c8      	cbnz	r0, 800f30c <_printf_float+0x420>
 800f2d8:	4653      	mov	r3, sl
 800f2da:	4642      	mov	r2, r8
 800f2dc:	4631      	mov	r1, r6
 800f2de:	4628      	mov	r0, r5
 800f2e0:	47b8      	blx	r7
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	d10e      	bne.n	800f304 <_printf_float+0x418>
 800f2e6:	e65e      	b.n	800efa6 <_printf_float+0xba>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	4631      	mov	r1, r6
 800f2ee:	4628      	mov	r0, r5
 800f2f0:	47b8      	blx	r7
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	f43f ae57 	beq.w	800efa6 <_printf_float+0xba>
 800f2f8:	f108 0801 	add.w	r8, r8, #1
 800f2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f2fe:	3b01      	subs	r3, #1
 800f300:	4543      	cmp	r3, r8
 800f302:	dcf1      	bgt.n	800f2e8 <_printf_float+0x3fc>
 800f304:	464b      	mov	r3, r9
 800f306:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f30a:	e6de      	b.n	800f0ca <_printf_float+0x1de>
 800f30c:	f04f 0800 	mov.w	r8, #0
 800f310:	f104 0a1a 	add.w	sl, r4, #26
 800f314:	e7f2      	b.n	800f2fc <_printf_float+0x410>
 800f316:	2301      	movs	r3, #1
 800f318:	e7df      	b.n	800f2da <_printf_float+0x3ee>
 800f31a:	2301      	movs	r3, #1
 800f31c:	464a      	mov	r2, r9
 800f31e:	4631      	mov	r1, r6
 800f320:	4628      	mov	r0, r5
 800f322:	47b8      	blx	r7
 800f324:	3001      	adds	r0, #1
 800f326:	f43f ae3e 	beq.w	800efa6 <_printf_float+0xba>
 800f32a:	f108 0801 	add.w	r8, r8, #1
 800f32e:	68e3      	ldr	r3, [r4, #12]
 800f330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f332:	1a9b      	subs	r3, r3, r2
 800f334:	4543      	cmp	r3, r8
 800f336:	dcf0      	bgt.n	800f31a <_printf_float+0x42e>
 800f338:	e6fc      	b.n	800f134 <_printf_float+0x248>
 800f33a:	f04f 0800 	mov.w	r8, #0
 800f33e:	f104 0919 	add.w	r9, r4, #25
 800f342:	e7f4      	b.n	800f32e <_printf_float+0x442>
 800f344:	2900      	cmp	r1, #0
 800f346:	f43f ae8b 	beq.w	800f060 <_printf_float+0x174>
 800f34a:	2300      	movs	r3, #0
 800f34c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800f350:	ab09      	add	r3, sp, #36	; 0x24
 800f352:	9300      	str	r3, [sp, #0]
 800f354:	ec49 8b10 	vmov	d0, r8, r9
 800f358:	6022      	str	r2, [r4, #0]
 800f35a:	f8cd a004 	str.w	sl, [sp, #4]
 800f35e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f362:	4628      	mov	r0, r5
 800f364:	f7ff fd2e 	bl	800edc4 <__cvt>
 800f368:	4680      	mov	r8, r0
 800f36a:	e648      	b.n	800effe <_printf_float+0x112>

0800f36c <_printf_common>:
 800f36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f370:	4691      	mov	r9, r2
 800f372:	461f      	mov	r7, r3
 800f374:	688a      	ldr	r2, [r1, #8]
 800f376:	690b      	ldr	r3, [r1, #16]
 800f378:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f37c:	4293      	cmp	r3, r2
 800f37e:	bfb8      	it	lt
 800f380:	4613      	movlt	r3, r2
 800f382:	f8c9 3000 	str.w	r3, [r9]
 800f386:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f38a:	4606      	mov	r6, r0
 800f38c:	460c      	mov	r4, r1
 800f38e:	b112      	cbz	r2, 800f396 <_printf_common+0x2a>
 800f390:	3301      	adds	r3, #1
 800f392:	f8c9 3000 	str.w	r3, [r9]
 800f396:	6823      	ldr	r3, [r4, #0]
 800f398:	0699      	lsls	r1, r3, #26
 800f39a:	bf42      	ittt	mi
 800f39c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800f3a0:	3302      	addmi	r3, #2
 800f3a2:	f8c9 3000 	strmi.w	r3, [r9]
 800f3a6:	6825      	ldr	r5, [r4, #0]
 800f3a8:	f015 0506 	ands.w	r5, r5, #6
 800f3ac:	d107      	bne.n	800f3be <_printf_common+0x52>
 800f3ae:	f104 0a19 	add.w	sl, r4, #25
 800f3b2:	68e3      	ldr	r3, [r4, #12]
 800f3b4:	f8d9 2000 	ldr.w	r2, [r9]
 800f3b8:	1a9b      	subs	r3, r3, r2
 800f3ba:	42ab      	cmp	r3, r5
 800f3bc:	dc28      	bgt.n	800f410 <_printf_common+0xa4>
 800f3be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800f3c2:	6822      	ldr	r2, [r4, #0]
 800f3c4:	3300      	adds	r3, #0
 800f3c6:	bf18      	it	ne
 800f3c8:	2301      	movne	r3, #1
 800f3ca:	0692      	lsls	r2, r2, #26
 800f3cc:	d42d      	bmi.n	800f42a <_printf_common+0xbe>
 800f3ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f3d2:	4639      	mov	r1, r7
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	47c0      	blx	r8
 800f3d8:	3001      	adds	r0, #1
 800f3da:	d020      	beq.n	800f41e <_printf_common+0xb2>
 800f3dc:	6823      	ldr	r3, [r4, #0]
 800f3de:	68e5      	ldr	r5, [r4, #12]
 800f3e0:	f8d9 2000 	ldr.w	r2, [r9]
 800f3e4:	f003 0306 	and.w	r3, r3, #6
 800f3e8:	2b04      	cmp	r3, #4
 800f3ea:	bf08      	it	eq
 800f3ec:	1aad      	subeq	r5, r5, r2
 800f3ee:	68a3      	ldr	r3, [r4, #8]
 800f3f0:	6922      	ldr	r2, [r4, #16]
 800f3f2:	bf0c      	ite	eq
 800f3f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3f8:	2500      	movne	r5, #0
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	bfc4      	itt	gt
 800f3fe:	1a9b      	subgt	r3, r3, r2
 800f400:	18ed      	addgt	r5, r5, r3
 800f402:	f04f 0900 	mov.w	r9, #0
 800f406:	341a      	adds	r4, #26
 800f408:	454d      	cmp	r5, r9
 800f40a:	d11a      	bne.n	800f442 <_printf_common+0xd6>
 800f40c:	2000      	movs	r0, #0
 800f40e:	e008      	b.n	800f422 <_printf_common+0xb6>
 800f410:	2301      	movs	r3, #1
 800f412:	4652      	mov	r2, sl
 800f414:	4639      	mov	r1, r7
 800f416:	4630      	mov	r0, r6
 800f418:	47c0      	blx	r8
 800f41a:	3001      	adds	r0, #1
 800f41c:	d103      	bne.n	800f426 <_printf_common+0xba>
 800f41e:	f04f 30ff 	mov.w	r0, #4294967295
 800f422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f426:	3501      	adds	r5, #1
 800f428:	e7c3      	b.n	800f3b2 <_printf_common+0x46>
 800f42a:	18e1      	adds	r1, r4, r3
 800f42c:	1c5a      	adds	r2, r3, #1
 800f42e:	2030      	movs	r0, #48	; 0x30
 800f430:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f434:	4422      	add	r2, r4
 800f436:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f43a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f43e:	3302      	adds	r3, #2
 800f440:	e7c5      	b.n	800f3ce <_printf_common+0x62>
 800f442:	2301      	movs	r3, #1
 800f444:	4622      	mov	r2, r4
 800f446:	4639      	mov	r1, r7
 800f448:	4630      	mov	r0, r6
 800f44a:	47c0      	blx	r8
 800f44c:	3001      	adds	r0, #1
 800f44e:	d0e6      	beq.n	800f41e <_printf_common+0xb2>
 800f450:	f109 0901 	add.w	r9, r9, #1
 800f454:	e7d8      	b.n	800f408 <_printf_common+0x9c>
	...

0800f458 <_printf_i>:
 800f458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f45c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800f460:	460c      	mov	r4, r1
 800f462:	7e09      	ldrb	r1, [r1, #24]
 800f464:	b085      	sub	sp, #20
 800f466:	296e      	cmp	r1, #110	; 0x6e
 800f468:	4617      	mov	r7, r2
 800f46a:	4606      	mov	r6, r0
 800f46c:	4698      	mov	r8, r3
 800f46e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f470:	f000 80b3 	beq.w	800f5da <_printf_i+0x182>
 800f474:	d822      	bhi.n	800f4bc <_printf_i+0x64>
 800f476:	2963      	cmp	r1, #99	; 0x63
 800f478:	d036      	beq.n	800f4e8 <_printf_i+0x90>
 800f47a:	d80a      	bhi.n	800f492 <_printf_i+0x3a>
 800f47c:	2900      	cmp	r1, #0
 800f47e:	f000 80b9 	beq.w	800f5f4 <_printf_i+0x19c>
 800f482:	2958      	cmp	r1, #88	; 0x58
 800f484:	f000 8083 	beq.w	800f58e <_printf_i+0x136>
 800f488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f48c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800f490:	e032      	b.n	800f4f8 <_printf_i+0xa0>
 800f492:	2964      	cmp	r1, #100	; 0x64
 800f494:	d001      	beq.n	800f49a <_printf_i+0x42>
 800f496:	2969      	cmp	r1, #105	; 0x69
 800f498:	d1f6      	bne.n	800f488 <_printf_i+0x30>
 800f49a:	6820      	ldr	r0, [r4, #0]
 800f49c:	6813      	ldr	r3, [r2, #0]
 800f49e:	0605      	lsls	r5, r0, #24
 800f4a0:	f103 0104 	add.w	r1, r3, #4
 800f4a4:	d52a      	bpl.n	800f4fc <_printf_i+0xa4>
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	6011      	str	r1, [r2, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	da03      	bge.n	800f4b6 <_printf_i+0x5e>
 800f4ae:	222d      	movs	r2, #45	; 0x2d
 800f4b0:	425b      	negs	r3, r3
 800f4b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800f4b6:	486f      	ldr	r0, [pc, #444]	; (800f674 <_printf_i+0x21c>)
 800f4b8:	220a      	movs	r2, #10
 800f4ba:	e039      	b.n	800f530 <_printf_i+0xd8>
 800f4bc:	2973      	cmp	r1, #115	; 0x73
 800f4be:	f000 809d 	beq.w	800f5fc <_printf_i+0x1a4>
 800f4c2:	d808      	bhi.n	800f4d6 <_printf_i+0x7e>
 800f4c4:	296f      	cmp	r1, #111	; 0x6f
 800f4c6:	d020      	beq.n	800f50a <_printf_i+0xb2>
 800f4c8:	2970      	cmp	r1, #112	; 0x70
 800f4ca:	d1dd      	bne.n	800f488 <_printf_i+0x30>
 800f4cc:	6823      	ldr	r3, [r4, #0]
 800f4ce:	f043 0320 	orr.w	r3, r3, #32
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	e003      	b.n	800f4de <_printf_i+0x86>
 800f4d6:	2975      	cmp	r1, #117	; 0x75
 800f4d8:	d017      	beq.n	800f50a <_printf_i+0xb2>
 800f4da:	2978      	cmp	r1, #120	; 0x78
 800f4dc:	d1d4      	bne.n	800f488 <_printf_i+0x30>
 800f4de:	2378      	movs	r3, #120	; 0x78
 800f4e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4e4:	4864      	ldr	r0, [pc, #400]	; (800f678 <_printf_i+0x220>)
 800f4e6:	e055      	b.n	800f594 <_printf_i+0x13c>
 800f4e8:	6813      	ldr	r3, [r2, #0]
 800f4ea:	1d19      	adds	r1, r3, #4
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	6011      	str	r1, [r2, #0]
 800f4f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f4f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e08c      	b.n	800f616 <_printf_i+0x1be>
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	6011      	str	r1, [r2, #0]
 800f500:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f504:	bf18      	it	ne
 800f506:	b21b      	sxthne	r3, r3
 800f508:	e7cf      	b.n	800f4aa <_printf_i+0x52>
 800f50a:	6813      	ldr	r3, [r2, #0]
 800f50c:	6825      	ldr	r5, [r4, #0]
 800f50e:	1d18      	adds	r0, r3, #4
 800f510:	6010      	str	r0, [r2, #0]
 800f512:	0628      	lsls	r0, r5, #24
 800f514:	d501      	bpl.n	800f51a <_printf_i+0xc2>
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	e002      	b.n	800f520 <_printf_i+0xc8>
 800f51a:	0668      	lsls	r0, r5, #25
 800f51c:	d5fb      	bpl.n	800f516 <_printf_i+0xbe>
 800f51e:	881b      	ldrh	r3, [r3, #0]
 800f520:	4854      	ldr	r0, [pc, #336]	; (800f674 <_printf_i+0x21c>)
 800f522:	296f      	cmp	r1, #111	; 0x6f
 800f524:	bf14      	ite	ne
 800f526:	220a      	movne	r2, #10
 800f528:	2208      	moveq	r2, #8
 800f52a:	2100      	movs	r1, #0
 800f52c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f530:	6865      	ldr	r5, [r4, #4]
 800f532:	60a5      	str	r5, [r4, #8]
 800f534:	2d00      	cmp	r5, #0
 800f536:	f2c0 8095 	blt.w	800f664 <_printf_i+0x20c>
 800f53a:	6821      	ldr	r1, [r4, #0]
 800f53c:	f021 0104 	bic.w	r1, r1, #4
 800f540:	6021      	str	r1, [r4, #0]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d13d      	bne.n	800f5c2 <_printf_i+0x16a>
 800f546:	2d00      	cmp	r5, #0
 800f548:	f040 808e 	bne.w	800f668 <_printf_i+0x210>
 800f54c:	4665      	mov	r5, ip
 800f54e:	2a08      	cmp	r2, #8
 800f550:	d10b      	bne.n	800f56a <_printf_i+0x112>
 800f552:	6823      	ldr	r3, [r4, #0]
 800f554:	07db      	lsls	r3, r3, #31
 800f556:	d508      	bpl.n	800f56a <_printf_i+0x112>
 800f558:	6923      	ldr	r3, [r4, #16]
 800f55a:	6862      	ldr	r2, [r4, #4]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	bfde      	ittt	le
 800f560:	2330      	movle	r3, #48	; 0x30
 800f562:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f56a:	ebac 0305 	sub.w	r3, ip, r5
 800f56e:	6123      	str	r3, [r4, #16]
 800f570:	f8cd 8000 	str.w	r8, [sp]
 800f574:	463b      	mov	r3, r7
 800f576:	aa03      	add	r2, sp, #12
 800f578:	4621      	mov	r1, r4
 800f57a:	4630      	mov	r0, r6
 800f57c:	f7ff fef6 	bl	800f36c <_printf_common>
 800f580:	3001      	adds	r0, #1
 800f582:	d14d      	bne.n	800f620 <_printf_i+0x1c8>
 800f584:	f04f 30ff 	mov.w	r0, #4294967295
 800f588:	b005      	add	sp, #20
 800f58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f58e:	4839      	ldr	r0, [pc, #228]	; (800f674 <_printf_i+0x21c>)
 800f590:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800f594:	6813      	ldr	r3, [r2, #0]
 800f596:	6821      	ldr	r1, [r4, #0]
 800f598:	1d1d      	adds	r5, r3, #4
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	6015      	str	r5, [r2, #0]
 800f59e:	060a      	lsls	r2, r1, #24
 800f5a0:	d50b      	bpl.n	800f5ba <_printf_i+0x162>
 800f5a2:	07ca      	lsls	r2, r1, #31
 800f5a4:	bf44      	itt	mi
 800f5a6:	f041 0120 	orrmi.w	r1, r1, #32
 800f5aa:	6021      	strmi	r1, [r4, #0]
 800f5ac:	b91b      	cbnz	r3, 800f5b6 <_printf_i+0x15e>
 800f5ae:	6822      	ldr	r2, [r4, #0]
 800f5b0:	f022 0220 	bic.w	r2, r2, #32
 800f5b4:	6022      	str	r2, [r4, #0]
 800f5b6:	2210      	movs	r2, #16
 800f5b8:	e7b7      	b.n	800f52a <_printf_i+0xd2>
 800f5ba:	064d      	lsls	r5, r1, #25
 800f5bc:	bf48      	it	mi
 800f5be:	b29b      	uxthmi	r3, r3
 800f5c0:	e7ef      	b.n	800f5a2 <_printf_i+0x14a>
 800f5c2:	4665      	mov	r5, ip
 800f5c4:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5c8:	fb02 3311 	mls	r3, r2, r1, r3
 800f5cc:	5cc3      	ldrb	r3, [r0, r3]
 800f5ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800f5d2:	460b      	mov	r3, r1
 800f5d4:	2900      	cmp	r1, #0
 800f5d6:	d1f5      	bne.n	800f5c4 <_printf_i+0x16c>
 800f5d8:	e7b9      	b.n	800f54e <_printf_i+0xf6>
 800f5da:	6813      	ldr	r3, [r2, #0]
 800f5dc:	6825      	ldr	r5, [r4, #0]
 800f5de:	6961      	ldr	r1, [r4, #20]
 800f5e0:	1d18      	adds	r0, r3, #4
 800f5e2:	6010      	str	r0, [r2, #0]
 800f5e4:	0628      	lsls	r0, r5, #24
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	d501      	bpl.n	800f5ee <_printf_i+0x196>
 800f5ea:	6019      	str	r1, [r3, #0]
 800f5ec:	e002      	b.n	800f5f4 <_printf_i+0x19c>
 800f5ee:	066a      	lsls	r2, r5, #25
 800f5f0:	d5fb      	bpl.n	800f5ea <_printf_i+0x192>
 800f5f2:	8019      	strh	r1, [r3, #0]
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	6123      	str	r3, [r4, #16]
 800f5f8:	4665      	mov	r5, ip
 800f5fa:	e7b9      	b.n	800f570 <_printf_i+0x118>
 800f5fc:	6813      	ldr	r3, [r2, #0]
 800f5fe:	1d19      	adds	r1, r3, #4
 800f600:	6011      	str	r1, [r2, #0]
 800f602:	681d      	ldr	r5, [r3, #0]
 800f604:	6862      	ldr	r2, [r4, #4]
 800f606:	2100      	movs	r1, #0
 800f608:	4628      	mov	r0, r5
 800f60a:	f7f0 fe09 	bl	8000220 <memchr>
 800f60e:	b108      	cbz	r0, 800f614 <_printf_i+0x1bc>
 800f610:	1b40      	subs	r0, r0, r5
 800f612:	6060      	str	r0, [r4, #4]
 800f614:	6863      	ldr	r3, [r4, #4]
 800f616:	6123      	str	r3, [r4, #16]
 800f618:	2300      	movs	r3, #0
 800f61a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f61e:	e7a7      	b.n	800f570 <_printf_i+0x118>
 800f620:	6923      	ldr	r3, [r4, #16]
 800f622:	462a      	mov	r2, r5
 800f624:	4639      	mov	r1, r7
 800f626:	4630      	mov	r0, r6
 800f628:	47c0      	blx	r8
 800f62a:	3001      	adds	r0, #1
 800f62c:	d0aa      	beq.n	800f584 <_printf_i+0x12c>
 800f62e:	6823      	ldr	r3, [r4, #0]
 800f630:	079b      	lsls	r3, r3, #30
 800f632:	d413      	bmi.n	800f65c <_printf_i+0x204>
 800f634:	68e0      	ldr	r0, [r4, #12]
 800f636:	9b03      	ldr	r3, [sp, #12]
 800f638:	4298      	cmp	r0, r3
 800f63a:	bfb8      	it	lt
 800f63c:	4618      	movlt	r0, r3
 800f63e:	e7a3      	b.n	800f588 <_printf_i+0x130>
 800f640:	2301      	movs	r3, #1
 800f642:	464a      	mov	r2, r9
 800f644:	4639      	mov	r1, r7
 800f646:	4630      	mov	r0, r6
 800f648:	47c0      	blx	r8
 800f64a:	3001      	adds	r0, #1
 800f64c:	d09a      	beq.n	800f584 <_printf_i+0x12c>
 800f64e:	3501      	adds	r5, #1
 800f650:	68e3      	ldr	r3, [r4, #12]
 800f652:	9a03      	ldr	r2, [sp, #12]
 800f654:	1a9b      	subs	r3, r3, r2
 800f656:	42ab      	cmp	r3, r5
 800f658:	dcf2      	bgt.n	800f640 <_printf_i+0x1e8>
 800f65a:	e7eb      	b.n	800f634 <_printf_i+0x1dc>
 800f65c:	2500      	movs	r5, #0
 800f65e:	f104 0919 	add.w	r9, r4, #25
 800f662:	e7f5      	b.n	800f650 <_printf_i+0x1f8>
 800f664:	2b00      	cmp	r3, #0
 800f666:	d1ac      	bne.n	800f5c2 <_printf_i+0x16a>
 800f668:	7803      	ldrb	r3, [r0, #0]
 800f66a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f66e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f672:	e76c      	b.n	800f54e <_printf_i+0xf6>
 800f674:	0801377b 	.word	0x0801377b
 800f678:	0801378c 	.word	0x0801378c

0800f67c <copysign>:
 800f67c:	ec51 0b10 	vmov	r0, r1, d0
 800f680:	ee11 0a90 	vmov	r0, s3
 800f684:	ee10 2a10 	vmov	r2, s0
 800f688:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800f68c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800f690:	ea41 0300 	orr.w	r3, r1, r0
 800f694:	ec43 2b10 	vmov	d0, r2, r3
 800f698:	4770      	bx	lr
	...

0800f69c <_sbrk_r>:
 800f69c:	b538      	push	{r3, r4, r5, lr}
 800f69e:	4c06      	ldr	r4, [pc, #24]	; (800f6b8 <_sbrk_r+0x1c>)
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	4605      	mov	r5, r0
 800f6a4:	4608      	mov	r0, r1
 800f6a6:	6023      	str	r3, [r4, #0]
 800f6a8:	f7f4 f982 	bl	80039b0 <_sbrk>
 800f6ac:	1c43      	adds	r3, r0, #1
 800f6ae:	d102      	bne.n	800f6b6 <_sbrk_r+0x1a>
 800f6b0:	6823      	ldr	r3, [r4, #0]
 800f6b2:	b103      	cbz	r3, 800f6b6 <_sbrk_r+0x1a>
 800f6b4:	602b      	str	r3, [r5, #0]
 800f6b6:	bd38      	pop	{r3, r4, r5, pc}
 800f6b8:	20006320 	.word	0x20006320

0800f6bc <siprintf>:
 800f6bc:	b40e      	push	{r1, r2, r3}
 800f6be:	b500      	push	{lr}
 800f6c0:	b09c      	sub	sp, #112	; 0x70
 800f6c2:	ab1d      	add	r3, sp, #116	; 0x74
 800f6c4:	9002      	str	r0, [sp, #8]
 800f6c6:	9006      	str	r0, [sp, #24]
 800f6c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f6cc:	4809      	ldr	r0, [pc, #36]	; (800f6f4 <siprintf+0x38>)
 800f6ce:	9107      	str	r1, [sp, #28]
 800f6d0:	9104      	str	r1, [sp, #16]
 800f6d2:	4909      	ldr	r1, [pc, #36]	; (800f6f8 <siprintf+0x3c>)
 800f6d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6d8:	9105      	str	r1, [sp, #20]
 800f6da:	6800      	ldr	r0, [r0, #0]
 800f6dc:	9301      	str	r3, [sp, #4]
 800f6de:	a902      	add	r1, sp, #8
 800f6e0:	f001 fd00 	bl	80110e4 <_svfiprintf_r>
 800f6e4:	9b02      	ldr	r3, [sp, #8]
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	701a      	strb	r2, [r3, #0]
 800f6ea:	b01c      	add	sp, #112	; 0x70
 800f6ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f0:	b003      	add	sp, #12
 800f6f2:	4770      	bx	lr
 800f6f4:	200001b4 	.word	0x200001b4
 800f6f8:	ffff0208 	.word	0xffff0208

0800f6fc <__sread>:
 800f6fc:	b510      	push	{r4, lr}
 800f6fe:	460c      	mov	r4, r1
 800f700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f704:	f001 fde6 	bl	80112d4 <_read_r>
 800f708:	2800      	cmp	r0, #0
 800f70a:	bfab      	itete	ge
 800f70c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f70e:	89a3      	ldrhlt	r3, [r4, #12]
 800f710:	181b      	addge	r3, r3, r0
 800f712:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f716:	bfac      	ite	ge
 800f718:	6563      	strge	r3, [r4, #84]	; 0x54
 800f71a:	81a3      	strhlt	r3, [r4, #12]
 800f71c:	bd10      	pop	{r4, pc}

0800f71e <__swrite>:
 800f71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f722:	461f      	mov	r7, r3
 800f724:	898b      	ldrh	r3, [r1, #12]
 800f726:	05db      	lsls	r3, r3, #23
 800f728:	4605      	mov	r5, r0
 800f72a:	460c      	mov	r4, r1
 800f72c:	4616      	mov	r6, r2
 800f72e:	d505      	bpl.n	800f73c <__swrite+0x1e>
 800f730:	2302      	movs	r3, #2
 800f732:	2200      	movs	r2, #0
 800f734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f738:	f001 f8da 	bl	80108f0 <_lseek_r>
 800f73c:	89a3      	ldrh	r3, [r4, #12]
 800f73e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f742:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f746:	81a3      	strh	r3, [r4, #12]
 800f748:	4632      	mov	r2, r6
 800f74a:	463b      	mov	r3, r7
 800f74c:	4628      	mov	r0, r5
 800f74e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f752:	f000 b869 	b.w	800f828 <_write_r>

0800f756 <__sseek>:
 800f756:	b510      	push	{r4, lr}
 800f758:	460c      	mov	r4, r1
 800f75a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f75e:	f001 f8c7 	bl	80108f0 <_lseek_r>
 800f762:	1c43      	adds	r3, r0, #1
 800f764:	89a3      	ldrh	r3, [r4, #12]
 800f766:	bf15      	itete	ne
 800f768:	6560      	strne	r0, [r4, #84]	; 0x54
 800f76a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f76e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f772:	81a3      	strheq	r3, [r4, #12]
 800f774:	bf18      	it	ne
 800f776:	81a3      	strhne	r3, [r4, #12]
 800f778:	bd10      	pop	{r4, pc}

0800f77a <__sclose>:
 800f77a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f77e:	f000 b8db 	b.w	800f938 <_close_r>
	...

0800f784 <__swbuf_r>:
 800f784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f786:	460e      	mov	r6, r1
 800f788:	4614      	mov	r4, r2
 800f78a:	4605      	mov	r5, r0
 800f78c:	b118      	cbz	r0, 800f796 <__swbuf_r+0x12>
 800f78e:	6983      	ldr	r3, [r0, #24]
 800f790:	b90b      	cbnz	r3, 800f796 <__swbuf_r+0x12>
 800f792:	f001 f815 	bl	80107c0 <__sinit>
 800f796:	4b21      	ldr	r3, [pc, #132]	; (800f81c <__swbuf_r+0x98>)
 800f798:	429c      	cmp	r4, r3
 800f79a:	d12a      	bne.n	800f7f2 <__swbuf_r+0x6e>
 800f79c:	686c      	ldr	r4, [r5, #4]
 800f79e:	69a3      	ldr	r3, [r4, #24]
 800f7a0:	60a3      	str	r3, [r4, #8]
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	071a      	lsls	r2, r3, #28
 800f7a6:	d52e      	bpl.n	800f806 <__swbuf_r+0x82>
 800f7a8:	6923      	ldr	r3, [r4, #16]
 800f7aa:	b363      	cbz	r3, 800f806 <__swbuf_r+0x82>
 800f7ac:	6923      	ldr	r3, [r4, #16]
 800f7ae:	6820      	ldr	r0, [r4, #0]
 800f7b0:	1ac0      	subs	r0, r0, r3
 800f7b2:	6963      	ldr	r3, [r4, #20]
 800f7b4:	b2f6      	uxtb	r6, r6
 800f7b6:	4283      	cmp	r3, r0
 800f7b8:	4637      	mov	r7, r6
 800f7ba:	dc04      	bgt.n	800f7c6 <__swbuf_r+0x42>
 800f7bc:	4621      	mov	r1, r4
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 ff94 	bl	80106ec <_fflush_r>
 800f7c4:	bb28      	cbnz	r0, 800f812 <__swbuf_r+0x8e>
 800f7c6:	68a3      	ldr	r3, [r4, #8]
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	60a3      	str	r3, [r4, #8]
 800f7cc:	6823      	ldr	r3, [r4, #0]
 800f7ce:	1c5a      	adds	r2, r3, #1
 800f7d0:	6022      	str	r2, [r4, #0]
 800f7d2:	701e      	strb	r6, [r3, #0]
 800f7d4:	6963      	ldr	r3, [r4, #20]
 800f7d6:	3001      	adds	r0, #1
 800f7d8:	4283      	cmp	r3, r0
 800f7da:	d004      	beq.n	800f7e6 <__swbuf_r+0x62>
 800f7dc:	89a3      	ldrh	r3, [r4, #12]
 800f7de:	07db      	lsls	r3, r3, #31
 800f7e0:	d519      	bpl.n	800f816 <__swbuf_r+0x92>
 800f7e2:	2e0a      	cmp	r6, #10
 800f7e4:	d117      	bne.n	800f816 <__swbuf_r+0x92>
 800f7e6:	4621      	mov	r1, r4
 800f7e8:	4628      	mov	r0, r5
 800f7ea:	f000 ff7f 	bl	80106ec <_fflush_r>
 800f7ee:	b190      	cbz	r0, 800f816 <__swbuf_r+0x92>
 800f7f0:	e00f      	b.n	800f812 <__swbuf_r+0x8e>
 800f7f2:	4b0b      	ldr	r3, [pc, #44]	; (800f820 <__swbuf_r+0x9c>)
 800f7f4:	429c      	cmp	r4, r3
 800f7f6:	d101      	bne.n	800f7fc <__swbuf_r+0x78>
 800f7f8:	68ac      	ldr	r4, [r5, #8]
 800f7fa:	e7d0      	b.n	800f79e <__swbuf_r+0x1a>
 800f7fc:	4b09      	ldr	r3, [pc, #36]	; (800f824 <__swbuf_r+0xa0>)
 800f7fe:	429c      	cmp	r4, r3
 800f800:	bf08      	it	eq
 800f802:	68ec      	ldreq	r4, [r5, #12]
 800f804:	e7cb      	b.n	800f79e <__swbuf_r+0x1a>
 800f806:	4621      	mov	r1, r4
 800f808:	4628      	mov	r0, r5
 800f80a:	f000 f81f 	bl	800f84c <__swsetup_r>
 800f80e:	2800      	cmp	r0, #0
 800f810:	d0cc      	beq.n	800f7ac <__swbuf_r+0x28>
 800f812:	f04f 37ff 	mov.w	r7, #4294967295
 800f816:	4638      	mov	r0, r7
 800f818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f81a:	bf00      	nop
 800f81c:	080137cc 	.word	0x080137cc
 800f820:	080137ec 	.word	0x080137ec
 800f824:	080137ac 	.word	0x080137ac

0800f828 <_write_r>:
 800f828:	b538      	push	{r3, r4, r5, lr}
 800f82a:	4c07      	ldr	r4, [pc, #28]	; (800f848 <_write_r+0x20>)
 800f82c:	4605      	mov	r5, r0
 800f82e:	4608      	mov	r0, r1
 800f830:	4611      	mov	r1, r2
 800f832:	2200      	movs	r2, #0
 800f834:	6022      	str	r2, [r4, #0]
 800f836:	461a      	mov	r2, r3
 800f838:	f7f4 f869 	bl	800390e <_write>
 800f83c:	1c43      	adds	r3, r0, #1
 800f83e:	d102      	bne.n	800f846 <_write_r+0x1e>
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	b103      	cbz	r3, 800f846 <_write_r+0x1e>
 800f844:	602b      	str	r3, [r5, #0]
 800f846:	bd38      	pop	{r3, r4, r5, pc}
 800f848:	20006320 	.word	0x20006320

0800f84c <__swsetup_r>:
 800f84c:	4b32      	ldr	r3, [pc, #200]	; (800f918 <__swsetup_r+0xcc>)
 800f84e:	b570      	push	{r4, r5, r6, lr}
 800f850:	681d      	ldr	r5, [r3, #0]
 800f852:	4606      	mov	r6, r0
 800f854:	460c      	mov	r4, r1
 800f856:	b125      	cbz	r5, 800f862 <__swsetup_r+0x16>
 800f858:	69ab      	ldr	r3, [r5, #24]
 800f85a:	b913      	cbnz	r3, 800f862 <__swsetup_r+0x16>
 800f85c:	4628      	mov	r0, r5
 800f85e:	f000 ffaf 	bl	80107c0 <__sinit>
 800f862:	4b2e      	ldr	r3, [pc, #184]	; (800f91c <__swsetup_r+0xd0>)
 800f864:	429c      	cmp	r4, r3
 800f866:	d10f      	bne.n	800f888 <__swsetup_r+0x3c>
 800f868:	686c      	ldr	r4, [r5, #4]
 800f86a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f86e:	b29a      	uxth	r2, r3
 800f870:	0715      	lsls	r5, r2, #28
 800f872:	d42c      	bmi.n	800f8ce <__swsetup_r+0x82>
 800f874:	06d0      	lsls	r0, r2, #27
 800f876:	d411      	bmi.n	800f89c <__swsetup_r+0x50>
 800f878:	2209      	movs	r2, #9
 800f87a:	6032      	str	r2, [r6, #0]
 800f87c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f880:	81a3      	strh	r3, [r4, #12]
 800f882:	f04f 30ff 	mov.w	r0, #4294967295
 800f886:	e03e      	b.n	800f906 <__swsetup_r+0xba>
 800f888:	4b25      	ldr	r3, [pc, #148]	; (800f920 <__swsetup_r+0xd4>)
 800f88a:	429c      	cmp	r4, r3
 800f88c:	d101      	bne.n	800f892 <__swsetup_r+0x46>
 800f88e:	68ac      	ldr	r4, [r5, #8]
 800f890:	e7eb      	b.n	800f86a <__swsetup_r+0x1e>
 800f892:	4b24      	ldr	r3, [pc, #144]	; (800f924 <__swsetup_r+0xd8>)
 800f894:	429c      	cmp	r4, r3
 800f896:	bf08      	it	eq
 800f898:	68ec      	ldreq	r4, [r5, #12]
 800f89a:	e7e6      	b.n	800f86a <__swsetup_r+0x1e>
 800f89c:	0751      	lsls	r1, r2, #29
 800f89e:	d512      	bpl.n	800f8c6 <__swsetup_r+0x7a>
 800f8a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f8a2:	b141      	cbz	r1, 800f8b6 <__swsetup_r+0x6a>
 800f8a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f8a8:	4299      	cmp	r1, r3
 800f8aa:	d002      	beq.n	800f8b2 <__swsetup_r+0x66>
 800f8ac:	4630      	mov	r0, r6
 800f8ae:	f7ff f8a1 	bl	800e9f4 <_free_r>
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	6363      	str	r3, [r4, #52]	; 0x34
 800f8b6:	89a3      	ldrh	r3, [r4, #12]
 800f8b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f8bc:	81a3      	strh	r3, [r4, #12]
 800f8be:	2300      	movs	r3, #0
 800f8c0:	6063      	str	r3, [r4, #4]
 800f8c2:	6923      	ldr	r3, [r4, #16]
 800f8c4:	6023      	str	r3, [r4, #0]
 800f8c6:	89a3      	ldrh	r3, [r4, #12]
 800f8c8:	f043 0308 	orr.w	r3, r3, #8
 800f8cc:	81a3      	strh	r3, [r4, #12]
 800f8ce:	6923      	ldr	r3, [r4, #16]
 800f8d0:	b94b      	cbnz	r3, 800f8e6 <__swsetup_r+0x9a>
 800f8d2:	89a3      	ldrh	r3, [r4, #12]
 800f8d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f8d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8dc:	d003      	beq.n	800f8e6 <__swsetup_r+0x9a>
 800f8de:	4621      	mov	r1, r4
 800f8e0:	4630      	mov	r0, r6
 800f8e2:	f001 f83b 	bl	801095c <__smakebuf_r>
 800f8e6:	89a2      	ldrh	r2, [r4, #12]
 800f8e8:	f012 0301 	ands.w	r3, r2, #1
 800f8ec:	d00c      	beq.n	800f908 <__swsetup_r+0xbc>
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	60a3      	str	r3, [r4, #8]
 800f8f2:	6963      	ldr	r3, [r4, #20]
 800f8f4:	425b      	negs	r3, r3
 800f8f6:	61a3      	str	r3, [r4, #24]
 800f8f8:	6923      	ldr	r3, [r4, #16]
 800f8fa:	b953      	cbnz	r3, 800f912 <__swsetup_r+0xc6>
 800f8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f900:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f904:	d1ba      	bne.n	800f87c <__swsetup_r+0x30>
 800f906:	bd70      	pop	{r4, r5, r6, pc}
 800f908:	0792      	lsls	r2, r2, #30
 800f90a:	bf58      	it	pl
 800f90c:	6963      	ldrpl	r3, [r4, #20]
 800f90e:	60a3      	str	r3, [r4, #8]
 800f910:	e7f2      	b.n	800f8f8 <__swsetup_r+0xac>
 800f912:	2000      	movs	r0, #0
 800f914:	e7f7      	b.n	800f906 <__swsetup_r+0xba>
 800f916:	bf00      	nop
 800f918:	200001b4 	.word	0x200001b4
 800f91c:	080137cc 	.word	0x080137cc
 800f920:	080137ec 	.word	0x080137ec
 800f924:	080137ac 	.word	0x080137ac

0800f928 <abort>:
 800f928:	b508      	push	{r3, lr}
 800f92a:	2006      	movs	r0, #6
 800f92c:	f001 fd0c 	bl	8011348 <raise>
 800f930:	2001      	movs	r0, #1
 800f932:	f7f3 ffc5 	bl	80038c0 <_exit>
	...

0800f938 <_close_r>:
 800f938:	b538      	push	{r3, r4, r5, lr}
 800f93a:	4c06      	ldr	r4, [pc, #24]	; (800f954 <_close_r+0x1c>)
 800f93c:	2300      	movs	r3, #0
 800f93e:	4605      	mov	r5, r0
 800f940:	4608      	mov	r0, r1
 800f942:	6023      	str	r3, [r4, #0]
 800f944:	f7f3 ffff 	bl	8003946 <_close>
 800f948:	1c43      	adds	r3, r0, #1
 800f94a:	d102      	bne.n	800f952 <_close_r+0x1a>
 800f94c:	6823      	ldr	r3, [r4, #0]
 800f94e:	b103      	cbz	r3, 800f952 <_close_r+0x1a>
 800f950:	602b      	str	r3, [r5, #0]
 800f952:	bd38      	pop	{r3, r4, r5, pc}
 800f954:	20006320 	.word	0x20006320

0800f958 <quorem>:
 800f958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	6903      	ldr	r3, [r0, #16]
 800f95e:	690c      	ldr	r4, [r1, #16]
 800f960:	42a3      	cmp	r3, r4
 800f962:	4680      	mov	r8, r0
 800f964:	f2c0 8082 	blt.w	800fa6c <quorem+0x114>
 800f968:	3c01      	subs	r4, #1
 800f96a:	f101 0714 	add.w	r7, r1, #20
 800f96e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f972:	f100 0614 	add.w	r6, r0, #20
 800f976:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f97a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f97e:	eb06 030c 	add.w	r3, r6, ip
 800f982:	3501      	adds	r5, #1
 800f984:	eb07 090c 	add.w	r9, r7, ip
 800f988:	9301      	str	r3, [sp, #4]
 800f98a:	fbb0 f5f5 	udiv	r5, r0, r5
 800f98e:	b395      	cbz	r5, 800f9f6 <quorem+0x9e>
 800f990:	f04f 0a00 	mov.w	sl, #0
 800f994:	4638      	mov	r0, r7
 800f996:	46b6      	mov	lr, r6
 800f998:	46d3      	mov	fp, sl
 800f99a:	f850 2b04 	ldr.w	r2, [r0], #4
 800f99e:	b293      	uxth	r3, r2
 800f9a0:	fb05 a303 	mla	r3, r5, r3, sl
 800f9a4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9a8:	b29b      	uxth	r3, r3
 800f9aa:	ebab 0303 	sub.w	r3, fp, r3
 800f9ae:	0c12      	lsrs	r2, r2, #16
 800f9b0:	f8de b000 	ldr.w	fp, [lr]
 800f9b4:	fb05 a202 	mla	r2, r5, r2, sl
 800f9b8:	fa13 f38b 	uxtah	r3, r3, fp
 800f9bc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f9c0:	fa1f fb82 	uxth.w	fp, r2
 800f9c4:	f8de 2000 	ldr.w	r2, [lr]
 800f9c8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f9cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f9d0:	b29b      	uxth	r3, r3
 800f9d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9d6:	4581      	cmp	r9, r0
 800f9d8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f9dc:	f84e 3b04 	str.w	r3, [lr], #4
 800f9e0:	d2db      	bcs.n	800f99a <quorem+0x42>
 800f9e2:	f856 300c 	ldr.w	r3, [r6, ip]
 800f9e6:	b933      	cbnz	r3, 800f9f6 <quorem+0x9e>
 800f9e8:	9b01      	ldr	r3, [sp, #4]
 800f9ea:	3b04      	subs	r3, #4
 800f9ec:	429e      	cmp	r6, r3
 800f9ee:	461a      	mov	r2, r3
 800f9f0:	d330      	bcc.n	800fa54 <quorem+0xfc>
 800f9f2:	f8c8 4010 	str.w	r4, [r8, #16]
 800f9f6:	4640      	mov	r0, r8
 800f9f8:	f001 fa20 	bl	8010e3c <__mcmp>
 800f9fc:	2800      	cmp	r0, #0
 800f9fe:	db25      	blt.n	800fa4c <quorem+0xf4>
 800fa00:	3501      	adds	r5, #1
 800fa02:	4630      	mov	r0, r6
 800fa04:	f04f 0c00 	mov.w	ip, #0
 800fa08:	f857 2b04 	ldr.w	r2, [r7], #4
 800fa0c:	f8d0 e000 	ldr.w	lr, [r0]
 800fa10:	b293      	uxth	r3, r2
 800fa12:	ebac 0303 	sub.w	r3, ip, r3
 800fa16:	0c12      	lsrs	r2, r2, #16
 800fa18:	fa13 f38e 	uxtah	r3, r3, lr
 800fa1c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fa20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa2a:	45b9      	cmp	r9, r7
 800fa2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fa30:	f840 3b04 	str.w	r3, [r0], #4
 800fa34:	d2e8      	bcs.n	800fa08 <quorem+0xb0>
 800fa36:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800fa3a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fa3e:	b92a      	cbnz	r2, 800fa4c <quorem+0xf4>
 800fa40:	3b04      	subs	r3, #4
 800fa42:	429e      	cmp	r6, r3
 800fa44:	461a      	mov	r2, r3
 800fa46:	d30b      	bcc.n	800fa60 <quorem+0x108>
 800fa48:	f8c8 4010 	str.w	r4, [r8, #16]
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	b003      	add	sp, #12
 800fa50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa54:	6812      	ldr	r2, [r2, #0]
 800fa56:	3b04      	subs	r3, #4
 800fa58:	2a00      	cmp	r2, #0
 800fa5a:	d1ca      	bne.n	800f9f2 <quorem+0x9a>
 800fa5c:	3c01      	subs	r4, #1
 800fa5e:	e7c5      	b.n	800f9ec <quorem+0x94>
 800fa60:	6812      	ldr	r2, [r2, #0]
 800fa62:	3b04      	subs	r3, #4
 800fa64:	2a00      	cmp	r2, #0
 800fa66:	d1ef      	bne.n	800fa48 <quorem+0xf0>
 800fa68:	3c01      	subs	r4, #1
 800fa6a:	e7ea      	b.n	800fa42 <quorem+0xea>
 800fa6c:	2000      	movs	r0, #0
 800fa6e:	e7ee      	b.n	800fa4e <quorem+0xf6>

0800fa70 <_dtoa_r>:
 800fa70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa74:	ec57 6b10 	vmov	r6, r7, d0
 800fa78:	b097      	sub	sp, #92	; 0x5c
 800fa7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fa7c:	9106      	str	r1, [sp, #24]
 800fa7e:	4604      	mov	r4, r0
 800fa80:	920b      	str	r2, [sp, #44]	; 0x2c
 800fa82:	9312      	str	r3, [sp, #72]	; 0x48
 800fa84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fa88:	e9cd 6700 	strd	r6, r7, [sp]
 800fa8c:	b93d      	cbnz	r5, 800fa9e <_dtoa_r+0x2e>
 800fa8e:	2010      	movs	r0, #16
 800fa90:	f7fe ff8c 	bl	800e9ac <malloc>
 800fa94:	6260      	str	r0, [r4, #36]	; 0x24
 800fa96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa9a:	6005      	str	r5, [r0, #0]
 800fa9c:	60c5      	str	r5, [r0, #12]
 800fa9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faa0:	6819      	ldr	r1, [r3, #0]
 800faa2:	b151      	cbz	r1, 800faba <_dtoa_r+0x4a>
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	604a      	str	r2, [r1, #4]
 800faa8:	2301      	movs	r3, #1
 800faaa:	4093      	lsls	r3, r2
 800faac:	608b      	str	r3, [r1, #8]
 800faae:	4620      	mov	r0, r4
 800fab0:	f000 ffe3 	bl	8010a7a <_Bfree>
 800fab4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fab6:	2200      	movs	r2, #0
 800fab8:	601a      	str	r2, [r3, #0]
 800faba:	1e3b      	subs	r3, r7, #0
 800fabc:	bfbb      	ittet	lt
 800fabe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fac2:	9301      	strlt	r3, [sp, #4]
 800fac4:	2300      	movge	r3, #0
 800fac6:	2201      	movlt	r2, #1
 800fac8:	bfac      	ite	ge
 800faca:	f8c8 3000 	strge.w	r3, [r8]
 800face:	f8c8 2000 	strlt.w	r2, [r8]
 800fad2:	4baf      	ldr	r3, [pc, #700]	; (800fd90 <_dtoa_r+0x320>)
 800fad4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fad8:	ea33 0308 	bics.w	r3, r3, r8
 800fadc:	d114      	bne.n	800fb08 <_dtoa_r+0x98>
 800fade:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fae0:	f242 730f 	movw	r3, #9999	; 0x270f
 800fae4:	6013      	str	r3, [r2, #0]
 800fae6:	9b00      	ldr	r3, [sp, #0]
 800fae8:	b923      	cbnz	r3, 800faf4 <_dtoa_r+0x84>
 800faea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800faee:	2800      	cmp	r0, #0
 800faf0:	f000 8542 	beq.w	8010578 <_dtoa_r+0xb08>
 800faf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800fda4 <_dtoa_r+0x334>
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 8544 	beq.w	8010588 <_dtoa_r+0xb18>
 800fb00:	f10b 0303 	add.w	r3, fp, #3
 800fb04:	f000 bd3e 	b.w	8010584 <_dtoa_r+0xb14>
 800fb08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	2300      	movs	r3, #0
 800fb10:	4630      	mov	r0, r6
 800fb12:	4639      	mov	r1, r7
 800fb14:	f7f0 fff8 	bl	8000b08 <__aeabi_dcmpeq>
 800fb18:	4681      	mov	r9, r0
 800fb1a:	b168      	cbz	r0, 800fb38 <_dtoa_r+0xc8>
 800fb1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800fb1e:	2301      	movs	r3, #1
 800fb20:	6013      	str	r3, [r2, #0]
 800fb22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	f000 8524 	beq.w	8010572 <_dtoa_r+0xb02>
 800fb2a:	4b9a      	ldr	r3, [pc, #616]	; (800fd94 <_dtoa_r+0x324>)
 800fb2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fb2e:	f103 3bff 	add.w	fp, r3, #4294967295
 800fb32:	6013      	str	r3, [r2, #0]
 800fb34:	f000 bd28 	b.w	8010588 <_dtoa_r+0xb18>
 800fb38:	aa14      	add	r2, sp, #80	; 0x50
 800fb3a:	a915      	add	r1, sp, #84	; 0x54
 800fb3c:	ec47 6b10 	vmov	d0, r6, r7
 800fb40:	4620      	mov	r0, r4
 800fb42:	f001 f9f2 	bl	8010f2a <__d2b>
 800fb46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fb4a:	9004      	str	r0, [sp, #16]
 800fb4c:	2d00      	cmp	r5, #0
 800fb4e:	d07c      	beq.n	800fc4a <_dtoa_r+0x1da>
 800fb50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fb54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800fb58:	46b2      	mov	sl, r6
 800fb5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800fb5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fb62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800fb66:	2200      	movs	r2, #0
 800fb68:	4b8b      	ldr	r3, [pc, #556]	; (800fd98 <_dtoa_r+0x328>)
 800fb6a:	4650      	mov	r0, sl
 800fb6c:	4659      	mov	r1, fp
 800fb6e:	f7f0 fbab 	bl	80002c8 <__aeabi_dsub>
 800fb72:	a381      	add	r3, pc, #516	; (adr r3, 800fd78 <_dtoa_r+0x308>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fd5e 	bl	8000638 <__aeabi_dmul>
 800fb7c:	a380      	add	r3, pc, #512	; (adr r3, 800fd80 <_dtoa_r+0x310>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	f7f0 fba3 	bl	80002cc <__adddf3>
 800fb86:	4606      	mov	r6, r0
 800fb88:	4628      	mov	r0, r5
 800fb8a:	460f      	mov	r7, r1
 800fb8c:	f7f0 fcea 	bl	8000564 <__aeabi_i2d>
 800fb90:	a37d      	add	r3, pc, #500	; (adr r3, 800fd88 <_dtoa_r+0x318>)
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	f7f0 fd4f 	bl	8000638 <__aeabi_dmul>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	4630      	mov	r0, r6
 800fba0:	4639      	mov	r1, r7
 800fba2:	f7f0 fb93 	bl	80002cc <__adddf3>
 800fba6:	4606      	mov	r6, r0
 800fba8:	460f      	mov	r7, r1
 800fbaa:	f7f0 fff5 	bl	8000b98 <__aeabi_d2iz>
 800fbae:	2200      	movs	r2, #0
 800fbb0:	4682      	mov	sl, r0
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	4630      	mov	r0, r6
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	f7f0 ffb0 	bl	8000b1c <__aeabi_dcmplt>
 800fbbc:	b148      	cbz	r0, 800fbd2 <_dtoa_r+0x162>
 800fbbe:	4650      	mov	r0, sl
 800fbc0:	f7f0 fcd0 	bl	8000564 <__aeabi_i2d>
 800fbc4:	4632      	mov	r2, r6
 800fbc6:	463b      	mov	r3, r7
 800fbc8:	f7f0 ff9e 	bl	8000b08 <__aeabi_dcmpeq>
 800fbcc:	b908      	cbnz	r0, 800fbd2 <_dtoa_r+0x162>
 800fbce:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbd2:	f1ba 0f16 	cmp.w	sl, #22
 800fbd6:	d859      	bhi.n	800fc8c <_dtoa_r+0x21c>
 800fbd8:	4970      	ldr	r1, [pc, #448]	; (800fd9c <_dtoa_r+0x32c>)
 800fbda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800fbde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fbe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fbe6:	f7f0 ffb7 	bl	8000b58 <__aeabi_dcmpgt>
 800fbea:	2800      	cmp	r0, #0
 800fbec:	d050      	beq.n	800fc90 <_dtoa_r+0x220>
 800fbee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fbf8:	1b5d      	subs	r5, r3, r5
 800fbfa:	f1b5 0801 	subs.w	r8, r5, #1
 800fbfe:	bf49      	itett	mi
 800fc00:	f1c5 0301 	rsbmi	r3, r5, #1
 800fc04:	2300      	movpl	r3, #0
 800fc06:	9305      	strmi	r3, [sp, #20]
 800fc08:	f04f 0800 	movmi.w	r8, #0
 800fc0c:	bf58      	it	pl
 800fc0e:	9305      	strpl	r3, [sp, #20]
 800fc10:	f1ba 0f00 	cmp.w	sl, #0
 800fc14:	db3e      	blt.n	800fc94 <_dtoa_r+0x224>
 800fc16:	2300      	movs	r3, #0
 800fc18:	44d0      	add	r8, sl
 800fc1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800fc1e:	9307      	str	r3, [sp, #28]
 800fc20:	9b06      	ldr	r3, [sp, #24]
 800fc22:	2b09      	cmp	r3, #9
 800fc24:	f200 8090 	bhi.w	800fd48 <_dtoa_r+0x2d8>
 800fc28:	2b05      	cmp	r3, #5
 800fc2a:	bfc4      	itt	gt
 800fc2c:	3b04      	subgt	r3, #4
 800fc2e:	9306      	strgt	r3, [sp, #24]
 800fc30:	9b06      	ldr	r3, [sp, #24]
 800fc32:	f1a3 0302 	sub.w	r3, r3, #2
 800fc36:	bfcc      	ite	gt
 800fc38:	2500      	movgt	r5, #0
 800fc3a:	2501      	movle	r5, #1
 800fc3c:	2b03      	cmp	r3, #3
 800fc3e:	f200 808f 	bhi.w	800fd60 <_dtoa_r+0x2f0>
 800fc42:	e8df f003 	tbb	[pc, r3]
 800fc46:	7f7d      	.short	0x7f7d
 800fc48:	7131      	.short	0x7131
 800fc4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800fc4e:	441d      	add	r5, r3
 800fc50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800fc54:	2820      	cmp	r0, #32
 800fc56:	dd13      	ble.n	800fc80 <_dtoa_r+0x210>
 800fc58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800fc5c:	9b00      	ldr	r3, [sp, #0]
 800fc5e:	fa08 f800 	lsl.w	r8, r8, r0
 800fc62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800fc66:	fa23 f000 	lsr.w	r0, r3, r0
 800fc6a:	ea48 0000 	orr.w	r0, r8, r0
 800fc6e:	f7f0 fc69 	bl	8000544 <__aeabi_ui2d>
 800fc72:	2301      	movs	r3, #1
 800fc74:	4682      	mov	sl, r0
 800fc76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800fc7a:	3d01      	subs	r5, #1
 800fc7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800fc7e:	e772      	b.n	800fb66 <_dtoa_r+0xf6>
 800fc80:	9b00      	ldr	r3, [sp, #0]
 800fc82:	f1c0 0020 	rsb	r0, r0, #32
 800fc86:	fa03 f000 	lsl.w	r0, r3, r0
 800fc8a:	e7f0      	b.n	800fc6e <_dtoa_r+0x1fe>
 800fc8c:	2301      	movs	r3, #1
 800fc8e:	e7b1      	b.n	800fbf4 <_dtoa_r+0x184>
 800fc90:	900f      	str	r0, [sp, #60]	; 0x3c
 800fc92:	e7b0      	b.n	800fbf6 <_dtoa_r+0x186>
 800fc94:	9b05      	ldr	r3, [sp, #20]
 800fc96:	eba3 030a 	sub.w	r3, r3, sl
 800fc9a:	9305      	str	r3, [sp, #20]
 800fc9c:	f1ca 0300 	rsb	r3, sl, #0
 800fca0:	9307      	str	r3, [sp, #28]
 800fca2:	2300      	movs	r3, #0
 800fca4:	930e      	str	r3, [sp, #56]	; 0x38
 800fca6:	e7bb      	b.n	800fc20 <_dtoa_r+0x1b0>
 800fca8:	2301      	movs	r3, #1
 800fcaa:	930a      	str	r3, [sp, #40]	; 0x28
 800fcac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	dd59      	ble.n	800fd66 <_dtoa_r+0x2f6>
 800fcb2:	9302      	str	r3, [sp, #8]
 800fcb4:	4699      	mov	r9, r3
 800fcb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fcb8:	2200      	movs	r2, #0
 800fcba:	6072      	str	r2, [r6, #4]
 800fcbc:	2204      	movs	r2, #4
 800fcbe:	f102 0014 	add.w	r0, r2, #20
 800fcc2:	4298      	cmp	r0, r3
 800fcc4:	6871      	ldr	r1, [r6, #4]
 800fcc6:	d953      	bls.n	800fd70 <_dtoa_r+0x300>
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f000 fea2 	bl	8010a12 <_Balloc>
 800fcce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcd0:	6030      	str	r0, [r6, #0]
 800fcd2:	f1b9 0f0e 	cmp.w	r9, #14
 800fcd6:	f8d3 b000 	ldr.w	fp, [r3]
 800fcda:	f200 80e6 	bhi.w	800feaa <_dtoa_r+0x43a>
 800fcde:	2d00      	cmp	r5, #0
 800fce0:	f000 80e3 	beq.w	800feaa <_dtoa_r+0x43a>
 800fce4:	ed9d 7b00 	vldr	d7, [sp]
 800fce8:	f1ba 0f00 	cmp.w	sl, #0
 800fcec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800fcf0:	dd74      	ble.n	800fddc <_dtoa_r+0x36c>
 800fcf2:	4a2a      	ldr	r2, [pc, #168]	; (800fd9c <_dtoa_r+0x32c>)
 800fcf4:	f00a 030f 	and.w	r3, sl, #15
 800fcf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fcfc:	ed93 7b00 	vldr	d7, [r3]
 800fd00:	ea4f 162a 	mov.w	r6, sl, asr #4
 800fd04:	06f0      	lsls	r0, r6, #27
 800fd06:	ed8d 7b08 	vstr	d7, [sp, #32]
 800fd0a:	d565      	bpl.n	800fdd8 <_dtoa_r+0x368>
 800fd0c:	4b24      	ldr	r3, [pc, #144]	; (800fda0 <_dtoa_r+0x330>)
 800fd0e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fd12:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd16:	f7f0 fdb9 	bl	800088c <__aeabi_ddiv>
 800fd1a:	e9cd 0100 	strd	r0, r1, [sp]
 800fd1e:	f006 060f 	and.w	r6, r6, #15
 800fd22:	2503      	movs	r5, #3
 800fd24:	4f1e      	ldr	r7, [pc, #120]	; (800fda0 <_dtoa_r+0x330>)
 800fd26:	e04c      	b.n	800fdc2 <_dtoa_r+0x352>
 800fd28:	2301      	movs	r3, #1
 800fd2a:	930a      	str	r3, [sp, #40]	; 0x28
 800fd2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fd2e:	4453      	add	r3, sl
 800fd30:	f103 0901 	add.w	r9, r3, #1
 800fd34:	9302      	str	r3, [sp, #8]
 800fd36:	464b      	mov	r3, r9
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	bfb8      	it	lt
 800fd3c:	2301      	movlt	r3, #1
 800fd3e:	e7ba      	b.n	800fcb6 <_dtoa_r+0x246>
 800fd40:	2300      	movs	r3, #0
 800fd42:	e7b2      	b.n	800fcaa <_dtoa_r+0x23a>
 800fd44:	2300      	movs	r3, #0
 800fd46:	e7f0      	b.n	800fd2a <_dtoa_r+0x2ba>
 800fd48:	2501      	movs	r5, #1
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	9306      	str	r3, [sp, #24]
 800fd4e:	950a      	str	r5, [sp, #40]	; 0x28
 800fd50:	f04f 33ff 	mov.w	r3, #4294967295
 800fd54:	9302      	str	r3, [sp, #8]
 800fd56:	4699      	mov	r9, r3
 800fd58:	2200      	movs	r2, #0
 800fd5a:	2312      	movs	r3, #18
 800fd5c:	920b      	str	r2, [sp, #44]	; 0x2c
 800fd5e:	e7aa      	b.n	800fcb6 <_dtoa_r+0x246>
 800fd60:	2301      	movs	r3, #1
 800fd62:	930a      	str	r3, [sp, #40]	; 0x28
 800fd64:	e7f4      	b.n	800fd50 <_dtoa_r+0x2e0>
 800fd66:	2301      	movs	r3, #1
 800fd68:	9302      	str	r3, [sp, #8]
 800fd6a:	4699      	mov	r9, r3
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	e7f5      	b.n	800fd5c <_dtoa_r+0x2ec>
 800fd70:	3101      	adds	r1, #1
 800fd72:	6071      	str	r1, [r6, #4]
 800fd74:	0052      	lsls	r2, r2, #1
 800fd76:	e7a2      	b.n	800fcbe <_dtoa_r+0x24e>
 800fd78:	636f4361 	.word	0x636f4361
 800fd7c:	3fd287a7 	.word	0x3fd287a7
 800fd80:	8b60c8b3 	.word	0x8b60c8b3
 800fd84:	3fc68a28 	.word	0x3fc68a28
 800fd88:	509f79fb 	.word	0x509f79fb
 800fd8c:	3fd34413 	.word	0x3fd34413
 800fd90:	7ff00000 	.word	0x7ff00000
 800fd94:	0801377a 	.word	0x0801377a
 800fd98:	3ff80000 	.word	0x3ff80000
 800fd9c:	08013838 	.word	0x08013838
 800fda0:	08013810 	.word	0x08013810
 800fda4:	080137a6 	.word	0x080137a6
 800fda8:	07f1      	lsls	r1, r6, #31
 800fdaa:	d508      	bpl.n	800fdbe <_dtoa_r+0x34e>
 800fdac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800fdb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fdb4:	f7f0 fc40 	bl	8000638 <__aeabi_dmul>
 800fdb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fdbc:	3501      	adds	r5, #1
 800fdbe:	1076      	asrs	r6, r6, #1
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	2e00      	cmp	r6, #0
 800fdc4:	d1f0      	bne.n	800fda8 <_dtoa_r+0x338>
 800fdc6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800fdca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fdce:	f7f0 fd5d 	bl	800088c <__aeabi_ddiv>
 800fdd2:	e9cd 0100 	strd	r0, r1, [sp]
 800fdd6:	e01a      	b.n	800fe0e <_dtoa_r+0x39e>
 800fdd8:	2502      	movs	r5, #2
 800fdda:	e7a3      	b.n	800fd24 <_dtoa_r+0x2b4>
 800fddc:	f000 80a0 	beq.w	800ff20 <_dtoa_r+0x4b0>
 800fde0:	f1ca 0600 	rsb	r6, sl, #0
 800fde4:	4b9f      	ldr	r3, [pc, #636]	; (8010064 <_dtoa_r+0x5f4>)
 800fde6:	4fa0      	ldr	r7, [pc, #640]	; (8010068 <_dtoa_r+0x5f8>)
 800fde8:	f006 020f 	and.w	r2, r6, #15
 800fdec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800fdf8:	f7f0 fc1e 	bl	8000638 <__aeabi_dmul>
 800fdfc:	e9cd 0100 	strd	r0, r1, [sp]
 800fe00:	1136      	asrs	r6, r6, #4
 800fe02:	2300      	movs	r3, #0
 800fe04:	2502      	movs	r5, #2
 800fe06:	2e00      	cmp	r6, #0
 800fe08:	d17f      	bne.n	800ff0a <_dtoa_r+0x49a>
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1e1      	bne.n	800fdd2 <_dtoa_r+0x362>
 800fe0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f000 8087 	beq.w	800ff24 <_dtoa_r+0x4b4>
 800fe16:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	4b93      	ldr	r3, [pc, #588]	; (801006c <_dtoa_r+0x5fc>)
 800fe1e:	4630      	mov	r0, r6
 800fe20:	4639      	mov	r1, r7
 800fe22:	f7f0 fe7b 	bl	8000b1c <__aeabi_dcmplt>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	d07c      	beq.n	800ff24 <_dtoa_r+0x4b4>
 800fe2a:	f1b9 0f00 	cmp.w	r9, #0
 800fe2e:	d079      	beq.n	800ff24 <_dtoa_r+0x4b4>
 800fe30:	9b02      	ldr	r3, [sp, #8]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	dd35      	ble.n	800fea2 <_dtoa_r+0x432>
 800fe36:	f10a 33ff 	add.w	r3, sl, #4294967295
 800fe3a:	9308      	str	r3, [sp, #32]
 800fe3c:	4639      	mov	r1, r7
 800fe3e:	2200      	movs	r2, #0
 800fe40:	4b8b      	ldr	r3, [pc, #556]	; (8010070 <_dtoa_r+0x600>)
 800fe42:	4630      	mov	r0, r6
 800fe44:	f7f0 fbf8 	bl	8000638 <__aeabi_dmul>
 800fe48:	e9cd 0100 	strd	r0, r1, [sp]
 800fe4c:	9f02      	ldr	r7, [sp, #8]
 800fe4e:	3501      	adds	r5, #1
 800fe50:	4628      	mov	r0, r5
 800fe52:	f7f0 fb87 	bl	8000564 <__aeabi_i2d>
 800fe56:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fe5a:	f7f0 fbed 	bl	8000638 <__aeabi_dmul>
 800fe5e:	2200      	movs	r2, #0
 800fe60:	4b84      	ldr	r3, [pc, #528]	; (8010074 <_dtoa_r+0x604>)
 800fe62:	f7f0 fa33 	bl	80002cc <__adddf3>
 800fe66:	4605      	mov	r5, r0
 800fe68:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800fe6c:	2f00      	cmp	r7, #0
 800fe6e:	d15d      	bne.n	800ff2c <_dtoa_r+0x4bc>
 800fe70:	2200      	movs	r2, #0
 800fe72:	4b81      	ldr	r3, [pc, #516]	; (8010078 <_dtoa_r+0x608>)
 800fe74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe78:	f7f0 fa26 	bl	80002c8 <__aeabi_dsub>
 800fe7c:	462a      	mov	r2, r5
 800fe7e:	4633      	mov	r3, r6
 800fe80:	e9cd 0100 	strd	r0, r1, [sp]
 800fe84:	f7f0 fe68 	bl	8000b58 <__aeabi_dcmpgt>
 800fe88:	2800      	cmp	r0, #0
 800fe8a:	f040 8288 	bne.w	801039e <_dtoa_r+0x92e>
 800fe8e:	462a      	mov	r2, r5
 800fe90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800fe94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe98:	f7f0 fe40 	bl	8000b1c <__aeabi_dcmplt>
 800fe9c:	2800      	cmp	r0, #0
 800fe9e:	f040 827c 	bne.w	801039a <_dtoa_r+0x92a>
 800fea2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800fea6:	e9cd 2300 	strd	r2, r3, [sp]
 800feaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800feac:	2b00      	cmp	r3, #0
 800feae:	f2c0 8150 	blt.w	8010152 <_dtoa_r+0x6e2>
 800feb2:	f1ba 0f0e 	cmp.w	sl, #14
 800feb6:	f300 814c 	bgt.w	8010152 <_dtoa_r+0x6e2>
 800feba:	4b6a      	ldr	r3, [pc, #424]	; (8010064 <_dtoa_r+0x5f4>)
 800febc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fec0:	ed93 7b00 	vldr	d7, [r3]
 800fec4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800fecc:	f280 80d8 	bge.w	8010080 <_dtoa_r+0x610>
 800fed0:	f1b9 0f00 	cmp.w	r9, #0
 800fed4:	f300 80d4 	bgt.w	8010080 <_dtoa_r+0x610>
 800fed8:	f040 825e 	bne.w	8010398 <_dtoa_r+0x928>
 800fedc:	2200      	movs	r2, #0
 800fede:	4b66      	ldr	r3, [pc, #408]	; (8010078 <_dtoa_r+0x608>)
 800fee0:	ec51 0b17 	vmov	r0, r1, d7
 800fee4:	f7f0 fba8 	bl	8000638 <__aeabi_dmul>
 800fee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800feec:	f7f0 fe2a 	bl	8000b44 <__aeabi_dcmpge>
 800fef0:	464f      	mov	r7, r9
 800fef2:	464e      	mov	r6, r9
 800fef4:	2800      	cmp	r0, #0
 800fef6:	f040 8234 	bne.w	8010362 <_dtoa_r+0x8f2>
 800fefa:	2331      	movs	r3, #49	; 0x31
 800fefc:	f10b 0501 	add.w	r5, fp, #1
 800ff00:	f88b 3000 	strb.w	r3, [fp]
 800ff04:	f10a 0a01 	add.w	sl, sl, #1
 800ff08:	e22f      	b.n	801036a <_dtoa_r+0x8fa>
 800ff0a:	07f2      	lsls	r2, r6, #31
 800ff0c:	d505      	bpl.n	800ff1a <_dtoa_r+0x4aa>
 800ff0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ff12:	f7f0 fb91 	bl	8000638 <__aeabi_dmul>
 800ff16:	3501      	adds	r5, #1
 800ff18:	2301      	movs	r3, #1
 800ff1a:	1076      	asrs	r6, r6, #1
 800ff1c:	3708      	adds	r7, #8
 800ff1e:	e772      	b.n	800fe06 <_dtoa_r+0x396>
 800ff20:	2502      	movs	r5, #2
 800ff22:	e774      	b.n	800fe0e <_dtoa_r+0x39e>
 800ff24:	f8cd a020 	str.w	sl, [sp, #32]
 800ff28:	464f      	mov	r7, r9
 800ff2a:	e791      	b.n	800fe50 <_dtoa_r+0x3e0>
 800ff2c:	4b4d      	ldr	r3, [pc, #308]	; (8010064 <_dtoa_r+0x5f4>)
 800ff2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ff32:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ff36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d047      	beq.n	800ffcc <_dtoa_r+0x55c>
 800ff3c:	4602      	mov	r2, r0
 800ff3e:	460b      	mov	r3, r1
 800ff40:	2000      	movs	r0, #0
 800ff42:	494e      	ldr	r1, [pc, #312]	; (801007c <_dtoa_r+0x60c>)
 800ff44:	f7f0 fca2 	bl	800088c <__aeabi_ddiv>
 800ff48:	462a      	mov	r2, r5
 800ff4a:	4633      	mov	r3, r6
 800ff4c:	f7f0 f9bc 	bl	80002c8 <__aeabi_dsub>
 800ff50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ff54:	465d      	mov	r5, fp
 800ff56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff5a:	f7f0 fe1d 	bl	8000b98 <__aeabi_d2iz>
 800ff5e:	4606      	mov	r6, r0
 800ff60:	f7f0 fb00 	bl	8000564 <__aeabi_i2d>
 800ff64:	4602      	mov	r2, r0
 800ff66:	460b      	mov	r3, r1
 800ff68:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ff6c:	f7f0 f9ac 	bl	80002c8 <__aeabi_dsub>
 800ff70:	3630      	adds	r6, #48	; 0x30
 800ff72:	f805 6b01 	strb.w	r6, [r5], #1
 800ff76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff7a:	e9cd 0100 	strd	r0, r1, [sp]
 800ff7e:	f7f0 fdcd 	bl	8000b1c <__aeabi_dcmplt>
 800ff82:	2800      	cmp	r0, #0
 800ff84:	d163      	bne.n	801004e <_dtoa_r+0x5de>
 800ff86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff8a:	2000      	movs	r0, #0
 800ff8c:	4937      	ldr	r1, [pc, #220]	; (801006c <_dtoa_r+0x5fc>)
 800ff8e:	f7f0 f99b 	bl	80002c8 <__aeabi_dsub>
 800ff92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ff96:	f7f0 fdc1 	bl	8000b1c <__aeabi_dcmplt>
 800ff9a:	2800      	cmp	r0, #0
 800ff9c:	f040 80b7 	bne.w	801010e <_dtoa_r+0x69e>
 800ffa0:	eba5 030b 	sub.w	r3, r5, fp
 800ffa4:	429f      	cmp	r7, r3
 800ffa6:	f77f af7c 	ble.w	800fea2 <_dtoa_r+0x432>
 800ffaa:	2200      	movs	r2, #0
 800ffac:	4b30      	ldr	r3, [pc, #192]	; (8010070 <_dtoa_r+0x600>)
 800ffae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ffb2:	f7f0 fb41 	bl	8000638 <__aeabi_dmul>
 800ffb6:	2200      	movs	r2, #0
 800ffb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ffbc:	4b2c      	ldr	r3, [pc, #176]	; (8010070 <_dtoa_r+0x600>)
 800ffbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffc2:	f7f0 fb39 	bl	8000638 <__aeabi_dmul>
 800ffc6:	e9cd 0100 	strd	r0, r1, [sp]
 800ffca:	e7c4      	b.n	800ff56 <_dtoa_r+0x4e6>
 800ffcc:	462a      	mov	r2, r5
 800ffce:	4633      	mov	r3, r6
 800ffd0:	f7f0 fb32 	bl	8000638 <__aeabi_dmul>
 800ffd4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ffd8:	eb0b 0507 	add.w	r5, fp, r7
 800ffdc:	465e      	mov	r6, fp
 800ffde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ffe2:	f7f0 fdd9 	bl	8000b98 <__aeabi_d2iz>
 800ffe6:	4607      	mov	r7, r0
 800ffe8:	f7f0 fabc 	bl	8000564 <__aeabi_i2d>
 800ffec:	3730      	adds	r7, #48	; 0x30
 800ffee:	4602      	mov	r2, r0
 800fff0:	460b      	mov	r3, r1
 800fff2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fff6:	f7f0 f967 	bl	80002c8 <__aeabi_dsub>
 800fffa:	f806 7b01 	strb.w	r7, [r6], #1
 800fffe:	42ae      	cmp	r6, r5
 8010000:	e9cd 0100 	strd	r0, r1, [sp]
 8010004:	f04f 0200 	mov.w	r2, #0
 8010008:	d126      	bne.n	8010058 <_dtoa_r+0x5e8>
 801000a:	4b1c      	ldr	r3, [pc, #112]	; (801007c <_dtoa_r+0x60c>)
 801000c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010010:	f7f0 f95c 	bl	80002cc <__adddf3>
 8010014:	4602      	mov	r2, r0
 8010016:	460b      	mov	r3, r1
 8010018:	e9dd 0100 	ldrd	r0, r1, [sp]
 801001c:	f7f0 fd9c 	bl	8000b58 <__aeabi_dcmpgt>
 8010020:	2800      	cmp	r0, #0
 8010022:	d174      	bne.n	801010e <_dtoa_r+0x69e>
 8010024:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010028:	2000      	movs	r0, #0
 801002a:	4914      	ldr	r1, [pc, #80]	; (801007c <_dtoa_r+0x60c>)
 801002c:	f7f0 f94c 	bl	80002c8 <__aeabi_dsub>
 8010030:	4602      	mov	r2, r0
 8010032:	460b      	mov	r3, r1
 8010034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010038:	f7f0 fd70 	bl	8000b1c <__aeabi_dcmplt>
 801003c:	2800      	cmp	r0, #0
 801003e:	f43f af30 	beq.w	800fea2 <_dtoa_r+0x432>
 8010042:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010046:	2b30      	cmp	r3, #48	; 0x30
 8010048:	f105 32ff 	add.w	r2, r5, #4294967295
 801004c:	d002      	beq.n	8010054 <_dtoa_r+0x5e4>
 801004e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8010052:	e04a      	b.n	80100ea <_dtoa_r+0x67a>
 8010054:	4615      	mov	r5, r2
 8010056:	e7f4      	b.n	8010042 <_dtoa_r+0x5d2>
 8010058:	4b05      	ldr	r3, [pc, #20]	; (8010070 <_dtoa_r+0x600>)
 801005a:	f7f0 faed 	bl	8000638 <__aeabi_dmul>
 801005e:	e9cd 0100 	strd	r0, r1, [sp]
 8010062:	e7bc      	b.n	800ffde <_dtoa_r+0x56e>
 8010064:	08013838 	.word	0x08013838
 8010068:	08013810 	.word	0x08013810
 801006c:	3ff00000 	.word	0x3ff00000
 8010070:	40240000 	.word	0x40240000
 8010074:	401c0000 	.word	0x401c0000
 8010078:	40140000 	.word	0x40140000
 801007c:	3fe00000 	.word	0x3fe00000
 8010080:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010084:	465d      	mov	r5, fp
 8010086:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801008a:	4630      	mov	r0, r6
 801008c:	4639      	mov	r1, r7
 801008e:	f7f0 fbfd 	bl	800088c <__aeabi_ddiv>
 8010092:	f7f0 fd81 	bl	8000b98 <__aeabi_d2iz>
 8010096:	4680      	mov	r8, r0
 8010098:	f7f0 fa64 	bl	8000564 <__aeabi_i2d>
 801009c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100a0:	f7f0 faca 	bl	8000638 <__aeabi_dmul>
 80100a4:	4602      	mov	r2, r0
 80100a6:	460b      	mov	r3, r1
 80100a8:	4630      	mov	r0, r6
 80100aa:	4639      	mov	r1, r7
 80100ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80100b0:	f7f0 f90a 	bl	80002c8 <__aeabi_dsub>
 80100b4:	f805 6b01 	strb.w	r6, [r5], #1
 80100b8:	eba5 060b 	sub.w	r6, r5, fp
 80100bc:	45b1      	cmp	r9, r6
 80100be:	4602      	mov	r2, r0
 80100c0:	460b      	mov	r3, r1
 80100c2:	d139      	bne.n	8010138 <_dtoa_r+0x6c8>
 80100c4:	f7f0 f902 	bl	80002cc <__adddf3>
 80100c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100cc:	4606      	mov	r6, r0
 80100ce:	460f      	mov	r7, r1
 80100d0:	f7f0 fd42 	bl	8000b58 <__aeabi_dcmpgt>
 80100d4:	b9c8      	cbnz	r0, 801010a <_dtoa_r+0x69a>
 80100d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100da:	4630      	mov	r0, r6
 80100dc:	4639      	mov	r1, r7
 80100de:	f7f0 fd13 	bl	8000b08 <__aeabi_dcmpeq>
 80100e2:	b110      	cbz	r0, 80100ea <_dtoa_r+0x67a>
 80100e4:	f018 0f01 	tst.w	r8, #1
 80100e8:	d10f      	bne.n	801010a <_dtoa_r+0x69a>
 80100ea:	9904      	ldr	r1, [sp, #16]
 80100ec:	4620      	mov	r0, r4
 80100ee:	f000 fcc4 	bl	8010a7a <_Bfree>
 80100f2:	2300      	movs	r3, #0
 80100f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80100f6:	702b      	strb	r3, [r5, #0]
 80100f8:	f10a 0301 	add.w	r3, sl, #1
 80100fc:	6013      	str	r3, [r2, #0]
 80100fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010100:	2b00      	cmp	r3, #0
 8010102:	f000 8241 	beq.w	8010588 <_dtoa_r+0xb18>
 8010106:	601d      	str	r5, [r3, #0]
 8010108:	e23e      	b.n	8010588 <_dtoa_r+0xb18>
 801010a:	f8cd a020 	str.w	sl, [sp, #32]
 801010e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010112:	2a39      	cmp	r2, #57	; 0x39
 8010114:	f105 33ff 	add.w	r3, r5, #4294967295
 8010118:	d108      	bne.n	801012c <_dtoa_r+0x6bc>
 801011a:	459b      	cmp	fp, r3
 801011c:	d10a      	bne.n	8010134 <_dtoa_r+0x6c4>
 801011e:	9b08      	ldr	r3, [sp, #32]
 8010120:	3301      	adds	r3, #1
 8010122:	9308      	str	r3, [sp, #32]
 8010124:	2330      	movs	r3, #48	; 0x30
 8010126:	f88b 3000 	strb.w	r3, [fp]
 801012a:	465b      	mov	r3, fp
 801012c:	781a      	ldrb	r2, [r3, #0]
 801012e:	3201      	adds	r2, #1
 8010130:	701a      	strb	r2, [r3, #0]
 8010132:	e78c      	b.n	801004e <_dtoa_r+0x5de>
 8010134:	461d      	mov	r5, r3
 8010136:	e7ea      	b.n	801010e <_dtoa_r+0x69e>
 8010138:	2200      	movs	r2, #0
 801013a:	4b9b      	ldr	r3, [pc, #620]	; (80103a8 <_dtoa_r+0x938>)
 801013c:	f7f0 fa7c 	bl	8000638 <__aeabi_dmul>
 8010140:	2200      	movs	r2, #0
 8010142:	2300      	movs	r3, #0
 8010144:	4606      	mov	r6, r0
 8010146:	460f      	mov	r7, r1
 8010148:	f7f0 fcde 	bl	8000b08 <__aeabi_dcmpeq>
 801014c:	2800      	cmp	r0, #0
 801014e:	d09a      	beq.n	8010086 <_dtoa_r+0x616>
 8010150:	e7cb      	b.n	80100ea <_dtoa_r+0x67a>
 8010152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010154:	2a00      	cmp	r2, #0
 8010156:	f000 808b 	beq.w	8010270 <_dtoa_r+0x800>
 801015a:	9a06      	ldr	r2, [sp, #24]
 801015c:	2a01      	cmp	r2, #1
 801015e:	dc6e      	bgt.n	801023e <_dtoa_r+0x7ce>
 8010160:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8010162:	2a00      	cmp	r2, #0
 8010164:	d067      	beq.n	8010236 <_dtoa_r+0x7c6>
 8010166:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801016a:	9f07      	ldr	r7, [sp, #28]
 801016c:	9d05      	ldr	r5, [sp, #20]
 801016e:	9a05      	ldr	r2, [sp, #20]
 8010170:	2101      	movs	r1, #1
 8010172:	441a      	add	r2, r3
 8010174:	4620      	mov	r0, r4
 8010176:	9205      	str	r2, [sp, #20]
 8010178:	4498      	add	r8, r3
 801017a:	f000 fd1e 	bl	8010bba <__i2b>
 801017e:	4606      	mov	r6, r0
 8010180:	2d00      	cmp	r5, #0
 8010182:	dd0c      	ble.n	801019e <_dtoa_r+0x72e>
 8010184:	f1b8 0f00 	cmp.w	r8, #0
 8010188:	dd09      	ble.n	801019e <_dtoa_r+0x72e>
 801018a:	4545      	cmp	r5, r8
 801018c:	9a05      	ldr	r2, [sp, #20]
 801018e:	462b      	mov	r3, r5
 8010190:	bfa8      	it	ge
 8010192:	4643      	movge	r3, r8
 8010194:	1ad2      	subs	r2, r2, r3
 8010196:	9205      	str	r2, [sp, #20]
 8010198:	1aed      	subs	r5, r5, r3
 801019a:	eba8 0803 	sub.w	r8, r8, r3
 801019e:	9b07      	ldr	r3, [sp, #28]
 80101a0:	b1eb      	cbz	r3, 80101de <_dtoa_r+0x76e>
 80101a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d067      	beq.n	8010278 <_dtoa_r+0x808>
 80101a8:	b18f      	cbz	r7, 80101ce <_dtoa_r+0x75e>
 80101aa:	4631      	mov	r1, r6
 80101ac:	463a      	mov	r2, r7
 80101ae:	4620      	mov	r0, r4
 80101b0:	f000 fda2 	bl	8010cf8 <__pow5mult>
 80101b4:	9a04      	ldr	r2, [sp, #16]
 80101b6:	4601      	mov	r1, r0
 80101b8:	4606      	mov	r6, r0
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 fd06 	bl	8010bcc <__multiply>
 80101c0:	9904      	ldr	r1, [sp, #16]
 80101c2:	9008      	str	r0, [sp, #32]
 80101c4:	4620      	mov	r0, r4
 80101c6:	f000 fc58 	bl	8010a7a <_Bfree>
 80101ca:	9b08      	ldr	r3, [sp, #32]
 80101cc:	9304      	str	r3, [sp, #16]
 80101ce:	9b07      	ldr	r3, [sp, #28]
 80101d0:	1bda      	subs	r2, r3, r7
 80101d2:	d004      	beq.n	80101de <_dtoa_r+0x76e>
 80101d4:	9904      	ldr	r1, [sp, #16]
 80101d6:	4620      	mov	r0, r4
 80101d8:	f000 fd8e 	bl	8010cf8 <__pow5mult>
 80101dc:	9004      	str	r0, [sp, #16]
 80101de:	2101      	movs	r1, #1
 80101e0:	4620      	mov	r0, r4
 80101e2:	f000 fcea 	bl	8010bba <__i2b>
 80101e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80101e8:	4607      	mov	r7, r0
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	f000 81d0 	beq.w	8010590 <_dtoa_r+0xb20>
 80101f0:	461a      	mov	r2, r3
 80101f2:	4601      	mov	r1, r0
 80101f4:	4620      	mov	r0, r4
 80101f6:	f000 fd7f 	bl	8010cf8 <__pow5mult>
 80101fa:	9b06      	ldr	r3, [sp, #24]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	4607      	mov	r7, r0
 8010200:	dc40      	bgt.n	8010284 <_dtoa_r+0x814>
 8010202:	9b00      	ldr	r3, [sp, #0]
 8010204:	2b00      	cmp	r3, #0
 8010206:	d139      	bne.n	801027c <_dtoa_r+0x80c>
 8010208:	9b01      	ldr	r3, [sp, #4]
 801020a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801020e:	2b00      	cmp	r3, #0
 8010210:	d136      	bne.n	8010280 <_dtoa_r+0x810>
 8010212:	9b01      	ldr	r3, [sp, #4]
 8010214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010218:	0d1b      	lsrs	r3, r3, #20
 801021a:	051b      	lsls	r3, r3, #20
 801021c:	b12b      	cbz	r3, 801022a <_dtoa_r+0x7ba>
 801021e:	9b05      	ldr	r3, [sp, #20]
 8010220:	3301      	adds	r3, #1
 8010222:	9305      	str	r3, [sp, #20]
 8010224:	f108 0801 	add.w	r8, r8, #1
 8010228:	2301      	movs	r3, #1
 801022a:	9307      	str	r3, [sp, #28]
 801022c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801022e:	2b00      	cmp	r3, #0
 8010230:	d12a      	bne.n	8010288 <_dtoa_r+0x818>
 8010232:	2001      	movs	r0, #1
 8010234:	e030      	b.n	8010298 <_dtoa_r+0x828>
 8010236:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010238:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801023c:	e795      	b.n	801016a <_dtoa_r+0x6fa>
 801023e:	9b07      	ldr	r3, [sp, #28]
 8010240:	f109 37ff 	add.w	r7, r9, #4294967295
 8010244:	42bb      	cmp	r3, r7
 8010246:	bfbf      	itttt	lt
 8010248:	9b07      	ldrlt	r3, [sp, #28]
 801024a:	9707      	strlt	r7, [sp, #28]
 801024c:	1afa      	sublt	r2, r7, r3
 801024e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8010250:	bfbb      	ittet	lt
 8010252:	189b      	addlt	r3, r3, r2
 8010254:	930e      	strlt	r3, [sp, #56]	; 0x38
 8010256:	1bdf      	subge	r7, r3, r7
 8010258:	2700      	movlt	r7, #0
 801025a:	f1b9 0f00 	cmp.w	r9, #0
 801025e:	bfb5      	itete	lt
 8010260:	9b05      	ldrlt	r3, [sp, #20]
 8010262:	9d05      	ldrge	r5, [sp, #20]
 8010264:	eba3 0509 	sublt.w	r5, r3, r9
 8010268:	464b      	movge	r3, r9
 801026a:	bfb8      	it	lt
 801026c:	2300      	movlt	r3, #0
 801026e:	e77e      	b.n	801016e <_dtoa_r+0x6fe>
 8010270:	9f07      	ldr	r7, [sp, #28]
 8010272:	9d05      	ldr	r5, [sp, #20]
 8010274:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8010276:	e783      	b.n	8010180 <_dtoa_r+0x710>
 8010278:	9a07      	ldr	r2, [sp, #28]
 801027a:	e7ab      	b.n	80101d4 <_dtoa_r+0x764>
 801027c:	2300      	movs	r3, #0
 801027e:	e7d4      	b.n	801022a <_dtoa_r+0x7ba>
 8010280:	9b00      	ldr	r3, [sp, #0]
 8010282:	e7d2      	b.n	801022a <_dtoa_r+0x7ba>
 8010284:	2300      	movs	r3, #0
 8010286:	9307      	str	r3, [sp, #28]
 8010288:	693b      	ldr	r3, [r7, #16]
 801028a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801028e:	6918      	ldr	r0, [r3, #16]
 8010290:	f000 fc45 	bl	8010b1e <__hi0bits>
 8010294:	f1c0 0020 	rsb	r0, r0, #32
 8010298:	4440      	add	r0, r8
 801029a:	f010 001f 	ands.w	r0, r0, #31
 801029e:	d047      	beq.n	8010330 <_dtoa_r+0x8c0>
 80102a0:	f1c0 0320 	rsb	r3, r0, #32
 80102a4:	2b04      	cmp	r3, #4
 80102a6:	dd3b      	ble.n	8010320 <_dtoa_r+0x8b0>
 80102a8:	9b05      	ldr	r3, [sp, #20]
 80102aa:	f1c0 001c 	rsb	r0, r0, #28
 80102ae:	4403      	add	r3, r0
 80102b0:	9305      	str	r3, [sp, #20]
 80102b2:	4405      	add	r5, r0
 80102b4:	4480      	add	r8, r0
 80102b6:	9b05      	ldr	r3, [sp, #20]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	dd05      	ble.n	80102c8 <_dtoa_r+0x858>
 80102bc:	461a      	mov	r2, r3
 80102be:	9904      	ldr	r1, [sp, #16]
 80102c0:	4620      	mov	r0, r4
 80102c2:	f000 fd67 	bl	8010d94 <__lshift>
 80102c6:	9004      	str	r0, [sp, #16]
 80102c8:	f1b8 0f00 	cmp.w	r8, #0
 80102cc:	dd05      	ble.n	80102da <_dtoa_r+0x86a>
 80102ce:	4639      	mov	r1, r7
 80102d0:	4642      	mov	r2, r8
 80102d2:	4620      	mov	r0, r4
 80102d4:	f000 fd5e 	bl	8010d94 <__lshift>
 80102d8:	4607      	mov	r7, r0
 80102da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80102dc:	b353      	cbz	r3, 8010334 <_dtoa_r+0x8c4>
 80102de:	4639      	mov	r1, r7
 80102e0:	9804      	ldr	r0, [sp, #16]
 80102e2:	f000 fdab 	bl	8010e3c <__mcmp>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	da24      	bge.n	8010334 <_dtoa_r+0x8c4>
 80102ea:	2300      	movs	r3, #0
 80102ec:	220a      	movs	r2, #10
 80102ee:	9904      	ldr	r1, [sp, #16]
 80102f0:	4620      	mov	r0, r4
 80102f2:	f000 fbd9 	bl	8010aa8 <__multadd>
 80102f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80102f8:	9004      	str	r0, [sp, #16]
 80102fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f000 814d 	beq.w	801059e <_dtoa_r+0xb2e>
 8010304:	2300      	movs	r3, #0
 8010306:	4631      	mov	r1, r6
 8010308:	220a      	movs	r2, #10
 801030a:	4620      	mov	r0, r4
 801030c:	f000 fbcc 	bl	8010aa8 <__multadd>
 8010310:	9b02      	ldr	r3, [sp, #8]
 8010312:	2b00      	cmp	r3, #0
 8010314:	4606      	mov	r6, r0
 8010316:	dc4f      	bgt.n	80103b8 <_dtoa_r+0x948>
 8010318:	9b06      	ldr	r3, [sp, #24]
 801031a:	2b02      	cmp	r3, #2
 801031c:	dd4c      	ble.n	80103b8 <_dtoa_r+0x948>
 801031e:	e011      	b.n	8010344 <_dtoa_r+0x8d4>
 8010320:	d0c9      	beq.n	80102b6 <_dtoa_r+0x846>
 8010322:	9a05      	ldr	r2, [sp, #20]
 8010324:	331c      	adds	r3, #28
 8010326:	441a      	add	r2, r3
 8010328:	9205      	str	r2, [sp, #20]
 801032a:	441d      	add	r5, r3
 801032c:	4498      	add	r8, r3
 801032e:	e7c2      	b.n	80102b6 <_dtoa_r+0x846>
 8010330:	4603      	mov	r3, r0
 8010332:	e7f6      	b.n	8010322 <_dtoa_r+0x8b2>
 8010334:	f1b9 0f00 	cmp.w	r9, #0
 8010338:	dc38      	bgt.n	80103ac <_dtoa_r+0x93c>
 801033a:	9b06      	ldr	r3, [sp, #24]
 801033c:	2b02      	cmp	r3, #2
 801033e:	dd35      	ble.n	80103ac <_dtoa_r+0x93c>
 8010340:	f8cd 9008 	str.w	r9, [sp, #8]
 8010344:	9b02      	ldr	r3, [sp, #8]
 8010346:	b963      	cbnz	r3, 8010362 <_dtoa_r+0x8f2>
 8010348:	4639      	mov	r1, r7
 801034a:	2205      	movs	r2, #5
 801034c:	4620      	mov	r0, r4
 801034e:	f000 fbab 	bl	8010aa8 <__multadd>
 8010352:	4601      	mov	r1, r0
 8010354:	4607      	mov	r7, r0
 8010356:	9804      	ldr	r0, [sp, #16]
 8010358:	f000 fd70 	bl	8010e3c <__mcmp>
 801035c:	2800      	cmp	r0, #0
 801035e:	f73f adcc 	bgt.w	800fefa <_dtoa_r+0x48a>
 8010362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010364:	465d      	mov	r5, fp
 8010366:	ea6f 0a03 	mvn.w	sl, r3
 801036a:	f04f 0900 	mov.w	r9, #0
 801036e:	4639      	mov	r1, r7
 8010370:	4620      	mov	r0, r4
 8010372:	f000 fb82 	bl	8010a7a <_Bfree>
 8010376:	2e00      	cmp	r6, #0
 8010378:	f43f aeb7 	beq.w	80100ea <_dtoa_r+0x67a>
 801037c:	f1b9 0f00 	cmp.w	r9, #0
 8010380:	d005      	beq.n	801038e <_dtoa_r+0x91e>
 8010382:	45b1      	cmp	r9, r6
 8010384:	d003      	beq.n	801038e <_dtoa_r+0x91e>
 8010386:	4649      	mov	r1, r9
 8010388:	4620      	mov	r0, r4
 801038a:	f000 fb76 	bl	8010a7a <_Bfree>
 801038e:	4631      	mov	r1, r6
 8010390:	4620      	mov	r0, r4
 8010392:	f000 fb72 	bl	8010a7a <_Bfree>
 8010396:	e6a8      	b.n	80100ea <_dtoa_r+0x67a>
 8010398:	2700      	movs	r7, #0
 801039a:	463e      	mov	r6, r7
 801039c:	e7e1      	b.n	8010362 <_dtoa_r+0x8f2>
 801039e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80103a2:	463e      	mov	r6, r7
 80103a4:	e5a9      	b.n	800fefa <_dtoa_r+0x48a>
 80103a6:	bf00      	nop
 80103a8:	40240000 	.word	0x40240000
 80103ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f000 80fa 	beq.w	80105ac <_dtoa_r+0xb3c>
 80103b8:	2d00      	cmp	r5, #0
 80103ba:	dd05      	ble.n	80103c8 <_dtoa_r+0x958>
 80103bc:	4631      	mov	r1, r6
 80103be:	462a      	mov	r2, r5
 80103c0:	4620      	mov	r0, r4
 80103c2:	f000 fce7 	bl	8010d94 <__lshift>
 80103c6:	4606      	mov	r6, r0
 80103c8:	9b07      	ldr	r3, [sp, #28]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d04c      	beq.n	8010468 <_dtoa_r+0x9f8>
 80103ce:	6871      	ldr	r1, [r6, #4]
 80103d0:	4620      	mov	r0, r4
 80103d2:	f000 fb1e 	bl	8010a12 <_Balloc>
 80103d6:	6932      	ldr	r2, [r6, #16]
 80103d8:	3202      	adds	r2, #2
 80103da:	4605      	mov	r5, r0
 80103dc:	0092      	lsls	r2, r2, #2
 80103de:	f106 010c 	add.w	r1, r6, #12
 80103e2:	300c      	adds	r0, #12
 80103e4:	f7fe faf2 	bl	800e9cc <memcpy>
 80103e8:	2201      	movs	r2, #1
 80103ea:	4629      	mov	r1, r5
 80103ec:	4620      	mov	r0, r4
 80103ee:	f000 fcd1 	bl	8010d94 <__lshift>
 80103f2:	9b00      	ldr	r3, [sp, #0]
 80103f4:	f8cd b014 	str.w	fp, [sp, #20]
 80103f8:	f003 0301 	and.w	r3, r3, #1
 80103fc:	46b1      	mov	r9, r6
 80103fe:	9307      	str	r3, [sp, #28]
 8010400:	4606      	mov	r6, r0
 8010402:	4639      	mov	r1, r7
 8010404:	9804      	ldr	r0, [sp, #16]
 8010406:	f7ff faa7 	bl	800f958 <quorem>
 801040a:	4649      	mov	r1, r9
 801040c:	4605      	mov	r5, r0
 801040e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8010412:	9804      	ldr	r0, [sp, #16]
 8010414:	f000 fd12 	bl	8010e3c <__mcmp>
 8010418:	4632      	mov	r2, r6
 801041a:	9000      	str	r0, [sp, #0]
 801041c:	4639      	mov	r1, r7
 801041e:	4620      	mov	r0, r4
 8010420:	f000 fd26 	bl	8010e70 <__mdiff>
 8010424:	68c3      	ldr	r3, [r0, #12]
 8010426:	4602      	mov	r2, r0
 8010428:	bb03      	cbnz	r3, 801046c <_dtoa_r+0x9fc>
 801042a:	4601      	mov	r1, r0
 801042c:	9008      	str	r0, [sp, #32]
 801042e:	9804      	ldr	r0, [sp, #16]
 8010430:	f000 fd04 	bl	8010e3c <__mcmp>
 8010434:	9a08      	ldr	r2, [sp, #32]
 8010436:	4603      	mov	r3, r0
 8010438:	4611      	mov	r1, r2
 801043a:	4620      	mov	r0, r4
 801043c:	9308      	str	r3, [sp, #32]
 801043e:	f000 fb1c 	bl	8010a7a <_Bfree>
 8010442:	9b08      	ldr	r3, [sp, #32]
 8010444:	b9a3      	cbnz	r3, 8010470 <_dtoa_r+0xa00>
 8010446:	9a06      	ldr	r2, [sp, #24]
 8010448:	b992      	cbnz	r2, 8010470 <_dtoa_r+0xa00>
 801044a:	9a07      	ldr	r2, [sp, #28]
 801044c:	b982      	cbnz	r2, 8010470 <_dtoa_r+0xa00>
 801044e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8010452:	d029      	beq.n	80104a8 <_dtoa_r+0xa38>
 8010454:	9b00      	ldr	r3, [sp, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	dd01      	ble.n	801045e <_dtoa_r+0x9ee>
 801045a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801045e:	9b05      	ldr	r3, [sp, #20]
 8010460:	1c5d      	adds	r5, r3, #1
 8010462:	f883 8000 	strb.w	r8, [r3]
 8010466:	e782      	b.n	801036e <_dtoa_r+0x8fe>
 8010468:	4630      	mov	r0, r6
 801046a:	e7c2      	b.n	80103f2 <_dtoa_r+0x982>
 801046c:	2301      	movs	r3, #1
 801046e:	e7e3      	b.n	8010438 <_dtoa_r+0x9c8>
 8010470:	9a00      	ldr	r2, [sp, #0]
 8010472:	2a00      	cmp	r2, #0
 8010474:	db04      	blt.n	8010480 <_dtoa_r+0xa10>
 8010476:	d125      	bne.n	80104c4 <_dtoa_r+0xa54>
 8010478:	9a06      	ldr	r2, [sp, #24]
 801047a:	bb1a      	cbnz	r2, 80104c4 <_dtoa_r+0xa54>
 801047c:	9a07      	ldr	r2, [sp, #28]
 801047e:	bb0a      	cbnz	r2, 80104c4 <_dtoa_r+0xa54>
 8010480:	2b00      	cmp	r3, #0
 8010482:	ddec      	ble.n	801045e <_dtoa_r+0x9ee>
 8010484:	2201      	movs	r2, #1
 8010486:	9904      	ldr	r1, [sp, #16]
 8010488:	4620      	mov	r0, r4
 801048a:	f000 fc83 	bl	8010d94 <__lshift>
 801048e:	4639      	mov	r1, r7
 8010490:	9004      	str	r0, [sp, #16]
 8010492:	f000 fcd3 	bl	8010e3c <__mcmp>
 8010496:	2800      	cmp	r0, #0
 8010498:	dc03      	bgt.n	80104a2 <_dtoa_r+0xa32>
 801049a:	d1e0      	bne.n	801045e <_dtoa_r+0x9ee>
 801049c:	f018 0f01 	tst.w	r8, #1
 80104a0:	d0dd      	beq.n	801045e <_dtoa_r+0x9ee>
 80104a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104a6:	d1d8      	bne.n	801045a <_dtoa_r+0x9ea>
 80104a8:	9b05      	ldr	r3, [sp, #20]
 80104aa:	9a05      	ldr	r2, [sp, #20]
 80104ac:	1c5d      	adds	r5, r3, #1
 80104ae:	2339      	movs	r3, #57	; 0x39
 80104b0:	7013      	strb	r3, [r2, #0]
 80104b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80104b6:	2b39      	cmp	r3, #57	; 0x39
 80104b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80104bc:	d04f      	beq.n	801055e <_dtoa_r+0xaee>
 80104be:	3301      	adds	r3, #1
 80104c0:	7013      	strb	r3, [r2, #0]
 80104c2:	e754      	b.n	801036e <_dtoa_r+0x8fe>
 80104c4:	9a05      	ldr	r2, [sp, #20]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f102 0501 	add.w	r5, r2, #1
 80104cc:	dd06      	ble.n	80104dc <_dtoa_r+0xa6c>
 80104ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80104d2:	d0e9      	beq.n	80104a8 <_dtoa_r+0xa38>
 80104d4:	f108 0801 	add.w	r8, r8, #1
 80104d8:	9b05      	ldr	r3, [sp, #20]
 80104da:	e7c2      	b.n	8010462 <_dtoa_r+0x9f2>
 80104dc:	9a02      	ldr	r2, [sp, #8]
 80104de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80104e2:	eba5 030b 	sub.w	r3, r5, fp
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d021      	beq.n	801052e <_dtoa_r+0xabe>
 80104ea:	2300      	movs	r3, #0
 80104ec:	220a      	movs	r2, #10
 80104ee:	9904      	ldr	r1, [sp, #16]
 80104f0:	4620      	mov	r0, r4
 80104f2:	f000 fad9 	bl	8010aa8 <__multadd>
 80104f6:	45b1      	cmp	r9, r6
 80104f8:	9004      	str	r0, [sp, #16]
 80104fa:	f04f 0300 	mov.w	r3, #0
 80104fe:	f04f 020a 	mov.w	r2, #10
 8010502:	4649      	mov	r1, r9
 8010504:	4620      	mov	r0, r4
 8010506:	d105      	bne.n	8010514 <_dtoa_r+0xaa4>
 8010508:	f000 face 	bl	8010aa8 <__multadd>
 801050c:	4681      	mov	r9, r0
 801050e:	4606      	mov	r6, r0
 8010510:	9505      	str	r5, [sp, #20]
 8010512:	e776      	b.n	8010402 <_dtoa_r+0x992>
 8010514:	f000 fac8 	bl	8010aa8 <__multadd>
 8010518:	4631      	mov	r1, r6
 801051a:	4681      	mov	r9, r0
 801051c:	2300      	movs	r3, #0
 801051e:	220a      	movs	r2, #10
 8010520:	4620      	mov	r0, r4
 8010522:	f000 fac1 	bl	8010aa8 <__multadd>
 8010526:	4606      	mov	r6, r0
 8010528:	e7f2      	b.n	8010510 <_dtoa_r+0xaa0>
 801052a:	f04f 0900 	mov.w	r9, #0
 801052e:	2201      	movs	r2, #1
 8010530:	9904      	ldr	r1, [sp, #16]
 8010532:	4620      	mov	r0, r4
 8010534:	f000 fc2e 	bl	8010d94 <__lshift>
 8010538:	4639      	mov	r1, r7
 801053a:	9004      	str	r0, [sp, #16]
 801053c:	f000 fc7e 	bl	8010e3c <__mcmp>
 8010540:	2800      	cmp	r0, #0
 8010542:	dcb6      	bgt.n	80104b2 <_dtoa_r+0xa42>
 8010544:	d102      	bne.n	801054c <_dtoa_r+0xadc>
 8010546:	f018 0f01 	tst.w	r8, #1
 801054a:	d1b2      	bne.n	80104b2 <_dtoa_r+0xa42>
 801054c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010550:	2b30      	cmp	r3, #48	; 0x30
 8010552:	f105 32ff 	add.w	r2, r5, #4294967295
 8010556:	f47f af0a 	bne.w	801036e <_dtoa_r+0x8fe>
 801055a:	4615      	mov	r5, r2
 801055c:	e7f6      	b.n	801054c <_dtoa_r+0xadc>
 801055e:	4593      	cmp	fp, r2
 8010560:	d105      	bne.n	801056e <_dtoa_r+0xafe>
 8010562:	2331      	movs	r3, #49	; 0x31
 8010564:	f10a 0a01 	add.w	sl, sl, #1
 8010568:	f88b 3000 	strb.w	r3, [fp]
 801056c:	e6ff      	b.n	801036e <_dtoa_r+0x8fe>
 801056e:	4615      	mov	r5, r2
 8010570:	e79f      	b.n	80104b2 <_dtoa_r+0xa42>
 8010572:	f8df b064 	ldr.w	fp, [pc, #100]	; 80105d8 <_dtoa_r+0xb68>
 8010576:	e007      	b.n	8010588 <_dtoa_r+0xb18>
 8010578:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801057a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80105dc <_dtoa_r+0xb6c>
 801057e:	b11b      	cbz	r3, 8010588 <_dtoa_r+0xb18>
 8010580:	f10b 0308 	add.w	r3, fp, #8
 8010584:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8010586:	6013      	str	r3, [r2, #0]
 8010588:	4658      	mov	r0, fp
 801058a:	b017      	add	sp, #92	; 0x5c
 801058c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010590:	9b06      	ldr	r3, [sp, #24]
 8010592:	2b01      	cmp	r3, #1
 8010594:	f77f ae35 	ble.w	8010202 <_dtoa_r+0x792>
 8010598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801059a:	9307      	str	r3, [sp, #28]
 801059c:	e649      	b.n	8010232 <_dtoa_r+0x7c2>
 801059e:	9b02      	ldr	r3, [sp, #8]
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	dc03      	bgt.n	80105ac <_dtoa_r+0xb3c>
 80105a4:	9b06      	ldr	r3, [sp, #24]
 80105a6:	2b02      	cmp	r3, #2
 80105a8:	f73f aecc 	bgt.w	8010344 <_dtoa_r+0x8d4>
 80105ac:	465d      	mov	r5, fp
 80105ae:	4639      	mov	r1, r7
 80105b0:	9804      	ldr	r0, [sp, #16]
 80105b2:	f7ff f9d1 	bl	800f958 <quorem>
 80105b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80105ba:	f805 8b01 	strb.w	r8, [r5], #1
 80105be:	9a02      	ldr	r2, [sp, #8]
 80105c0:	eba5 030b 	sub.w	r3, r5, fp
 80105c4:	429a      	cmp	r2, r3
 80105c6:	ddb0      	ble.n	801052a <_dtoa_r+0xaba>
 80105c8:	2300      	movs	r3, #0
 80105ca:	220a      	movs	r2, #10
 80105cc:	9904      	ldr	r1, [sp, #16]
 80105ce:	4620      	mov	r0, r4
 80105d0:	f000 fa6a 	bl	8010aa8 <__multadd>
 80105d4:	9004      	str	r0, [sp, #16]
 80105d6:	e7ea      	b.n	80105ae <_dtoa_r+0xb3e>
 80105d8:	08013779 	.word	0x08013779
 80105dc:	0801379d 	.word	0x0801379d

080105e0 <__sflush_r>:
 80105e0:	898a      	ldrh	r2, [r1, #12]
 80105e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e6:	4605      	mov	r5, r0
 80105e8:	0710      	lsls	r0, r2, #28
 80105ea:	460c      	mov	r4, r1
 80105ec:	d458      	bmi.n	80106a0 <__sflush_r+0xc0>
 80105ee:	684b      	ldr	r3, [r1, #4]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	dc05      	bgt.n	8010600 <__sflush_r+0x20>
 80105f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	dc02      	bgt.n	8010600 <__sflush_r+0x20>
 80105fa:	2000      	movs	r0, #0
 80105fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010602:	2e00      	cmp	r6, #0
 8010604:	d0f9      	beq.n	80105fa <__sflush_r+0x1a>
 8010606:	2300      	movs	r3, #0
 8010608:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801060c:	682f      	ldr	r7, [r5, #0]
 801060e:	6a21      	ldr	r1, [r4, #32]
 8010610:	602b      	str	r3, [r5, #0]
 8010612:	d032      	beq.n	801067a <__sflush_r+0x9a>
 8010614:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010616:	89a3      	ldrh	r3, [r4, #12]
 8010618:	075a      	lsls	r2, r3, #29
 801061a:	d505      	bpl.n	8010628 <__sflush_r+0x48>
 801061c:	6863      	ldr	r3, [r4, #4]
 801061e:	1ac0      	subs	r0, r0, r3
 8010620:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010622:	b10b      	cbz	r3, 8010628 <__sflush_r+0x48>
 8010624:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010626:	1ac0      	subs	r0, r0, r3
 8010628:	2300      	movs	r3, #0
 801062a:	4602      	mov	r2, r0
 801062c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801062e:	6a21      	ldr	r1, [r4, #32]
 8010630:	4628      	mov	r0, r5
 8010632:	47b0      	blx	r6
 8010634:	1c43      	adds	r3, r0, #1
 8010636:	89a3      	ldrh	r3, [r4, #12]
 8010638:	d106      	bne.n	8010648 <__sflush_r+0x68>
 801063a:	6829      	ldr	r1, [r5, #0]
 801063c:	291d      	cmp	r1, #29
 801063e:	d848      	bhi.n	80106d2 <__sflush_r+0xf2>
 8010640:	4a29      	ldr	r2, [pc, #164]	; (80106e8 <__sflush_r+0x108>)
 8010642:	40ca      	lsrs	r2, r1
 8010644:	07d6      	lsls	r6, r2, #31
 8010646:	d544      	bpl.n	80106d2 <__sflush_r+0xf2>
 8010648:	2200      	movs	r2, #0
 801064a:	6062      	str	r2, [r4, #4]
 801064c:	04d9      	lsls	r1, r3, #19
 801064e:	6922      	ldr	r2, [r4, #16]
 8010650:	6022      	str	r2, [r4, #0]
 8010652:	d504      	bpl.n	801065e <__sflush_r+0x7e>
 8010654:	1c42      	adds	r2, r0, #1
 8010656:	d101      	bne.n	801065c <__sflush_r+0x7c>
 8010658:	682b      	ldr	r3, [r5, #0]
 801065a:	b903      	cbnz	r3, 801065e <__sflush_r+0x7e>
 801065c:	6560      	str	r0, [r4, #84]	; 0x54
 801065e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010660:	602f      	str	r7, [r5, #0]
 8010662:	2900      	cmp	r1, #0
 8010664:	d0c9      	beq.n	80105fa <__sflush_r+0x1a>
 8010666:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801066a:	4299      	cmp	r1, r3
 801066c:	d002      	beq.n	8010674 <__sflush_r+0x94>
 801066e:	4628      	mov	r0, r5
 8010670:	f7fe f9c0 	bl	800e9f4 <_free_r>
 8010674:	2000      	movs	r0, #0
 8010676:	6360      	str	r0, [r4, #52]	; 0x34
 8010678:	e7c0      	b.n	80105fc <__sflush_r+0x1c>
 801067a:	2301      	movs	r3, #1
 801067c:	4628      	mov	r0, r5
 801067e:	47b0      	blx	r6
 8010680:	1c41      	adds	r1, r0, #1
 8010682:	d1c8      	bne.n	8010616 <__sflush_r+0x36>
 8010684:	682b      	ldr	r3, [r5, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d0c5      	beq.n	8010616 <__sflush_r+0x36>
 801068a:	2b1d      	cmp	r3, #29
 801068c:	d001      	beq.n	8010692 <__sflush_r+0xb2>
 801068e:	2b16      	cmp	r3, #22
 8010690:	d101      	bne.n	8010696 <__sflush_r+0xb6>
 8010692:	602f      	str	r7, [r5, #0]
 8010694:	e7b1      	b.n	80105fa <__sflush_r+0x1a>
 8010696:	89a3      	ldrh	r3, [r4, #12]
 8010698:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801069c:	81a3      	strh	r3, [r4, #12]
 801069e:	e7ad      	b.n	80105fc <__sflush_r+0x1c>
 80106a0:	690f      	ldr	r7, [r1, #16]
 80106a2:	2f00      	cmp	r7, #0
 80106a4:	d0a9      	beq.n	80105fa <__sflush_r+0x1a>
 80106a6:	0793      	lsls	r3, r2, #30
 80106a8:	680e      	ldr	r6, [r1, #0]
 80106aa:	bf08      	it	eq
 80106ac:	694b      	ldreq	r3, [r1, #20]
 80106ae:	600f      	str	r7, [r1, #0]
 80106b0:	bf18      	it	ne
 80106b2:	2300      	movne	r3, #0
 80106b4:	eba6 0807 	sub.w	r8, r6, r7
 80106b8:	608b      	str	r3, [r1, #8]
 80106ba:	f1b8 0f00 	cmp.w	r8, #0
 80106be:	dd9c      	ble.n	80105fa <__sflush_r+0x1a>
 80106c0:	4643      	mov	r3, r8
 80106c2:	463a      	mov	r2, r7
 80106c4:	6a21      	ldr	r1, [r4, #32]
 80106c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80106c8:	4628      	mov	r0, r5
 80106ca:	47b0      	blx	r6
 80106cc:	2800      	cmp	r0, #0
 80106ce:	dc06      	bgt.n	80106de <__sflush_r+0xfe>
 80106d0:	89a3      	ldrh	r3, [r4, #12]
 80106d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106d6:	81a3      	strh	r3, [r4, #12]
 80106d8:	f04f 30ff 	mov.w	r0, #4294967295
 80106dc:	e78e      	b.n	80105fc <__sflush_r+0x1c>
 80106de:	4407      	add	r7, r0
 80106e0:	eba8 0800 	sub.w	r8, r8, r0
 80106e4:	e7e9      	b.n	80106ba <__sflush_r+0xda>
 80106e6:	bf00      	nop
 80106e8:	20400001 	.word	0x20400001

080106ec <_fflush_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	690b      	ldr	r3, [r1, #16]
 80106f0:	4605      	mov	r5, r0
 80106f2:	460c      	mov	r4, r1
 80106f4:	b1db      	cbz	r3, 801072e <_fflush_r+0x42>
 80106f6:	b118      	cbz	r0, 8010700 <_fflush_r+0x14>
 80106f8:	6983      	ldr	r3, [r0, #24]
 80106fa:	b90b      	cbnz	r3, 8010700 <_fflush_r+0x14>
 80106fc:	f000 f860 	bl	80107c0 <__sinit>
 8010700:	4b0c      	ldr	r3, [pc, #48]	; (8010734 <_fflush_r+0x48>)
 8010702:	429c      	cmp	r4, r3
 8010704:	d109      	bne.n	801071a <_fflush_r+0x2e>
 8010706:	686c      	ldr	r4, [r5, #4]
 8010708:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801070c:	b17b      	cbz	r3, 801072e <_fflush_r+0x42>
 801070e:	4621      	mov	r1, r4
 8010710:	4628      	mov	r0, r5
 8010712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010716:	f7ff bf63 	b.w	80105e0 <__sflush_r>
 801071a:	4b07      	ldr	r3, [pc, #28]	; (8010738 <_fflush_r+0x4c>)
 801071c:	429c      	cmp	r4, r3
 801071e:	d101      	bne.n	8010724 <_fflush_r+0x38>
 8010720:	68ac      	ldr	r4, [r5, #8]
 8010722:	e7f1      	b.n	8010708 <_fflush_r+0x1c>
 8010724:	4b05      	ldr	r3, [pc, #20]	; (801073c <_fflush_r+0x50>)
 8010726:	429c      	cmp	r4, r3
 8010728:	bf08      	it	eq
 801072a:	68ec      	ldreq	r4, [r5, #12]
 801072c:	e7ec      	b.n	8010708 <_fflush_r+0x1c>
 801072e:	2000      	movs	r0, #0
 8010730:	bd38      	pop	{r3, r4, r5, pc}
 8010732:	bf00      	nop
 8010734:	080137cc 	.word	0x080137cc
 8010738:	080137ec 	.word	0x080137ec
 801073c:	080137ac 	.word	0x080137ac

08010740 <std>:
 8010740:	2300      	movs	r3, #0
 8010742:	b510      	push	{r4, lr}
 8010744:	4604      	mov	r4, r0
 8010746:	e9c0 3300 	strd	r3, r3, [r0]
 801074a:	6083      	str	r3, [r0, #8]
 801074c:	8181      	strh	r1, [r0, #12]
 801074e:	6643      	str	r3, [r0, #100]	; 0x64
 8010750:	81c2      	strh	r2, [r0, #14]
 8010752:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010756:	6183      	str	r3, [r0, #24]
 8010758:	4619      	mov	r1, r3
 801075a:	2208      	movs	r2, #8
 801075c:	305c      	adds	r0, #92	; 0x5c
 801075e:	f7fe f940 	bl	800e9e2 <memset>
 8010762:	4b05      	ldr	r3, [pc, #20]	; (8010778 <std+0x38>)
 8010764:	6263      	str	r3, [r4, #36]	; 0x24
 8010766:	4b05      	ldr	r3, [pc, #20]	; (801077c <std+0x3c>)
 8010768:	62a3      	str	r3, [r4, #40]	; 0x28
 801076a:	4b05      	ldr	r3, [pc, #20]	; (8010780 <std+0x40>)
 801076c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801076e:	4b05      	ldr	r3, [pc, #20]	; (8010784 <std+0x44>)
 8010770:	6224      	str	r4, [r4, #32]
 8010772:	6323      	str	r3, [r4, #48]	; 0x30
 8010774:	bd10      	pop	{r4, pc}
 8010776:	bf00      	nop
 8010778:	0800f6fd 	.word	0x0800f6fd
 801077c:	0800f71f 	.word	0x0800f71f
 8010780:	0800f757 	.word	0x0800f757
 8010784:	0800f77b 	.word	0x0800f77b

08010788 <_cleanup_r>:
 8010788:	4901      	ldr	r1, [pc, #4]	; (8010790 <_cleanup_r+0x8>)
 801078a:	f000 b885 	b.w	8010898 <_fwalk_reent>
 801078e:	bf00      	nop
 8010790:	080106ed 	.word	0x080106ed

08010794 <__sfmoreglue>:
 8010794:	b570      	push	{r4, r5, r6, lr}
 8010796:	1e4a      	subs	r2, r1, #1
 8010798:	2568      	movs	r5, #104	; 0x68
 801079a:	4355      	muls	r5, r2
 801079c:	460e      	mov	r6, r1
 801079e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80107a2:	f7fe f975 	bl	800ea90 <_malloc_r>
 80107a6:	4604      	mov	r4, r0
 80107a8:	b140      	cbz	r0, 80107bc <__sfmoreglue+0x28>
 80107aa:	2100      	movs	r1, #0
 80107ac:	e9c0 1600 	strd	r1, r6, [r0]
 80107b0:	300c      	adds	r0, #12
 80107b2:	60a0      	str	r0, [r4, #8]
 80107b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80107b8:	f7fe f913 	bl	800e9e2 <memset>
 80107bc:	4620      	mov	r0, r4
 80107be:	bd70      	pop	{r4, r5, r6, pc}

080107c0 <__sinit>:
 80107c0:	6983      	ldr	r3, [r0, #24]
 80107c2:	b510      	push	{r4, lr}
 80107c4:	4604      	mov	r4, r0
 80107c6:	bb33      	cbnz	r3, 8010816 <__sinit+0x56>
 80107c8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80107cc:	6503      	str	r3, [r0, #80]	; 0x50
 80107ce:	4b12      	ldr	r3, [pc, #72]	; (8010818 <__sinit+0x58>)
 80107d0:	4a12      	ldr	r2, [pc, #72]	; (801081c <__sinit+0x5c>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	6282      	str	r2, [r0, #40]	; 0x28
 80107d6:	4298      	cmp	r0, r3
 80107d8:	bf04      	itt	eq
 80107da:	2301      	moveq	r3, #1
 80107dc:	6183      	streq	r3, [r0, #24]
 80107de:	f000 f81f 	bl	8010820 <__sfp>
 80107e2:	6060      	str	r0, [r4, #4]
 80107e4:	4620      	mov	r0, r4
 80107e6:	f000 f81b 	bl	8010820 <__sfp>
 80107ea:	60a0      	str	r0, [r4, #8]
 80107ec:	4620      	mov	r0, r4
 80107ee:	f000 f817 	bl	8010820 <__sfp>
 80107f2:	2200      	movs	r2, #0
 80107f4:	60e0      	str	r0, [r4, #12]
 80107f6:	2104      	movs	r1, #4
 80107f8:	6860      	ldr	r0, [r4, #4]
 80107fa:	f7ff ffa1 	bl	8010740 <std>
 80107fe:	2201      	movs	r2, #1
 8010800:	2109      	movs	r1, #9
 8010802:	68a0      	ldr	r0, [r4, #8]
 8010804:	f7ff ff9c 	bl	8010740 <std>
 8010808:	2202      	movs	r2, #2
 801080a:	2112      	movs	r1, #18
 801080c:	68e0      	ldr	r0, [r4, #12]
 801080e:	f7ff ff97 	bl	8010740 <std>
 8010812:	2301      	movs	r3, #1
 8010814:	61a3      	str	r3, [r4, #24]
 8010816:	bd10      	pop	{r4, pc}
 8010818:	08013754 	.word	0x08013754
 801081c:	08010789 	.word	0x08010789

08010820 <__sfp>:
 8010820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010822:	4b1b      	ldr	r3, [pc, #108]	; (8010890 <__sfp+0x70>)
 8010824:	681e      	ldr	r6, [r3, #0]
 8010826:	69b3      	ldr	r3, [r6, #24]
 8010828:	4607      	mov	r7, r0
 801082a:	b913      	cbnz	r3, 8010832 <__sfp+0x12>
 801082c:	4630      	mov	r0, r6
 801082e:	f7ff ffc7 	bl	80107c0 <__sinit>
 8010832:	3648      	adds	r6, #72	; 0x48
 8010834:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010838:	3b01      	subs	r3, #1
 801083a:	d503      	bpl.n	8010844 <__sfp+0x24>
 801083c:	6833      	ldr	r3, [r6, #0]
 801083e:	b133      	cbz	r3, 801084e <__sfp+0x2e>
 8010840:	6836      	ldr	r6, [r6, #0]
 8010842:	e7f7      	b.n	8010834 <__sfp+0x14>
 8010844:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010848:	b16d      	cbz	r5, 8010866 <__sfp+0x46>
 801084a:	3468      	adds	r4, #104	; 0x68
 801084c:	e7f4      	b.n	8010838 <__sfp+0x18>
 801084e:	2104      	movs	r1, #4
 8010850:	4638      	mov	r0, r7
 8010852:	f7ff ff9f 	bl	8010794 <__sfmoreglue>
 8010856:	6030      	str	r0, [r6, #0]
 8010858:	2800      	cmp	r0, #0
 801085a:	d1f1      	bne.n	8010840 <__sfp+0x20>
 801085c:	230c      	movs	r3, #12
 801085e:	603b      	str	r3, [r7, #0]
 8010860:	4604      	mov	r4, r0
 8010862:	4620      	mov	r0, r4
 8010864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010866:	4b0b      	ldr	r3, [pc, #44]	; (8010894 <__sfp+0x74>)
 8010868:	6665      	str	r5, [r4, #100]	; 0x64
 801086a:	e9c4 5500 	strd	r5, r5, [r4]
 801086e:	60a5      	str	r5, [r4, #8]
 8010870:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010874:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010878:	2208      	movs	r2, #8
 801087a:	4629      	mov	r1, r5
 801087c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010880:	f7fe f8af 	bl	800e9e2 <memset>
 8010884:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010888:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801088c:	e7e9      	b.n	8010862 <__sfp+0x42>
 801088e:	bf00      	nop
 8010890:	08013754 	.word	0x08013754
 8010894:	ffff0001 	.word	0xffff0001

08010898 <_fwalk_reent>:
 8010898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801089c:	4680      	mov	r8, r0
 801089e:	4689      	mov	r9, r1
 80108a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80108a4:	2600      	movs	r6, #0
 80108a6:	b914      	cbnz	r4, 80108ae <_fwalk_reent+0x16>
 80108a8:	4630      	mov	r0, r6
 80108aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80108ae:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80108b2:	3f01      	subs	r7, #1
 80108b4:	d501      	bpl.n	80108ba <_fwalk_reent+0x22>
 80108b6:	6824      	ldr	r4, [r4, #0]
 80108b8:	e7f5      	b.n	80108a6 <_fwalk_reent+0xe>
 80108ba:	89ab      	ldrh	r3, [r5, #12]
 80108bc:	2b01      	cmp	r3, #1
 80108be:	d907      	bls.n	80108d0 <_fwalk_reent+0x38>
 80108c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80108c4:	3301      	adds	r3, #1
 80108c6:	d003      	beq.n	80108d0 <_fwalk_reent+0x38>
 80108c8:	4629      	mov	r1, r5
 80108ca:	4640      	mov	r0, r8
 80108cc:	47c8      	blx	r9
 80108ce:	4306      	orrs	r6, r0
 80108d0:	3568      	adds	r5, #104	; 0x68
 80108d2:	e7ee      	b.n	80108b2 <_fwalk_reent+0x1a>

080108d4 <_localeconv_r>:
 80108d4:	4b04      	ldr	r3, [pc, #16]	; (80108e8 <_localeconv_r+0x14>)
 80108d6:	681b      	ldr	r3, [r3, #0]
 80108d8:	6a18      	ldr	r0, [r3, #32]
 80108da:	4b04      	ldr	r3, [pc, #16]	; (80108ec <_localeconv_r+0x18>)
 80108dc:	2800      	cmp	r0, #0
 80108de:	bf08      	it	eq
 80108e0:	4618      	moveq	r0, r3
 80108e2:	30f0      	adds	r0, #240	; 0xf0
 80108e4:	4770      	bx	lr
 80108e6:	bf00      	nop
 80108e8:	200001b4 	.word	0x200001b4
 80108ec:	20000218 	.word	0x20000218

080108f0 <_lseek_r>:
 80108f0:	b538      	push	{r3, r4, r5, lr}
 80108f2:	4c07      	ldr	r4, [pc, #28]	; (8010910 <_lseek_r+0x20>)
 80108f4:	4605      	mov	r5, r0
 80108f6:	4608      	mov	r0, r1
 80108f8:	4611      	mov	r1, r2
 80108fa:	2200      	movs	r2, #0
 80108fc:	6022      	str	r2, [r4, #0]
 80108fe:	461a      	mov	r2, r3
 8010900:	f7f3 f848 	bl	8003994 <_lseek>
 8010904:	1c43      	adds	r3, r0, #1
 8010906:	d102      	bne.n	801090e <_lseek_r+0x1e>
 8010908:	6823      	ldr	r3, [r4, #0]
 801090a:	b103      	cbz	r3, 801090e <_lseek_r+0x1e>
 801090c:	602b      	str	r3, [r5, #0]
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	20006320 	.word	0x20006320

08010914 <__swhatbuf_r>:
 8010914:	b570      	push	{r4, r5, r6, lr}
 8010916:	460e      	mov	r6, r1
 8010918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801091c:	2900      	cmp	r1, #0
 801091e:	b096      	sub	sp, #88	; 0x58
 8010920:	4614      	mov	r4, r2
 8010922:	461d      	mov	r5, r3
 8010924:	da07      	bge.n	8010936 <__swhatbuf_r+0x22>
 8010926:	2300      	movs	r3, #0
 8010928:	602b      	str	r3, [r5, #0]
 801092a:	89b3      	ldrh	r3, [r6, #12]
 801092c:	061a      	lsls	r2, r3, #24
 801092e:	d410      	bmi.n	8010952 <__swhatbuf_r+0x3e>
 8010930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010934:	e00e      	b.n	8010954 <__swhatbuf_r+0x40>
 8010936:	466a      	mov	r2, sp
 8010938:	f000 fd22 	bl	8011380 <_fstat_r>
 801093c:	2800      	cmp	r0, #0
 801093e:	dbf2      	blt.n	8010926 <__swhatbuf_r+0x12>
 8010940:	9a01      	ldr	r2, [sp, #4]
 8010942:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010946:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801094a:	425a      	negs	r2, r3
 801094c:	415a      	adcs	r2, r3
 801094e:	602a      	str	r2, [r5, #0]
 8010950:	e7ee      	b.n	8010930 <__swhatbuf_r+0x1c>
 8010952:	2340      	movs	r3, #64	; 0x40
 8010954:	2000      	movs	r0, #0
 8010956:	6023      	str	r3, [r4, #0]
 8010958:	b016      	add	sp, #88	; 0x58
 801095a:	bd70      	pop	{r4, r5, r6, pc}

0801095c <__smakebuf_r>:
 801095c:	898b      	ldrh	r3, [r1, #12]
 801095e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010960:	079d      	lsls	r5, r3, #30
 8010962:	4606      	mov	r6, r0
 8010964:	460c      	mov	r4, r1
 8010966:	d507      	bpl.n	8010978 <__smakebuf_r+0x1c>
 8010968:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801096c:	6023      	str	r3, [r4, #0]
 801096e:	6123      	str	r3, [r4, #16]
 8010970:	2301      	movs	r3, #1
 8010972:	6163      	str	r3, [r4, #20]
 8010974:	b002      	add	sp, #8
 8010976:	bd70      	pop	{r4, r5, r6, pc}
 8010978:	ab01      	add	r3, sp, #4
 801097a:	466a      	mov	r2, sp
 801097c:	f7ff ffca 	bl	8010914 <__swhatbuf_r>
 8010980:	9900      	ldr	r1, [sp, #0]
 8010982:	4605      	mov	r5, r0
 8010984:	4630      	mov	r0, r6
 8010986:	f7fe f883 	bl	800ea90 <_malloc_r>
 801098a:	b948      	cbnz	r0, 80109a0 <__smakebuf_r+0x44>
 801098c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010990:	059a      	lsls	r2, r3, #22
 8010992:	d4ef      	bmi.n	8010974 <__smakebuf_r+0x18>
 8010994:	f023 0303 	bic.w	r3, r3, #3
 8010998:	f043 0302 	orr.w	r3, r3, #2
 801099c:	81a3      	strh	r3, [r4, #12]
 801099e:	e7e3      	b.n	8010968 <__smakebuf_r+0xc>
 80109a0:	4b0d      	ldr	r3, [pc, #52]	; (80109d8 <__smakebuf_r+0x7c>)
 80109a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	6020      	str	r0, [r4, #0]
 80109a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80109ac:	81a3      	strh	r3, [r4, #12]
 80109ae:	9b00      	ldr	r3, [sp, #0]
 80109b0:	6163      	str	r3, [r4, #20]
 80109b2:	9b01      	ldr	r3, [sp, #4]
 80109b4:	6120      	str	r0, [r4, #16]
 80109b6:	b15b      	cbz	r3, 80109d0 <__smakebuf_r+0x74>
 80109b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80109bc:	4630      	mov	r0, r6
 80109be:	f000 fcf1 	bl	80113a4 <_isatty_r>
 80109c2:	b128      	cbz	r0, 80109d0 <__smakebuf_r+0x74>
 80109c4:	89a3      	ldrh	r3, [r4, #12]
 80109c6:	f023 0303 	bic.w	r3, r3, #3
 80109ca:	f043 0301 	orr.w	r3, r3, #1
 80109ce:	81a3      	strh	r3, [r4, #12]
 80109d0:	89a3      	ldrh	r3, [r4, #12]
 80109d2:	431d      	orrs	r5, r3
 80109d4:	81a5      	strh	r5, [r4, #12]
 80109d6:	e7cd      	b.n	8010974 <__smakebuf_r+0x18>
 80109d8:	08010789 	.word	0x08010789

080109dc <memmove>:
 80109dc:	4288      	cmp	r0, r1
 80109de:	b510      	push	{r4, lr}
 80109e0:	eb01 0302 	add.w	r3, r1, r2
 80109e4:	d807      	bhi.n	80109f6 <memmove+0x1a>
 80109e6:	1e42      	subs	r2, r0, #1
 80109e8:	4299      	cmp	r1, r3
 80109ea:	d00a      	beq.n	8010a02 <memmove+0x26>
 80109ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80109f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80109f4:	e7f8      	b.n	80109e8 <memmove+0xc>
 80109f6:	4283      	cmp	r3, r0
 80109f8:	d9f5      	bls.n	80109e6 <memmove+0xa>
 80109fa:	1881      	adds	r1, r0, r2
 80109fc:	1ad2      	subs	r2, r2, r3
 80109fe:	42d3      	cmn	r3, r2
 8010a00:	d100      	bne.n	8010a04 <memmove+0x28>
 8010a02:	bd10      	pop	{r4, pc}
 8010a04:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a08:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010a0c:	e7f7      	b.n	80109fe <memmove+0x22>

08010a0e <__malloc_lock>:
 8010a0e:	4770      	bx	lr

08010a10 <__malloc_unlock>:
 8010a10:	4770      	bx	lr

08010a12 <_Balloc>:
 8010a12:	b570      	push	{r4, r5, r6, lr}
 8010a14:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010a16:	4604      	mov	r4, r0
 8010a18:	460e      	mov	r6, r1
 8010a1a:	b93d      	cbnz	r5, 8010a2c <_Balloc+0x1a>
 8010a1c:	2010      	movs	r0, #16
 8010a1e:	f7fd ffc5 	bl	800e9ac <malloc>
 8010a22:	6260      	str	r0, [r4, #36]	; 0x24
 8010a24:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010a28:	6005      	str	r5, [r0, #0]
 8010a2a:	60c5      	str	r5, [r0, #12]
 8010a2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010a2e:	68eb      	ldr	r3, [r5, #12]
 8010a30:	b183      	cbz	r3, 8010a54 <_Balloc+0x42>
 8010a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010a3a:	b9b8      	cbnz	r0, 8010a6c <_Balloc+0x5a>
 8010a3c:	2101      	movs	r1, #1
 8010a3e:	fa01 f506 	lsl.w	r5, r1, r6
 8010a42:	1d6a      	adds	r2, r5, #5
 8010a44:	0092      	lsls	r2, r2, #2
 8010a46:	4620      	mov	r0, r4
 8010a48:	f000 fabe 	bl	8010fc8 <_calloc_r>
 8010a4c:	b160      	cbz	r0, 8010a68 <_Balloc+0x56>
 8010a4e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010a52:	e00e      	b.n	8010a72 <_Balloc+0x60>
 8010a54:	2221      	movs	r2, #33	; 0x21
 8010a56:	2104      	movs	r1, #4
 8010a58:	4620      	mov	r0, r4
 8010a5a:	f000 fab5 	bl	8010fc8 <_calloc_r>
 8010a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010a60:	60e8      	str	r0, [r5, #12]
 8010a62:	68db      	ldr	r3, [r3, #12]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d1e4      	bne.n	8010a32 <_Balloc+0x20>
 8010a68:	2000      	movs	r0, #0
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}
 8010a6c:	6802      	ldr	r2, [r0, #0]
 8010a6e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010a72:	2300      	movs	r3, #0
 8010a74:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010a78:	e7f7      	b.n	8010a6a <_Balloc+0x58>

08010a7a <_Bfree>:
 8010a7a:	b570      	push	{r4, r5, r6, lr}
 8010a7c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010a7e:	4606      	mov	r6, r0
 8010a80:	460d      	mov	r5, r1
 8010a82:	b93c      	cbnz	r4, 8010a94 <_Bfree+0x1a>
 8010a84:	2010      	movs	r0, #16
 8010a86:	f7fd ff91 	bl	800e9ac <malloc>
 8010a8a:	6270      	str	r0, [r6, #36]	; 0x24
 8010a8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010a90:	6004      	str	r4, [r0, #0]
 8010a92:	60c4      	str	r4, [r0, #12]
 8010a94:	b13d      	cbz	r5, 8010aa6 <_Bfree+0x2c>
 8010a96:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010a98:	686a      	ldr	r2, [r5, #4]
 8010a9a:	68db      	ldr	r3, [r3, #12]
 8010a9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010aa0:	6029      	str	r1, [r5, #0]
 8010aa2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010aa6:	bd70      	pop	{r4, r5, r6, pc}

08010aa8 <__multadd>:
 8010aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aac:	690d      	ldr	r5, [r1, #16]
 8010aae:	461f      	mov	r7, r3
 8010ab0:	4606      	mov	r6, r0
 8010ab2:	460c      	mov	r4, r1
 8010ab4:	f101 0c14 	add.w	ip, r1, #20
 8010ab8:	2300      	movs	r3, #0
 8010aba:	f8dc 0000 	ldr.w	r0, [ip]
 8010abe:	b281      	uxth	r1, r0
 8010ac0:	fb02 7101 	mla	r1, r2, r1, r7
 8010ac4:	0c0f      	lsrs	r7, r1, #16
 8010ac6:	0c00      	lsrs	r0, r0, #16
 8010ac8:	fb02 7000 	mla	r0, r2, r0, r7
 8010acc:	b289      	uxth	r1, r1
 8010ace:	3301      	adds	r3, #1
 8010ad0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010ad4:	429d      	cmp	r5, r3
 8010ad6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010ada:	f84c 1b04 	str.w	r1, [ip], #4
 8010ade:	dcec      	bgt.n	8010aba <__multadd+0x12>
 8010ae0:	b1d7      	cbz	r7, 8010b18 <__multadd+0x70>
 8010ae2:	68a3      	ldr	r3, [r4, #8]
 8010ae4:	42ab      	cmp	r3, r5
 8010ae6:	dc12      	bgt.n	8010b0e <__multadd+0x66>
 8010ae8:	6861      	ldr	r1, [r4, #4]
 8010aea:	4630      	mov	r0, r6
 8010aec:	3101      	adds	r1, #1
 8010aee:	f7ff ff90 	bl	8010a12 <_Balloc>
 8010af2:	6922      	ldr	r2, [r4, #16]
 8010af4:	3202      	adds	r2, #2
 8010af6:	f104 010c 	add.w	r1, r4, #12
 8010afa:	4680      	mov	r8, r0
 8010afc:	0092      	lsls	r2, r2, #2
 8010afe:	300c      	adds	r0, #12
 8010b00:	f7fd ff64 	bl	800e9cc <memcpy>
 8010b04:	4621      	mov	r1, r4
 8010b06:	4630      	mov	r0, r6
 8010b08:	f7ff ffb7 	bl	8010a7a <_Bfree>
 8010b0c:	4644      	mov	r4, r8
 8010b0e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b12:	3501      	adds	r5, #1
 8010b14:	615f      	str	r7, [r3, #20]
 8010b16:	6125      	str	r5, [r4, #16]
 8010b18:	4620      	mov	r0, r4
 8010b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b1e <__hi0bits>:
 8010b1e:	0c02      	lsrs	r2, r0, #16
 8010b20:	0412      	lsls	r2, r2, #16
 8010b22:	4603      	mov	r3, r0
 8010b24:	b9b2      	cbnz	r2, 8010b54 <__hi0bits+0x36>
 8010b26:	0403      	lsls	r3, r0, #16
 8010b28:	2010      	movs	r0, #16
 8010b2a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010b2e:	bf04      	itt	eq
 8010b30:	021b      	lsleq	r3, r3, #8
 8010b32:	3008      	addeq	r0, #8
 8010b34:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010b38:	bf04      	itt	eq
 8010b3a:	011b      	lsleq	r3, r3, #4
 8010b3c:	3004      	addeq	r0, #4
 8010b3e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010b42:	bf04      	itt	eq
 8010b44:	009b      	lsleq	r3, r3, #2
 8010b46:	3002      	addeq	r0, #2
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	db06      	blt.n	8010b5a <__hi0bits+0x3c>
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	d503      	bpl.n	8010b58 <__hi0bits+0x3a>
 8010b50:	3001      	adds	r0, #1
 8010b52:	4770      	bx	lr
 8010b54:	2000      	movs	r0, #0
 8010b56:	e7e8      	b.n	8010b2a <__hi0bits+0xc>
 8010b58:	2020      	movs	r0, #32
 8010b5a:	4770      	bx	lr

08010b5c <__lo0bits>:
 8010b5c:	6803      	ldr	r3, [r0, #0]
 8010b5e:	f013 0207 	ands.w	r2, r3, #7
 8010b62:	4601      	mov	r1, r0
 8010b64:	d00b      	beq.n	8010b7e <__lo0bits+0x22>
 8010b66:	07da      	lsls	r2, r3, #31
 8010b68:	d423      	bmi.n	8010bb2 <__lo0bits+0x56>
 8010b6a:	0798      	lsls	r0, r3, #30
 8010b6c:	bf49      	itett	mi
 8010b6e:	085b      	lsrmi	r3, r3, #1
 8010b70:	089b      	lsrpl	r3, r3, #2
 8010b72:	2001      	movmi	r0, #1
 8010b74:	600b      	strmi	r3, [r1, #0]
 8010b76:	bf5c      	itt	pl
 8010b78:	600b      	strpl	r3, [r1, #0]
 8010b7a:	2002      	movpl	r0, #2
 8010b7c:	4770      	bx	lr
 8010b7e:	b298      	uxth	r0, r3
 8010b80:	b9a8      	cbnz	r0, 8010bae <__lo0bits+0x52>
 8010b82:	0c1b      	lsrs	r3, r3, #16
 8010b84:	2010      	movs	r0, #16
 8010b86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010b8a:	bf04      	itt	eq
 8010b8c:	0a1b      	lsreq	r3, r3, #8
 8010b8e:	3008      	addeq	r0, #8
 8010b90:	071a      	lsls	r2, r3, #28
 8010b92:	bf04      	itt	eq
 8010b94:	091b      	lsreq	r3, r3, #4
 8010b96:	3004      	addeq	r0, #4
 8010b98:	079a      	lsls	r2, r3, #30
 8010b9a:	bf04      	itt	eq
 8010b9c:	089b      	lsreq	r3, r3, #2
 8010b9e:	3002      	addeq	r0, #2
 8010ba0:	07da      	lsls	r2, r3, #31
 8010ba2:	d402      	bmi.n	8010baa <__lo0bits+0x4e>
 8010ba4:	085b      	lsrs	r3, r3, #1
 8010ba6:	d006      	beq.n	8010bb6 <__lo0bits+0x5a>
 8010ba8:	3001      	adds	r0, #1
 8010baa:	600b      	str	r3, [r1, #0]
 8010bac:	4770      	bx	lr
 8010bae:	4610      	mov	r0, r2
 8010bb0:	e7e9      	b.n	8010b86 <__lo0bits+0x2a>
 8010bb2:	2000      	movs	r0, #0
 8010bb4:	4770      	bx	lr
 8010bb6:	2020      	movs	r0, #32
 8010bb8:	4770      	bx	lr

08010bba <__i2b>:
 8010bba:	b510      	push	{r4, lr}
 8010bbc:	460c      	mov	r4, r1
 8010bbe:	2101      	movs	r1, #1
 8010bc0:	f7ff ff27 	bl	8010a12 <_Balloc>
 8010bc4:	2201      	movs	r2, #1
 8010bc6:	6144      	str	r4, [r0, #20]
 8010bc8:	6102      	str	r2, [r0, #16]
 8010bca:	bd10      	pop	{r4, pc}

08010bcc <__multiply>:
 8010bcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bd0:	4614      	mov	r4, r2
 8010bd2:	690a      	ldr	r2, [r1, #16]
 8010bd4:	6923      	ldr	r3, [r4, #16]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	bfb8      	it	lt
 8010bda:	460b      	movlt	r3, r1
 8010bdc:	4688      	mov	r8, r1
 8010bde:	bfbc      	itt	lt
 8010be0:	46a0      	movlt	r8, r4
 8010be2:	461c      	movlt	r4, r3
 8010be4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010be8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010bec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010bf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010bf4:	eb07 0609 	add.w	r6, r7, r9
 8010bf8:	42b3      	cmp	r3, r6
 8010bfa:	bfb8      	it	lt
 8010bfc:	3101      	addlt	r1, #1
 8010bfe:	f7ff ff08 	bl	8010a12 <_Balloc>
 8010c02:	f100 0514 	add.w	r5, r0, #20
 8010c06:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010c0a:	462b      	mov	r3, r5
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	4573      	cmp	r3, lr
 8010c10:	d316      	bcc.n	8010c40 <__multiply+0x74>
 8010c12:	f104 0214 	add.w	r2, r4, #20
 8010c16:	f108 0114 	add.w	r1, r8, #20
 8010c1a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010c1e:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010c22:	9300      	str	r3, [sp, #0]
 8010c24:	9b00      	ldr	r3, [sp, #0]
 8010c26:	9201      	str	r2, [sp, #4]
 8010c28:	4293      	cmp	r3, r2
 8010c2a:	d80c      	bhi.n	8010c46 <__multiply+0x7a>
 8010c2c:	2e00      	cmp	r6, #0
 8010c2e:	dd03      	ble.n	8010c38 <__multiply+0x6c>
 8010c30:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d05d      	beq.n	8010cf4 <__multiply+0x128>
 8010c38:	6106      	str	r6, [r0, #16]
 8010c3a:	b003      	add	sp, #12
 8010c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c40:	f843 2b04 	str.w	r2, [r3], #4
 8010c44:	e7e3      	b.n	8010c0e <__multiply+0x42>
 8010c46:	f8b2 b000 	ldrh.w	fp, [r2]
 8010c4a:	f1bb 0f00 	cmp.w	fp, #0
 8010c4e:	d023      	beq.n	8010c98 <__multiply+0xcc>
 8010c50:	4689      	mov	r9, r1
 8010c52:	46ac      	mov	ip, r5
 8010c54:	f04f 0800 	mov.w	r8, #0
 8010c58:	f859 4b04 	ldr.w	r4, [r9], #4
 8010c5c:	f8dc a000 	ldr.w	sl, [ip]
 8010c60:	b2a3      	uxth	r3, r4
 8010c62:	fa1f fa8a 	uxth.w	sl, sl
 8010c66:	fb0b a303 	mla	r3, fp, r3, sl
 8010c6a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010c6e:	f8dc 4000 	ldr.w	r4, [ip]
 8010c72:	4443      	add	r3, r8
 8010c74:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010c78:	fb0b 840a 	mla	r4, fp, sl, r8
 8010c7c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010c80:	46e2      	mov	sl, ip
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010c88:	454f      	cmp	r7, r9
 8010c8a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010c8e:	f84a 3b04 	str.w	r3, [sl], #4
 8010c92:	d82b      	bhi.n	8010cec <__multiply+0x120>
 8010c94:	f8cc 8004 	str.w	r8, [ip, #4]
 8010c98:	9b01      	ldr	r3, [sp, #4]
 8010c9a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010c9e:	3204      	adds	r2, #4
 8010ca0:	f1ba 0f00 	cmp.w	sl, #0
 8010ca4:	d020      	beq.n	8010ce8 <__multiply+0x11c>
 8010ca6:	682b      	ldr	r3, [r5, #0]
 8010ca8:	4689      	mov	r9, r1
 8010caa:	46a8      	mov	r8, r5
 8010cac:	f04f 0b00 	mov.w	fp, #0
 8010cb0:	f8b9 c000 	ldrh.w	ip, [r9]
 8010cb4:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010cb8:	fb0a 440c 	mla	r4, sl, ip, r4
 8010cbc:	445c      	add	r4, fp
 8010cbe:	46c4      	mov	ip, r8
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010cc6:	f84c 3b04 	str.w	r3, [ip], #4
 8010cca:	f859 3b04 	ldr.w	r3, [r9], #4
 8010cce:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010cd2:	0c1b      	lsrs	r3, r3, #16
 8010cd4:	fb0a b303 	mla	r3, sl, r3, fp
 8010cd8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010cdc:	454f      	cmp	r7, r9
 8010cde:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010ce2:	d805      	bhi.n	8010cf0 <__multiply+0x124>
 8010ce4:	f8c8 3004 	str.w	r3, [r8, #4]
 8010ce8:	3504      	adds	r5, #4
 8010cea:	e79b      	b.n	8010c24 <__multiply+0x58>
 8010cec:	46d4      	mov	ip, sl
 8010cee:	e7b3      	b.n	8010c58 <__multiply+0x8c>
 8010cf0:	46e0      	mov	r8, ip
 8010cf2:	e7dd      	b.n	8010cb0 <__multiply+0xe4>
 8010cf4:	3e01      	subs	r6, #1
 8010cf6:	e799      	b.n	8010c2c <__multiply+0x60>

08010cf8 <__pow5mult>:
 8010cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cfc:	4615      	mov	r5, r2
 8010cfe:	f012 0203 	ands.w	r2, r2, #3
 8010d02:	4606      	mov	r6, r0
 8010d04:	460f      	mov	r7, r1
 8010d06:	d007      	beq.n	8010d18 <__pow5mult+0x20>
 8010d08:	3a01      	subs	r2, #1
 8010d0a:	4c21      	ldr	r4, [pc, #132]	; (8010d90 <__pow5mult+0x98>)
 8010d0c:	2300      	movs	r3, #0
 8010d0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010d12:	f7ff fec9 	bl	8010aa8 <__multadd>
 8010d16:	4607      	mov	r7, r0
 8010d18:	10ad      	asrs	r5, r5, #2
 8010d1a:	d035      	beq.n	8010d88 <__pow5mult+0x90>
 8010d1c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010d1e:	b93c      	cbnz	r4, 8010d30 <__pow5mult+0x38>
 8010d20:	2010      	movs	r0, #16
 8010d22:	f7fd fe43 	bl	800e9ac <malloc>
 8010d26:	6270      	str	r0, [r6, #36]	; 0x24
 8010d28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010d2c:	6004      	str	r4, [r0, #0]
 8010d2e:	60c4      	str	r4, [r0, #12]
 8010d30:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010d34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010d38:	b94c      	cbnz	r4, 8010d4e <__pow5mult+0x56>
 8010d3a:	f240 2171 	movw	r1, #625	; 0x271
 8010d3e:	4630      	mov	r0, r6
 8010d40:	f7ff ff3b 	bl	8010bba <__i2b>
 8010d44:	2300      	movs	r3, #0
 8010d46:	f8c8 0008 	str.w	r0, [r8, #8]
 8010d4a:	4604      	mov	r4, r0
 8010d4c:	6003      	str	r3, [r0, #0]
 8010d4e:	f04f 0800 	mov.w	r8, #0
 8010d52:	07eb      	lsls	r3, r5, #31
 8010d54:	d50a      	bpl.n	8010d6c <__pow5mult+0x74>
 8010d56:	4639      	mov	r1, r7
 8010d58:	4622      	mov	r2, r4
 8010d5a:	4630      	mov	r0, r6
 8010d5c:	f7ff ff36 	bl	8010bcc <__multiply>
 8010d60:	4639      	mov	r1, r7
 8010d62:	4681      	mov	r9, r0
 8010d64:	4630      	mov	r0, r6
 8010d66:	f7ff fe88 	bl	8010a7a <_Bfree>
 8010d6a:	464f      	mov	r7, r9
 8010d6c:	106d      	asrs	r5, r5, #1
 8010d6e:	d00b      	beq.n	8010d88 <__pow5mult+0x90>
 8010d70:	6820      	ldr	r0, [r4, #0]
 8010d72:	b938      	cbnz	r0, 8010d84 <__pow5mult+0x8c>
 8010d74:	4622      	mov	r2, r4
 8010d76:	4621      	mov	r1, r4
 8010d78:	4630      	mov	r0, r6
 8010d7a:	f7ff ff27 	bl	8010bcc <__multiply>
 8010d7e:	6020      	str	r0, [r4, #0]
 8010d80:	f8c0 8000 	str.w	r8, [r0]
 8010d84:	4604      	mov	r4, r0
 8010d86:	e7e4      	b.n	8010d52 <__pow5mult+0x5a>
 8010d88:	4638      	mov	r0, r7
 8010d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d8e:	bf00      	nop
 8010d90:	08013900 	.word	0x08013900

08010d94 <__lshift>:
 8010d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d98:	460c      	mov	r4, r1
 8010d9a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010d9e:	6923      	ldr	r3, [r4, #16]
 8010da0:	6849      	ldr	r1, [r1, #4]
 8010da2:	eb0a 0903 	add.w	r9, sl, r3
 8010da6:	68a3      	ldr	r3, [r4, #8]
 8010da8:	4607      	mov	r7, r0
 8010daa:	4616      	mov	r6, r2
 8010dac:	f109 0501 	add.w	r5, r9, #1
 8010db0:	42ab      	cmp	r3, r5
 8010db2:	db32      	blt.n	8010e1a <__lshift+0x86>
 8010db4:	4638      	mov	r0, r7
 8010db6:	f7ff fe2c 	bl	8010a12 <_Balloc>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	4680      	mov	r8, r0
 8010dbe:	f100 0114 	add.w	r1, r0, #20
 8010dc2:	461a      	mov	r2, r3
 8010dc4:	4553      	cmp	r3, sl
 8010dc6:	db2b      	blt.n	8010e20 <__lshift+0x8c>
 8010dc8:	6920      	ldr	r0, [r4, #16]
 8010dca:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010dce:	f104 0314 	add.w	r3, r4, #20
 8010dd2:	f016 021f 	ands.w	r2, r6, #31
 8010dd6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010dda:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010dde:	d025      	beq.n	8010e2c <__lshift+0x98>
 8010de0:	f1c2 0e20 	rsb	lr, r2, #32
 8010de4:	2000      	movs	r0, #0
 8010de6:	681e      	ldr	r6, [r3, #0]
 8010de8:	468a      	mov	sl, r1
 8010dea:	4096      	lsls	r6, r2
 8010dec:	4330      	orrs	r0, r6
 8010dee:	f84a 0b04 	str.w	r0, [sl], #4
 8010df2:	f853 0b04 	ldr.w	r0, [r3], #4
 8010df6:	459c      	cmp	ip, r3
 8010df8:	fa20 f00e 	lsr.w	r0, r0, lr
 8010dfc:	d814      	bhi.n	8010e28 <__lshift+0x94>
 8010dfe:	6048      	str	r0, [r1, #4]
 8010e00:	b108      	cbz	r0, 8010e06 <__lshift+0x72>
 8010e02:	f109 0502 	add.w	r5, r9, #2
 8010e06:	3d01      	subs	r5, #1
 8010e08:	4638      	mov	r0, r7
 8010e0a:	f8c8 5010 	str.w	r5, [r8, #16]
 8010e0e:	4621      	mov	r1, r4
 8010e10:	f7ff fe33 	bl	8010a7a <_Bfree>
 8010e14:	4640      	mov	r0, r8
 8010e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e1a:	3101      	adds	r1, #1
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	e7c7      	b.n	8010db0 <__lshift+0x1c>
 8010e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010e24:	3301      	adds	r3, #1
 8010e26:	e7cd      	b.n	8010dc4 <__lshift+0x30>
 8010e28:	4651      	mov	r1, sl
 8010e2a:	e7dc      	b.n	8010de6 <__lshift+0x52>
 8010e2c:	3904      	subs	r1, #4
 8010e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010e32:	f841 2f04 	str.w	r2, [r1, #4]!
 8010e36:	459c      	cmp	ip, r3
 8010e38:	d8f9      	bhi.n	8010e2e <__lshift+0x9a>
 8010e3a:	e7e4      	b.n	8010e06 <__lshift+0x72>

08010e3c <__mcmp>:
 8010e3c:	6903      	ldr	r3, [r0, #16]
 8010e3e:	690a      	ldr	r2, [r1, #16]
 8010e40:	1a9b      	subs	r3, r3, r2
 8010e42:	b530      	push	{r4, r5, lr}
 8010e44:	d10c      	bne.n	8010e60 <__mcmp+0x24>
 8010e46:	0092      	lsls	r2, r2, #2
 8010e48:	3014      	adds	r0, #20
 8010e4a:	3114      	adds	r1, #20
 8010e4c:	1884      	adds	r4, r0, r2
 8010e4e:	4411      	add	r1, r2
 8010e50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010e54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010e58:	4295      	cmp	r5, r2
 8010e5a:	d003      	beq.n	8010e64 <__mcmp+0x28>
 8010e5c:	d305      	bcc.n	8010e6a <__mcmp+0x2e>
 8010e5e:	2301      	movs	r3, #1
 8010e60:	4618      	mov	r0, r3
 8010e62:	bd30      	pop	{r4, r5, pc}
 8010e64:	42a0      	cmp	r0, r4
 8010e66:	d3f3      	bcc.n	8010e50 <__mcmp+0x14>
 8010e68:	e7fa      	b.n	8010e60 <__mcmp+0x24>
 8010e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8010e6e:	e7f7      	b.n	8010e60 <__mcmp+0x24>

08010e70 <__mdiff>:
 8010e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e74:	460d      	mov	r5, r1
 8010e76:	4607      	mov	r7, r0
 8010e78:	4611      	mov	r1, r2
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	4614      	mov	r4, r2
 8010e7e:	f7ff ffdd 	bl	8010e3c <__mcmp>
 8010e82:	1e06      	subs	r6, r0, #0
 8010e84:	d108      	bne.n	8010e98 <__mdiff+0x28>
 8010e86:	4631      	mov	r1, r6
 8010e88:	4638      	mov	r0, r7
 8010e8a:	f7ff fdc2 	bl	8010a12 <_Balloc>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010e98:	bfa4      	itt	ge
 8010e9a:	4623      	movge	r3, r4
 8010e9c:	462c      	movge	r4, r5
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	6861      	ldr	r1, [r4, #4]
 8010ea2:	bfa6      	itte	ge
 8010ea4:	461d      	movge	r5, r3
 8010ea6:	2600      	movge	r6, #0
 8010ea8:	2601      	movlt	r6, #1
 8010eaa:	f7ff fdb2 	bl	8010a12 <_Balloc>
 8010eae:	692b      	ldr	r3, [r5, #16]
 8010eb0:	60c6      	str	r6, [r0, #12]
 8010eb2:	6926      	ldr	r6, [r4, #16]
 8010eb4:	f105 0914 	add.w	r9, r5, #20
 8010eb8:	f104 0214 	add.w	r2, r4, #20
 8010ebc:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010ec0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010ec4:	f100 0514 	add.w	r5, r0, #20
 8010ec8:	f04f 0e00 	mov.w	lr, #0
 8010ecc:	f852 ab04 	ldr.w	sl, [r2], #4
 8010ed0:	f859 4b04 	ldr.w	r4, [r9], #4
 8010ed4:	fa1e f18a 	uxtah	r1, lr, sl
 8010ed8:	b2a3      	uxth	r3, r4
 8010eda:	1ac9      	subs	r1, r1, r3
 8010edc:	0c23      	lsrs	r3, r4, #16
 8010ede:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010ee2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010ee6:	b289      	uxth	r1, r1
 8010ee8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010eec:	45c8      	cmp	r8, r9
 8010eee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010ef2:	4694      	mov	ip, r2
 8010ef4:	f845 3b04 	str.w	r3, [r5], #4
 8010ef8:	d8e8      	bhi.n	8010ecc <__mdiff+0x5c>
 8010efa:	45bc      	cmp	ip, r7
 8010efc:	d304      	bcc.n	8010f08 <__mdiff+0x98>
 8010efe:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010f02:	b183      	cbz	r3, 8010f26 <__mdiff+0xb6>
 8010f04:	6106      	str	r6, [r0, #16]
 8010f06:	e7c5      	b.n	8010e94 <__mdiff+0x24>
 8010f08:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010f0c:	fa1e f381 	uxtah	r3, lr, r1
 8010f10:	141a      	asrs	r2, r3, #16
 8010f12:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010f16:	b29b      	uxth	r3, r3
 8010f18:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f1c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010f20:	f845 3b04 	str.w	r3, [r5], #4
 8010f24:	e7e9      	b.n	8010efa <__mdiff+0x8a>
 8010f26:	3e01      	subs	r6, #1
 8010f28:	e7e9      	b.n	8010efe <__mdiff+0x8e>

08010f2a <__d2b>:
 8010f2a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010f2e:	460e      	mov	r6, r1
 8010f30:	2101      	movs	r1, #1
 8010f32:	ec59 8b10 	vmov	r8, r9, d0
 8010f36:	4615      	mov	r5, r2
 8010f38:	f7ff fd6b 	bl	8010a12 <_Balloc>
 8010f3c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010f40:	4607      	mov	r7, r0
 8010f42:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010f46:	bb34      	cbnz	r4, 8010f96 <__d2b+0x6c>
 8010f48:	9301      	str	r3, [sp, #4]
 8010f4a:	f1b8 0300 	subs.w	r3, r8, #0
 8010f4e:	d027      	beq.n	8010fa0 <__d2b+0x76>
 8010f50:	a802      	add	r0, sp, #8
 8010f52:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010f56:	f7ff fe01 	bl	8010b5c <__lo0bits>
 8010f5a:	9900      	ldr	r1, [sp, #0]
 8010f5c:	b1f0      	cbz	r0, 8010f9c <__d2b+0x72>
 8010f5e:	9a01      	ldr	r2, [sp, #4]
 8010f60:	f1c0 0320 	rsb	r3, r0, #32
 8010f64:	fa02 f303 	lsl.w	r3, r2, r3
 8010f68:	430b      	orrs	r3, r1
 8010f6a:	40c2      	lsrs	r2, r0
 8010f6c:	617b      	str	r3, [r7, #20]
 8010f6e:	9201      	str	r2, [sp, #4]
 8010f70:	9b01      	ldr	r3, [sp, #4]
 8010f72:	61bb      	str	r3, [r7, #24]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	bf14      	ite	ne
 8010f78:	2102      	movne	r1, #2
 8010f7a:	2101      	moveq	r1, #1
 8010f7c:	6139      	str	r1, [r7, #16]
 8010f7e:	b1c4      	cbz	r4, 8010fb2 <__d2b+0x88>
 8010f80:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010f84:	4404      	add	r4, r0
 8010f86:	6034      	str	r4, [r6, #0]
 8010f88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010f8c:	6028      	str	r0, [r5, #0]
 8010f8e:	4638      	mov	r0, r7
 8010f90:	b003      	add	sp, #12
 8010f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010f9a:	e7d5      	b.n	8010f48 <__d2b+0x1e>
 8010f9c:	6179      	str	r1, [r7, #20]
 8010f9e:	e7e7      	b.n	8010f70 <__d2b+0x46>
 8010fa0:	a801      	add	r0, sp, #4
 8010fa2:	f7ff fddb 	bl	8010b5c <__lo0bits>
 8010fa6:	9b01      	ldr	r3, [sp, #4]
 8010fa8:	617b      	str	r3, [r7, #20]
 8010faa:	2101      	movs	r1, #1
 8010fac:	6139      	str	r1, [r7, #16]
 8010fae:	3020      	adds	r0, #32
 8010fb0:	e7e5      	b.n	8010f7e <__d2b+0x54>
 8010fb2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010fb6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010fba:	6030      	str	r0, [r6, #0]
 8010fbc:	6918      	ldr	r0, [r3, #16]
 8010fbe:	f7ff fdae 	bl	8010b1e <__hi0bits>
 8010fc2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010fc6:	e7e1      	b.n	8010f8c <__d2b+0x62>

08010fc8 <_calloc_r>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	fb02 f401 	mul.w	r4, r2, r1
 8010fce:	4621      	mov	r1, r4
 8010fd0:	f7fd fd5e 	bl	800ea90 <_malloc_r>
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	b118      	cbz	r0, 8010fe0 <_calloc_r+0x18>
 8010fd8:	4622      	mov	r2, r4
 8010fda:	2100      	movs	r1, #0
 8010fdc:	f7fd fd01 	bl	800e9e2 <memset>
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	bd38      	pop	{r3, r4, r5, pc}

08010fe4 <_realloc_r>:
 8010fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fe6:	4607      	mov	r7, r0
 8010fe8:	4614      	mov	r4, r2
 8010fea:	460e      	mov	r6, r1
 8010fec:	b921      	cbnz	r1, 8010ff8 <_realloc_r+0x14>
 8010fee:	4611      	mov	r1, r2
 8010ff0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010ff4:	f7fd bd4c 	b.w	800ea90 <_malloc_r>
 8010ff8:	b922      	cbnz	r2, 8011004 <_realloc_r+0x20>
 8010ffa:	f7fd fcfb 	bl	800e9f4 <_free_r>
 8010ffe:	4625      	mov	r5, r4
 8011000:	4628      	mov	r0, r5
 8011002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011004:	f000 f9f0 	bl	80113e8 <_malloc_usable_size_r>
 8011008:	42a0      	cmp	r0, r4
 801100a:	d20f      	bcs.n	801102c <_realloc_r+0x48>
 801100c:	4621      	mov	r1, r4
 801100e:	4638      	mov	r0, r7
 8011010:	f7fd fd3e 	bl	800ea90 <_malloc_r>
 8011014:	4605      	mov	r5, r0
 8011016:	2800      	cmp	r0, #0
 8011018:	d0f2      	beq.n	8011000 <_realloc_r+0x1c>
 801101a:	4631      	mov	r1, r6
 801101c:	4622      	mov	r2, r4
 801101e:	f7fd fcd5 	bl	800e9cc <memcpy>
 8011022:	4631      	mov	r1, r6
 8011024:	4638      	mov	r0, r7
 8011026:	f7fd fce5 	bl	800e9f4 <_free_r>
 801102a:	e7e9      	b.n	8011000 <_realloc_r+0x1c>
 801102c:	4635      	mov	r5, r6
 801102e:	e7e7      	b.n	8011000 <_realloc_r+0x1c>

08011030 <__ssputs_r>:
 8011030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011034:	688e      	ldr	r6, [r1, #8]
 8011036:	429e      	cmp	r6, r3
 8011038:	4682      	mov	sl, r0
 801103a:	460c      	mov	r4, r1
 801103c:	4690      	mov	r8, r2
 801103e:	4699      	mov	r9, r3
 8011040:	d837      	bhi.n	80110b2 <__ssputs_r+0x82>
 8011042:	898a      	ldrh	r2, [r1, #12]
 8011044:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011048:	d031      	beq.n	80110ae <__ssputs_r+0x7e>
 801104a:	6825      	ldr	r5, [r4, #0]
 801104c:	6909      	ldr	r1, [r1, #16]
 801104e:	1a6f      	subs	r7, r5, r1
 8011050:	6965      	ldr	r5, [r4, #20]
 8011052:	2302      	movs	r3, #2
 8011054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011058:	fb95 f5f3 	sdiv	r5, r5, r3
 801105c:	f109 0301 	add.w	r3, r9, #1
 8011060:	443b      	add	r3, r7
 8011062:	429d      	cmp	r5, r3
 8011064:	bf38      	it	cc
 8011066:	461d      	movcc	r5, r3
 8011068:	0553      	lsls	r3, r2, #21
 801106a:	d530      	bpl.n	80110ce <__ssputs_r+0x9e>
 801106c:	4629      	mov	r1, r5
 801106e:	f7fd fd0f 	bl	800ea90 <_malloc_r>
 8011072:	4606      	mov	r6, r0
 8011074:	b950      	cbnz	r0, 801108c <__ssputs_r+0x5c>
 8011076:	230c      	movs	r3, #12
 8011078:	f8ca 3000 	str.w	r3, [sl]
 801107c:	89a3      	ldrh	r3, [r4, #12]
 801107e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011082:	81a3      	strh	r3, [r4, #12]
 8011084:	f04f 30ff 	mov.w	r0, #4294967295
 8011088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801108c:	463a      	mov	r2, r7
 801108e:	6921      	ldr	r1, [r4, #16]
 8011090:	f7fd fc9c 	bl	800e9cc <memcpy>
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801109a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801109e:	81a3      	strh	r3, [r4, #12]
 80110a0:	6126      	str	r6, [r4, #16]
 80110a2:	6165      	str	r5, [r4, #20]
 80110a4:	443e      	add	r6, r7
 80110a6:	1bed      	subs	r5, r5, r7
 80110a8:	6026      	str	r6, [r4, #0]
 80110aa:	60a5      	str	r5, [r4, #8]
 80110ac:	464e      	mov	r6, r9
 80110ae:	454e      	cmp	r6, r9
 80110b0:	d900      	bls.n	80110b4 <__ssputs_r+0x84>
 80110b2:	464e      	mov	r6, r9
 80110b4:	4632      	mov	r2, r6
 80110b6:	4641      	mov	r1, r8
 80110b8:	6820      	ldr	r0, [r4, #0]
 80110ba:	f7ff fc8f 	bl	80109dc <memmove>
 80110be:	68a3      	ldr	r3, [r4, #8]
 80110c0:	1b9b      	subs	r3, r3, r6
 80110c2:	60a3      	str	r3, [r4, #8]
 80110c4:	6823      	ldr	r3, [r4, #0]
 80110c6:	441e      	add	r6, r3
 80110c8:	6026      	str	r6, [r4, #0]
 80110ca:	2000      	movs	r0, #0
 80110cc:	e7dc      	b.n	8011088 <__ssputs_r+0x58>
 80110ce:	462a      	mov	r2, r5
 80110d0:	f7ff ff88 	bl	8010fe4 <_realloc_r>
 80110d4:	4606      	mov	r6, r0
 80110d6:	2800      	cmp	r0, #0
 80110d8:	d1e2      	bne.n	80110a0 <__ssputs_r+0x70>
 80110da:	6921      	ldr	r1, [r4, #16]
 80110dc:	4650      	mov	r0, sl
 80110de:	f7fd fc89 	bl	800e9f4 <_free_r>
 80110e2:	e7c8      	b.n	8011076 <__ssputs_r+0x46>

080110e4 <_svfiprintf_r>:
 80110e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110e8:	461d      	mov	r5, r3
 80110ea:	898b      	ldrh	r3, [r1, #12]
 80110ec:	061f      	lsls	r7, r3, #24
 80110ee:	b09d      	sub	sp, #116	; 0x74
 80110f0:	4680      	mov	r8, r0
 80110f2:	460c      	mov	r4, r1
 80110f4:	4616      	mov	r6, r2
 80110f6:	d50f      	bpl.n	8011118 <_svfiprintf_r+0x34>
 80110f8:	690b      	ldr	r3, [r1, #16]
 80110fa:	b96b      	cbnz	r3, 8011118 <_svfiprintf_r+0x34>
 80110fc:	2140      	movs	r1, #64	; 0x40
 80110fe:	f7fd fcc7 	bl	800ea90 <_malloc_r>
 8011102:	6020      	str	r0, [r4, #0]
 8011104:	6120      	str	r0, [r4, #16]
 8011106:	b928      	cbnz	r0, 8011114 <_svfiprintf_r+0x30>
 8011108:	230c      	movs	r3, #12
 801110a:	f8c8 3000 	str.w	r3, [r8]
 801110e:	f04f 30ff 	mov.w	r0, #4294967295
 8011112:	e0c8      	b.n	80112a6 <_svfiprintf_r+0x1c2>
 8011114:	2340      	movs	r3, #64	; 0x40
 8011116:	6163      	str	r3, [r4, #20]
 8011118:	2300      	movs	r3, #0
 801111a:	9309      	str	r3, [sp, #36]	; 0x24
 801111c:	2320      	movs	r3, #32
 801111e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011122:	2330      	movs	r3, #48	; 0x30
 8011124:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011128:	9503      	str	r5, [sp, #12]
 801112a:	f04f 0b01 	mov.w	fp, #1
 801112e:	4637      	mov	r7, r6
 8011130:	463d      	mov	r5, r7
 8011132:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011136:	b10b      	cbz	r3, 801113c <_svfiprintf_r+0x58>
 8011138:	2b25      	cmp	r3, #37	; 0x25
 801113a:	d13e      	bne.n	80111ba <_svfiprintf_r+0xd6>
 801113c:	ebb7 0a06 	subs.w	sl, r7, r6
 8011140:	d00b      	beq.n	801115a <_svfiprintf_r+0x76>
 8011142:	4653      	mov	r3, sl
 8011144:	4632      	mov	r2, r6
 8011146:	4621      	mov	r1, r4
 8011148:	4640      	mov	r0, r8
 801114a:	f7ff ff71 	bl	8011030 <__ssputs_r>
 801114e:	3001      	adds	r0, #1
 8011150:	f000 80a4 	beq.w	801129c <_svfiprintf_r+0x1b8>
 8011154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011156:	4453      	add	r3, sl
 8011158:	9309      	str	r3, [sp, #36]	; 0x24
 801115a:	783b      	ldrb	r3, [r7, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	f000 809d 	beq.w	801129c <_svfiprintf_r+0x1b8>
 8011162:	2300      	movs	r3, #0
 8011164:	f04f 32ff 	mov.w	r2, #4294967295
 8011168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801116c:	9304      	str	r3, [sp, #16]
 801116e:	9307      	str	r3, [sp, #28]
 8011170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011174:	931a      	str	r3, [sp, #104]	; 0x68
 8011176:	462f      	mov	r7, r5
 8011178:	2205      	movs	r2, #5
 801117a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801117e:	4850      	ldr	r0, [pc, #320]	; (80112c0 <_svfiprintf_r+0x1dc>)
 8011180:	f7ef f84e 	bl	8000220 <memchr>
 8011184:	9b04      	ldr	r3, [sp, #16]
 8011186:	b9d0      	cbnz	r0, 80111be <_svfiprintf_r+0xda>
 8011188:	06d9      	lsls	r1, r3, #27
 801118a:	bf44      	itt	mi
 801118c:	2220      	movmi	r2, #32
 801118e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011192:	071a      	lsls	r2, r3, #28
 8011194:	bf44      	itt	mi
 8011196:	222b      	movmi	r2, #43	; 0x2b
 8011198:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801119c:	782a      	ldrb	r2, [r5, #0]
 801119e:	2a2a      	cmp	r2, #42	; 0x2a
 80111a0:	d015      	beq.n	80111ce <_svfiprintf_r+0xea>
 80111a2:	9a07      	ldr	r2, [sp, #28]
 80111a4:	462f      	mov	r7, r5
 80111a6:	2000      	movs	r0, #0
 80111a8:	250a      	movs	r5, #10
 80111aa:	4639      	mov	r1, r7
 80111ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80111b0:	3b30      	subs	r3, #48	; 0x30
 80111b2:	2b09      	cmp	r3, #9
 80111b4:	d94d      	bls.n	8011252 <_svfiprintf_r+0x16e>
 80111b6:	b1b8      	cbz	r0, 80111e8 <_svfiprintf_r+0x104>
 80111b8:	e00f      	b.n	80111da <_svfiprintf_r+0xf6>
 80111ba:	462f      	mov	r7, r5
 80111bc:	e7b8      	b.n	8011130 <_svfiprintf_r+0x4c>
 80111be:	4a40      	ldr	r2, [pc, #256]	; (80112c0 <_svfiprintf_r+0x1dc>)
 80111c0:	1a80      	subs	r0, r0, r2
 80111c2:	fa0b f000 	lsl.w	r0, fp, r0
 80111c6:	4318      	orrs	r0, r3
 80111c8:	9004      	str	r0, [sp, #16]
 80111ca:	463d      	mov	r5, r7
 80111cc:	e7d3      	b.n	8011176 <_svfiprintf_r+0x92>
 80111ce:	9a03      	ldr	r2, [sp, #12]
 80111d0:	1d11      	adds	r1, r2, #4
 80111d2:	6812      	ldr	r2, [r2, #0]
 80111d4:	9103      	str	r1, [sp, #12]
 80111d6:	2a00      	cmp	r2, #0
 80111d8:	db01      	blt.n	80111de <_svfiprintf_r+0xfa>
 80111da:	9207      	str	r2, [sp, #28]
 80111dc:	e004      	b.n	80111e8 <_svfiprintf_r+0x104>
 80111de:	4252      	negs	r2, r2
 80111e0:	f043 0302 	orr.w	r3, r3, #2
 80111e4:	9207      	str	r2, [sp, #28]
 80111e6:	9304      	str	r3, [sp, #16]
 80111e8:	783b      	ldrb	r3, [r7, #0]
 80111ea:	2b2e      	cmp	r3, #46	; 0x2e
 80111ec:	d10c      	bne.n	8011208 <_svfiprintf_r+0x124>
 80111ee:	787b      	ldrb	r3, [r7, #1]
 80111f0:	2b2a      	cmp	r3, #42	; 0x2a
 80111f2:	d133      	bne.n	801125c <_svfiprintf_r+0x178>
 80111f4:	9b03      	ldr	r3, [sp, #12]
 80111f6:	1d1a      	adds	r2, r3, #4
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	9203      	str	r2, [sp, #12]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	bfb8      	it	lt
 8011200:	f04f 33ff 	movlt.w	r3, #4294967295
 8011204:	3702      	adds	r7, #2
 8011206:	9305      	str	r3, [sp, #20]
 8011208:	4d2e      	ldr	r5, [pc, #184]	; (80112c4 <_svfiprintf_r+0x1e0>)
 801120a:	7839      	ldrb	r1, [r7, #0]
 801120c:	2203      	movs	r2, #3
 801120e:	4628      	mov	r0, r5
 8011210:	f7ef f806 	bl	8000220 <memchr>
 8011214:	b138      	cbz	r0, 8011226 <_svfiprintf_r+0x142>
 8011216:	2340      	movs	r3, #64	; 0x40
 8011218:	1b40      	subs	r0, r0, r5
 801121a:	fa03 f000 	lsl.w	r0, r3, r0
 801121e:	9b04      	ldr	r3, [sp, #16]
 8011220:	4303      	orrs	r3, r0
 8011222:	3701      	adds	r7, #1
 8011224:	9304      	str	r3, [sp, #16]
 8011226:	7839      	ldrb	r1, [r7, #0]
 8011228:	4827      	ldr	r0, [pc, #156]	; (80112c8 <_svfiprintf_r+0x1e4>)
 801122a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801122e:	2206      	movs	r2, #6
 8011230:	1c7e      	adds	r6, r7, #1
 8011232:	f7ee fff5 	bl	8000220 <memchr>
 8011236:	2800      	cmp	r0, #0
 8011238:	d038      	beq.n	80112ac <_svfiprintf_r+0x1c8>
 801123a:	4b24      	ldr	r3, [pc, #144]	; (80112cc <_svfiprintf_r+0x1e8>)
 801123c:	bb13      	cbnz	r3, 8011284 <_svfiprintf_r+0x1a0>
 801123e:	9b03      	ldr	r3, [sp, #12]
 8011240:	3307      	adds	r3, #7
 8011242:	f023 0307 	bic.w	r3, r3, #7
 8011246:	3308      	adds	r3, #8
 8011248:	9303      	str	r3, [sp, #12]
 801124a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801124c:	444b      	add	r3, r9
 801124e:	9309      	str	r3, [sp, #36]	; 0x24
 8011250:	e76d      	b.n	801112e <_svfiprintf_r+0x4a>
 8011252:	fb05 3202 	mla	r2, r5, r2, r3
 8011256:	2001      	movs	r0, #1
 8011258:	460f      	mov	r7, r1
 801125a:	e7a6      	b.n	80111aa <_svfiprintf_r+0xc6>
 801125c:	2300      	movs	r3, #0
 801125e:	3701      	adds	r7, #1
 8011260:	9305      	str	r3, [sp, #20]
 8011262:	4619      	mov	r1, r3
 8011264:	250a      	movs	r5, #10
 8011266:	4638      	mov	r0, r7
 8011268:	f810 2b01 	ldrb.w	r2, [r0], #1
 801126c:	3a30      	subs	r2, #48	; 0x30
 801126e:	2a09      	cmp	r2, #9
 8011270:	d903      	bls.n	801127a <_svfiprintf_r+0x196>
 8011272:	2b00      	cmp	r3, #0
 8011274:	d0c8      	beq.n	8011208 <_svfiprintf_r+0x124>
 8011276:	9105      	str	r1, [sp, #20]
 8011278:	e7c6      	b.n	8011208 <_svfiprintf_r+0x124>
 801127a:	fb05 2101 	mla	r1, r5, r1, r2
 801127e:	2301      	movs	r3, #1
 8011280:	4607      	mov	r7, r0
 8011282:	e7f0      	b.n	8011266 <_svfiprintf_r+0x182>
 8011284:	ab03      	add	r3, sp, #12
 8011286:	9300      	str	r3, [sp, #0]
 8011288:	4622      	mov	r2, r4
 801128a:	4b11      	ldr	r3, [pc, #68]	; (80112d0 <_svfiprintf_r+0x1ec>)
 801128c:	a904      	add	r1, sp, #16
 801128e:	4640      	mov	r0, r8
 8011290:	f7fd fe2c 	bl	800eeec <_printf_float>
 8011294:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011298:	4681      	mov	r9, r0
 801129a:	d1d6      	bne.n	801124a <_svfiprintf_r+0x166>
 801129c:	89a3      	ldrh	r3, [r4, #12]
 801129e:	065b      	lsls	r3, r3, #25
 80112a0:	f53f af35 	bmi.w	801110e <_svfiprintf_r+0x2a>
 80112a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80112a6:	b01d      	add	sp, #116	; 0x74
 80112a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ac:	ab03      	add	r3, sp, #12
 80112ae:	9300      	str	r3, [sp, #0]
 80112b0:	4622      	mov	r2, r4
 80112b2:	4b07      	ldr	r3, [pc, #28]	; (80112d0 <_svfiprintf_r+0x1ec>)
 80112b4:	a904      	add	r1, sp, #16
 80112b6:	4640      	mov	r0, r8
 80112b8:	f7fe f8ce 	bl	800f458 <_printf_i>
 80112bc:	e7ea      	b.n	8011294 <_svfiprintf_r+0x1b0>
 80112be:	bf00      	nop
 80112c0:	08013758 	.word	0x08013758
 80112c4:	0801375e 	.word	0x0801375e
 80112c8:	08013762 	.word	0x08013762
 80112cc:	0800eeed 	.word	0x0800eeed
 80112d0:	08011031 	.word	0x08011031

080112d4 <_read_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4c07      	ldr	r4, [pc, #28]	; (80112f4 <_read_r+0x20>)
 80112d8:	4605      	mov	r5, r0
 80112da:	4608      	mov	r0, r1
 80112dc:	4611      	mov	r1, r2
 80112de:	2200      	movs	r2, #0
 80112e0:	6022      	str	r2, [r4, #0]
 80112e2:	461a      	mov	r2, r3
 80112e4:	f7f2 faf6 	bl	80038d4 <_read>
 80112e8:	1c43      	adds	r3, r0, #1
 80112ea:	d102      	bne.n	80112f2 <_read_r+0x1e>
 80112ec:	6823      	ldr	r3, [r4, #0]
 80112ee:	b103      	cbz	r3, 80112f2 <_read_r+0x1e>
 80112f0:	602b      	str	r3, [r5, #0]
 80112f2:	bd38      	pop	{r3, r4, r5, pc}
 80112f4:	20006320 	.word	0x20006320

080112f8 <_raise_r>:
 80112f8:	291f      	cmp	r1, #31
 80112fa:	b538      	push	{r3, r4, r5, lr}
 80112fc:	4604      	mov	r4, r0
 80112fe:	460d      	mov	r5, r1
 8011300:	d904      	bls.n	801130c <_raise_r+0x14>
 8011302:	2316      	movs	r3, #22
 8011304:	6003      	str	r3, [r0, #0]
 8011306:	f04f 30ff 	mov.w	r0, #4294967295
 801130a:	bd38      	pop	{r3, r4, r5, pc}
 801130c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801130e:	b112      	cbz	r2, 8011316 <_raise_r+0x1e>
 8011310:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011314:	b94b      	cbnz	r3, 801132a <_raise_r+0x32>
 8011316:	4620      	mov	r0, r4
 8011318:	f000 f830 	bl	801137c <_getpid_r>
 801131c:	462a      	mov	r2, r5
 801131e:	4601      	mov	r1, r0
 8011320:	4620      	mov	r0, r4
 8011322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011326:	f000 b817 	b.w	8011358 <_kill_r>
 801132a:	2b01      	cmp	r3, #1
 801132c:	d00a      	beq.n	8011344 <_raise_r+0x4c>
 801132e:	1c59      	adds	r1, r3, #1
 8011330:	d103      	bne.n	801133a <_raise_r+0x42>
 8011332:	2316      	movs	r3, #22
 8011334:	6003      	str	r3, [r0, #0]
 8011336:	2001      	movs	r0, #1
 8011338:	e7e7      	b.n	801130a <_raise_r+0x12>
 801133a:	2400      	movs	r4, #0
 801133c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011340:	4628      	mov	r0, r5
 8011342:	4798      	blx	r3
 8011344:	2000      	movs	r0, #0
 8011346:	e7e0      	b.n	801130a <_raise_r+0x12>

08011348 <raise>:
 8011348:	4b02      	ldr	r3, [pc, #8]	; (8011354 <raise+0xc>)
 801134a:	4601      	mov	r1, r0
 801134c:	6818      	ldr	r0, [r3, #0]
 801134e:	f7ff bfd3 	b.w	80112f8 <_raise_r>
 8011352:	bf00      	nop
 8011354:	200001b4 	.word	0x200001b4

08011358 <_kill_r>:
 8011358:	b538      	push	{r3, r4, r5, lr}
 801135a:	4c07      	ldr	r4, [pc, #28]	; (8011378 <_kill_r+0x20>)
 801135c:	2300      	movs	r3, #0
 801135e:	4605      	mov	r5, r0
 8011360:	4608      	mov	r0, r1
 8011362:	4611      	mov	r1, r2
 8011364:	6023      	str	r3, [r4, #0]
 8011366:	f7f2 fa9b 	bl	80038a0 <_kill>
 801136a:	1c43      	adds	r3, r0, #1
 801136c:	d102      	bne.n	8011374 <_kill_r+0x1c>
 801136e:	6823      	ldr	r3, [r4, #0]
 8011370:	b103      	cbz	r3, 8011374 <_kill_r+0x1c>
 8011372:	602b      	str	r3, [r5, #0]
 8011374:	bd38      	pop	{r3, r4, r5, pc}
 8011376:	bf00      	nop
 8011378:	20006320 	.word	0x20006320

0801137c <_getpid_r>:
 801137c:	f7f2 ba88 	b.w	8003890 <_getpid>

08011380 <_fstat_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	4c07      	ldr	r4, [pc, #28]	; (80113a0 <_fstat_r+0x20>)
 8011384:	2300      	movs	r3, #0
 8011386:	4605      	mov	r5, r0
 8011388:	4608      	mov	r0, r1
 801138a:	4611      	mov	r1, r2
 801138c:	6023      	str	r3, [r4, #0]
 801138e:	f7f2 fae6 	bl	800395e <_fstat>
 8011392:	1c43      	adds	r3, r0, #1
 8011394:	d102      	bne.n	801139c <_fstat_r+0x1c>
 8011396:	6823      	ldr	r3, [r4, #0]
 8011398:	b103      	cbz	r3, 801139c <_fstat_r+0x1c>
 801139a:	602b      	str	r3, [r5, #0]
 801139c:	bd38      	pop	{r3, r4, r5, pc}
 801139e:	bf00      	nop
 80113a0:	20006320 	.word	0x20006320

080113a4 <_isatty_r>:
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	4c06      	ldr	r4, [pc, #24]	; (80113c0 <_isatty_r+0x1c>)
 80113a8:	2300      	movs	r3, #0
 80113aa:	4605      	mov	r5, r0
 80113ac:	4608      	mov	r0, r1
 80113ae:	6023      	str	r3, [r4, #0]
 80113b0:	f7f2 fae5 	bl	800397e <_isatty>
 80113b4:	1c43      	adds	r3, r0, #1
 80113b6:	d102      	bne.n	80113be <_isatty_r+0x1a>
 80113b8:	6823      	ldr	r3, [r4, #0]
 80113ba:	b103      	cbz	r3, 80113be <_isatty_r+0x1a>
 80113bc:	602b      	str	r3, [r5, #0]
 80113be:	bd38      	pop	{r3, r4, r5, pc}
 80113c0:	20006320 	.word	0x20006320

080113c4 <__ascii_mbtowc>:
 80113c4:	b082      	sub	sp, #8
 80113c6:	b901      	cbnz	r1, 80113ca <__ascii_mbtowc+0x6>
 80113c8:	a901      	add	r1, sp, #4
 80113ca:	b142      	cbz	r2, 80113de <__ascii_mbtowc+0x1a>
 80113cc:	b14b      	cbz	r3, 80113e2 <__ascii_mbtowc+0x1e>
 80113ce:	7813      	ldrb	r3, [r2, #0]
 80113d0:	600b      	str	r3, [r1, #0]
 80113d2:	7812      	ldrb	r2, [r2, #0]
 80113d4:	1c10      	adds	r0, r2, #0
 80113d6:	bf18      	it	ne
 80113d8:	2001      	movne	r0, #1
 80113da:	b002      	add	sp, #8
 80113dc:	4770      	bx	lr
 80113de:	4610      	mov	r0, r2
 80113e0:	e7fb      	b.n	80113da <__ascii_mbtowc+0x16>
 80113e2:	f06f 0001 	mvn.w	r0, #1
 80113e6:	e7f8      	b.n	80113da <__ascii_mbtowc+0x16>

080113e8 <_malloc_usable_size_r>:
 80113e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80113ec:	1f18      	subs	r0, r3, #4
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	bfbc      	itt	lt
 80113f2:	580b      	ldrlt	r3, [r1, r0]
 80113f4:	18c0      	addlt	r0, r0, r3
 80113f6:	4770      	bx	lr

080113f8 <__ascii_wctomb>:
 80113f8:	b149      	cbz	r1, 801140e <__ascii_wctomb+0x16>
 80113fa:	2aff      	cmp	r2, #255	; 0xff
 80113fc:	bf85      	ittet	hi
 80113fe:	238a      	movhi	r3, #138	; 0x8a
 8011400:	6003      	strhi	r3, [r0, #0]
 8011402:	700a      	strbls	r2, [r1, #0]
 8011404:	f04f 30ff 	movhi.w	r0, #4294967295
 8011408:	bf98      	it	ls
 801140a:	2001      	movls	r0, #1
 801140c:	4770      	bx	lr
 801140e:	4608      	mov	r0, r1
 8011410:	4770      	bx	lr
 8011412:	0000      	movs	r0, r0
 8011414:	0000      	movs	r0, r0
	...

08011418 <cos>:
 8011418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801141a:	ec51 0b10 	vmov	r0, r1, d0
 801141e:	4a1e      	ldr	r2, [pc, #120]	; (8011498 <cos+0x80>)
 8011420:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011424:	4293      	cmp	r3, r2
 8011426:	dc06      	bgt.n	8011436 <cos+0x1e>
 8011428:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011490 <cos+0x78>
 801142c:	f000 fec8 	bl	80121c0 <__kernel_cos>
 8011430:	ec51 0b10 	vmov	r0, r1, d0
 8011434:	e007      	b.n	8011446 <cos+0x2e>
 8011436:	4a19      	ldr	r2, [pc, #100]	; (801149c <cos+0x84>)
 8011438:	4293      	cmp	r3, r2
 801143a:	dd09      	ble.n	8011450 <cos+0x38>
 801143c:	ee10 2a10 	vmov	r2, s0
 8011440:	460b      	mov	r3, r1
 8011442:	f7ee ff41 	bl	80002c8 <__aeabi_dsub>
 8011446:	ec41 0b10 	vmov	d0, r0, r1
 801144a:	b005      	add	sp, #20
 801144c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011450:	4668      	mov	r0, sp
 8011452:	f000 fc11 	bl	8011c78 <__ieee754_rem_pio2>
 8011456:	f000 0003 	and.w	r0, r0, #3
 801145a:	2801      	cmp	r0, #1
 801145c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011460:	ed9d 0b00 	vldr	d0, [sp]
 8011464:	d007      	beq.n	8011476 <cos+0x5e>
 8011466:	2802      	cmp	r0, #2
 8011468:	d00e      	beq.n	8011488 <cos+0x70>
 801146a:	2800      	cmp	r0, #0
 801146c:	d0de      	beq.n	801142c <cos+0x14>
 801146e:	2001      	movs	r0, #1
 8011470:	f001 faae 	bl	80129d0 <__kernel_sin>
 8011474:	e7dc      	b.n	8011430 <cos+0x18>
 8011476:	f001 faab 	bl	80129d0 <__kernel_sin>
 801147a:	ec53 2b10 	vmov	r2, r3, d0
 801147e:	ee10 0a10 	vmov	r0, s0
 8011482:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011486:	e7de      	b.n	8011446 <cos+0x2e>
 8011488:	f000 fe9a 	bl	80121c0 <__kernel_cos>
 801148c:	e7f5      	b.n	801147a <cos+0x62>
 801148e:	bf00      	nop
	...
 8011498:	3fe921fb 	.word	0x3fe921fb
 801149c:	7fefffff 	.word	0x7fefffff

080114a0 <sin>:
 80114a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114a2:	ec51 0b10 	vmov	r0, r1, d0
 80114a6:	4a20      	ldr	r2, [pc, #128]	; (8011528 <sin+0x88>)
 80114a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80114ac:	4293      	cmp	r3, r2
 80114ae:	dc07      	bgt.n	80114c0 <sin+0x20>
 80114b0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011520 <sin+0x80>
 80114b4:	2000      	movs	r0, #0
 80114b6:	f001 fa8b 	bl	80129d0 <__kernel_sin>
 80114ba:	ec51 0b10 	vmov	r0, r1, d0
 80114be:	e007      	b.n	80114d0 <sin+0x30>
 80114c0:	4a1a      	ldr	r2, [pc, #104]	; (801152c <sin+0x8c>)
 80114c2:	4293      	cmp	r3, r2
 80114c4:	dd09      	ble.n	80114da <sin+0x3a>
 80114c6:	ee10 2a10 	vmov	r2, s0
 80114ca:	460b      	mov	r3, r1
 80114cc:	f7ee fefc 	bl	80002c8 <__aeabi_dsub>
 80114d0:	ec41 0b10 	vmov	d0, r0, r1
 80114d4:	b005      	add	sp, #20
 80114d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80114da:	4668      	mov	r0, sp
 80114dc:	f000 fbcc 	bl	8011c78 <__ieee754_rem_pio2>
 80114e0:	f000 0003 	and.w	r0, r0, #3
 80114e4:	2801      	cmp	r0, #1
 80114e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80114ea:	ed9d 0b00 	vldr	d0, [sp]
 80114ee:	d004      	beq.n	80114fa <sin+0x5a>
 80114f0:	2802      	cmp	r0, #2
 80114f2:	d005      	beq.n	8011500 <sin+0x60>
 80114f4:	b970      	cbnz	r0, 8011514 <sin+0x74>
 80114f6:	2001      	movs	r0, #1
 80114f8:	e7dd      	b.n	80114b6 <sin+0x16>
 80114fa:	f000 fe61 	bl	80121c0 <__kernel_cos>
 80114fe:	e7dc      	b.n	80114ba <sin+0x1a>
 8011500:	2001      	movs	r0, #1
 8011502:	f001 fa65 	bl	80129d0 <__kernel_sin>
 8011506:	ec53 2b10 	vmov	r2, r3, d0
 801150a:	ee10 0a10 	vmov	r0, s0
 801150e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011512:	e7dd      	b.n	80114d0 <sin+0x30>
 8011514:	f000 fe54 	bl	80121c0 <__kernel_cos>
 8011518:	e7f5      	b.n	8011506 <sin+0x66>
 801151a:	bf00      	nop
 801151c:	f3af 8000 	nop.w
	...
 8011528:	3fe921fb 	.word	0x3fe921fb
 801152c:	7fefffff 	.word	0x7fefffff

08011530 <asin>:
 8011530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011532:	ed2d 8b02 	vpush	{d8}
 8011536:	4e26      	ldr	r6, [pc, #152]	; (80115d0 <asin+0xa0>)
 8011538:	b08b      	sub	sp, #44	; 0x2c
 801153a:	ec55 4b10 	vmov	r4, r5, d0
 801153e:	f000 f8ab 	bl	8011698 <__ieee754_asin>
 8011542:	f996 3000 	ldrsb.w	r3, [r6]
 8011546:	eeb0 8a40 	vmov.f32	s16, s0
 801154a:	eef0 8a60 	vmov.f32	s17, s1
 801154e:	3301      	adds	r3, #1
 8011550:	d036      	beq.n	80115c0 <asin+0x90>
 8011552:	4622      	mov	r2, r4
 8011554:	462b      	mov	r3, r5
 8011556:	4620      	mov	r0, r4
 8011558:	4629      	mov	r1, r5
 801155a:	f7ef fb07 	bl	8000b6c <__aeabi_dcmpun>
 801155e:	4607      	mov	r7, r0
 8011560:	bb70      	cbnz	r0, 80115c0 <asin+0x90>
 8011562:	ec45 4b10 	vmov	d0, r4, r5
 8011566:	f001 fc8f 	bl	8012e88 <fabs>
 801156a:	2200      	movs	r2, #0
 801156c:	4b19      	ldr	r3, [pc, #100]	; (80115d4 <asin+0xa4>)
 801156e:	ec51 0b10 	vmov	r0, r1, d0
 8011572:	f7ef faf1 	bl	8000b58 <__aeabi_dcmpgt>
 8011576:	b318      	cbz	r0, 80115c0 <asin+0x90>
 8011578:	2301      	movs	r3, #1
 801157a:	9300      	str	r3, [sp, #0]
 801157c:	4816      	ldr	r0, [pc, #88]	; (80115d8 <asin+0xa8>)
 801157e:	4b17      	ldr	r3, [pc, #92]	; (80115dc <asin+0xac>)
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	9708      	str	r7, [sp, #32]
 8011584:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011588:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801158c:	f001 fd10 	bl	8012fb0 <nan>
 8011590:	f996 3000 	ldrsb.w	r3, [r6]
 8011594:	2b02      	cmp	r3, #2
 8011596:	ed8d 0b06 	vstr	d0, [sp, #24]
 801159a:	d104      	bne.n	80115a6 <asin+0x76>
 801159c:	f7fd f9ca 	bl	800e934 <__errno>
 80115a0:	2321      	movs	r3, #33	; 0x21
 80115a2:	6003      	str	r3, [r0, #0]
 80115a4:	e004      	b.n	80115b0 <asin+0x80>
 80115a6:	4668      	mov	r0, sp
 80115a8:	f001 fcfe 	bl	8012fa8 <matherr>
 80115ac:	2800      	cmp	r0, #0
 80115ae:	d0f5      	beq.n	801159c <asin+0x6c>
 80115b0:	9b08      	ldr	r3, [sp, #32]
 80115b2:	b11b      	cbz	r3, 80115bc <asin+0x8c>
 80115b4:	f7fd f9be 	bl	800e934 <__errno>
 80115b8:	9b08      	ldr	r3, [sp, #32]
 80115ba:	6003      	str	r3, [r0, #0]
 80115bc:	ed9d 8b06 	vldr	d8, [sp, #24]
 80115c0:	eeb0 0a48 	vmov.f32	s0, s16
 80115c4:	eef0 0a68 	vmov.f32	s1, s17
 80115c8:	b00b      	add	sp, #44	; 0x2c
 80115ca:	ecbd 8b02 	vpop	{d8}
 80115ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115d0:	20000384 	.word	0x20000384
 80115d4:	3ff00000 	.word	0x3ff00000
 80115d8:	08013753 	.word	0x08013753
 80115dc:	08013a17 	.word	0x08013a17

080115e0 <atan2>:
 80115e0:	f000 ba6a 	b.w	8011ab8 <__ieee754_atan2>

080115e4 <sqrt>:
 80115e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80115e8:	ed2d 8b02 	vpush	{d8}
 80115ec:	b08b      	sub	sp, #44	; 0x2c
 80115ee:	ec55 4b10 	vmov	r4, r5, d0
 80115f2:	f000 fd33 	bl	801205c <__ieee754_sqrt>
 80115f6:	4b26      	ldr	r3, [pc, #152]	; (8011690 <sqrt+0xac>)
 80115f8:	eeb0 8a40 	vmov.f32	s16, s0
 80115fc:	eef0 8a60 	vmov.f32	s17, s1
 8011600:	f993 6000 	ldrsb.w	r6, [r3]
 8011604:	1c73      	adds	r3, r6, #1
 8011606:	d02a      	beq.n	801165e <sqrt+0x7a>
 8011608:	4622      	mov	r2, r4
 801160a:	462b      	mov	r3, r5
 801160c:	4620      	mov	r0, r4
 801160e:	4629      	mov	r1, r5
 8011610:	f7ef faac 	bl	8000b6c <__aeabi_dcmpun>
 8011614:	4607      	mov	r7, r0
 8011616:	bb10      	cbnz	r0, 801165e <sqrt+0x7a>
 8011618:	f04f 0800 	mov.w	r8, #0
 801161c:	f04f 0900 	mov.w	r9, #0
 8011620:	4642      	mov	r2, r8
 8011622:	464b      	mov	r3, r9
 8011624:	4620      	mov	r0, r4
 8011626:	4629      	mov	r1, r5
 8011628:	f7ef fa78 	bl	8000b1c <__aeabi_dcmplt>
 801162c:	b1b8      	cbz	r0, 801165e <sqrt+0x7a>
 801162e:	2301      	movs	r3, #1
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	4b18      	ldr	r3, [pc, #96]	; (8011694 <sqrt+0xb0>)
 8011634:	9301      	str	r3, [sp, #4]
 8011636:	9708      	str	r7, [sp, #32]
 8011638:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801163c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011640:	b9b6      	cbnz	r6, 8011670 <sqrt+0x8c>
 8011642:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8011646:	4668      	mov	r0, sp
 8011648:	f001 fcae 	bl	8012fa8 <matherr>
 801164c:	b1d0      	cbz	r0, 8011684 <sqrt+0xa0>
 801164e:	9b08      	ldr	r3, [sp, #32]
 8011650:	b11b      	cbz	r3, 801165a <sqrt+0x76>
 8011652:	f7fd f96f 	bl	800e934 <__errno>
 8011656:	9b08      	ldr	r3, [sp, #32]
 8011658:	6003      	str	r3, [r0, #0]
 801165a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801165e:	eeb0 0a48 	vmov.f32	s0, s16
 8011662:	eef0 0a68 	vmov.f32	s1, s17
 8011666:	b00b      	add	sp, #44	; 0x2c
 8011668:	ecbd 8b02 	vpop	{d8}
 801166c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011670:	4642      	mov	r2, r8
 8011672:	464b      	mov	r3, r9
 8011674:	4640      	mov	r0, r8
 8011676:	4649      	mov	r1, r9
 8011678:	f7ef f908 	bl	800088c <__aeabi_ddiv>
 801167c:	2e02      	cmp	r6, #2
 801167e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011682:	d1e0      	bne.n	8011646 <sqrt+0x62>
 8011684:	f7fd f956 	bl	800e934 <__errno>
 8011688:	2321      	movs	r3, #33	; 0x21
 801168a:	6003      	str	r3, [r0, #0]
 801168c:	e7df      	b.n	801164e <sqrt+0x6a>
 801168e:	bf00      	nop
 8011690:	20000384 	.word	0x20000384
 8011694:	08013a1c 	.word	0x08013a1c

08011698 <__ieee754_asin>:
 8011698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801169c:	ec55 4b10 	vmov	r4, r5, d0
 80116a0:	4bcb      	ldr	r3, [pc, #812]	; (80119d0 <__ieee754_asin+0x338>)
 80116a2:	b087      	sub	sp, #28
 80116a4:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80116a8:	429f      	cmp	r7, r3
 80116aa:	9501      	str	r5, [sp, #4]
 80116ac:	dd31      	ble.n	8011712 <__ieee754_asin+0x7a>
 80116ae:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 80116b2:	ee10 3a10 	vmov	r3, s0
 80116b6:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80116ba:	433b      	orrs	r3, r7
 80116bc:	d117      	bne.n	80116ee <__ieee754_asin+0x56>
 80116be:	a3aa      	add	r3, pc, #680	; (adr r3, 8011968 <__ieee754_asin+0x2d0>)
 80116c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c4:	ee10 0a10 	vmov	r0, s0
 80116c8:	4629      	mov	r1, r5
 80116ca:	f7ee ffb5 	bl	8000638 <__aeabi_dmul>
 80116ce:	a3a8      	add	r3, pc, #672	; (adr r3, 8011970 <__ieee754_asin+0x2d8>)
 80116d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116d4:	4606      	mov	r6, r0
 80116d6:	460f      	mov	r7, r1
 80116d8:	4620      	mov	r0, r4
 80116da:	4629      	mov	r1, r5
 80116dc:	f7ee ffac 	bl	8000638 <__aeabi_dmul>
 80116e0:	4602      	mov	r2, r0
 80116e2:	460b      	mov	r3, r1
 80116e4:	4630      	mov	r0, r6
 80116e6:	4639      	mov	r1, r7
 80116e8:	f7ee fdf0 	bl	80002cc <__adddf3>
 80116ec:	e00a      	b.n	8011704 <__ieee754_asin+0x6c>
 80116ee:	ee10 2a10 	vmov	r2, s0
 80116f2:	462b      	mov	r3, r5
 80116f4:	4620      	mov	r0, r4
 80116f6:	4629      	mov	r1, r5
 80116f8:	f7ee fde6 	bl	80002c8 <__aeabi_dsub>
 80116fc:	4602      	mov	r2, r0
 80116fe:	460b      	mov	r3, r1
 8011700:	f7ef f8c4 	bl	800088c <__aeabi_ddiv>
 8011704:	4604      	mov	r4, r0
 8011706:	460d      	mov	r5, r1
 8011708:	ec45 4b10 	vmov	d0, r4, r5
 801170c:	b007      	add	sp, #28
 801170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011712:	4bb0      	ldr	r3, [pc, #704]	; (80119d4 <__ieee754_asin+0x33c>)
 8011714:	429f      	cmp	r7, r3
 8011716:	dc11      	bgt.n	801173c <__ieee754_asin+0xa4>
 8011718:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 801171c:	f280 80ae 	bge.w	801187c <__ieee754_asin+0x1e4>
 8011720:	a395      	add	r3, pc, #596	; (adr r3, 8011978 <__ieee754_asin+0x2e0>)
 8011722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011726:	ee10 0a10 	vmov	r0, s0
 801172a:	4629      	mov	r1, r5
 801172c:	f7ee fdce 	bl	80002cc <__adddf3>
 8011730:	2200      	movs	r2, #0
 8011732:	4ba9      	ldr	r3, [pc, #676]	; (80119d8 <__ieee754_asin+0x340>)
 8011734:	f7ef fa10 	bl	8000b58 <__aeabi_dcmpgt>
 8011738:	2800      	cmp	r0, #0
 801173a:	d1e5      	bne.n	8011708 <__ieee754_asin+0x70>
 801173c:	ec45 4b10 	vmov	d0, r4, r5
 8011740:	f001 fba2 	bl	8012e88 <fabs>
 8011744:	2000      	movs	r0, #0
 8011746:	ec53 2b10 	vmov	r2, r3, d0
 801174a:	49a3      	ldr	r1, [pc, #652]	; (80119d8 <__ieee754_asin+0x340>)
 801174c:	f7ee fdbc 	bl	80002c8 <__aeabi_dsub>
 8011750:	2200      	movs	r2, #0
 8011752:	4ba2      	ldr	r3, [pc, #648]	; (80119dc <__ieee754_asin+0x344>)
 8011754:	f7ee ff70 	bl	8000638 <__aeabi_dmul>
 8011758:	a389      	add	r3, pc, #548	; (adr r3, 8011980 <__ieee754_asin+0x2e8>)
 801175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801175e:	4604      	mov	r4, r0
 8011760:	460d      	mov	r5, r1
 8011762:	f7ee ff69 	bl	8000638 <__aeabi_dmul>
 8011766:	a388      	add	r3, pc, #544	; (adr r3, 8011988 <__ieee754_asin+0x2f0>)
 8011768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801176c:	f7ee fdae 	bl	80002cc <__adddf3>
 8011770:	4622      	mov	r2, r4
 8011772:	462b      	mov	r3, r5
 8011774:	f7ee ff60 	bl	8000638 <__aeabi_dmul>
 8011778:	a385      	add	r3, pc, #532	; (adr r3, 8011990 <__ieee754_asin+0x2f8>)
 801177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801177e:	f7ee fda3 	bl	80002c8 <__aeabi_dsub>
 8011782:	4622      	mov	r2, r4
 8011784:	462b      	mov	r3, r5
 8011786:	f7ee ff57 	bl	8000638 <__aeabi_dmul>
 801178a:	a383      	add	r3, pc, #524	; (adr r3, 8011998 <__ieee754_asin+0x300>)
 801178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011790:	f7ee fd9c 	bl	80002cc <__adddf3>
 8011794:	4622      	mov	r2, r4
 8011796:	462b      	mov	r3, r5
 8011798:	f7ee ff4e 	bl	8000638 <__aeabi_dmul>
 801179c:	a380      	add	r3, pc, #512	; (adr r3, 80119a0 <__ieee754_asin+0x308>)
 801179e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117a2:	f7ee fd91 	bl	80002c8 <__aeabi_dsub>
 80117a6:	4622      	mov	r2, r4
 80117a8:	462b      	mov	r3, r5
 80117aa:	f7ee ff45 	bl	8000638 <__aeabi_dmul>
 80117ae:	a37e      	add	r3, pc, #504	; (adr r3, 80119a8 <__ieee754_asin+0x310>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	f7ee fd8a 	bl	80002cc <__adddf3>
 80117b8:	4622      	mov	r2, r4
 80117ba:	462b      	mov	r3, r5
 80117bc:	f7ee ff3c 	bl	8000638 <__aeabi_dmul>
 80117c0:	a37b      	add	r3, pc, #492	; (adr r3, 80119b0 <__ieee754_asin+0x318>)
 80117c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117c6:	4680      	mov	r8, r0
 80117c8:	4689      	mov	r9, r1
 80117ca:	4620      	mov	r0, r4
 80117cc:	4629      	mov	r1, r5
 80117ce:	f7ee ff33 	bl	8000638 <__aeabi_dmul>
 80117d2:	a379      	add	r3, pc, #484	; (adr r3, 80119b8 <__ieee754_asin+0x320>)
 80117d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117d8:	f7ee fd76 	bl	80002c8 <__aeabi_dsub>
 80117dc:	4622      	mov	r2, r4
 80117de:	462b      	mov	r3, r5
 80117e0:	f7ee ff2a 	bl	8000638 <__aeabi_dmul>
 80117e4:	a376      	add	r3, pc, #472	; (adr r3, 80119c0 <__ieee754_asin+0x328>)
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	f7ee fd6f 	bl	80002cc <__adddf3>
 80117ee:	4622      	mov	r2, r4
 80117f0:	462b      	mov	r3, r5
 80117f2:	f7ee ff21 	bl	8000638 <__aeabi_dmul>
 80117f6:	a374      	add	r3, pc, #464	; (adr r3, 80119c8 <__ieee754_asin+0x330>)
 80117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fc:	f7ee fd64 	bl	80002c8 <__aeabi_dsub>
 8011800:	4622      	mov	r2, r4
 8011802:	462b      	mov	r3, r5
 8011804:	f7ee ff18 	bl	8000638 <__aeabi_dmul>
 8011808:	4b73      	ldr	r3, [pc, #460]	; (80119d8 <__ieee754_asin+0x340>)
 801180a:	2200      	movs	r2, #0
 801180c:	f7ee fd5e 	bl	80002cc <__adddf3>
 8011810:	ec45 4b10 	vmov	d0, r4, r5
 8011814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011818:	f000 fc20 	bl	801205c <__ieee754_sqrt>
 801181c:	4b70      	ldr	r3, [pc, #448]	; (80119e0 <__ieee754_asin+0x348>)
 801181e:	429f      	cmp	r7, r3
 8011820:	ec5b ab10 	vmov	sl, fp, d0
 8011824:	f340 80de 	ble.w	80119e4 <__ieee754_asin+0x34c>
 8011828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801182c:	4640      	mov	r0, r8
 801182e:	4649      	mov	r1, r9
 8011830:	f7ef f82c 	bl	800088c <__aeabi_ddiv>
 8011834:	4652      	mov	r2, sl
 8011836:	465b      	mov	r3, fp
 8011838:	f7ee fefe 	bl	8000638 <__aeabi_dmul>
 801183c:	4652      	mov	r2, sl
 801183e:	465b      	mov	r3, fp
 8011840:	f7ee fd44 	bl	80002cc <__adddf3>
 8011844:	4602      	mov	r2, r0
 8011846:	460b      	mov	r3, r1
 8011848:	f7ee fd40 	bl	80002cc <__adddf3>
 801184c:	a348      	add	r3, pc, #288	; (adr r3, 8011970 <__ieee754_asin+0x2d8>)
 801184e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011852:	f7ee fd39 	bl	80002c8 <__aeabi_dsub>
 8011856:	4602      	mov	r2, r0
 8011858:	460b      	mov	r3, r1
 801185a:	a143      	add	r1, pc, #268	; (adr r1, 8011968 <__ieee754_asin+0x2d0>)
 801185c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011860:	f7ee fd32 	bl	80002c8 <__aeabi_dsub>
 8011864:	9b01      	ldr	r3, [sp, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	bfdc      	itt	le
 801186a:	4602      	movle	r2, r0
 801186c:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8011870:	4604      	mov	r4, r0
 8011872:	460d      	mov	r5, r1
 8011874:	bfdc      	itt	le
 8011876:	4614      	movle	r4, r2
 8011878:	461d      	movle	r5, r3
 801187a:	e745      	b.n	8011708 <__ieee754_asin+0x70>
 801187c:	ee10 2a10 	vmov	r2, s0
 8011880:	ee10 0a10 	vmov	r0, s0
 8011884:	462b      	mov	r3, r5
 8011886:	4629      	mov	r1, r5
 8011888:	f7ee fed6 	bl	8000638 <__aeabi_dmul>
 801188c:	a33c      	add	r3, pc, #240	; (adr r3, 8011980 <__ieee754_asin+0x2e8>)
 801188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011892:	4606      	mov	r6, r0
 8011894:	460f      	mov	r7, r1
 8011896:	f7ee fecf 	bl	8000638 <__aeabi_dmul>
 801189a:	a33b      	add	r3, pc, #236	; (adr r3, 8011988 <__ieee754_asin+0x2f0>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	f7ee fd14 	bl	80002cc <__adddf3>
 80118a4:	4632      	mov	r2, r6
 80118a6:	463b      	mov	r3, r7
 80118a8:	f7ee fec6 	bl	8000638 <__aeabi_dmul>
 80118ac:	a338      	add	r3, pc, #224	; (adr r3, 8011990 <__ieee754_asin+0x2f8>)
 80118ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118b2:	f7ee fd09 	bl	80002c8 <__aeabi_dsub>
 80118b6:	4632      	mov	r2, r6
 80118b8:	463b      	mov	r3, r7
 80118ba:	f7ee febd 	bl	8000638 <__aeabi_dmul>
 80118be:	a336      	add	r3, pc, #216	; (adr r3, 8011998 <__ieee754_asin+0x300>)
 80118c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c4:	f7ee fd02 	bl	80002cc <__adddf3>
 80118c8:	4632      	mov	r2, r6
 80118ca:	463b      	mov	r3, r7
 80118cc:	f7ee feb4 	bl	8000638 <__aeabi_dmul>
 80118d0:	a333      	add	r3, pc, #204	; (adr r3, 80119a0 <__ieee754_asin+0x308>)
 80118d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d6:	f7ee fcf7 	bl	80002c8 <__aeabi_dsub>
 80118da:	4632      	mov	r2, r6
 80118dc:	463b      	mov	r3, r7
 80118de:	f7ee feab 	bl	8000638 <__aeabi_dmul>
 80118e2:	a331      	add	r3, pc, #196	; (adr r3, 80119a8 <__ieee754_asin+0x310>)
 80118e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118e8:	f7ee fcf0 	bl	80002cc <__adddf3>
 80118ec:	4632      	mov	r2, r6
 80118ee:	463b      	mov	r3, r7
 80118f0:	f7ee fea2 	bl	8000638 <__aeabi_dmul>
 80118f4:	a32e      	add	r3, pc, #184	; (adr r3, 80119b0 <__ieee754_asin+0x318>)
 80118f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fa:	4680      	mov	r8, r0
 80118fc:	4689      	mov	r9, r1
 80118fe:	4630      	mov	r0, r6
 8011900:	4639      	mov	r1, r7
 8011902:	f7ee fe99 	bl	8000638 <__aeabi_dmul>
 8011906:	a32c      	add	r3, pc, #176	; (adr r3, 80119b8 <__ieee754_asin+0x320>)
 8011908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190c:	f7ee fcdc 	bl	80002c8 <__aeabi_dsub>
 8011910:	4632      	mov	r2, r6
 8011912:	463b      	mov	r3, r7
 8011914:	f7ee fe90 	bl	8000638 <__aeabi_dmul>
 8011918:	a329      	add	r3, pc, #164	; (adr r3, 80119c0 <__ieee754_asin+0x328>)
 801191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801191e:	f7ee fcd5 	bl	80002cc <__adddf3>
 8011922:	4632      	mov	r2, r6
 8011924:	463b      	mov	r3, r7
 8011926:	f7ee fe87 	bl	8000638 <__aeabi_dmul>
 801192a:	a327      	add	r3, pc, #156	; (adr r3, 80119c8 <__ieee754_asin+0x330>)
 801192c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011930:	f7ee fcca 	bl	80002c8 <__aeabi_dsub>
 8011934:	4632      	mov	r2, r6
 8011936:	463b      	mov	r3, r7
 8011938:	f7ee fe7e 	bl	8000638 <__aeabi_dmul>
 801193c:	2200      	movs	r2, #0
 801193e:	4b26      	ldr	r3, [pc, #152]	; (80119d8 <__ieee754_asin+0x340>)
 8011940:	f7ee fcc4 	bl	80002cc <__adddf3>
 8011944:	4602      	mov	r2, r0
 8011946:	460b      	mov	r3, r1
 8011948:	4640      	mov	r0, r8
 801194a:	4649      	mov	r1, r9
 801194c:	f7ee ff9e 	bl	800088c <__aeabi_ddiv>
 8011950:	4622      	mov	r2, r4
 8011952:	462b      	mov	r3, r5
 8011954:	f7ee fe70 	bl	8000638 <__aeabi_dmul>
 8011958:	4602      	mov	r2, r0
 801195a:	460b      	mov	r3, r1
 801195c:	4620      	mov	r0, r4
 801195e:	4629      	mov	r1, r5
 8011960:	e6c2      	b.n	80116e8 <__ieee754_asin+0x50>
 8011962:	bf00      	nop
 8011964:	f3af 8000 	nop.w
 8011968:	54442d18 	.word	0x54442d18
 801196c:	3ff921fb 	.word	0x3ff921fb
 8011970:	33145c07 	.word	0x33145c07
 8011974:	3c91a626 	.word	0x3c91a626
 8011978:	8800759c 	.word	0x8800759c
 801197c:	7e37e43c 	.word	0x7e37e43c
 8011980:	0dfdf709 	.word	0x0dfdf709
 8011984:	3f023de1 	.word	0x3f023de1
 8011988:	7501b288 	.word	0x7501b288
 801198c:	3f49efe0 	.word	0x3f49efe0
 8011990:	b5688f3b 	.word	0xb5688f3b
 8011994:	3fa48228 	.word	0x3fa48228
 8011998:	0e884455 	.word	0x0e884455
 801199c:	3fc9c155 	.word	0x3fc9c155
 80119a0:	03eb6f7d 	.word	0x03eb6f7d
 80119a4:	3fd4d612 	.word	0x3fd4d612
 80119a8:	55555555 	.word	0x55555555
 80119ac:	3fc55555 	.word	0x3fc55555
 80119b0:	b12e9282 	.word	0xb12e9282
 80119b4:	3fb3b8c5 	.word	0x3fb3b8c5
 80119b8:	1b8d0159 	.word	0x1b8d0159
 80119bc:	3fe6066c 	.word	0x3fe6066c
 80119c0:	9c598ac8 	.word	0x9c598ac8
 80119c4:	40002ae5 	.word	0x40002ae5
 80119c8:	1c8a2d4b 	.word	0x1c8a2d4b
 80119cc:	40033a27 	.word	0x40033a27
 80119d0:	3fefffff 	.word	0x3fefffff
 80119d4:	3fdfffff 	.word	0x3fdfffff
 80119d8:	3ff00000 	.word	0x3ff00000
 80119dc:	3fe00000 	.word	0x3fe00000
 80119e0:	3fef3332 	.word	0x3fef3332
 80119e4:	ee10 2a10 	vmov	r2, s0
 80119e8:	ee10 0a10 	vmov	r0, s0
 80119ec:	465b      	mov	r3, fp
 80119ee:	4659      	mov	r1, fp
 80119f0:	f7ee fc6c 	bl	80002cc <__adddf3>
 80119f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80119fc:	4640      	mov	r0, r8
 80119fe:	4649      	mov	r1, r9
 8011a00:	f7ee ff44 	bl	800088c <__aeabi_ddiv>
 8011a04:	4602      	mov	r2, r0
 8011a06:	460b      	mov	r3, r1
 8011a08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a0c:	f7ee fe14 	bl	8000638 <__aeabi_dmul>
 8011a10:	2600      	movs	r6, #0
 8011a12:	4680      	mov	r8, r0
 8011a14:	4689      	mov	r9, r1
 8011a16:	4632      	mov	r2, r6
 8011a18:	465b      	mov	r3, fp
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	4659      	mov	r1, fp
 8011a1e:	f7ee fe0b 	bl	8000638 <__aeabi_dmul>
 8011a22:	4602      	mov	r2, r0
 8011a24:	460b      	mov	r3, r1
 8011a26:	4620      	mov	r0, r4
 8011a28:	4629      	mov	r1, r5
 8011a2a:	f7ee fc4d 	bl	80002c8 <__aeabi_dsub>
 8011a2e:	4632      	mov	r2, r6
 8011a30:	4604      	mov	r4, r0
 8011a32:	460d      	mov	r5, r1
 8011a34:	465b      	mov	r3, fp
 8011a36:	4650      	mov	r0, sl
 8011a38:	4659      	mov	r1, fp
 8011a3a:	f7ee fc47 	bl	80002cc <__adddf3>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	460b      	mov	r3, r1
 8011a42:	4620      	mov	r0, r4
 8011a44:	4629      	mov	r1, r5
 8011a46:	f7ee ff21 	bl	800088c <__aeabi_ddiv>
 8011a4a:	4602      	mov	r2, r0
 8011a4c:	460b      	mov	r3, r1
 8011a4e:	f7ee fc3d 	bl	80002cc <__adddf3>
 8011a52:	4602      	mov	r2, r0
 8011a54:	460b      	mov	r3, r1
 8011a56:	a114      	add	r1, pc, #80	; (adr r1, 8011aa8 <__ieee754_asin+0x410>)
 8011a58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a5c:	f7ee fc34 	bl	80002c8 <__aeabi_dsub>
 8011a60:	4602      	mov	r2, r0
 8011a62:	460b      	mov	r3, r1
 8011a64:	4640      	mov	r0, r8
 8011a66:	4649      	mov	r1, r9
 8011a68:	f7ee fc2e 	bl	80002c8 <__aeabi_dsub>
 8011a6c:	465f      	mov	r7, fp
 8011a6e:	4604      	mov	r4, r0
 8011a70:	460d      	mov	r5, r1
 8011a72:	4632      	mov	r2, r6
 8011a74:	465b      	mov	r3, fp
 8011a76:	4630      	mov	r0, r6
 8011a78:	4639      	mov	r1, r7
 8011a7a:	f7ee fc27 	bl	80002cc <__adddf3>
 8011a7e:	4602      	mov	r2, r0
 8011a80:	460b      	mov	r3, r1
 8011a82:	a10b      	add	r1, pc, #44	; (adr r1, 8011ab0 <__ieee754_asin+0x418>)
 8011a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011a88:	f7ee fc1e 	bl	80002c8 <__aeabi_dsub>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	460b      	mov	r3, r1
 8011a90:	4620      	mov	r0, r4
 8011a92:	4629      	mov	r1, r5
 8011a94:	f7ee fc18 	bl	80002c8 <__aeabi_dsub>
 8011a98:	4602      	mov	r2, r0
 8011a9a:	460b      	mov	r3, r1
 8011a9c:	a104      	add	r1, pc, #16	; (adr r1, 8011ab0 <__ieee754_asin+0x418>)
 8011a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aa2:	e6dd      	b.n	8011860 <__ieee754_asin+0x1c8>
 8011aa4:	f3af 8000 	nop.w
 8011aa8:	33145c07 	.word	0x33145c07
 8011aac:	3c91a626 	.word	0x3c91a626
 8011ab0:	54442d18 	.word	0x54442d18
 8011ab4:	3fe921fb 	.word	0x3fe921fb

08011ab8 <__ieee754_atan2>:
 8011ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011abc:	ec57 6b11 	vmov	r6, r7, d1
 8011ac0:	4273      	negs	r3, r6
 8011ac2:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011ac6:	4333      	orrs	r3, r6
 8011ac8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8011c70 <__ieee754_atan2+0x1b8>
 8011acc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011ad0:	4573      	cmp	r3, lr
 8011ad2:	ec51 0b10 	vmov	r0, r1, d0
 8011ad6:	ee11 8a10 	vmov	r8, s2
 8011ada:	d80a      	bhi.n	8011af2 <__ieee754_atan2+0x3a>
 8011adc:	4244      	negs	r4, r0
 8011ade:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011ae2:	4304      	orrs	r4, r0
 8011ae4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011ae8:	4574      	cmp	r4, lr
 8011aea:	468c      	mov	ip, r1
 8011aec:	ee10 9a10 	vmov	r9, s0
 8011af0:	d907      	bls.n	8011b02 <__ieee754_atan2+0x4a>
 8011af2:	4632      	mov	r2, r6
 8011af4:	463b      	mov	r3, r7
 8011af6:	f7ee fbe9 	bl	80002cc <__adddf3>
 8011afa:	ec41 0b10 	vmov	d0, r0, r1
 8011afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b02:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8011b06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011b0a:	4334      	orrs	r4, r6
 8011b0c:	d103      	bne.n	8011b16 <__ieee754_atan2+0x5e>
 8011b0e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b12:	f001 b819 	b.w	8012b48 <atan>
 8011b16:	17bc      	asrs	r4, r7, #30
 8011b18:	f004 0402 	and.w	r4, r4, #2
 8011b1c:	ea53 0909 	orrs.w	r9, r3, r9
 8011b20:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8011b24:	d107      	bne.n	8011b36 <__ieee754_atan2+0x7e>
 8011b26:	2c02      	cmp	r4, #2
 8011b28:	d073      	beq.n	8011c12 <__ieee754_atan2+0x15a>
 8011b2a:	2c03      	cmp	r4, #3
 8011b2c:	d1e5      	bne.n	8011afa <__ieee754_atan2+0x42>
 8011b2e:	a13e      	add	r1, pc, #248	; (adr r1, 8011c28 <__ieee754_atan2+0x170>)
 8011b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b34:	e7e1      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b36:	ea52 0808 	orrs.w	r8, r2, r8
 8011b3a:	d106      	bne.n	8011b4a <__ieee754_atan2+0x92>
 8011b3c:	f1bc 0f00 	cmp.w	ip, #0
 8011b40:	da6b      	bge.n	8011c1a <__ieee754_atan2+0x162>
 8011b42:	a13b      	add	r1, pc, #236	; (adr r1, 8011c30 <__ieee754_atan2+0x178>)
 8011b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b48:	e7d7      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b4a:	4572      	cmp	r2, lr
 8011b4c:	d120      	bne.n	8011b90 <__ieee754_atan2+0xd8>
 8011b4e:	4293      	cmp	r3, r2
 8011b50:	d111      	bne.n	8011b76 <__ieee754_atan2+0xbe>
 8011b52:	2c02      	cmp	r4, #2
 8011b54:	d007      	beq.n	8011b66 <__ieee754_atan2+0xae>
 8011b56:	2c03      	cmp	r4, #3
 8011b58:	d009      	beq.n	8011b6e <__ieee754_atan2+0xb6>
 8011b5a:	2c01      	cmp	r4, #1
 8011b5c:	d155      	bne.n	8011c0a <__ieee754_atan2+0x152>
 8011b5e:	a136      	add	r1, pc, #216	; (adr r1, 8011c38 <__ieee754_atan2+0x180>)
 8011b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b64:	e7c9      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b66:	a136      	add	r1, pc, #216	; (adr r1, 8011c40 <__ieee754_atan2+0x188>)
 8011b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b6c:	e7c5      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b6e:	a136      	add	r1, pc, #216	; (adr r1, 8011c48 <__ieee754_atan2+0x190>)
 8011b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011b74:	e7c1      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b76:	2c02      	cmp	r4, #2
 8011b78:	d04b      	beq.n	8011c12 <__ieee754_atan2+0x15a>
 8011b7a:	2c03      	cmp	r4, #3
 8011b7c:	d0d7      	beq.n	8011b2e <__ieee754_atan2+0x76>
 8011b7e:	2c01      	cmp	r4, #1
 8011b80:	f04f 0000 	mov.w	r0, #0
 8011b84:	d102      	bne.n	8011b8c <__ieee754_atan2+0xd4>
 8011b86:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011b8a:	e7b6      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b8c:	2100      	movs	r1, #0
 8011b8e:	e7b4      	b.n	8011afa <__ieee754_atan2+0x42>
 8011b90:	4573      	cmp	r3, lr
 8011b92:	d0d3      	beq.n	8011b3c <__ieee754_atan2+0x84>
 8011b94:	1a9b      	subs	r3, r3, r2
 8011b96:	151b      	asrs	r3, r3, #20
 8011b98:	2b3c      	cmp	r3, #60	; 0x3c
 8011b9a:	dc1e      	bgt.n	8011bda <__ieee754_atan2+0x122>
 8011b9c:	2f00      	cmp	r7, #0
 8011b9e:	da01      	bge.n	8011ba4 <__ieee754_atan2+0xec>
 8011ba0:	333c      	adds	r3, #60	; 0x3c
 8011ba2:	db1e      	blt.n	8011be2 <__ieee754_atan2+0x12a>
 8011ba4:	4632      	mov	r2, r6
 8011ba6:	463b      	mov	r3, r7
 8011ba8:	f7ee fe70 	bl	800088c <__aeabi_ddiv>
 8011bac:	ec41 0b10 	vmov	d0, r0, r1
 8011bb0:	f001 f96a 	bl	8012e88 <fabs>
 8011bb4:	f000 ffc8 	bl	8012b48 <atan>
 8011bb8:	ec51 0b10 	vmov	r0, r1, d0
 8011bbc:	2c01      	cmp	r4, #1
 8011bbe:	d013      	beq.n	8011be8 <__ieee754_atan2+0x130>
 8011bc0:	2c02      	cmp	r4, #2
 8011bc2:	d015      	beq.n	8011bf0 <__ieee754_atan2+0x138>
 8011bc4:	2c00      	cmp	r4, #0
 8011bc6:	d098      	beq.n	8011afa <__ieee754_atan2+0x42>
 8011bc8:	a321      	add	r3, pc, #132	; (adr r3, 8011c50 <__ieee754_atan2+0x198>)
 8011bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bce:	f7ee fb7b 	bl	80002c8 <__aeabi_dsub>
 8011bd2:	a321      	add	r3, pc, #132	; (adr r3, 8011c58 <__ieee754_atan2+0x1a0>)
 8011bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd8:	e014      	b.n	8011c04 <__ieee754_atan2+0x14c>
 8011bda:	a121      	add	r1, pc, #132	; (adr r1, 8011c60 <__ieee754_atan2+0x1a8>)
 8011bdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011be0:	e7ec      	b.n	8011bbc <__ieee754_atan2+0x104>
 8011be2:	2000      	movs	r0, #0
 8011be4:	2100      	movs	r1, #0
 8011be6:	e7e9      	b.n	8011bbc <__ieee754_atan2+0x104>
 8011be8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011bec:	4619      	mov	r1, r3
 8011bee:	e784      	b.n	8011afa <__ieee754_atan2+0x42>
 8011bf0:	a317      	add	r3, pc, #92	; (adr r3, 8011c50 <__ieee754_atan2+0x198>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	f7ee fb67 	bl	80002c8 <__aeabi_dsub>
 8011bfa:	4602      	mov	r2, r0
 8011bfc:	460b      	mov	r3, r1
 8011bfe:	a116      	add	r1, pc, #88	; (adr r1, 8011c58 <__ieee754_atan2+0x1a0>)
 8011c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c04:	f7ee fb60 	bl	80002c8 <__aeabi_dsub>
 8011c08:	e777      	b.n	8011afa <__ieee754_atan2+0x42>
 8011c0a:	a117      	add	r1, pc, #92	; (adr r1, 8011c68 <__ieee754_atan2+0x1b0>)
 8011c0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c10:	e773      	b.n	8011afa <__ieee754_atan2+0x42>
 8011c12:	a111      	add	r1, pc, #68	; (adr r1, 8011c58 <__ieee754_atan2+0x1a0>)
 8011c14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c18:	e76f      	b.n	8011afa <__ieee754_atan2+0x42>
 8011c1a:	a111      	add	r1, pc, #68	; (adr r1, 8011c60 <__ieee754_atan2+0x1a8>)
 8011c1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c20:	e76b      	b.n	8011afa <__ieee754_atan2+0x42>
 8011c22:	bf00      	nop
 8011c24:	f3af 8000 	nop.w
 8011c28:	54442d18 	.word	0x54442d18
 8011c2c:	c00921fb 	.word	0xc00921fb
 8011c30:	54442d18 	.word	0x54442d18
 8011c34:	bff921fb 	.word	0xbff921fb
 8011c38:	54442d18 	.word	0x54442d18
 8011c3c:	bfe921fb 	.word	0xbfe921fb
 8011c40:	7f3321d2 	.word	0x7f3321d2
 8011c44:	4002d97c 	.word	0x4002d97c
 8011c48:	7f3321d2 	.word	0x7f3321d2
 8011c4c:	c002d97c 	.word	0xc002d97c
 8011c50:	33145c07 	.word	0x33145c07
 8011c54:	3ca1a626 	.word	0x3ca1a626
 8011c58:	54442d18 	.word	0x54442d18
 8011c5c:	400921fb 	.word	0x400921fb
 8011c60:	54442d18 	.word	0x54442d18
 8011c64:	3ff921fb 	.word	0x3ff921fb
 8011c68:	54442d18 	.word	0x54442d18
 8011c6c:	3fe921fb 	.word	0x3fe921fb
 8011c70:	7ff00000 	.word	0x7ff00000
 8011c74:	00000000 	.word	0x00000000

08011c78 <__ieee754_rem_pio2>:
 8011c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7c:	ec57 6b10 	vmov	r6, r7, d0
 8011c80:	4bc3      	ldr	r3, [pc, #780]	; (8011f90 <__ieee754_rem_pio2+0x318>)
 8011c82:	b08d      	sub	sp, #52	; 0x34
 8011c84:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011c88:	4598      	cmp	r8, r3
 8011c8a:	4604      	mov	r4, r0
 8011c8c:	9704      	str	r7, [sp, #16]
 8011c8e:	dc07      	bgt.n	8011ca0 <__ieee754_rem_pio2+0x28>
 8011c90:	2200      	movs	r2, #0
 8011c92:	2300      	movs	r3, #0
 8011c94:	ed84 0b00 	vstr	d0, [r4]
 8011c98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011c9c:	2500      	movs	r5, #0
 8011c9e:	e027      	b.n	8011cf0 <__ieee754_rem_pio2+0x78>
 8011ca0:	4bbc      	ldr	r3, [pc, #752]	; (8011f94 <__ieee754_rem_pio2+0x31c>)
 8011ca2:	4598      	cmp	r8, r3
 8011ca4:	dc75      	bgt.n	8011d92 <__ieee754_rem_pio2+0x11a>
 8011ca6:	9b04      	ldr	r3, [sp, #16]
 8011ca8:	4dbb      	ldr	r5, [pc, #748]	; (8011f98 <__ieee754_rem_pio2+0x320>)
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	ee10 0a10 	vmov	r0, s0
 8011cb0:	a3a9      	add	r3, pc, #676	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2e0>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	4639      	mov	r1, r7
 8011cb8:	dd36      	ble.n	8011d28 <__ieee754_rem_pio2+0xb0>
 8011cba:	f7ee fb05 	bl	80002c8 <__aeabi_dsub>
 8011cbe:	45a8      	cmp	r8, r5
 8011cc0:	4606      	mov	r6, r0
 8011cc2:	460f      	mov	r7, r1
 8011cc4:	d018      	beq.n	8011cf8 <__ieee754_rem_pio2+0x80>
 8011cc6:	a3a6      	add	r3, pc, #664	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e8>)
 8011cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ccc:	f7ee fafc 	bl	80002c8 <__aeabi_dsub>
 8011cd0:	4602      	mov	r2, r0
 8011cd2:	460b      	mov	r3, r1
 8011cd4:	e9c4 2300 	strd	r2, r3, [r4]
 8011cd8:	4630      	mov	r0, r6
 8011cda:	4639      	mov	r1, r7
 8011cdc:	f7ee faf4 	bl	80002c8 <__aeabi_dsub>
 8011ce0:	a39f      	add	r3, pc, #636	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e8>)
 8011ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ce6:	f7ee faef 	bl	80002c8 <__aeabi_dsub>
 8011cea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011cee:	2501      	movs	r5, #1
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	b00d      	add	sp, #52	; 0x34
 8011cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cf8:	a39b      	add	r3, pc, #620	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x2f0>)
 8011cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cfe:	f7ee fae3 	bl	80002c8 <__aeabi_dsub>
 8011d02:	a39b      	add	r3, pc, #620	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f8>)
 8011d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d08:	4606      	mov	r6, r0
 8011d0a:	460f      	mov	r7, r1
 8011d0c:	f7ee fadc 	bl	80002c8 <__aeabi_dsub>
 8011d10:	4602      	mov	r2, r0
 8011d12:	460b      	mov	r3, r1
 8011d14:	e9c4 2300 	strd	r2, r3, [r4]
 8011d18:	4630      	mov	r0, r6
 8011d1a:	4639      	mov	r1, r7
 8011d1c:	f7ee fad4 	bl	80002c8 <__aeabi_dsub>
 8011d20:	a393      	add	r3, pc, #588	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f8>)
 8011d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d26:	e7de      	b.n	8011ce6 <__ieee754_rem_pio2+0x6e>
 8011d28:	f7ee fad0 	bl	80002cc <__adddf3>
 8011d2c:	45a8      	cmp	r8, r5
 8011d2e:	4606      	mov	r6, r0
 8011d30:	460f      	mov	r7, r1
 8011d32:	d016      	beq.n	8011d62 <__ieee754_rem_pio2+0xea>
 8011d34:	a38a      	add	r3, pc, #552	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e8>)
 8011d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d3a:	f7ee fac7 	bl	80002cc <__adddf3>
 8011d3e:	4602      	mov	r2, r0
 8011d40:	460b      	mov	r3, r1
 8011d42:	e9c4 2300 	strd	r2, r3, [r4]
 8011d46:	4630      	mov	r0, r6
 8011d48:	4639      	mov	r1, r7
 8011d4a:	f7ee fabd 	bl	80002c8 <__aeabi_dsub>
 8011d4e:	a384      	add	r3, pc, #528	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e8>)
 8011d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d54:	f7ee faba 	bl	80002cc <__adddf3>
 8011d58:	f04f 35ff 	mov.w	r5, #4294967295
 8011d5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011d60:	e7c6      	b.n	8011cf0 <__ieee754_rem_pio2+0x78>
 8011d62:	a381      	add	r3, pc, #516	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x2f0>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	f7ee fab0 	bl	80002cc <__adddf3>
 8011d6c:	a380      	add	r3, pc, #512	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f8>)
 8011d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d72:	4606      	mov	r6, r0
 8011d74:	460f      	mov	r7, r1
 8011d76:	f7ee faa9 	bl	80002cc <__adddf3>
 8011d7a:	4602      	mov	r2, r0
 8011d7c:	460b      	mov	r3, r1
 8011d7e:	e9c4 2300 	strd	r2, r3, [r4]
 8011d82:	4630      	mov	r0, r6
 8011d84:	4639      	mov	r1, r7
 8011d86:	f7ee fa9f 	bl	80002c8 <__aeabi_dsub>
 8011d8a:	a379      	add	r3, pc, #484	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f8>)
 8011d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d90:	e7e0      	b.n	8011d54 <__ieee754_rem_pio2+0xdc>
 8011d92:	4b82      	ldr	r3, [pc, #520]	; (8011f9c <__ieee754_rem_pio2+0x324>)
 8011d94:	4598      	cmp	r8, r3
 8011d96:	f300 80d0 	bgt.w	8011f3a <__ieee754_rem_pio2+0x2c2>
 8011d9a:	f001 f875 	bl	8012e88 <fabs>
 8011d9e:	ec57 6b10 	vmov	r6, r7, d0
 8011da2:	ee10 0a10 	vmov	r0, s0
 8011da6:	a374      	add	r3, pc, #464	; (adr r3, 8011f78 <__ieee754_rem_pio2+0x300>)
 8011da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dac:	4639      	mov	r1, r7
 8011dae:	f7ee fc43 	bl	8000638 <__aeabi_dmul>
 8011db2:	2200      	movs	r2, #0
 8011db4:	4b7a      	ldr	r3, [pc, #488]	; (8011fa0 <__ieee754_rem_pio2+0x328>)
 8011db6:	f7ee fa89 	bl	80002cc <__adddf3>
 8011dba:	f7ee feed 	bl	8000b98 <__aeabi_d2iz>
 8011dbe:	4605      	mov	r5, r0
 8011dc0:	f7ee fbd0 	bl	8000564 <__aeabi_i2d>
 8011dc4:	a364      	add	r3, pc, #400	; (adr r3, 8011f58 <__ieee754_rem_pio2+0x2e0>)
 8011dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dce:	f7ee fc33 	bl	8000638 <__aeabi_dmul>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	460b      	mov	r3, r1
 8011dd6:	4630      	mov	r0, r6
 8011dd8:	4639      	mov	r1, r7
 8011dda:	f7ee fa75 	bl	80002c8 <__aeabi_dsub>
 8011dde:	a360      	add	r3, pc, #384	; (adr r3, 8011f60 <__ieee754_rem_pio2+0x2e8>)
 8011de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011de4:	4682      	mov	sl, r0
 8011de6:	468b      	mov	fp, r1
 8011de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011dec:	f7ee fc24 	bl	8000638 <__aeabi_dmul>
 8011df0:	2d1f      	cmp	r5, #31
 8011df2:	4606      	mov	r6, r0
 8011df4:	460f      	mov	r7, r1
 8011df6:	dc0c      	bgt.n	8011e12 <__ieee754_rem_pio2+0x19a>
 8011df8:	1e6a      	subs	r2, r5, #1
 8011dfa:	4b6a      	ldr	r3, [pc, #424]	; (8011fa4 <__ieee754_rem_pio2+0x32c>)
 8011dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e00:	4543      	cmp	r3, r8
 8011e02:	d006      	beq.n	8011e12 <__ieee754_rem_pio2+0x19a>
 8011e04:	4632      	mov	r2, r6
 8011e06:	463b      	mov	r3, r7
 8011e08:	4650      	mov	r0, sl
 8011e0a:	4659      	mov	r1, fp
 8011e0c:	f7ee fa5c 	bl	80002c8 <__aeabi_dsub>
 8011e10:	e00e      	b.n	8011e30 <__ieee754_rem_pio2+0x1b8>
 8011e12:	4632      	mov	r2, r6
 8011e14:	463b      	mov	r3, r7
 8011e16:	4650      	mov	r0, sl
 8011e18:	4659      	mov	r1, fp
 8011e1a:	f7ee fa55 	bl	80002c8 <__aeabi_dsub>
 8011e1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011e22:	9305      	str	r3, [sp, #20]
 8011e24:	9a05      	ldr	r2, [sp, #20]
 8011e26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e2a:	1ad3      	subs	r3, r2, r3
 8011e2c:	2b10      	cmp	r3, #16
 8011e2e:	dc02      	bgt.n	8011e36 <__ieee754_rem_pio2+0x1be>
 8011e30:	e9c4 0100 	strd	r0, r1, [r4]
 8011e34:	e039      	b.n	8011eaa <__ieee754_rem_pio2+0x232>
 8011e36:	a34c      	add	r3, pc, #304	; (adr r3, 8011f68 <__ieee754_rem_pio2+0x2f0>)
 8011e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e40:	f7ee fbfa 	bl	8000638 <__aeabi_dmul>
 8011e44:	4606      	mov	r6, r0
 8011e46:	460f      	mov	r7, r1
 8011e48:	4602      	mov	r2, r0
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	4650      	mov	r0, sl
 8011e4e:	4659      	mov	r1, fp
 8011e50:	f7ee fa3a 	bl	80002c8 <__aeabi_dsub>
 8011e54:	4602      	mov	r2, r0
 8011e56:	460b      	mov	r3, r1
 8011e58:	4680      	mov	r8, r0
 8011e5a:	4689      	mov	r9, r1
 8011e5c:	4650      	mov	r0, sl
 8011e5e:	4659      	mov	r1, fp
 8011e60:	f7ee fa32 	bl	80002c8 <__aeabi_dsub>
 8011e64:	4632      	mov	r2, r6
 8011e66:	463b      	mov	r3, r7
 8011e68:	f7ee fa2e 	bl	80002c8 <__aeabi_dsub>
 8011e6c:	a340      	add	r3, pc, #256	; (adr r3, 8011f70 <__ieee754_rem_pio2+0x2f8>)
 8011e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e72:	4606      	mov	r6, r0
 8011e74:	460f      	mov	r7, r1
 8011e76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e7a:	f7ee fbdd 	bl	8000638 <__aeabi_dmul>
 8011e7e:	4632      	mov	r2, r6
 8011e80:	463b      	mov	r3, r7
 8011e82:	f7ee fa21 	bl	80002c8 <__aeabi_dsub>
 8011e86:	4602      	mov	r2, r0
 8011e88:	460b      	mov	r3, r1
 8011e8a:	4606      	mov	r6, r0
 8011e8c:	460f      	mov	r7, r1
 8011e8e:	4640      	mov	r0, r8
 8011e90:	4649      	mov	r1, r9
 8011e92:	f7ee fa19 	bl	80002c8 <__aeabi_dsub>
 8011e96:	9a05      	ldr	r2, [sp, #20]
 8011e98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	2b31      	cmp	r3, #49	; 0x31
 8011ea0:	dc20      	bgt.n	8011ee4 <__ieee754_rem_pio2+0x26c>
 8011ea2:	e9c4 0100 	strd	r0, r1, [r4]
 8011ea6:	46c2      	mov	sl, r8
 8011ea8:	46cb      	mov	fp, r9
 8011eaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011eae:	4650      	mov	r0, sl
 8011eb0:	4642      	mov	r2, r8
 8011eb2:	464b      	mov	r3, r9
 8011eb4:	4659      	mov	r1, fp
 8011eb6:	f7ee fa07 	bl	80002c8 <__aeabi_dsub>
 8011eba:	463b      	mov	r3, r7
 8011ebc:	4632      	mov	r2, r6
 8011ebe:	f7ee fa03 	bl	80002c8 <__aeabi_dsub>
 8011ec2:	9b04      	ldr	r3, [sp, #16]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011eca:	f6bf af11 	bge.w	8011cf0 <__ieee754_rem_pio2+0x78>
 8011ece:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011ed2:	6063      	str	r3, [r4, #4]
 8011ed4:	f8c4 8000 	str.w	r8, [r4]
 8011ed8:	60a0      	str	r0, [r4, #8]
 8011eda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ede:	60e3      	str	r3, [r4, #12]
 8011ee0:	426d      	negs	r5, r5
 8011ee2:	e705      	b.n	8011cf0 <__ieee754_rem_pio2+0x78>
 8011ee4:	a326      	add	r3, pc, #152	; (adr r3, 8011f80 <__ieee754_rem_pio2+0x308>)
 8011ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011eee:	f7ee fba3 	bl	8000638 <__aeabi_dmul>
 8011ef2:	4606      	mov	r6, r0
 8011ef4:	460f      	mov	r7, r1
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	460b      	mov	r3, r1
 8011efa:	4640      	mov	r0, r8
 8011efc:	4649      	mov	r1, r9
 8011efe:	f7ee f9e3 	bl	80002c8 <__aeabi_dsub>
 8011f02:	4602      	mov	r2, r0
 8011f04:	460b      	mov	r3, r1
 8011f06:	4682      	mov	sl, r0
 8011f08:	468b      	mov	fp, r1
 8011f0a:	4640      	mov	r0, r8
 8011f0c:	4649      	mov	r1, r9
 8011f0e:	f7ee f9db 	bl	80002c8 <__aeabi_dsub>
 8011f12:	4632      	mov	r2, r6
 8011f14:	463b      	mov	r3, r7
 8011f16:	f7ee f9d7 	bl	80002c8 <__aeabi_dsub>
 8011f1a:	a31b      	add	r3, pc, #108	; (adr r3, 8011f88 <__ieee754_rem_pio2+0x310>)
 8011f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f20:	4606      	mov	r6, r0
 8011f22:	460f      	mov	r7, r1
 8011f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011f28:	f7ee fb86 	bl	8000638 <__aeabi_dmul>
 8011f2c:	4632      	mov	r2, r6
 8011f2e:	463b      	mov	r3, r7
 8011f30:	f7ee f9ca 	bl	80002c8 <__aeabi_dsub>
 8011f34:	4606      	mov	r6, r0
 8011f36:	460f      	mov	r7, r1
 8011f38:	e764      	b.n	8011e04 <__ieee754_rem_pio2+0x18c>
 8011f3a:	4b1b      	ldr	r3, [pc, #108]	; (8011fa8 <__ieee754_rem_pio2+0x330>)
 8011f3c:	4598      	cmp	r8, r3
 8011f3e:	dd35      	ble.n	8011fac <__ieee754_rem_pio2+0x334>
 8011f40:	ee10 2a10 	vmov	r2, s0
 8011f44:	463b      	mov	r3, r7
 8011f46:	4630      	mov	r0, r6
 8011f48:	4639      	mov	r1, r7
 8011f4a:	f7ee f9bd 	bl	80002c8 <__aeabi_dsub>
 8011f4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f52:	e9c4 0100 	strd	r0, r1, [r4]
 8011f56:	e6a1      	b.n	8011c9c <__ieee754_rem_pio2+0x24>
 8011f58:	54400000 	.word	0x54400000
 8011f5c:	3ff921fb 	.word	0x3ff921fb
 8011f60:	1a626331 	.word	0x1a626331
 8011f64:	3dd0b461 	.word	0x3dd0b461
 8011f68:	1a600000 	.word	0x1a600000
 8011f6c:	3dd0b461 	.word	0x3dd0b461
 8011f70:	2e037073 	.word	0x2e037073
 8011f74:	3ba3198a 	.word	0x3ba3198a
 8011f78:	6dc9c883 	.word	0x6dc9c883
 8011f7c:	3fe45f30 	.word	0x3fe45f30
 8011f80:	2e000000 	.word	0x2e000000
 8011f84:	3ba3198a 	.word	0x3ba3198a
 8011f88:	252049c1 	.word	0x252049c1
 8011f8c:	397b839a 	.word	0x397b839a
 8011f90:	3fe921fb 	.word	0x3fe921fb
 8011f94:	4002d97b 	.word	0x4002d97b
 8011f98:	3ff921fb 	.word	0x3ff921fb
 8011f9c:	413921fb 	.word	0x413921fb
 8011fa0:	3fe00000 	.word	0x3fe00000
 8011fa4:	08013a24 	.word	0x08013a24
 8011fa8:	7fefffff 	.word	0x7fefffff
 8011fac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011fb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011fb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011fb8:	4630      	mov	r0, r6
 8011fba:	460f      	mov	r7, r1
 8011fbc:	f7ee fdec 	bl	8000b98 <__aeabi_d2iz>
 8011fc0:	f7ee fad0 	bl	8000564 <__aeabi_i2d>
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	4630      	mov	r0, r6
 8011fca:	4639      	mov	r1, r7
 8011fcc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011fd0:	f7ee f97a 	bl	80002c8 <__aeabi_dsub>
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	4b1f      	ldr	r3, [pc, #124]	; (8012054 <__ieee754_rem_pio2+0x3dc>)
 8011fd8:	f7ee fb2e 	bl	8000638 <__aeabi_dmul>
 8011fdc:	460f      	mov	r7, r1
 8011fde:	4606      	mov	r6, r0
 8011fe0:	f7ee fdda 	bl	8000b98 <__aeabi_d2iz>
 8011fe4:	f7ee fabe 	bl	8000564 <__aeabi_i2d>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	4630      	mov	r0, r6
 8011fee:	4639      	mov	r1, r7
 8011ff0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011ff4:	f7ee f968 	bl	80002c8 <__aeabi_dsub>
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	4b16      	ldr	r3, [pc, #88]	; (8012054 <__ieee754_rem_pio2+0x3dc>)
 8011ffc:	f7ee fb1c 	bl	8000638 <__aeabi_dmul>
 8012000:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8012004:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012008:	f04f 0803 	mov.w	r8, #3
 801200c:	2600      	movs	r6, #0
 801200e:	2700      	movs	r7, #0
 8012010:	4632      	mov	r2, r6
 8012012:	463b      	mov	r3, r7
 8012014:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012018:	f108 3aff 	add.w	sl, r8, #4294967295
 801201c:	f7ee fd74 	bl	8000b08 <__aeabi_dcmpeq>
 8012020:	b9b0      	cbnz	r0, 8012050 <__ieee754_rem_pio2+0x3d8>
 8012022:	4b0d      	ldr	r3, [pc, #52]	; (8012058 <__ieee754_rem_pio2+0x3e0>)
 8012024:	9301      	str	r3, [sp, #4]
 8012026:	2302      	movs	r3, #2
 8012028:	9300      	str	r3, [sp, #0]
 801202a:	462a      	mov	r2, r5
 801202c:	4643      	mov	r3, r8
 801202e:	4621      	mov	r1, r4
 8012030:	a806      	add	r0, sp, #24
 8012032:	f000 f98d 	bl	8012350 <__kernel_rem_pio2>
 8012036:	9b04      	ldr	r3, [sp, #16]
 8012038:	2b00      	cmp	r3, #0
 801203a:	4605      	mov	r5, r0
 801203c:	f6bf ae58 	bge.w	8011cf0 <__ieee754_rem_pio2+0x78>
 8012040:	6863      	ldr	r3, [r4, #4]
 8012042:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012046:	6063      	str	r3, [r4, #4]
 8012048:	68e3      	ldr	r3, [r4, #12]
 801204a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801204e:	e746      	b.n	8011ede <__ieee754_rem_pio2+0x266>
 8012050:	46d0      	mov	r8, sl
 8012052:	e7dd      	b.n	8012010 <__ieee754_rem_pio2+0x398>
 8012054:	41700000 	.word	0x41700000
 8012058:	08013aa4 	.word	0x08013aa4

0801205c <__ieee754_sqrt>:
 801205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012060:	4955      	ldr	r1, [pc, #340]	; (80121b8 <__ieee754_sqrt+0x15c>)
 8012062:	ec55 4b10 	vmov	r4, r5, d0
 8012066:	43a9      	bics	r1, r5
 8012068:	462b      	mov	r3, r5
 801206a:	462a      	mov	r2, r5
 801206c:	d112      	bne.n	8012094 <__ieee754_sqrt+0x38>
 801206e:	ee10 2a10 	vmov	r2, s0
 8012072:	ee10 0a10 	vmov	r0, s0
 8012076:	4629      	mov	r1, r5
 8012078:	f7ee fade 	bl	8000638 <__aeabi_dmul>
 801207c:	4602      	mov	r2, r0
 801207e:	460b      	mov	r3, r1
 8012080:	4620      	mov	r0, r4
 8012082:	4629      	mov	r1, r5
 8012084:	f7ee f922 	bl	80002cc <__adddf3>
 8012088:	4604      	mov	r4, r0
 801208a:	460d      	mov	r5, r1
 801208c:	ec45 4b10 	vmov	d0, r4, r5
 8012090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012094:	2d00      	cmp	r5, #0
 8012096:	ee10 0a10 	vmov	r0, s0
 801209a:	4621      	mov	r1, r4
 801209c:	dc0f      	bgt.n	80120be <__ieee754_sqrt+0x62>
 801209e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80120a2:	4330      	orrs	r0, r6
 80120a4:	d0f2      	beq.n	801208c <__ieee754_sqrt+0x30>
 80120a6:	b155      	cbz	r5, 80120be <__ieee754_sqrt+0x62>
 80120a8:	ee10 2a10 	vmov	r2, s0
 80120ac:	4620      	mov	r0, r4
 80120ae:	4629      	mov	r1, r5
 80120b0:	f7ee f90a 	bl	80002c8 <__aeabi_dsub>
 80120b4:	4602      	mov	r2, r0
 80120b6:	460b      	mov	r3, r1
 80120b8:	f7ee fbe8 	bl	800088c <__aeabi_ddiv>
 80120bc:	e7e4      	b.n	8012088 <__ieee754_sqrt+0x2c>
 80120be:	151b      	asrs	r3, r3, #20
 80120c0:	d073      	beq.n	80121aa <__ieee754_sqrt+0x14e>
 80120c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80120c6:	07dd      	lsls	r5, r3, #31
 80120c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80120cc:	bf48      	it	mi
 80120ce:	0fc8      	lsrmi	r0, r1, #31
 80120d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80120d4:	bf44      	itt	mi
 80120d6:	0049      	lslmi	r1, r1, #1
 80120d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80120dc:	2500      	movs	r5, #0
 80120de:	1058      	asrs	r0, r3, #1
 80120e0:	0fcb      	lsrs	r3, r1, #31
 80120e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80120e6:	0049      	lsls	r1, r1, #1
 80120e8:	2316      	movs	r3, #22
 80120ea:	462c      	mov	r4, r5
 80120ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80120f0:	19a7      	adds	r7, r4, r6
 80120f2:	4297      	cmp	r7, r2
 80120f4:	bfde      	ittt	le
 80120f6:	19bc      	addle	r4, r7, r6
 80120f8:	1bd2      	suble	r2, r2, r7
 80120fa:	19ad      	addle	r5, r5, r6
 80120fc:	0fcf      	lsrs	r7, r1, #31
 80120fe:	3b01      	subs	r3, #1
 8012100:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8012104:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012108:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801210c:	d1f0      	bne.n	80120f0 <__ieee754_sqrt+0x94>
 801210e:	f04f 0c20 	mov.w	ip, #32
 8012112:	469e      	mov	lr, r3
 8012114:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012118:	42a2      	cmp	r2, r4
 801211a:	eb06 070e 	add.w	r7, r6, lr
 801211e:	dc02      	bgt.n	8012126 <__ieee754_sqrt+0xca>
 8012120:	d112      	bne.n	8012148 <__ieee754_sqrt+0xec>
 8012122:	428f      	cmp	r7, r1
 8012124:	d810      	bhi.n	8012148 <__ieee754_sqrt+0xec>
 8012126:	2f00      	cmp	r7, #0
 8012128:	eb07 0e06 	add.w	lr, r7, r6
 801212c:	da42      	bge.n	80121b4 <__ieee754_sqrt+0x158>
 801212e:	f1be 0f00 	cmp.w	lr, #0
 8012132:	db3f      	blt.n	80121b4 <__ieee754_sqrt+0x158>
 8012134:	f104 0801 	add.w	r8, r4, #1
 8012138:	1b12      	subs	r2, r2, r4
 801213a:	428f      	cmp	r7, r1
 801213c:	bf88      	it	hi
 801213e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8012142:	1bc9      	subs	r1, r1, r7
 8012144:	4433      	add	r3, r6
 8012146:	4644      	mov	r4, r8
 8012148:	0052      	lsls	r2, r2, #1
 801214a:	f1bc 0c01 	subs.w	ip, ip, #1
 801214e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8012152:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012156:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801215a:	d1dd      	bne.n	8012118 <__ieee754_sqrt+0xbc>
 801215c:	430a      	orrs	r2, r1
 801215e:	d006      	beq.n	801216e <__ieee754_sqrt+0x112>
 8012160:	1c5c      	adds	r4, r3, #1
 8012162:	bf13      	iteet	ne
 8012164:	3301      	addne	r3, #1
 8012166:	3501      	addeq	r5, #1
 8012168:	4663      	moveq	r3, ip
 801216a:	f023 0301 	bicne.w	r3, r3, #1
 801216e:	106a      	asrs	r2, r5, #1
 8012170:	085b      	lsrs	r3, r3, #1
 8012172:	07e9      	lsls	r1, r5, #31
 8012174:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8012178:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801217c:	bf48      	it	mi
 801217e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8012182:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8012186:	461c      	mov	r4, r3
 8012188:	e780      	b.n	801208c <__ieee754_sqrt+0x30>
 801218a:	0aca      	lsrs	r2, r1, #11
 801218c:	3815      	subs	r0, #21
 801218e:	0549      	lsls	r1, r1, #21
 8012190:	2a00      	cmp	r2, #0
 8012192:	d0fa      	beq.n	801218a <__ieee754_sqrt+0x12e>
 8012194:	02d6      	lsls	r6, r2, #11
 8012196:	d50a      	bpl.n	80121ae <__ieee754_sqrt+0x152>
 8012198:	f1c3 0420 	rsb	r4, r3, #32
 801219c:	fa21 f404 	lsr.w	r4, r1, r4
 80121a0:	1e5d      	subs	r5, r3, #1
 80121a2:	4099      	lsls	r1, r3
 80121a4:	4322      	orrs	r2, r4
 80121a6:	1b43      	subs	r3, r0, r5
 80121a8:	e78b      	b.n	80120c2 <__ieee754_sqrt+0x66>
 80121aa:	4618      	mov	r0, r3
 80121ac:	e7f0      	b.n	8012190 <__ieee754_sqrt+0x134>
 80121ae:	0052      	lsls	r2, r2, #1
 80121b0:	3301      	adds	r3, #1
 80121b2:	e7ef      	b.n	8012194 <__ieee754_sqrt+0x138>
 80121b4:	46a0      	mov	r8, r4
 80121b6:	e7bf      	b.n	8012138 <__ieee754_sqrt+0xdc>
 80121b8:	7ff00000 	.word	0x7ff00000
 80121bc:	00000000 	.word	0x00000000

080121c0 <__kernel_cos>:
 80121c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121c4:	ec59 8b10 	vmov	r8, r9, d0
 80121c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80121cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80121d0:	ed2d 8b02 	vpush	{d8}
 80121d4:	eeb0 8a41 	vmov.f32	s16, s2
 80121d8:	eef0 8a61 	vmov.f32	s17, s3
 80121dc:	da07      	bge.n	80121ee <__kernel_cos+0x2e>
 80121de:	ee10 0a10 	vmov	r0, s0
 80121e2:	4649      	mov	r1, r9
 80121e4:	f7ee fcd8 	bl	8000b98 <__aeabi_d2iz>
 80121e8:	2800      	cmp	r0, #0
 80121ea:	f000 8089 	beq.w	8012300 <__kernel_cos+0x140>
 80121ee:	4642      	mov	r2, r8
 80121f0:	464b      	mov	r3, r9
 80121f2:	4640      	mov	r0, r8
 80121f4:	4649      	mov	r1, r9
 80121f6:	f7ee fa1f 	bl	8000638 <__aeabi_dmul>
 80121fa:	2200      	movs	r2, #0
 80121fc:	4b4e      	ldr	r3, [pc, #312]	; (8012338 <__kernel_cos+0x178>)
 80121fe:	4604      	mov	r4, r0
 8012200:	460d      	mov	r5, r1
 8012202:	f7ee fa19 	bl	8000638 <__aeabi_dmul>
 8012206:	a340      	add	r3, pc, #256	; (adr r3, 8012308 <__kernel_cos+0x148>)
 8012208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801220c:	4682      	mov	sl, r0
 801220e:	468b      	mov	fp, r1
 8012210:	4620      	mov	r0, r4
 8012212:	4629      	mov	r1, r5
 8012214:	f7ee fa10 	bl	8000638 <__aeabi_dmul>
 8012218:	a33d      	add	r3, pc, #244	; (adr r3, 8012310 <__kernel_cos+0x150>)
 801221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801221e:	f7ee f855 	bl	80002cc <__adddf3>
 8012222:	4622      	mov	r2, r4
 8012224:	462b      	mov	r3, r5
 8012226:	f7ee fa07 	bl	8000638 <__aeabi_dmul>
 801222a:	a33b      	add	r3, pc, #236	; (adr r3, 8012318 <__kernel_cos+0x158>)
 801222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012230:	f7ee f84a 	bl	80002c8 <__aeabi_dsub>
 8012234:	4622      	mov	r2, r4
 8012236:	462b      	mov	r3, r5
 8012238:	f7ee f9fe 	bl	8000638 <__aeabi_dmul>
 801223c:	a338      	add	r3, pc, #224	; (adr r3, 8012320 <__kernel_cos+0x160>)
 801223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012242:	f7ee f843 	bl	80002cc <__adddf3>
 8012246:	4622      	mov	r2, r4
 8012248:	462b      	mov	r3, r5
 801224a:	f7ee f9f5 	bl	8000638 <__aeabi_dmul>
 801224e:	a336      	add	r3, pc, #216	; (adr r3, 8012328 <__kernel_cos+0x168>)
 8012250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012254:	f7ee f838 	bl	80002c8 <__aeabi_dsub>
 8012258:	4622      	mov	r2, r4
 801225a:	462b      	mov	r3, r5
 801225c:	f7ee f9ec 	bl	8000638 <__aeabi_dmul>
 8012260:	a333      	add	r3, pc, #204	; (adr r3, 8012330 <__kernel_cos+0x170>)
 8012262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012266:	f7ee f831 	bl	80002cc <__adddf3>
 801226a:	4622      	mov	r2, r4
 801226c:	462b      	mov	r3, r5
 801226e:	f7ee f9e3 	bl	8000638 <__aeabi_dmul>
 8012272:	4622      	mov	r2, r4
 8012274:	462b      	mov	r3, r5
 8012276:	f7ee f9df 	bl	8000638 <__aeabi_dmul>
 801227a:	ec53 2b18 	vmov	r2, r3, d8
 801227e:	4604      	mov	r4, r0
 8012280:	460d      	mov	r5, r1
 8012282:	4640      	mov	r0, r8
 8012284:	4649      	mov	r1, r9
 8012286:	f7ee f9d7 	bl	8000638 <__aeabi_dmul>
 801228a:	460b      	mov	r3, r1
 801228c:	4602      	mov	r2, r0
 801228e:	4629      	mov	r1, r5
 8012290:	4620      	mov	r0, r4
 8012292:	f7ee f819 	bl	80002c8 <__aeabi_dsub>
 8012296:	4b29      	ldr	r3, [pc, #164]	; (801233c <__kernel_cos+0x17c>)
 8012298:	429e      	cmp	r6, r3
 801229a:	4680      	mov	r8, r0
 801229c:	4689      	mov	r9, r1
 801229e:	dc11      	bgt.n	80122c4 <__kernel_cos+0x104>
 80122a0:	4602      	mov	r2, r0
 80122a2:	460b      	mov	r3, r1
 80122a4:	4650      	mov	r0, sl
 80122a6:	4659      	mov	r1, fp
 80122a8:	f7ee f80e 	bl	80002c8 <__aeabi_dsub>
 80122ac:	460b      	mov	r3, r1
 80122ae:	4924      	ldr	r1, [pc, #144]	; (8012340 <__kernel_cos+0x180>)
 80122b0:	4602      	mov	r2, r0
 80122b2:	2000      	movs	r0, #0
 80122b4:	f7ee f808 	bl	80002c8 <__aeabi_dsub>
 80122b8:	ecbd 8b02 	vpop	{d8}
 80122bc:	ec41 0b10 	vmov	d0, r0, r1
 80122c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122c4:	4b1f      	ldr	r3, [pc, #124]	; (8012344 <__kernel_cos+0x184>)
 80122c6:	491e      	ldr	r1, [pc, #120]	; (8012340 <__kernel_cos+0x180>)
 80122c8:	429e      	cmp	r6, r3
 80122ca:	bfcc      	ite	gt
 80122cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8012348 <__kernel_cos+0x188>)
 80122ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80122d2:	2400      	movs	r4, #0
 80122d4:	4622      	mov	r2, r4
 80122d6:	462b      	mov	r3, r5
 80122d8:	2000      	movs	r0, #0
 80122da:	f7ed fff5 	bl	80002c8 <__aeabi_dsub>
 80122de:	4622      	mov	r2, r4
 80122e0:	4606      	mov	r6, r0
 80122e2:	460f      	mov	r7, r1
 80122e4:	462b      	mov	r3, r5
 80122e6:	4650      	mov	r0, sl
 80122e8:	4659      	mov	r1, fp
 80122ea:	f7ed ffed 	bl	80002c8 <__aeabi_dsub>
 80122ee:	4642      	mov	r2, r8
 80122f0:	464b      	mov	r3, r9
 80122f2:	f7ed ffe9 	bl	80002c8 <__aeabi_dsub>
 80122f6:	4602      	mov	r2, r0
 80122f8:	460b      	mov	r3, r1
 80122fa:	4630      	mov	r0, r6
 80122fc:	4639      	mov	r1, r7
 80122fe:	e7d9      	b.n	80122b4 <__kernel_cos+0xf4>
 8012300:	2000      	movs	r0, #0
 8012302:	490f      	ldr	r1, [pc, #60]	; (8012340 <__kernel_cos+0x180>)
 8012304:	e7d8      	b.n	80122b8 <__kernel_cos+0xf8>
 8012306:	bf00      	nop
 8012308:	be8838d4 	.word	0xbe8838d4
 801230c:	bda8fae9 	.word	0xbda8fae9
 8012310:	bdb4b1c4 	.word	0xbdb4b1c4
 8012314:	3e21ee9e 	.word	0x3e21ee9e
 8012318:	809c52ad 	.word	0x809c52ad
 801231c:	3e927e4f 	.word	0x3e927e4f
 8012320:	19cb1590 	.word	0x19cb1590
 8012324:	3efa01a0 	.word	0x3efa01a0
 8012328:	16c15177 	.word	0x16c15177
 801232c:	3f56c16c 	.word	0x3f56c16c
 8012330:	5555554c 	.word	0x5555554c
 8012334:	3fa55555 	.word	0x3fa55555
 8012338:	3fe00000 	.word	0x3fe00000
 801233c:	3fd33332 	.word	0x3fd33332
 8012340:	3ff00000 	.word	0x3ff00000
 8012344:	3fe90000 	.word	0x3fe90000
 8012348:	3fd20000 	.word	0x3fd20000
 801234c:	00000000 	.word	0x00000000

08012350 <__kernel_rem_pio2>:
 8012350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012354:	ed2d 8b02 	vpush	{d8}
 8012358:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801235c:	1ed4      	subs	r4, r2, #3
 801235e:	9308      	str	r3, [sp, #32]
 8012360:	9101      	str	r1, [sp, #4]
 8012362:	4bc5      	ldr	r3, [pc, #788]	; (8012678 <__kernel_rem_pio2+0x328>)
 8012364:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8012366:	9009      	str	r0, [sp, #36]	; 0x24
 8012368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801236c:	9304      	str	r3, [sp, #16]
 801236e:	9b08      	ldr	r3, [sp, #32]
 8012370:	3b01      	subs	r3, #1
 8012372:	9307      	str	r3, [sp, #28]
 8012374:	2318      	movs	r3, #24
 8012376:	fb94 f4f3 	sdiv	r4, r4, r3
 801237a:	f06f 0317 	mvn.w	r3, #23
 801237e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8012382:	fb04 3303 	mla	r3, r4, r3, r3
 8012386:	eb03 0a02 	add.w	sl, r3, r2
 801238a:	9b04      	ldr	r3, [sp, #16]
 801238c:	9a07      	ldr	r2, [sp, #28]
 801238e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8012668 <__kernel_rem_pio2+0x318>
 8012392:	eb03 0802 	add.w	r8, r3, r2
 8012396:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012398:	1aa7      	subs	r7, r4, r2
 801239a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801239e:	ae22      	add	r6, sp, #136	; 0x88
 80123a0:	2500      	movs	r5, #0
 80123a2:	4545      	cmp	r5, r8
 80123a4:	dd13      	ble.n	80123ce <__kernel_rem_pio2+0x7e>
 80123a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8012668 <__kernel_rem_pio2+0x318>
 80123aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80123ae:	2600      	movs	r6, #0
 80123b0:	9b04      	ldr	r3, [sp, #16]
 80123b2:	429e      	cmp	r6, r3
 80123b4:	dc32      	bgt.n	801241c <__kernel_rem_pio2+0xcc>
 80123b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80123b8:	9302      	str	r3, [sp, #8]
 80123ba:	9b08      	ldr	r3, [sp, #32]
 80123bc:	199d      	adds	r5, r3, r6
 80123be:	ab22      	add	r3, sp, #136	; 0x88
 80123c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80123c4:	9306      	str	r3, [sp, #24]
 80123c6:	ec59 8b18 	vmov	r8, r9, d8
 80123ca:	2700      	movs	r7, #0
 80123cc:	e01f      	b.n	801240e <__kernel_rem_pio2+0xbe>
 80123ce:	42ef      	cmn	r7, r5
 80123d0:	d407      	bmi.n	80123e2 <__kernel_rem_pio2+0x92>
 80123d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80123d6:	f7ee f8c5 	bl	8000564 <__aeabi_i2d>
 80123da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80123de:	3501      	adds	r5, #1
 80123e0:	e7df      	b.n	80123a2 <__kernel_rem_pio2+0x52>
 80123e2:	ec51 0b18 	vmov	r0, r1, d8
 80123e6:	e7f8      	b.n	80123da <__kernel_rem_pio2+0x8a>
 80123e8:	9906      	ldr	r1, [sp, #24]
 80123ea:	9d02      	ldr	r5, [sp, #8]
 80123ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80123f0:	9106      	str	r1, [sp, #24]
 80123f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80123f6:	9502      	str	r5, [sp, #8]
 80123f8:	f7ee f91e 	bl	8000638 <__aeabi_dmul>
 80123fc:	4602      	mov	r2, r0
 80123fe:	460b      	mov	r3, r1
 8012400:	4640      	mov	r0, r8
 8012402:	4649      	mov	r1, r9
 8012404:	f7ed ff62 	bl	80002cc <__adddf3>
 8012408:	3701      	adds	r7, #1
 801240a:	4680      	mov	r8, r0
 801240c:	4689      	mov	r9, r1
 801240e:	9b07      	ldr	r3, [sp, #28]
 8012410:	429f      	cmp	r7, r3
 8012412:	dde9      	ble.n	80123e8 <__kernel_rem_pio2+0x98>
 8012414:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012418:	3601      	adds	r6, #1
 801241a:	e7c9      	b.n	80123b0 <__kernel_rem_pio2+0x60>
 801241c:	9b04      	ldr	r3, [sp, #16]
 801241e:	aa0e      	add	r2, sp, #56	; 0x38
 8012420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012424:	930c      	str	r3, [sp, #48]	; 0x30
 8012426:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012428:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801242c:	9c04      	ldr	r4, [sp, #16]
 801242e:	930b      	str	r3, [sp, #44]	; 0x2c
 8012430:	ab9a      	add	r3, sp, #616	; 0x268
 8012432:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8012436:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801243a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801243e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8012442:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8012446:	ab9a      	add	r3, sp, #616	; 0x268
 8012448:	445b      	add	r3, fp
 801244a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801244e:	2500      	movs	r5, #0
 8012450:	1b63      	subs	r3, r4, r5
 8012452:	2b00      	cmp	r3, #0
 8012454:	dc78      	bgt.n	8012548 <__kernel_rem_pio2+0x1f8>
 8012456:	4650      	mov	r0, sl
 8012458:	ec49 8b10 	vmov	d0, r8, r9
 801245c:	f000 fdb0 	bl	8012fc0 <scalbn>
 8012460:	ec57 6b10 	vmov	r6, r7, d0
 8012464:	2200      	movs	r2, #0
 8012466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801246a:	ee10 0a10 	vmov	r0, s0
 801246e:	4639      	mov	r1, r7
 8012470:	f7ee f8e2 	bl	8000638 <__aeabi_dmul>
 8012474:	ec41 0b10 	vmov	d0, r0, r1
 8012478:	f000 fd12 	bl	8012ea0 <floor>
 801247c:	2200      	movs	r2, #0
 801247e:	ec51 0b10 	vmov	r0, r1, d0
 8012482:	4b7e      	ldr	r3, [pc, #504]	; (801267c <__kernel_rem_pio2+0x32c>)
 8012484:	f7ee f8d8 	bl	8000638 <__aeabi_dmul>
 8012488:	4602      	mov	r2, r0
 801248a:	460b      	mov	r3, r1
 801248c:	4630      	mov	r0, r6
 801248e:	4639      	mov	r1, r7
 8012490:	f7ed ff1a 	bl	80002c8 <__aeabi_dsub>
 8012494:	460f      	mov	r7, r1
 8012496:	4606      	mov	r6, r0
 8012498:	f7ee fb7e 	bl	8000b98 <__aeabi_d2iz>
 801249c:	9006      	str	r0, [sp, #24]
 801249e:	f7ee f861 	bl	8000564 <__aeabi_i2d>
 80124a2:	4602      	mov	r2, r0
 80124a4:	460b      	mov	r3, r1
 80124a6:	4630      	mov	r0, r6
 80124a8:	4639      	mov	r1, r7
 80124aa:	f7ed ff0d 	bl	80002c8 <__aeabi_dsub>
 80124ae:	f1ba 0f00 	cmp.w	sl, #0
 80124b2:	4606      	mov	r6, r0
 80124b4:	460f      	mov	r7, r1
 80124b6:	dd6c      	ble.n	8012592 <__kernel_rem_pio2+0x242>
 80124b8:	1e62      	subs	r2, r4, #1
 80124ba:	ab0e      	add	r3, sp, #56	; 0x38
 80124bc:	f1ca 0118 	rsb	r1, sl, #24
 80124c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80124c4:	9d06      	ldr	r5, [sp, #24]
 80124c6:	fa40 f301 	asr.w	r3, r0, r1
 80124ca:	441d      	add	r5, r3
 80124cc:	408b      	lsls	r3, r1
 80124ce:	1ac0      	subs	r0, r0, r3
 80124d0:	ab0e      	add	r3, sp, #56	; 0x38
 80124d2:	9506      	str	r5, [sp, #24]
 80124d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80124d8:	f1ca 0317 	rsb	r3, sl, #23
 80124dc:	fa40 f303 	asr.w	r3, r0, r3
 80124e0:	9302      	str	r3, [sp, #8]
 80124e2:	9b02      	ldr	r3, [sp, #8]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	dd62      	ble.n	80125ae <__kernel_rem_pio2+0x25e>
 80124e8:	9b06      	ldr	r3, [sp, #24]
 80124ea:	2200      	movs	r2, #0
 80124ec:	3301      	adds	r3, #1
 80124ee:	9306      	str	r3, [sp, #24]
 80124f0:	4615      	mov	r5, r2
 80124f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80124f6:	4294      	cmp	r4, r2
 80124f8:	f300 8095 	bgt.w	8012626 <__kernel_rem_pio2+0x2d6>
 80124fc:	f1ba 0f00 	cmp.w	sl, #0
 8012500:	dd07      	ble.n	8012512 <__kernel_rem_pio2+0x1c2>
 8012502:	f1ba 0f01 	cmp.w	sl, #1
 8012506:	f000 80a2 	beq.w	801264e <__kernel_rem_pio2+0x2fe>
 801250a:	f1ba 0f02 	cmp.w	sl, #2
 801250e:	f000 80c1 	beq.w	8012694 <__kernel_rem_pio2+0x344>
 8012512:	9b02      	ldr	r3, [sp, #8]
 8012514:	2b02      	cmp	r3, #2
 8012516:	d14a      	bne.n	80125ae <__kernel_rem_pio2+0x25e>
 8012518:	4632      	mov	r2, r6
 801251a:	463b      	mov	r3, r7
 801251c:	2000      	movs	r0, #0
 801251e:	4958      	ldr	r1, [pc, #352]	; (8012680 <__kernel_rem_pio2+0x330>)
 8012520:	f7ed fed2 	bl	80002c8 <__aeabi_dsub>
 8012524:	4606      	mov	r6, r0
 8012526:	460f      	mov	r7, r1
 8012528:	2d00      	cmp	r5, #0
 801252a:	d040      	beq.n	80125ae <__kernel_rem_pio2+0x25e>
 801252c:	4650      	mov	r0, sl
 801252e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8012670 <__kernel_rem_pio2+0x320>
 8012532:	f000 fd45 	bl	8012fc0 <scalbn>
 8012536:	4630      	mov	r0, r6
 8012538:	4639      	mov	r1, r7
 801253a:	ec53 2b10 	vmov	r2, r3, d0
 801253e:	f7ed fec3 	bl	80002c8 <__aeabi_dsub>
 8012542:	4606      	mov	r6, r0
 8012544:	460f      	mov	r7, r1
 8012546:	e032      	b.n	80125ae <__kernel_rem_pio2+0x25e>
 8012548:	2200      	movs	r2, #0
 801254a:	4b4e      	ldr	r3, [pc, #312]	; (8012684 <__kernel_rem_pio2+0x334>)
 801254c:	4640      	mov	r0, r8
 801254e:	4649      	mov	r1, r9
 8012550:	f7ee f872 	bl	8000638 <__aeabi_dmul>
 8012554:	f7ee fb20 	bl	8000b98 <__aeabi_d2iz>
 8012558:	f7ee f804 	bl	8000564 <__aeabi_i2d>
 801255c:	2200      	movs	r2, #0
 801255e:	4b4a      	ldr	r3, [pc, #296]	; (8012688 <__kernel_rem_pio2+0x338>)
 8012560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012564:	f7ee f868 	bl	8000638 <__aeabi_dmul>
 8012568:	4602      	mov	r2, r0
 801256a:	460b      	mov	r3, r1
 801256c:	4640      	mov	r0, r8
 801256e:	4649      	mov	r1, r9
 8012570:	f7ed feaa 	bl	80002c8 <__aeabi_dsub>
 8012574:	f7ee fb10 	bl	8000b98 <__aeabi_d2iz>
 8012578:	ab0e      	add	r3, sp, #56	; 0x38
 801257a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801257e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8012582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012586:	f7ed fea1 	bl	80002cc <__adddf3>
 801258a:	3501      	adds	r5, #1
 801258c:	4680      	mov	r8, r0
 801258e:	4689      	mov	r9, r1
 8012590:	e75e      	b.n	8012450 <__kernel_rem_pio2+0x100>
 8012592:	d105      	bne.n	80125a0 <__kernel_rem_pio2+0x250>
 8012594:	1e63      	subs	r3, r4, #1
 8012596:	aa0e      	add	r2, sp, #56	; 0x38
 8012598:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801259c:	15c3      	asrs	r3, r0, #23
 801259e:	e79f      	b.n	80124e0 <__kernel_rem_pio2+0x190>
 80125a0:	2200      	movs	r2, #0
 80125a2:	4b3a      	ldr	r3, [pc, #232]	; (801268c <__kernel_rem_pio2+0x33c>)
 80125a4:	f7ee face 	bl	8000b44 <__aeabi_dcmpge>
 80125a8:	2800      	cmp	r0, #0
 80125aa:	d139      	bne.n	8012620 <__kernel_rem_pio2+0x2d0>
 80125ac:	9002      	str	r0, [sp, #8]
 80125ae:	2200      	movs	r2, #0
 80125b0:	2300      	movs	r3, #0
 80125b2:	4630      	mov	r0, r6
 80125b4:	4639      	mov	r1, r7
 80125b6:	f7ee faa7 	bl	8000b08 <__aeabi_dcmpeq>
 80125ba:	2800      	cmp	r0, #0
 80125bc:	f000 80c7 	beq.w	801274e <__kernel_rem_pio2+0x3fe>
 80125c0:	1e65      	subs	r5, r4, #1
 80125c2:	462b      	mov	r3, r5
 80125c4:	2200      	movs	r2, #0
 80125c6:	9904      	ldr	r1, [sp, #16]
 80125c8:	428b      	cmp	r3, r1
 80125ca:	da6a      	bge.n	80126a2 <__kernel_rem_pio2+0x352>
 80125cc:	2a00      	cmp	r2, #0
 80125ce:	f000 8088 	beq.w	80126e2 <__kernel_rem_pio2+0x392>
 80125d2:	ab0e      	add	r3, sp, #56	; 0x38
 80125d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80125d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f000 80b4 	beq.w	801274a <__kernel_rem_pio2+0x3fa>
 80125e2:	4650      	mov	r0, sl
 80125e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8012670 <__kernel_rem_pio2+0x320>
 80125e8:	f000 fcea 	bl	8012fc0 <scalbn>
 80125ec:	00ec      	lsls	r4, r5, #3
 80125ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80125f0:	191e      	adds	r6, r3, r4
 80125f2:	ec59 8b10 	vmov	r8, r9, d0
 80125f6:	f106 0a08 	add.w	sl, r6, #8
 80125fa:	462f      	mov	r7, r5
 80125fc:	2f00      	cmp	r7, #0
 80125fe:	f280 80df 	bge.w	80127c0 <__kernel_rem_pio2+0x470>
 8012602:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8012668 <__kernel_rem_pio2+0x318>
 8012606:	f04f 0a00 	mov.w	sl, #0
 801260a:	eba5 030a 	sub.w	r3, r5, sl
 801260e:	2b00      	cmp	r3, #0
 8012610:	f2c0 810a 	blt.w	8012828 <__kernel_rem_pio2+0x4d8>
 8012614:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012690 <__kernel_rem_pio2+0x340>
 8012618:	ec59 8b18 	vmov	r8, r9, d8
 801261c:	2700      	movs	r7, #0
 801261e:	e0f5      	b.n	801280c <__kernel_rem_pio2+0x4bc>
 8012620:	2302      	movs	r3, #2
 8012622:	9302      	str	r3, [sp, #8]
 8012624:	e760      	b.n	80124e8 <__kernel_rem_pio2+0x198>
 8012626:	ab0e      	add	r3, sp, #56	; 0x38
 8012628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801262c:	b94d      	cbnz	r5, 8012642 <__kernel_rem_pio2+0x2f2>
 801262e:	b12b      	cbz	r3, 801263c <__kernel_rem_pio2+0x2ec>
 8012630:	a80e      	add	r0, sp, #56	; 0x38
 8012632:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8012636:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801263a:	2301      	movs	r3, #1
 801263c:	3201      	adds	r2, #1
 801263e:	461d      	mov	r5, r3
 8012640:	e759      	b.n	80124f6 <__kernel_rem_pio2+0x1a6>
 8012642:	a80e      	add	r0, sp, #56	; 0x38
 8012644:	1acb      	subs	r3, r1, r3
 8012646:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801264a:	462b      	mov	r3, r5
 801264c:	e7f6      	b.n	801263c <__kernel_rem_pio2+0x2ec>
 801264e:	1e62      	subs	r2, r4, #1
 8012650:	ab0e      	add	r3, sp, #56	; 0x38
 8012652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012656:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801265a:	a90e      	add	r1, sp, #56	; 0x38
 801265c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012660:	e757      	b.n	8012512 <__kernel_rem_pio2+0x1c2>
 8012662:	bf00      	nop
 8012664:	f3af 8000 	nop.w
	...
 8012674:	3ff00000 	.word	0x3ff00000
 8012678:	08013bf0 	.word	0x08013bf0
 801267c:	40200000 	.word	0x40200000
 8012680:	3ff00000 	.word	0x3ff00000
 8012684:	3e700000 	.word	0x3e700000
 8012688:	41700000 	.word	0x41700000
 801268c:	3fe00000 	.word	0x3fe00000
 8012690:	08013bb0 	.word	0x08013bb0
 8012694:	1e62      	subs	r2, r4, #1
 8012696:	ab0e      	add	r3, sp, #56	; 0x38
 8012698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801269c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80126a0:	e7db      	b.n	801265a <__kernel_rem_pio2+0x30a>
 80126a2:	a90e      	add	r1, sp, #56	; 0x38
 80126a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80126a8:	3b01      	subs	r3, #1
 80126aa:	430a      	orrs	r2, r1
 80126ac:	e78b      	b.n	80125c6 <__kernel_rem_pio2+0x276>
 80126ae:	3301      	adds	r3, #1
 80126b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80126b4:	2900      	cmp	r1, #0
 80126b6:	d0fa      	beq.n	80126ae <__kernel_rem_pio2+0x35e>
 80126b8:	9a08      	ldr	r2, [sp, #32]
 80126ba:	4422      	add	r2, r4
 80126bc:	00d2      	lsls	r2, r2, #3
 80126be:	a922      	add	r1, sp, #136	; 0x88
 80126c0:	18e3      	adds	r3, r4, r3
 80126c2:	9206      	str	r2, [sp, #24]
 80126c4:	440a      	add	r2, r1
 80126c6:	9302      	str	r3, [sp, #8]
 80126c8:	f10b 0108 	add.w	r1, fp, #8
 80126cc:	f102 0308 	add.w	r3, r2, #8
 80126d0:	1c66      	adds	r6, r4, #1
 80126d2:	910a      	str	r1, [sp, #40]	; 0x28
 80126d4:	2500      	movs	r5, #0
 80126d6:	930d      	str	r3, [sp, #52]	; 0x34
 80126d8:	9b02      	ldr	r3, [sp, #8]
 80126da:	42b3      	cmp	r3, r6
 80126dc:	da04      	bge.n	80126e8 <__kernel_rem_pio2+0x398>
 80126de:	461c      	mov	r4, r3
 80126e0:	e6a6      	b.n	8012430 <__kernel_rem_pio2+0xe0>
 80126e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80126e4:	2301      	movs	r3, #1
 80126e6:	e7e3      	b.n	80126b0 <__kernel_rem_pio2+0x360>
 80126e8:	9b06      	ldr	r3, [sp, #24]
 80126ea:	18ef      	adds	r7, r5, r3
 80126ec:	ab22      	add	r3, sp, #136	; 0x88
 80126ee:	441f      	add	r7, r3
 80126f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80126f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80126f6:	f7ed ff35 	bl	8000564 <__aeabi_i2d>
 80126fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126fc:	461c      	mov	r4, r3
 80126fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012700:	e9c7 0100 	strd	r0, r1, [r7]
 8012704:	eb03 0b05 	add.w	fp, r3, r5
 8012708:	2700      	movs	r7, #0
 801270a:	f04f 0800 	mov.w	r8, #0
 801270e:	f04f 0900 	mov.w	r9, #0
 8012712:	9b07      	ldr	r3, [sp, #28]
 8012714:	429f      	cmp	r7, r3
 8012716:	dd08      	ble.n	801272a <__kernel_rem_pio2+0x3da>
 8012718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801271a:	aa72      	add	r2, sp, #456	; 0x1c8
 801271c:	18eb      	adds	r3, r5, r3
 801271e:	4413      	add	r3, r2
 8012720:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8012724:	3601      	adds	r6, #1
 8012726:	3508      	adds	r5, #8
 8012728:	e7d6      	b.n	80126d8 <__kernel_rem_pio2+0x388>
 801272a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801272e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012732:	f7ed ff81 	bl	8000638 <__aeabi_dmul>
 8012736:	4602      	mov	r2, r0
 8012738:	460b      	mov	r3, r1
 801273a:	4640      	mov	r0, r8
 801273c:	4649      	mov	r1, r9
 801273e:	f7ed fdc5 	bl	80002cc <__adddf3>
 8012742:	3701      	adds	r7, #1
 8012744:	4680      	mov	r8, r0
 8012746:	4689      	mov	r9, r1
 8012748:	e7e3      	b.n	8012712 <__kernel_rem_pio2+0x3c2>
 801274a:	3d01      	subs	r5, #1
 801274c:	e741      	b.n	80125d2 <__kernel_rem_pio2+0x282>
 801274e:	f1ca 0000 	rsb	r0, sl, #0
 8012752:	ec47 6b10 	vmov	d0, r6, r7
 8012756:	f000 fc33 	bl	8012fc0 <scalbn>
 801275a:	ec57 6b10 	vmov	r6, r7, d0
 801275e:	2200      	movs	r2, #0
 8012760:	4b99      	ldr	r3, [pc, #612]	; (80129c8 <__kernel_rem_pio2+0x678>)
 8012762:	ee10 0a10 	vmov	r0, s0
 8012766:	4639      	mov	r1, r7
 8012768:	f7ee f9ec 	bl	8000b44 <__aeabi_dcmpge>
 801276c:	b1f8      	cbz	r0, 80127ae <__kernel_rem_pio2+0x45e>
 801276e:	2200      	movs	r2, #0
 8012770:	4b96      	ldr	r3, [pc, #600]	; (80129cc <__kernel_rem_pio2+0x67c>)
 8012772:	4630      	mov	r0, r6
 8012774:	4639      	mov	r1, r7
 8012776:	f7ed ff5f 	bl	8000638 <__aeabi_dmul>
 801277a:	f7ee fa0d 	bl	8000b98 <__aeabi_d2iz>
 801277e:	4680      	mov	r8, r0
 8012780:	f7ed fef0 	bl	8000564 <__aeabi_i2d>
 8012784:	2200      	movs	r2, #0
 8012786:	4b90      	ldr	r3, [pc, #576]	; (80129c8 <__kernel_rem_pio2+0x678>)
 8012788:	f7ed ff56 	bl	8000638 <__aeabi_dmul>
 801278c:	460b      	mov	r3, r1
 801278e:	4602      	mov	r2, r0
 8012790:	4639      	mov	r1, r7
 8012792:	4630      	mov	r0, r6
 8012794:	f7ed fd98 	bl	80002c8 <__aeabi_dsub>
 8012798:	f7ee f9fe 	bl	8000b98 <__aeabi_d2iz>
 801279c:	1c65      	adds	r5, r4, #1
 801279e:	ab0e      	add	r3, sp, #56	; 0x38
 80127a0:	f10a 0a18 	add.w	sl, sl, #24
 80127a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80127a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80127ac:	e719      	b.n	80125e2 <__kernel_rem_pio2+0x292>
 80127ae:	4630      	mov	r0, r6
 80127b0:	4639      	mov	r1, r7
 80127b2:	f7ee f9f1 	bl	8000b98 <__aeabi_d2iz>
 80127b6:	ab0e      	add	r3, sp, #56	; 0x38
 80127b8:	4625      	mov	r5, r4
 80127ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80127be:	e710      	b.n	80125e2 <__kernel_rem_pio2+0x292>
 80127c0:	ab0e      	add	r3, sp, #56	; 0x38
 80127c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80127c6:	f7ed fecd 	bl	8000564 <__aeabi_i2d>
 80127ca:	4642      	mov	r2, r8
 80127cc:	464b      	mov	r3, r9
 80127ce:	f7ed ff33 	bl	8000638 <__aeabi_dmul>
 80127d2:	2200      	movs	r2, #0
 80127d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80127d8:	4b7c      	ldr	r3, [pc, #496]	; (80129cc <__kernel_rem_pio2+0x67c>)
 80127da:	4640      	mov	r0, r8
 80127dc:	4649      	mov	r1, r9
 80127de:	f7ed ff2b 	bl	8000638 <__aeabi_dmul>
 80127e2:	3f01      	subs	r7, #1
 80127e4:	4680      	mov	r8, r0
 80127e6:	4689      	mov	r9, r1
 80127e8:	e708      	b.n	80125fc <__kernel_rem_pio2+0x2ac>
 80127ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80127ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80127f6:	f7ed ff1f 	bl	8000638 <__aeabi_dmul>
 80127fa:	4602      	mov	r2, r0
 80127fc:	460b      	mov	r3, r1
 80127fe:	4640      	mov	r0, r8
 8012800:	4649      	mov	r1, r9
 8012802:	f7ed fd63 	bl	80002cc <__adddf3>
 8012806:	3701      	adds	r7, #1
 8012808:	4680      	mov	r8, r0
 801280a:	4689      	mov	r9, r1
 801280c:	9b04      	ldr	r3, [sp, #16]
 801280e:	429f      	cmp	r7, r3
 8012810:	dc01      	bgt.n	8012816 <__kernel_rem_pio2+0x4c6>
 8012812:	45ba      	cmp	sl, r7
 8012814:	dae9      	bge.n	80127ea <__kernel_rem_pio2+0x49a>
 8012816:	ab4a      	add	r3, sp, #296	; 0x128
 8012818:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801281c:	e9c3 8900 	strd	r8, r9, [r3]
 8012820:	f10a 0a01 	add.w	sl, sl, #1
 8012824:	3e08      	subs	r6, #8
 8012826:	e6f0      	b.n	801260a <__kernel_rem_pio2+0x2ba>
 8012828:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801282a:	2b03      	cmp	r3, #3
 801282c:	d85b      	bhi.n	80128e6 <__kernel_rem_pio2+0x596>
 801282e:	e8df f003 	tbb	[pc, r3]
 8012832:	264a      	.short	0x264a
 8012834:	0226      	.short	0x0226
 8012836:	ab9a      	add	r3, sp, #616	; 0x268
 8012838:	441c      	add	r4, r3
 801283a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801283e:	46a2      	mov	sl, r4
 8012840:	46ab      	mov	fp, r5
 8012842:	f1bb 0f00 	cmp.w	fp, #0
 8012846:	dc6c      	bgt.n	8012922 <__kernel_rem_pio2+0x5d2>
 8012848:	46a2      	mov	sl, r4
 801284a:	46ab      	mov	fp, r5
 801284c:	f1bb 0f01 	cmp.w	fp, #1
 8012850:	f300 8086 	bgt.w	8012960 <__kernel_rem_pio2+0x610>
 8012854:	2000      	movs	r0, #0
 8012856:	2100      	movs	r1, #0
 8012858:	2d01      	cmp	r5, #1
 801285a:	f300 80a0 	bgt.w	801299e <__kernel_rem_pio2+0x64e>
 801285e:	9b02      	ldr	r3, [sp, #8]
 8012860:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012864:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012868:	2b00      	cmp	r3, #0
 801286a:	f040 809e 	bne.w	80129aa <__kernel_rem_pio2+0x65a>
 801286e:	9b01      	ldr	r3, [sp, #4]
 8012870:	e9c3 7800 	strd	r7, r8, [r3]
 8012874:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012878:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801287c:	e033      	b.n	80128e6 <__kernel_rem_pio2+0x596>
 801287e:	3408      	adds	r4, #8
 8012880:	ab4a      	add	r3, sp, #296	; 0x128
 8012882:	441c      	add	r4, r3
 8012884:	462e      	mov	r6, r5
 8012886:	2000      	movs	r0, #0
 8012888:	2100      	movs	r1, #0
 801288a:	2e00      	cmp	r6, #0
 801288c:	da3a      	bge.n	8012904 <__kernel_rem_pio2+0x5b4>
 801288e:	9b02      	ldr	r3, [sp, #8]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d03d      	beq.n	8012910 <__kernel_rem_pio2+0x5c0>
 8012894:	4602      	mov	r2, r0
 8012896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801289a:	9c01      	ldr	r4, [sp, #4]
 801289c:	e9c4 2300 	strd	r2, r3, [r4]
 80128a0:	4602      	mov	r2, r0
 80128a2:	460b      	mov	r3, r1
 80128a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80128a8:	f7ed fd0e 	bl	80002c8 <__aeabi_dsub>
 80128ac:	ae4c      	add	r6, sp, #304	; 0x130
 80128ae:	2401      	movs	r4, #1
 80128b0:	42a5      	cmp	r5, r4
 80128b2:	da30      	bge.n	8012916 <__kernel_rem_pio2+0x5c6>
 80128b4:	9b02      	ldr	r3, [sp, #8]
 80128b6:	b113      	cbz	r3, 80128be <__kernel_rem_pio2+0x56e>
 80128b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128bc:	4619      	mov	r1, r3
 80128be:	9b01      	ldr	r3, [sp, #4]
 80128c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80128c4:	e00f      	b.n	80128e6 <__kernel_rem_pio2+0x596>
 80128c6:	ab9a      	add	r3, sp, #616	; 0x268
 80128c8:	441c      	add	r4, r3
 80128ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80128ce:	2000      	movs	r0, #0
 80128d0:	2100      	movs	r1, #0
 80128d2:	2d00      	cmp	r5, #0
 80128d4:	da10      	bge.n	80128f8 <__kernel_rem_pio2+0x5a8>
 80128d6:	9b02      	ldr	r3, [sp, #8]
 80128d8:	b113      	cbz	r3, 80128e0 <__kernel_rem_pio2+0x590>
 80128da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80128de:	4619      	mov	r1, r3
 80128e0:	9b01      	ldr	r3, [sp, #4]
 80128e2:	e9c3 0100 	strd	r0, r1, [r3]
 80128e6:	9b06      	ldr	r3, [sp, #24]
 80128e8:	f003 0007 	and.w	r0, r3, #7
 80128ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80128f0:	ecbd 8b02 	vpop	{d8}
 80128f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80128fc:	f7ed fce6 	bl	80002cc <__adddf3>
 8012900:	3d01      	subs	r5, #1
 8012902:	e7e6      	b.n	80128d2 <__kernel_rem_pio2+0x582>
 8012904:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012908:	f7ed fce0 	bl	80002cc <__adddf3>
 801290c:	3e01      	subs	r6, #1
 801290e:	e7bc      	b.n	801288a <__kernel_rem_pio2+0x53a>
 8012910:	4602      	mov	r2, r0
 8012912:	460b      	mov	r3, r1
 8012914:	e7c1      	b.n	801289a <__kernel_rem_pio2+0x54a>
 8012916:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801291a:	f7ed fcd7 	bl	80002cc <__adddf3>
 801291e:	3401      	adds	r4, #1
 8012920:	e7c6      	b.n	80128b0 <__kernel_rem_pio2+0x560>
 8012922:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012926:	ed3a 7b02 	vldmdb	sl!, {d7}
 801292a:	4640      	mov	r0, r8
 801292c:	ec53 2b17 	vmov	r2, r3, d7
 8012930:	4649      	mov	r1, r9
 8012932:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012936:	f7ed fcc9 	bl	80002cc <__adddf3>
 801293a:	4602      	mov	r2, r0
 801293c:	460b      	mov	r3, r1
 801293e:	4606      	mov	r6, r0
 8012940:	460f      	mov	r7, r1
 8012942:	4640      	mov	r0, r8
 8012944:	4649      	mov	r1, r9
 8012946:	f7ed fcbf 	bl	80002c8 <__aeabi_dsub>
 801294a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801294e:	f7ed fcbd 	bl	80002cc <__adddf3>
 8012952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012956:	e9ca 0100 	strd	r0, r1, [sl]
 801295a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801295e:	e770      	b.n	8012842 <__kernel_rem_pio2+0x4f2>
 8012960:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012964:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012968:	4630      	mov	r0, r6
 801296a:	ec53 2b17 	vmov	r2, r3, d7
 801296e:	4639      	mov	r1, r7
 8012970:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012974:	f7ed fcaa 	bl	80002cc <__adddf3>
 8012978:	4602      	mov	r2, r0
 801297a:	460b      	mov	r3, r1
 801297c:	4680      	mov	r8, r0
 801297e:	4689      	mov	r9, r1
 8012980:	4630      	mov	r0, r6
 8012982:	4639      	mov	r1, r7
 8012984:	f7ed fca0 	bl	80002c8 <__aeabi_dsub>
 8012988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801298c:	f7ed fc9e 	bl	80002cc <__adddf3>
 8012990:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012994:	e9ca 0100 	strd	r0, r1, [sl]
 8012998:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801299c:	e756      	b.n	801284c <__kernel_rem_pio2+0x4fc>
 801299e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80129a2:	f7ed fc93 	bl	80002cc <__adddf3>
 80129a6:	3d01      	subs	r5, #1
 80129a8:	e756      	b.n	8012858 <__kernel_rem_pio2+0x508>
 80129aa:	9b01      	ldr	r3, [sp, #4]
 80129ac:	9a01      	ldr	r2, [sp, #4]
 80129ae:	601f      	str	r7, [r3, #0]
 80129b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80129b4:	605c      	str	r4, [r3, #4]
 80129b6:	609d      	str	r5, [r3, #8]
 80129b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80129bc:	60d3      	str	r3, [r2, #12]
 80129be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80129c2:	6110      	str	r0, [r2, #16]
 80129c4:	6153      	str	r3, [r2, #20]
 80129c6:	e78e      	b.n	80128e6 <__kernel_rem_pio2+0x596>
 80129c8:	41700000 	.word	0x41700000
 80129cc:	3e700000 	.word	0x3e700000

080129d0 <__kernel_sin>:
 80129d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129d4:	ec55 4b10 	vmov	r4, r5, d0
 80129d8:	b085      	sub	sp, #20
 80129da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80129de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80129e2:	ed8d 1b00 	vstr	d1, [sp]
 80129e6:	9002      	str	r0, [sp, #8]
 80129e8:	da06      	bge.n	80129f8 <__kernel_sin+0x28>
 80129ea:	ee10 0a10 	vmov	r0, s0
 80129ee:	4629      	mov	r1, r5
 80129f0:	f7ee f8d2 	bl	8000b98 <__aeabi_d2iz>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d051      	beq.n	8012a9c <__kernel_sin+0xcc>
 80129f8:	4622      	mov	r2, r4
 80129fa:	462b      	mov	r3, r5
 80129fc:	4620      	mov	r0, r4
 80129fe:	4629      	mov	r1, r5
 8012a00:	f7ed fe1a 	bl	8000638 <__aeabi_dmul>
 8012a04:	4682      	mov	sl, r0
 8012a06:	468b      	mov	fp, r1
 8012a08:	4602      	mov	r2, r0
 8012a0a:	460b      	mov	r3, r1
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4629      	mov	r1, r5
 8012a10:	f7ed fe12 	bl	8000638 <__aeabi_dmul>
 8012a14:	a341      	add	r3, pc, #260	; (adr r3, 8012b1c <__kernel_sin+0x14c>)
 8012a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a1a:	4680      	mov	r8, r0
 8012a1c:	4689      	mov	r9, r1
 8012a1e:	4650      	mov	r0, sl
 8012a20:	4659      	mov	r1, fp
 8012a22:	f7ed fe09 	bl	8000638 <__aeabi_dmul>
 8012a26:	a33f      	add	r3, pc, #252	; (adr r3, 8012b24 <__kernel_sin+0x154>)
 8012a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2c:	f7ed fc4c 	bl	80002c8 <__aeabi_dsub>
 8012a30:	4652      	mov	r2, sl
 8012a32:	465b      	mov	r3, fp
 8012a34:	f7ed fe00 	bl	8000638 <__aeabi_dmul>
 8012a38:	a33c      	add	r3, pc, #240	; (adr r3, 8012b2c <__kernel_sin+0x15c>)
 8012a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a3e:	f7ed fc45 	bl	80002cc <__adddf3>
 8012a42:	4652      	mov	r2, sl
 8012a44:	465b      	mov	r3, fp
 8012a46:	f7ed fdf7 	bl	8000638 <__aeabi_dmul>
 8012a4a:	a33a      	add	r3, pc, #232	; (adr r3, 8012b34 <__kernel_sin+0x164>)
 8012a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a50:	f7ed fc3a 	bl	80002c8 <__aeabi_dsub>
 8012a54:	4652      	mov	r2, sl
 8012a56:	465b      	mov	r3, fp
 8012a58:	f7ed fdee 	bl	8000638 <__aeabi_dmul>
 8012a5c:	a337      	add	r3, pc, #220	; (adr r3, 8012b3c <__kernel_sin+0x16c>)
 8012a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a62:	f7ed fc33 	bl	80002cc <__adddf3>
 8012a66:	9b02      	ldr	r3, [sp, #8]
 8012a68:	4606      	mov	r6, r0
 8012a6a:	460f      	mov	r7, r1
 8012a6c:	b9db      	cbnz	r3, 8012aa6 <__kernel_sin+0xd6>
 8012a6e:	4602      	mov	r2, r0
 8012a70:	460b      	mov	r3, r1
 8012a72:	4650      	mov	r0, sl
 8012a74:	4659      	mov	r1, fp
 8012a76:	f7ed fddf 	bl	8000638 <__aeabi_dmul>
 8012a7a:	a325      	add	r3, pc, #148	; (adr r3, 8012b10 <__kernel_sin+0x140>)
 8012a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a80:	f7ed fc22 	bl	80002c8 <__aeabi_dsub>
 8012a84:	4642      	mov	r2, r8
 8012a86:	464b      	mov	r3, r9
 8012a88:	f7ed fdd6 	bl	8000638 <__aeabi_dmul>
 8012a8c:	4602      	mov	r2, r0
 8012a8e:	460b      	mov	r3, r1
 8012a90:	4620      	mov	r0, r4
 8012a92:	4629      	mov	r1, r5
 8012a94:	f7ed fc1a 	bl	80002cc <__adddf3>
 8012a98:	4604      	mov	r4, r0
 8012a9a:	460d      	mov	r5, r1
 8012a9c:	ec45 4b10 	vmov	d0, r4, r5
 8012aa0:	b005      	add	sp, #20
 8012aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	4b1b      	ldr	r3, [pc, #108]	; (8012b18 <__kernel_sin+0x148>)
 8012aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012aae:	f7ed fdc3 	bl	8000638 <__aeabi_dmul>
 8012ab2:	4632      	mov	r2, r6
 8012ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012ab8:	463b      	mov	r3, r7
 8012aba:	4640      	mov	r0, r8
 8012abc:	4649      	mov	r1, r9
 8012abe:	f7ed fdbb 	bl	8000638 <__aeabi_dmul>
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	460b      	mov	r3, r1
 8012ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012aca:	f7ed fbfd 	bl	80002c8 <__aeabi_dsub>
 8012ace:	4652      	mov	r2, sl
 8012ad0:	465b      	mov	r3, fp
 8012ad2:	f7ed fdb1 	bl	8000638 <__aeabi_dmul>
 8012ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012ada:	f7ed fbf5 	bl	80002c8 <__aeabi_dsub>
 8012ade:	a30c      	add	r3, pc, #48	; (adr r3, 8012b10 <__kernel_sin+0x140>)
 8012ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ae4:	4606      	mov	r6, r0
 8012ae6:	460f      	mov	r7, r1
 8012ae8:	4640      	mov	r0, r8
 8012aea:	4649      	mov	r1, r9
 8012aec:	f7ed fda4 	bl	8000638 <__aeabi_dmul>
 8012af0:	4602      	mov	r2, r0
 8012af2:	460b      	mov	r3, r1
 8012af4:	4630      	mov	r0, r6
 8012af6:	4639      	mov	r1, r7
 8012af8:	f7ed fbe8 	bl	80002cc <__adddf3>
 8012afc:	4602      	mov	r2, r0
 8012afe:	460b      	mov	r3, r1
 8012b00:	4620      	mov	r0, r4
 8012b02:	4629      	mov	r1, r5
 8012b04:	f7ed fbe0 	bl	80002c8 <__aeabi_dsub>
 8012b08:	e7c6      	b.n	8012a98 <__kernel_sin+0xc8>
 8012b0a:	bf00      	nop
 8012b0c:	f3af 8000 	nop.w
 8012b10:	55555549 	.word	0x55555549
 8012b14:	3fc55555 	.word	0x3fc55555
 8012b18:	3fe00000 	.word	0x3fe00000
 8012b1c:	5acfd57c 	.word	0x5acfd57c
 8012b20:	3de5d93a 	.word	0x3de5d93a
 8012b24:	8a2b9ceb 	.word	0x8a2b9ceb
 8012b28:	3e5ae5e6 	.word	0x3e5ae5e6
 8012b2c:	57b1fe7d 	.word	0x57b1fe7d
 8012b30:	3ec71de3 	.word	0x3ec71de3
 8012b34:	19c161d5 	.word	0x19c161d5
 8012b38:	3f2a01a0 	.word	0x3f2a01a0
 8012b3c:	1110f8a6 	.word	0x1110f8a6
 8012b40:	3f811111 	.word	0x3f811111
 8012b44:	00000000 	.word	0x00000000

08012b48 <atan>:
 8012b48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b4c:	ec55 4b10 	vmov	r4, r5, d0
 8012b50:	4bc3      	ldr	r3, [pc, #780]	; (8012e60 <atan+0x318>)
 8012b52:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8012b56:	429e      	cmp	r6, r3
 8012b58:	46ab      	mov	fp, r5
 8012b5a:	dd18      	ble.n	8012b8e <atan+0x46>
 8012b5c:	4bc1      	ldr	r3, [pc, #772]	; (8012e64 <atan+0x31c>)
 8012b5e:	429e      	cmp	r6, r3
 8012b60:	dc01      	bgt.n	8012b66 <atan+0x1e>
 8012b62:	d109      	bne.n	8012b78 <atan+0x30>
 8012b64:	b144      	cbz	r4, 8012b78 <atan+0x30>
 8012b66:	4622      	mov	r2, r4
 8012b68:	462b      	mov	r3, r5
 8012b6a:	4620      	mov	r0, r4
 8012b6c:	4629      	mov	r1, r5
 8012b6e:	f7ed fbad 	bl	80002cc <__adddf3>
 8012b72:	4604      	mov	r4, r0
 8012b74:	460d      	mov	r5, r1
 8012b76:	e006      	b.n	8012b86 <atan+0x3e>
 8012b78:	f1bb 0f00 	cmp.w	fp, #0
 8012b7c:	f340 8131 	ble.w	8012de2 <atan+0x29a>
 8012b80:	a59b      	add	r5, pc, #620	; (adr r5, 8012df0 <atan+0x2a8>)
 8012b82:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012b86:	ec45 4b10 	vmov	d0, r4, r5
 8012b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b8e:	4bb6      	ldr	r3, [pc, #728]	; (8012e68 <atan+0x320>)
 8012b90:	429e      	cmp	r6, r3
 8012b92:	dc14      	bgt.n	8012bbe <atan+0x76>
 8012b94:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012b98:	429e      	cmp	r6, r3
 8012b9a:	dc0d      	bgt.n	8012bb8 <atan+0x70>
 8012b9c:	a396      	add	r3, pc, #600	; (adr r3, 8012df8 <atan+0x2b0>)
 8012b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba2:	ee10 0a10 	vmov	r0, s0
 8012ba6:	4629      	mov	r1, r5
 8012ba8:	f7ed fb90 	bl	80002cc <__adddf3>
 8012bac:	2200      	movs	r2, #0
 8012bae:	4baf      	ldr	r3, [pc, #700]	; (8012e6c <atan+0x324>)
 8012bb0:	f7ed ffd2 	bl	8000b58 <__aeabi_dcmpgt>
 8012bb4:	2800      	cmp	r0, #0
 8012bb6:	d1e6      	bne.n	8012b86 <atan+0x3e>
 8012bb8:	f04f 3aff 	mov.w	sl, #4294967295
 8012bbc:	e02b      	b.n	8012c16 <atan+0xce>
 8012bbe:	f000 f963 	bl	8012e88 <fabs>
 8012bc2:	4bab      	ldr	r3, [pc, #684]	; (8012e70 <atan+0x328>)
 8012bc4:	429e      	cmp	r6, r3
 8012bc6:	ec55 4b10 	vmov	r4, r5, d0
 8012bca:	f300 80bf 	bgt.w	8012d4c <atan+0x204>
 8012bce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012bd2:	429e      	cmp	r6, r3
 8012bd4:	f300 80a0 	bgt.w	8012d18 <atan+0x1d0>
 8012bd8:	ee10 2a10 	vmov	r2, s0
 8012bdc:	ee10 0a10 	vmov	r0, s0
 8012be0:	462b      	mov	r3, r5
 8012be2:	4629      	mov	r1, r5
 8012be4:	f7ed fb72 	bl	80002cc <__adddf3>
 8012be8:	2200      	movs	r2, #0
 8012bea:	4ba0      	ldr	r3, [pc, #640]	; (8012e6c <atan+0x324>)
 8012bec:	f7ed fb6c 	bl	80002c8 <__aeabi_dsub>
 8012bf0:	2200      	movs	r2, #0
 8012bf2:	4606      	mov	r6, r0
 8012bf4:	460f      	mov	r7, r1
 8012bf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012bfa:	4620      	mov	r0, r4
 8012bfc:	4629      	mov	r1, r5
 8012bfe:	f7ed fb65 	bl	80002cc <__adddf3>
 8012c02:	4602      	mov	r2, r0
 8012c04:	460b      	mov	r3, r1
 8012c06:	4630      	mov	r0, r6
 8012c08:	4639      	mov	r1, r7
 8012c0a:	f7ed fe3f 	bl	800088c <__aeabi_ddiv>
 8012c0e:	f04f 0a00 	mov.w	sl, #0
 8012c12:	4604      	mov	r4, r0
 8012c14:	460d      	mov	r5, r1
 8012c16:	4622      	mov	r2, r4
 8012c18:	462b      	mov	r3, r5
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	4629      	mov	r1, r5
 8012c1e:	f7ed fd0b 	bl	8000638 <__aeabi_dmul>
 8012c22:	4602      	mov	r2, r0
 8012c24:	460b      	mov	r3, r1
 8012c26:	4680      	mov	r8, r0
 8012c28:	4689      	mov	r9, r1
 8012c2a:	f7ed fd05 	bl	8000638 <__aeabi_dmul>
 8012c2e:	a374      	add	r3, pc, #464	; (adr r3, 8012e00 <atan+0x2b8>)
 8012c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c34:	4606      	mov	r6, r0
 8012c36:	460f      	mov	r7, r1
 8012c38:	f7ed fcfe 	bl	8000638 <__aeabi_dmul>
 8012c3c:	a372      	add	r3, pc, #456	; (adr r3, 8012e08 <atan+0x2c0>)
 8012c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c42:	f7ed fb43 	bl	80002cc <__adddf3>
 8012c46:	4632      	mov	r2, r6
 8012c48:	463b      	mov	r3, r7
 8012c4a:	f7ed fcf5 	bl	8000638 <__aeabi_dmul>
 8012c4e:	a370      	add	r3, pc, #448	; (adr r3, 8012e10 <atan+0x2c8>)
 8012c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c54:	f7ed fb3a 	bl	80002cc <__adddf3>
 8012c58:	4632      	mov	r2, r6
 8012c5a:	463b      	mov	r3, r7
 8012c5c:	f7ed fcec 	bl	8000638 <__aeabi_dmul>
 8012c60:	a36d      	add	r3, pc, #436	; (adr r3, 8012e18 <atan+0x2d0>)
 8012c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c66:	f7ed fb31 	bl	80002cc <__adddf3>
 8012c6a:	4632      	mov	r2, r6
 8012c6c:	463b      	mov	r3, r7
 8012c6e:	f7ed fce3 	bl	8000638 <__aeabi_dmul>
 8012c72:	a36b      	add	r3, pc, #428	; (adr r3, 8012e20 <atan+0x2d8>)
 8012c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c78:	f7ed fb28 	bl	80002cc <__adddf3>
 8012c7c:	4632      	mov	r2, r6
 8012c7e:	463b      	mov	r3, r7
 8012c80:	f7ed fcda 	bl	8000638 <__aeabi_dmul>
 8012c84:	a368      	add	r3, pc, #416	; (adr r3, 8012e28 <atan+0x2e0>)
 8012c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c8a:	f7ed fb1f 	bl	80002cc <__adddf3>
 8012c8e:	4642      	mov	r2, r8
 8012c90:	464b      	mov	r3, r9
 8012c92:	f7ed fcd1 	bl	8000638 <__aeabi_dmul>
 8012c96:	a366      	add	r3, pc, #408	; (adr r3, 8012e30 <atan+0x2e8>)
 8012c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c9c:	4680      	mov	r8, r0
 8012c9e:	4689      	mov	r9, r1
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	f7ed fcc8 	bl	8000638 <__aeabi_dmul>
 8012ca8:	a363      	add	r3, pc, #396	; (adr r3, 8012e38 <atan+0x2f0>)
 8012caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cae:	f7ed fb0b 	bl	80002c8 <__aeabi_dsub>
 8012cb2:	4632      	mov	r2, r6
 8012cb4:	463b      	mov	r3, r7
 8012cb6:	f7ed fcbf 	bl	8000638 <__aeabi_dmul>
 8012cba:	a361      	add	r3, pc, #388	; (adr r3, 8012e40 <atan+0x2f8>)
 8012cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc0:	f7ed fb02 	bl	80002c8 <__aeabi_dsub>
 8012cc4:	4632      	mov	r2, r6
 8012cc6:	463b      	mov	r3, r7
 8012cc8:	f7ed fcb6 	bl	8000638 <__aeabi_dmul>
 8012ccc:	a35e      	add	r3, pc, #376	; (adr r3, 8012e48 <atan+0x300>)
 8012cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd2:	f7ed faf9 	bl	80002c8 <__aeabi_dsub>
 8012cd6:	4632      	mov	r2, r6
 8012cd8:	463b      	mov	r3, r7
 8012cda:	f7ed fcad 	bl	8000638 <__aeabi_dmul>
 8012cde:	a35c      	add	r3, pc, #368	; (adr r3, 8012e50 <atan+0x308>)
 8012ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ce4:	f7ed faf0 	bl	80002c8 <__aeabi_dsub>
 8012ce8:	4632      	mov	r2, r6
 8012cea:	463b      	mov	r3, r7
 8012cec:	f7ed fca4 	bl	8000638 <__aeabi_dmul>
 8012cf0:	4602      	mov	r2, r0
 8012cf2:	460b      	mov	r3, r1
 8012cf4:	4640      	mov	r0, r8
 8012cf6:	4649      	mov	r1, r9
 8012cf8:	f7ed fae8 	bl	80002cc <__adddf3>
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	462b      	mov	r3, r5
 8012d00:	f7ed fc9a 	bl	8000638 <__aeabi_dmul>
 8012d04:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012d08:	4602      	mov	r2, r0
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	d14b      	bne.n	8012da6 <atan+0x25e>
 8012d0e:	4620      	mov	r0, r4
 8012d10:	4629      	mov	r1, r5
 8012d12:	f7ed fad9 	bl	80002c8 <__aeabi_dsub>
 8012d16:	e72c      	b.n	8012b72 <atan+0x2a>
 8012d18:	ee10 0a10 	vmov	r0, s0
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	4b53      	ldr	r3, [pc, #332]	; (8012e6c <atan+0x324>)
 8012d20:	4629      	mov	r1, r5
 8012d22:	f7ed fad1 	bl	80002c8 <__aeabi_dsub>
 8012d26:	2200      	movs	r2, #0
 8012d28:	4606      	mov	r6, r0
 8012d2a:	460f      	mov	r7, r1
 8012d2c:	4b4f      	ldr	r3, [pc, #316]	; (8012e6c <atan+0x324>)
 8012d2e:	4620      	mov	r0, r4
 8012d30:	4629      	mov	r1, r5
 8012d32:	f7ed facb 	bl	80002cc <__adddf3>
 8012d36:	4602      	mov	r2, r0
 8012d38:	460b      	mov	r3, r1
 8012d3a:	4630      	mov	r0, r6
 8012d3c:	4639      	mov	r1, r7
 8012d3e:	f7ed fda5 	bl	800088c <__aeabi_ddiv>
 8012d42:	f04f 0a01 	mov.w	sl, #1
 8012d46:	4604      	mov	r4, r0
 8012d48:	460d      	mov	r5, r1
 8012d4a:	e764      	b.n	8012c16 <atan+0xce>
 8012d4c:	4b49      	ldr	r3, [pc, #292]	; (8012e74 <atan+0x32c>)
 8012d4e:	429e      	cmp	r6, r3
 8012d50:	dc1d      	bgt.n	8012d8e <atan+0x246>
 8012d52:	ee10 0a10 	vmov	r0, s0
 8012d56:	2200      	movs	r2, #0
 8012d58:	4b47      	ldr	r3, [pc, #284]	; (8012e78 <atan+0x330>)
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	f7ed fab4 	bl	80002c8 <__aeabi_dsub>
 8012d60:	2200      	movs	r2, #0
 8012d62:	4606      	mov	r6, r0
 8012d64:	460f      	mov	r7, r1
 8012d66:	4b44      	ldr	r3, [pc, #272]	; (8012e78 <atan+0x330>)
 8012d68:	4620      	mov	r0, r4
 8012d6a:	4629      	mov	r1, r5
 8012d6c:	f7ed fc64 	bl	8000638 <__aeabi_dmul>
 8012d70:	2200      	movs	r2, #0
 8012d72:	4b3e      	ldr	r3, [pc, #248]	; (8012e6c <atan+0x324>)
 8012d74:	f7ed faaa 	bl	80002cc <__adddf3>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	4639      	mov	r1, r7
 8012d80:	f7ed fd84 	bl	800088c <__aeabi_ddiv>
 8012d84:	f04f 0a02 	mov.w	sl, #2
 8012d88:	4604      	mov	r4, r0
 8012d8a:	460d      	mov	r5, r1
 8012d8c:	e743      	b.n	8012c16 <atan+0xce>
 8012d8e:	462b      	mov	r3, r5
 8012d90:	ee10 2a10 	vmov	r2, s0
 8012d94:	2000      	movs	r0, #0
 8012d96:	4939      	ldr	r1, [pc, #228]	; (8012e7c <atan+0x334>)
 8012d98:	f7ed fd78 	bl	800088c <__aeabi_ddiv>
 8012d9c:	f04f 0a03 	mov.w	sl, #3
 8012da0:	4604      	mov	r4, r0
 8012da2:	460d      	mov	r5, r1
 8012da4:	e737      	b.n	8012c16 <atan+0xce>
 8012da6:	4b36      	ldr	r3, [pc, #216]	; (8012e80 <atan+0x338>)
 8012da8:	4e36      	ldr	r6, [pc, #216]	; (8012e84 <atan+0x33c>)
 8012daa:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 8012dae:	4456      	add	r6, sl
 8012db0:	449a      	add	sl, r3
 8012db2:	e9da 2300 	ldrd	r2, r3, [sl]
 8012db6:	f7ed fa87 	bl	80002c8 <__aeabi_dsub>
 8012dba:	4622      	mov	r2, r4
 8012dbc:	462b      	mov	r3, r5
 8012dbe:	f7ed fa83 	bl	80002c8 <__aeabi_dsub>
 8012dc2:	4602      	mov	r2, r0
 8012dc4:	460b      	mov	r3, r1
 8012dc6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012dca:	f7ed fa7d 	bl	80002c8 <__aeabi_dsub>
 8012dce:	f1bb 0f00 	cmp.w	fp, #0
 8012dd2:	4604      	mov	r4, r0
 8012dd4:	460d      	mov	r5, r1
 8012dd6:	f6bf aed6 	bge.w	8012b86 <atan+0x3e>
 8012dda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012dde:	461d      	mov	r5, r3
 8012de0:	e6d1      	b.n	8012b86 <atan+0x3e>
 8012de2:	a51d      	add	r5, pc, #116	; (adr r5, 8012e58 <atan+0x310>)
 8012de4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012de8:	e6cd      	b.n	8012b86 <atan+0x3e>
 8012dea:	bf00      	nop
 8012dec:	f3af 8000 	nop.w
 8012df0:	54442d18 	.word	0x54442d18
 8012df4:	3ff921fb 	.word	0x3ff921fb
 8012df8:	8800759c 	.word	0x8800759c
 8012dfc:	7e37e43c 	.word	0x7e37e43c
 8012e00:	e322da11 	.word	0xe322da11
 8012e04:	3f90ad3a 	.word	0x3f90ad3a
 8012e08:	24760deb 	.word	0x24760deb
 8012e0c:	3fa97b4b 	.word	0x3fa97b4b
 8012e10:	a0d03d51 	.word	0xa0d03d51
 8012e14:	3fb10d66 	.word	0x3fb10d66
 8012e18:	c54c206e 	.word	0xc54c206e
 8012e1c:	3fb745cd 	.word	0x3fb745cd
 8012e20:	920083ff 	.word	0x920083ff
 8012e24:	3fc24924 	.word	0x3fc24924
 8012e28:	5555550d 	.word	0x5555550d
 8012e2c:	3fd55555 	.word	0x3fd55555
 8012e30:	2c6a6c2f 	.word	0x2c6a6c2f
 8012e34:	bfa2b444 	.word	0xbfa2b444
 8012e38:	52defd9a 	.word	0x52defd9a
 8012e3c:	3fadde2d 	.word	0x3fadde2d
 8012e40:	af749a6d 	.word	0xaf749a6d
 8012e44:	3fb3b0f2 	.word	0x3fb3b0f2
 8012e48:	fe231671 	.word	0xfe231671
 8012e4c:	3fbc71c6 	.word	0x3fbc71c6
 8012e50:	9998ebc4 	.word	0x9998ebc4
 8012e54:	3fc99999 	.word	0x3fc99999
 8012e58:	54442d18 	.word	0x54442d18
 8012e5c:	bff921fb 	.word	0xbff921fb
 8012e60:	440fffff 	.word	0x440fffff
 8012e64:	7ff00000 	.word	0x7ff00000
 8012e68:	3fdbffff 	.word	0x3fdbffff
 8012e6c:	3ff00000 	.word	0x3ff00000
 8012e70:	3ff2ffff 	.word	0x3ff2ffff
 8012e74:	40037fff 	.word	0x40037fff
 8012e78:	3ff80000 	.word	0x3ff80000
 8012e7c:	bff00000 	.word	0xbff00000
 8012e80:	08013c20 	.word	0x08013c20
 8012e84:	08013c00 	.word	0x08013c00

08012e88 <fabs>:
 8012e88:	ec51 0b10 	vmov	r0, r1, d0
 8012e8c:	ee10 2a10 	vmov	r2, s0
 8012e90:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e94:	ec43 2b10 	vmov	d0, r2, r3
 8012e98:	4770      	bx	lr
 8012e9a:	0000      	movs	r0, r0
 8012e9c:	0000      	movs	r0, r0
	...

08012ea0 <floor>:
 8012ea0:	ec51 0b10 	vmov	r0, r1, d0
 8012ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ea8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012eac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012eb0:	2e13      	cmp	r6, #19
 8012eb2:	460c      	mov	r4, r1
 8012eb4:	ee10 5a10 	vmov	r5, s0
 8012eb8:	4680      	mov	r8, r0
 8012eba:	dc34      	bgt.n	8012f26 <floor+0x86>
 8012ebc:	2e00      	cmp	r6, #0
 8012ebe:	da16      	bge.n	8012eee <floor+0x4e>
 8012ec0:	a335      	add	r3, pc, #212	; (adr r3, 8012f98 <floor+0xf8>)
 8012ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ec6:	f7ed fa01 	bl	80002cc <__adddf3>
 8012eca:	2200      	movs	r2, #0
 8012ecc:	2300      	movs	r3, #0
 8012ece:	f7ed fe43 	bl	8000b58 <__aeabi_dcmpgt>
 8012ed2:	b148      	cbz	r0, 8012ee8 <floor+0x48>
 8012ed4:	2c00      	cmp	r4, #0
 8012ed6:	da59      	bge.n	8012f8c <floor+0xec>
 8012ed8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012edc:	4a30      	ldr	r2, [pc, #192]	; (8012fa0 <floor+0x100>)
 8012ede:	432b      	orrs	r3, r5
 8012ee0:	2500      	movs	r5, #0
 8012ee2:	42ab      	cmp	r3, r5
 8012ee4:	bf18      	it	ne
 8012ee6:	4614      	movne	r4, r2
 8012ee8:	4621      	mov	r1, r4
 8012eea:	4628      	mov	r0, r5
 8012eec:	e025      	b.n	8012f3a <floor+0x9a>
 8012eee:	4f2d      	ldr	r7, [pc, #180]	; (8012fa4 <floor+0x104>)
 8012ef0:	4137      	asrs	r7, r6
 8012ef2:	ea01 0307 	and.w	r3, r1, r7
 8012ef6:	4303      	orrs	r3, r0
 8012ef8:	d01f      	beq.n	8012f3a <floor+0x9a>
 8012efa:	a327      	add	r3, pc, #156	; (adr r3, 8012f98 <floor+0xf8>)
 8012efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f00:	f7ed f9e4 	bl	80002cc <__adddf3>
 8012f04:	2200      	movs	r2, #0
 8012f06:	2300      	movs	r3, #0
 8012f08:	f7ed fe26 	bl	8000b58 <__aeabi_dcmpgt>
 8012f0c:	2800      	cmp	r0, #0
 8012f0e:	d0eb      	beq.n	8012ee8 <floor+0x48>
 8012f10:	2c00      	cmp	r4, #0
 8012f12:	bfbe      	ittt	lt
 8012f14:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012f18:	fa43 f606 	asrlt.w	r6, r3, r6
 8012f1c:	19a4      	addlt	r4, r4, r6
 8012f1e:	ea24 0407 	bic.w	r4, r4, r7
 8012f22:	2500      	movs	r5, #0
 8012f24:	e7e0      	b.n	8012ee8 <floor+0x48>
 8012f26:	2e33      	cmp	r6, #51	; 0x33
 8012f28:	dd0b      	ble.n	8012f42 <floor+0xa2>
 8012f2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012f2e:	d104      	bne.n	8012f3a <floor+0x9a>
 8012f30:	ee10 2a10 	vmov	r2, s0
 8012f34:	460b      	mov	r3, r1
 8012f36:	f7ed f9c9 	bl	80002cc <__adddf3>
 8012f3a:	ec41 0b10 	vmov	d0, r0, r1
 8012f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f42:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012f46:	f04f 33ff 	mov.w	r3, #4294967295
 8012f4a:	fa23 f707 	lsr.w	r7, r3, r7
 8012f4e:	4207      	tst	r7, r0
 8012f50:	d0f3      	beq.n	8012f3a <floor+0x9a>
 8012f52:	a311      	add	r3, pc, #68	; (adr r3, 8012f98 <floor+0xf8>)
 8012f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f58:	f7ed f9b8 	bl	80002cc <__adddf3>
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	2300      	movs	r3, #0
 8012f60:	f7ed fdfa 	bl	8000b58 <__aeabi_dcmpgt>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d0bf      	beq.n	8012ee8 <floor+0x48>
 8012f68:	2c00      	cmp	r4, #0
 8012f6a:	da02      	bge.n	8012f72 <floor+0xd2>
 8012f6c:	2e14      	cmp	r6, #20
 8012f6e:	d103      	bne.n	8012f78 <floor+0xd8>
 8012f70:	3401      	adds	r4, #1
 8012f72:	ea25 0507 	bic.w	r5, r5, r7
 8012f76:	e7b7      	b.n	8012ee8 <floor+0x48>
 8012f78:	2301      	movs	r3, #1
 8012f7a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012f7e:	fa03 f606 	lsl.w	r6, r3, r6
 8012f82:	4435      	add	r5, r6
 8012f84:	4545      	cmp	r5, r8
 8012f86:	bf38      	it	cc
 8012f88:	18e4      	addcc	r4, r4, r3
 8012f8a:	e7f2      	b.n	8012f72 <floor+0xd2>
 8012f8c:	2500      	movs	r5, #0
 8012f8e:	462c      	mov	r4, r5
 8012f90:	e7aa      	b.n	8012ee8 <floor+0x48>
 8012f92:	bf00      	nop
 8012f94:	f3af 8000 	nop.w
 8012f98:	8800759c 	.word	0x8800759c
 8012f9c:	7e37e43c 	.word	0x7e37e43c
 8012fa0:	bff00000 	.word	0xbff00000
 8012fa4:	000fffff 	.word	0x000fffff

08012fa8 <matherr>:
 8012fa8:	2000      	movs	r0, #0
 8012faa:	4770      	bx	lr
 8012fac:	0000      	movs	r0, r0
	...

08012fb0 <nan>:
 8012fb0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012fb8 <nan+0x8>
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	00000000 	.word	0x00000000
 8012fbc:	7ff80000 	.word	0x7ff80000

08012fc0 <scalbn>:
 8012fc0:	b570      	push	{r4, r5, r6, lr}
 8012fc2:	ec55 4b10 	vmov	r4, r5, d0
 8012fc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012fca:	4606      	mov	r6, r0
 8012fcc:	462b      	mov	r3, r5
 8012fce:	b9aa      	cbnz	r2, 8012ffc <scalbn+0x3c>
 8012fd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012fd4:	4323      	orrs	r3, r4
 8012fd6:	d03b      	beq.n	8013050 <scalbn+0x90>
 8012fd8:	4b31      	ldr	r3, [pc, #196]	; (80130a0 <scalbn+0xe0>)
 8012fda:	4629      	mov	r1, r5
 8012fdc:	2200      	movs	r2, #0
 8012fde:	ee10 0a10 	vmov	r0, s0
 8012fe2:	f7ed fb29 	bl	8000638 <__aeabi_dmul>
 8012fe6:	4b2f      	ldr	r3, [pc, #188]	; (80130a4 <scalbn+0xe4>)
 8012fe8:	429e      	cmp	r6, r3
 8012fea:	4604      	mov	r4, r0
 8012fec:	460d      	mov	r5, r1
 8012fee:	da12      	bge.n	8013016 <scalbn+0x56>
 8012ff0:	a327      	add	r3, pc, #156	; (adr r3, 8013090 <scalbn+0xd0>)
 8012ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ff6:	f7ed fb1f 	bl	8000638 <__aeabi_dmul>
 8012ffa:	e009      	b.n	8013010 <scalbn+0x50>
 8012ffc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013000:	428a      	cmp	r2, r1
 8013002:	d10c      	bne.n	801301e <scalbn+0x5e>
 8013004:	ee10 2a10 	vmov	r2, s0
 8013008:	4620      	mov	r0, r4
 801300a:	4629      	mov	r1, r5
 801300c:	f7ed f95e 	bl	80002cc <__adddf3>
 8013010:	4604      	mov	r4, r0
 8013012:	460d      	mov	r5, r1
 8013014:	e01c      	b.n	8013050 <scalbn+0x90>
 8013016:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801301a:	460b      	mov	r3, r1
 801301c:	3a36      	subs	r2, #54	; 0x36
 801301e:	4432      	add	r2, r6
 8013020:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013024:	428a      	cmp	r2, r1
 8013026:	dd0b      	ble.n	8013040 <scalbn+0x80>
 8013028:	ec45 4b11 	vmov	d1, r4, r5
 801302c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013098 <scalbn+0xd8>
 8013030:	f7fc fb24 	bl	800f67c <copysign>
 8013034:	a318      	add	r3, pc, #96	; (adr r3, 8013098 <scalbn+0xd8>)
 8013036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801303a:	ec51 0b10 	vmov	r0, r1, d0
 801303e:	e7da      	b.n	8012ff6 <scalbn+0x36>
 8013040:	2a00      	cmp	r2, #0
 8013042:	dd08      	ble.n	8013056 <scalbn+0x96>
 8013044:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013048:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801304c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013050:	ec45 4b10 	vmov	d0, r4, r5
 8013054:	bd70      	pop	{r4, r5, r6, pc}
 8013056:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801305a:	da0d      	bge.n	8013078 <scalbn+0xb8>
 801305c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013060:	429e      	cmp	r6, r3
 8013062:	ec45 4b11 	vmov	d1, r4, r5
 8013066:	dce1      	bgt.n	801302c <scalbn+0x6c>
 8013068:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013090 <scalbn+0xd0>
 801306c:	f7fc fb06 	bl	800f67c <copysign>
 8013070:	a307      	add	r3, pc, #28	; (adr r3, 8013090 <scalbn+0xd0>)
 8013072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013076:	e7e0      	b.n	801303a <scalbn+0x7a>
 8013078:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801307c:	3236      	adds	r2, #54	; 0x36
 801307e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013082:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013086:	4620      	mov	r0, r4
 8013088:	4629      	mov	r1, r5
 801308a:	2200      	movs	r2, #0
 801308c:	4b06      	ldr	r3, [pc, #24]	; (80130a8 <scalbn+0xe8>)
 801308e:	e7b2      	b.n	8012ff6 <scalbn+0x36>
 8013090:	c2f8f359 	.word	0xc2f8f359
 8013094:	01a56e1f 	.word	0x01a56e1f
 8013098:	8800759c 	.word	0x8800759c
 801309c:	7e37e43c 	.word	0x7e37e43c
 80130a0:	43500000 	.word	0x43500000
 80130a4:	ffff3cb0 	.word	0xffff3cb0
 80130a8:	3c900000 	.word	0x3c900000

080130ac <_init>:
 80130ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ae:	bf00      	nop
 80130b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130b2:	bc08      	pop	{r3}
 80130b4:	469e      	mov	lr, r3
 80130b6:	4770      	bx	lr

080130b8 <_fini>:
 80130b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130ba:	bf00      	nop
 80130bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130be:	bc08      	pop	{r3}
 80130c0:	469e      	mov	lr, r3
 80130c2:	4770      	bx	lr
