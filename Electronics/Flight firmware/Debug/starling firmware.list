
starling firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019620  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d30  080197f0  080197f0  000297f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a520  0801a520  00030608  2**0
                  CONTENTS
  4 .ARM          00000008  0801a520  0801a520  0002a520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a528  0801a528  00030608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a528  0801a528  0002a528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a52c  0801a52c  0002a52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000608  20000000  0801a530  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000649c  20000608  0801ab38  00030608  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006aa4  0801ab38  00036aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030608  2**0
                  CONTENTS, READONLY
 12 .debug_info   000334ba  00000000  00000000  00030638  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006bcb  00000000  00000000  00063af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024c8  00000000  00000000  0006a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002238  00000000  00000000  0006cb88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b326  00000000  00000000  0006edc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022c77  00000000  00000000  0009a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7878  00000000  00000000  000bcd5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a45d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000af38  00000000  00000000  001a4650  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000608 	.word	0x20000608
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080197d8 	.word	0x080197d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000060c 	.word	0x2000060c
 800020c:	080197d8 	.word	0x080197d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <LSM_ReadRegister>:


#include "LSM6DSO32.h"


uint8_t LSM_ReadRegister(lsm6dso *imu, uint8_t addr, uint8_t *data) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	72fb      	strb	r3, [r7, #11]
    uint8_t txBuf[2] = { addr | 0x80, 0x00 }; // dummy byte in the middle
 8000fd6:	7afb      	ldrb	r3, [r7, #11]
 8000fd8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	753b      	strb	r3, [r7, #20]
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	757b      	strb	r3, [r7, #21]
    uint8_t rxBuf[2];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	6858      	ldr	r0, [r3, #4]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	891b      	ldrh	r3, [r3, #8]
 8000fec:	2200      	movs	r2, #0
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f007 fc98 	bl	8008924 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	f107 0210 	add.w	r2, r7, #16
 8000ffc:	f107 0114 	add.w	r1, r7, #20
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2302      	movs	r3, #2
 8001008:	f00b f9a1 	bl	800c34e <HAL_SPI_TransmitReceive>
 800100c:	4603      	mov	r3, r0
    HAL_MAX_DELAY) == HAL_OK);
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf0c      	ite	eq
 8001012:	2301      	moveq	r3, #1
 8001014:	2300      	movne	r3, #0
 8001016:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_TransmitReceive(imu->spiHandle, txBuf, rxBuf, 2,
 8001018:	75fb      	strb	r3, [r7, #23]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY)
 800101a:	bf00      	nop
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f00b fc61 	bl	800c8e8 <HAL_SPI_GetState>
 8001026:	4603      	mov	r3, r0
 8001028:	2b01      	cmp	r3, #1
 800102a:	d1f7      	bne.n	800101c <LSM_ReadRegister+0x54>
        ;

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	6858      	ldr	r0, [r3, #4]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	891b      	ldrh	r3, [r3, #8]
 8001034:	2201      	movs	r2, #1
 8001036:	4619      	mov	r1, r3
 8001038:	f007 fc74 	bl	8008924 <HAL_GPIO_WritePin>

    if (status == 1) {
 800103c:	7dfb      	ldrb	r3, [r7, #23]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <LSM_ReadRegister+0x80>
        *data = rxBuf[1];
 8001042:	7c7a      	ldrb	r2, [r7, #17]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8001048:	7dfb      	ldrb	r3, [r7, #23]

}
 800104a:	4618      	mov	r0, r3
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <LSM_WriteRegister>:

uint8_t LSM_WriteRegister(lsm6dso *imu, uint8_t regAddr, uint8_t data) {
 8001052:	b580      	push	{r7, lr}
 8001054:	b084      	sub	sp, #16
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	460b      	mov	r3, r1
 800105c:	70fb      	strb	r3, [r7, #3]
 800105e:	4613      	mov	r3, r2
 8001060:	70bb      	strb	r3, [r7, #2]
    uint8_t txBuf[2] = { regAddr, data };
 8001062:	78fb      	ldrb	r3, [r7, #3]
 8001064:	733b      	strb	r3, [r7, #12]
 8001066:	78bb      	ldrb	r3, [r7, #2]
 8001068:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	891b      	ldrh	r3, [r3, #8]
 8001072:	2200      	movs	r2, #0
 8001074:	4619      	mov	r1, r3
 8001076:	f007 fc55 	bl	8008924 <HAL_GPIO_WritePin>

    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6818      	ldr	r0, [r3, #0]
 800107e:	f107 010c 	add.w	r1, r7, #12
 8001082:	f04f 33ff 	mov.w	r3, #4294967295
 8001086:	2202      	movs	r2, #2
 8001088:	f00a ff24 	bl	800bed4 <HAL_SPI_Transmit>
 800108c:	4603      	mov	r3, r0
            == HAL_OK);
 800108e:	2b00      	cmp	r3, #0
 8001090:	bf0c      	ite	eq
 8001092:	2301      	moveq	r3, #1
 8001094:	2300      	movne	r3, #0
 8001096:	b2db      	uxtb	r3, r3
    uint8_t status = (HAL_SPI_Transmit(imu->spiHandle, txBuf, 2, HAL_MAX_DELAY)
 8001098:	73fb      	strb	r3, [r7, #15]

    while (HAL_SPI_GetState(imu->spiHandle) != HAL_SPI_STATE_READY);
 800109a:	bf00      	nop
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f00b fc21 	bl	800c8e8 <HAL_SPI_GetState>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d1f7      	bne.n	800109c <LSM_WriteRegister+0x4a>

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6858      	ldr	r0, [r3, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	891b      	ldrh	r3, [r3, #8]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f007 fc34 	bl	8008924 <HAL_GPIO_WritePin>

    return status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <LSM_init>:

uint8_t LSM_init(lsm6dso *imu, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	807b      	strh	r3, [r7, #2]
    imu->spiHandle = spiHandle;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	601a      	str	r2, [r3, #0]
    imu->csPinBank = csPinBank;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
    imu->csPin = csPin;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	887a      	ldrh	r2, [r7, #2]
 80010e6:	811a      	strh	r2, [r3, #8]

    // check
    uint8_t data;

    LSM_ReadRegister(imu, LSM_WHO_AM_I, &data);
 80010e8:	f107 031f 	add.w	r3, r7, #31
 80010ec:	461a      	mov	r2, r3
 80010ee:	210f      	movs	r1, #15
 80010f0:	68f8      	ldr	r0, [r7, #12]
 80010f2:	f7ff ff69 	bl	8000fc8 <LSM_ReadRegister>

    if (data != 0x6C) {
 80010f6:	7ffb      	ldrb	r3, [r7, #31]
 80010f8:	2b6c      	cmp	r3, #108	; 0x6c
 80010fa:	d001      	beq.n	8001100 <LSM_init+0x38>
        return 1;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e055      	b.n	80011ac <LSM_init+0xe4>
    }

    // software reset
    LSM_WriteRegister(imu, LSM_CTRL3_C, 0x01);
 8001100:	2201      	movs	r2, #1
 8001102:	2112      	movs	r1, #18
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f7ff ffa4 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(40);
 800110a:	2028      	movs	r0, #40	; 0x28
 800110c:	f006 fa24 	bl	8007558 <HAL_Delay>

    // LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10101100); // 1010(6.66kHz accelerometer) 11(+/- 16g) 00
    LSM_WriteRegister(imu, LSM_CTRL1_XL, 0b10100100); // 1010(6.66kHz accelerometer) 01(+/- 32g) 00
 8001110:	22a4      	movs	r2, #164	; 0xa4
 8001112:	2110      	movs	r1, #16
 8001114:	68f8      	ldr	r0, [r7, #12]
 8001116:	f7ff ff9c 	bl	8001052 <LSM_WriteRegister>

    HAL_Delay(1);
 800111a:	2001      	movs	r0, #1
 800111c:	f006 fa1c 	bl	8007558 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL2_G, 0b10101100); // 1010 (6.66kHz gyro) 11(2000dps FS) 00
 8001120:	22ac      	movs	r2, #172	; 0xac
 8001122:	2111      	movs	r1, #17
 8001124:	68f8      	ldr	r0, [r7, #12]
 8001126:	f7ff ff94 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 800112a:	2001      	movs	r0, #1
 800112c:	f006 fa14 	bl	8007558 <HAL_Delay>

    // 0.070 dps/LSB if +/- 2000 dps
    // https://www.st.com/resource/en/datasheet/lsm6dso32.pdf
    imu->gyroConvDPS = 0.070;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4a20      	ldr	r2, [pc, #128]	; (80011b4 <LSM_init+0xec>)
 8001134:	671a      	str	r2, [r3, #112]	; 0x70

    // 0.976 mg/LSB if +/- 32 G
    imu->accConvG =  0.000976;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4a1f      	ldr	r2, [pc, #124]	; (80011b8 <LSM_init+0xf0>)
 800113a:	675a      	str	r2, [r3, #116]	; 0x74



    LSM_WriteRegister(imu, LSM_CTRL4_C, 0b00001010); // 00001(drdy_mask until filter inits) 0 1(gyro LPF enable) 0
 800113c:	220a      	movs	r2, #10
 800113e:	2113      	movs	r1, #19
 8001140:	68f8      	ldr	r0, [r7, #12]
 8001142:	f7ff ff86 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001146:	2001      	movs	r0, #1
 8001148:	f006 fa06 	bl	8007558 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL6_C, 0b00000000); // 00000 <000>(gyroscope LPF1 bandwidth) 010 = 171 Hz
 800114c:	2200      	movs	r2, #0
 800114e:	2115      	movs	r1, #21
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ff7e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001156:	2001      	movs	r0, #1
 8001158:	f006 f9fe 	bl	8007558 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_CTRL7_G, 0b00000000); // <0>(high perf mode) <1>(gyro HPF) <00>(16mHz) 0000
 800115c:	2200      	movs	r2, #0
 800115e:	2116      	movs	r1, #22
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ff76 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001166:	2001      	movs	r0, #1
 8001168:	f006 f9f6 	bl	8007558 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_INT1_CTRL, 0b00000010); // gyro data ready interrupt
 800116c:	2202      	movs	r2, #2
 800116e:	210d      	movs	r1, #13
 8001170:	68f8      	ldr	r0, [r7, #12]
 8001172:	f7ff ff6e 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001176:	2001      	movs	r0, #1
 8001178:	f006 f9ee 	bl	8007558 <HAL_Delay>

    LSM_WriteRegister(imu, LSM_COUNTER_BDR_REG1, 0b10000000); // 1 (pulsed data ready) 0000000
 800117c:	2280      	movs	r2, #128	; 0x80
 800117e:	210b      	movs	r1, #11
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f7ff ff66 	bl	8001052 <LSM_WriteRegister>
    HAL_Delay(1);
 8001186:	2001      	movs	r0, #1
 8001188:	f006 f9e6 	bl	8007558 <HAL_Delay>



    HAL_Delay(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f006 f9e3 	bl	8007558 <HAL_Delay>

    imu->gyroDPSOffset[0] = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	645a      	str	r2, [r3, #68]	; 0x44
    imu->gyroDPSOffset[1] = 0;
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
    imu->gyroDPSOffset[2] = 0;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	64da      	str	r2, [r3, #76]	; 0x4c

    return 0;
 80011aa:	2300      	movs	r3, #0
    imu->gyroDPSOffset[1] = 0; //calcOffset[0] / calSamples;
    imu->gyroDPSOffset[2] = 0; //0calcOffset[0] / calSamples;


    return 0;
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	3d8f5c29 	.word	0x3d8f5c29
 80011b8:	3a7fda40 	.word	0x3a7fda40
 80011bc:	00000000 	.word	0x00000000

080011c0 <LSM_Convert>:
    }

    return status;
}

uint8_t LSM_Convert(lsm6dso *imu) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    imu->accGs[0] = imu->rawAcc[0] * imu->accConvG;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80011dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    imu->accGs[1] = imu->rawAcc[1] * imu->accConvG;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80011fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    imu->accGs[2] = imu->rawAcc[2] * imu->accConvG;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60

    imu->accMPS[0] = imu->accGs[0] * standardGravity;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff f9ae 	bl	8000588 <__aeabi_f2d>
 800122c:	a367      	add	r3, pc, #412	; (adr r3, 80013cc <LSM_Convert+0x20c>)
 800122e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001232:	f7ff fa01 	bl	8000638 <__aeabi_dmul>
 8001236:	4603      	mov	r3, r0
 8001238:	460c      	mov	r4, r1
 800123a:	4618      	mov	r0, r3
 800123c:	4621      	mov	r1, r4
 800123e:	f7ff fcf3 	bl	8000c28 <__aeabi_d2f>
 8001242:	4602      	mov	r2, r0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	665a      	str	r2, [r3, #100]	; 0x64
    imu->accMPS[1] = imu->accGs[1] * standardGravity;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f99b 	bl	8000588 <__aeabi_f2d>
 8001252:	a35e      	add	r3, pc, #376	; (adr r3, 80013cc <LSM_Convert+0x20c>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff f9ee 	bl	8000638 <__aeabi_dmul>
 800125c:	4603      	mov	r3, r0
 800125e:	460c      	mov	r4, r1
 8001260:	4618      	mov	r0, r3
 8001262:	4621      	mov	r1, r4
 8001264:	f7ff fce0 	bl	8000c28 <__aeabi_d2f>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	669a      	str	r2, [r3, #104]	; 0x68
    imu->accMPS[2] = imu->accGs[2] * standardGravity;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f988 	bl	8000588 <__aeabi_f2d>
 8001278:	a354      	add	r3, pc, #336	; (adr r3, 80013cc <LSM_Convert+0x20c>)
 800127a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127e:	f7ff f9db 	bl	8000638 <__aeabi_dmul>
 8001282:	4603      	mov	r3, r0
 8001284:	460c      	mov	r4, r1
 8001286:	4618      	mov	r0, r3
 8001288:	4621      	mov	r1, r4
 800128a:	f7ff fccd 	bl	8000c28 <__aeabi_d2f>
 800128e:	4602      	mov	r2, r0
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	66da      	str	r2, [r3, #108]	; 0x6c

    imu->gyroDPS[0] = imu->rawGyro[0] * imu->gyroConvDPS - imu->gyroDPSOffset[0];
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800129a:	ee07 3a90 	vmov	s15, r3
 800129e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80012a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    imu->gyroDPS[1] = imu->rawGyro[1] * imu->gyroConvDPS - imu->gyroDPSOffset[1];
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80012d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80012da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    imu->gyroDPS[2] = imu->rawGyro[2] * imu->gyroConvDPS - imu->gyroDPSOffset[2];
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80012ea:	ee07 3a90 	vmov	s15, r3
 80012ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80012f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

    imu->gyroRPS[0] = imu->gyroDPS[0] * PI / 180;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff f939 	bl	8000588 <__aeabi_f2d>
 8001316:	a32a      	add	r3, pc, #168	; (adr r3, 80013c0 <LSM_Convert+0x200>)
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f7ff f98c 	bl	8000638 <__aeabi_dmul>
 8001320:	4603      	mov	r3, r0
 8001322:	460c      	mov	r4, r1
 8001324:	4618      	mov	r0, r3
 8001326:	4621      	mov	r1, r4
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <LSM_Convert+0x208>)
 800132e:	f7ff faad 	bl	800088c <__aeabi_ddiv>
 8001332:	4603      	mov	r3, r0
 8001334:	460c      	mov	r4, r1
 8001336:	4618      	mov	r0, r3
 8001338:	4621      	mov	r1, r4
 800133a:	f7ff fc75 	bl	8000c28 <__aeabi_d2f>
 800133e:	4602      	mov	r2, r0
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	639a      	str	r2, [r3, #56]	; 0x38
    imu->gyroRPS[1] = imu->gyroDPS[1] * PI / 180;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f91d 	bl	8000588 <__aeabi_f2d>
 800134e:	a31c      	add	r3, pc, #112	; (adr r3, 80013c0 <LSM_Convert+0x200>)
 8001350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001354:	f7ff f970 	bl	8000638 <__aeabi_dmul>
 8001358:	4603      	mov	r3, r0
 800135a:	460c      	mov	r4, r1
 800135c:	4618      	mov	r0, r3
 800135e:	4621      	mov	r1, r4
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <LSM_Convert+0x208>)
 8001366:	f7ff fa91 	bl	800088c <__aeabi_ddiv>
 800136a:	4603      	mov	r3, r0
 800136c:	460c      	mov	r4, r1
 800136e:	4618      	mov	r0, r3
 8001370:	4621      	mov	r1, r4
 8001372:	f7ff fc59 	bl	8000c28 <__aeabi_d2f>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
    imu->gyroRPS[2] = imu->gyroDPS[2] * PI / 180;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f901 	bl	8000588 <__aeabi_f2d>
 8001386:	a30e      	add	r3, pc, #56	; (adr r3, 80013c0 <LSM_Convert+0x200>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7ff f954 	bl	8000638 <__aeabi_dmul>
 8001390:	4603      	mov	r3, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4618      	mov	r0, r3
 8001396:	4621      	mov	r1, r4
 8001398:	f04f 0200 	mov.w	r2, #0
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <LSM_Convert+0x208>)
 800139e:	f7ff fa75 	bl	800088c <__aeabi_ddiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	460c      	mov	r4, r1
 80013a6:	4618      	mov	r0, r3
 80013a8:	4621      	mov	r1, r4
 80013aa:	f7ff fc3d 	bl	8000c28 <__aeabi_d2f>
 80013ae:	4602      	mov	r2, r0
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80013b4:	bf00      	nop
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd90      	pop	{r4, r7, pc}
 80013be:	bf00      	nop
 80013c0:	54442eea 	.word	0x54442eea
 80013c4:	400921fb 	.word	0x400921fb
 80013c8:	40668000 	.word	0x40668000
 80013cc:	3a92a305 	.word	0x3a92a305
 80013d0:	40239d01 	.word	0x40239d01

080013d4 <LSM_ReadDMA>:

uint8_t LSM_ReadDMA(lsm6dso *imu) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08a      	sub	sp, #40	; 0x28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
    uint8_t txBuf[13] = { LSM_OUTX_L_G | 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	731a      	strb	r2, [r3, #12]
 80013ea:	23a2      	movs	r3, #162	; 0xa2
 80013ec:	763b      	strb	r3, [r7, #24]
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }; // dummy bytes
    uint8_t rxBuf[13];

    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_RESET);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6858      	ldr	r0, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	891b      	ldrh	r3, [r3, #8]
 80013f6:	2200      	movs	r2, #0
 80013f8:	4619      	mov	r1, r3
 80013fa:	f007 fa93 	bl	8008924 <HAL_GPIO_WritePin>

    if (HAL_SPI_TransmitReceive_DMA(imu->spiHandle, txBuf, imu->rxBuf, 13) == HAL_OK) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f103 0217 	add.w	r2, r3, #23
 8001408:	f107 0118 	add.w	r1, r7, #24
 800140c:	230d      	movs	r3, #13
 800140e:	f00b f941 	bl	800c694 <HAL_SPI_TransmitReceive_DMA>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <LSM_ReadDMA+0x48>
        return 1;
 8001418:	2301      	movs	r3, #1
 800141a:	e008      	b.n	800142e <LSM_ReadDMA+0x5a>
    }
    else {
        HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6858      	ldr	r0, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	891b      	ldrh	r3, [r3, #8]
 8001424:	2201      	movs	r2, #1
 8001426:	4619      	mov	r1, r3
 8001428:	f007 fa7c 	bl	8008924 <HAL_GPIO_WritePin>
        return 0;
 800142c:	2300      	movs	r3, #0
    }

}
 800142e:	4618      	mov	r0, r3
 8001430:	3728      	adds	r7, #40	; 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <LSM_ReadDMA_Complete>:

void LSM_ReadDMA_Complete(lsm6dso *imu) {
 8001436:	b580      	push	{r7, lr}
 8001438:	b082      	sub	sp, #8
 800143a:	af00      	add	r7, sp, #0
 800143c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(imu->csPinBank, imu->csPin, GPIO_PIN_SET);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6858      	ldr	r0, [r3, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	891b      	ldrh	r3, [r3, #8]
 8001446:	2201      	movs	r2, #1
 8001448:	4619      	mov	r1, r3
 800144a:	f007 fa6b 	bl	8008924 <HAL_GPIO_WritePin>

    imu->rawGyro[0] = (uint16_t) (imu->rxBuf[2] << 8 | imu->rxBuf[1]);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7e5b      	ldrb	r3, [r3, #25]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21a      	sxth	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7e1b      	ldrb	r3, [r3, #24]
 800145a:	b21b      	sxth	r3, r3
 800145c:	4313      	orrs	r3, r2
 800145e:	b21a      	sxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	849a      	strh	r2, [r3, #36]	; 0x24
    imu->rawGyro[1] = (uint16_t) (imu->rxBuf[4] << 8 | imu->rxBuf[3]);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7edb      	ldrb	r3, [r3, #27]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21a      	sxth	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7e9b      	ldrb	r3, [r3, #26]
 8001470:	b21b      	sxth	r3, r3
 8001472:	4313      	orrs	r3, r2
 8001474:	b21a      	sxth	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	84da      	strh	r2, [r3, #38]	; 0x26
    imu->rawGyro[2] = (uint16_t) (imu->rxBuf[6] << 8 | imu->rxBuf[5]);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7f5b      	ldrb	r3, [r3, #29]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	7f1b      	ldrb	r3, [r3, #28]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	851a      	strh	r2, [r3, #40]	; 0x28

    imu->rawAcc[0] = (uint16_t) (imu->rxBuf[8] << 8 | imu->rxBuf[7]);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7fdb      	ldrb	r3, [r3, #31]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7f9b      	ldrb	r3, [r3, #30]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    imu->rawAcc[1] = (uint16_t) (imu->rxBuf[10] << 8 | imu->rxBuf[9]);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	4313      	orrs	r3, r2
 80014bc:	b21a      	sxth	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    imu->rawAcc[2] = (uint16_t) (imu->rxBuf[12] << 8 | imu->rxBuf[11]);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80014ca:	021b      	lsls	r3, r3, #8
 80014cc:	b21a      	sxth	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80014d4:	b21b      	sxth	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b21a      	sxth	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    LSM_Convert(imu);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff fe6d 	bl	80011c0 <LSM_Convert>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
	...

080014f0 <SPL06_Init>:
/*
 *
 * INITIALISATION
 *
 */
uint8_t SPL06_Init(SPL06 *bar, I2C_HandleTypeDef *i2cHandle, uint8_t i2cAddress) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af04      	add	r7, sp, #16
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	4613      	mov	r3, r2
 80014fc:	71fb      	strb	r3, [r7, #7]

    uint8_t status = 0;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* Store peripheral data */
    bar->i2cHandle = i2cHandle;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	601a      	str	r2, [r3, #0]
    bar->i2cAddress = i2cAddress << 1;
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	b2da      	uxtb	r2, r3
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	711a      	strb	r2, [r3, #4]

    /* Clear measurements */
    bar->pressure_Pa   = 0.0f;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
    bar->temperature_C = 0.0f;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f04f 0200 	mov.w	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	; 0x2c

    bar->basepressure = 101325;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4a65      	ldr	r2, [pc, #404]	; (80016bc <SPL06_Init+0x1cc>)
 8001528:	631a      	str	r2, [r3, #48]	; 0x30

    uint8_t txBuf[2] = {0x00, 0x00};
 800152a:	2300      	movs	r3, #0
 800152c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 8001530:	2300      	movs	r3, #0
 8001532:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t rxBuf[2];

    /* Check device ID */
    uint8_t id;

    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_ID, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500) == HAL_OK);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	791b      	ldrb	r3, [r3, #4]
 800153e:	b299      	uxth	r1, r3
 8001540:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001544:	9302      	str	r3, [sp, #8]
 8001546:	2301      	movs	r3, #1
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2301      	movs	r3, #1
 8001552:	220d      	movs	r2, #13
 8001554:	f007 fc4a 	bl	8008dec <HAL_I2C_Mem_Read>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	bf0c      	ite	eq
 800155e:	2301      	moveq	r3, #1
 8001560:	2300      	movne	r3, #0
 8001562:	b2db      	uxtb	r3, r3
 8001564:	b2da      	uxtb	r2, r3
 8001566:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800156a:	4413      	add	r3, r2
 800156c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    id = rxBuf[0];
 8001570:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8001574:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* Make sure device ID matches */
    if (id != 0x10) {
 8001578:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800157c:	2b10      	cmp	r3, #16
 800157e:	d001      	beq.n	8001584 <SPL06_Init+0x94>

        return 0;
 8001580:	2300      	movs	r3, #0
 8001582:	e13b      	b.n	80017fc <SPL06_Init+0x30c>

    }
    HAL_Delay(10);
 8001584:	200a      	movs	r0, #10
 8001586:	f005 ffe7 	bl	8007558 <HAL_Delay>

    /* Read calibration coefficients */
    uint8_t calibTxBuf[19];
    calibTxBuf[0] = (SPL06_COEF | 0x80);
 800158a:	2390      	movs	r3, #144	; 0x90
 800158c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

    uint8_t calibRxBuf[19];

    //status += (HAL_SPI_TransmitReceive(bar->spiHandle, calibTxBuf, calibRxBuf, 19, HAL_MAX_DELAY) == HAL_OK);
    status += (HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, SPL06_COEF, I2C_MEMADD_SIZE_8BIT, calibRxBuf, 19, 500) == HAL_OK);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	6818      	ldr	r0, [r3, #0]
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	791b      	ldrb	r3, [r3, #4]
 8001598:	b299      	uxth	r1, r3
 800159a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2313      	movs	r3, #19
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2301      	movs	r3, #1
 80015ac:	2210      	movs	r2, #16
 80015ae:	f007 fc1d 	bl	8008dec <HAL_I2C_Mem_Read>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	bf0c      	ite	eq
 80015b8:	2301      	moveq	r3, #1
 80015ba:	2300      	movne	r3, #0
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80015c4:	4413      	add	r3, r2
 80015c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    /* Convert raw calibration coefficients to signed integers */
    bar->c0 = (uint16_t)calibRxBuf[0] << 4 | (uint16_t)calibRxBuf[1] >> 4;
 80015ca:	7c3b      	ldrb	r3, [r7, #16]
 80015cc:	011b      	lsls	r3, r3, #4
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	7c7b      	ldrb	r3, [r7, #17]
 80015d2:	091b      	lsrs	r3, r3, #4
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	81da      	strh	r2, [r3, #14]
    bar->c0 = (bar->c0 & 1 << 11) ? (0xF000 | bar->c0) : bar->c0;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d008      	beq.n	8001602 <SPL06_Init+0x112>
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015f6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80015fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80015fe:	b21b      	sxth	r3, r3
 8001600:	e002      	b.n	8001608 <SPL06_Init+0x118>
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	81d3      	strh	r3, [r2, #14]

    bar->c1 = (uint16_t)(calibRxBuf[1] & 0x0f) << 8 | (uint16_t)calibRxBuf[2];
 800160c:	7c7b      	ldrb	r3, [r7, #17]
 800160e:	021b      	lsls	r3, r3, #8
 8001610:	b21b      	sxth	r3, r3
 8001612:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001616:	b21a      	sxth	r2, r3
 8001618:	7cbb      	ldrb	r3, [r7, #18]
 800161a:	b21b      	sxth	r3, r3
 800161c:	4313      	orrs	r3, r2
 800161e:	b21a      	sxth	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	821a      	strh	r2, [r3, #16]
    bar->c1 = (bar->c1 & 1 << 11) ? (0xF000 | bar->c1) : bar->c1;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800162a:	b29b      	uxth	r3, r3
 800162c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <SPL06_Init+0x156>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800163a:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 800163e:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8001642:	b21b      	sxth	r3, r3
 8001644:	e002      	b.n	800164c <SPL06_Init+0x15c>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	8213      	strh	r3, [r2, #16]

    bar->c00 = (uint32_t)calibRxBuf[3] << 12 | (uint32_t)calibRxBuf[4] << 4 | (uint16_t)calibRxBuf[5] >> 4;
 8001650:	7cfb      	ldrb	r3, [r7, #19]
 8001652:	031a      	lsls	r2, r3, #12
 8001654:	7d3b      	ldrb	r3, [r7, #20]
 8001656:	011b      	lsls	r3, r3, #4
 8001658:	4313      	orrs	r3, r2
 800165a:	7d7a      	ldrb	r2, [r7, #21]
 800165c:	0912      	lsrs	r2, r2, #4
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	4313      	orrs	r3, r2
 8001662:	461a      	mov	r2, r3
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	615a      	str	r2, [r3, #20]
    bar->c00 = (bar->c00 & 1 << 19) ? (0xFFF00000 | bar->c00) : bar->c00;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d006      	beq.n	8001682 <SPL06_Init+0x192>
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	695b      	ldr	r3, [r3, #20]
 8001678:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 800167c:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 8001680:	e001      	b.n	8001686 <SPL06_Init+0x196>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	6153      	str	r3, [r2, #20]

    bar->c10 = (uint32_t)(calibRxBuf[5] & 0x0f) << 16 | (uint32_t)calibRxBuf[6] << 8 | (uint32_t)calibRxBuf[7];
 800168a:	7d7b      	ldrb	r3, [r7, #21]
 800168c:	041b      	lsls	r3, r3, #16
 800168e:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001692:	7dbb      	ldrb	r3, [r7, #22]
 8001694:	021b      	lsls	r3, r3, #8
 8001696:	4313      	orrs	r3, r2
 8001698:	7dfa      	ldrb	r2, [r7, #23]
 800169a:	4313      	orrs	r3, r2
 800169c:	461a      	mov	r2, r3
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	619a      	str	r2, [r3, #24]
    bar->c10 = (bar->c10 & 1 << 19) ? (0xFFF00000 | bar->c10) : bar->c10;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d008      	beq.n	80016c0 <SPL06_Init+0x1d0>
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	ea6f 3303 	mvn.w	r3, r3, lsl #12
 80016b6:	ea6f 3313 	mvn.w	r3, r3, lsr #12
 80016ba:	e003      	b.n	80016c4 <SPL06_Init+0x1d4>
 80016bc:	47c5e680 	.word	0x47c5e680
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	6193      	str	r3, [r2, #24]

    bar->c01 = (uint16_t) calibRxBuf[8]  << 8 | calibRxBuf[9];
 80016c8:	7e3b      	ldrb	r3, [r7, #24]
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	b21a      	sxth	r2, r3
 80016ce:	7e7b      	ldrb	r3, [r7, #25]
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	4313      	orrs	r3, r2
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	839a      	strh	r2, [r3, #28]
    bar->c11 = (uint16_t) calibRxBuf[10] << 8 | calibRxBuf[11];
 80016da:	7ebb      	ldrb	r3, [r7, #26]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	7efb      	ldrb	r3, [r7, #27]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	83da      	strh	r2, [r3, #30]
    bar->c20 = (uint16_t) calibRxBuf[12] << 8 | calibRxBuf[13];
 80016ec:	7f3b      	ldrb	r3, [r7, #28]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	7f7b      	ldrb	r3, [r7, #29]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	841a      	strh	r2, [r3, #32]
    bar->c21 = (uint16_t) calibRxBuf[14] << 8 | calibRxBuf[15];
 80016fe:	7fbb      	ldrb	r3, [r7, #30]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	b21a      	sxth	r2, r3
 8001704:	7ffb      	ldrb	r3, [r7, #31]
 8001706:	b21b      	sxth	r3, r3
 8001708:	4313      	orrs	r3, r2
 800170a:	b21a      	sxth	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	845a      	strh	r2, [r3, #34]	; 0x22
    bar->c30 = (uint16_t) calibRxBuf[16] << 8 | calibRxBuf[17];
 8001710:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21a      	sxth	r2, r3
 8001718:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800171c:	b21b      	sxth	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b21a      	sxth	r2, r3
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	849a      	strh	r2, [r3, #36]	; 0x24
    HAL_Delay(25);
 8001726:	2019      	movs	r0, #25
 8001728:	f005 ff16 	bl	8007558 <HAL_Delay>

    /* Set pressure configuration */
    txBuf[0] = 0b01100011; // 64 Hz with 8 times oversampling
 800172c:	2363      	movs	r3, #99	; 0x63
 800172e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_PRS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	6818      	ldr	r0, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	791b      	ldrb	r3, [r3, #4]
 800173a:	b299      	uxth	r1, r3
 800173c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2301      	movs	r3, #1
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2301      	movs	r3, #1
 800174e:	2206      	movs	r2, #6
 8001750:	f007 fa52 	bl	8008bf8 <HAL_I2C_Mem_Write>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	bf0c      	ite	eq
 800175a:	2301      	moveq	r3, #1
 800175c:	2300      	movne	r3, #0
 800175e:	b2db      	uxtb	r3, r3
 8001760:	b2da      	uxtb	r2, r3
 8001762:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001766:	4413      	add	r3, r2
 8001768:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


    HAL_Delay(10);
 800176c:	200a      	movs	r0, #10
 800176e:	f005 fef3 	bl	8007558 <HAL_Delay>

    /* Set temperature configuration */
    txBuf[0] = 0xB3;
 8001772:	23b3      	movs	r3, #179	; 0xb3
 8001774:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_TMP_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	791b      	ldrb	r3, [r3, #4]
 8001780:	b299      	uxth	r1, r3
 8001782:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001786:	9302      	str	r3, [sp, #8]
 8001788:	2301      	movs	r3, #1
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	2301      	movs	r3, #1
 8001794:	2207      	movs	r2, #7
 8001796:	f007 fa2f 	bl	8008bf8 <HAL_I2C_Mem_Write>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	bf0c      	ite	eq
 80017a0:	2301      	moveq	r3, #1
 80017a2:	2300      	movne	r3, #0
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017ac:	4413      	add	r3, r2
 80017ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);

    HAL_Delay(10);
 80017b2:	200a      	movs	r0, #10
 80017b4:	f005 fed0 	bl	8007558 <HAL_Delay>

    /* Set measurement configuration */
    txBuf[0] = 0xFF ;
 80017b8:	23ff      	movs	r3, #255	; 0xff
 80017ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    status += (HAL_I2C_Mem_Write(bar->i2cHandle, bar->i2cAddress, SPL06_MEAS_CFG, I2C_MEMADD_SIZE_8BIT, txBuf, 1, 500) == HAL_OK);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	791b      	ldrb	r3, [r3, #4]
 80017c6:	b299      	uxth	r1, r3
 80017c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80017cc:	9302      	str	r3, [sp, #8]
 80017ce:	2301      	movs	r3, #1
 80017d0:	9301      	str	r3, [sp, #4]
 80017d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2301      	movs	r3, #1
 80017da:	2208      	movs	r2, #8
 80017dc:	f007 fa0c 	bl	8008bf8 <HAL_I2C_Mem_Write>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	2301      	moveq	r3, #1
 80017e8:	2300      	movne	r3, #0
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	b2da      	uxtb	r2, r3
 80017ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80017f2:	4413      	add	r3, r2
 80017f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    //status += (HAL_SPI_Transmit(bar->spiHandle, txBuf, 2, HAL_MAX_DELAY) == HAL_OK);


    return status;
 80017f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f

}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3740      	adds	r7, #64	; 0x40
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <SPL06_Read>:
/*
 *
 * TEMPERATURE AND PRESSURE READ (POLLING)
 *
 */
void SPL06_Read(SPL06 *bar) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b08e      	sub	sp, #56	; 0x38
 8001808:	af04      	add	r7, sp, #16
 800180a:	6078      	str	r0, [r7, #4]

    uint8_t txBuf[7];
    txBuf[0] = 0x00 | 0x80;
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	743b      	strb	r3, [r7, #16]

    uint8_t rxBuf[6];

    //HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x80, I2C_MEMADD_SIZE_8BIT, rxBuf, 1, 500);
    HAL_I2C_Mem_Read(bar->i2cHandle, bar->i2cAddress, 0x00, I2C_MEMADD_SIZE_8BIT, rxBuf, 6, 500);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6818      	ldr	r0, [r3, #0]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	791b      	ldrb	r3, [r3, #4]
 8001818:	b299      	uxth	r1, r3
 800181a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800181e:	9302      	str	r3, [sp, #8]
 8001820:	2306      	movs	r3, #6
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	9300      	str	r3, [sp, #0]
 800182a:	2301      	movs	r3, #1
 800182c:	2200      	movs	r2, #0
 800182e:	f007 fadd 	bl	8008dec <HAL_I2C_Mem_Read>

    /* Convert raw to uncalibrated pressure and temperature */
    int32_t pres = ((uint32_t) rxBuf[0] << 16) | ((uint32_t) rxBuf[1] << 8) | ((uint32_t) rxBuf[2]);
 8001832:	7a3b      	ldrb	r3, [r7, #8]
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	7a7b      	ldrb	r3, [r7, #9]
 8001838:	021b      	lsls	r3, r3, #8
 800183a:	4313      	orrs	r3, r2
 800183c:	7aba      	ldrb	r2, [r7, #10]
 800183e:	4313      	orrs	r3, r2
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
            pres = (pres & 1 << 23) ? (0xFF000000 | pres) : pres;
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d003      	beq.n	8001854 <SPL06_Read+0x50>
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001852:	e000      	b.n	8001856 <SPL06_Read+0x52>
 8001854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001856:	627b      	str	r3, [r7, #36]	; 0x24

    int32_t temp = ((uint32_t) rxBuf[3] << 16) | ((uint32_t) rxBuf[4] << 8) | ((uint32_t) rxBuf[5]);
 8001858:	7afb      	ldrb	r3, [r7, #11]
 800185a:	041a      	lsls	r2, r3, #16
 800185c:	7b3b      	ldrb	r3, [r7, #12]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	4313      	orrs	r3, r2
 8001862:	7b7a      	ldrb	r2, [r7, #13]
 8001864:	4313      	orrs	r3, r2
 8001866:	623b      	str	r3, [r7, #32]
            temp = (temp & 1 << 23) ? (0xFF000000 | temp) : temp;
 8001868:	6a3b      	ldr	r3, [r7, #32]
 800186a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d003      	beq.n	800187a <SPL06_Read+0x76>
 8001872:	6a3b      	ldr	r3, [r7, #32]
 8001874:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001878:	e000      	b.n	800187c <SPL06_Read+0x78>
 800187a:	6a3b      	ldr	r3, [r7, #32]
 800187c:	623b      	str	r3, [r7, #32]

    /* Apply calibration */
    float tempRaw = (float) temp / 7864320.0f;
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001888:	eddf 6a50 	vldr	s13, [pc, #320]	; 80019cc <SPL06_Read+0x1c8>
 800188c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001890:	edc7 7a07 	vstr	s15, [r7, #28]
    bar->temperature_C = 0.5f * bar->c0 + bar->c1 * tempRaw;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800189a:	ee07 3a90 	vmov	s15, r3
 800189e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80018b0:	ee07 3a90 	vmov	s15, r3
 80018b4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018b8:	edd7 7a07 	vldr	s15, [r7, #28]
 80018bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    float presRaw   = (float) pres / 7864320.0f;
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80019cc <SPL06_Read+0x1c8>
 80018d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018dc:	edc7 7a06 	vstr	s15, [r7, #24]
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	695b      	ldr	r3, [r3, #20]
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80018fe:	ee07 3a90 	vmov	s15, r3
 8001902:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800190c:	ee07 3a90 	vmov	s15, r3
 8001910:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001914:	edd7 7a06 	vldr	s15, [r7, #24]
 8001918:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800191c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8001920:	edd7 7a06 	vldr	s15, [r7, #24]
 8001924:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001928:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800192c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001930:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001934:	ee37 7a27 	vadd.f32	s14, s14, s15
                    + tempRaw * (bar->c01 + presRaw * (bar->c11 + bar->c21 * presRaw));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 800193e:	ee07 3a90 	vmov	s15, r3
 8001942:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800195a:	ee07 3a90 	vmov	s15, r3
 800195e:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001962:	edd7 7a06 	vldr	s15, [r7, #24]
 8001966:	ee65 7aa7 	vmul.f32	s15, s11, s15
 800196a:	ee36 6a27 	vadd.f32	s12, s12, s15
 800196e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001972:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001976:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800197a:	edd7 7a07 	vldr	s15, [r7, #28]
 800197e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001982:	ee77 7a27 	vadd.f32	s15, s14, s15
    bar->pressure_Pa = bar->c00 + presRaw * (bar->c10 + presRaw * (bar->c20 + bar->c30 * presRaw))
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

    bar->altitude = 44330 * (1 - powf(bar->pressure_Pa/bar->basepressure, 0.190295));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8001998:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800199c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80019d0 <SPL06_Read+0x1cc>
 80019a0:	eeb0 0a66 	vmov.f32	s0, s13
 80019a4:	f015 fd08 	bl	80173b8 <powf>
 80019a8:	eeb0 7a40 	vmov.f32	s14, s0
 80019ac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80019b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80019b4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80019d4 <SPL06_Read+0x1d0>
 80019b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

}
 80019c2:	bf00      	nop
 80019c4:	3728      	adds	r7, #40	; 0x28
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	4af00000 	.word	0x4af00000
 80019d0:	3e42dcb1 	.word	0x3e42dcb1
 80019d4:	472d2a00 	.word	0x472d2a00

080019d8 <servo_init>:
#include "servo.h"

void servo_init(Servo *servo, TIM_HandleTypeDef *tim, volatile uint32_t *timerval) {
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
    servo->timer = tim;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	68ba      	ldr	r2, [r7, #8]
 80019e8:	605a      	str	r2, [r3, #4]
    servo->timerval = timerval;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <servo_writeangle>:


void servo_writeangle(Servo *servo, uint8_t angle) {
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
    // value between 0 and 180
    uint32_t newtimerval = 1000 + (angle * 1000 / 180);
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <servo_writeangle+0x40>)
 8001a14:	fb82 1203 	smull	r1, r2, r2, r3
 8001a18:	441a      	add	r2, r3
 8001a1a:	11d2      	asrs	r2, r2, #7
 8001a1c:	17db      	asrs	r3, r3, #31
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001a24:	60fb      	str	r3, [r7, #12]
    *servo->timerval = newtimerval;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	601a      	str	r2, [r3, #0]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	b60b60b7 	.word	0xb60b60b7

08001a40 <servo_disable>:

void servo_writemicros(Servo *servo, uint32_t pulse) {
    *servo->timerval = pulse;
}

void servo_disable(Servo *servo) {
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    *servo->timerval = 0;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <sxSpiTransmit>:
#include "main.h"
#include "sx1280_custom.h"


void sxSpiTransmit(sx1280_custom *radio, uint8_t *txBuf, uint8_t size) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6858      	ldr	r0, [r3, #4]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	891b      	ldrh	r3, [r3, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	4619      	mov	r1, r3
 8001a76:	f006 ff55 	bl	8008924 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_Transmit(radio->spiHandle, txBuf, size, 1000);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6818      	ldr	r0, [r3, #0]
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	f00a fa24 	bl	800bed4 <HAL_SPI_Transmit>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6858      	ldr	r0, [r3, #4]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	891b      	ldrh	r3, [r3, #8]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f006 ff3f 	bl	8008924 <HAL_GPIO_WritePin>
}
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <sxSpiTransmitReceive>:
void sxSpiTransmitReceive(sx1280_custom *radio, uint8_t *txBuf, uint8_t *rxBuf, uint8_t size) {
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6858      	ldr	r0, [r3, #4]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	891b      	ldrh	r3, [r3, #8]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f006 ff2c 	bl	8008924 <HAL_GPIO_WritePin>
    radio->spi_return = HAL_SPI_TransmitReceive(radio->spiHandle,txBuf,rxBuf,size,1000);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	78fb      	ldrb	r3, [r7, #3]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad8:	9300      	str	r3, [sp, #0]
 8001ada:	4613      	mov	r3, r2
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	f00a fc35 	bl	800c34e <HAL_SPI_TransmitReceive>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6858      	ldr	r0, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	891b      	ldrh	r3, [r3, #8]
 8001af6:	2201      	movs	r2, #1
 8001af8:	4619      	mov	r1, r3
 8001afa:	f006 ff13 	bl	8008924 <HAL_GPIO_WritePin>
}
 8001afe:	bf00      	nop
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <sxInit>:


void sxInit(sx1280_custom *radio, SPI_HandleTypeDef *spiHandle,
        GPIO_TypeDef *csPinBank, uint16_t csPin) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	807b      	strh	r3, [r7, #2]

    radio->spiHandle = spiHandle;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	601a      	str	r2, [r3, #0]
    radio->csPinBank = csPinBank;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	605a      	str	r2, [r3, #4]
    radio->csPin = csPin;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	887a      	ldrh	r2, [r7, #2]
 8001b26:	811a      	strh	r2, [r3, #8]


    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_RESET);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2140      	movs	r1, #64	; 0x40
 8001b2c:	4825      	ldr	r0, [pc, #148]	; (8001bc4 <sxInit+0xbc>)
 8001b2e:	f006 fef9 	bl	8008924 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001b32:	2002      	movs	r0, #2
 8001b34:	f005 fd10 	bl	8007558 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2140      	movs	r1, #64	; 0x40
 8001b3c:	4821      	ldr	r0, [pc, #132]	; (8001bc4 <sxInit+0xbc>)
 8001b3e:	f006 fef1 	bl	8008924 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001b42:	2002      	movs	r0, #2
 8001b44:	f005 fd08 	bl	8007558 <HAL_Delay>

    SetStandbyRC(radio);
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 f850 	bl	8001bee <SetStandbyRC>
    HAL_Delay(3);
 8001b4e:	2003      	movs	r0, #3
 8001b50:	f005 fd02 	bl	8007558 <HAL_Delay>
    setPacketLora(radio);
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f000 f88b 	bl	8001c70 <setPacketLora>
    HAL_Delay(2);
 8001b5a:	2002      	movs	r0, #2
 8001b5c:	f005 fcfc 	bl	8007558 <HAL_Delay>
    SetRfFrequency2(radio);
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f86f 	bl	8001c44 <SetRfFrequency2>
    HAL_Delay(2);
 8001b66:	2002      	movs	r0, #2
 8001b68:	f005 fcf6 	bl	8007558 <HAL_Delay>

    SetBufferBaseAddresses(radio, 0, 0); // 127
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 f93d 	bl	8001df0 <SetBufferBaseAddresses>
    HAL_Delay(1);
 8001b76:	2001      	movs	r0, #1
 8001b78:	f005 fcee 	bl	8007558 <HAL_Delay>
    //SetModulationParams(radio, 0x90, 0x0A, 0x01); // Spreading factor 9, 1600 BW (0x0A), CR 4/5. Sensitivity: -111
    SetModulationParams(radio, 0x80, 0x18, 0x01); // Spreading factor 8, 800 BW (0x0A), CR 4/5. Sensitivity: -115
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	2218      	movs	r2, #24
 8001b80:	2180      	movs	r1, #128	; 0x80
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f000 f94e 	bl	8001e24 <SetModulationParams>
    HAL_Delay(1);
 8001b88:	2001      	movs	r0, #1
 8001b8a:	f005 fce5 	bl	8007558 <HAL_Delay>

    WriteRegisterByte(radio, 0x925, 0x32); // must be used for SF9-12. Different for 5-8 (page 112)
 8001b8e:	2232      	movs	r2, #50	; 0x32
 8001b90:	f640 1125 	movw	r1, #2341	; 0x925
 8001b94:	68f8      	ldr	r0, [r7, #12]
 8001b96:	f000 fb17 	bl	80021c8 <WriteRegisterByte>

    HAL_Delay(1);
 8001b9a:	2001      	movs	r0, #1
 8001b9c:	f005 fcdc 	bl	8007558 <HAL_Delay>
    SetPacketParamsLora(radio, 12, 0x80, 32, 0x20, 0x40); // 12 symbol preamble, implicit header, 32 byte payload, CRC enabled, Normal IQ
 8001ba0:	2340      	movs	r3, #64	; 0x40
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2320      	movs	r3, #32
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2320      	movs	r3, #32
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	210c      	movs	r1, #12
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 f959 	bl	8001e66 <SetPacketParamsLora>
    HAL_Delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f005 fccf 	bl	8007558 <HAL_Delay>
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40020400 	.word	0x40020400

08001bc8 <sxSetDio1Pin>:

void sxSetDio1Pin(sx1280_custom *radio, GPIO_TypeDef *Dio1PinBank, uint16_t Dio1Pin) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	80fb      	strh	r3, [r7, #6]
    radio->Dio1PinBank = Dio1PinBank;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	60da      	str	r2, [r3, #12]
    radio->Dio1Pin = Dio1Pin;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	88fa      	ldrh	r2, [r7, #6]
 8001be0:	821a      	strh	r2, [r3, #16]
}
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <SetStandbyRC>:

void SetStandbyRC(sx1280_custom *radio) {
 8001bee:	b580      	push	{r7, lr}
 8001bf0:	b084      	sub	sp, #16
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x80, 0x00 }; // Standby RC
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	723b      	strb	r3, [r7, #8]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	727b      	strb	r3, [r7, #9]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001bfe:	f107 020c 	add.w	r2, r7, #12
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	2302      	movs	r3, #2
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff50 	bl	8001aae <sxSpiTransmitReceive>
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <SetRfFrequency>:
    uint8_t loraRxBuf[1];
    uint8_t loraTxBuf[] = { 0xD1 }; // ContinousWave
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 1);
}

void SetRfFrequency(sx1280_custom *radio) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBD, 0x3B, 0x14 }; // SetRfFrequency
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <SetRfFrequency+0x28>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001c26:	f107 020c 	add.w	r2, r7, #12
 8001c2a:	f107 0108 	add.w	r1, r7, #8
 8001c2e:	2304      	movs	r3, #4
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff3c 	bl	8001aae <sxSpiTransmitReceive>
}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	080197f4 	.word	0x080197f4

08001c44 <SetRfFrequency2>:

void SetRfFrequency2(sx1280_custom *radio) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
    // 52e6/(2^18) multiples of
    // 2.46 = 2.46 * 10^9/(52e6/(2^18)) = 12401428 = 0xBD3B14
    // uint32_t rfFreq = 12401428;

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x86, 0xBE, 0xC4, 0xEC }; // SetRfFrequency
 8001c4c:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <SetRfFrequency2+0x28>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	60bb      	str	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 4);
 8001c52:	f107 020c 	add.w	r2, r7, #12
 8001c56:	f107 0108 	add.w	r1, r7, #8
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff ff26 	bl	8001aae <sxSpiTransmitReceive>
}
 8001c62:	bf00      	nop
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	080197f8 	.word	0x080197f8

08001c70 <setPacketLora>:

void setPacketLora(sx1280_custom *radio) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x01 }; // Set packet to lora
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <setPacketLora+0x28>)
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001c7e:	f107 020c 	add.w	r2, r7, #12
 8001c82:	f107 0108 	add.w	r1, r7, #8
 8001c86:	2302      	movs	r3, #2
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff10 	bl	8001aae <sxSpiTransmitReceive>
}
 8001c8e:	bf00      	nop
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	080197fc 	.word	0x080197fc

08001c9c <setPacketRanging>:

void setPacketRanging(sx1280_custom *radio) {
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[2];
    uint8_t loraTxBuf[] = { 0x8A, 0x02 }; // Set packet to ranging
 8001ca4:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <setPacketRanging+0x28>)
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	813b      	strh	r3, [r7, #8]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 2);
 8001caa:	f107 020c 	add.w	r2, r7, #12
 8001cae:	f107 0108 	add.w	r1, r7, #8
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f7ff fefa 	bl	8001aae <sxSpiTransmitReceive>
}
 8001cba:	bf00      	nop
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08019800 	.word	0x08019800

08001cc8 <setRangingRole>:
    SetTxParams(radio, 0, 0xE0);
    uint8_t rangingAddress[] = {0x12, 0x34, 0x56, 0x78};
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);
}

void setRangingRole(sx1280_custom *radio, uint8_t is_master) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	70fb      	strb	r3, [r7, #3]
    uint8_t loraTxBuf[] = { 0xA3, is_master };
 8001cd4:	23a3      	movs	r3, #163	; 0xa3
 8001cd6:	733b      	strb	r3, [r7, #12]
 8001cd8:	78fb      	ldrb	r3, [r7, #3]
 8001cda:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, 2);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff feb9 	bl	8001a5c <sxSpiTransmit>
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <sxStandardRangingMaster>:

void sxStandardRangingMaster(sx1280_custom *radio) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
    uint8_t rangingAddress[] = {0x12, 0x34, 0x56, 0x78};
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <sxStandardRangingMaster+0x60>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	613b      	str	r3, [r7, #16]
    // master settings
    WriteRegisterBytes(radio, 0x912, rangingAddress, 4);
 8001d02:	f107 0210 	add.w	r2, r7, #16
 8001d06:	2304      	movs	r3, #4
 8001d08:	f640 1112 	movw	r1, #2322	; 0x912
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fa7a 	bl	8002206 <WriteRegisterBytes>
    HAL_Delay(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f005 fc20 	bl	8007558 <HAL_Delay>
    uint16_t cal = 11340;
 8001d18:	f642 434c 	movw	r3, #11340	; 0x2c4c
 8001d1c:	82fb      	strh	r3, [r7, #22]
    uint8_t calibration[] = { (uint8_t) ((cal >> 8) & 0xFF), (uint8_t) (cal & 0xFF)};
 8001d1e:	8afb      	ldrh	r3, [r7, #22]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	733b      	strb	r3, [r7, #12]
 8001d28:	8afb      	ldrh	r3, [r7, #22]
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	737b      	strb	r3, [r7, #13]
    WriteRegisterBytes(radio, 0x92C, calibration, 2);
 8001d2e:	f107 020c 	add.w	r2, r7, #12
 8001d32:	2302      	movs	r3, #2
 8001d34:	f640 112c 	movw	r1, #2348	; 0x92c
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 fa64 	bl	8002206 <WriteRegisterBytes>
    HAL_Delay(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f005 fc0a 	bl	8007558 <HAL_Delay>
    setRangingRole(radio, 1);
 8001d44:	2101      	movs	r1, #1
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ffbe 	bl	8001cc8 <setRangingRole>
}
 8001d4c:	bf00      	nop
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	08019804 	.word	0x08019804

08001d58 <sxStandardRangingSlave>:
void sxStandardRangingSlave(sx1280_custom *radio) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
    uint8_t rangingAddress[] = {0x12, 0x34, 0x56, 0x78};
 8001d60:	4b15      	ldr	r3, [pc, #84]	; (8001db8 <sxStandardRangingSlave+0x60>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	60bb      	str	r3, [r7, #8]
    // slave settings
    WriteRegisterBytes(radio, 0x916, rangingAddress, 4);
 8001d66:	f107 0208 	add.w	r2, r7, #8
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	f640 1116 	movw	r1, #2326	; 0x916
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 fa48 	bl	8002206 <WriteRegisterBytes>
    HAL_Delay(1);
 8001d76:	2001      	movs	r0, #1
 8001d78:	f005 fbee 	bl	8007558 <HAL_Delay>
    uint8_t temp = ReadRegisterByte(radio, 0x931) | 0b00111111;
 8001d7c:	f640 1131 	movw	r1, #2353	; 0x931
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fa00 	bl	8002186 <ReadRegisterByte>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001d8c:	73fb      	strb	r3, [r7, #15]
    HAL_Delay(1);
 8001d8e:	2001      	movs	r0, #1
 8001d90:	f005 fbe2 	bl	8007558 <HAL_Delay>
    WriteRegisterByte(radio, 0x931, temp); // 8 bit ranging address.
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f640 1131 	movw	r1, #2353	; 0x931
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa13 	bl	80021c8 <WriteRegisterByte>
    HAL_Delay(1);
 8001da2:	2001      	movs	r0, #1
 8001da4:	f005 fbd8 	bl	8007558 <HAL_Delay>
    setRangingRole(radio, 0);
 8001da8:	2100      	movs	r1, #0
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff8c 	bl	8001cc8 <setRangingRole>
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	08019804 	.word	0x08019804

08001dbc <SetTxParams>:
    uint8_t temp = (ReadRegisterByte(radio, 0x0924) & 0xCF) | (0b00000001 << 4); // Average RSSI filtered result
    // 150 / (2^12 * 0.816) = 0.04487879136

}

void SetTxParams(sx1280_custom *radio, uint8_t power, uint8_t rampTime) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	70fb      	strb	r3, [r7, #3]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    // Set to -12 dBm = 0.06 mW
    uint8_t loraTxBuf[] = { 0x8E, power, rampTime };
 8001dcc:	238e      	movs	r3, #142	; 0x8e
 8001dce:	723b      	strb	r3, [r7, #8]
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	727b      	strb	r3, [r7, #9]
 8001dd4:	78bb      	ldrb	r3, [r7, #2]
 8001dd6:	72bb      	strb	r3, [r7, #10]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 3);
 8001dd8:	f107 020c 	add.w	r2, r7, #12
 8001ddc:	f107 0108 	add.w	r1, r7, #8
 8001de0:	2303      	movs	r3, #3
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff fe63 	bl	8001aae <sxSpiTransmitReceive>
}
 8001de8:	bf00      	nop
 8001dea:	3710      	adds	r7, #16
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SetBufferBaseAddresses>:

void SetBufferBaseAddresses(sx1280_custom *radio, uint8_t txBaseAddress, uint8_t rxBaseAddress) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	460b      	mov	r3, r1
 8001dfa:	70fb      	strb	r3, [r7, #3]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	70bb      	strb	r3, [r7, #2]
    uint8_t loraRxBuf[3];
    uint8_t loraTxBuf[] = { 0x8F, txBaseAddress, rxBaseAddress };
 8001e00:	238f      	movs	r3, #143	; 0x8f
 8001e02:	723b      	strb	r3, [r7, #8]
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	727b      	strb	r3, [r7, #9]
 8001e08:	78bb      	ldrb	r3, [r7, #2]
 8001e0a:	72bb      	strb	r3, [r7, #10]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001e0c:	f107 020c 	add.w	r2, r7, #12
 8001e10:	f107 0108 	add.w	r1, r7, #8
 8001e14:	2303      	movs	r3, #3
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f7ff fe49 	bl	8001aae <sxSpiTransmitReceive>
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <SetModulationParams>:

void SetModulationParams(sx1280_custom *radio, uint8_t modParam1, uint8_t modParam2,
        uint8_t modParam3) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	4608      	mov	r0, r1
 8001e2e:	4611      	mov	r1, r2
 8001e30:	461a      	mov	r2, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	70fb      	strb	r3, [r7, #3]
 8001e36:	460b      	mov	r3, r1
 8001e38:	70bb      	strb	r3, [r7, #2]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	707b      	strb	r3, [r7, #1]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x8B, modParam1, modParam2, modParam3 };
 8001e3e:	238b      	movs	r3, #139	; 0x8b
 8001e40:	723b      	strb	r3, [r7, #8]
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	727b      	strb	r3, [r7, #9]
 8001e46:	78bb      	ldrb	r3, [r7, #2]
 8001e48:	72bb      	strb	r3, [r7, #10]
 8001e4a:	787b      	ldrb	r3, [r7, #1]
 8001e4c:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8001e4e:	f107 020c 	add.w	r2, r7, #12
 8001e52:	f107 0108 	add.w	r1, r7, #8
 8001e56:	2304      	movs	r3, #4
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fe28 	bl	8001aae <sxSpiTransmitReceive>
}
 8001e5e:	bf00      	nop
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <SetPacketParamsLora>:

void SetPacketParamsLora(sx1280_custom *radio, uint8_t param1, uint8_t param2, uint8_t param3,
        uint8_t param4, uint8_t param5) {
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b084      	sub	sp, #16
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	4608      	mov	r0, r1
 8001e70:	4611      	mov	r1, r2
 8001e72:	461a      	mov	r2, r3
 8001e74:	4603      	mov	r3, r0
 8001e76:	70fb      	strb	r3, [r7, #3]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70bb      	strb	r3, [r7, #2]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[] = { 0x8C, param1, param2, param3, param4, param5 };
 8001e80:	238c      	movs	r3, #140	; 0x8c
 8001e82:	723b      	strb	r3, [r7, #8]
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	727b      	strb	r3, [r7, #9]
 8001e88:	78bb      	ldrb	r3, [r7, #2]
 8001e8a:	72bb      	strb	r3, [r7, #10]
 8001e8c:	787b      	ldrb	r3, [r7, #1]
 8001e8e:	72fb      	strb	r3, [r7, #11]
 8001e90:	7e3b      	ldrb	r3, [r7, #24]
 8001e92:	733b      	strb	r3, [r7, #12]
 8001e94:	7f3b      	ldrb	r3, [r7, #28]
 8001e96:	737b      	strb	r3, [r7, #13]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff fddb 	bl	8001a5c <sxSpiTransmit>
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <WriteBuffer>:

void WriteBuffer(sx1280_custom *radio, uint8_t offset, uint8_t *data, uint8_t size) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	60f8      	str	r0, [r7, #12]
 8001eb6:	607a      	str	r2, [r7, #4]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	460b      	mov	r3, r1
 8001ebc:	72fb      	strb	r3, [r7, #11]
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1A, offset };
 8001ec2:	231a      	movs	r3, #26
 8001ec4:	753b      	strb	r3, [r7, #20]
 8001ec6:	7afb      	ldrb	r3, [r7, #11]
 8001ec8:	757b      	strb	r3, [r7, #21]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	6858      	ldr	r0, [r3, #4]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	891b      	ldrh	r3, [r3, #8]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f006 fd25 	bl	8008924 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6818      	ldr	r0, [r3, #0]
 8001ede:	f107 0114 	add.w	r1, r7, #20
 8001ee2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	f009 fff4 	bl	800bed4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	7abb      	ldrb	r3, [r7, #10]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	f009 ffeb 	bl	800bed4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6858      	ldr	r0, [r3, #4]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	891b      	ldrh	r3, [r3, #8]
 8001f06:	2201      	movs	r2, #1
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f006 fd0b 	bl	8008924 <HAL_GPIO_WritePin>

}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <ReadBuffer>:

void ReadBuffer(sx1280_custom *radio, uint8_t offset, uint8_t size, uint8_t *data) {
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b086      	sub	sp, #24
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	72fb      	strb	r3, [r7, #11]
 8001f24:	4613      	mov	r3, r2
 8001f26:	72bb      	strb	r3, [r7, #10]
    uint8_t loraTxBuf[] = { 0x1B, offset, 0x00};
 8001f28:	231b      	movs	r3, #27
 8001f2a:	753b      	strb	r3, [r7, #20]
 8001f2c:	7afb      	ldrb	r3, [r7, #11]
 8001f2e:	757b      	strb	r3, [r7, #21]
 8001f30:	2300      	movs	r3, #0
 8001f32:	75bb      	strb	r3, [r7, #22]
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6858      	ldr	r0, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	891b      	ldrh	r3, [r3, #8]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f006 fcf0 	bl	8008924 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	f107 0114 	add.w	r1, r7, #20
 8001f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f50:	2203      	movs	r2, #3
 8001f52:	f009 ffbf 	bl	800bed4 <HAL_SPI_Transmit>
    HAL_SPI_Receive(radio->spiHandle, data, size, 1000);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	7abb      	ldrb	r3, [r7, #10]
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	f00a f8ea 	bl	800c13c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6858      	ldr	r0, [r3, #4]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	891b      	ldrh	r3, [r3, #8]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4619      	mov	r1, r3
 8001f74:	f006 fcd6 	bl	8008924 <HAL_GPIO_WritePin>
}
 8001f78:	bf00      	nop
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <SetDioIrqParams>:

void SetDioIrqParams(sx1280_custom *radio, uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask,
        uint16_t dio3Mask) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b088      	sub	sp, #32
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	4608      	mov	r0, r1
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4603      	mov	r3, r0
 8001f90:	817b      	strh	r3, [r7, #10]
 8001f92:	460b      	mov	r3, r1
 8001f94:	813b      	strh	r3, [r7, #8]
 8001f96:	4613      	mov	r3, r2
 8001f98:	80fb      	strh	r3, [r7, #6]
    uint8_t loraTxBuf[9];
    loraTxBuf[0] = 0x8D;
 8001f9a:	238d      	movs	r3, #141	; 0x8d
 8001f9c:	753b      	strb	r3, [r7, #20]
    loraTxBuf[1] = (uint8_t) ((irqMask >> 8) & 0x00FF);
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	757b      	strb	r3, [r7, #21]
    loraTxBuf[2] = (uint8_t) (irqMask & 0x00FF);
 8001fa8:	897b      	ldrh	r3, [r7, #10]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	75bb      	strb	r3, [r7, #22]
    loraTxBuf[3] = (uint8_t) ((dio1Mask >> 8) & 0x00FF);
 8001fae:	893b      	ldrh	r3, [r7, #8]
 8001fb0:	0a1b      	lsrs	r3, r3, #8
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	75fb      	strb	r3, [r7, #23]
    loraTxBuf[4] = (uint8_t) (dio1Mask & 0x00FF);
 8001fb8:	893b      	ldrh	r3, [r7, #8]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	763b      	strb	r3, [r7, #24]
    loraTxBuf[5] = (uint8_t) ((dio2Mask >> 8) & 0x00FF);
 8001fbe:	88fb      	ldrh	r3, [r7, #6]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	767b      	strb	r3, [r7, #25]
    loraTxBuf[6] = (uint8_t) (dio2Mask & 0x00FF);
 8001fc8:	88fb      	ldrh	r3, [r7, #6]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	76bb      	strb	r3, [r7, #26]
    loraTxBuf[7] = (uint8_t) ((dio3Mask >> 8) & 0x00FF);
 8001fce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd0:	0a1b      	lsrs	r3, r3, #8
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	76fb      	strb	r3, [r7, #27]
    loraTxBuf[8] = (uint8_t) (dio3Mask & 0x00FF);
 8001fd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	773b      	strb	r3, [r7, #28]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 8001fde:	f107 0314 	add.w	r3, r7, #20
 8001fe2:	2209      	movs	r2, #9
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fd38 	bl	8001a5c <sxSpiTransmit>
}
 8001fec:	bf00      	nop
 8001fee:	3720      	adds	r7, #32
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <ClrIrqStatus>:

void ClrIrqStatus(sx1280_custom *radio, uint16_t irqMask) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
    uint8_t buf[3];
    buf[0] = 0X97;
 8002000:	2397      	movs	r3, #151	; 0x97
 8002002:	733b      	strb	r3, [r7, #12]
    buf[1] = (uint8_t) (((uint16_t) irqMask >> 8) & 0x00FF);
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	b29b      	uxth	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) ((uint16_t) irqMask & 0x00FF);
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	b2db      	uxtb	r3, r3
 8002012:	73bb      	strb	r3, [r7, #14]
    sxSpiTransmit(radio, buf, sizeof(buf));
 8002014:	f107 030c 	add.w	r3, r7, #12
 8002018:	2203      	movs	r2, #3
 800201a:	4619      	mov	r1, r3
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fd1d 	bl	8001a5c <sxSpiTransmit>
}
 8002022:	bf00      	nop
 8002024:	3710      	adds	r7, #16
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}

0800202a <GetIrqStatus>:

void GetIrqStatus(sx1280_custom *radio) {
 800202a:	b580      	push	{r7, lr}
 800202c:	b084      	sub	sp, #16
 800202e:	af00      	add	r7, sp, #0
 8002030:	6078      	str	r0, [r7, #4]

    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x15, 0x00, 0x00, 0x00 };
 8002032:	2315      	movs	r3, #21
 8002034:	723b      	strb	r3, [r7, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	727b      	strb	r3, [r7, #9]
 800203a:	2300      	movs	r3, #0
 800203c:	72bb      	strb	r3, [r7, #10]
 800203e:	2300      	movs	r3, #0
 8002040:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002042:	f107 020c 	add.w	r2, r7, #12
 8002046:	f107 0108 	add.w	r1, r7, #8
 800204a:	2304      	movs	r3, #4
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fd2e 	bl	8001aae <sxSpiTransmitReceive>

    radio->IrqStatus = (uint16_t) (loraRxBuf[2] << 8 | loraRxBuf[3]);
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	b21a      	sxth	r2, r3
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b21b      	sxth	r3, r3
 800205c:	4313      	orrs	r3, r2
 800205e:	b21b      	sxth	r3, r3
 8002060:	b29a      	uxth	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	84da      	strh	r2, [r3, #38]	; 0x26

    if (radio->IrqStatus & (1 << 6)) {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800206a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <GetIrqStatus+0x52>
        radio->crcError = 1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    else {
        radio->crcError = 0;
    }
}
 800207a:	e003      	b.n	8002084 <GetIrqStatus+0x5a>
        radio->crcError = 0;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <SetTx>:

void SetTx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	70fb      	strb	r3, [r7, #3]
 8002098:	4613      	mov	r3, r2
 800209a:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X83;
 800209c:	2383      	movs	r3, #131	; 0x83
 800209e:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 80020a4:	883b      	ldrh	r3, [r7, #0]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 80020ae:	883b      	ldrh	r3, [r7, #0]
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 80020b4:	f107 030c 	add.w	r3, r7, #12
 80020b8:	2204      	movs	r2, #4
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fccd 	bl	8001a5c <sxSpiTransmit>
}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <SetRx>:

void SetRx(sx1280_custom *radio, uint8_t periodBase, uint16_t periodBaseCount) {
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	460b      	mov	r3, r1
 80020d4:	70fb      	strb	r3, [r7, #3]
 80020d6:	4613      	mov	r3, r2
 80020d8:	803b      	strh	r3, [r7, #0]
    uint8_t buf[4];
    buf[0] = 0X82;
 80020da:	2382      	movs	r3, #130	; 0x82
 80020dc:	733b      	strb	r3, [r7, #12]
    buf[1] = periodBase;
 80020de:	78fb      	ldrb	r3, [r7, #3]
 80020e0:	737b      	strb	r3, [r7, #13]
    buf[2] = (uint8_t) (((uint16_t) periodBaseCount >> 8) & 0x00FF);
 80020e2:	883b      	ldrh	r3, [r7, #0]
 80020e4:	0a1b      	lsrs	r3, r3, #8
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	73bb      	strb	r3, [r7, #14]
    buf[3] = (uint8_t) ((uint16_t) periodBaseCount & 0x00FF);
 80020ec:	883b      	ldrh	r3, [r7, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, buf, sizeof(buf));
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2204      	movs	r2, #4
 80020f8:	4619      	mov	r1, r3
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fcae 	bl	8001a5c <sxSpiTransmit>
}
 8002100:	bf00      	nop
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <GetPacketStatusLora>:

void GetPacketStatusLora(sx1280_custom *radio) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    uint8_t loraRxBuf[4];
    uint8_t loraTxBuf[] = { 0x1D, 0x00, 0x00, 0x00};
 8002110:	231d      	movs	r3, #29
 8002112:	723b      	strb	r3, [r7, #8]
 8002114:	2300      	movs	r3, #0
 8002116:	727b      	strb	r3, [r7, #9]
 8002118:	2300      	movs	r3, #0
 800211a:	72bb      	strb	r3, [r7, #10]
 800211c:	2300      	movs	r3, #0
 800211e:	72fb      	strb	r3, [r7, #11]

    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, sizeof(loraTxBuf));
 8002120:	f107 020c 	add.w	r2, r7, #12
 8002124:	f107 0108 	add.w	r1, r7, #8
 8002128:	2304      	movs	r3, #4
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff fcbf 	bl	8001aae <sxSpiTransmitReceive>

    radio->rssiSync = loraRxBuf[2];
 8002130:	7bba      	ldrb	r2, [r7, #14]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    radio->rawSnr = loraRxBuf[3];
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	b25a      	sxtb	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    radio->rssi = -((float) radio->rssiSync)/2;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8002148:	ee07 3a90 	vmov	s15, r3
 800214c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002150:	eeb1 7a67 	vneg.f32	s14, s15
 8002154:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002158:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    radio->snr = ((float) radio->rawSnr)/4;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8002168:	ee07 3a90 	vmov	s15, r3
 800216c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002170:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002174:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <ReadRegisterByte>:

void GetRxBufferStatus(sx1280_custom *radio) {

}

uint8_t ReadRegisterByte(sx1280_custom *radio, uint16_t address) {
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	807b      	strh	r3, [r7, #2]
    uint8_t loraTxBuf[5];
    uint8_t loraRxBuf[5];
    loraTxBuf[0] = 0x19;
 8002192:	2319      	movs	r3, #25
 8002194:	743b      	strb	r3, [r7, #16]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	0a1b      	lsrs	r3, r3, #8
 800219a:	b29b      	uxth	r3, r3
 800219c:	b2db      	uxtb	r3, r3
 800219e:	747b      	strb	r3, [r7, #17]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	74bb      	strb	r3, [r7, #18]
    loraTxBuf[3] = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	74fb      	strb	r3, [r7, #19]
    loraTxBuf[4] = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	753b      	strb	r3, [r7, #20]
    sxSpiTransmitReceive(radio, loraTxBuf, loraRxBuf, 5);
 80021ae:	f107 0208 	add.w	r2, r7, #8
 80021b2:	f107 0110 	add.w	r1, r7, #16
 80021b6:	2305      	movs	r3, #5
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f7ff fc78 	bl	8001aae <sxSpiTransmitReceive>
    return loraRxBuf[4];
 80021be:	7b3b      	ldrb	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <WriteRegisterByte>:



void WriteRegisterByte(sx1280_custom *radio, uint16_t address, uint8_t data) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	707b      	strb	r3, [r7, #1]
    uint8_t loraTxBuf[4];
    loraTxBuf[0] = 0x18;
 80021d8:	2318      	movs	r3, #24
 80021da:	733b      	strb	r3, [r7, #12]
    loraTxBuf[1] = (uint8_t) (((uint16_t) address >> 8) & 0x00FF);
 80021dc:	887b      	ldrh	r3, [r7, #2]
 80021de:	0a1b      	lsrs	r3, r3, #8
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	737b      	strb	r3, [r7, #13]
    loraTxBuf[2] = (uint8_t) ((uint16_t) address & 0x00FF);
 80021e6:	887b      	ldrh	r3, [r7, #2]
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	73bb      	strb	r3, [r7, #14]
    loraTxBuf[3] = data;
 80021ec:	787b      	ldrb	r3, [r7, #1]
 80021ee:	73fb      	strb	r3, [r7, #15]
    sxSpiTransmit(radio, loraTxBuf, sizeof(loraTxBuf));
 80021f0:	f107 030c 	add.w	r3, r7, #12
 80021f4:	2204      	movs	r2, #4
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fc2f 	bl	8001a5c <sxSpiTransmit>
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <WriteRegisterBytes>:

void WriteRegisterBytes(sx1280_custom *radio, uint16_t address, uint8_t *data, uint8_t size) {
 8002206:	b580      	push	{r7, lr}
 8002208:	b086      	sub	sp, #24
 800220a:	af00      	add	r7, sp, #0
 800220c:	60f8      	str	r0, [r7, #12]
 800220e:	607a      	str	r2, [r7, #4]
 8002210:	461a      	mov	r2, r3
 8002212:	460b      	mov	r3, r1
 8002214:	817b      	strh	r3, [r7, #10]
 8002216:	4613      	mov	r3, r2
 8002218:	727b      	strb	r3, [r7, #9]

    uint8_t loraTxBuf[] = { 0x18, (uint8_t) (((uint16_t) address >> 8) & 0x00FF), (uint8_t) ((uint16_t) address & 0x00FF)};
 800221a:	2318      	movs	r3, #24
 800221c:	753b      	strb	r3, [r7, #20]
 800221e:	897b      	ldrh	r3, [r7, #10]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b29b      	uxth	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	757b      	strb	r3, [r7, #21]
 8002228:	897b      	ldrh	r3, [r7, #10]
 800222a:	b2db      	uxtb	r3, r3
 800222c:	75bb      	strb	r3, [r7, #22]

    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_RESET);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6858      	ldr	r0, [r3, #4]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	891b      	ldrh	r3, [r3, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	4619      	mov	r1, r3
 800223a:	f006 fb73 	bl	8008924 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(radio->spiHandle, loraTxBuf, sizeof(loraTxBuf), 1000);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	f107 0114 	add.w	r1, r7, #20
 8002246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224a:	2203      	movs	r2, #3
 800224c:	f009 fe42 	bl	800bed4 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(radio->spiHandle, data, size, 1000);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6818      	ldr	r0, [r3, #0]
 8002254:	7a7b      	ldrb	r3, [r7, #9]
 8002256:	b29a      	uxth	r2, r3
 8002258:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225c:	6879      	ldr	r1, [r7, #4]
 800225e:	f009 fe39 	bl	800bed4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(radio->csPinBank, radio->csPin, GPIO_PIN_SET);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6858      	ldr	r0, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	891b      	ldrh	r3, [r3, #8]
 800226a:	2201      	movs	r2, #1
 800226c:	4619      	mov	r1, r3
 800226e:	f006 fb59 	bl	8008924 <HAL_GPIO_WritePin>
}
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	0000      	movs	r0, r0
 800227c:	0000      	movs	r0, r0
	...

08002280 <encode_TLM>:
#include "main.h"
#include "telemetry.h"
#include "math.h"


void encode_TLM(TLM_decoded *dec, TLM_encoded *enc) {
 8002280:	b590      	push	{r4, r7, lr}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b25b      	sxtb	r3, r3
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	b25a      	sxtb	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	785b      	ldrb	r3, [r3, #1]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	b25b      	sxtb	r3, r3
 800229e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80022a2:	b25b      	sxtb	r3, r3
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b25a      	sxtb	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	789b      	ldrb	r3, [r3, #2]
 80022ac:	019b      	lsls	r3, r3, #6
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	b25b      	sxtb	r3, r3
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b25a      	sxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	78db      	ldrb	r3, [r3, #3]
 80022be:	01db      	lsls	r3, r3, #7
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	4313      	orrs	r3, r2
 80022c4:	b25b      	sxtb	r3, r3
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	791b      	ldrb	r3, [r3, #4]
 80022d0:	b25b      	sxtb	r3, r3
 80022d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d6:	b25a      	sxtb	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	795b      	ldrb	r3, [r3, #5]
 80022dc:	019b      	lsls	r3, r3, #6
 80022de:	b25b      	sxtb	r3, r3
 80022e0:	4313      	orrs	r3, r2
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	0c1b      	lsrs	r3, r3, #16
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	0a1b      	lsrs	r3, r3, #8
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	b2da      	uxtb	r2, r3
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	711a      	strb	r2, [r3, #4]

    uint16_t vbat_10mV = (uint16_t) round(dec->vbat * 100); // 0.01 V/lsb
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002312:	ed9f 7ad9 	vldr	s14, [pc, #868]	; 8002678 <encode_TLM+0x3f8>
 8002316:	ee67 7a87 	vmul.f32	s15, s15, s14
 800231a:	ee17 0a90 	vmov	r0, s15
 800231e:	f7fe f933 	bl	8000588 <__aeabi_f2d>
 8002322:	4603      	mov	r3, r0
 8002324:	460c      	mov	r4, r1
 8002326:	ec44 3b10 	vmov	d0, r3, r4
 800232a:	f014 fefd 	bl	8017128 <round>
 800232e:	ec54 3b10 	vmov	r3, r4, d0
 8002332:	4618      	mov	r0, r3
 8002334:	4621      	mov	r1, r4
 8002336:	f7fe fc57 	bl	8000be8 <__aeabi_d2uiz>
 800233a:	4603      	mov	r3, r0
 800233c:	817b      	strh	r3, [r7, #10]

    enc->vbat_MSB = (uint8_t) ((vbat_10mV >> 2) & 0xFF);
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	b29b      	uxth	r3, r3
 8002344:	b2da      	uxtb	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	715a      	strb	r2, [r3, #5]
    enc->padding_vbat_LSB = (uint8_t) (vbat_10mV & 0b00000011);
 800234a:	897b      	ldrh	r3, [r7, #10]
 800234c:	b2db      	uxtb	r3, r3
 800234e:	f003 0303 	and.w	r3, r3, #3
 8002352:	b2da      	uxtb	r2, r3
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	719a      	strb	r2, [r3, #6]

    enc->orientation_quat[0] = (int8_t) round(dec->orientation_quat[0]*127);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	edd3 7a04 	vldr	s15, [r3, #16]
 800235e:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 800267c <encode_TLM+0x3fc>
 8002362:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002366:	ee17 0a90 	vmov	r0, s15
 800236a:	f7fe f90d 	bl	8000588 <__aeabi_f2d>
 800236e:	4603      	mov	r3, r0
 8002370:	460c      	mov	r4, r1
 8002372:	ec44 3b10 	vmov	d0, r3, r4
 8002376:	f014 fed7 	bl	8017128 <round>
 800237a:	ec54 3b10 	vmov	r3, r4, d0
 800237e:	4618      	mov	r0, r3
 8002380:	4621      	mov	r1, r4
 8002382:	f7fe fc09 	bl	8000b98 <__aeabi_d2iz>
 8002386:	4603      	mov	r3, r0
 8002388:	b25a      	sxtb	r2, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	71da      	strb	r2, [r3, #7]
    enc->orientation_quat[1] = (int8_t) round(dec->orientation_quat[1]*127);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	edd3 7a05 	vldr	s15, [r3, #20]
 8002394:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800267c <encode_TLM+0x3fc>
 8002398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800239c:	ee17 0a90 	vmov	r0, s15
 80023a0:	f7fe f8f2 	bl	8000588 <__aeabi_f2d>
 80023a4:	4603      	mov	r3, r0
 80023a6:	460c      	mov	r4, r1
 80023a8:	ec44 3b10 	vmov	d0, r3, r4
 80023ac:	f014 febc 	bl	8017128 <round>
 80023b0:	ec54 3b10 	vmov	r3, r4, d0
 80023b4:	4618      	mov	r0, r3
 80023b6:	4621      	mov	r1, r4
 80023b8:	f7fe fbee 	bl	8000b98 <__aeabi_d2iz>
 80023bc:	4603      	mov	r3, r0
 80023be:	b25a      	sxtb	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	721a      	strb	r2, [r3, #8]
    enc->orientation_quat[2] = (int8_t) round(dec->orientation_quat[2]*127);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80023ca:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800267c <encode_TLM+0x3fc>
 80023ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023d2:	ee17 0a90 	vmov	r0, s15
 80023d6:	f7fe f8d7 	bl	8000588 <__aeabi_f2d>
 80023da:	4603      	mov	r3, r0
 80023dc:	460c      	mov	r4, r1
 80023de:	ec44 3b10 	vmov	d0, r3, r4
 80023e2:	f014 fea1 	bl	8017128 <round>
 80023e6:	ec54 3b10 	vmov	r3, r4, d0
 80023ea:	4618      	mov	r0, r3
 80023ec:	4621      	mov	r1, r4
 80023ee:	f7fe fbd3 	bl	8000b98 <__aeabi_d2iz>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b25a      	sxtb	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	725a      	strb	r2, [r3, #9]
    enc->orientation_quat[3] = (int8_t) round(dec->orientation_quat[3]*127);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edd3 7a07 	vldr	s15, [r3, #28]
 8002400:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800267c <encode_TLM+0x3fc>
 8002404:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002408:	ee17 0a90 	vmov	r0, s15
 800240c:	f7fe f8bc 	bl	8000588 <__aeabi_f2d>
 8002410:	4603      	mov	r3, r0
 8002412:	460c      	mov	r4, r1
 8002414:	ec44 3b10 	vmov	d0, r3, r4
 8002418:	f014 fe86 	bl	8017128 <round>
 800241c:	ec54 3b10 	vmov	r3, r4, d0
 8002420:	4618      	mov	r0, r3
 8002422:	4621      	mov	r1, r4
 8002424:	f7fe fbb8 	bl	8000b98 <__aeabi_d2iz>
 8002428:	4603      	mov	r3, r0
 800242a:	b25a      	sxtb	r2, r3
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	729a      	strb	r2, [r3, #10]

    for (int i = 0; i < 3; i++) {
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e01e      	b.n	8002474 <encode_TLM+0x1f4>
        enc->acc[i] = dec->acc[i];
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	3210      	adds	r2, #16
 800243c:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	3304      	adds	r3, #4
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	4413      	add	r3, r2
 800244a:	460a      	mov	r2, r1
 800244c:	f8a3 2003 	strh.w	r2, [r3, #3]
        enc->gyro[i] = dec->gyro[i];
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	3310      	adds	r3, #16
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3308      	adds	r3, #8
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	460a      	mov	r2, r1
 800246a:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 3; i++) {
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	3301      	adds	r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b02      	cmp	r3, #2
 8002478:	dddd      	ble.n	8002436 <encode_TLM+0x1b6>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002480:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8002680 <encode_TLM+0x400>
 8002484:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002488:	ee17 0a90 	vmov	r0, s15
 800248c:	f7fe f87c 	bl	8000588 <__aeabi_f2d>
 8002490:	4603      	mov	r3, r0
 8002492:	460c      	mov	r4, r1
 8002494:	ec44 3b10 	vmov	d0, r3, r4
 8002498:	f014 fe46 	bl	8017128 <round>
 800249c:	ec54 3b10 	vmov	r3, r4, d0
 80024a0:	4618      	mov	r0, r3
 80024a2:	4621      	mov	r1, r4
 80024a4:	f7fe fba0 	bl	8000be8 <__aeabi_d2uiz>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f8a3 2017 	strh.w	r2, [r3, #23]

    enc->temp = (uint8_t) round(dec->temp * 4);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80024b8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80024bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c0:	ee17 0a90 	vmov	r0, s15
 80024c4:	f7fe f860 	bl	8000588 <__aeabi_f2d>
 80024c8:	4603      	mov	r3, r0
 80024ca:	460c      	mov	r4, r1
 80024cc:	ec44 3b10 	vmov	d0, r3, r4
 80024d0:	f014 fe2a 	bl	8017128 <round>
 80024d4:	ec54 3b10 	vmov	r3, r4, d0
 80024d8:	4618      	mov	r0, r3
 80024da:	4621      	mov	r1, r4
 80024dc:	f7fe fb84 	bl	8000be8 <__aeabi_d2uiz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	765a      	strb	r2, [r3, #25]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80024ee:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8002684 <encode_TLM+0x404>
 80024f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024f6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80024fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024fe:	ee17 0a90 	vmov	r0, s15
 8002502:	f7fe f841 	bl	8000588 <__aeabi_f2d>
 8002506:	4603      	mov	r3, r0
 8002508:	460c      	mov	r4, r1
 800250a:	ec44 3b10 	vmov	d0, r3, r4
 800250e:	f014 fe0b 	bl	8017128 <round>
 8002512:	ec54 3b10 	vmov	r3, r4, d0
 8002516:	4618      	mov	r0, r3
 8002518:	4621      	mov	r1, r4
 800251a:	f7fe fb65 	bl	8000be8 <__aeabi_d2uiz>
 800251e:	4603      	mov	r3, r0
 8002520:	b29a      	uxth	r2, r3
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	835a      	strh	r2, [r3, #26]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800252c:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8002688 <encode_TLM+0x408>
 8002530:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002534:	ee17 0a90 	vmov	r0, s15
 8002538:	f7fe f826 	bl	8000588 <__aeabi_f2d>
 800253c:	4603      	mov	r3, r0
 800253e:	460c      	mov	r4, r1
 8002540:	ec44 3b10 	vmov	d0, r3, r4
 8002544:	f014 fdf0 	bl	8017128 <round>
 8002548:	ec51 0b10 	vmov	r0, r1, d0
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	f7fe fb00 	bl	8000b58 <__aeabi_dcmpgt>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d020      	beq.n	80025a0 <encode_TLM+0x320>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002564:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002688 <encode_TLM+0x408>
 8002568:	ee77 7a87 	vadd.f32	s15, s15, s14
 800256c:	ee17 0a90 	vmov	r0, s15
 8002570:	f7fe f80a 	bl	8000588 <__aeabi_f2d>
 8002574:	4603      	mov	r3, r0
 8002576:	460c      	mov	r4, r1
 8002578:	ec44 3b10 	vmov	d0, r3, r4
 800257c:	f014 fdd4 	bl	8017128 <round>
 8002580:	ec51 0b10 	vmov	r0, r1, d0
 8002584:	2301      	movs	r3, #1
 8002586:	461c      	mov	r4, r3
 8002588:	a339      	add	r3, pc, #228	; (adr r3, 8002670 <encode_TLM+0x3f0>)
 800258a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800258e:	f7fe fac5 	bl	8000b1c <__aeabi_dcmplt>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d101      	bne.n	800259c <encode_TLM+0x31c>
 8002598:	2300      	movs	r3, #0
 800259a:	461c      	mov	r4, r3
 800259c:	b2e3      	uxtb	r3, r4
 800259e:	e000      	b.n	80025a2 <encode_TLM+0x322>
 80025a0:	2301      	movs	r3, #1
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d037      	beq.n	8002616 <encode_TLM+0x396>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025ac:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002688 <encode_TLM+0x408>
 80025b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025b4:	ee17 0a90 	vmov	r0, s15
 80025b8:	f7fd ffe6 	bl	8000588 <__aeabi_f2d>
 80025bc:	4603      	mov	r3, r0
 80025be:	460c      	mov	r4, r1
 80025c0:	ec44 3b10 	vmov	d0, r3, r4
 80025c4:	f014 fdb0 	bl	8017128 <round>
 80025c8:	ec51 0b10 	vmov	r0, r1, d0
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	f7fe fac0 	bl	8000b58 <__aeabi_dcmpgt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d019      	beq.n	8002612 <encode_TLM+0x392>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80025e4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002688 <encode_TLM+0x408>
 80025e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025ec:	ee17 0a90 	vmov	r0, s15
 80025f0:	f7fd ffca 	bl	8000588 <__aeabi_f2d>
 80025f4:	4603      	mov	r3, r0
 80025f6:	460c      	mov	r4, r1
 80025f8:	ec44 3b10 	vmov	d0, r3, r4
 80025fc:	f014 fd94 	bl	8017128 <round>
 8002600:	ec54 3b10 	vmov	r3, r4, d0
 8002604:	4618      	mov	r0, r3
 8002606:	4621      	mov	r1, r4
 8002608:	f7fe faee 	bl	8000be8 <__aeabi_d2uiz>
 800260c:	4603      	mov	r3, r0
 800260e:	b2db      	uxtb	r3, r3
 8002610:	e002      	b.n	8002618 <encode_TLM+0x398>
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <encode_TLM+0x398>
 8002616:	23ff      	movs	r3, #255	; 0xff
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	7713      	strb	r3, [r2, #28]

    if (dec->packet_type == 1) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d11c      	bne.n	800265e <encode_TLM+0x3de>
        enc->debug_ranging = (uint16_t) round(dec->ranging * 4);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800262a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800262e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002632:	ee17 0a90 	vmov	r0, s15
 8002636:	f7fd ffa7 	bl	8000588 <__aeabi_f2d>
 800263a:	4603      	mov	r3, r0
 800263c:	460c      	mov	r4, r1
 800263e:	ec44 3b10 	vmov	d0, r3, r4
 8002642:	f014 fd71 	bl	8017128 <round>
 8002646:	ec54 3b10 	vmov	r3, r4, d0
 800264a:	4618      	mov	r0, r3
 800264c:	4621      	mov	r1, r4
 800264e:	f7fe facb 	bl	8000be8 <__aeabi_d2uiz>
 8002652:	4603      	mov	r3, r0
 8002654:	b29a      	uxth	r2, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	f8a3 201d 	strh.w	r2, [r3, #29]
    }
    else {
        enc->debug_ranging = dec->debug;
    }
}
 800265c:	e004      	b.n	8002668 <encode_TLM+0x3e8>
        enc->debug_ranging = dec->debug;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f8a3 201d 	strh.w	r2, [r3, #29]
}
 8002668:	bf00      	nop
 800266a:	3714      	adds	r7, #20
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	00000000 	.word	0x00000000
 8002674:	406fe000 	.word	0x406fe000
 8002678:	42c80000 	.word	0x42c80000
 800267c:	42fe0000 	.word	0x42fe0000
 8002680:	47435000 	.word	0x47435000
 8002684:	42400000 	.word	0x42400000
 8002688:	42a00000 	.word	0x42a00000
 800268c:	00000000 	.word	0x00000000

08002690 <encode_Blackbox>:

void encode_Blackbox(TLM_decoded *dec, blackbox_encoded *enc) {
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
    enc->packet_state_bits = (dec->packet_type & (1<<0)) | ((0b00011111 & dec->flight_state) << 1) | ((1 & dec->is_playing_music) << 6) | ((1&dec->is_data_logging) <<7);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	b25b      	sxtb	r3, r3
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	b25a      	sxtb	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	785b      	ldrb	r3, [r3, #1]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b25b      	sxtb	r3, r3
 80026ae:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80026b2:	b25b      	sxtb	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	789b      	ldrb	r3, [r3, #2]
 80026bc:	019b      	lsls	r3, r3, #6
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	b25b      	sxtb	r3, r3
 80026c6:	4313      	orrs	r3, r2
 80026c8:	b25a      	sxtb	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	78db      	ldrb	r3, [r3, #3]
 80026ce:	01db      	lsls	r3, r3, #7
 80026d0:	b25b      	sxtb	r3, r3
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	b2da      	uxtb	r2, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	701a      	strb	r2, [r3, #0]

    enc->pin_states_servo = (dec->pin_states & 0b00111111) | ((dec->servo_state & 0b00000011) << 6);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	b25b      	sxtb	r3, r3
 80026e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026e6:	b25a      	sxtb	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	795b      	ldrb	r3, [r3, #5]
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	b25b      	sxtb	r3, r3
 80026f0:	4313      	orrs	r3, r2
 80026f2:	b25b      	sxtb	r3, r3
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	705a      	strb	r2, [r3, #1]

    enc->systick[0] = 0xff & (dec->systick >> 16);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0c1b      	lsrs	r3, r3, #16
 8002700:	b2da      	uxtb	r2, r3
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	709a      	strb	r2, [r3, #2]
    enc->systick[1] = 0xff & (dec->systick >> 8);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	0a1b      	lsrs	r3, r3, #8
 800270c:	b2da      	uxtb	r2, r3
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	70da      	strb	r2, [r3, #3]
    enc->systick[2] = 0xff & dec->systick;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	b2da      	uxtb	r2, r3
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	711a      	strb	r2, [r3, #4]

    enc->vbat = (uint16_t) round(dec->vbat * 5000); // 0.0002 V/lsb
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002722:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8002a70 <encode_Blackbox+0x3e0>
 8002726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800272a:	ee17 0a90 	vmov	r0, s15
 800272e:	f7fd ff2b 	bl	8000588 <__aeabi_f2d>
 8002732:	4603      	mov	r3, r0
 8002734:	460c      	mov	r4, r1
 8002736:	ec44 3b10 	vmov	d0, r3, r4
 800273a:	f014 fcf5 	bl	8017128 <round>
 800273e:	ec54 3b10 	vmov	r3, r4, d0
 8002742:	4618      	mov	r0, r3
 8002744:	4621      	mov	r1, r4
 8002746:	f7fe fa4f 	bl	8000be8 <__aeabi_d2uiz>
 800274a:	4603      	mov	r3, r0
 800274c:	b29a      	uxth	r2, r3
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	f8a3 2005 	strh.w	r2, [r3, #5]

    enc->orientation_quat[0] = (int16_t) round(dec->orientation_quat[0]*32767);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edd3 7a04 	vldr	s15, [r3, #16]
 800275a:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8002a74 <encode_Blackbox+0x3e4>
 800275e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002762:	ee17 0a90 	vmov	r0, s15
 8002766:	f7fd ff0f 	bl	8000588 <__aeabi_f2d>
 800276a:	4603      	mov	r3, r0
 800276c:	460c      	mov	r4, r1
 800276e:	ec44 3b10 	vmov	d0, r3, r4
 8002772:	f014 fcd9 	bl	8017128 <round>
 8002776:	ec54 3b10 	vmov	r3, r4, d0
 800277a:	4618      	mov	r0, r3
 800277c:	4621      	mov	r1, r4
 800277e:	f7fe fa0b 	bl	8000b98 <__aeabi_d2iz>
 8002782:	4603      	mov	r3, r0
 8002784:	b21a      	sxth	r2, r3
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f8a3 2007 	strh.w	r2, [r3, #7]
    enc->orientation_quat[1] = (int16_t) round(dec->orientation_quat[1]*32767);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002792:	ed9f 7ab8 	vldr	s14, [pc, #736]	; 8002a74 <encode_Blackbox+0x3e4>
 8002796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279a:	ee17 0a90 	vmov	r0, s15
 800279e:	f7fd fef3 	bl	8000588 <__aeabi_f2d>
 80027a2:	4603      	mov	r3, r0
 80027a4:	460c      	mov	r4, r1
 80027a6:	ec44 3b10 	vmov	d0, r3, r4
 80027aa:	f014 fcbd 	bl	8017128 <round>
 80027ae:	ec54 3b10 	vmov	r3, r4, d0
 80027b2:	4618      	mov	r0, r3
 80027b4:	4621      	mov	r1, r4
 80027b6:	f7fe f9ef 	bl	8000b98 <__aeabi_d2iz>
 80027ba:	4603      	mov	r3, r0
 80027bc:	b21a      	sxth	r2, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	f8a3 2009 	strh.w	r2, [r3, #9]
    enc->orientation_quat[2] = (int16_t) round(dec->orientation_quat[2]*32767);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80027ca:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8002a74 <encode_Blackbox+0x3e4>
 80027ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d2:	ee17 0a90 	vmov	r0, s15
 80027d6:	f7fd fed7 	bl	8000588 <__aeabi_f2d>
 80027da:	4603      	mov	r3, r0
 80027dc:	460c      	mov	r4, r1
 80027de:	ec44 3b10 	vmov	d0, r3, r4
 80027e2:	f014 fca1 	bl	8017128 <round>
 80027e6:	ec54 3b10 	vmov	r3, r4, d0
 80027ea:	4618      	mov	r0, r3
 80027ec:	4621      	mov	r1, r4
 80027ee:	f7fe f9d3 	bl	8000b98 <__aeabi_d2iz>
 80027f2:	4603      	mov	r3, r0
 80027f4:	b21a      	sxth	r2, r3
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	f8a3 200b 	strh.w	r2, [r3, #11]
    enc->orientation_quat[3] = (int16_t) round(dec->orientation_quat[3]*32767);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002802:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8002a74 <encode_Blackbox+0x3e4>
 8002806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800280a:	ee17 0a90 	vmov	r0, s15
 800280e:	f7fd febb 	bl	8000588 <__aeabi_f2d>
 8002812:	4603      	mov	r3, r0
 8002814:	460c      	mov	r4, r1
 8002816:	ec44 3b10 	vmov	d0, r3, r4
 800281a:	f014 fc85 	bl	8017128 <round>
 800281e:	ec54 3b10 	vmov	r3, r4, d0
 8002822:	4618      	mov	r0, r3
 8002824:	4621      	mov	r1, r4
 8002826:	f7fe f9b7 	bl	8000b98 <__aeabi_d2iz>
 800282a:	4603      	mov	r3, r0
 800282c:	b21a      	sxth	r2, r3
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f8a3 200d 	strh.w	r2, [r3, #13]

    for (int i = 0; i < 3; i++) {
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	e01e      	b.n	8002878 <encode_Blackbox+0x1e8>
        enc->acc[i] = dec->acc[i];
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	3210      	adds	r2, #16
 8002840:	f933 1012 	ldrsh.w	r1, [r3, r2, lsl #1]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	3304      	adds	r3, #4
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	460a      	mov	r2, r1
 8002850:	f8a3 2007 	strh.w	r2, [r3, #7]
        enc->gyro[i] = dec->gyro[i];
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3310      	adds	r3, #16
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	4413      	add	r3, r2
 800285e:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3308      	adds	r3, #8
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	460a      	mov	r2, r1
 800286e:	f8a3 2005 	strh.w	r2, [r3, #5]
    for (int i = 0; i < 3; i++) {
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	3301      	adds	r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b02      	cmp	r3, #2
 800287c:	dddd      	ble.n	800283a <encode_Blackbox+0x1aa>
    }

    enc->baro = (uint16_t) round(dec->baro - 50000); // 50000 Pa as zero point. Max ISA height: 5.5 km, max pressure: 115536 Pa
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002884:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8002a78 <encode_Blackbox+0x3e8>
 8002888:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800288c:	ee17 0a90 	vmov	r0, s15
 8002890:	f7fd fe7a 	bl	8000588 <__aeabi_f2d>
 8002894:	4603      	mov	r3, r0
 8002896:	460c      	mov	r4, r1
 8002898:	ec44 3b10 	vmov	d0, r3, r4
 800289c:	f014 fc44 	bl	8017128 <round>
 80028a0:	ec54 3b10 	vmov	r3, r4, d0
 80028a4:	4618      	mov	r0, r3
 80028a6:	4621      	mov	r1, r4
 80028a8:	f7fe f99e 	bl	8000be8 <__aeabi_d2uiz>
 80028ac:	4603      	mov	r3, r0
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f8a3 201b 	strh.w	r2, [r3, #27]

    enc->temp = (uint8_t) round(dec->temp * 4);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80028bc:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80028c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c4:	ee17 0a90 	vmov	r0, s15
 80028c8:	f7fd fe5e 	bl	8000588 <__aeabi_f2d>
 80028cc:	4603      	mov	r3, r0
 80028ce:	460c      	mov	r4, r1
 80028d0:	ec44 3b10 	vmov	d0, r3, r4
 80028d4:	f014 fc28 	bl	8017128 <round>
 80028d8:	ec54 3b10 	vmov	r3, r4, d0
 80028dc:	4618      	mov	r0, r3
 80028de:	4621      	mov	r1, r4
 80028e0:	f7fe f982 	bl	8000be8 <__aeabi_d2uiz>
 80028e4:	4603      	mov	r3, r0
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	775a      	strb	r2, [r3, #29]

    enc->altitude = (uint16_t) round((dec->altitude+48) * 16); // 0.0625m/LSB, -48 m as reference and max 2000 m.
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80028f2:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002a7c <encode_Blackbox+0x3ec>
 80028f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028fa:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80028fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002902:	ee17 0a90 	vmov	r0, s15
 8002906:	f7fd fe3f 	bl	8000588 <__aeabi_f2d>
 800290a:	4603      	mov	r3, r0
 800290c:	460c      	mov	r4, r1
 800290e:	ec44 3b10 	vmov	d0, r3, r4
 8002912:	f014 fc09 	bl	8017128 <round>
 8002916:	ec54 3b10 	vmov	r3, r4, d0
 800291a:	4618      	mov	r0, r3
 800291c:	4621      	mov	r1, r4
 800291e:	f7fe f963 	bl	8000be8 <__aeabi_d2uiz>
 8002922:	4603      	mov	r3, r0
 8002924:	b29a      	uxth	r2, r3
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	83da      	strh	r2, [r3, #30]

    enc->vertical_velocity = (uint8_t) MIN(MAX(round(dec->vertical_velocity + 80),0),255); // 0-255 maps to -80-175 m/s.
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002930:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002a80 <encode_Blackbox+0x3f0>
 8002934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002938:	ee17 0a90 	vmov	r0, s15
 800293c:	f7fd fe24 	bl	8000588 <__aeabi_f2d>
 8002940:	4603      	mov	r3, r0
 8002942:	460c      	mov	r4, r1
 8002944:	ec44 3b10 	vmov	d0, r3, r4
 8002948:	f014 fbee 	bl	8017128 <round>
 800294c:	ec51 0b10 	vmov	r0, r1, d0
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	f7fe f8fe 	bl	8000b58 <__aeabi_dcmpgt>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <encode_Blackbox+0x314>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8002968:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002a80 <encode_Blackbox+0x3f0>
 800296c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002970:	ee17 0a90 	vmov	r0, s15
 8002974:	f7fd fe08 	bl	8000588 <__aeabi_f2d>
 8002978:	4603      	mov	r3, r0
 800297a:	460c      	mov	r4, r1
 800297c:	ec44 3b10 	vmov	d0, r3, r4
 8002980:	f014 fbd2 	bl	8017128 <round>
 8002984:	ec51 0b10 	vmov	r0, r1, d0
 8002988:	2301      	movs	r3, #1
 800298a:	461c      	mov	r4, r3
 800298c:	a336      	add	r3, pc, #216	; (adr r3, 8002a68 <encode_Blackbox+0x3d8>)
 800298e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002992:	f7fe f8c3 	bl	8000b1c <__aeabi_dcmplt>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <encode_Blackbox+0x310>
 800299c:	2300      	movs	r3, #0
 800299e:	461c      	mov	r4, r3
 80029a0:	b2e3      	uxtb	r3, r4
 80029a2:	e000      	b.n	80029a6 <encode_Blackbox+0x316>
 80029a4:	2301      	movs	r3, #1
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d037      	beq.n	8002a1a <encode_Blackbox+0x38a>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029b0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002a80 <encode_Blackbox+0x3f0>
 80029b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029b8:	ee17 0a90 	vmov	r0, s15
 80029bc:	f7fd fde4 	bl	8000588 <__aeabi_f2d>
 80029c0:	4603      	mov	r3, r0
 80029c2:	460c      	mov	r4, r1
 80029c4:	ec44 3b10 	vmov	d0, r3, r4
 80029c8:	f014 fbae 	bl	8017128 <round>
 80029cc:	ec51 0b10 	vmov	r0, r1, d0
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	f7fe f8be 	bl	8000b58 <__aeabi_dcmpgt>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d019      	beq.n	8002a16 <encode_Blackbox+0x386>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80029e8:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002a80 <encode_Blackbox+0x3f0>
 80029ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80029f0:	ee17 0a90 	vmov	r0, s15
 80029f4:	f7fd fdc8 	bl	8000588 <__aeabi_f2d>
 80029f8:	4603      	mov	r3, r0
 80029fa:	460c      	mov	r4, r1
 80029fc:	ec44 3b10 	vmov	d0, r3, r4
 8002a00:	f014 fb92 	bl	8017128 <round>
 8002a04:	ec54 3b10 	vmov	r3, r4, d0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	f7fe f8ec 	bl	8000be8 <__aeabi_d2uiz>
 8002a10:	4603      	mov	r3, r0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e002      	b.n	8002a1c <encode_Blackbox+0x38c>
 8002a16:	2300      	movs	r3, #0
 8002a18:	e000      	b.n	8002a1c <encode_Blackbox+0x38c>
 8002a1a:	23ff      	movs	r3, #255	; 0xff
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	f882 3020 	strb.w	r3, [r2, #32]

    enc->ranging = (uint16_t) round(dec->ranging * 4);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a28:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8002a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a30:	ee17 0a90 	vmov	r0, s15
 8002a34:	f7fd fda8 	bl	8000588 <__aeabi_f2d>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	ec44 3b10 	vmov	d0, r3, r4
 8002a40:	f014 fb72 	bl	8017128 <round>
 8002a44:	ec54 3b10 	vmov	r3, r4, d0
 8002a48:	4618      	mov	r0, r3
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	f7fe f8cc 	bl	8000be8 <__aeabi_d2uiz>
 8002a50:	4603      	mov	r3, r0
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	f8a3 2021 	strh.w	r2, [r3, #33]	; 0x21

}
 8002a5a:	bf00      	nop
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd90      	pop	{r4, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	f3af 8000 	nop.w
 8002a68:	00000000 	.word	0x00000000
 8002a6c:	406fe000 	.word	0x406fe000
 8002a70:	459c4000 	.word	0x459c4000
 8002a74:	46fffe00 	.word	0x46fffe00
 8002a78:	47435000 	.word	0x47435000
 8002a7c:	42400000 	.word	0x42400000
 8002a80:	42a00000 	.word	0x42a00000
 8002a84:	00000000 	.word	0x00000000

08002a88 <decode_TLM>:

void decode_TLM(TLM_encoded *enc, TLM_decoded *dec) {
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
    dec->packet_type = enc->packet_state_bits & 1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	701a      	strb	r2, [r3, #0]
    dec->flight_state = (enc->packet_state_bits >> 1) & 0b00011111;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	085b      	lsrs	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f003 031f 	and.w	r3, r3, #31
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	705a      	strb	r2, [r3, #1]
    dec->is_playing_music = (enc->packet_state_bits >> 6) & 1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	b2da      	uxtb	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	709a      	strb	r2, [r3, #2]
    dec->is_data_logging = (enc->packet_state_bits >> 7) & 1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	09db      	lsrs	r3, r3, #7
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	70da      	strb	r2, [r3, #3]

    dec->pin_states = (enc->pin_states_servo & 0b00111111);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	785b      	ldrb	r3, [r3, #1]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	b2da      	uxtb	r2, r3
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	711a      	strb	r2, [r3, #4]
    dec->servo_state = (enc->pin_states_servo >> 6) & 0b00000011;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	785b      	ldrb	r3, [r3, #1]
 8002ae2:	099b      	lsrs	r3, r3, #6
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	715a      	strb	r2, [r3, #5]

    dec->systick = (enc->systick[0] << 16) | (enc->systick[1] << 8) | (enc->systick[2]);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	789b      	ldrb	r3, [r3, #2]
 8002aee:	041a      	lsls	r2, r3, #16
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	78db      	ldrb	r3, [r3, #3]
 8002af4:	021b      	lsls	r3, r3, #8
 8002af6:	4313      	orrs	r3, r2
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	7912      	ldrb	r2, [r2, #4]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	461a      	mov	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	609a      	str	r2, [r3, #8]

    dec->vbat = ((((uint16_t) enc->vbat_MSB) << 2) | ((uint16_t) enc->padding_vbat_LSB & 0b00000011 ) )*0.01;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	795b      	ldrb	r3, [r3, #5]
 8002b08:	009a      	lsls	r2, r3, #2
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	799b      	ldrb	r3, [r3, #6]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	4313      	orrs	r3, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7fd fd25 	bl	8000564 <__aeabi_i2d>
 8002b1a:	a36c      	add	r3, pc, #432	; (adr r3, 8002ccc <decode_TLM+0x244>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f7fd fd8a 	bl	8000638 <__aeabi_dmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	f7fe f87c 	bl	8000c28 <__aeabi_d2f>
 8002b30:	4602      	mov	r2, r0
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	60da      	str	r2, [r3, #12]

    dec->orientation_quat[0] = ((float) enc->orientation_quat[0])/127;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002b3c:	ee07 3a90 	vmov	s15, r3
 8002b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8002cc0 <decode_TLM+0x238>
 8002b48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	edc3 7a04 	vstr	s15, [r3, #16]
    dec->orientation_quat[1] = ((float) enc->orientation_quat[1])/127;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002b58:	ee07 3a90 	vmov	s15, r3
 8002b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b60:	eddf 6a57 	vldr	s13, [pc, #348]	; 8002cc0 <decode_TLM+0x238>
 8002b64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	edc3 7a05 	vstr	s15, [r3, #20]
    dec->orientation_quat[2] = ((float) enc->orientation_quat[2])/127;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002b74:	ee07 3a90 	vmov	s15, r3
 8002b78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b7c:	eddf 6a50 	vldr	s13, [pc, #320]	; 8002cc0 <decode_TLM+0x238>
 8002b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	edc3 7a06 	vstr	s15, [r3, #24]
    dec->orientation_quat[3] = ((float) enc->orientation_quat[3])/127;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002b90:	ee07 3a90 	vmov	s15, r3
 8002b94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b98:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002cc0 <decode_TLM+0x238>
 8002b9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	edc3 7a07 	vstr	s15, [r3, #28]

    for (int i = 0; i < 3; i++) {
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	e01e      	b.n	8002bea <decode_TLM+0x162>
        dec->acc[i] = enc->acc[i];
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 8002bba:	b219      	sxth	r1, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	68fa      	ldr	r2, [r7, #12]
 8002bc0:	3210      	adds	r2, #16
 8002bc2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dec->gyro[i] = enc->gyro[i];
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	3308      	adds	r3, #8
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 8002bd4:	b219      	sxth	r1, r3
 8002bd6:	683a      	ldr	r2, [r7, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	3310      	adds	r3, #16
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	460a      	mov	r2, r1
 8002be2:	80da      	strh	r2, [r3, #6]
    for (int i = 0; i < 3; i++) {
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	3301      	adds	r3, #1
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	dddd      	ble.n	8002bac <decode_TLM+0x124>
    }

    dec->baro = (float) (enc->baro + 50000);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8002bfc:	3350      	adds	r3, #80	; 0x50
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    dec->temp = ((float) enc->temp)/4;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7e5b      	ldrb	r3, [r3, #25]
 8002c10:	ee07 3a90 	vmov	s15, r3
 8002c14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c18:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    dec->altitude = ((float) enc->altitude) * 0.0625 - 48;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	8b5b      	ldrh	r3, [r3, #26]
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	ee07 3a90 	vmov	s15, r3
 8002c30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c34:	ee17 0a90 	vmov	r0, s15
 8002c38:	f7fd fca6 	bl	8000588 <__aeabi_f2d>
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <decode_TLM+0x23c>)
 8002c42:	f7fd fcf9 	bl	8000638 <__aeabi_dmul>
 8002c46:	4603      	mov	r3, r0
 8002c48:	460c      	mov	r4, r1
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <decode_TLM+0x240>)
 8002c54:	f7fd fb38 	bl	80002c8 <__aeabi_dsub>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	460c      	mov	r4, r1
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	4621      	mov	r1, r4
 8002c60:	f7fd ffe2 	bl	8000c28 <__aeabi_d2f>
 8002c64:	4602      	mov	r2, r0
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	635a      	str	r2, [r3, #52]	; 0x34

    dec->vertical_velocity = (float) (enc->vertical_velocity - 80);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	7f1b      	ldrb	r3, [r3, #28]
 8002c6e:	3b50      	subs	r3, #80	; 0x50
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    if (dec->packet_type == 1) {
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d10f      	bne.n	8002ca6 <decode_TLM+0x21e>
        dec->ranging = ((float) enc->debug_ranging) * 0.25;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c96:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    }
    else {
        dec->debug = (uint16_t) enc->debug_ranging;
    }
}
 8002ca4:	e005      	b.n	8002cb2 <decode_TLM+0x22a>
        dec->debug = (uint16_t) enc->debug_ranging;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8b3 301d 	ldrh.w	r3, [r3, #29]
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd90      	pop	{r4, r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	42fe0000 	.word	0x42fe0000
 8002cc4:	3fb00000 	.word	0x3fb00000
 8002cc8:	40480000 	.word	0x40480000
 8002ccc:	47ae147b 	.word	0x47ae147b
 8002cd0:	3f847ae1 	.word	0x3f847ae1
 8002cd4:	00000000 	.word	0x00000000

08002cd8 <decode_Blackbox>:

void decode_Blackbox(blackbox_encoded *enc, TLM_decoded *dec) {
 8002cd8:	b590      	push	{r4, r7, lr}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
    dec->packet_type = enc->packet_state_bits & 1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	701a      	strb	r2, [r3, #0]
    dec->flight_state = (enc->packet_state_bits >> 1) & 0b00011111;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	085b      	lsrs	r3, r3, #1
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	705a      	strb	r2, [r3, #1]
    dec->is_playing_music = (enc->packet_state_bits >> 6) & 1;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	709a      	strb	r2, [r3, #2]
    dec->is_data_logging = (enc->packet_state_bits >> 7) & 1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	09db      	lsrs	r3, r3, #7
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	70da      	strb	r2, [r3, #3]

    dec->pin_states = (enc->pin_states_servo & 0b00111111);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	785b      	ldrb	r3, [r3, #1]
 8002d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d28:	b2da      	uxtb	r2, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	711a      	strb	r2, [r3, #4]
    dec->servo_state = (enc->pin_states_servo >> 6) & 0b00000011;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	099b      	lsrs	r3, r3, #6
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	715a      	strb	r2, [r3, #5]

    dec->systick = (enc->systick[0] << 16) | (enc->systick[1] << 8) | (enc->systick[2]);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	789b      	ldrb	r3, [r3, #2]
 8002d3e:	041a      	lsls	r2, r3, #16
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	78db      	ldrb	r3, [r3, #3]
 8002d44:	021b      	lsls	r3, r3, #8
 8002d46:	4313      	orrs	r3, r2
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	7912      	ldrb	r2, [r2, #4]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	461a      	mov	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	609a      	str	r2, [r3, #8]

    dec->vbat = (float) (enc->vbat)*0.0002;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	ee07 3a90 	vmov	s15, r3
 8002d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d64:	ee17 0a90 	vmov	r0, s15
 8002d68:	f7fd fc0e 	bl	8000588 <__aeabi_f2d>
 8002d6c:	a367      	add	r3, pc, #412	; (adr r3, 8002f0c <decode_Blackbox+0x234>)
 8002d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d72:	f7fd fc61 	bl	8000638 <__aeabi_dmul>
 8002d76:	4603      	mov	r3, r0
 8002d78:	460c      	mov	r4, r1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4621      	mov	r1, r4
 8002d7e:	f7fd ff53 	bl	8000c28 <__aeabi_d2f>
 8002d82:	4602      	mov	r2, r0
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	60da      	str	r2, [r3, #12]

    dec->orientation_quat[0] = ((float) enc->orientation_quat[0])/32767;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 8002d8e:	b21b      	sxth	r3, r3
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d98:	eddf 6a59 	vldr	s13, [pc, #356]	; 8002f00 <decode_Blackbox+0x228>
 8002d9c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	edc3 7a04 	vstr	s15, [r3, #16]
    dec->orientation_quat[1] = ((float) enc->orientation_quat[1])/32767;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f9b3 3009 	ldrsh.w	r3, [r3, #9]
 8002dac:	b21b      	sxth	r3, r3
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002db6:	eddf 6a52 	vldr	s13, [pc, #328]	; 8002f00 <decode_Blackbox+0x228>
 8002dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	edc3 7a05 	vstr	s15, [r3, #20]
    dec->orientation_quat[2] = ((float) enc->orientation_quat[2])/32767;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f9b3 300b 	ldrsh.w	r3, [r3, #11]
 8002dca:	b21b      	sxth	r3, r3
 8002dcc:	ee07 3a90 	vmov	s15, r3
 8002dd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dd4:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8002f00 <decode_Blackbox+0x228>
 8002dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	edc3 7a06 	vstr	s15, [r3, #24]
    dec->orientation_quat[3] = ((float) enc->orientation_quat[3])/32767;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 8002de8:	b21b      	sxth	r3, r3
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002df2:	eddf 6a43 	vldr	s13, [pc, #268]	; 8002f00 <decode_Blackbox+0x228>
 8002df6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	edc3 7a07 	vstr	s15, [r3, #28]

    for (int i = 0; i < 3; i++) {
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	e01e      	b.n	8002e44 <decode_Blackbox+0x16c>
        dec->acc[i] = enc->acc[i];
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	f9b3 3007 	ldrsh.w	r3, [r3, #7]
 8002e14:	b219      	sxth	r1, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	3210      	adds	r2, #16
 8002e1c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
        dec->gyro[i] = enc->gyro[i];
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	3308      	adds	r3, #8
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	4413      	add	r3, r2
 8002e2a:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
 8002e2e:	b219      	sxth	r1, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	3310      	adds	r3, #16
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	4413      	add	r3, r2
 8002e3a:	460a      	mov	r2, r1
 8002e3c:	80da      	strh	r2, [r3, #6]
    for (int i = 0; i < 3; i++) {
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	dddd      	ble.n	8002e06 <decode_Blackbox+0x12e>
    }

    dec->baro = (float) (enc->baro + 50000);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f503 4343 	add.w	r3, r3, #49920	; 0xc300
 8002e56:	3350      	adds	r3, #80	; 0x50
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    dec->temp = ((float) enc->temp)/4;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	7f5b      	ldrb	r3, [r3, #29]
 8002e6a:	ee07 3a90 	vmov	s15, r3
 8002e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e72:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8002e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

    dec->altitude = ((float) enc->altitude) * 0.0625 - 48;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8bdb      	ldrh	r3, [r3, #30]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8e:	ee17 0a90 	vmov	r0, s15
 8002e92:	f7fd fb79 	bl	8000588 <__aeabi_f2d>
 8002e96:	f04f 0200 	mov.w	r2, #0
 8002e9a:	4b1a      	ldr	r3, [pc, #104]	; (8002f04 <decode_Blackbox+0x22c>)
 8002e9c:	f7fd fbcc 	bl	8000638 <__aeabi_dmul>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	460c      	mov	r4, r1
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	4621      	mov	r1, r4
 8002ea8:	f04f 0200 	mov.w	r2, #0
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <decode_Blackbox+0x230>)
 8002eae:	f7fd fa0b 	bl	80002c8 <__aeabi_dsub>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	460c      	mov	r4, r1
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	4621      	mov	r1, r4
 8002eba:	f7fd feb5 	bl	8000c28 <__aeabi_d2f>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	635a      	str	r2, [r3, #52]	; 0x34

    dec->vertical_velocity = (float) (enc->vertical_velocity - 80);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002eca:	3b50      	subs	r3, #80	; 0x50
 8002ecc:	ee07 3a90 	vmov	s15, r3
 8002ed0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

    dec->ranging = ((float) enc->ranging) * 0.25;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f8b3 3021 	ldrh.w	r3, [r3, #33]	; 0x21
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eea:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002eee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

}
 8002ef8:	bf00      	nop
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd90      	pop	{r4, r7, pc}
 8002f00:	46fffe00 	.word	0x46fffe00
 8002f04:	3fb00000 	.word	0x3fb00000
 8002f08:	40480000 	.word	0x40480000
 8002f0c:	eb1c432d 	.word	0xeb1c432d
 8002f10:	3f2a36e2 	.word	0x3f2a36e2

08002f14 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay)     HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t  Data)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af02      	add	r7, sp, #8
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	71fb      	strb	r3, [r7, #7]
    uint8_t ret;
    HAL_SPI_TransmitReceive(&_W25QXX_SPI,&Data,&ret,1,100);
 8002f1e:	f107 020f 	add.w	r2, r7, #15
 8002f22:	1df9      	adds	r1, r7, #7
 8002f24:	2364      	movs	r3, #100	; 0x64
 8002f26:	9300      	str	r3, [sp, #0]
 8002f28:	2301      	movs	r3, #1
 8002f2a:	4804      	ldr	r0, [pc, #16]	; (8002f3c <W25qxx_Spi+0x28>)
 8002f2c:	f009 fa0f 	bl	800c34e <HAL_SPI_TransmitReceive>
    return ret;
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3710      	adds	r7, #16
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	20004bac 	.word	0x20004bac

08002f40 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
  uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	607b      	str	r3, [r7, #4]
 8002f52:	2300      	movs	r3, #0
 8002f54:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002f56:	2200      	movs	r2, #0
 8002f58:	2110      	movs	r1, #16
 8002f5a:	4813      	ldr	r0, [pc, #76]	; (8002fa8 <W25qxx_ReadID+0x68>)
 8002f5c:	f005 fce2 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x9F);
 8002f60:	209f      	movs	r0, #159	; 0x9f
 8002f62:	f7ff ffd7 	bl	8002f14 <W25qxx_Spi>
  Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f66:	20a5      	movs	r0, #165	; 0xa5
 8002f68:	f7ff ffd4 	bl	8002f14 <W25qxx_Spi>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	60bb      	str	r3, [r7, #8]
  Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f70:	20a5      	movs	r0, #165	; 0xa5
 8002f72:	f7ff ffcf 	bl	8002f14 <W25qxx_Spi>
 8002f76:	4603      	mov	r3, r0
 8002f78:	607b      	str	r3, [r7, #4]
  Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002f7a:	20a5      	movs	r0, #165	; 0xa5
 8002f7c:	f7ff ffca 	bl	8002f14 <W25qxx_Spi>
 8002f80:	4603      	mov	r3, r0
 8002f82:	603b      	str	r3, [r7, #0]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002f84:	2201      	movs	r2, #1
 8002f86:	2110      	movs	r1, #16
 8002f88:	4807      	ldr	r0, [pc, #28]	; (8002fa8 <W25qxx_ReadID+0x68>)
 8002f8a:	f005 fccb 	bl	8008924 <HAL_GPIO_WritePin>
  Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	041a      	lsls	r2, r3, #16
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	4313      	orrs	r3, r2
 8002f98:	683a      	ldr	r2, [r7, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  return Temp;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3710      	adds	r7, #16
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40020000 	.word	0x40020000

08002fac <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2110      	movs	r1, #16
 8002fb6:	4816      	ldr	r0, [pc, #88]	; (8003010 <W25qxx_ReadUniqID+0x64>)
 8002fb8:	f005 fcb4 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x4B);
 8002fbc:	204b      	movs	r0, #75	; 0x4b
 8002fbe:	f7ff ffa9 	bl	8002f14 <W25qxx_Spi>
    for(uint8_t i=0;i<4;i++)
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	71fb      	strb	r3, [r7, #7]
 8002fc6:	e005      	b.n	8002fd4 <W25qxx_ReadUniqID+0x28>
        W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fc8:	20a5      	movs	r0, #165	; 0xa5
 8002fca:	f7ff ffa3 	bl	8002f14 <W25qxx_Spi>
    for(uint8_t i=0;i<4;i++)
 8002fce:	79fb      	ldrb	r3, [r7, #7]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	71fb      	strb	r3, [r7, #7]
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	2b03      	cmp	r3, #3
 8002fd8:	d9f6      	bls.n	8002fc8 <W25qxx_ReadUniqID+0x1c>
    for(uint8_t i=0;i<8;i++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	71bb      	strb	r3, [r7, #6]
 8002fde:	e00b      	b.n	8002ff8 <W25qxx_ReadUniqID+0x4c>
        w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8002fe0:	79bc      	ldrb	r4, [r7, #6]
 8002fe2:	20a5      	movs	r0, #165	; 0xa5
 8002fe4:	f7ff ff96 	bl	8002f14 <W25qxx_Spi>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	461a      	mov	r2, r3
 8002fec:	4b09      	ldr	r3, [pc, #36]	; (8003014 <W25qxx_ReadUniqID+0x68>)
 8002fee:	4423      	add	r3, r4
 8002ff0:	705a      	strb	r2, [r3, #1]
    for(uint8_t i=0;i<8;i++)
 8002ff2:	79bb      	ldrb	r3, [r7, #6]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	71bb      	strb	r3, [r7, #6]
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	2b07      	cmp	r3, #7
 8002ffc:	d9f0      	bls.n	8002fe0 <W25qxx_ReadUniqID+0x34>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8002ffe:	2201      	movs	r2, #1
 8003000:	2110      	movs	r1, #16
 8003002:	4803      	ldr	r0, [pc, #12]	; (8003010 <W25qxx_ReadUniqID+0x64>)
 8003004:	f005 fc8e 	bl	8008924 <HAL_GPIO_WritePin>
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bd90      	pop	{r4, r7, pc}
 8003010:	40020000 	.word	0x40020000
 8003014:	200045f0 	.word	0x200045f0

08003018 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800301c:	2200      	movs	r2, #0
 800301e:	2110      	movs	r1, #16
 8003020:	4807      	ldr	r0, [pc, #28]	; (8003040 <W25qxx_WriteEnable+0x28>)
 8003022:	f005 fc7f 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x06);
 8003026:	2006      	movs	r0, #6
 8003028:	f7ff ff74 	bl	8002f14 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800302c:	2201      	movs	r2, #1
 800302e:	2110      	movs	r1, #16
 8003030:	4803      	ldr	r0, [pc, #12]	; (8003040 <W25qxx_WriteEnable+0x28>)
 8003032:	f005 fc77 	bl	8008924 <HAL_GPIO_WritePin>
    W25qxx_Delay(1);
 8003036:	2001      	movs	r0, #1
 8003038:	f00e fafa 	bl	8011630 <osDelay>
}
 800303c:	bf00      	nop
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40020000 	.word	0x40020000

08003044 <W25qxx_ReadStatusRegister>:
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
    W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t   SelectStatusRegister_1_2_3)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	71fb      	strb	r3, [r7, #7]
    uint8_t status=0;
 800304e:	2300      	movs	r3, #0
 8003050:	73fb      	strb	r3, [r7, #15]
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8003052:	2200      	movs	r2, #0
 8003054:	2110      	movs	r1, #16
 8003056:	481c      	ldr	r0, [pc, #112]	; (80030c8 <W25qxx_ReadStatusRegister+0x84>)
 8003058:	f005 fc64 	bl	8008924 <HAL_GPIO_WritePin>
    if(SelectStatusRegister_1_2_3==1)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10c      	bne.n	800307c <W25qxx_ReadStatusRegister+0x38>
    {
        W25qxx_Spi(0x05);
 8003062:	2005      	movs	r0, #5
 8003064:	f7ff ff56 	bl	8002f14 <W25qxx_Spi>
        status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003068:	20a5      	movs	r0, #165	; 0xa5
 800306a:	f7ff ff53 	bl	8002f14 <W25qxx_Spi>
 800306e:	4603      	mov	r3, r0
 8003070:	73fb      	strb	r3, [r7, #15]
        w25qxx.StatusRegister1 = status;
 8003072:	4a16      	ldr	r2, [pc, #88]	; (80030cc <W25qxx_ReadStatusRegister+0x88>)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 800307a:	e01b      	b.n	80030b4 <W25qxx_ReadStatusRegister+0x70>
    }
    else if(SelectStatusRegister_1_2_3==2)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b02      	cmp	r3, #2
 8003080:	d10c      	bne.n	800309c <W25qxx_ReadStatusRegister+0x58>
    {
        W25qxx_Spi(0x35);
 8003082:	2035      	movs	r0, #53	; 0x35
 8003084:	f7ff ff46 	bl	8002f14 <W25qxx_Spi>
        status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003088:	20a5      	movs	r0, #165	; 0xa5
 800308a:	f7ff ff43 	bl	8002f14 <W25qxx_Spi>
 800308e:	4603      	mov	r3, r0
 8003090:	73fb      	strb	r3, [r7, #15]
        w25qxx.StatusRegister2 = status;
 8003092:	4a0e      	ldr	r2, [pc, #56]	; (80030cc <W25qxx_ReadStatusRegister+0x88>)
 8003094:	7bfb      	ldrb	r3, [r7, #15]
 8003096:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 800309a:	e00b      	b.n	80030b4 <W25qxx_ReadStatusRegister+0x70>
    }
    else
    {
        W25qxx_Spi(0x15);
 800309c:	2015      	movs	r0, #21
 800309e:	f7ff ff39 	bl	8002f14 <W25qxx_Spi>
        status=W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030a2:	20a5      	movs	r0, #165	; 0xa5
 80030a4:	f7ff ff36 	bl	8002f14 <W25qxx_Spi>
 80030a8:	4603      	mov	r3, r0
 80030aa:	73fb      	strb	r3, [r7, #15]
        w25qxx.StatusRegister3 = status;
 80030ac:	4a07      	ldr	r2, [pc, #28]	; (80030cc <W25qxx_ReadStatusRegister+0x88>)
 80030ae:	7bfb      	ldrb	r3, [r7, #15]
 80030b0:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
    }
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80030b4:	2201      	movs	r2, #1
 80030b6:	2110      	movs	r1, #16
 80030b8:	4803      	ldr	r0, [pc, #12]	; (80030c8 <W25qxx_ReadStatusRegister+0x84>)
 80030ba:	f005 fc33 	bl	8008924 <HAL_GPIO_WritePin>
    return status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40020000 	.word	0x40020000
 80030cc:	200045f0 	.word	0x200045f0

080030d0 <W25qxx_WaitForWriteEnd>:
    W25qxx_Spi(Data);
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
    W25qxx_Delay(1);
 80030d4:	2001      	movs	r0, #1
 80030d6:	f00e faab 	bl	8011630 <osDelay>
    HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 80030da:	2200      	movs	r2, #0
 80030dc:	2110      	movs	r1, #16
 80030de:	480f      	ldr	r0, [pc, #60]	; (800311c <W25qxx_WaitForWriteEnd+0x4c>)
 80030e0:	f005 fc20 	bl	8008924 <HAL_GPIO_WritePin>
    W25qxx_Spi(0x05);
 80030e4:	2005      	movs	r0, #5
 80030e6:	f7ff ff15 	bl	8002f14 <W25qxx_Spi>
  do
  {
    w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80030ea:	20a5      	movs	r0, #165	; 0xa5
 80030ec:	f7ff ff12 	bl	8002f14 <W25qxx_Spi>
 80030f0:	4603      	mov	r3, r0
 80030f2:	461a      	mov	r2, r3
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <W25qxx_WaitForWriteEnd+0x50>)
 80030f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        W25qxx_Delay(1);
 80030fa:	2001      	movs	r0, #1
 80030fc:	f00e fa98 	bl	8011630 <osDelay>
  }
  while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <W25qxx_WaitForWriteEnd+0x50>)
 8003102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003106:	f003 0301 	and.w	r3, r3, #1
 800310a:	2b00      	cmp	r3, #0
 800310c:	d1ed      	bne.n	80030ea <W25qxx_WaitForWriteEnd+0x1a>
 HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800310e:	2201      	movs	r2, #1
 8003110:	2110      	movs	r1, #16
 8003112:	4802      	ldr	r0, [pc, #8]	; (800311c <W25qxx_WaitForWriteEnd+0x4c>)
 8003114:	f005 fc06 	bl	8008924 <HAL_GPIO_WritePin>
}
 8003118:	bf00      	nop
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40020000 	.word	0x40020000
 8003120:	200045f0 	.word	0x200045f0

08003124 <W25qxx_Init>:
//###################################################################################################################
bool    W25qxx_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <W25qxx_Init+0x19c>)
 800312c:	2201      	movs	r2, #1
 800312e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  while(HAL_GetTick()<100)
 8003132:	e002      	b.n	800313a <W25qxx_Init+0x16>
    W25qxx_Delay(1);
 8003134:	2001      	movs	r0, #1
 8003136:	f00e fa7b 	bl	8011630 <osDelay>
  while(HAL_GetTick()<100)
 800313a:	f004 fa01 	bl	8007540 <HAL_GetTick>
 800313e:	4603      	mov	r3, r0
 8003140:	2b63      	cmp	r3, #99	; 0x63
 8003142:	d9f7      	bls.n	8003134 <W25qxx_Init+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8003144:	2201      	movs	r2, #1
 8003146:	2110      	movs	r1, #16
 8003148:	485e      	ldr	r0, [pc, #376]	; (80032c4 <W25qxx_Init+0x1a0>)
 800314a:	f005 fbeb 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_Delay(100);
 800314e:	2064      	movs	r0, #100	; 0x64
 8003150:	f00e fa6e 	bl	8011630 <osDelay>
  uint32_t  id;
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx Init Begin...\r\n");
  #endif
  id=W25qxx_ReadID();
 8003154:	f7ff fef4 	bl	8002f40 <W25qxx_ReadID>
 8003158:	6078      	str	r0, [r7, #4]

  #if (_W25QXX_DEBUG==1)
  printf("w25qxx ID:0x%X\r\n", id);
  #endif
  switch(id & 0x000000FF)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	3b11      	subs	r3, #17
 8003160:	2b0f      	cmp	r3, #15
 8003162:	d86c      	bhi.n	800323e <W25qxx_Init+0x11a>
 8003164:	a201      	add	r2, pc, #4	; (adr r2, 800316c <W25qxx_Init+0x48>)
 8003166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316a:	bf00      	nop
 800316c:	08003231 	.word	0x08003231
 8003170:	08003223 	.word	0x08003223
 8003174:	08003215 	.word	0x08003215
 8003178:	08003207 	.word	0x08003207
 800317c:	080031f9 	.word	0x080031f9
 8003180:	080031eb 	.word	0x080031eb
 8003184:	080031dd 	.word	0x080031dd
 8003188:	080031cd 	.word	0x080031cd
 800318c:	080031bd 	.word	0x080031bd
 8003190:	0800323f 	.word	0x0800323f
 8003194:	0800323f 	.word	0x0800323f
 8003198:	0800323f 	.word	0x0800323f
 800319c:	0800323f 	.word	0x0800323f
 80031a0:	0800323f 	.word	0x0800323f
 80031a4:	0800323f 	.word	0x0800323f
 80031a8:	080031ad 	.word	0x080031ad
  {
        case 0x20:  //  w25q512
            w25qxx.ID=W25Q512;
 80031ac:	4b44      	ldr	r3, [pc, #272]	; (80032c0 <W25qxx_Init+0x19c>)
 80031ae:	220a      	movs	r2, #10
 80031b0:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=1024;
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <W25qxx_Init+0x19c>)
 80031b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031b8:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q512\r\n");
            #endif
        break;
 80031ba:	e046      	b.n	800324a <W25qxx_Init+0x126>
        case 0x19:  //  w25q256
            w25qxx.ID=W25Q256;
 80031bc:	4b40      	ldr	r3, [pc, #256]	; (80032c0 <W25qxx_Init+0x19c>)
 80031be:	2209      	movs	r2, #9
 80031c0:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=512;
 80031c2:	4b3f      	ldr	r3, [pc, #252]	; (80032c0 <W25qxx_Init+0x19c>)
 80031c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c8:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q256\r\n");
            #endif
        break;
 80031ca:	e03e      	b.n	800324a <W25qxx_Init+0x126>
        case 0x18:  //  w25q128
            w25qxx.ID=W25Q128;
 80031cc:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <W25qxx_Init+0x19c>)
 80031ce:	2208      	movs	r2, #8
 80031d0:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=256;
 80031d2:	4b3b      	ldr	r3, [pc, #236]	; (80032c0 <W25qxx_Init+0x19c>)
 80031d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031d8:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q128\r\n");
            #endif
        break;
 80031da:	e036      	b.n	800324a <W25qxx_Init+0x126>
        case 0x17:  //  w25q64
            w25qxx.ID=W25Q64;
 80031dc:	4b38      	ldr	r3, [pc, #224]	; (80032c0 <W25qxx_Init+0x19c>)
 80031de:	2207      	movs	r2, #7
 80031e0:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=128;
 80031e2:	4b37      	ldr	r3, [pc, #220]	; (80032c0 <W25qxx_Init+0x19c>)
 80031e4:	2280      	movs	r2, #128	; 0x80
 80031e6:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q64\r\n");
            #endif
        break;
 80031e8:	e02f      	b.n	800324a <W25qxx_Init+0x126>
        case 0x16:  //  w25q32
            w25qxx.ID=W25Q32;
 80031ea:	4b35      	ldr	r3, [pc, #212]	; (80032c0 <W25qxx_Init+0x19c>)
 80031ec:	2206      	movs	r2, #6
 80031ee:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=64;
 80031f0:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <W25qxx_Init+0x19c>)
 80031f2:	2240      	movs	r2, #64	; 0x40
 80031f4:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q32\r\n");
            #endif
        break;
 80031f6:	e028      	b.n	800324a <W25qxx_Init+0x126>
        case 0x15:  //  w25q16
            w25qxx.ID=W25Q16;
 80031f8:	4b31      	ldr	r3, [pc, #196]	; (80032c0 <W25qxx_Init+0x19c>)
 80031fa:	2205      	movs	r2, #5
 80031fc:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=32;
 80031fe:	4b30      	ldr	r3, [pc, #192]	; (80032c0 <W25qxx_Init+0x19c>)
 8003200:	2220      	movs	r2, #32
 8003202:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q16\r\n");
            #endif
        break;
 8003204:	e021      	b.n	800324a <W25qxx_Init+0x126>
        case 0x14:  //  w25q80
            w25qxx.ID=W25Q80;
 8003206:	4b2e      	ldr	r3, [pc, #184]	; (80032c0 <W25qxx_Init+0x19c>)
 8003208:	2204      	movs	r2, #4
 800320a:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=16;
 800320c:	4b2c      	ldr	r3, [pc, #176]	; (80032c0 <W25qxx_Init+0x19c>)
 800320e:	2210      	movs	r2, #16
 8003210:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q80\r\n");
            #endif
        break;
 8003212:	e01a      	b.n	800324a <W25qxx_Init+0x126>
        case 0x13:  //  w25q40
            w25qxx.ID=W25Q40;
 8003214:	4b2a      	ldr	r3, [pc, #168]	; (80032c0 <W25qxx_Init+0x19c>)
 8003216:	2203      	movs	r2, #3
 8003218:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=8;
 800321a:	4b29      	ldr	r3, [pc, #164]	; (80032c0 <W25qxx_Init+0x19c>)
 800321c:	2208      	movs	r2, #8
 800321e:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q40\r\n");
            #endif
        break;
 8003220:	e013      	b.n	800324a <W25qxx_Init+0x126>
        case 0x12:  //  w25q20
            w25qxx.ID=W25Q20;
 8003222:	4b27      	ldr	r3, [pc, #156]	; (80032c0 <W25qxx_Init+0x19c>)
 8003224:	2202      	movs	r2, #2
 8003226:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=4;
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <W25qxx_Init+0x19c>)
 800322a:	2204      	movs	r2, #4
 800322c:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q20\r\n");
            #endif
        break;
 800322e:	e00c      	b.n	800324a <W25qxx_Init+0x126>
        case 0x11:  //  w25q10
            w25qxx.ID=W25Q10;
 8003230:	4b23      	ldr	r3, [pc, #140]	; (80032c0 <W25qxx_Init+0x19c>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=2;
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <W25qxx_Init+0x19c>)
 8003238:	2202      	movs	r2, #2
 800323a:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q10\r\n");
            #endif
        break;
 800323c:	e005      	b.n	800324a <W25qxx_Init+0x126>
        default:
                #if (_W25QXX_DEBUG==1)
                printf("w25qxx Unknown ID\r\n");
                #endif
            w25qxx.Lock=0;
 800323e:	4b20      	ldr	r3, [pc, #128]	; (80032c0 <W25qxx_Init+0x19c>)
 8003240:	2200      	movs	r2, #0
 8003242:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            return false;
 8003246:	2300      	movs	r3, #0
 8003248:	e036      	b.n	80032b8 <W25qxx_Init+0x194>

    }
    w25qxx.PageSize=256;
 800324a:	4b1d      	ldr	r3, [pc, #116]	; (80032c0 <W25qxx_Init+0x19c>)
 800324c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003250:	815a      	strh	r2, [r3, #10]
    w25qxx.SectorSize=0x1000;
 8003252:	4b1b      	ldr	r3, [pc, #108]	; (80032c0 <W25qxx_Init+0x19c>)
 8003254:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003258:	611a      	str	r2, [r3, #16]
    w25qxx.SectorCount=w25qxx.BlockCount*16;
 800325a:	4b19      	ldr	r3, [pc, #100]	; (80032c0 <W25qxx_Init+0x19c>)
 800325c:	69db      	ldr	r3, [r3, #28]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <W25qxx_Init+0x19c>)
 8003262:	6153      	str	r3, [r2, #20]
    w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8003264:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <W25qxx_Init+0x19c>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	4a15      	ldr	r2, [pc, #84]	; (80032c0 <W25qxx_Init+0x19c>)
 800326a:	6912      	ldr	r2, [r2, #16]
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <W25qxx_Init+0x19c>)
 8003272:	8952      	ldrh	r2, [r2, #10]
 8003274:	fbb3 f3f2 	udiv	r3, r3, r2
 8003278:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <W25qxx_Init+0x19c>)
 800327a:	60d3      	str	r3, [r2, #12]
    w25qxx.BlockSize=w25qxx.SectorSize*16;
 800327c:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <W25qxx_Init+0x19c>)
 800327e:	691b      	ldr	r3, [r3, #16]
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	4a0f      	ldr	r2, [pc, #60]	; (80032c0 <W25qxx_Init+0x19c>)
 8003284:	6193      	str	r3, [r2, #24]
    w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 8003286:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <W25qxx_Init+0x19c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	4a0d      	ldr	r2, [pc, #52]	; (80032c0 <W25qxx_Init+0x19c>)
 800328c:	6912      	ldr	r2, [r2, #16]
 800328e:	fb02 f303 	mul.w	r3, r2, r3
 8003292:	0a9b      	lsrs	r3, r3, #10
 8003294:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <W25qxx_Init+0x19c>)
 8003296:	6213      	str	r3, [r2, #32]
    W25qxx_ReadUniqID();
 8003298:	f7ff fe88 	bl	8002fac <W25qxx_ReadUniqID>
    W25qxx_ReadStatusRegister(1);
 800329c:	2001      	movs	r0, #1
 800329e:	f7ff fed1 	bl	8003044 <W25qxx_ReadStatusRegister>
    W25qxx_ReadStatusRegister(2);
 80032a2:	2002      	movs	r0, #2
 80032a4:	f7ff fece 	bl	8003044 <W25qxx_ReadStatusRegister>
    W25qxx_ReadStatusRegister(3);
 80032a8:	2003      	movs	r0, #3
 80032aa:	f7ff fecb 	bl	8003044 <W25qxx_ReadStatusRegister>
    printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
    printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
    printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
    printf("w25qxx Init Done\r\n");
    #endif
    w25qxx.Lock=0;
 80032ae:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <W25qxx_Init+0x19c>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    return true;
 80032b6:	2301      	movs	r3, #1
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3708      	adds	r7, #8
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	200045f0 	.word	0x200045f0
 80032c4:	40020000 	.word	0x40020000

080032c8 <W25qxx_Initnon>:

bool    W25qxx_Initnon(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
  w25qxx.Lock=1;
 80032ce:	4b65      	ldr	r3, [pc, #404]	; (8003464 <W25qxx_Initnon+0x19c>)
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  while(HAL_GetTick()<100)
 80032d6:	e002      	b.n	80032de <W25qxx_Initnon+0x16>
      HAL_Delay(1);
 80032d8:	2001      	movs	r0, #1
 80032da:	f004 f93d 	bl	8007558 <HAL_Delay>
  while(HAL_GetTick()<100)
 80032de:	f004 f92f 	bl	8007540 <HAL_GetTick>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b63      	cmp	r3, #99	; 0x63
 80032e6:	d9f7      	bls.n	80032d8 <W25qxx_Initnon+0x10>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 80032e8:	2201      	movs	r2, #1
 80032ea:	2110      	movs	r1, #16
 80032ec:	485e      	ldr	r0, [pc, #376]	; (8003468 <W25qxx_Initnon+0x1a0>)
 80032ee:	f005 fb19 	bl	8008924 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80032f2:	2064      	movs	r0, #100	; 0x64
 80032f4:	f004 f930 	bl	8007558 <HAL_Delay>
  uint32_t  id;
  #if (_W25QXX_DEBUG==1)
  printf("w25qxx Init Begin...\r\n");
  #endif
  id=W25qxx_ReadID();
 80032f8:	f7ff fe22 	bl	8002f40 <W25qxx_ReadID>
 80032fc:	6078      	str	r0, [r7, #4]

  #if (_W25QXX_DEBUG==1)
  printf("w25qxx ID:0x%X\r\n", id);
  #endif
  switch(id & 0x000000FF)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	b2db      	uxtb	r3, r3
 8003302:	3b11      	subs	r3, #17
 8003304:	2b0f      	cmp	r3, #15
 8003306:	d86c      	bhi.n	80033e2 <W25qxx_Initnon+0x11a>
 8003308:	a201      	add	r2, pc, #4	; (adr r2, 8003310 <W25qxx_Initnon+0x48>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	080033d5 	.word	0x080033d5
 8003314:	080033c7 	.word	0x080033c7
 8003318:	080033b9 	.word	0x080033b9
 800331c:	080033ab 	.word	0x080033ab
 8003320:	0800339d 	.word	0x0800339d
 8003324:	0800338f 	.word	0x0800338f
 8003328:	08003381 	.word	0x08003381
 800332c:	08003371 	.word	0x08003371
 8003330:	08003361 	.word	0x08003361
 8003334:	080033e3 	.word	0x080033e3
 8003338:	080033e3 	.word	0x080033e3
 800333c:	080033e3 	.word	0x080033e3
 8003340:	080033e3 	.word	0x080033e3
 8003344:	080033e3 	.word	0x080033e3
 8003348:	080033e3 	.word	0x080033e3
 800334c:	08003351 	.word	0x08003351
  {
        case 0x20:  //  w25q512
            w25qxx.ID=W25Q512;
 8003350:	4b44      	ldr	r3, [pc, #272]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003352:	220a      	movs	r2, #10
 8003354:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=1024;
 8003356:	4b43      	ldr	r3, [pc, #268]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003358:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800335c:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q512\r\n");
            #endif
        break;
 800335e:	e046      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x19:  //  w25q256
            w25qxx.ID=W25Q256;
 8003360:	4b40      	ldr	r3, [pc, #256]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003362:	2209      	movs	r2, #9
 8003364:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=512;
 8003366:	4b3f      	ldr	r3, [pc, #252]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003368:	f44f 7200 	mov.w	r2, #512	; 0x200
 800336c:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q256\r\n");
            #endif
        break;
 800336e:	e03e      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x18:  //  w25q128
            w25qxx.ID=W25Q128;
 8003370:	4b3c      	ldr	r3, [pc, #240]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003372:	2208      	movs	r2, #8
 8003374:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=256;
 8003376:	4b3b      	ldr	r3, [pc, #236]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003378:	f44f 7280 	mov.w	r2, #256	; 0x100
 800337c:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q128\r\n");
            #endif
        break;
 800337e:	e036      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x17:  //  w25q64
            w25qxx.ID=W25Q64;
 8003380:	4b38      	ldr	r3, [pc, #224]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003382:	2207      	movs	r2, #7
 8003384:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=128;
 8003386:	4b37      	ldr	r3, [pc, #220]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003388:	2280      	movs	r2, #128	; 0x80
 800338a:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q64\r\n");
            #endif
        break;
 800338c:	e02f      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x16:  //  w25q32
            w25qxx.ID=W25Q32;
 800338e:	4b35      	ldr	r3, [pc, #212]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003390:	2206      	movs	r2, #6
 8003392:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=64;
 8003394:	4b33      	ldr	r3, [pc, #204]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003396:	2240      	movs	r2, #64	; 0x40
 8003398:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q32\r\n");
            #endif
        break;
 800339a:	e028      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x15:  //  w25q16
            w25qxx.ID=W25Q16;
 800339c:	4b31      	ldr	r3, [pc, #196]	; (8003464 <W25qxx_Initnon+0x19c>)
 800339e:	2205      	movs	r2, #5
 80033a0:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=32;
 80033a2:	4b30      	ldr	r3, [pc, #192]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033a4:	2220      	movs	r2, #32
 80033a6:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q16\r\n");
            #endif
        break;
 80033a8:	e021      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x14:  //  w25q80
            w25qxx.ID=W25Q80;
 80033aa:	4b2e      	ldr	r3, [pc, #184]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033ac:	2204      	movs	r2, #4
 80033ae:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=16;
 80033b0:	4b2c      	ldr	r3, [pc, #176]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033b2:	2210      	movs	r2, #16
 80033b4:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q80\r\n");
            #endif
        break;
 80033b6:	e01a      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x13:  //  w25q40
            w25qxx.ID=W25Q40;
 80033b8:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033ba:	2203      	movs	r2, #3
 80033bc:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=8;
 80033be:	4b29      	ldr	r3, [pc, #164]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033c0:	2208      	movs	r2, #8
 80033c2:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q40\r\n");
            #endif
        break;
 80033c4:	e013      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x12:  //  w25q20
            w25qxx.ID=W25Q20;
 80033c6:	4b27      	ldr	r3, [pc, #156]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033c8:	2202      	movs	r2, #2
 80033ca:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=4;
 80033cc:	4b25      	ldr	r3, [pc, #148]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033ce:	2204      	movs	r2, #4
 80033d0:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q20\r\n");
            #endif
        break;
 80033d2:	e00c      	b.n	80033ee <W25qxx_Initnon+0x126>
        case 0x11:  //  w25q10
            w25qxx.ID=W25Q10;
 80033d4:	4b23      	ldr	r3, [pc, #140]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	701a      	strb	r2, [r3, #0]
            w25qxx.BlockCount=2;
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033dc:	2202      	movs	r2, #2
 80033de:	61da      	str	r2, [r3, #28]
            #if (_W25QXX_DEBUG==1)
            printf("w25qxx Chip: w25q10\r\n");
            #endif
        break;
 80033e0:	e005      	b.n	80033ee <W25qxx_Initnon+0x126>
        default:
                #if (_W25QXX_DEBUG==1)
                printf("w25qxx Unknown ID\r\n");
                #endif
            w25qxx.Lock=0;
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
            return false;
 80033ea:	2300      	movs	r3, #0
 80033ec:	e036      	b.n	800345c <W25qxx_Initnon+0x194>

    }
    w25qxx.PageSize=256;
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033f4:	815a      	strh	r2, [r3, #10]
    w25qxx.SectorSize=0x1000;
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <W25qxx_Initnon+0x19c>)
 80033f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033fc:	611a      	str	r2, [r3, #16]
    w25qxx.SectorCount=w25qxx.BlockCount*16;
 80033fe:	4b19      	ldr	r3, [pc, #100]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	4a17      	ldr	r2, [pc, #92]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003406:	6153      	str	r3, [r2, #20]
    w25qxx.PageCount=(w25qxx.SectorCount*w25qxx.SectorSize)/w25qxx.PageSize;
 8003408:	4b16      	ldr	r3, [pc, #88]	; (8003464 <W25qxx_Initnon+0x19c>)
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4a15      	ldr	r2, [pc, #84]	; (8003464 <W25qxx_Initnon+0x19c>)
 800340e:	6912      	ldr	r2, [r2, #16]
 8003410:	fb02 f303 	mul.w	r3, r2, r3
 8003414:	4a13      	ldr	r2, [pc, #76]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003416:	8952      	ldrh	r2, [r2, #10]
 8003418:	fbb3 f3f2 	udiv	r3, r3, r2
 800341c:	4a11      	ldr	r2, [pc, #68]	; (8003464 <W25qxx_Initnon+0x19c>)
 800341e:	60d3      	str	r3, [r2, #12]
    w25qxx.BlockSize=w25qxx.SectorSize*16;
 8003420:	4b10      	ldr	r3, [pc, #64]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	011b      	lsls	r3, r3, #4
 8003426:	4a0f      	ldr	r2, [pc, #60]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003428:	6193      	str	r3, [r2, #24]
    w25qxx.CapacityInKiloByte=(w25qxx.SectorCount*w25qxx.SectorSize)/1024;
 800342a:	4b0e      	ldr	r3, [pc, #56]	; (8003464 <W25qxx_Initnon+0x19c>)
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	4a0d      	ldr	r2, [pc, #52]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003430:	6912      	ldr	r2, [r2, #16]
 8003432:	fb02 f303 	mul.w	r3, r2, r3
 8003436:	0a9b      	lsrs	r3, r3, #10
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <W25qxx_Initnon+0x19c>)
 800343a:	6213      	str	r3, [r2, #32]
    W25qxx_ReadUniqID();
 800343c:	f7ff fdb6 	bl	8002fac <W25qxx_ReadUniqID>
    W25qxx_ReadStatusRegister(1);
 8003440:	2001      	movs	r0, #1
 8003442:	f7ff fdff 	bl	8003044 <W25qxx_ReadStatusRegister>
    W25qxx_ReadStatusRegister(2);
 8003446:	2002      	movs	r0, #2
 8003448:	f7ff fdfc 	bl	8003044 <W25qxx_ReadStatusRegister>
    W25qxx_ReadStatusRegister(3);
 800344c:	2003      	movs	r0, #3
 800344e:	f7ff fdf9 	bl	8003044 <W25qxx_ReadStatusRegister>
    printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
    printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
    printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
    printf("w25qxx Init Done\r\n");
    #endif
    w25qxx.Lock=0;
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <W25qxx_Initnon+0x19c>)
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    return true;
 800345a:	2301      	movs	r3, #1
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	200045f0 	.word	0x200045f0
 8003468:	40020000 	.word	0x40020000

0800346c <W25qxx_EraseChip>:
//###################################################################################################################
void    W25qxx_EraseChip(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
    while(w25qxx.Lock==1)
 8003470:	e002      	b.n	8003478 <W25qxx_EraseChip+0xc>
        W25qxx_Delay(1);
 8003472:	2001      	movs	r0, #1
 8003474:	f00e f8dc 	bl	8011630 <osDelay>
    while(w25qxx.Lock==1)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <W25qxx_EraseChip+0x54>)
 800347a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800347e:	2b01      	cmp	r3, #1
 8003480:	d0f7      	beq.n	8003472 <W25qxx_EraseChip+0x6>
    w25qxx.Lock=1;
 8003482:	4b0f      	ldr	r3, [pc, #60]	; (80034c0 <W25qxx_EraseChip+0x54>)
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    #if (_W25QXX_DEBUG==1)
    uint32_t    StartTime=HAL_GetTick();
    printf("w25qxx EraseChip Begin...\r\n");
    #endif
    W25qxx_WriteEnable();
 800348a:	f7ff fdc5 	bl	8003018 <W25qxx_WriteEnable>
    HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 800348e:	2200      	movs	r2, #0
 8003490:	2110      	movs	r1, #16
 8003492:	480c      	ldr	r0, [pc, #48]	; (80034c4 <W25qxx_EraseChip+0x58>)
 8003494:	f005 fa46 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_Spi(0xC7);
 8003498:	20c7      	movs	r0, #199	; 0xc7
 800349a:	f7ff fd3b 	bl	8002f14 <W25qxx_Spi>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800349e:	2201      	movs	r2, #1
 80034a0:	2110      	movs	r1, #16
 80034a2:	4808      	ldr	r0, [pc, #32]	; (80034c4 <W25qxx_EraseChip+0x58>)
 80034a4:	f005 fa3e 	bl	8008924 <HAL_GPIO_WritePin>
    W25qxx_WaitForWriteEnd();
 80034a8:	f7ff fe12 	bl	80030d0 <W25qxx_WaitForWriteEnd>
    #if (_W25QXX_DEBUG==1)
    printf("w25qxx EraseBlock done after %d ms!\r\n",HAL_GetTick()-StartTime);
    #endif
    W25qxx_Delay(10);
 80034ac:	200a      	movs	r0, #10
 80034ae:	f00e f8bf 	bl	8011630 <osDelay>
    w25qxx.Lock=0;
 80034b2:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <W25qxx_EraseChip+0x54>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80034ba:	bf00      	nop
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	200045f0 	.word	0x200045f0
 80034c4:	40020000 	.word	0x40020000

080034c8 <W25qxx_WritePage>:
    #endif
    w25qxx.Lock=0;
}
//###################################################################################################################
void    W25qxx_WritePage(uint8_t *pBuffer   ,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToWrite_up_to_PageSize)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
    while(w25qxx.Lock==1)
 80034d6:	e002      	b.n	80034de <W25qxx_WritePage+0x16>
        W25qxx_Delay(1);
 80034d8:	2001      	movs	r0, #1
 80034da:	f00e f8a9 	bl	8011630 <osDelay>
    while(w25qxx.Lock==1)
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <W25qxx_WritePage+0xf4>)
 80034e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d0f7      	beq.n	80034d8 <W25qxx_WritePage+0x10>
    w25qxx.Lock=1;
 80034e8:	4b34      	ldr	r3, [pc, #208]	; (80035bc <W25qxx_WritePage+0xf4>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if(((NumByteToWrite_up_to_PageSize+OffsetInByte)>w25qxx.PageSize)||(NumByteToWrite_up_to_PageSize==0))
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4413      	add	r3, r2
 80034f6:	4a31      	ldr	r2, [pc, #196]	; (80035bc <W25qxx_WritePage+0xf4>)
 80034f8:	8952      	ldrh	r2, [r2, #10]
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d802      	bhi.n	8003504 <W25qxx_WritePage+0x3c>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d105      	bne.n	8003510 <W25qxx_WritePage+0x48>
        NumByteToWrite_up_to_PageSize=w25qxx.PageSize-OffsetInByte;
 8003504:	4b2d      	ldr	r3, [pc, #180]	; (80035bc <W25qxx_WritePage+0xf4>)
 8003506:	895b      	ldrh	r3, [r3, #10]
 8003508:	461a      	mov	r2, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	603b      	str	r3, [r7, #0]
    if((OffsetInByte+NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	4413      	add	r3, r2
 8003516:	4a29      	ldr	r2, [pc, #164]	; (80035bc <W25qxx_WritePage+0xf4>)
 8003518:	8952      	ldrh	r2, [r2, #10]
 800351a:	4293      	cmp	r3, r2
 800351c:	d905      	bls.n	800352a <W25qxx_WritePage+0x62>
        NumByteToWrite_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 800351e:	4b27      	ldr	r3, [pc, #156]	; (80035bc <W25qxx_WritePage+0xf4>)
 8003520:	895b      	ldrh	r3, [r3, #10]
 8003522:	461a      	mov	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	603b      	str	r3, [r7, #0]
    #if (_W25QXX_DEBUG==1)
    printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToWrite_up_to_PageSize);
    W25qxx_Delay(100);
    uint32_t    StartTime=HAL_GetTick();
    #endif
    W25qxx_WaitForWriteEnd();
 800352a:	f7ff fdd1 	bl	80030d0 <W25qxx_WaitForWriteEnd>
  W25qxx_WriteEnable();
 800352e:	f7ff fd73 	bl	8003018 <W25qxx_WriteEnable>
  HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8003532:	2200      	movs	r2, #0
 8003534:	2110      	movs	r1, #16
 8003536:	4822      	ldr	r0, [pc, #136]	; (80035c0 <W25qxx_WritePage+0xf8>)
 8003538:	f005 f9f4 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_Spi(0x02);
 800353c:	2002      	movs	r0, #2
 800353e:	f7ff fce9 	bl	8002f14 <W25qxx_Spi>
    Page_Address = (Page_Address*w25qxx.PageSize)+OffsetInByte;
 8003542:	4b1e      	ldr	r3, [pc, #120]	; (80035bc <W25qxx_WritePage+0xf4>)
 8003544:	895b      	ldrh	r3, [r3, #10]
 8003546:	461a      	mov	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	fb03 f302 	mul.w	r3, r3, r2
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	60bb      	str	r3, [r7, #8]
    if(w25qxx.ID>=W25Q256)
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <W25qxx_WritePage+0xf4>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b08      	cmp	r3, #8
 800355a:	d905      	bls.n	8003568 <W25qxx_WritePage+0xa0>
        W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	0e1b      	lsrs	r3, r3, #24
 8003560:	b2db      	uxtb	r3, r3
 8003562:	4618      	mov	r0, r3
 8003564:	f7ff fcd6 	bl	8002f14 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	0c1b      	lsrs	r3, r3, #16
 800356c:	b2db      	uxtb	r3, r3
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff fcd0 	bl	8002f14 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	b2db      	uxtb	r3, r3
 800357a:	4618      	mov	r0, r3
 800357c:	f7ff fcca 	bl	8002f14 <W25qxx_Spi>
  W25qxx_Spi(Page_Address&0xFF);
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff fcc5 	bl	8002f14 <W25qxx_Spi>
    HAL_SPI_Transmit(&_W25QXX_SPI,pBuffer,NumByteToWrite_up_to_PageSize,100);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	b29a      	uxth	r2, r3
 800358e:	2364      	movs	r3, #100	; 0x64
 8003590:	68f9      	ldr	r1, [r7, #12]
 8003592:	480c      	ldr	r0, [pc, #48]	; (80035c4 <W25qxx_WritePage+0xfc>)
 8003594:	f008 fc9e 	bl	800bed4 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 8003598:	2201      	movs	r2, #1
 800359a:	2110      	movs	r1, #16
 800359c:	4808      	ldr	r0, [pc, #32]	; (80035c0 <W25qxx_WritePage+0xf8>)
 800359e:	f005 f9c1 	bl	8008924 <HAL_GPIO_WritePin>
  W25qxx_WaitForWriteEnd();
 80035a2:	f7ff fd95 	bl	80030d0 <W25qxx_WaitForWriteEnd>
    }
    printf("\r\n");
    printf("w25qxx WritePage done after %d ms\r\n",StartTime);
    W25qxx_Delay(100);
    #endif
    W25qxx_Delay(1);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f00e f842 	bl	8011630 <osDelay>
    w25qxx.Lock=0;
 80035ac:	4b03      	ldr	r3, [pc, #12]	; (80035bc <W25qxx_WritePage+0xf4>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	200045f0 	.word	0x200045f0
 80035c0:	40020000 	.word	0x40020000
 80035c4:	20004bac 	.word	0x20004bac

080035c8 <W25qxx_ReadPageNon>:
    W25qxx_Delay(1);
    w25qxx.Lock=0;
}

void    W25qxx_ReadPageNon(uint8_t *pBuffer,uint32_t Page_Address,uint32_t OffsetInByte,uint32_t NumByteToRead_up_to_PageSize)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
 80035d4:	603b      	str	r3, [r7, #0]
    while(w25qxx.Lock==1)
 80035d6:	e002      	b.n	80035de <W25qxx_ReadPageNon+0x16>
        HAL_Delay(1);
 80035d8:	2001      	movs	r0, #1
 80035da:	f003 ffbd 	bl	8007558 <HAL_Delay>
    while(w25qxx.Lock==1)
 80035de:	4b34      	ldr	r3, [pc, #208]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 80035e0:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d0f7      	beq.n	80035d8 <W25qxx_ReadPageNon+0x10>
    w25qxx.Lock=1;
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    if((NumByteToRead_up_to_PageSize>w25qxx.PageSize)||(NumByteToRead_up_to_PageSize==0))
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 80035f2:	895b      	ldrh	r3, [r3, #10]
 80035f4:	461a      	mov	r2, r3
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d802      	bhi.n	8003602 <W25qxx_ReadPageNon+0x3a>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <W25qxx_ReadPageNon+0x40>
        NumByteToRead_up_to_PageSize=w25qxx.PageSize;
 8003602:	4b2b      	ldr	r3, [pc, #172]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 8003604:	895b      	ldrh	r3, [r3, #10]
 8003606:	603b      	str	r3, [r7, #0]
    if((OffsetInByte+NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	4413      	add	r3, r2
 800360e:	4a28      	ldr	r2, [pc, #160]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 8003610:	8952      	ldrh	r2, [r2, #10]
 8003612:	4293      	cmp	r3, r2
 8003614:	d905      	bls.n	8003622 <W25qxx_ReadPageNon+0x5a>
        NumByteToRead_up_to_PageSize = w25qxx.PageSize-OffsetInByte;
 8003616:	4b26      	ldr	r3, [pc, #152]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 8003618:	895b      	ldrh	r3, [r3, #10]
 800361a:	461a      	mov	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	603b      	str	r3, [r7, #0]
    #if (_W25QXX_DEBUG==1)
    printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n",Page_Address,OffsetInByte,NumByteToRead_up_to_PageSize);
    HAL_Delay(100);
    uint32_t    StartTime=HAL_GetTick();
    #endif
    Page_Address = Page_Address*w25qxx.PageSize+OffsetInByte;
 8003622:	4b23      	ldr	r3, [pc, #140]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 8003624:	895b      	ldrh	r3, [r3, #10]
 8003626:	461a      	mov	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	fb03 f302 	mul.w	r3, r3, r2
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_RESET);
 8003634:	2200      	movs	r2, #0
 8003636:	2110      	movs	r1, #16
 8003638:	481e      	ldr	r0, [pc, #120]	; (80036b4 <W25qxx_ReadPageNon+0xec>)
 800363a:	f005 f973 	bl	8008924 <HAL_GPIO_WritePin>
    W25qxx_Spi(0x0B);
 800363e:	200b      	movs	r0, #11
 8003640:	f7ff fc68 	bl	8002f14 <W25qxx_Spi>
    if(w25qxx.ID>=W25Q256)
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d905      	bls.n	8003658 <W25qxx_ReadPageNon+0x90>
        W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	0e1b      	lsrs	r3, r3, #24
 8003650:	b2db      	uxtb	r3, r3
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fc5e 	bl	8002f14 <W25qxx_Spi>
  W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	0c1b      	lsrs	r3, r3, #16
 800365c:	b2db      	uxtb	r3, r3
 800365e:	4618      	mov	r0, r3
 8003660:	f7ff fc58 	bl	8002f14 <W25qxx_Spi>
  W25qxx_Spi((Page_Address& 0xFF00) >> 8);
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b2db      	uxtb	r3, r3
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff fc52 	bl	8002f14 <W25qxx_Spi>
  W25qxx_Spi(Page_Address & 0xFF);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	b2db      	uxtb	r3, r3
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff fc4d 	bl	8002f14 <W25qxx_Spi>
    W25qxx_Spi(0);
 800367a:	2000      	movs	r0, #0
 800367c:	f7ff fc4a 	bl	8002f14 <W25qxx_Spi>
    HAL_SPI_Receive(&_W25QXX_SPI,pBuffer,NumByteToRead_up_to_PageSize,100);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b29a      	uxth	r2, r3
 8003684:	2364      	movs	r3, #100	; 0x64
 8003686:	68f9      	ldr	r1, [r7, #12]
 8003688:	480b      	ldr	r0, [pc, #44]	; (80036b8 <W25qxx_ReadPageNon+0xf0>)
 800368a:	f008 fd57 	bl	800c13c <HAL_SPI_Receive>
    HAL_GPIO_WritePin(_W25QXX_CS_GPIO,_W25QXX_CS_PIN,GPIO_PIN_SET);
 800368e:	2201      	movs	r2, #1
 8003690:	2110      	movs	r1, #16
 8003692:	4808      	ldr	r0, [pc, #32]	; (80036b4 <W25qxx_ReadPageNon+0xec>)
 8003694:	f005 f946 	bl	8008924 <HAL_GPIO_WritePin>
    }
    printf("\r\n");
    printf("w25qxx ReadPage done after %d ms\r\n",StartTime);
    HAL_Delay(100);
    #endif
    HAL_Delay(1);
 8003698:	2001      	movs	r0, #1
 800369a:	f003 ff5d 	bl	8007558 <HAL_Delay>
    w25qxx.Lock=0;
 800369e:	4b04      	ldr	r3, [pc, #16]	; (80036b0 <W25qxx_ReadPageNon+0xe8>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200045f0 	.word	0x200045f0
 80036b4:	40020000 	.word	0x40020000
 80036b8:	20004bac 	.word	0x20004bac

080036bc <Quaternion_set>:
#include <stdlib.h>
#include <assert.h>
#include <math.h>

void Quaternion_set(float w, float v1, float v2, float v3, Quaternion* output)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80036c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80036ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80036ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80036d2:	6078      	str	r0, [r7, #4]
    assert(output != NULL);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <Quaternion_set+0x2a>
 80036da:	4b0b      	ldr	r3, [pc, #44]	; (8003708 <Quaternion_set+0x4c>)
 80036dc:	4a0b      	ldr	r2, [pc, #44]	; (800370c <Quaternion_set+0x50>)
 80036de:	211b      	movs	r1, #27
 80036e0:	480b      	ldr	r0, [pc, #44]	; (8003710 <Quaternion_set+0x54>)
 80036e2:	f010 ff17 	bl	8014514 <__assert_func>
    output->w = w;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	601a      	str	r2, [r3, #0]
    output->v[0] = v1;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	605a      	str	r2, [r3, #4]
    output->v[1] = v2;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	609a      	str	r2, [r3, #8]
    output->v[2] = v3;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68ba      	ldr	r2, [r7, #8]
 80036fc:	60da      	str	r2, [r3, #12]
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	08019808 	.word	0x08019808
 800370c:	08019f38 	.word	0x08019f38
 8003710:	08019818 	.word	0x08019818

08003714 <Quaternion_setIdentity>:

void Quaternion_setIdentity(Quaternion* q)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b082      	sub	sp, #8
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
    assert(q != NULL);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <Quaternion_setIdentity+0x1a>
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <Quaternion_setIdentity+0x38>)
 8003724:	4a0a      	ldr	r2, [pc, #40]	; (8003750 <Quaternion_setIdentity+0x3c>)
 8003726:	2124      	movs	r1, #36	; 0x24
 8003728:	480a      	ldr	r0, [pc, #40]	; (8003754 <Quaternion_setIdentity+0x40>)
 800372a:	f010 fef3 	bl	8014514 <__assert_func>
    Quaternion_set(1, 0, 0, 0, q);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	eddf 1a09 	vldr	s3, [pc, #36]	; 8003758 <Quaternion_setIdentity+0x44>
 8003734:	ed9f 1a08 	vldr	s2, [pc, #32]	; 8003758 <Quaternion_setIdentity+0x44>
 8003738:	eddf 0a07 	vldr	s1, [pc, #28]	; 8003758 <Quaternion_setIdentity+0x44>
 800373c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003740:	f7ff ffbc 	bl	80036bc <Quaternion_set>
}
 8003744:	bf00      	nop
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	08019834 	.word	0x08019834
 8003750:	08019f48 	.word	0x08019f48
 8003754:	08019818 	.word	0x08019818
 8003758:	00000000 	.word	0x00000000

0800375c <Quaternion_copy>:

void Quaternion_copy(Quaternion* q, Quaternion* output)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
    Quaternion_set(q->w, q->v[0], q->v[1], q->v[2], output);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	edd3 6a02 	vldr	s13, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	ed93 6a03 	vldr	s12, [r3, #12]
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	eef0 1a46 	vmov.f32	s3, s12
 8003784:	eeb0 1a66 	vmov.f32	s2, s13
 8003788:	eef0 0a47 	vmov.f32	s1, s14
 800378c:	eeb0 0a67 	vmov.f32	s0, s15
 8003790:	f7ff ff94 	bl	80036bc <Quaternion_set>
}
 8003794:	bf00      	nop
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}
 800379c:	0000      	movs	r0, r0
	...

080037a0 <Quaternion_toEulerZYX>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_toEulerZYX(Quaternion* q, float output[3])
{
 80037a0:	b5b0      	push	{r4, r5, r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <Quaternion_toEulerZYX+0x1c>
 80037b0:	4b87      	ldr	r3, [pc, #540]	; (80039d0 <Quaternion_toEulerZYX+0x230>)
 80037b2:	4a88      	ldr	r2, [pc, #544]	; (80039d4 <Quaternion_toEulerZYX+0x234>)
 80037b4:	2185      	movs	r1, #133	; 0x85
 80037b6:	4888      	ldr	r0, [pc, #544]	; (80039d8 <Quaternion_toEulerZYX+0x238>)
 80037b8:	f010 feac 	bl	8014514 <__assert_func>

    // Roll (x-axis rotation)
    float sinr_cosp = +2.0 * (q->w * q->v[0] + q->v[1] * q->v[2]);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80037c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	edd3 7a03 	vldr	s15, [r3, #12]
 80037d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80037e4:	edc7 7a07 	vstr	s15, [r7, #28]
    float cosr_cosp = +1.0 - 2.0 * (q->v[0] * q->v[0] + q->v[1] * q->v[1]);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80037f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	edd3 6a02 	vldr	s13, [r3, #8]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	edd3 7a02 	vldr	s15, [r3, #8]
 8003804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800380c:	ee17 0a90 	vmov	r0, s15
 8003810:	f7fc feba 	bl	8000588 <__aeabi_f2d>
 8003814:	4602      	mov	r2, r0
 8003816:	460b      	mov	r3, r1
 8003818:	f7fc fd58 	bl	80002cc <__adddf3>
 800381c:	4603      	mov	r3, r0
 800381e:	460c      	mov	r4, r1
 8003820:	461a      	mov	r2, r3
 8003822:	4623      	mov	r3, r4
 8003824:	f04f 0000 	mov.w	r0, #0
 8003828:	496c      	ldr	r1, [pc, #432]	; (80039dc <Quaternion_toEulerZYX+0x23c>)
 800382a:	f7fc fd4d 	bl	80002c8 <__aeabi_dsub>
 800382e:	4603      	mov	r3, r0
 8003830:	460c      	mov	r4, r1
 8003832:	4618      	mov	r0, r3
 8003834:	4621      	mov	r1, r4
 8003836:	f7fd f9f7 	bl	8000c28 <__aeabi_d2f>
 800383a:	4603      	mov	r3, r0
 800383c:	61bb      	str	r3, [r7, #24]
    output[0] = atan2(sinr_cosp, cosr_cosp);
 800383e:	69f8      	ldr	r0, [r7, #28]
 8003840:	f7fc fea2 	bl	8000588 <__aeabi_f2d>
 8003844:	4604      	mov	r4, r0
 8003846:	460d      	mov	r5, r1
 8003848:	69b8      	ldr	r0, [r7, #24]
 800384a:	f7fc fe9d 	bl	8000588 <__aeabi_f2d>
 800384e:	4602      	mov	r2, r0
 8003850:	460b      	mov	r3, r1
 8003852:	ec43 2b11 	vmov	d1, r2, r3
 8003856:	ec45 4b10 	vmov	d0, r4, r5
 800385a:	f013 fd51 	bl	8017300 <atan2>
 800385e:	ec54 3b10 	vmov	r3, r4, d0
 8003862:	4618      	mov	r0, r3
 8003864:	4621      	mov	r1, r4
 8003866:	f7fd f9df 	bl	8000c28 <__aeabi_d2f>
 800386a:	4602      	mov	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	601a      	str	r2, [r3, #0]

    // Pitch (y-axis rotation)
    float sinp = +2.0 * (q->w * q->v[1] - q->v[2] * q->v[0]);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	ed93 7a00 	vldr	s14, [r3]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	edd3 7a02 	vldr	s15, [r3, #8]
 800387c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	edd3 6a03 	vldr	s13, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	edd3 7a01 	vldr	s15, [r3, #4]
 800388c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003894:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003898:	edc7 7a05 	vstr	s15, [r7, #20]
    if (fabs(sinp) >= 1)
 800389c:	edd7 7a05 	vldr	s15, [r7, #20]
 80038a0:	eef0 7ae7 	vabs.f32	s15, s15
 80038a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	db15      	blt.n	80038de <Quaternion_toEulerZYX+0x13e>
        output[1] = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
 80038b2:	6978      	ldr	r0, [r7, #20]
 80038b4:	f7fc fe68 	bl	8000588 <__aeabi_f2d>
 80038b8:	4603      	mov	r3, r0
 80038ba:	460c      	mov	r4, r1
 80038bc:	ec44 3b11 	vmov	d1, r3, r4
 80038c0:	ed9f 0b41 	vldr	d0, [pc, #260]	; 80039c8 <Quaternion_toEulerZYX+0x228>
 80038c4:	f011 fce8 	bl	8015298 <copysign>
 80038c8:	ec52 1b10 	vmov	r1, r2, d0
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	1d1c      	adds	r4, r3, #4
 80038d0:	4608      	mov	r0, r1
 80038d2:	4611      	mov	r1, r2
 80038d4:	f7fd f9a8 	bl	8000c28 <__aeabi_d2f>
 80038d8:	4603      	mov	r3, r0
 80038da:	6023      	str	r3, [r4, #0]
 80038dc:	e012      	b.n	8003904 <Quaternion_toEulerZYX+0x164>
    else
        output[1] = asin(sinp);
 80038de:	6978      	ldr	r0, [r7, #20]
 80038e0:	f7fc fe52 	bl	8000588 <__aeabi_f2d>
 80038e4:	4603      	mov	r3, r0
 80038e6:	460c      	mov	r4, r1
 80038e8:	ec44 3b10 	vmov	d0, r3, r4
 80038ec:	f013 fcb0 	bl	8017250 <asin>
 80038f0:	ec52 1b10 	vmov	r1, r2, d0
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	1d1c      	adds	r4, r3, #4
 80038f8:	4608      	mov	r0, r1
 80038fa:	4611      	mov	r1, r2
 80038fc:	f7fd f994 	bl	8000c28 <__aeabi_d2f>
 8003900:	4603      	mov	r3, r0
 8003902:	6023      	str	r3, [r4, #0]

    // Yaw (z-axis rotation)
    float siny_cosp = +2.0 * (q->w * q->v[2] + q->v[0] * q->v[1]);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	ed93 7a00 	vldr	s14, [r3]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	edd3 6a01 	vldr	s13, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	edd3 7a02 	vldr	s15, [r3, #8]
 8003920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003928:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800392c:	edc7 7a04 	vstr	s15, [r7, #16]
    float cosy_cosp = +1.0 - 2.0 * (q->v[1] * q->v[1] + q->v[2] * q->v[2]);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	ed93 7a02 	vldr	s14, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	edd3 7a02 	vldr	s15, [r3, #8]
 800393c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	edd3 6a03 	vldr	s13, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	edd3 7a03 	vldr	s15, [r3, #12]
 800394c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003954:	ee17 0a90 	vmov	r0, s15
 8003958:	f7fc fe16 	bl	8000588 <__aeabi_f2d>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	f7fc fcb4 	bl	80002cc <__adddf3>
 8003964:	4603      	mov	r3, r0
 8003966:	460c      	mov	r4, r1
 8003968:	461a      	mov	r2, r3
 800396a:	4623      	mov	r3, r4
 800396c:	f04f 0000 	mov.w	r0, #0
 8003970:	491a      	ldr	r1, [pc, #104]	; (80039dc <Quaternion_toEulerZYX+0x23c>)
 8003972:	f7fc fca9 	bl	80002c8 <__aeabi_dsub>
 8003976:	4603      	mov	r3, r0
 8003978:	460c      	mov	r4, r1
 800397a:	4618      	mov	r0, r3
 800397c:	4621      	mov	r1, r4
 800397e:	f7fd f953 	bl	8000c28 <__aeabi_d2f>
 8003982:	4603      	mov	r3, r0
 8003984:	60fb      	str	r3, [r7, #12]
    output[2] = atan2(siny_cosp, cosy_cosp);
 8003986:	6938      	ldr	r0, [r7, #16]
 8003988:	f7fc fdfe 	bl	8000588 <__aeabi_f2d>
 800398c:	4604      	mov	r4, r0
 800398e:	460d      	mov	r5, r1
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f7fc fdf9 	bl	8000588 <__aeabi_f2d>
 8003996:	4602      	mov	r2, r0
 8003998:	460b      	mov	r3, r1
 800399a:	ec43 2b11 	vmov	d1, r2, r3
 800399e:	ec45 4b10 	vmov	d0, r4, r5
 80039a2:	f013 fcad 	bl	8017300 <atan2>
 80039a6:	ec52 1b10 	vmov	r1, r2, d0
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	f103 0408 	add.w	r4, r3, #8
 80039b0:	4608      	mov	r0, r1
 80039b2:	4611      	mov	r1, r2
 80039b4:	f7fd f938 	bl	8000c28 <__aeabi_d2f>
 80039b8:	4603      	mov	r3, r0
 80039ba:	6023      	str	r3, [r4, #0]
}
 80039bc:	bf00      	nop
 80039be:	3720      	adds	r7, #32
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}
 80039c4:	f3af 8000 	nop.w
 80039c8:	54442d18 	.word	0x54442d18
 80039cc:	3ff921fb 	.word	0x3ff921fb
 80039d0:	08019808 	.word	0x08019808
 80039d4:	08019f60 	.word	0x08019f60
 80039d8:	08019818 	.word	0x08019818
 80039dc:	3ff00000 	.word	0x3ff00000

080039e0 <Quaternion_conjugate>:
    output->v[1] = cy * cr * sp + sy * sr * cp;
    output->v[2] = sy * cr * cp - cy * sr * sp;
}

void Quaternion_conjugate(Quaternion* q, Quaternion* output)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
    assert(output != NULL);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d105      	bne.n	80039fc <Quaternion_conjugate+0x1c>
 80039f0:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <Quaternion_conjugate+0x5c>)
 80039f2:	4a13      	ldr	r2, [pc, #76]	; (8003a40 <Quaternion_conjugate+0x60>)
 80039f4:	21b7      	movs	r1, #183	; 0xb7
 80039f6:	4813      	ldr	r0, [pc, #76]	; (8003a44 <Quaternion_conjugate+0x64>)
 80039f8:	f010 fd8c 	bl	8014514 <__assert_func>
    output->w = q->w;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	601a      	str	r2, [r3, #0]
    output->v[0] = -q->v[0];
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a0a:	eef1 7a67 	vneg.f32	s15, s15
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	edc3 7a01 	vstr	s15, [r3, #4]
    output->v[1] = -q->v[1];
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a1a:	eef1 7a67 	vneg.f32	s15, s15
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	edc3 7a02 	vstr	s15, [r3, #8]
    output->v[2] = -q->v[2];
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a2a:	eef1 7a67 	vneg.f32	s15, s15
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8003a34:	bf00      	nop
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	08019808 	.word	0x08019808
 8003a40:	08019f78 	.word	0x08019f78
 8003a44:	08019818 	.word	0x08019818

08003a48 <Quaternion_multiply>:
        q->v[2] / len,
        output);
}

void Quaternion_multiply(Quaternion* q1, Quaternion* q2, Quaternion* output)
{
 8003a48:	b590      	push	{r4, r7, lr}
 8003a4a:	b089      	sub	sp, #36	; 0x24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d105      	bne.n	8003a66 <Quaternion_multiply+0x1e>
 8003a5a:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <Quaternion_multiply+0x174>)
 8003a5c:	4a58      	ldr	r2, [pc, #352]	; (8003bc0 <Quaternion_multiply+0x178>)
 8003a5e:	21d2      	movs	r1, #210	; 0xd2
 8003a60:	4858      	ldr	r0, [pc, #352]	; (8003bc4 <Quaternion_multiply+0x17c>)
 8003a62:	f010 fd57 	bl	8014514 <__assert_func>
             a*e - b*f - c*g - d*h
        + i (b*e + a*f + c*h- d*g)
        + j (a*g - b*h + c*e + d*f)
        + k (a*h + b*g - c*f + d*e)
    */
    result.w =    q1->w   *q2->w    - q1->v[0]*q2->v[0] - q1->v[1]*q2->v[1] - q1->v[2]*q2->v[2];
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	ed93 7a00 	vldr	s14, [r3]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	edd3 6a01 	vldr	s13, [r3, #4]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a86:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	edd3 6a03 	vldr	s13, [r3, #12]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ab2:	edc7 7a04 	vstr	s15, [r7, #16]
    result.v[0] = q1->v[0]*q2->w    + q1->w   *q2->v[0] + q1->v[1]*q2->v[2] - q1->v[2]*q2->v[1];
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	ed93 7a01 	vldr	s14, [r3, #4]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	edd3 6a00 	vldr	s13, [r3]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ad6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	edd3 6a02 	vldr	s13, [r3, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ae6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	edd3 6a03 	vldr	s13, [r3, #12]
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003afa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b02:	edc7 7a05 	vstr	s15, [r7, #20]
    result.v[1] = q1->w   *q2->v[1] - q1->v[0]*q2->v[2] + q1->v[1]*q2->w    + q1->v[2]*q2->v[0];
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b52:	edc7 7a06 	vstr	s15, [r7, #24]
    result.v[2] = q1->w   *q2->v[2] + q1->v[0]*q2->v[1] - q1->v[1]*q2->v[0] + q1->v[2]*q2->w   ;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	ed93 7a00 	vldr	s14, [r3]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003b62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	edd3 6a01 	vldr	s13, [r3, #4]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003b72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	edd3 7a00 	vldr	s15, [r3]
 8003b9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]

    *output = result;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	461c      	mov	r4, r3
 8003baa:	f107 0310 	add.w	r3, r7, #16
 8003bae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003bb4:	bf00      	nop
 8003bb6:	3724      	adds	r7, #36	; 0x24
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd90      	pop	{r4, r7, pc}
 8003bbc:	08019808 	.word	0x08019808
 8003bc0:	08019f90 	.word	0x08019f90
 8003bc4:	08019818 	.word	0x08019818

08003bc8 <Quaternion_rotate>:

void Quaternion_rotate(Quaternion* q, float v[3], float output[3])
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b092      	sub	sp, #72	; 0x48
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
    assert(output != NULL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <Quaternion_rotate+0x1e>
 8003bda:	4bbc      	ldr	r3, [pc, #752]	; (8003ecc <Quaternion_rotate+0x304>)
 8003bdc:	4abc      	ldr	r2, [pc, #752]	; (8003ed0 <Quaternion_rotate+0x308>)
 8003bde:	21e6      	movs	r1, #230	; 0xe6
 8003be0:	48bc      	ldr	r0, [pc, #752]	; (8003ed4 <Quaternion_rotate+0x30c>)
 8003be2:	f010 fc97 	bl	8014514 <__assert_func>
    float result[3];

    float ww = q->w * q->w;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	ed93 7a00 	vldr	s14, [r3]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	edd3 7a00 	vldr	s15, [r3]
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    float xx = q->v[0] * q->v[0];
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    float yy = q->v[1] * q->v[1];
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	ed93 7a02 	vldr	s14, [r3, #8]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    float zz = q->v[2] * q->v[2];
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	ed93 7a03 	vldr	s14, [r3, #12]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
    float wx = q->w * q->v[0];
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	ed93 7a00 	vldr	s14, [r3]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c46:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
    float wy = q->w * q->v[1];
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    float wz = q->w * q->v[2];
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	ed93 7a00 	vldr	s14, [r3]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c6e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    float xy = q->v[0] * q->v[1];
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float xz = q->v[0] * q->v[2];
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float yz = q->v[1] * q->v[2];
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003caa:	edc7 7a08 	vstr	s15, [r7, #32]
    // Formula from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/transforms/index.htm
    // p2.x = w*w*p1.x + 2*y*w*p1.z - 2*z*w*p1.y + x*x*p1.x + 2*y*x*p1.y + 2*z*x*p1.z - z*z*p1.x - y*y*p1.x;
    // p2.y = 2*x*y*p1.x + y*y*p1.y + 2*z*y*p1.z + 2*w*z*p1.x - z*z*p1.y + w*w*p1.y - 2*x*w*p1.z - x*x*p1.y;
    // p2.z = 2*x*z*p1.x + 2*y*z*p1.y + z*z*p1.z - 2*w*y*p1.x - y*y*p1.z + 2*w*x*p1.y - x*x*p1.z + w*w*p1.z;

    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	ed93 7a00 	vldr	s14, [r3]
 8003cb4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003cb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cbc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003cc0:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	3308      	adds	r3, #8
 8003cc8:	edd3 7a00 	vldr	s15, [r3]
 8003ccc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003cd8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	edd3 7a00 	vldr	s15, [r3]
 8003ce4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	edd3 6a00 	vldr	s13, [r3]
 8003cf2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003cf6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8003cfa:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8003cfe:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d02:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	3304      	adds	r3, #4
 8003d0a:	edd3 7a00 	vldr	s15, [r3]
 8003d0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d16:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003d1a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	3308      	adds	r3, #8
 8003d22:	edd3 7a00 	vldr	s15, [r3]
 8003d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d2a:	ee37 7a27 	vadd.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	edd3 6a00 	vldr	s13, [r3]
 8003d34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003d38:	ee66 7aa7 	vmul.f32	s15, s13, s15
                xx*v[0] + 2*xy*v[1] + 2*xz*v[2] -
 8003d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
                zz*v[0] - yy*v[0];
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	edd3 6a00 	vldr	s13, [r3]
 8003d46:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d4e:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[0] = ww*v[0] + 2*wy*v[2] - 2*wz*v[1] +
 8003d52:	edc7 7a05 	vstr	s15, [r7, #20]
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8003d56:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d5a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	edd3 6a00 	vldr	s13, [r3]
 8003d70:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003d74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d80:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3308      	adds	r3, #8
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d90:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8003d94:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003d98:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	edd3 7a00 	vldr	s15, [r3]
 8003da2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8003da6:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3304      	adds	r3, #4
 8003dae:	edd3 6a00 	vldr	s13, [r3]
 8003db2:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003db6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	edd3 6a00 	vldr	s13, [r3]
 8003dc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003dca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dce:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8003dd2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003dd6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	3308      	adds	r3, #8
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wz*v[0] - zz*v[1] + ww*v[1] -
 8003de6:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wx*v[2] - xx*v[1];
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	3304      	adds	r3, #4
 8003dee:	edd3 6a00 	vldr	s13, [r3]
 8003df2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dfa:	ee77 7a67 	vsub.f32	s15, s14, s15
    result[1] = 2*xy*v[0] + yy*v[1] + 2*yz*v[2] +
 8003dfe:	edc7 7a06 	vstr	s15, [r7, #24]
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8003e02:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003e06:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	edd3 7a00 	vldr	s15, [r3]
 8003e10:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e14:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	3308      	adds	r3, #8
 8003e30:	edd3 6a00 	vldr	s13, [r3]
 8003e34:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003e38:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e3c:	ee37 7a27 	vadd.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8003e40:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003e44:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8003e52:	ee37 7a67 	vsub.f32	s14, s14, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	edd3 6a00 	vldr	s13, [r3]
 8003e5e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003e62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e6a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003e6e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	3304      	adds	r3, #4
 8003e76:	edd3 7a00 	vldr	s15, [r3]
 8003e7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e7e:	ee37 7a27 	vadd.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	3308      	adds	r3, #8
 8003e86:	edd3 6a00 	vldr	s13, [r3]
 8003e8a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
                2*wy*v[0] - yy*v[2] + 2*wx*v[1] -
 8003e92:	ee37 7a67 	vsub.f32	s14, s14, s15
                xx*v[2] + ww*v[2];
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	3308      	adds	r3, #8
 8003e9a:	edd3 6a00 	vldr	s13, [r3]
 8003e9e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
    result[2] = 2*xz*v[0] + 2*yz*v[1] + zz*v[2] -
 8003eaa:	edc7 7a07 	vstr	s15, [r7, #28]

    // Copy result to output
    output[0] = result[0];
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]
    output[1] = result[1];
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	601a      	str	r2, [r3, #0]
    output[2] = result[2];
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3308      	adds	r3, #8
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	601a      	str	r2, [r3, #0]
}
 8003ec4:	bf00      	nop
 8003ec6:	3748      	adds	r7, #72	; 0x48
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	08019808 	.word	0x08019808
 8003ed0:	08019fa4 	.word	0x08019fa4
 8003ed4:	08019818 	.word	0x08019818

08003ed8 <Quaternion_fromRate>:
    result.v[2] = (q1->v[2] * ratioA + q2->v[2] * ratioB);

    *output = result;
}

void Quaternion_fromRate(float omega[3], float dt, Quaternion* output) {
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b08b      	sub	sp, #44	; 0x2c
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ee4:	6079      	str	r1, [r7, #4]
    float hax = omega[0] * dt * 0.5;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	ed93 7a00 	vldr	s14, [r3]
 8003eec:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ef0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003efc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float hay = omega[1] * dt * 0.5;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3304      	adds	r3, #4
 8003f04:	ed93 7a00 	vldr	s14, [r3]
 8003f08:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f10:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f18:	edc7 7a08 	vstr	s15, [r7, #32]
    float haz = omega[2] * dt * 0.5;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	ed93 7a00 	vldr	s14, [r3]
 8003f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003f30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f34:	edc7 7a07 	vstr	s15, [r7, #28]

    float l = hax*hax + hay * hay + haz*haz;
 8003f38:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003f40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f44:	edd7 6a08 	vldr	s13, [r7, #32]
 8003f48:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f58:	edd7 7a07 	vldr	s15, [r7, #28]
 8003f5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f64:	edc7 7a06 	vstr	s15, [r7, #24]

    if (l > QUATERNION_EPS*QUATERNION_EPS*QUATERNION_EPS) {
 8003f68:	69b8      	ldr	r0, [r7, #24]
 8003f6a:	f7fc fb0d 	bl	8000588 <__aeabi_f2d>
 8003f6e:	a336      	add	r3, pc, #216	; (adr r3, 8004048 <Quaternion_fromRate+0x170>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc fdf0 	bl	8000b58 <__aeabi_dcmpgt>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d05c      	beq.n	8004038 <Quaternion_fromRate+0x160>
        l = sqrt(l);
 8003f7e:	69b8      	ldr	r0, [r7, #24]
 8003f80:	f7fc fb02 	bl	8000588 <__aeabi_f2d>
 8003f84:	4603      	mov	r3, r0
 8003f86:	460c      	mov	r4, r1
 8003f88:	ec44 3b10 	vmov	d0, r3, r4
 8003f8c:	f013 f9ba 	bl	8017304 <sqrt>
 8003f90:	ec54 3b10 	vmov	r3, r4, d0
 8003f94:	4618      	mov	r0, r3
 8003f96:	4621      	mov	r1, r4
 8003f98:	f7fc fe46 	bl	8000c28 <__aeabi_d2f>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	61bb      	str	r3, [r7, #24]
        float sinl = sin(l) / l;
 8003fa0:	69b8      	ldr	r0, [r7, #24]
 8003fa2:	f7fc faf1 	bl	8000588 <__aeabi_f2d>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	460c      	mov	r4, r1
 8003faa:	ec44 3b10 	vmov	d0, r3, r4
 8003fae:	f013 f907 	bl	80171c0 <sin>
 8003fb2:	ec56 5b10 	vmov	r5, r6, d0
 8003fb6:	69b8      	ldr	r0, [r7, #24]
 8003fb8:	f7fc fae6 	bl	8000588 <__aeabi_f2d>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	4628      	mov	r0, r5
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	f7fc fc60 	bl	800088c <__aeabi_ddiv>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	4621      	mov	r1, r4
 8003fd4:	f7fc fe28 	bl	8000c28 <__aeabi_d2f>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	617b      	str	r3, [r7, #20]

        output->w = cos(l);
 8003fdc:	69b8      	ldr	r0, [r7, #24]
 8003fde:	f7fc fad3 	bl	8000588 <__aeabi_f2d>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	460c      	mov	r4, r1
 8003fe6:	ec44 3b10 	vmov	d0, r3, r4
 8003fea:	f013 f859 	bl	80170a0 <cos>
 8003fee:	ec54 3b10 	vmov	r3, r4, d0
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	4621      	mov	r1, r4
 8003ff6:	f7fc fe17 	bl	8000c28 <__aeabi_d2f>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	601a      	str	r2, [r3, #0]
        output->v[0] = hax * sinl;
 8004000:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8004004:	edd7 7a05 	vldr	s15, [r7, #20]
 8004008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	edc3 7a01 	vstr	s15, [r3, #4]
        output->v[1] = hay * sinl;
 8004012:	ed97 7a08 	vldr	s14, [r7, #32]
 8004016:	edd7 7a05 	vldr	s15, [r7, #20]
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	edc3 7a02 	vstr	s15, [r3, #8]
        output->v[2] = haz * sinl;
 8004024:	ed97 7a07 	vldr	s14, [r7, #28]
 8004028:	edd7 7a05 	vldr	s15, [r7, #20]
 800402c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	edc3 7a03 	vstr	s15, [r3, #12]
    }
    else {
        Quaternion_setIdentity(output);
    }
}
 8004036:	e002      	b.n	800403e <Quaternion_fromRate+0x166>
        Quaternion_setIdentity(output);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fb6b 	bl	8003714 <Quaternion_setIdentity>
}
 800403e:	bf00      	nop
 8004040:	372c      	adds	r7, #44	; 0x2c
 8004042:	46bd      	mov	sp, r7
 8004044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004046:	bf00      	nop
 8004048:	812dea11 	.word	0x812dea11
 800404c:	3d719799 	.word	0x3d719799

08004050 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a07      	ldr	r2, [pc, #28]	; (800407c <vApplicationGetIdleTaskMemory+0x2c>)
 8004060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4a06      	ldr	r2, [pc, #24]	; (8004080 <vApplicationGetIdleTaskMemory+0x30>)
 8004066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2280      	movs	r2, #128	; 0x80
 800406c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000624 	.word	0x20000624
 8004080:	20000678 	.word	0x20000678
 8004084:	00000000 	.word	0x00000000

08004088 <get_battery_voltage>:
void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB);
void jingleBell();
void rick();
void ksp();

float get_battery_voltage() {
 8004088:	b590      	push	{r4, r7, lr}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 800408e:	4816      	ldr	r0, [pc, #88]	; (80040e8 <get_battery_voltage+0x60>)
 8004090:	f003 fac8 	bl	8007624 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 8004094:	2164      	movs	r1, #100	; 0x64
 8004096:	4814      	ldr	r0, [pc, #80]	; (80040e8 <get_battery_voltage+0x60>)
 8004098:	f003 fb8a 	bl	80077b0 <HAL_ADC_PollForConversion>
    float voltage = ((float) HAL_ADC_GetValue(&hadc1)) * VBAT_CALIBRATION;
 800409c:	4812      	ldr	r0, [pc, #72]	; (80040e8 <get_battery_voltage+0x60>)
 800409e:	f003 fc0b 	bl	80078b8 <HAL_ADC_GetValue>
 80040a2:	ee07 0a90 	vmov	s15, r0
 80040a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040aa:	ee17 0a90 	vmov	r0, s15
 80040ae:	f7fc fa6b 	bl	8000588 <__aeabi_f2d>
 80040b2:	a30b      	add	r3, pc, #44	; (adr r3, 80040e0 <get_battery_voltage+0x58>)
 80040b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b8:	f7fc fabe 	bl	8000638 <__aeabi_dmul>
 80040bc:	4603      	mov	r3, r0
 80040be:	460c      	mov	r4, r1
 80040c0:	4618      	mov	r0, r3
 80040c2:	4621      	mov	r1, r4
 80040c4:	f7fc fdb0 	bl	8000c28 <__aeabi_d2f>
 80040c8:	4603      	mov	r3, r0
 80040ca:	607b      	str	r3, [r7, #4]
    return voltage;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	ee07 3a90 	vmov	s15, r3
}
 80040d2:	eeb0 0a67 	vmov.f32	s0, s15
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd90      	pop	{r4, r7, pc}
 80040dc:	f3af 8000 	nop.w
 80040e0:	f34eff30 	.word	0xf34eff30
 80040e4:	3f72b5b7 	.word	0x3f72b5b7
 80040e8:	200049e0 	.word	0x200049e0

080040ec <is_armed>:

uint8_t is_armed() {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(RBF_GPIO_Port, RBF_Pin);// High corresponds to disconected = armed
 80040f0:	2101      	movs	r1, #1
 80040f2:	4803      	ldr	r0, [pc, #12]	; (8004100 <is_armed+0x14>)
 80040f4:	f004 fbfe 	bl	80088f4 <HAL_GPIO_ReadPin>
 80040f8:	4603      	mov	r3, r0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	40020000 	.word	0x40020000

08004104 <is_armed_debounce>:

uint8_t is_armed_debounce() {
 8004104:	b580      	push	{r7, lr}
 8004106:	b082      	sub	sp, #8
 8004108:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 800410a:	2300      	movs	r3, #0
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	e00c      	b.n	800412a <is_armed_debounce+0x26>
        if (!is_armed()) {
 8004110:	f7ff ffec 	bl	80040ec <is_armed>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <is_armed_debounce+0x1a>
            return 0;
 800411a:	2300      	movs	r3, #0
 800411c:	e009      	b.n	8004132 <is_armed_debounce+0x2e>
        }
        osDelay(1);
 800411e:	2001      	movs	r0, #1
 8004120:	f00d fa86 	bl	8011630 <osDelay>
    for (int i = 0; i < 20; i++) {
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	3301      	adds	r3, #1
 8004128:	607b      	str	r3, [r7, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b13      	cmp	r3, #19
 800412e:	ddef      	ble.n	8004110 <is_armed_debounce+0xc>
    }
    return 1;
 8004130:	2301      	movs	r3, #1
}
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
	...

0800413c <is_soft_enabled>:

uint8_t is_soft_enabled() {
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(ARM_GPIO_Port, ARM_Pin);
 8004140:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004144:	4802      	ldr	r0, [pc, #8]	; (8004150 <is_soft_enabled+0x14>)
 8004146:	f004 fbd5 	bl	80088f4 <HAL_GPIO_ReadPin>
 800414a:	4603      	mov	r3, r0
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40020400 	.word	0x40020400

08004154 <is_breakwire_connected>:

uint8_t is_breakwire_connected() {
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
    return !HAL_GPIO_ReadPin(BREAKWIRE_GPIO_Port, BREAKWIRE_Pin);
 8004158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800415c:	4805      	ldr	r0, [pc, #20]	; (8004174 <is_breakwire_connected+0x20>)
 800415e:	f004 fbc9 	bl	80088f4 <HAL_GPIO_ReadPin>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
}
 800416e:	4618      	mov	r0, r3
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40020400 	.word	0x40020400

08004178 <is_breakwire_broken_debounce>:

uint8_t is_breakwire_broken_debounce() {
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
    for (int i = 0; i < 20; i++) {
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	e00c      	b.n	800419e <is_breakwire_broken_debounce+0x26>
        if (is_breakwire_connected()) {
 8004184:	f7ff ffe6 	bl	8004154 <is_breakwire_connected>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <is_breakwire_broken_debounce+0x1a>
            return 0;
 800418e:	2300      	movs	r3, #0
 8004190:	e009      	b.n	80041a6 <is_breakwire_broken_debounce+0x2e>
        }
        osDelay(1);
 8004192:	2001      	movs	r0, #1
 8004194:	f00d fa4c 	bl	8011630 <osDelay>
    for (int i = 0; i < 20; i++) {
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3301      	adds	r3, #1
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b13      	cmp	r3, #19
 80041a2:	ddef      	ble.n	8004184 <is_breakwire_broken_debounce+0xc>
    }
    return 1;
 80041a4:	2301      	movs	r3, #1
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <buzzer_beep>:

void buzzer_beep(uint8_t delayval) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
    buzzer_setting = REPEAT_BEEP;
 80041ba:	4b10      	ldr	r3, [pc, #64]	; (80041fc <buzzer_beep+0x4c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	701a      	strb	r2, [r3, #0]
    buzzer_delay = delayval * 20;
 80041c0:	79fb      	ldrb	r3, [r7, #7]
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	461a      	mov	r2, r3
 80041c6:	0092      	lsls	r2, r2, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <buzzer_beep+0x50>)
 80041d0:	801a      	strh	r2, [r3, #0]

    if (osMessageAvailableSpace(BuzzerQueueHandle)) {
 80041d2:	4b0c      	ldr	r3, [pc, #48]	; (8004204 <buzzer_beep+0x54>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f00d fb1c 	bl	8011814 <osMessageAvailableSpace>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <buzzer_beep+0x42>
        osMessagePut(BuzzerQueueHandle, buzzer_delay, 100);
 80041e2:	4b08      	ldr	r3, [pc, #32]	; (8004204 <buzzer_beep+0x54>)
 80041e4:	6818      	ldr	r0, [r3, #0]
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <buzzer_beep+0x50>)
 80041e8:	881b      	ldrh	r3, [r3, #0]
 80041ea:	2264      	movs	r2, #100	; 0x64
 80041ec:	4619      	mov	r1, r3
 80041ee:	f00d fa5d 	bl	80116ac <osMessagePut>
    }
}
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000001 	.word	0x20000001
 8004200:	20000002 	.word	0x20000002
 8004204:	20004a28 	.word	0x20004a28

08004208 <buzzer_clear_queue>:

void buzzer_clear_queue() {
 8004208:	b580      	push	{r7, lr}
 800420a:	af00      	add	r7, sp, #0
    xQueueReset(BuzzerQueueHandle);
 800420c:	4b03      	ldr	r3, [pc, #12]	; (800421c <buzzer_clear_queue+0x14>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2100      	movs	r1, #0
 8004212:	4618      	mov	r0, r3
 8004214:	f00d fbbe 	bl	8011994 <xQueueGenericReset>
}
 8004218:	bf00      	nop
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20004a28 	.word	0x20004a28

08004220 <pulse_recording_button>:

void pulse_recording_button() {
 8004220:	b580      	push	{r7, lr}
 8004222:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_SET);
 8004224:	2201      	movs	r2, #1
 8004226:	2120      	movs	r1, #32
 8004228:	4806      	ldr	r0, [pc, #24]	; (8004244 <pulse_recording_button+0x24>)
 800422a:	f004 fb7b 	bl	8008924 <HAL_GPIO_WritePin>
    osDelay(300);
 800422e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004232:	f00d f9fd 	bl	8011630 <osDelay>
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_RESET);
 8004236:	2200      	movs	r2, #0
 8004238:	2120      	movs	r1, #32
 800423a:	4802      	ldr	r0, [pc, #8]	; (8004244 <pulse_recording_button+0x24>)
 800423c:	f004 fb72 	bl	8008924 <HAL_GPIO_WritePin>
}
 8004240:	bf00      	nop
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40020800 	.word	0x40020800

08004248 <enable_recording>:
    osDelay(300);
    HAL_GPIO_WritePin(VTX_BTN1_GPIO_Port, VTX_BTN1_Pin, GPIO_PIN_RESET);

}

void enable_recording() {
 8004248:	b580      	push	{r7, lr}
 800424a:	af00      	add	r7, sp, #0
    if (!is_camera_recording) {
 800424c:	4b05      	ldr	r3, [pc, #20]	; (8004264 <enable_recording+0x1c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d104      	bne.n	800425e <enable_recording+0x16>
        pulse_recording_button();
 8004254:	f7ff ffe4 	bl	8004220 <pulse_recording_button>
        is_camera_recording = 1;
 8004258:	4b02      	ldr	r3, [pc, #8]	; (8004264 <enable_recording+0x1c>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
    }
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000880 	.word	0x20000880

08004268 <enable_camera>:
        pulse_recording_button();
        is_camera_recording = 0;
    }
}

void enable_camera() {
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_SET);
 800426c:	2201      	movs	r2, #1
 800426e:	2104      	movs	r1, #4
 8004270:	4805      	ldr	r0, [pc, #20]	; (8004288 <enable_camera+0x20>)
 8004272:	f004 fb57 	bl	8008924 <HAL_GPIO_WritePin>
    is_camera_recording = 0;
 8004276:	4b05      	ldr	r3, [pc, #20]	; (800428c <enable_camera+0x24>)
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
    is_camera_on = 1;
 800427c:	4b04      	ldr	r3, [pc, #16]	; (8004290 <enable_camera+0x28>)
 800427e:	2201      	movs	r2, #1
 8004280:	701a      	strb	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40020000 	.word	0x40020000
 800428c:	20000880 	.word	0x20000880
 8004290:	20000881 	.word	0x20000881

08004294 <disable_camera>:

void disable_camera() {
 8004294:	b580      	push	{r7, lr}
 8004296:	af00      	add	r7, sp, #0
    if (is_camera_recording) {
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <disable_camera+0x34>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <disable_camera+0x1e>
        pulse_recording_button();
 80042a0:	f7ff ffbe 	bl	8004220 <pulse_recording_button>
        osDelay(1000);
 80042a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a8:	f00d f9c2 	bl	8011630 <osDelay>
        is_camera_recording = 0;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <disable_camera+0x34>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	701a      	strb	r2, [r3, #0]
    }
    is_camera_on = 0;
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <disable_camera+0x38>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(CAM_POWER_GPIO_Port, CAM_POWER_Pin, GPIO_PIN_RESET);
 80042b8:	2200      	movs	r2, #0
 80042ba:	2104      	movs	r1, #4
 80042bc:	4804      	ldr	r0, [pc, #16]	; (80042d0 <disable_camera+0x3c>)
 80042be:	f004 fb31 	bl	8008924 <HAL_GPIO_WritePin>
}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000880 	.word	0x20000880
 80042cc:	20000881 	.word	0x20000881
 80042d0:	40020000 	.word	0x40020000

080042d4 <restart_camera_with_recording>:

void restart_camera_with_recording() {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	af00      	add	r7, sp, #0
    disable_camera();
 80042d8:	f7ff ffdc 	bl	8004294 <disable_camera>
    osDelay(300);
 80042dc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80042e0:	f00d f9a6 	bl	8011630 <osDelay>
    enable_camera();
 80042e4:	f7ff ffc0 	bl	8004268 <enable_camera>
    osDelay(10000);
 80042e8:	f242 7010 	movw	r0, #10000	; 0x2710
 80042ec:	f00d f9a0 	bl	8011630 <osDelay>
    enable_recording();
 80042f0:	f7ff ffaa 	bl	8004248 <enable_recording>
}
 80042f4:	bf00      	nop
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <set_status_led>:

void set_status_led(uint8_t status_state) {
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	4603      	mov	r3, r0
 8004300:	71fb      	strb	r3, [r7, #7]
    // TODO
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <is_vote_asserted>:

uint8_t is_vote_asserted() {
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
    // Todo
    return 0;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
	...

08004320 <rangingTransponder>:

void rangingTransponder() {
 8004320:	b580      	push	{r7, lr}
 8004322:	b0b2      	sub	sp, #200	; 0xc8
 8004324:	af02      	add	r7, sp, #8
    sx1280_custom radio;

        sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8004326:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	4a67      	ldr	r2, [pc, #412]	; (80044cc <rangingTransponder+0x1ac>)
 8004330:	4967      	ldr	r1, [pc, #412]	; (80044d0 <rangingTransponder+0x1b0>)
 8004332:	f7fd fbe9 	bl	8001b08 <sxInit>
        sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8004336:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800433a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800433e:	4965      	ldr	r1, [pc, #404]	; (80044d4 <rangingTransponder+0x1b4>)
 8004340:	4618      	mov	r0, r3
 8004342:	f7fd fc41 	bl	8001bc8 <sxSetDio1Pin>
        HAL_Delay(1);
 8004346:	2001      	movs	r0, #1
 8004348:	f003 f906 	bl	8007558 <HAL_Delay>
        SetStandbyRC(&radio);
 800434c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd fc4c 	bl	8001bee <SetStandbyRC>
        HAL_Delay(1);
 8004356:	2001      	movs	r0, #1
 8004358:	f003 f8fe 	bl	8007558 <HAL_Delay>
        setPacketRanging(&radio);
 800435c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004360:	4618      	mov	r0, r3
 8004362:	f7fd fc9b 	bl	8001c9c <setPacketRanging>
        HAL_Delay(1);
 8004366:	2001      	movs	r0, #1
 8004368:	f003 f8f6 	bl	8007558 <HAL_Delay>
        SetModulationParams(&radio, 0x80, 0x18, 0x01);
 800436c:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8004370:	2301      	movs	r3, #1
 8004372:	2218      	movs	r2, #24
 8004374:	2180      	movs	r1, #128	; 0x80
 8004376:	f7fd fd55 	bl	8001e24 <SetModulationParams>
        HAL_Delay(1);
 800437a:	2001      	movs	r0, #1
 800437c:	f003 f8ec 	bl	8007558 <HAL_Delay>
        SetPacketParamsLora(&radio, 12, 0x80, 0, 0x20, 0x40);
 8004380:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8004384:	2340      	movs	r3, #64	; 0x40
 8004386:	9301      	str	r3, [sp, #4]
 8004388:	2320      	movs	r3, #32
 800438a:	9300      	str	r3, [sp, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	2280      	movs	r2, #128	; 0x80
 8004390:	210c      	movs	r1, #12
 8004392:	f7fd fd68 	bl	8001e66 <SetPacketParamsLora>
        HAL_Delay(1);
 8004396:	2001      	movs	r0, #1
 8004398:	f003 f8de 	bl	8007558 <HAL_Delay>
        SetRfFrequency(&radio);
 800439c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fd fc39 	bl	8001c18 <SetRfFrequency>
        HAL_Delay(1);
 80043a6:	2001      	movs	r0, #1
 80043a8:	f003 f8d6 	bl	8007558 <HAL_Delay>
        SetTxParams(&radio, 0x1F, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
 80043ac:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043b0:	22e0      	movs	r2, #224	; 0xe0
 80043b2:	211f      	movs	r1, #31
 80043b4:	4618      	mov	r0, r3
 80043b6:	f7fd fd01 	bl	8001dbc <SetTxParams>
        HAL_Delay(5);
 80043ba:	2005      	movs	r0, #5
 80043bc:	f003 f8cc 	bl	8007558 <HAL_Delay>
        sxStandardRangingSlave(&radio);
 80043c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7fd fcc7 	bl	8001d58 <sxStandardRangingSlave>
        HAL_Delay(3);
 80043ca:	2003      	movs	r0, #3
 80043cc:	f003 f8c4 	bl	8007558 <HAL_Delay>
        uint16_t mask = 1 << 7 | 1<<11 | 1<<14 | 1<<8;
 80043d0:	f44f 4393 	mov.w	r3, #18816	; 0x4980
 80043d4:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba
        SetDioIrqParams(&radio,mask ,mask, 0, 0);
 80043d8:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 80043dc:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	; 0xba
 80043e0:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80043e4:	2300      	movs	r3, #0
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	2300      	movs	r3, #0
 80043ea:	f7fd fdc9 	bl	8001f80 <SetDioIrqParams>
        HAL_Delay(1);
 80043ee:	2001      	movs	r0, #1
 80043f0:	f003 f8b2 	bl	8007558 <HAL_Delay>

        changeLed(0, 0, 50);
 80043f4:	2232      	movs	r2, #50	; 0x32
 80043f6:	2100      	movs	r1, #0
 80043f8:	2000      	movs	r0, #0
 80043fa:	f001 fa81 	bl	8005900 <changeLed>

        char printBuffer[128];


        HAL_Delay(1);
 80043fe:	2001      	movs	r0, #1
 8004400:	f003 f8aa 	bl	8007558 <HAL_Delay>
        for (;;) {
            ClrIrqStatus(&radio, mask);
 8004404:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	; 0xba
 8004408:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800440c:	4611      	mov	r1, r2
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fdf0 	bl	8001ff4 <ClrIrqStatus>
            HAL_Delay(1);
 8004414:	2001      	movs	r0, #1
 8004416:	f003 f89f 	bl	8007558 <HAL_Delay>

            SetRx(&radio, 0x02, 1000);
 800441a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800441e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004422:	2102      	movs	r1, #2
 8004424:	4618      	mov	r0, r3
 8004426:	f7fd fe50 	bl	80020ca <SetRx>
            HAL_Delay(1);
 800442a:	2001      	movs	r0, #1
 800442c:	f003 f894 	bl	8007558 <HAL_Delay>
            for (int i = 0; i < 1000; i++) {
 8004430:	2300      	movs	r3, #0
 8004432:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004436:	e00f      	b.n	8004458 <rangingTransponder+0x138>
                if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8004438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800443c:	4825      	ldr	r0, [pc, #148]	; (80044d4 <rangingTransponder+0x1b4>)
 800443e:	f004 fa59 	bl	80088f4 <HAL_GPIO_ReadPin>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10d      	bne.n	8004464 <rangingTransponder+0x144>
                    break;
                }
                HAL_Delay(1);
 8004448:	2001      	movs	r0, #1
 800444a:	f003 f885 	bl	8007558 <HAL_Delay>
            for (int i = 0; i < 1000; i++) {
 800444e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004452:	3301      	adds	r3, #1
 8004454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800445c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004460:	dbea      	blt.n	8004438 <rangingTransponder+0x118>
 8004462:	e000      	b.n	8004466 <rangingTransponder+0x146>
                    break;
 8004464:	bf00      	nop
            }
            GetIrqStatus(&radio);
 8004466:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800446a:	4618      	mov	r0, r3
 800446c:	f7fd fddd 	bl	800202a <GetIrqStatus>
            sprintf(printBuffer, "%d\r\n",radio.IrqStatus);
 8004470:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004474:	461a      	mov	r2, r3
 8004476:	463b      	mov	r3, r7
 8004478:	4917      	ldr	r1, [pc, #92]	; (80044d8 <rangingTransponder+0x1b8>)
 800447a:	4618      	mov	r0, r3
 800447c:	f010 ff60 	bl	8015340 <siprintf>

            CDC_Transmit_FS((uint8_t*) printBuffer,
                    MIN(strlen(printBuffer), 128));
 8004480:	463b      	mov	r3, r7
 8004482:	4618      	mov	r0, r3
 8004484:	f7fb fec4 	bl	8000210 <strlen>
 8004488:	4603      	mov	r3, r0
            CDC_Transmit_FS((uint8_t*) printBuffer,
 800448a:	2b7f      	cmp	r3, #127	; 0x7f
 800448c:	d806      	bhi.n	800449c <rangingTransponder+0x17c>
                    MIN(strlen(printBuffer), 128));
 800448e:	463b      	mov	r3, r7
 8004490:	4618      	mov	r0, r3
 8004492:	f7fb febd 	bl	8000210 <strlen>
 8004496:	4603      	mov	r3, r0
            CDC_Transmit_FS((uint8_t*) printBuffer,
 8004498:	b29b      	uxth	r3, r3
 800449a:	e000      	b.n	800449e <rangingTransponder+0x17e>
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	463a      	mov	r2, r7
 80044a0:	4619      	mov	r1, r3
 80044a2:	4610      	mov	r0, r2
 80044a4:	f00f fb94 	bl	8013bd0 <CDC_Transmit_FS>

            changeLed(200, 200, 200);
 80044a8:	22c8      	movs	r2, #200	; 0xc8
 80044aa:	21c8      	movs	r1, #200	; 0xc8
 80044ac:	20c8      	movs	r0, #200	; 0xc8
 80044ae:	f001 fa27 	bl	8005900 <changeLed>
            HAL_Delay(10);
 80044b2:	200a      	movs	r0, #10
 80044b4:	f003 f850 	bl	8007558 <HAL_Delay>
            changeLed(0, 0, 50);
 80044b8:	2232      	movs	r2, #50	; 0x32
 80044ba:	2100      	movs	r1, #0
 80044bc:	2000      	movs	r0, #0
 80044be:	f001 fa1f 	bl	8005900 <changeLed>

            HAL_Delay(1);
 80044c2:	2001      	movs	r0, #1
 80044c4:	f003 f848 	bl	8007558 <HAL_Delay>
            ClrIrqStatus(&radio, mask);
 80044c8:	e79c      	b.n	8004404 <rangingTransponder+0xe4>
 80044ca:	bf00      	nop
 80044cc:	40020000 	.word	0x40020000
 80044d0:	20004984 	.word	0x20004984
 80044d4:	40020800 	.word	0x40020800
 80044d8:	0801985c 	.word	0x0801985c

080044dc <loraTelemetry>:
        }

    }
}

void loraTelemetry() {
 80044dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e0:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 80044e4:	af2c      	add	r7, sp, #176	; 0xb0
    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 80044e6:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 80044ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ee:	4a37      	ldr	r2, [pc, #220]	; (80045cc <loraTelemetry+0xf0>)
 80044f0:	4937      	ldr	r1, [pc, #220]	; (80045d0 <loraTelemetry+0xf4>)
 80044f2:	f7fd fb09 	bl	8001b08 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 80044f6:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 80044fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80044fe:	4935      	ldr	r1, [pc, #212]	; (80045d4 <loraTelemetry+0xf8>)
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd fb61 	bl	8001bc8 <sxSetDio1Pin>

    char printBuffer[256];

    // rx mode
    SetDioIrqParams(&radio, 1 | (1 << 1) | (1 << 6), 1 | 1 << 1, 0, 0); //rxdone/txdone on gpio1, crcerror on as well
 8004506:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 800450a:	2300      	movs	r3, #0
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	2300      	movs	r3, #0
 8004510:	2203      	movs	r2, #3
 8004512:	2143      	movs	r1, #67	; 0x43
 8004514:	f7fd fd34 	bl	8001f80 <SetDioIrqParams>
    HAL_Delay(1);
 8004518:	2001      	movs	r0, #1
 800451a:	f003 f81d 	bl	8007558 <HAL_Delay>
    SetTxParams(&radio, 0x1F, 0xE0);
 800451e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004522:	22e0      	movs	r2, #224	; 0xe0
 8004524:	211f      	movs	r1, #31
 8004526:	4618      	mov	r0, r3
 8004528:	f7fd fc48 	bl	8001dbc <SetTxParams>
    HAL_Delay(1);
 800452c:	2001      	movs	r0, #1
 800452e:	f003 f813 	bl	8007558 <HAL_Delay>

    uint8_t rxStartBufferPointer = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
    TLM_dec.debug = 1337;
    TLM_dec.ranging = 15212;

     */

    float latitude = 52.394821;
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <loraTelemetry+0xfc>)
 800453a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    float longitude = 5.922696;
 800453e:	4b27      	ldr	r3, [pc, #156]	; (80045dc <loraTelemetry+0x100>)
 8004540:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c

    float acc_conversion = 0.0095712904;
 8004544:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <loraTelemetry+0x104>)
 8004546:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    float gyro_conversion = 0.00122173047; //0.070;
 800454a:	4b26      	ldr	r3, [pc, #152]	; (80045e4 <loraTelemetry+0x108>)
 800454c:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    uint32_t pkt_count = 0;
 8004550:	2300      	movs	r3, #0
 8004552:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

    //changeLed(0, 100, 0);
    uint8_t data[4];
    uint32_t lasttime = HAL_GetTick();
 8004556:	f002 fff3 	bl	8007540 <HAL_GetTick>
 800455a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
    uint32_t nowtime = HAL_GetTick();
 800455e:	f002 ffef 	bl	8007540 <HAL_GetTick>
 8004562:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
    uint32_t delay = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    uint8_t is_soft_enabled;
    uint8_t is_armed ;
    uint8_t is_breakwire_connected;
    uint8_t is_camera_on;

    uint8_t button_pressed = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f

    uint8_t controlData[4];

    uint8_t last_cam_control_state = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
    uint8_t debounce_helper = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	f887 321d 	strb.w	r3, [r7, #541]	; 0x21d
    while (1) {

        //SetRx(0x00, 0xffff); // continous rx
        SetRx(&radio, 0x00, 0); // No timeout
 800457e:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004582:	2200      	movs	r2, #0
 8004584:	2100      	movs	r1, #0
 8004586:	4618      	mov	r0, r3
 8004588:	f7fd fd9f 	bl	80020ca <SetRx>
        //SetRx(0x02, 200); // 200 ms timeout
        HAL_Delay(1);
 800458c:	2001      	movs	r0, #1
 800458e:	f002 ffe3 	bl	8007558 <HAL_Delay>
        // wait for reception:
        for (int i = 0; i < 70; i++) { // 50 ms timeout
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 8004598:	e02e      	b.n	80045f8 <loraTelemetry+0x11c>
            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 800459a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800459e:	480d      	ldr	r0, [pc, #52]	; (80045d4 <loraTelemetry+0xf8>)
 80045a0:	f004 f9a8 	bl	80088f4 <HAL_GPIO_ReadPin>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d01e      	beq.n	80045e8 <loraTelemetry+0x10c>
                nowtime = HAL_GetTick();
 80045aa:	f002 ffc9 	bl	8007540 <HAL_GetTick>
 80045ae:	f8c7 0220 	str.w	r0, [r7, #544]	; 0x220
                delay = nowtime - lasttime  ;
 80045b2:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80045b6:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80045ba:	1ad3      	subs	r3, r2, r3
 80045bc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
                lasttime = nowtime;
 80045c0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80045c4:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
                break;
 80045c8:	e01a      	b.n	8004600 <loraTelemetry+0x124>
 80045ca:	bf00      	nop
 80045cc:	40020000 	.word	0x40020000
 80045d0:	20004984 	.word	0x20004984
 80045d4:	40020800 	.word	0x40020800
 80045d8:	4251944c 	.word	0x4251944c
 80045dc:	40bd86ba 	.word	0x40bd86ba
 80045e0:	3c1cd0e7 	.word	0x3c1cd0e7
 80045e4:	3aa02279 	.word	0x3aa02279
            }
            HAL_Delay(1);
 80045e8:	2001      	movs	r0, #1
 80045ea:	f002 ffb5 	bl	8007558 <HAL_Delay>
        for (int i = 0; i < 70; i++) { // 50 ms timeout
 80045ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80045f2:	3301      	adds	r3, #1
 80045f4:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 80045f8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80045fc:	2b45      	cmp	r3, #69	; 0x45
 80045fe:	ddcc      	ble.n	800459a <loraTelemetry+0xbe>
        }

        if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8004600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004604:	48b4      	ldr	r0, [pc, #720]	; (80048d8 <loraTelemetry+0x3fc>)
 8004606:	f004 f975 	bl	80088f4 <HAL_GPIO_ReadPin>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 815f 	beq.w	80048d0 <loraTelemetry+0x3f4>

            pkt_count++;
 8004612:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004616:	3301      	adds	r3, #1
 8004618:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

            GetPacketStatusLora(&radio);
 800461c:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004620:	4618      	mov	r0, r3
 8004622:	f7fd fd71 	bl	8002108 <GetPacketStatusLora>
            GetIrqStatus(&radio);
 8004626:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd fcfd 	bl	800202a <GetIrqStatus>

            ClrIrqStatus(&radio, 1 | (1 << 1) | (1 << 6)); // clear rxdone/txdone Irq and crcerror
 8004630:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8004634:	2143      	movs	r1, #67	; 0x43
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fcdc 	bl	8001ff4 <ClrIrqStatus>
            HAL_Delay(1);
 800463c:	2001      	movs	r0, #1
 800463e:	f002 ff8b 	bl	8007558 <HAL_Delay>
            //GetRxBufferStatus(); // TODO

            ReadBuffer(&radio, rxStartBufferPointer, sizeof(TLM_enc),
 8004642:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8004646:	f897 1237 	ldrb.w	r1, [r7, #567]	; 0x237
 800464a:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 800464e:	221f      	movs	r2, #31
 8004650:	f7fd fc61 	bl	8001f16 <ReadBuffer>
                    (uint8_t*) &TLM_enc);
            //ReadBuffer(&radio, rxStartBufferPointer, sizeof(data), (uint8_t*) data);
            decode_TLM(&TLM_enc, &TLM_dec);
 8004654:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8004658:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe fa12 	bl	8002a88 <decode_TLM>
            //snprintf(printBuffer, 128, "%d,%d,%d,%d,%d,%d,%f,%d,%f,%d,%d,%f,%f,%f,%f,%f\r\n", TLM_dec.packet_type,TLM_dec.flight_state,TLM_dec.is_playing_music,TLM_dec.is_data_logging,
            //        TLM_dec.pin_states,TLM_dec.servo_state, TLM_dec.vbat, TLM_dec.systick, TLM_dec.orientation_quat[0], TLM_dec.acc[2],TLM_dec.gyro[2],TLM_dec.baro, TLM_dec.temp, TLM_dec.vertical_velocity,
            //        TLM_dec.altitude, TLM_dec.ranging);

            is_soft_enabled = (TLM_dec.pin_states & 1);
 8004664:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	f887 321c 	strb.w	r3, [r7, #540]	; 0x21c
            is_armed = (TLM_dec.pin_states & (1 << 1)) >> 1;
 8004670:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8004674:	105b      	asrs	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
            is_breakwire_connected = (TLM_dec.pin_states & (1 << 2)) >> 2;
 8004680:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8004684:	109b      	asrs	r3, r3, #2
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	f887 321a 	strb.w	r3, [r7, #538]	; 0x21a
            is_camera_on = (TLM_dec.pin_states & (1 << 3)) >> 3;
 8004690:	f897 31d8 	ldrb.w	r3, [r7, #472]	; 0x1d8
 8004694:	10db      	asrs	r3, r3, #3
 8004696:	b2db      	uxtb	r3, r3
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	f887 3219 	strb.w	r3, [r7, #537]	; 0x219

            snprintf(printBuffer, 256,
 80046a0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80046a4:	66fb      	str	r3, [r7, #108]	; 0x6c
                    "/*Project Zeggreus,%ld,%ld,%f,%f,%f,%f,%f,%ld,%ld,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%d,%f,%f,%f,%f*/\r\n",
                    TLM_dec.systick, pkt_count, TLM_dec.vbat, TLM_dec.temp,
 80046a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
            snprintf(printBuffer, 256,
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fb ff6c 	bl	8000588 <__aeabi_f2d>
 80046b0:	e9c7 0118 	strd	r0, r1, [r7, #96]	; 0x60
                    TLM_dec.systick, pkt_count, TLM_dec.vbat, TLM_dec.temp,
 80046b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
            snprintf(printBuffer, 256,
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff65 	bl	8000588 <__aeabi_f2d>
 80046be:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 80046c2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
            snprintf(printBuffer, 256,
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fb ff5e 	bl	8000588 <__aeabi_f2d>
 80046cc:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 80046d0:	edd7 7a80 	vldr	s15, [r7, #512]	; 0x200
 80046d4:	ed9f 7a81 	vldr	s14, [pc, #516]	; 80048dc <loraTelemetry+0x400>
 80046d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
            snprintf(printBuffer, 256,
 80046dc:	ee16 0a90 	vmov	r0, s13
 80046e0:	f7fb ff52 	bl	8000588 <__aeabi_f2d>
 80046e4:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
                    TLM_dec.altitude, TLM_dec.baro / 1000, TLM_dec.temp, delay,
 80046e8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
            snprintf(printBuffer, 256,
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fb ff4b 	bl	8000588 <__aeabi_f2d>
 80046f2:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 80046f6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80046fa:	66ba      	str	r2, [r7, #104]	; 0x68
 80046fc:	f8d7 022c 	ldr.w	r0, [r7, #556]	; 0x22c
 8004700:	f7fb ff42 	bl	8000588 <__aeabi_f2d>
 8004704:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8004708:	f8d7 0230 	ldr.w	r0, [r7, #560]	; 0x230
 800470c:	f7fb ff3c 	bl	8000588 <__aeabi_f2d>
 8004710:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
                    TLM_dec.systick, longitude, latitude, TLM_dec.altitude, 0.0,
 8004714:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
            snprintf(printBuffer, 256,
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb ff35 	bl	8000588 <__aeabi_f2d>
 800471e:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
                    TLM_dec.acc[0] * acc_conversion,
 8004722:	f9b7 31f4 	ldrsh.w	r3, [r7, #500]	; 0x1f4
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800472e:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 8004732:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8004736:	ee17 0a90 	vmov	r0, s15
 800473a:	f7fb ff25 	bl	8000588 <__aeabi_f2d>
 800473e:	e9c7 0108 	strd	r0, r1, [r7, #32]
                    TLM_dec.acc[1] * acc_conversion,
 8004742:	f9b7 31f6 	ldrsh.w	r3, [r7, #502]	; 0x1f6
 8004746:	ee07 3a90 	vmov	s15, r3
 800474a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800474e:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8004756:	ee17 0a90 	vmov	r0, s15
 800475a:	f7fb ff15 	bl	8000588 <__aeabi_f2d>
 800475e:	e9c7 0106 	strd	r0, r1, [r7, #24]
                    TLM_dec.acc[2] * acc_conversion,
 8004762:	f9b7 31f8 	ldrsh.w	r3, [r7, #504]	; 0x1f8
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800476e:	edd7 7a8a 	vldr	s15, [r7, #552]	; 0x228
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8004776:	ee17 0a90 	vmov	r0, s15
 800477a:	f7fb ff05 	bl	8000588 <__aeabi_f2d>
 800477e:	e9c7 0104 	strd	r0, r1, [r7, #16]
                    TLM_dec.gyro[0] * gyro_conversion,
 8004782:	f9b7 31fa 	ldrsh.w	r3, [r7, #506]	; 0x1fa
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800478e:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 8004792:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 8004796:	ee17 0a90 	vmov	r0, s15
 800479a:	f7fb fef5 	bl	8000588 <__aeabi_f2d>
 800479e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                    TLM_dec.gyro[1] * gyro_conversion,
 80047a2:	f9b7 31fc 	ldrsh.w	r3, [r7, #508]	; 0x1fc
 80047a6:	ee07 3a90 	vmov	s15, r3
 80047aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ae:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80047b2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80047b6:	ee17 0a90 	vmov	r0, s15
 80047ba:	f7fb fee5 	bl	8000588 <__aeabi_f2d>
 80047be:	4682      	mov	sl, r0
 80047c0:	468b      	mov	fp, r1
                    TLM_dec.gyro[2] * gyro_conversion, radio.rssi,
 80047c2:	f9b7 31fe 	ldrsh.w	r3, [r7, #510]	; 0x1fe
 80047c6:	ee07 3a90 	vmov	s15, r3
 80047ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047ce:	edd7 7a89 	vldr	s15, [r7, #548]	; 0x224
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
            snprintf(printBuffer, 256,
 80047d6:	ee17 0a90 	vmov	r0, s15
 80047da:	f7fb fed5 	bl	8000588 <__aeabi_f2d>
 80047de:	4680      	mov	r8, r0
 80047e0:	4689      	mov	r9, r1
                    TLM_dec.gyro[2] * gyro_conversion, radio.rssi,
 80047e2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
            snprintf(printBuffer, 256,
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fb fece 	bl	8000588 <__aeabi_f2d>
 80047ec:	4605      	mov	r5, r0
 80047ee:	460e      	mov	r6, r1
                    radio.crcError, 1, is_soft_enabled, is_armed,
 80047f0:	f897 31a4 	ldrb.w	r3, [r7, #420]	; 0x1a4
            snprintf(printBuffer, 256,
 80047f4:	607b      	str	r3, [r7, #4]
 80047f6:	f897 421c 	ldrb.w	r4, [r7, #540]	; 0x21c
 80047fa:	f897 021b 	ldrb.w	r0, [r7, #539]	; 0x21b
 80047fe:	f897 121a 	ldrb.w	r1, [r7, #538]	; 0x21a
 8004802:	f897 2219 	ldrb.w	r2, [r7, #537]	; 0x219
                    is_breakwire_connected, is_camera_on,TLM_dec.flight_state), TLM_dec.orientation_quat[0],TLM_dec.orientation_quat[1],TLM_dec.orientation_quat[2],TLM_dec.orientation_quat[3];
 8004806:	f897 31d5 	ldrb.w	r3, [r7, #469]	; 0x1d5
            snprintf(printBuffer, 256,
 800480a:	f107 0c7c 	add.w	ip, r7, #124	; 0x7c
 800480e:	932a      	str	r3, [sp, #168]	; 0xa8
 8004810:	9229      	str	r2, [sp, #164]	; 0xa4
 8004812:	9128      	str	r1, [sp, #160]	; 0xa0
 8004814:	9027      	str	r0, [sp, #156]	; 0x9c
 8004816:	9426      	str	r4, [sp, #152]	; 0x98
 8004818:	2301      	movs	r3, #1
 800481a:	9325      	str	r3, [sp, #148]	; 0x94
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	9124      	str	r1, [sp, #144]	; 0x90
 8004820:	e9cd 5622 	strd	r5, r6, [sp, #136]	; 0x88
 8004824:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
 8004828:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
 800482c:	ed97 7b02 	vldr	d7, [r7, #8]
 8004830:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 8004834:	ed97 7b04 	vldr	d7, [r7, #16]
 8004838:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 800483c:	ed97 7b06 	vldr	d7, [r7, #24]
 8004840:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 8004844:	ed97 7b08 	vldr	d7, [r7, #32]
 8004848:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8004858:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 800485c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004860:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004864:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004868:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800486c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004870:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004872:	920d      	str	r2, [sp, #52]	; 0x34
 8004874:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004878:	930c      	str	r3, [sp, #48]	; 0x30
 800487a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 800487e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004882:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8004886:	ed8d 7b08 	vstr	d7, [sp, #32]
 800488a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800488e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004892:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8004896:	ed8d 7b04 	vstr	d7, [sp, #16]
 800489a:	ed97 7b18 	vldr	d7, [r7, #96]	; 0x60
 800489e:	ed8d 7b02 	vstr	d7, [sp, #8]
 80048a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048aa:	4a0d      	ldr	r2, [pc, #52]	; (80048e0 <loraTelemetry+0x404>)
 80048ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048b0:	4660      	mov	r0, ip
 80048b2:	f010 fd11 	bl	80152d8 <sniprintf>

            //snprintf(printBuffer, 128, "Quaternion:%f, %f, %f, %f\r\n", TLM_dec.orientation_quat[0], TLM_dec.orientation_quat[1], TLM_dec.orientation_quat[2], TLM_dec.orientation_quat[3]);
            //snprintf(printBuffer, 128,
            //       "Quaternion: %d, %d, %d, %d, RSSI: %f, SNR: %f\r\n",
            //       data[0], data[1], data[2], data[3], radio.rssi, radio.snr);
            CDC_Transmit_FS((uint8_t*) printBuffer, strlen(printBuffer));
 80048b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fb fca8 	bl	8000210 <strlen>
 80048c0:	4603      	mov	r3, r0
 80048c2:	b29a      	uxth	r2, r3
 80048c4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80048c8:	4611      	mov	r1, r2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f00f f980 	bl	8013bd0 <CDC_Transmit_FS>
        } else {
        }



        HAL_Delay(1);
 80048d0:	2001      	movs	r0, #1
 80048d2:	f002 fe41 	bl	8007558 <HAL_Delay>
        SetRx(&radio, 0x00, 0); // No timeout
 80048d6:	e652      	b.n	800457e <loraTelemetry+0xa2>
 80048d8:	40020800 	.word	0x40020800
 80048dc:	447a0000 	.word	0x447a0000
 80048e0:	080198b4 	.word	0x080198b4

080048e4 <startupMusic>:
    while (1) {
        ksp();
    };
}

void startupMusic() {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
    // Startup sound
    changeLed(100, 34, 20);
 80048e8:	2214      	movs	r2, #20
 80048ea:	2122      	movs	r1, #34	; 0x22
 80048ec:	2064      	movs	r0, #100	; 0x64
 80048ee:	f001 f807 	bl	8005900 <changeLed>

    changeLed(255, 0, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	20ff      	movs	r0, #255	; 0xff
 80048f8:	f001 f802 	bl	8005900 <changeLed>
    playtone(1046, 100, 10);
 80048fc:	220a      	movs	r2, #10
 80048fe:	2164      	movs	r1, #100	; 0x64
 8004900:	f240 4016 	movw	r0, #1046	; 0x416
 8004904:	f000 ff04 	bl	8005710 <playtone>
    HAL_Delay(100);
 8004908:	2064      	movs	r0, #100	; 0x64
 800490a:	f002 fe25 	bl	8007558 <HAL_Delay>
    changeLed(0, 255, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	21ff      	movs	r1, #255	; 0xff
 8004912:	2000      	movs	r0, #0
 8004914:	f000 fff4 	bl	8005900 <changeLed>
    playtone(1319, 100, 10);
 8004918:	220a      	movs	r2, #10
 800491a:	2164      	movs	r1, #100	; 0x64
 800491c:	f240 5027 	movw	r0, #1319	; 0x527
 8004920:	f000 fef6 	bl	8005710 <playtone>
    return;
 8004924:	bf00      	nop

        // reset to defaults
        //htim3.Instance->CCR2 = 0;
        //htim3.Instance->ARR = 256 - 1;
    }
}
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	4603      	mov	r3, r0
 8004930:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == IMU_INT_Pin && imu_ready) {
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004938:	d106      	bne.n	8004948 <HAL_GPIO_EXTI_Callback+0x20>
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_GPIO_EXTI_Callback+0x28>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d002      	beq.n	8004948 <HAL_GPIO_EXTI_Callback+0x20>
        LSM_ReadDMA(&imu);
 8004942:	4804      	ldr	r0, [pc, #16]	; (8004954 <HAL_GPIO_EXTI_Callback+0x2c>)
 8004944:	f7fc fd46 	bl	80013d4 <LSM_ReadDMA>
    }
}
 8004948:	bf00      	nop
 800494a:	3708      	adds	r7, #8
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20000886 	.word	0x20000886
 8004954:	20004860 	.word	0x20004860

08004958 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI2) {
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a04      	ldr	r2, [pc, #16]	; (8004978 <HAL_SPI_TxRxCpltCallback+0x20>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d102      	bne.n	8004970 <HAL_SPI_TxRxCpltCallback+0x18>
        LSM_ReadDMA_Complete(&imu);
 800496a:	4804      	ldr	r0, [pc, #16]	; (800497c <HAL_SPI_TxRxCpltCallback+0x24>)
 800496c:	f7fc fd63 	bl	8001436 <LSM_ReadDMA_Complete>
    }
}
 8004970:	bf00      	nop
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40003800 	.word	0x40003800
 800497c:	20004860 	.word	0x20004860

08004980 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004984:	f5ad 7d33 	sub.w	sp, sp, #716	; 0x2cc
 8004988:	af1c      	add	r7, sp, #112	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800498a:	f002 fda3 	bl	80074d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800498e:	f000 fa87 	bl	8004ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004992:	f000 fdb5 	bl	8005500 <MX_GPIO_Init>
  MX_DMA_Init();
 8004996:	f000 fd75 	bl	8005484 <MX_DMA_Init>
  MX_TIM3_Init();
 800499a:	f000 fca3 	bl	80052e4 <MX_TIM3_Init>
  MX_SPI2_Init();
 800499e:	f000 fbd1 	bl	8005144 <MX_SPI2_Init>
  MX_SPI3_Init();
 80049a2:	f000 fc05 	bl	80051b0 <MX_SPI3_Init>
  MX_TIM2_Init();
 80049a6:	f000 fc39 	bl	800521c <MX_TIM2_Init>
  MX_SPI1_Init();
 80049aa:	f000 fb95 	bl	80050d8 <MX_SPI1_Init>
  MX_FATFS_Init();
 80049ae:	f00a fbdd 	bl	800f16c <MX_FATFS_Init>
  MX_I2C3_Init();
 80049b2:	f000 fb63 	bl	800507c <MX_I2C3_Init>
  MX_ADC1_Init();
 80049b6:	f000 fb0f 	bl	8004fd8 <MX_ADC1_Init>
  MX_TIM6_Init();
 80049ba:	f000 fd2d 	bl	8005418 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80049be:	210c      	movs	r1, #12
 80049c0:	489d      	ldr	r0, [pc, #628]	; (8004c38 <main+0x2b8>)
 80049c2:	f008 fa27 	bl	800ce14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80049c6:	2104      	movs	r1, #4
 80049c8:	489b      	ldr	r0, [pc, #620]	; (8004c38 <main+0x2b8>)
 80049ca:	f008 fa23 	bl	800ce14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80049ce:	2108      	movs	r1, #8
 80049d0:	4899      	ldr	r0, [pc, #612]	; (8004c38 <main+0x2b8>)
 80049d2:	f008 fa1f 	bl	800ce14 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80049d6:	2100      	movs	r1, #0
 80049d8:	4897      	ldr	r0, [pc, #604]	; (8004c38 <main+0x2b8>)
 80049da:	f008 fa1b 	bl	800ce14 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80049de:	210c      	movs	r1, #12
 80049e0:	4896      	ldr	r0, [pc, #600]	; (8004c3c <main+0x2bc>)
 80049e2:	f008 fa17 	bl	800ce14 <HAL_TIM_PWM_Start>

    HAL_TIM_Base_Start(&htim6);
 80049e6:	4896      	ldr	r0, [pc, #600]	; (8004c40 <main+0x2c0>)
 80049e8:	f008 f9a1 	bl	800cd2e <HAL_TIM_Base_Start>

    /* init code for USB_DEVICE */
    MX_USB_DEVICE_Init();
 80049ec:	f00f f81e 	bl	8013a2c <MX_USB_DEVICE_Init>

    startupMusic();
 80049f0:	f7ff ff78 	bl	80048e4 <startupMusic>
    //while (1) {rick();}

    changeLed(90, 0, 0);
 80049f4:	2200      	movs	r2, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	205a      	movs	r0, #90	; 0x5a
 80049fa:	f000 ff81 	bl	8005900 <changeLed>

    htim3.Instance->CCR2 = 0;
 80049fe:	4b8e      	ldr	r3, [pc, #568]	; (8004c38 <main+0x2b8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2200      	movs	r2, #0
 8004a04:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 8004a06:	4b8c      	ldr	r3, [pc, #560]	; (8004c38 <main+0x2b8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	22ff      	movs	r2, #255	; 0xff
 8004a0c:	62da      	str	r2, [r3, #44]	; 0x2c

    char printBuffer[128];
    HAL_Delay(500);
 8004a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004a12:	f002 fda1 	bl	8007558 <HAL_Delay>

    //BWtest();

    //loraTesting(is_tx);
    // setting to go into ground station mode
    if (!is_tx) {
 8004a16:	4b8b      	ldr	r3, [pc, #556]	; (8004c44 <main+0x2c4>)
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d101      	bne.n	8004a22 <main+0xa2>
        loraTelemetry();
 8004a1e:	f7ff fd5d 	bl	80044dc <loraTelemetry>
    }
    if (is_ranging_transponder) {
 8004a22:	4b89      	ldr	r3, [pc, #548]	; (8004c48 <main+0x2c8>)
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <main+0xae>
        rangingTransponder();
 8004a2a:	f7ff fc79 	bl	8004320 <rangingTransponder>
    }
    //servoToggleTest();
    if (!HAL_GPIO_ReadPin(EXPORT_BLACKBOX_GPIO_Port, EXPORT_BLACKBOX_Pin)) {
 8004a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004a32:	4886      	ldr	r0, [pc, #536]	; (8004c4c <main+0x2cc>)
 8004a34:	f003 ff5e 	bl	80088f4 <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f040 8134 	bne.w	8004ca8 <main+0x328>

        W25qxx_Initnon();
 8004a40:	f7fe fc42 	bl	80032c8 <W25qxx_Initnon>
        changeLed(200, 200, 200);
 8004a44:	22c8      	movs	r2, #200	; 0xc8
 8004a46:	21c8      	movs	r1, #200	; 0xc8
 8004a48:	20c8      	movs	r0, #200	; 0xc8
 8004a4a:	f000 ff59 	bl	8005900 <changeLed>
        playtone(1000, 1000, 50);
 8004a4e:	2232      	movs	r2, #50	; 0x32
 8004a50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a58:	f000 fe5a 	bl	8005710 <playtone>
        HAL_Delay(10000);
 8004a5c:	f242 7010 	movw	r0, #10000	; 0x2710
 8004a60:	f002 fd7a 	bl	8007558 <HAL_Delay>


        TLM_decoded flash_dec;
        uint32_t counter = 0;
 8004a64:	2300      	movs	r3, #0
 8004a66:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

        uint8_t testblock[100];
        testblock[0] = 110;
 8004a6a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a6e:	226e      	movs	r2, #110	; 0x6e
 8004a70:	701a      	strb	r2, [r3, #0]
        testblock[1] = 123;
 8004a72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a76:	227b      	movs	r2, #123	; 0x7b
 8004a78:	705a      	strb	r2, [r3, #1]

        // wait 10 sec.
        while (counter < 65536) {
 8004a7a:	e10a      	b.n	8004c92 <main+0x312>
            //W25qxx_WritePage(testblock, counter, 0, 100);
            W25qxx_ReadPageNon((uint8_t*) &chunk_of_flash, counter, 0, 256);
 8004a7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a80:	2200      	movs	r2, #0
 8004a82:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8004a86:	4872      	ldr	r0, [pc, #456]	; (8004c50 <main+0x2d0>)
 8004a88:	f7fe fd9e 	bl	80035c8 <W25qxx_ReadPageNon>
            playtone(1000, 8, 50);
 8004a8c:	2232      	movs	r2, #50	; 0x32
 8004a8e:	2108      	movs	r1, #8
 8004a90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a94:	f000 fe3c 	bl	8005710 <playtone>
            //uint32_t uid = W25qxx_ReadID();
            HAL_Delay(1);
 8004a98:	2001      	movs	r0, #1
 8004a9a:	f002 fd5d 	bl	8007558 <HAL_Delay>


            for (int j = 0; j < 7; j++) {
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8004aa4:	e0e8      	b.n	8004c78 <main+0x2f8>
                decode_Blackbox(&chunk_of_flash.packets[j], &flash_dec);
 8004aa6:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4a67      	ldr	r2, [pc, #412]	; (8004c50 <main+0x2d0>)
 8004ab4:	4413      	add	r3, r2
 8004ab6:	3303      	adds	r3, #3
 8004ab8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004abc:	4611      	mov	r1, r2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe f90a 	bl	8002cd8 <decode_Blackbox>
                sprintf(blackbox_printBuffer,
                        "%d,%d,%d,%d,%ld,%f,%f,%f,%f,%f,%ld,%ld,%ld,%ld,%ld,%ld,%f,%f,%f,%f\r\n",
                        chunk_of_flash.blockinfo[0], flash_dec.packet_type, flash_dec.flight_state,
 8004ac4:	4b62      	ldr	r3, [pc, #392]	; (8004c50 <main+0x2d0>)
 8004ac6:	781b      	ldrb	r3, [r3, #0]
                sprintf(blackbox_printBuffer,
 8004ac8:	657b      	str	r3, [r7, #84]	; 0x54
                        chunk_of_flash.blockinfo[0], flash_dec.packet_type, flash_dec.flight_state,
 8004aca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ace:	781b      	ldrb	r3, [r3, #0]
                sprintf(blackbox_printBuffer,
 8004ad0:	653b      	str	r3, [r7, #80]	; 0x50
                        chunk_of_flash.blockinfo[0], flash_dec.packet_type, flash_dec.flight_state,
 8004ad2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ad6:	785b      	ldrb	r3, [r3, #1]
                sprintf(blackbox_printBuffer,
 8004ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
                        flash_dec.pin_states, flash_dec.systick,
 8004ada:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ade:	791b      	ldrb	r3, [r3, #4]
                sprintf(blackbox_printBuffer,
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004ae6:	6899      	ldr	r1, [r3, #8]
 8004ae8:	6479      	str	r1, [r7, #68]	; 0x44
                        flash_dec.vbat, flash_dec.orientation_quat[0],
 8004aea:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004aee:	68db      	ldr	r3, [r3, #12]
                sprintf(blackbox_printBuffer,
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fb fd49 	bl	8000588 <__aeabi_f2d>
 8004af6:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
                        flash_dec.vbat, flash_dec.orientation_quat[0],
 8004afa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004afe:	691b      	ldr	r3, [r3, #16]
                sprintf(blackbox_printBuffer,
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fb fd41 	bl	8000588 <__aeabi_f2d>
 8004b06:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
                        flash_dec.orientation_quat[1],
 8004b0a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b0e:	695b      	ldr	r3, [r3, #20]
                sprintf(blackbox_printBuffer,
 8004b10:	4618      	mov	r0, r3
 8004b12:	f7fb fd39 	bl	8000588 <__aeabi_f2d>
 8004b16:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
                        flash_dec.orientation_quat[2],
 8004b1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b1e:	699b      	ldr	r3, [r3, #24]
                sprintf(blackbox_printBuffer,
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7fb fd31 	bl	8000588 <__aeabi_f2d>
 8004b26:	e9c7 0108 	strd	r0, r1, [r7, #32]
                        flash_dec.orientation_quat[3], flash_dec.acc[0],
 8004b2a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b2e:	69db      	ldr	r3, [r3, #28]
                sprintf(blackbox_printBuffer,
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fb fd29 	bl	8000588 <__aeabi_f2d>
 8004b36:	e9c7 0106 	strd	r0, r1, [r7, #24]
                        flash_dec.orientation_quat[3], flash_dec.acc[0],
 8004b3a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
                sprintf(blackbox_printBuffer,
 8004b42:	643b      	str	r3, [r7, #64]	; 0x40
                        flash_dec.acc[1], flash_dec.acc[2],
 8004b44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b48:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
                sprintf(blackbox_printBuffer,
 8004b4c:	617b      	str	r3, [r7, #20]
                        flash_dec.acc[1], flash_dec.acc[2],
 8004b4e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b52:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
                sprintf(blackbox_printBuffer,
 8004b56:	613b      	str	r3, [r7, #16]
                        flash_dec.gyro[0], flash_dec.gyro[1],
 8004b58:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b5c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
                sprintf(blackbox_printBuffer,
 8004b60:	60fb      	str	r3, [r7, #12]
                        flash_dec.gyro[0], flash_dec.gyro[1],
 8004b62:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b66:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
                sprintf(blackbox_printBuffer,
 8004b6a:	60bb      	str	r3, [r7, #8]
                        flash_dec.gyro[2], flash_dec.baro, flash_dec.temp,
 8004b6c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b70:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
                sprintf(blackbox_printBuffer,
 8004b74:	607b      	str	r3, [r7, #4]
                        flash_dec.gyro[2], flash_dec.baro, flash_dec.temp,
 8004b76:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                sprintf(blackbox_printBuffer,
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fb fd03 	bl	8000588 <__aeabi_f2d>
 8004b82:	4682      	mov	sl, r0
 8004b84:	468b      	mov	fp, r1
                        flash_dec.gyro[2], flash_dec.baro, flash_dec.temp,
 8004b86:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                sprintf(blackbox_printBuffer,
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f7fb fcfb 	bl	8000588 <__aeabi_f2d>
 8004b92:	4680      	mov	r8, r0
 8004b94:	4689      	mov	r9, r1
                        flash_dec.altitude, flash_dec.vertical_velocity);
 8004b96:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                sprintf(blackbox_printBuffer,
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f7fb fcf3 	bl	8000588 <__aeabi_f2d>
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	460e      	mov	r6, r1
                        flash_dec.altitude, flash_dec.vertical_velocity);
 8004ba6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                sprintf(blackbox_printBuffer,
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fb fceb 	bl	8000588 <__aeabi_f2d>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	e9cd 341a 	strd	r3, r4, [sp, #104]	; 0x68
 8004bba:	e9cd 5618 	strd	r5, r6, [sp, #96]	; 0x60
 8004bbe:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
 8004bc2:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8004bc6:	687c      	ldr	r4, [r7, #4]
 8004bc8:	9413      	str	r4, [sp, #76]	; 0x4c
 8004bca:	68bc      	ldr	r4, [r7, #8]
 8004bcc:	9412      	str	r4, [sp, #72]	; 0x48
 8004bce:	68fc      	ldr	r4, [r7, #12]
 8004bd0:	9411      	str	r4, [sp, #68]	; 0x44
 8004bd2:	693c      	ldr	r4, [r7, #16]
 8004bd4:	9410      	str	r4, [sp, #64]	; 0x40
 8004bd6:	697c      	ldr	r4, [r7, #20]
 8004bd8:	940f      	str	r4, [sp, #60]	; 0x3c
 8004bda:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8004bdc:	940e      	str	r4, [sp, #56]	; 0x38
 8004bde:	ed97 7b06 	vldr	d7, [r7, #24]
 8004be2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004be6:	ed97 7b08 	vldr	d7, [r7, #32]
 8004bea:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004bee:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004bf2:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004bf6:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004bfa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004bfe:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004c02:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004c06:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c08:	9102      	str	r1, [sp, #8]
 8004c0a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004c0c:	9101      	str	r1, [sp, #4]
 8004c0e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004c10:	9100      	str	r1, [sp, #0]
 8004c12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c14:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004c16:	490f      	ldr	r1, [pc, #60]	; (8004c54 <main+0x2d4>)
 8004c18:	480f      	ldr	r0, [pc, #60]	; (8004c58 <main+0x2d8>)
 8004c1a:	f010 fb91 	bl	8015340 <siprintf>
                //sprintf(blackbox_printBuffer,"%ld\r\n",uid);

                CDC_Transmit_FS((uint8_t*) blackbox_printBuffer,
                        MIN(strlen(blackbox_printBuffer), 256));
 8004c1e:	480e      	ldr	r0, [pc, #56]	; (8004c58 <main+0x2d8>)
 8004c20:	f7fb faf6 	bl	8000210 <strlen>
 8004c24:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) blackbox_printBuffer,
 8004c26:	2bff      	cmp	r3, #255	; 0xff
 8004c28:	d818      	bhi.n	8004c5c <main+0x2dc>
                        MIN(strlen(blackbox_printBuffer), 256));
 8004c2a:	480b      	ldr	r0, [pc, #44]	; (8004c58 <main+0x2d8>)
 8004c2c:	f7fb faf0 	bl	8000210 <strlen>
 8004c30:	4603      	mov	r3, r0
                CDC_Transmit_FS((uint8_t*) blackbox_printBuffer,
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	e014      	b.n	8004c60 <main+0x2e0>
 8004c36:	bf00      	nop
 8004c38:	20004944 	.word	0x20004944
 8004c3c:	20004c04 	.word	0x20004c04
 8004c40:	20004b68 	.word	0x20004b68
 8004c44:	20000885 	.word	0x20000885
 8004c48:	20000884 	.word	0x20000884
 8004c4c:	40020000 	.word	0x40020000
 8004c50:	200046b4 	.word	0x200046b4
 8004c54:	08019b10 	.word	0x08019b10
 8004c58:	20004a2c 	.word	0x20004a2c
 8004c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c60:	4619      	mov	r1, r3
 8004c62:	4878      	ldr	r0, [pc, #480]	; (8004e44 <main+0x4c4>)
 8004c64:	f00e ffb4 	bl	8013bd0 <CDC_Transmit_FS>
                HAL_Delay(15);
 8004c68:	200f      	movs	r0, #15
 8004c6a:	f002 fc75 	bl	8007558 <HAL_Delay>
            for (int j = 0; j < 7; j++) {
 8004c6e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004c72:	3301      	adds	r3, #1
 8004c74:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8004c78:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	f77f af12 	ble.w	8004aa6 <main+0x126>
            }


            counter++;
 8004c82:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004c86:	3301      	adds	r3, #1
 8004c88:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
            HAL_Delay(10);
 8004c8c:	200a      	movs	r0, #10
 8004c8e:	f002 fc63 	bl	8007558 <HAL_Delay>
        while (counter < 65536) {
 8004c92:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c9a:	f4ff aeef 	bcc.w	8004a7c <main+0xfc>

       }

       changeLed(0, 0, 200);
 8004c9e:	22c8      	movs	r2, #200	; 0xc8
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f000 fe2c 	bl	8005900 <changeLed>

    }

    // LSM6dso setup
    orientation_init(&ori);
 8004ca8:	4867      	ldr	r0, [pc, #412]	; (8004e48 <main+0x4c8>)
 8004caa:	f001 fe18 	bl	80068de <orientation_init>
    uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port, SPI2_NSS_Pin);
 8004cae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cb2:	4a66      	ldr	r2, [pc, #408]	; (8004e4c <main+0x4cc>)
 8004cb4:	4966      	ldr	r1, [pc, #408]	; (8004e50 <main+0x4d0>)
 8004cb6:	4867      	ldr	r0, [pc, #412]	; (8004e54 <main+0x4d4>)
 8004cb8:	f7fc fa06 	bl	80010c8 <LSM_init>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
    __HAL_TIM_SET_COUNTER(&htim6,0);
 8004cc2:	4b65      	ldr	r3, [pc, #404]	; (8004e58 <main+0x4d8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	625a      	str	r2, [r3, #36]	; 0x24
    imu_ready = 1;
 8004cca:	4b64      	ldr	r3, [pc, #400]	; (8004e5c <main+0x4dc>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	701a      	strb	r2, [r3, #0]

    uint8_t barostatus = SPL06_Init(&baro, &hi2c3, 0x77);
 8004cd0:	2277      	movs	r2, #119	; 0x77
 8004cd2:	4963      	ldr	r1, [pc, #396]	; (8004e60 <main+0x4e0>)
 8004cd4:	4863      	ldr	r0, [pc, #396]	; (8004e64 <main+0x4e4>)
 8004cd6:	f7fc fc0b 	bl	80014f0 <SPL06_Init>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	f887 324e 	strb.w	r3, [r7, #590]	; 0x24e

    if (barostatus != 5) {
 8004ce0:	f897 324e 	ldrb.w	r3, [r7, #590]	; 0x24e
 8004ce4:	2b05      	cmp	r3, #5
 8004ce6:	d00f      	beq.n	8004d08 <main+0x388>

            HAL_Delay(100);
 8004ce8:	2064      	movs	r0, #100	; 0x64
 8004cea:	f002 fc35 	bl	8007558 <HAL_Delay>
            changeLed(100, 0, 0);
 8004cee:	2200      	movs	r2, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2064      	movs	r0, #100	; 0x64
 8004cf4:	f000 fe04 	bl	8005900 <changeLed>
            HAL_Delay(100);
 8004cf8:	2064      	movs	r0, #100	; 0x64
 8004cfa:	f002 fc2d 	bl	8007558 <HAL_Delay>
            changeLed(0, 0, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2100      	movs	r1, #0
 8004d02:	2000      	movs	r0, #0
 8004d04:	f000 fdfc 	bl	8005900 <changeLed>

    }

    //SDTesting();

    float yrot = 0;
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    uint32_t lasttime = HAL_GetTick();
 8004d10:	f002 fc16 	bl	8007540 <HAL_GetTick>
 8004d14:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
    uint32_t nowtime = HAL_GetTick();
 8004d18:	f002 fc12 	bl	8007540 <HAL_GetTick>
 8004d1c:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
    float dt = 0;
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    uint16_t rawadc;

    uint32_t counter = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of BuzzerQueue */
  osMessageQDef(BuzzerQueue, 6, uint16_t);
 8004d2e:	4b4e      	ldr	r3, [pc, #312]	; (8004e68 <main+0x4e8>)
 8004d30:	f507 74d4 	add.w	r4, r7, #424	; 0x1a8
 8004d34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004d36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  BuzzerQueueHandle = osMessageCreate(osMessageQ(BuzzerQueue), NULL);
 8004d3a:	f507 73d4 	add.w	r3, r7, #424	; 0x1a8
 8004d3e:	2100      	movs	r1, #0
 8004d40:	4618      	mov	r0, r3
 8004d42:	f00c fc89 	bl	8011658 <osMessageCreate>
 8004d46:	4602      	mov	r2, r0
 8004d48:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <main+0x4ec>)
 8004d4a:	601a      	str	r2, [r3, #0]
    /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ledTask */
  osThreadDef(ledTask, StartLedTask, osPriorityBelowNormal, 0, 128);
 8004d4c:	4b48      	ldr	r3, [pc, #288]	; (8004e70 <main+0x4f0>)
 8004d4e:	f507 74c6 	add.w	r4, r7, #396	; 0x18c
 8004d52:	461d      	mov	r5, r3
 8004d54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledTaskHandle = osThreadCreate(osThread(ledTask), NULL);
 8004d60:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8004d64:	2100      	movs	r1, #0
 8004d66:	4618      	mov	r0, r3
 8004d68:	f00c fc16 	bl	8011598 <osThreadCreate>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <main+0x4f4>)
 8004d70:	601a      	str	r2, [r3, #0]

  /* definition and creation of musicTask */
  osThreadDef(musicTask, StartMusicTask, osPriorityIdle, 0, 128);
 8004d72:	4b41      	ldr	r3, [pc, #260]	; (8004e78 <main+0x4f8>)
 8004d74:	f507 74b8 	add.w	r4, r7, #368	; 0x170
 8004d78:	461d      	mov	r5, r3
 8004d7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004d7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004d7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004d82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  musicTaskHandle = osThreadCreate(osThread(musicTask), NULL);
 8004d86:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f00c fc03 	bl	8011598 <osThreadCreate>
 8004d92:	4602      	mov	r2, r0
 8004d94:	4b39      	ldr	r3, [pc, #228]	; (8004e7c <main+0x4fc>)
 8004d96:	601a      	str	r2, [r3, #0]

  /* definition and creation of stateMachineTas */
  osThreadDef(stateMachineTas, startStateMachine, osPriorityHigh, 0, 256);
 8004d98:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004d9c:	4a38      	ldr	r2, [pc, #224]	; (8004e80 <main+0x500>)
 8004d9e:	461c      	mov	r4, r3
 8004da0:	4615      	mov	r5, r2
 8004da2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004da4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004da6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004daa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stateMachineTasHandle = osThreadCreate(osThread(stateMachineTas), NULL);
 8004dae:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8004db2:	2100      	movs	r1, #0
 8004db4:	4618      	mov	r0, r3
 8004db6:	f00c fbef 	bl	8011598 <osThreadCreate>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	4b31      	ldr	r3, [pc, #196]	; (8004e84 <main+0x504>)
 8004dbe:	601a      	str	r2, [r3, #0]

  /* definition and creation of telemTask */
  osThreadDef(telemTask, StartTelemTask, osPriorityNormal, 0, 256);
 8004dc0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004dc4:	4a30      	ldr	r2, [pc, #192]	; (8004e88 <main+0x508>)
 8004dc6:	461c      	mov	r4, r3
 8004dc8:	4615      	mov	r5, r2
 8004dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004dce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  telemTaskHandle = osThreadCreate(osThread(telemTask), NULL);
 8004dd6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f00c fbdb 	bl	8011598 <osThreadCreate>
 8004de2:	4602      	mov	r2, r0
 8004de4:	4b29      	ldr	r3, [pc, #164]	; (8004e8c <main+0x50c>)
 8004de6:	601a      	str	r2, [r3, #0]

  /* definition and creation of baroTask */
  osThreadDef(baroTask, StartBaroTask, osPriorityNormal, 0, 128);
 8004de8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004dec:	4a28      	ldr	r2, [pc, #160]	; (8004e90 <main+0x510>)
 8004dee:	461c      	mov	r4, r3
 8004df0:	4615      	mov	r5, r2
 8004df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004df6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dfa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  baroTaskHandle = osThreadCreate(osThread(baroTask), NULL);
 8004dfe:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f00c fbc7 	bl	8011598 <osThreadCreate>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b21      	ldr	r3, [pc, #132]	; (8004e94 <main+0x514>)
 8004e0e:	601a      	str	r2, [r3, #0]

  /* definition and creation of blackboxTask */
  osThreadDef(blackboxTask, StartBlackboxTask, osPriorityBelowNormal, 0, 256);
 8004e10:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e14:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <main+0x518>)
 8004e16:	461c      	mov	r4, r3
 8004e18:	4615      	mov	r5, r2
 8004e1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004e1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004e1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004e22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blackboxTaskHandle = osThreadCreate(osThread(blackboxTask), NULL);
 8004e26:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f00c fbb3 	bl	8011598 <osThreadCreate>
 8004e32:	4602      	mov	r2, r0
 8004e34:	4b19      	ldr	r3, [pc, #100]	; (8004e9c <main+0x51c>)
 8004e36:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
    /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004e38:	f00c fb97 	bl	801156a <osKernelStart>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

        HAL_Delay(1);
 8004e3c:	2001      	movs	r0, #1
 8004e3e:	f002 fb8b 	bl	8007558 <HAL_Delay>
 8004e42:	e7fb      	b.n	8004e3c <main+0x4bc>
 8004e44:	20004a2c 	.word	0x20004a2c
 8004e48:	20004618 	.word	0x20004618
 8004e4c:	40020400 	.word	0x40020400
 8004e50:	20004808 	.word	0x20004808
 8004e54:	20004860 	.word	0x20004860
 8004e58:	20004b68 	.word	0x20004b68
 8004e5c:	20000886 	.word	0x20000886
 8004e60:	200047b4 	.word	0x200047b4
 8004e64:	20004b2c 	.word	0x20004b2c
 8004e68:	08019b58 	.word	0x08019b58
 8004e6c:	20004a28 	.word	0x20004a28
 8004e70:	08019b70 	.word	0x08019b70
 8004e74:	20004940 	.word	0x20004940
 8004e78:	08019b98 	.word	0x08019b98
 8004e7c:	20004c48 	.word	0x20004c48
 8004e80:	08019bc4 	.word	0x08019bc4
 8004e84:	20004ba8 	.word	0x20004ba8
 8004e88:	08019bec 	.word	0x08019bec
 8004e8c:	20004d0c 	.word	0x20004d0c
 8004e90:	08019c14 	.word	0x08019c14
 8004e94:	20004c44 	.word	0x20004c44
 8004e98:	08019c40 	.word	0x08019c40
 8004e9c:	200049dc 	.word	0x200049dc

08004ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b0ac      	sub	sp, #176	; 0xb0
 8004ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ea6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004eaa:	2234      	movs	r2, #52	; 0x34
 8004eac:	2100      	movs	r1, #0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f00f fba5 	bl	80145fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004eb4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
 8004ebc:	605a      	str	r2, [r3, #4]
 8004ebe:	609a      	str	r2, [r3, #8]
 8004ec0:	60da      	str	r2, [r3, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004ec4:	f107 030c 	add.w	r3, r7, #12
 8004ec8:	225c      	movs	r2, #92	; 0x5c
 8004eca:	2100      	movs	r1, #0
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f00f fb96 	bl	80145fe <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <SystemClock_Config+0x130>)
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <SystemClock_Config+0x130>)
 8004edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ee2:	4b3b      	ldr	r3, [pc, #236]	; (8004fd0 <SystemClock_Config+0x130>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	607b      	str	r3, [r7, #4]
 8004ef2:	4b38      	ldr	r3, [pc, #224]	; (8004fd4 <SystemClock_Config+0x134>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <SystemClock_Config+0x134>)
 8004ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	4b35      	ldr	r3, [pc, #212]	; (8004fd4 <SystemClock_Config+0x134>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004f12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004f16:	2302      	movs	r3, #2
 8004f18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004f1c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004f20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004f24:	2304      	movs	r3, #4
 8004f26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8004f2a:	23b4      	movs	r3, #180	; 0xb4
 8004f2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004f30:	2302      	movs	r3, #2
 8004f32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8004f36:	2308      	movs	r3, #8
 8004f38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004f42:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004f46:	4618      	mov	r0, r3
 8004f48:	f006 fd06 	bl	800b958 <HAL_RCC_OscConfig>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8004f52:	f001 fc0d 	bl	8006770 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004f56:	f005 fe99 	bl	800ac8c <HAL_PWREx_EnableOverDrive>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004f60:	f001 fc06 	bl	8006770 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004f64:	230f      	movs	r3, #15
 8004f66:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004f68:	2302      	movs	r3, #2
 8004f6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004f70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004f74:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f7a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004f7c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f80:	2105      	movs	r1, #5
 8004f82:	4618      	mov	r0, r3
 8004f84:	f005 fed2 	bl	800ad2c <HAL_RCC_ClockConfig>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d001      	beq.n	8004f92 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8004f8e:	f001 fbef 	bl	8006770 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8004f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f96:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 4;
 8004f98:	2304      	movs	r3, #4
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8004f9c:	2360      	movs	r3, #96	; 0x60
 8004f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8004fac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004fb0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fb2:	f107 030c 	add.w	r3, r7, #12
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f006 f804 	bl	800afc4 <HAL_RCCEx_PeriphCLKConfig>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <SystemClock_Config+0x126>
  {
    Error_Handler();
 8004fc2:	f001 fbd5 	bl	8006770 <Error_Handler>
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	37b0      	adds	r7, #176	; 0xb0
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40023800 	.word	0x40023800
 8004fd4:	40007000 	.word	0x40007000

08004fd8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004fde:	463b      	mov	r3, r7
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	605a      	str	r2, [r3, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
 8004fe8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004fea:	4b21      	ldr	r3, [pc, #132]	; (8005070 <MX_ADC1_Init+0x98>)
 8004fec:	4a21      	ldr	r2, [pc, #132]	; (8005074 <MX_ADC1_Init+0x9c>)
 8004fee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004ff0:	4b1f      	ldr	r3, [pc, #124]	; (8005070 <MX_ADC1_Init+0x98>)
 8004ff2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ff6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004ff8:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <MX_ADC1_Init+0x98>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8004ffe:	4b1c      	ldr	r3, [pc, #112]	; (8005070 <MX_ADC1_Init+0x98>)
 8005000:	2200      	movs	r2, #0
 8005002:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <MX_ADC1_Init+0x98>)
 8005006:	2200      	movs	r2, #0
 8005008:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800500a:	4b19      	ldr	r3, [pc, #100]	; (8005070 <MX_ADC1_Init+0x98>)
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005012:	4b17      	ldr	r3, [pc, #92]	; (8005070 <MX_ADC1_Init+0x98>)
 8005014:	2200      	movs	r2, #0
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005018:	4b15      	ldr	r3, [pc, #84]	; (8005070 <MX_ADC1_Init+0x98>)
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <MX_ADC1_Init+0xa0>)
 800501c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800501e:	4b14      	ldr	r3, [pc, #80]	; (8005070 <MX_ADC1_Init+0x98>)
 8005020:	2200      	movs	r2, #0
 8005022:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8005024:	4b12      	ldr	r3, [pc, #72]	; (8005070 <MX_ADC1_Init+0x98>)
 8005026:	2201      	movs	r2, #1
 8005028:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <MX_ADC1_Init+0x98>)
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005032:	4b0f      	ldr	r3, [pc, #60]	; (8005070 <MX_ADC1_Init+0x98>)
 8005034:	2201      	movs	r2, #1
 8005036:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005038:	480d      	ldr	r0, [pc, #52]	; (8005070 <MX_ADC1_Init+0x98>)
 800503a:	f002 faaf 	bl	800759c <HAL_ADC_Init>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d001      	beq.n	8005048 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8005044:	f001 fb94 	bl	8006770 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005048:	230c      	movs	r3, #12
 800504a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800504c:	2301      	movs	r3, #1
 800504e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8005050:	2300      	movs	r3, #0
 8005052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005054:	463b      	mov	r3, r7
 8005056:	4619      	mov	r1, r3
 8005058:	4805      	ldr	r0, [pc, #20]	; (8005070 <MX_ADC1_Init+0x98>)
 800505a:	f002 fc3b 	bl	80078d4 <HAL_ADC_ConfigChannel>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8005064:	f001 fb84 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005068:	bf00      	nop
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	200049e0 	.word	0x200049e0
 8005074:	40012000 	.word	0x40012000
 8005078:	0f000001 	.word	0x0f000001

0800507c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <MX_I2C3_Init+0x50>)
 8005082:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <MX_I2C3_Init+0x54>)
 8005084:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <MX_I2C3_Init+0x50>)
 8005088:	4a12      	ldr	r2, [pc, #72]	; (80050d4 <MX_I2C3_Init+0x58>)
 800508a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <MX_I2C3_Init+0x50>)
 800508e:	2200      	movs	r2, #0
 8005090:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8005092:	4b0e      	ldr	r3, [pc, #56]	; (80050cc <MX_I2C3_Init+0x50>)
 8005094:	2200      	movs	r2, #0
 8005096:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <MX_I2C3_Init+0x50>)
 800509a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800509e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80050a0:	4b0a      	ldr	r3, [pc, #40]	; (80050cc <MX_I2C3_Init+0x50>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <MX_I2C3_Init+0x50>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80050ac:	4b07      	ldr	r3, [pc, #28]	; (80050cc <MX_I2C3_Init+0x50>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <MX_I2C3_Init+0x50>)
 80050b4:	2200      	movs	r2, #0
 80050b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80050b8:	4804      	ldr	r0, [pc, #16]	; (80050cc <MX_I2C3_Init+0x50>)
 80050ba:	f003 fc65 	bl	8008988 <HAL_I2C_Init>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80050c4:	f001 fb54 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80050c8:	bf00      	nop
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	200047b4 	.word	0x200047b4
 80050d0:	40005c00 	.word	0x40005c00
 80050d4:	00061a80 	.word	0x00061a80

080050d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80050dc:	4b17      	ldr	r3, [pc, #92]	; (800513c <MX_SPI1_Init+0x64>)
 80050de:	4a18      	ldr	r2, [pc, #96]	; (8005140 <MX_SPI1_Init+0x68>)
 80050e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80050e2:	4b16      	ldr	r3, [pc, #88]	; (800513c <MX_SPI1_Init+0x64>)
 80050e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80050e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80050ea:	4b14      	ldr	r3, [pc, #80]	; (800513c <MX_SPI1_Init+0x64>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80050f0:	4b12      	ldr	r3, [pc, #72]	; (800513c <MX_SPI1_Init+0x64>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80050f6:	4b11      	ldr	r3, [pc, #68]	; (800513c <MX_SPI1_Init+0x64>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80050fc:	4b0f      	ldr	r3, [pc, #60]	; (800513c <MX_SPI1_Init+0x64>)
 80050fe:	2200      	movs	r2, #0
 8005100:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005102:	4b0e      	ldr	r3, [pc, #56]	; (800513c <MX_SPI1_Init+0x64>)
 8005104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005108:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800510a:	4b0c      	ldr	r3, [pc, #48]	; (800513c <MX_SPI1_Init+0x64>)
 800510c:	2218      	movs	r2, #24
 800510e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005110:	4b0a      	ldr	r3, [pc, #40]	; (800513c <MX_SPI1_Init+0x64>)
 8005112:	2200      	movs	r2, #0
 8005114:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <MX_SPI1_Init+0x64>)
 8005118:	2200      	movs	r2, #0
 800511a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800511c:	4b07      	ldr	r3, [pc, #28]	; (800513c <MX_SPI1_Init+0x64>)
 800511e:	2200      	movs	r2, #0
 8005120:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005122:	4b06      	ldr	r3, [pc, #24]	; (800513c <MX_SPI1_Init+0x64>)
 8005124:	220a      	movs	r2, #10
 8005126:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005128:	4804      	ldr	r0, [pc, #16]	; (800513c <MX_SPI1_Init+0x64>)
 800512a:	f006 fe6f 	bl	800be0c <HAL_SPI_Init>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005134:	f001 fb1c 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005138:	bf00      	nop
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20004bac 	.word	0x20004bac
 8005140:	40013000 	.word	0x40013000

08005144 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005148:	4b17      	ldr	r3, [pc, #92]	; (80051a8 <MX_SPI2_Init+0x64>)
 800514a:	4a18      	ldr	r2, [pc, #96]	; (80051ac <MX_SPI2_Init+0x68>)
 800514c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800514e:	4b16      	ldr	r3, [pc, #88]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005150:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005154:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005156:	4b14      	ldr	r3, [pc, #80]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005158:	2200      	movs	r2, #0
 800515a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <MX_SPI2_Init+0x64>)
 800515e:	2200      	movs	r2, #0
 8005160:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005162:	4b11      	ldr	r3, [pc, #68]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005168:	4b0f      	ldr	r3, [pc, #60]	; (80051a8 <MX_SPI2_Init+0x64>)
 800516a:	2200      	movs	r2, #0
 800516c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800516e:	4b0e      	ldr	r3, [pc, #56]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005174:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005178:	2210      	movs	r2, #16
 800517a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <MX_SPI2_Init+0x64>)
 800517e:	2200      	movs	r2, #0
 8005180:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8005182:	4b09      	ldr	r3, [pc, #36]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005184:	2200      	movs	r2, #0
 8005186:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005188:	4b07      	ldr	r3, [pc, #28]	; (80051a8 <MX_SPI2_Init+0x64>)
 800518a:	2200      	movs	r2, #0
 800518c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005190:	220a      	movs	r2, #10
 8005192:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8005194:	4804      	ldr	r0, [pc, #16]	; (80051a8 <MX_SPI2_Init+0x64>)
 8005196:	f006 fe39 	bl	800be0c <HAL_SPI_Init>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d001      	beq.n	80051a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80051a0:	f001 fae6 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80051a4:	bf00      	nop
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20004808 	.word	0x20004808
 80051ac:	40003800 	.word	0x40003800

080051b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80051b4:	4b17      	ldr	r3, [pc, #92]	; (8005214 <MX_SPI3_Init+0x64>)
 80051b6:	4a18      	ldr	r2, [pc, #96]	; (8005218 <MX_SPI3_Init+0x68>)
 80051b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80051ba:	4b16      	ldr	r3, [pc, #88]	; (8005214 <MX_SPI3_Init+0x64>)
 80051bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80051c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80051c2:	4b14      	ldr	r3, [pc, #80]	; (8005214 <MX_SPI3_Init+0x64>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80051c8:	4b12      	ldr	r3, [pc, #72]	; (8005214 <MX_SPI3_Init+0x64>)
 80051ca:	2200      	movs	r2, #0
 80051cc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80051ce:	4b11      	ldr	r3, [pc, #68]	; (8005214 <MX_SPI3_Init+0x64>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <MX_SPI3_Init+0x64>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80051da:	4b0e      	ldr	r3, [pc, #56]	; (8005214 <MX_SPI3_Init+0x64>)
 80051dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051e0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80051e2:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <MX_SPI3_Init+0x64>)
 80051e4:	2210      	movs	r2, #16
 80051e6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <MX_SPI3_Init+0x64>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80051ee:	4b09      	ldr	r3, [pc, #36]	; (8005214 <MX_SPI3_Init+0x64>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <MX_SPI3_Init+0x64>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80051fa:	4b06      	ldr	r3, [pc, #24]	; (8005214 <MX_SPI3_Init+0x64>)
 80051fc:	220a      	movs	r2, #10
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8005200:	4804      	ldr	r0, [pc, #16]	; (8005214 <MX_SPI3_Init+0x64>)
 8005202:	f006 fe03 	bl	800be0c <HAL_SPI_Init>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800520c:	f001 fab0 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8005210:	bf00      	nop
 8005212:	bd80      	pop	{r7, pc}
 8005214:	20004984 	.word	0x20004984
 8005218:	40003c00 	.word	0x40003c00

0800521c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b08a      	sub	sp, #40	; 0x28
 8005220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005222:	f107 0320 	add.w	r3, r7, #32
 8005226:	2200      	movs	r2, #0
 8005228:	601a      	str	r2, [r3, #0]
 800522a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800522c:	1d3b      	adds	r3, r7, #4
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]
 8005232:	605a      	str	r2, [r3, #4]
 8005234:	609a      	str	r2, [r3, #8]
 8005236:	60da      	str	r2, [r3, #12]
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	615a      	str	r2, [r3, #20]
 800523c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800523e:	4b28      	ldr	r3, [pc, #160]	; (80052e0 <MX_TIM2_Init+0xc4>)
 8005240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005244:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 90-1;
 8005246:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <MX_TIM2_Init+0xc4>)
 8005248:	2259      	movs	r2, #89	; 0x59
 800524a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800524c:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <MX_TIM2_Init+0xc4>)
 800524e:	2200      	movs	r2, #0
 8005250:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <MX_TIM2_Init+0xc4>)
 8005254:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8005258:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800525a:	4b21      	ldr	r3, [pc, #132]	; (80052e0 <MX_TIM2_Init+0xc4>)
 800525c:	2200      	movs	r2, #0
 800525e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <MX_TIM2_Init+0xc4>)
 8005262:	2200      	movs	r2, #0
 8005264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8005266:	481e      	ldr	r0, [pc, #120]	; (80052e0 <MX_TIM2_Init+0xc4>)
 8005268:	f007 fda9 	bl	800cdbe <HAL_TIM_PWM_Init>
 800526c:	4603      	mov	r3, r0
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8005272:	f001 fa7d 	bl	8006770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005276:	2300      	movs	r3, #0
 8005278:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800527a:	2300      	movs	r3, #0
 800527c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800527e:	f107 0320 	add.w	r3, r7, #32
 8005282:	4619      	mov	r1, r3
 8005284:	4816      	ldr	r0, [pc, #88]	; (80052e0 <MX_TIM2_Init+0xc4>)
 8005286:	f008 fbc1 	bl	800da0c <HAL_TIMEx_MasterConfigSynchronization>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8005290:	f001 fa6e 	bl	8006770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005294:	2360      	movs	r3, #96	; 0x60
 8005296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80052a4:	1d3b      	adds	r3, r7, #4
 80052a6:	2204      	movs	r2, #4
 80052a8:	4619      	mov	r1, r3
 80052aa:	480d      	ldr	r0, [pc, #52]	; (80052e0 <MX_TIM2_Init+0xc4>)
 80052ac:	f007 fef8 	bl	800d0a0 <HAL_TIM_PWM_ConfigChannel>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d001      	beq.n	80052ba <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80052b6:	f001 fa5b 	bl	8006770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80052ba:	1d3b      	adds	r3, r7, #4
 80052bc:	220c      	movs	r2, #12
 80052be:	4619      	mov	r1, r3
 80052c0:	4807      	ldr	r0, [pc, #28]	; (80052e0 <MX_TIM2_Init+0xc4>)
 80052c2:	f007 feed 	bl	800d0a0 <HAL_TIM_PWM_ConfigChannel>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80052cc:	f001 fa50 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80052d0:	4803      	ldr	r0, [pc, #12]	; (80052e0 <MX_TIM2_Init+0xc4>)
 80052d2:	f001 fecf 	bl	8007074 <HAL_TIM_MspPostInit>

}
 80052d6:	bf00      	nop
 80052d8:	3728      	adds	r7, #40	; 0x28
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20004c04 	.word	0x20004c04

080052e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08e      	sub	sp, #56	; 0x38
 80052e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	605a      	str	r2, [r3, #4]
 80052f4:	609a      	str	r2, [r3, #8]
 80052f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052f8:	f107 0320 	add.w	r3, r7, #32
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005302:	1d3b      	adds	r3, r7, #4
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	611a      	str	r2, [r3, #16]
 8005310:	615a      	str	r2, [r3, #20]
 8005312:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005314:	4b3e      	ldr	r3, [pc, #248]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005316:	4a3f      	ldr	r2, [pc, #252]	; (8005414 <MX_TIM3_Init+0x130>)
 8005318:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 800531a:	4b3d      	ldr	r3, [pc, #244]	; (8005410 <MX_TIM3_Init+0x12c>)
 800531c:	2259      	movs	r2, #89	; 0x59
 800531e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005320:	4b3b      	ldr	r3, [pc, #236]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005322:	2200      	movs	r2, #0
 8005324:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 256-1;
 8005326:	4b3a      	ldr	r3, [pc, #232]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005328:	22ff      	movs	r2, #255	; 0xff
 800532a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800532c:	4b38      	ldr	r3, [pc, #224]	; (8005410 <MX_TIM3_Init+0x12c>)
 800532e:	2200      	movs	r2, #0
 8005330:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005332:	4b37      	ldr	r3, [pc, #220]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005334:	2200      	movs	r2, #0
 8005336:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005338:	4835      	ldr	r0, [pc, #212]	; (8005410 <MX_TIM3_Init+0x12c>)
 800533a:	f007 fccd 	bl	800ccd8 <HAL_TIM_Base_Init>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d001      	beq.n	8005348 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8005344:	f001 fa14 	bl	8006770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800534c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800534e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005352:	4619      	mov	r1, r3
 8005354:	482e      	ldr	r0, [pc, #184]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005356:	f007 ff69 	bl	800d22c <HAL_TIM_ConfigClockSource>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8005360:	f001 fa06 	bl	8006770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005364:	482a      	ldr	r0, [pc, #168]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005366:	f007 fd2a 	bl	800cdbe <HAL_TIM_PWM_Init>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d001      	beq.n	8005374 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8005370:	f001 f9fe 	bl	8006770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005374:	2300      	movs	r3, #0
 8005376:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005378:	2300      	movs	r3, #0
 800537a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800537c:	f107 0320 	add.w	r3, r7, #32
 8005380:	4619      	mov	r1, r3
 8005382:	4823      	ldr	r0, [pc, #140]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005384:	f008 fb42 	bl	800da0c <HAL_TIMEx_MasterConfigSynchronization>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800538e:	f001 f9ef 	bl	8006770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005392:	2360      	movs	r3, #96	; 0x60
 8005394:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800539a:	2302      	movs	r3, #2
 800539c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80053a2:	1d3b      	adds	r3, r7, #4
 80053a4:	2200      	movs	r2, #0
 80053a6:	4619      	mov	r1, r3
 80053a8:	4819      	ldr	r0, [pc, #100]	; (8005410 <MX_TIM3_Init+0x12c>)
 80053aa:	f007 fe79 	bl	800d0a0 <HAL_TIM_PWM_ConfigChannel>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80053b4:	f001 f9dc 	bl	8006770 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80053bc:	1d3b      	adds	r3, r7, #4
 80053be:	2204      	movs	r2, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4813      	ldr	r0, [pc, #76]	; (8005410 <MX_TIM3_Init+0x12c>)
 80053c4:	f007 fe6c 	bl	800d0a0 <HAL_TIM_PWM_ConfigChannel>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80053ce:	f001 f9cf 	bl	8006770 <Error_Handler>
  }
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80053d2:	2302      	movs	r3, #2
 80053d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80053d6:	1d3b      	adds	r3, r7, #4
 80053d8:	2208      	movs	r2, #8
 80053da:	4619      	mov	r1, r3
 80053dc:	480c      	ldr	r0, [pc, #48]	; (8005410 <MX_TIM3_Init+0x12c>)
 80053de:	f007 fe5f 	bl	800d0a0 <HAL_TIM_PWM_ConfigChannel>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 80053e8:	f001 f9c2 	bl	8006770 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80053ec:	1d3b      	adds	r3, r7, #4
 80053ee:	220c      	movs	r2, #12
 80053f0:	4619      	mov	r1, r3
 80053f2:	4807      	ldr	r0, [pc, #28]	; (8005410 <MX_TIM3_Init+0x12c>)
 80053f4:	f007 fe54 	bl	800d0a0 <HAL_TIM_PWM_ConfigChannel>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <MX_TIM3_Init+0x11e>
  {
    Error_Handler();
 80053fe:	f001 f9b7 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005402:	4803      	ldr	r0, [pc, #12]	; (8005410 <MX_TIM3_Init+0x12c>)
 8005404:	f001 fe36 	bl	8007074 <HAL_TIM_MspPostInit>

}
 8005408:	bf00      	nop
 800540a:	3738      	adds	r7, #56	; 0x38
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20004944 	.word	0x20004944
 8005414:	40000400 	.word	0x40000400

08005418 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800541e:	463b      	mov	r3, r7
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005426:	4b15      	ldr	r3, [pc, #84]	; (800547c <MX_TIM6_Init+0x64>)
 8005428:	4a15      	ldr	r2, [pc, #84]	; (8005480 <MX_TIM6_Init+0x68>)
 800542a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 90-1;
 800542c:	4b13      	ldr	r3, [pc, #76]	; (800547c <MX_TIM6_Init+0x64>)
 800542e:	2259      	movs	r2, #89	; 0x59
 8005430:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005432:	4b12      	ldr	r3, [pc, #72]	; (800547c <MX_TIM6_Init+0x64>)
 8005434:	2200      	movs	r2, #0
 8005436:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <MX_TIM6_Init+0x64>)
 800543a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800543e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005440:	4b0e      	ldr	r3, [pc, #56]	; (800547c <MX_TIM6_Init+0x64>)
 8005442:	2200      	movs	r2, #0
 8005444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005446:	480d      	ldr	r0, [pc, #52]	; (800547c <MX_TIM6_Init+0x64>)
 8005448:	f007 fc46 	bl	800ccd8 <HAL_TIM_Base_Init>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005452:	f001 f98d 	bl	8006770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005456:	2300      	movs	r3, #0
 8005458:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800545a:	2300      	movs	r3, #0
 800545c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800545e:	463b      	mov	r3, r7
 8005460:	4619      	mov	r1, r3
 8005462:	4806      	ldr	r0, [pc, #24]	; (800547c <MX_TIM6_Init+0x64>)
 8005464:	f008 fad2 	bl	800da0c <HAL_TIMEx_MasterConfigSynchronization>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800546e:	f001 f97f 	bl	8006770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005472:	bf00      	nop
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	20004b68 	.word	0x20004b68
 8005480:	40001000 	.word	0x40001000

08005484 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800548a:	2300      	movs	r3, #0
 800548c:	607b      	str	r3, [r7, #4]
 800548e:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <MX_DMA_Init+0x78>)
 8005490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005492:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <MX_DMA_Init+0x78>)
 8005494:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005498:	6313      	str	r3, [r2, #48]	; 0x30
 800549a:	4b18      	ldr	r3, [pc, #96]	; (80054fc <MX_DMA_Init+0x78>)
 800549c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800549e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054a2:	607b      	str	r3, [r7, #4]
 80054a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80054a6:	2300      	movs	r3, #0
 80054a8:	603b      	str	r3, [r7, #0]
 80054aa:	4b14      	ldr	r3, [pc, #80]	; (80054fc <MX_DMA_Init+0x78>)
 80054ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ae:	4a13      	ldr	r2, [pc, #76]	; (80054fc <MX_DMA_Init+0x78>)
 80054b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80054b4:	6313      	str	r3, [r2, #48]	; 0x30
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <MX_DMA_Init+0x78>)
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80054c2:	2200      	movs	r2, #0
 80054c4:	2105      	movs	r1, #5
 80054c6:	200e      	movs	r0, #14
 80054c8:	f002 fcea 	bl	8007ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80054cc:	200e      	movs	r0, #14
 80054ce:	f002 fd03 	bl	8007ed8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 80054d2:	2200      	movs	r2, #0
 80054d4:	2105      	movs	r1, #5
 80054d6:	200f      	movs	r0, #15
 80054d8:	f002 fce2 	bl	8007ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80054dc:	200f      	movs	r0, #15
 80054de:	f002 fcfb 	bl	8007ed8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80054e2:	2200      	movs	r2, #0
 80054e4:	2105      	movs	r1, #5
 80054e6:	203b      	movs	r0, #59	; 0x3b
 80054e8:	f002 fcda 	bl	8007ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80054ec:	203b      	movs	r0, #59	; 0x3b
 80054ee:	f002 fcf3 	bl	8007ed8 <HAL_NVIC_EnableIRQ>

}
 80054f2:	bf00      	nop
 80054f4:	3708      	adds	r7, #8
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023800 	.word	0x40023800

08005500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	; 0x28
 8005504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005506:	f107 0314 	add.w	r3, r7, #20
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
 8005510:	609a      	str	r2, [r3, #8]
 8005512:	60da      	str	r2, [r3, #12]
 8005514:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	613b      	str	r3, [r7, #16]
 800551a:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	4a75      	ldr	r2, [pc, #468]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005520:	f043 0304 	orr.w	r3, r3, #4
 8005524:	6313      	str	r3, [r2, #48]	; 0x30
 8005526:	4b73      	ldr	r3, [pc, #460]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]
 8005536:	4b6f      	ldr	r3, [pc, #444]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	4a6e      	ldr	r2, [pc, #440]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 800553c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005540:	6313      	str	r3, [r2, #48]	; 0x30
 8005542:	4b6c      	ldr	r3, [pc, #432]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	4b68      	ldr	r3, [pc, #416]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005556:	4a67      	ldr	r2, [pc, #412]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005558:	f043 0301 	orr.w	r3, r3, #1
 800555c:	6313      	str	r3, [r2, #48]	; 0x30
 800555e:	4b65      	ldr	r3, [pc, #404]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	60bb      	str	r3, [r7, #8]
 8005568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	4b61      	ldr	r3, [pc, #388]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005572:	4a60      	ldr	r2, [pc, #384]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005574:	f043 0302 	orr.w	r3, r3, #2
 8005578:	6313      	str	r3, [r2, #48]	; 0x30
 800557a:	4b5e      	ldr	r3, [pc, #376]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 800557c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	607b      	str	r3, [r7, #4]
 8005584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	603b      	str	r3, [r7, #0]
 800558a:	4b5a      	ldr	r3, [pc, #360]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558e:	4a59      	ldr	r2, [pc, #356]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005590:	f043 0308 	orr.w	r3, r3, #8
 8005594:	6313      	str	r3, [r2, #48]	; 0x30
 8005596:	4b57      	ldr	r3, [pc, #348]	; (80056f4 <MX_GPIO_Init+0x1f4>)
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	603b      	str	r3, [r7, #0]
 80055a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CAM_POWER_Pin|FLASH_NSS_Pin|LORA_NSS_Pin, GPIO_PIN_RESET);
 80055a2:	2200      	movs	r2, #0
 80055a4:	f248 0114 	movw	r1, #32788	; 0x8014
 80055a8:	4853      	ldr	r0, [pc, #332]	; (80056f8 <MX_GPIO_Init+0x1f8>)
 80055aa:	f003 f9bb 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_NSS_Pin|VTX_BTN1_Pin, GPIO_PIN_RESET);
 80055ae:	2200      	movs	r2, #0
 80055b0:	2130      	movs	r1, #48	; 0x30
 80055b2:	4852      	ldr	r0, [pc, #328]	; (80056fc <MX_GPIO_Init+0x1fc>)
 80055b4:	f003 f9b6 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80055b8:	2200      	movs	r2, #0
 80055ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80055be:	4850      	ldr	r0, [pc, #320]	; (8005700 <MX_GPIO_Init+0x200>)
 80055c0:	f003 f9b0 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LORA_RESET_GPIO_Port, LORA_RESET_Pin, GPIO_PIN_SET);
 80055c4:	2201      	movs	r2, #1
 80055c6:	2140      	movs	r1, #64	; 0x40
 80055c8:	484d      	ldr	r0, [pc, #308]	; (8005700 <MX_GPIO_Init+0x200>)
 80055ca:	f003 f9ab 	bl	8008924 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IMU_INT_Pin */
  GPIO_InitStruct.Pin = IMU_INT_Pin;
 80055ce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80055d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80055d4:	4b4b      	ldr	r3, [pc, #300]	; (8005704 <MX_GPIO_Init+0x204>)
 80055d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IMU_INT_GPIO_Port, &GPIO_InitStruct);
 80055dc:	f107 0314 	add.w	r3, r7, #20
 80055e0:	4619      	mov	r1, r3
 80055e2:	4846      	ldr	r0, [pc, #280]	; (80056fc <MX_GPIO_Init+0x1fc>)
 80055e4:	f002 fff4 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RBF_Pin EXPORT_BLACKBOX_Pin */
  GPIO_InitStruct.Pin = RBF_Pin|EXPORT_BLACKBOX_Pin;
 80055e8:	f240 4301 	movw	r3, #1025	; 0x401
 80055ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055f2:	2301      	movs	r3, #1
 80055f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055f6:	f107 0314 	add.w	r3, r7, #20
 80055fa:	4619      	mov	r1, r3
 80055fc:	483e      	ldr	r0, [pc, #248]	; (80056f8 <MX_GPIO_Init+0x1f8>)
 80055fe:	f002 ffe7 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CAM_POWER_Pin FLASH_NSS_Pin LORA_NSS_Pin */
  GPIO_InitStruct.Pin = CAM_POWER_Pin|FLASH_NSS_Pin|LORA_NSS_Pin;
 8005602:	f248 0314 	movw	r3, #32788	; 0x8014
 8005606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005608:	2301      	movs	r3, #1
 800560a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800560c:	2300      	movs	r3, #0
 800560e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005610:	2300      	movs	r3, #0
 8005612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005614:	f107 0314 	add.w	r3, r7, #20
 8005618:	4619      	mov	r1, r3
 800561a:	4837      	ldr	r0, [pc, #220]	; (80056f8 <MX_GPIO_Init+0x1f8>)
 800561c:	f002 ffd8 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_NSS_Pin */
  GPIO_InitStruct.Pin = SD_NSS_Pin;
 8005620:	2310      	movs	r3, #16
 8005622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005624:	2301      	movs	r3, #1
 8005626:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005628:	2300      	movs	r3, #0
 800562a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800562c:	2300      	movs	r3, #0
 800562e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_NSS_GPIO_Port, &GPIO_InitStruct);
 8005630:	f107 0314 	add.w	r3, r7, #20
 8005634:	4619      	mov	r1, r3
 8005636:	4831      	ldr	r0, [pc, #196]	; (80056fc <MX_GPIO_Init+0x1fc>)
 8005638:	f002 ffca 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VTX_BTN1_Pin */
  GPIO_InitStruct.Pin = VTX_BTN1_Pin;
 800563c:	2320      	movs	r3, #32
 800563e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005640:	2301      	movs	r3, #1
 8005642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005644:	2302      	movs	r3, #2
 8005646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005648:	2300      	movs	r3, #0
 800564a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VTX_BTN1_GPIO_Port, &GPIO_InitStruct);
 800564c:	f107 0314 	add.w	r3, r7, #20
 8005650:	4619      	mov	r1, r3
 8005652:	482a      	ldr	r0, [pc, #168]	; (80056fc <MX_GPIO_Init+0x1fc>)
 8005654:	f002 ffbc 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_NSS_Pin LORA_RESET_Pin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|LORA_RESET_Pin;
 8005658:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800565c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800565e:	2301      	movs	r3, #1
 8005660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005662:	2300      	movs	r3, #0
 8005664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005666:	2300      	movs	r3, #0
 8005668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800566a:	f107 0314 	add.w	r3, r7, #20
 800566e:	4619      	mov	r1, r3
 8005670:	4823      	ldr	r0, [pc, #140]	; (8005700 <MX_GPIO_Init+0x200>)
 8005672:	f002 ffad 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_DIO1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO1_Pin;
 8005676:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800567a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800567c:	2300      	movs	r3, #0
 800567e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005680:	2300      	movs	r3, #0
 8005682:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_DIO1_GPIO_Port, &GPIO_InitStruct);
 8005684:	f107 0314 	add.w	r3, r7, #20
 8005688:	4619      	mov	r1, r3
 800568a:	481c      	ldr	r0, [pc, #112]	; (80056fc <MX_GPIO_Init+0x1fc>)
 800568c:	f002 ffa0 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LORA_BUSY_Pin */
  GPIO_InitStruct.Pin = LORA_BUSY_Pin;
 8005690:	2304      	movs	r3, #4
 8005692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005694:	2300      	movs	r3, #0
 8005696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005698:	2300      	movs	r3, #0
 800569a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LORA_BUSY_GPIO_Port, &GPIO_InitStruct);
 800569c:	f107 0314 	add.w	r3, r7, #20
 80056a0:	4619      	mov	r1, r3
 80056a2:	4819      	ldr	r0, [pc, #100]	; (8005708 <MX_GPIO_Init+0x208>)
 80056a4:	f002 ff94 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DETECT_Pin */
  GPIO_InitStruct.Pin = SD_DETECT_Pin;
 80056a8:	2310      	movs	r3, #16
 80056aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056ac:	2300      	movs	r3, #0
 80056ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DETECT_GPIO_Port, &GPIO_InitStruct);
 80056b4:	f107 0314 	add.w	r3, r7, #20
 80056b8:	4619      	mov	r1, r3
 80056ba:	4811      	ldr	r0, [pc, #68]	; (8005700 <MX_GPIO_Init+0x200>)
 80056bc:	f002 ff88 	bl	80085d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BREAKWIRE_Pin ARM_Pin */
  GPIO_InitStruct.Pin = BREAKWIRE_Pin|ARM_Pin;
 80056c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80056c6:	2300      	movs	r3, #0
 80056c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056ca:	2301      	movs	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056ce:	f107 0314 	add.w	r3, r7, #20
 80056d2:	4619      	mov	r1, r3
 80056d4:	480a      	ldr	r0, [pc, #40]	; (8005700 <MX_GPIO_Init+0x200>)
 80056d6:	f002 ff7b 	bl	80085d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80056da:	2200      	movs	r2, #0
 80056dc:	2105      	movs	r1, #5
 80056de:	2028      	movs	r0, #40	; 0x28
 80056e0:	f002 fbde 	bl	8007ea0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80056e4:	2028      	movs	r0, #40	; 0x28
 80056e6:	f002 fbf7 	bl	8007ed8 <HAL_NVIC_EnableIRQ>

}
 80056ea:	bf00      	nop
 80056ec:	3728      	adds	r7, #40	; 0x28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40020000 	.word	0x40020000
 80056fc:	40020800 	.word	0x40020800
 8005700:	40020400 	.word	0x40020400
 8005704:	10110000 	.word	0x10110000
 8005708:	40020c00 	.word	0x40020c00
 800570c:	00000000 	.word	0x00000000

08005710 <playtone>:

/* USER CODE BEGIN 4 */

void playtone(uint16_t freq, uint16_t ms, uint8_t vol) {
 8005710:	b590      	push	{r4, r7, lr}
 8005712:	b087      	sub	sp, #28
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	80fb      	strh	r3, [r7, #6]
 800571a:	460b      	mov	r3, r1
 800571c:	80bb      	strh	r3, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 8005722:	4b37      	ldr	r3, [pc, #220]	; (8005800 <playtone+0xf0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005728:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 800572a:	4b35      	ldr	r3, [pc, #212]	; (8005800 <playtone+0xf0>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005730:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 8005732:	4b33      	ldr	r3, [pc, #204]	; (8005800 <playtone+0xf0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005738:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 800573a:	88fb      	ldrh	r3, [r7, #6]
 800573c:	4618      	mov	r0, r3
 800573e:	f7fa ff11 	bl	8000564 <__aeabi_i2d>
 8005742:	4603      	mov	r3, r0
 8005744:	460c      	mov	r4, r1
 8005746:	461a      	mov	r2, r3
 8005748:	4623      	mov	r3, r4
 800574a:	a12b      	add	r1, pc, #172	; (adr r1, 80057f8 <playtone+0xe8>)
 800574c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005750:	f7fb f89c 	bl	800088c <__aeabi_ddiv>
 8005754:	4603      	mov	r3, r0
 8005756:	460c      	mov	r4, r1
 8005758:	4618      	mov	r0, r3
 800575a:	4621      	mov	r1, r4
 800575c:	f7fb fa44 	bl	8000be8 <__aeabi_d2uiz>
 8005760:	4603      	mov	r3, r0
 8005762:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 8005764:	4b26      	ldr	r3, [pc, #152]	; (8005800 <playtone+0xf0>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2200      	movs	r2, #0
 800576a:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 800576c:	4b24      	ldr	r3, [pc, #144]	; (8005800 <playtone+0xf0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 8005774:	78fb      	ldrb	r3, [r7, #3]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	fb02 f203 	mul.w	r2, r2, r3
 800577c:	4b20      	ldr	r3, [pc, #128]	; (8005800 <playtone+0xf0>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4920      	ldr	r1, [pc, #128]	; (8005804 <playtone+0xf4>)
 8005782:	fba1 1202 	umull	r1, r2, r1, r2
 8005786:	0992      	lsrs	r2, r2, #6
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 800578a:	8afb      	ldrh	r3, [r7, #22]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	fb02 f203 	mul.w	r2, r2, r3
 8005792:	4b1b      	ldr	r3, [pc, #108]	; (8005800 <playtone+0xf0>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	0a12      	lsrs	r2, r2, #8
 8005798:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 800579a:	8abb      	ldrh	r3, [r7, #20]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	fb02 f203 	mul.w	r2, r2, r3
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <playtone+0xf0>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	0a12      	lsrs	r2, r2, #8
 80057a8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 80057aa:	8a7b      	ldrh	r3, [r7, #18]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	fb02 f203 	mul.w	r2, r2, r3
 80057b2:	4b13      	ldr	r3, [pc, #76]	; (8005800 <playtone+0xf0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	0a12      	lsrs	r2, r2, #8
 80057b8:	641a      	str	r2, [r3, #64]	; 0x40

    HAL_Delay(ms);
 80057ba:	88bb      	ldrh	r3, [r7, #4]
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fecb 	bl	8007558 <HAL_Delay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 80057c2:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <playtone+0xf0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2200      	movs	r2, #0
 80057c8:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 80057ca:	4b0d      	ldr	r3, [pc, #52]	; (8005800 <playtone+0xf0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	22ff      	movs	r2, #255	; 0xff
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 80057d2:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <playtone+0xf0>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	8afa      	ldrh	r2, [r7, #22]
 80057d8:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 80057da:	4b09      	ldr	r3, [pc, #36]	; (8005800 <playtone+0xf0>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	8aba      	ldrh	r2, [r7, #20]
 80057e0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 80057e2:	4b07      	ldr	r3, [pc, #28]	; (8005800 <playtone+0xf0>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	8a7a      	ldrh	r2, [r7, #18]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
}
 80057ea:	bf00      	nop
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	f3af 8000 	nop.w
 80057f8:	00000000 	.word	0x00000000
 80057fc:	412e8480 	.word	0x412e8480
 8005800:	20004944 	.word	0x20004944
 8005804:	51eb851f 	.word	0x51eb851f

08005808 <playtoneRTOS>:

void playtoneRTOS(uint16_t freq, uint16_t ms, uint8_t vol) {
 8005808:	b590      	push	{r4, r7, lr}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	4603      	mov	r3, r0
 8005810:	80fb      	strh	r3, [r7, #6]
 8005812:	460b      	mov	r3, r1
 8005814:	80bb      	strh	r3, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	70fb      	strb	r3, [r7, #3]
    // 90MHz / (90 * ARR) = freq
    // 90MHz / (90 * freq) = ARR
    // 1MHz/(freq) = AAR

    // save LED's
    uint16_t ledR = htim3.Instance->CCR3;
 800581a:	4b37      	ldr	r3, [pc, #220]	; (80058f8 <playtoneRTOS+0xf0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005820:	82fb      	strh	r3, [r7, #22]
    uint16_t ledG = htim3.Instance->CCR1;
 8005822:	4b35      	ldr	r3, [pc, #212]	; (80058f8 <playtoneRTOS+0xf0>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005828:	82bb      	strh	r3, [r7, #20]
    uint16_t ledB = htim3.Instance->CCR4;
 800582a:	4b33      	ldr	r3, [pc, #204]	; (80058f8 <playtoneRTOS+0xf0>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005830:	827b      	strh	r3, [r7, #18]

    uint32_t aar_val = 1e6 / (freq);
 8005832:	88fb      	ldrh	r3, [r7, #6]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fa fe95 	bl	8000564 <__aeabi_i2d>
 800583a:	4603      	mov	r3, r0
 800583c:	460c      	mov	r4, r1
 800583e:	461a      	mov	r2, r3
 8005840:	4623      	mov	r3, r4
 8005842:	a12b      	add	r1, pc, #172	; (adr r1, 80058f0 <playtoneRTOS+0xe8>)
 8005844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005848:	f7fb f820 	bl	800088c <__aeabi_ddiv>
 800584c:	4603      	mov	r3, r0
 800584e:	460c      	mov	r4, r1
 8005850:	4618      	mov	r0, r3
 8005852:	4621      	mov	r1, r4
 8005854:	f7fb f9c8 	bl	8000be8 <__aeabi_d2uiz>
 8005858:	4603      	mov	r3, r0
 800585a:	60fb      	str	r3, [r7, #12]
    htim3.Instance->CNT = 0;
 800585c:	4b26      	ldr	r3, [pc, #152]	; (80058f8 <playtoneRTOS+0xf0>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2200      	movs	r2, #0
 8005862:	625a      	str	r2, [r3, #36]	; 0x24
    htim3.Instance->ARR = aar_val;
 8005864:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <playtoneRTOS+0xf0>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	62da      	str	r2, [r3, #44]	; 0x2c
    htim3.Instance->CCR2 = aar_val * vol / (2 * 100);
 800586c:	78fb      	ldrb	r3, [r7, #3]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	fb02 f203 	mul.w	r2, r2, r3
 8005874:	4b20      	ldr	r3, [pc, #128]	; (80058f8 <playtoneRTOS+0xf0>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4920      	ldr	r1, [pc, #128]	; (80058fc <playtoneRTOS+0xf4>)
 800587a:	fba1 1202 	umull	r1, r2, r1, r2
 800587e:	0992      	lsrs	r2, r2, #6
 8005880:	639a      	str	r2, [r3, #56]	; 0x38
    // same LED brightness
    htim3.Instance->CCR3 = (aar_val * ledR) / 256;
 8005882:	8afb      	ldrh	r3, [r7, #22]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	fb02 f203 	mul.w	r2, r2, r3
 800588a:	4b1b      	ldr	r3, [pc, #108]	; (80058f8 <playtoneRTOS+0xf0>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	0a12      	lsrs	r2, r2, #8
 8005890:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = (aar_val * ledG) / 256;
 8005892:	8abb      	ldrh	r3, [r7, #20]
 8005894:	68fa      	ldr	r2, [r7, #12]
 8005896:	fb02 f203 	mul.w	r2, r2, r3
 800589a:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <playtoneRTOS+0xf0>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	0a12      	lsrs	r2, r2, #8
 80058a0:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = (aar_val * ledB) / 256;
 80058a2:	8a7b      	ldrh	r3, [r7, #18]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	fb02 f203 	mul.w	r2, r2, r3
 80058aa:	4b13      	ldr	r3, [pc, #76]	; (80058f8 <playtoneRTOS+0xf0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	0a12      	lsrs	r2, r2, #8
 80058b0:	641a      	str	r2, [r3, #64]	; 0x40

    osDelay(ms);
 80058b2:	88bb      	ldrh	r3, [r7, #4]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f00b febb 	bl	8011630 <osDelay>

    // reset to defaults
    htim3.Instance->CCR2 = 0;
 80058ba:	4b0f      	ldr	r3, [pc, #60]	; (80058f8 <playtoneRTOS+0xf0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2200      	movs	r2, #0
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
    htim3.Instance->ARR = 256 - 1;
 80058c2:	4b0d      	ldr	r3, [pc, #52]	; (80058f8 <playtoneRTOS+0xf0>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	22ff      	movs	r2, #255	; 0xff
 80058c8:	62da      	str	r2, [r3, #44]	; 0x2c

    // back to normal LED
    htim3.Instance->CCR3 = ledR;
 80058ca:	4b0b      	ldr	r3, [pc, #44]	; (80058f8 <playtoneRTOS+0xf0>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	8afa      	ldrh	r2, [r7, #22]
 80058d0:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 80058d2:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <playtoneRTOS+0xf0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	8aba      	ldrh	r2, [r7, #20]
 80058d8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 80058da:	4b07      	ldr	r3, [pc, #28]	; (80058f8 <playtoneRTOS+0xf0>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	8a7a      	ldrh	r2, [r7, #18]
 80058e0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80058e2:	bf00      	nop
 80058e4:	371c      	adds	r7, #28
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd90      	pop	{r4, r7, pc}
 80058ea:	bf00      	nop
 80058ec:	f3af 8000 	nop.w
 80058f0:	00000000 	.word	0x00000000
 80058f4:	412e8480 	.word	0x412e8480
 80058f8:	20004944 	.word	0x20004944
 80058fc:	51eb851f 	.word	0x51eb851f

08005900 <changeLed>:

void changeLed(uint8_t ledR, uint8_t ledG, uint8_t ledB) {
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	4603      	mov	r3, r0
 8005908:	71fb      	strb	r3, [r7, #7]
 800590a:	460b      	mov	r3, r1
 800590c:	71bb      	strb	r3, [r7, #6]
 800590e:	4613      	mov	r3, r2
 8005910:	717b      	strb	r3, [r7, #5]
    htim3.Instance->CCR3 = ledR;
 8005912:	4b09      	ldr	r3, [pc, #36]	; (8005938 <changeLed+0x38>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	79fa      	ldrb	r2, [r7, #7]
 8005918:	63da      	str	r2, [r3, #60]	; 0x3c
    htim3.Instance->CCR1 = ledG;
 800591a:	4b07      	ldr	r3, [pc, #28]	; (8005938 <changeLed+0x38>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	79ba      	ldrb	r2, [r7, #6]
 8005920:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR4 = ledB;
 8005922:	4b05      	ldr	r3, [pc, #20]	; (8005938 <changeLed+0x38>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	797a      	ldrb	r2, [r7, #5]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40

}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	20004944 	.word	0x20004944

0800593c <StartLedTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLedTask */
void StartLedTask(void const * argument)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8005944:	f00e f872 	bl	8013a2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
    /* Infinite loop */
    for (;;) {
        //changeLed(0, 100, 0);
        osDelay(1000);
 8005948:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800594c:	f00b fe70 	bl	8011630 <osDelay>
        //changeLed(0, 0, 100);
        osDelay(1000);
 8005950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005954:	f00b fe6c 	bl	8011630 <osDelay>
        osDelay(1000);
 8005958:	e7f6      	b.n	8005948 <StartLedTask+0xc>
	...

0800595c <StartMusicTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartMusicTask */
void StartMusicTask(void const * argument)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08e      	sub	sp, #56	; 0x38
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMusicTask */
    /* Infinite loop */

    uint16_t vol = 13; // 13
 8005964:	230d      	movs	r3, #13
 8005966:	84bb      	strh	r3, [r7, #36]	; 0x24
    uint16_t beatlength = 50; // determines tempo
 8005968:	2332      	movs	r3, #50	; 0x32
 800596a:	847b      	strh	r3, [r7, #34]	; 0x22
    float beatseparationconstant = 0.3;
 800596c:	4b79      	ldr	r3, [pc, #484]	; (8005b54 <StartMusicTask+0x1f8>)
 800596e:	61fb      	str	r3, [r7, #28]

    int a = 4; // part index
 8005970:	2304      	movs	r3, #4
 8005972:	637b      	str	r3, [r7, #52]	; 0x34
    int b = 0; // song index
 8005974:	2300      	movs	r3, #0
 8005976:	633b      	str	r3, [r7, #48]	; 0x30
    int c; // lyric index

    osEvent messagebox;
    uint16_t sounddelay;

    int ksp_playhead = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	62bb      	str	r3, [r7, #40]	; 0x28
    int ksp_total = 20;
 800597c:	2314      	movs	r3, #20
 800597e:	61bb      	str	r3, [r7, #24]

    for (;;) {
        if (is_soft_enabled()) {
 8005980:	f7fe fbdc 	bl	800413c <is_soft_enabled>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01c      	beq.n	80059c4 <StartMusicTask+0x68>
            messagebox = osMessageGet(BuzzerQueueHandle, 1000);
 800598a:	4b73      	ldr	r3, [pc, #460]	; (8005b58 <StartMusicTask+0x1fc>)
 800598c:	6819      	ldr	r1, [r3, #0]
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005996:	4618      	mov	r0, r3
 8005998:	f00b fec8 	bl	801172c <osMessageGet>
            if (messagebox.status && messagebox.value.v) {
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d0ee      	beq.n	8005980 <StartMusicTask+0x24>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d0eb      	beq.n	8005980 <StartMusicTask+0x24>
                sounddelay = messagebox.value.v;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	82fb      	strh	r3, [r7, #22]
                playtoneRTOS(OPTIMAL_BUZZER_FREQ, sounddelay,
 80059ac:	8afb      	ldrh	r3, [r7, #22]
 80059ae:	2246      	movs	r2, #70	; 0x46
 80059b0:	4619      	mov	r1, r3
 80059b2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80059b6:	f7ff ff27 	bl	8005808 <playtoneRTOS>
                        OPTIMAL_BUZZER_DUTY);
                osDelay(sounddelay);
 80059ba:	8afb      	ldrh	r3, [r7, #22]
 80059bc:	4618      	mov	r0, r3
 80059be:	f00b fe37 	bl	8011630 <osDelay>
 80059c2:	e7dd      	b.n	8005980 <StartMusicTask+0x24>
            }


        }
        else if (buzzer_setting == RICK){
 80059c4:	4b65      	ldr	r3, [pc, #404]	; (8005b5c <StartMusicTask+0x200>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	f040 80a5 	bne.w	8005b18 <StartMusicTask+0x1bc>
            uint16_t notelength;
            if (a == 1 || a == 2) {
 80059ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d002      	beq.n	80059da <StartMusicTask+0x7e>
 80059d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d125      	bne.n	8005a26 <StartMusicTask+0xca>
                // intro
                notelength = beatlength * song1_intro_rhythmn[b];
 80059da:	4a61      	ldr	r2, [pc, #388]	; (8005b60 <StartMusicTask+0x204>)
 80059dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80059e4:	fb12 f303 	smulbb	r3, r2, r3
 80059e8:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_intro_melody[b] > 0) {
 80059ea:	4a5e      	ldr	r2, [pc, #376]	; (8005b64 <StartMusicTask+0x208>)
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <StartMusicTask+0xae>
                    playtoneRTOS(song1_intro_melody[b], notelength, vol);
 80059f6:	4a5b      	ldr	r2, [pc, #364]	; (8005b64 <StartMusicTask+0x208>)
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7ff feff 	bl	8005808 <playtoneRTOS>
                }
                b++;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2b0c      	cmp	r3, #12
 8005a14:	d966      	bls.n	8005ae4 <StartMusicTask+0x188>
                    a++;
 8005a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a18:	3301      	adds	r3, #1
 8005a1a:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8005a20:	2300      	movs	r3, #0
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_intro_melody) / sizeof(uint16_t)) {
 8005a24:	e05e      	b.n	8005ae4 <StartMusicTask+0x188>
                }
            } else if (a == 3 || a == 5) {
 8005a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d002      	beq.n	8005a32 <StartMusicTask+0xd6>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	2b05      	cmp	r3, #5
 8005a30:	d12a      	bne.n	8005a88 <StartMusicTask+0x12c>
                // verse
                notelength = beatlength * 2 * song1_verse1_rhythmn[b];
 8005a32:	4a4d      	ldr	r2, [pc, #308]	; (8005b68 <StartMusicTask+0x20c>)
 8005a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a3c:	fb12 f303 	smulbb	r3, r2, r3
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_verse1_melody[b] > 0) {
 8005a46:	4a49      	ldr	r2, [pc, #292]	; (8005b6c <StartMusicTask+0x210>)
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00c      	beq.n	8005a6c <StartMusicTask+0x110>
                    playtoneRTOS(song1_verse1_melody[b], notelength, vol);
 8005a52:	4a46      	ldr	r2, [pc, #280]	; (8005b6c <StartMusicTask+0x210>)
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a5c:	b2d2      	uxtb	r2, r2
 8005a5e:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7ff fed1 	bl	8005808 <playtoneRTOS>
                    c++;
 8005a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a68:	3301      	adds	r3, #1
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	3301      	adds	r3, #1
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	2b3e      	cmp	r3, #62	; 0x3e
 8005a76:	d935      	bls.n	8005ae4 <StartMusicTask+0x188>
                    a++;
 8005a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	62fb      	str	r3, [r7, #44]	; 0x2c
                if (b >= sizeof(song1_verse1_melody) / sizeof(uint16_t)) {
 8005a86:	e02d      	b.n	8005ae4 <StartMusicTask+0x188>
                }
            } else if (a == 4 || a == 6) {
 8005a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d002      	beq.n	8005a94 <StartMusicTask+0x138>
 8005a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a90:	2b06      	cmp	r3, #6
 8005a92:	d127      	bne.n	8005ae4 <StartMusicTask+0x188>
                // chorus
                notelength = beatlength * song1_chorus_rhythmn[b];
 8005a94:	4a36      	ldr	r2, [pc, #216]	; (8005b70 <StartMusicTask+0x214>)
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a9c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005a9e:	fb12 f303 	smulbb	r3, r2, r3
 8005aa2:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (song1_chorus_melody[b] > 0) {
 8005aa4:	4a33      	ldr	r2, [pc, #204]	; (8005b74 <StartMusicTask+0x218>)
 8005aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d00c      	beq.n	8005aca <StartMusicTask+0x16e>
                    playtoneRTOS(song1_chorus_melody[b], notelength, vol);
 8005ab0:	4a30      	ldr	r2, [pc, #192]	; (8005b74 <StartMusicTask+0x218>)
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ab8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fea2 	bl	8005808 <playtoneRTOS>
                    c++;
 8005ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
                b++;
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	3301      	adds	r3, #1
 8005ace:	633b      	str	r3, [r7, #48]	; 0x30
                if (b >= sizeof(song1_chorus_melody) / sizeof(uint16_t)) {
 8005ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad2:	2b3a      	cmp	r3, #58	; 0x3a
 8005ad4:	d906      	bls.n	8005ae4 <StartMusicTask+0x188>
                    a++;
 8005ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad8:	3301      	adds	r3, #1
 8005ada:	637b      	str	r3, [r7, #52]	; 0x34
                    b = 0;
 8005adc:	2300      	movs	r3, #0
 8005ade:	633b      	str	r3, [r7, #48]	; 0x30
                    c = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
                }
            }

            osDelay(notelength);
 8005ae4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f00b fda2 	bl	8011630 <osDelay>
            //noTone(piezo);

            osDelay(notelength * beatseparationconstant);
 8005aec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005af6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b02:	ee17 0a90 	vmov	r0, s15
 8005b06:	f00b fd93 	bl	8011630 <osDelay>
            if (a == 7) { // loop back around to beginning of song
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0c:	2b07      	cmp	r3, #7
 8005b0e:	f47f af37 	bne.w	8005980 <StartMusicTask+0x24>
                a = 1;
 8005b12:	2301      	movs	r3, #1
 8005b14:	637b      	str	r3, [r7, #52]	; 0x34
 8005b16:	e733      	b.n	8005980 <StartMusicTask+0x24>
            }
        }
        else if (buzzer_setting == KSP_MAIN) {
 8005b18:	4b10      	ldr	r3, [pc, #64]	; (8005b5c <StartMusicTask+0x200>)
 8005b1a:	781b      	ldrb	r3, [r3, #0]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	f47f af2f 	bne.w	8005980 <StartMusicTask+0x24>
            playtoneRTOS(ksp_tunes[ksp_playhead], ksp_delays[ksp_playhead], vol);
 8005b22:	4a15      	ldr	r2, [pc, #84]	; (8005b78 <StartMusicTask+0x21c>)
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
 8005b2a:	4a14      	ldr	r2, [pc, #80]	; (8005b7c <StartMusicTask+0x220>)
 8005b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	4619      	mov	r1, r3
 8005b38:	f7ff fe66 	bl	8005808 <playtoneRTOS>
            ksp_playhead = (ksp_playhead + 1) % ksp_total;
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	3301      	adds	r3, #1
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	fb93 f2f2 	sdiv	r2, r3, r2
 8005b46:	69b9      	ldr	r1, [r7, #24]
 8005b48:	fb01 f202 	mul.w	r2, r1, r2
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	62bb      	str	r3, [r7, #40]	; 0x28
        if (is_soft_enabled()) {
 8005b50:	e716      	b.n	8005980 <StartMusicTask+0x24>
 8005b52:	bf00      	nop
 8005b54:	3e99999a 	.word	0x3e99999a
 8005b58:	20004a28 	.word	0x20004a28
 8005b5c:	20000001 	.word	0x20000001
 8005b60:	20000020 	.word	0x20000020
 8005b64:	20000004 	.word	0x20000004
 8005b68:	200000bc 	.word	0x200000bc
 8005b6c:	2000003c 	.word	0x2000003c
 8005b70:	200001b4 	.word	0x200001b4
 8005b74:	2000013c 	.word	0x2000013c
 8005b78:	2000022c 	.word	0x2000022c
 8005b7c:	20000254 	.word	0x20000254

08005b80 <startStateMachine>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStateMachine */
void startStateMachine(void const * argument)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b08c      	sub	sp, #48	; 0x30
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStateMachine */

    uint32_t launchTime = osKernelSysTick();
 8005b88:	f00b fcf6 	bl	8011578 <osKernelSysTick>
 8005b8c:	62f8      	str	r0, [r7, #44]	; 0x2c
    uint32_t currentTime = osKernelSysTick();
 8005b8e:	f00b fcf3 	bl	8011578 <osKernelSysTick>
 8005b92:	6278      	str	r0, [r7, #36]	; 0x24
    uint32_t timeSinceLaunch = 0;
 8005b94:	2300      	movs	r3, #0
 8005b96:	623b      	str	r3, [r7, #32]
    Servo deployServo;
    servo_init(&deployServo, &htim2, &htim2.Instance->CCR4);
 8005b98:	4bd3      	ldr	r3, [pc, #844]	; (8005ee8 <startStateMachine+0x368>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8005ba0:	f107 030c 	add.w	r3, r7, #12
 8005ba4:	49d0      	ldr	r1, [pc, #832]	; (8005ee8 <startStateMachine+0x368>)
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7fb ff16 	bl	80019d8 <servo_init>
    servo_disable(&deployServo);
 8005bac:	f107 030c 	add.w	r3, r7, #12
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f7fb ff45 	bl	8001a40 <servo_disable>
    servo_setting = 0;
 8005bb6:	4bcd      	ldr	r3, [pc, #820]	; (8005eec <startStateMachine+0x36c>)
 8005bb8:	2200      	movs	r2, #0
 8005bba:	701a      	strb	r2, [r3, #0]
    uint8_t cam_has_toggled = 0;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

    /* Infinite loop */
    for (;;) {

        currentTime = osKernelSysTick();
 8005bc2:	f00b fcd9 	bl	8011578 <osKernelSysTick>
 8005bc6:	6278      	str	r0, [r7, #36]	; 0x24
        timeSinceLaunch = currentTime - launchTime;
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	623b      	str	r3, [r7, #32]

        if (is_soft_enabled()) {
 8005bd0:	f7fe fab4 	bl	800413c <is_soft_enabled>
 8005bd4:	4603      	mov	r3, r0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 81a2 	beq.w	8005f20 <startStateMachine+0x3a0>

            float vbat = get_battery_voltage();
 8005bdc:	f7fe fa54 	bl	8004088 <get_battery_voltage>
 8005be0:	ed87 0a07 	vstr	s0, [r7, #28]

            if (vbat < 7.2) {
 8005be4:	69f8      	ldr	r0, [r7, #28]
 8005be6:	f7fa fccf 	bl	8000588 <__aeabi_f2d>
 8005bea:	a3bb      	add	r3, pc, #748	; (adr r3, 8005ed8 <startStateMachine+0x358>)
 8005bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf0:	f7fa ff94 	bl	8000b1c <__aeabi_dcmplt>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <startStateMachine+0x7e>
                disable_camera();
 8005bfa:	f7fe fb4b 	bl	8004294 <disable_camera>
            }

            switch (flight_state) {
 8005bfe:	4bbc      	ldr	r3, [pc, #752]	; (8005ef0 <startStateMachine+0x370>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b07      	cmp	r3, #7
 8005c04:	f200 81b7 	bhi.w	8005f76 <startStateMachine+0x3f6>
 8005c08:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <startStateMachine+0x90>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c31 	.word	0x08005c31
 8005c14:	08005c8b 	.word	0x08005c8b
 8005c18:	08005d0b 	.word	0x08005d0b
 8005c1c:	08005d59 	.word	0x08005d59
 8005c20:	08005db3 	.word	0x08005db3
 8005c24:	08005e05 	.word	0x08005e05
 8005c28:	08005e7f 	.word	0x08005e7f
 8005c2c:	08005f0d 	.word	0x08005f0d
            case FLIGHT_ERROR:
                // be annoying TODO
                buzzer_beep(BEEP_LONG);
 8005c30:	2032      	movs	r0, #50	; 0x32
 8005c32:	f7fe fabd 	bl	80041b0 <buzzer_beep>
                is_data_logging = 0;
 8005c36:	4baf      	ldr	r3, [pc, #700]	; (8005ef4 <startStateMachine+0x374>)
 8005c38:	2200      	movs	r2, #0
 8005c3a:	701a      	strb	r2, [r3, #0]

                // exit the state once we're no longer armed,
                // if battery voltage is in good state
                // and if there's a squib connected if one is necessary
                changeLed(0, 0, 0);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2100      	movs	r1, #0
 8005c40:	2000      	movs	r0, #0
 8005c42:	f7ff fe5d 	bl	8005900 <changeLed>
                if (!is_armed() && get_battery_voltage() > BATTERY_EMPTY_LIMIT) {
 8005c46:	f7fe fa51 	bl	80040ec <is_armed>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8187 	bne.w	8005f60 <startStateMachine+0x3e0>
 8005c52:	f7fe fa19 	bl	8004088 <get_battery_voltage>
 8005c56:	ee10 3a10 	vmov	r3, s0
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fa fc94 	bl	8000588 <__aeabi_f2d>
 8005c60:	a39d      	add	r3, pc, #628	; (adr r3, 8005ed8 <startStateMachine+0x358>)
 8005c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c66:	f7fa ff77 	bl	8000b58 <__aeabi_dcmpgt>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d100      	bne.n	8005c72 <startStateMachine+0xf2>
                    buzzer_beep(BEEP_SHORT);
                    buzzer_beep(BEEP_SHORT);
                    //set_status_led(ON);
                    flight_state = IDLE;
                }
                break;
 8005c70:	e176      	b.n	8005f60 <startStateMachine+0x3e0>
                    buzzer_clear_queue();
 8005c72:	f7fe fac9 	bl	8004208 <buzzer_clear_queue>
                    buzzer_beep(BEEP_SHORT);
 8005c76:	200c      	movs	r0, #12
 8005c78:	f7fe fa9a 	bl	80041b0 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 8005c7c:	200c      	movs	r0, #12
 8005c7e:	f7fe fa97 	bl	80041b0 <buzzer_beep>
                    flight_state = IDLE;
 8005c82:	4b9b      	ldr	r3, [pc, #620]	; (8005ef0 <startStateMachine+0x370>)
 8005c84:	2202      	movs	r2, #2
 8005c86:	701a      	strb	r2, [r3, #0]
                break;
 8005c88:	e16a      	b.n	8005f60 <startStateMachine+0x3e0>

            case SYSTEMS_CHECK:
                // this state is the entry state, it performs startup checking of some peripherals
                changeLed(100, 0, 0);
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	2064      	movs	r0, #100	; 0x64
 8005c90:	f7ff fe36 	bl	8005900 <changeLed>
                apply_complementary = 1;
 8005c94:	4b98      	ldr	r3, [pc, #608]	; (8005ef8 <startStateMachine+0x378>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	701a      	strb	r2, [r3, #0]
                is_data_logging = 0;
 8005c9a:	4b96      	ldr	r3, [pc, #600]	; (8005ef4 <startStateMachine+0x374>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	701a      	strb	r2, [r3, #0]
                // close the servo if necessary
                servo_writeangle(&deployServo, SERVO_CLOSED_POSITION);
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7fb fea8 	bl	80019fc <servo_writeangle>
                servo_setting = 1;
 8005cac:	4b8f      	ldr	r3, [pc, #572]	; (8005eec <startStateMachine+0x36c>)
 8005cae:	2201      	movs	r2, #1
 8005cb0:	701a      	strb	r2, [r3, #0]



                // enable power to camera/video transmitter
                if (vbat > 7.4) {
 8005cb2:	69f8      	ldr	r0, [r7, #28]
 8005cb4:	f7fa fc68 	bl	8000588 <__aeabi_f2d>
 8005cb8:	a389      	add	r3, pc, #548	; (adr r3, 8005ee0 <startStateMachine+0x360>)
 8005cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbe:	f7fa ff4b 	bl	8000b58 <__aeabi_dcmpgt>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <startStateMachine+0x14e>
                    restart_camera_with_recording();
 8005cc8:	f7fe fb04 	bl	80042d4 <restart_camera_with_recording>
 8005ccc:	e001      	b.n	8005cd2 <startStateMachine+0x152>
                } else {
                    disable_camera();
 8005cce:	f7fe fae1 	bl	8004294 <disable_camera>
                }

                // check if the battery is empty
                if (vbat <= BATTERY_EMPTY_LIMIT) {
 8005cd2:	69f8      	ldr	r0, [r7, #28]
 8005cd4:	f7fa fc58 	bl	8000588 <__aeabi_f2d>
 8005cd8:	a37f      	add	r3, pc, #508	; (adr r3, 8005ed8 <startStateMachine+0x358>)
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	f7fa ff27 	bl	8000b30 <__aeabi_dcmple>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d003      	beq.n	8005cf0 <startStateMachine+0x170>
                    flight_state = FLIGHT_ERROR;
 8005ce8:	4b81      	ldr	r3, [pc, #516]	; (8005ef0 <startStateMachine+0x370>)
 8005cea:	2200      	movs	r2, #0
 8005cec:	701a      	strb	r2, [r3, #0]
                    break;
 8005cee:	e142      	b.n	8005f76 <startStateMachine+0x3f6>
                }

                // if everything's okay, go into idle
                buzzer_beep(BEEP_SHORT);
 8005cf0:	200c      	movs	r0, #12
 8005cf2:	f7fe fa5d 	bl	80041b0 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 8005cf6:	200c      	movs	r0, #12
 8005cf8:	f7fe fa5a 	bl	80041b0 <buzzer_beep>
                set_status_led(1);
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	f7fe fafb 	bl	80042f8 <set_status_led>
                flight_state = IDLE;
 8005d02:	4b7b      	ldr	r3, [pc, #492]	; (8005ef0 <startStateMachine+0x370>)
 8005d04:	2202      	movs	r2, #2
 8005d06:	701a      	strb	r2, [r3, #0]
                break;
 8005d08:	e135      	b.n	8005f76 <startStateMachine+0x3f6>

            case IDLE:
                changeLed(0, 100, 0);
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	2000      	movs	r0, #0
 8005d10:	f7ff fdf6 	bl	8005900 <changeLed>
                is_data_logging = 0;
 8005d14:	4b77      	ldr	r3, [pc, #476]	; (8005ef4 <startStateMachine+0x374>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	701a      	strb	r2, [r3, #0]
                apply_complementary = 1;
 8005d1a:	4b77      	ldr	r3, [pc, #476]	; (8005ef8 <startStateMachine+0x378>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	701a      	strb	r2, [r3, #0]
                if (is_armed()) {
 8005d20:	f7fe f9e4 	bl	80040ec <is_armed>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <startStateMachine+0x1b2>
                    flight_state = FLIGHT_ERROR;
 8005d2a:	4b71      	ldr	r3, [pc, #452]	; (8005ef0 <startStateMachine+0x370>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	701a      	strb	r2, [r3, #0]
                    break;
 8005d30:	e121      	b.n	8005f76 <startStateMachine+0x3f6>
                }

                if (is_breakwire_connected()) {
 8005d32:	f7fe fa0f 	bl	8004154 <is_breakwire_connected>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8113 	beq.w	8005f64 <startStateMachine+0x3e4>
                    buzzer_beep(BEEP_SHORT);
 8005d3e:	200c      	movs	r0, #12
 8005d40:	f7fe fa36 	bl	80041b0 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 8005d44:	200c      	movs	r0, #12
 8005d46:	f7fe fa33 	bl	80041b0 <buzzer_beep>
                    set_status_led(0);
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7fe fad4 	bl	80042f8 <set_status_led>
                    flight_state = PREPARATION;
 8005d50:	4b67      	ldr	r3, [pc, #412]	; (8005ef0 <startStateMachine+0x370>)
 8005d52:	2203      	movs	r2, #3
 8005d54:	701a      	strb	r2, [r3, #0]
                    break;
 8005d56:	e10e      	b.n	8005f76 <startStateMachine+0x3f6>
                }
                break;

            case PREPARATION:
                changeLed(0, 0, 100);
 8005d58:	2264      	movs	r2, #100	; 0x64
 8005d5a:	2100      	movs	r1, #0
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	f7ff fdcf 	bl	8005900 <changeLed>
                apply_complementary = 1;
 8005d62:	4b65      	ldr	r3, [pc, #404]	; (8005ef8 <startStateMachine+0x378>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
                is_data_logging = 0;
 8005d68:	4b62      	ldr	r3, [pc, #392]	; (8005ef4 <startStateMachine+0x374>)
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	701a      	strb	r2, [r3, #0]
                if (is_breakwire_broken_debounce()) {
 8005d6e:	f7fe fa03 	bl	8004178 <is_breakwire_broken_debounce>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d009      	beq.n	8005d8c <startStateMachine+0x20c>
                    buzzer_beep(BEEP_LONG);
 8005d78:	2032      	movs	r0, #50	; 0x32
 8005d7a:	f7fe fa19 	bl	80041b0 <buzzer_beep>
                    set_status_led(1);
 8005d7e:	2001      	movs	r0, #1
 8005d80:	f7fe faba 	bl	80042f8 <set_status_led>
                    flight_state = IDLE;
 8005d84:	4b5a      	ldr	r3, [pc, #360]	; (8005ef0 <startStateMachine+0x370>)
 8005d86:	2202      	movs	r2, #2
 8005d88:	701a      	strb	r2, [r3, #0]
                    break;
 8005d8a:	e0f4      	b.n	8005f76 <startStateMachine+0x3f6>
                }

                // check arming switch with debouncing
                if (is_armed_debounce()) {
 8005d8c:	f7fe f9ba 	bl	8004104 <is_armed_debounce>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 80e8 	beq.w	8005f68 <startStateMachine+0x3e8>
                    buzzer_beep(BEEP_SHORT);
 8005d98:	200c      	movs	r0, #12
 8005d9a:	f7fe fa09 	bl	80041b0 <buzzer_beep>
                    buzzer_beep(BEEP_SHORT);
 8005d9e:	200c      	movs	r0, #12
 8005da0:	f7fe fa06 	bl	80041b0 <buzzer_beep>
                    set_status_led(1);
 8005da4:	2001      	movs	r0, #1
 8005da6:	f7fe faa7 	bl	80042f8 <set_status_led>
                    flight_state = ARMED;
 8005daa:	4b51      	ldr	r3, [pc, #324]	; (8005ef0 <startStateMachine+0x370>)
 8005dac:	2204      	movs	r2, #4
 8005dae:	701a      	strb	r2, [r3, #0]
                }
                break;
 8005db0:	e0da      	b.n	8005f68 <startStateMachine+0x3e8>

            case ARMED:
                is_data_logging = 1;
 8005db2:	4b50      	ldr	r3, [pc, #320]	; (8005ef4 <startStateMachine+0x374>)
 8005db4:	2201      	movs	r2, #1
 8005db6:	701a      	strb	r2, [r3, #0]
                changeLed(100, 100, 0);
 8005db8:	2200      	movs	r2, #0
 8005dba:	2164      	movs	r1, #100	; 0x64
 8005dbc:	2064      	movs	r0, #100	; 0x64
 8005dbe:	f7ff fd9f 	bl	8005900 <changeLed>
                apply_complementary = 1;
 8005dc2:	4b4d      	ldr	r3, [pc, #308]	; (8005ef8 <startStateMachine+0x378>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]
                if (!is_armed()) {
 8005dc8:	f7fe f990 	bl	80040ec <is_armed>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d109      	bne.n	8005de6 <startStateMachine+0x266>
                    buzzer_beep(BEEP_LONG);
 8005dd2:	2032      	movs	r0, #50	; 0x32
 8005dd4:	f7fe f9ec 	bl	80041b0 <buzzer_beep>
                    set_status_led(0);
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f7fe fa8d 	bl	80042f8 <set_status_led>
                    flight_state = PREPARATION;
 8005dde:	4b44      	ldr	r3, [pc, #272]	; (8005ef0 <startStateMachine+0x370>)
 8005de0:	2203      	movs	r2, #3
 8005de2:	701a      	strb	r2, [r3, #0]
                    break;
 8005de4:	e0c7      	b.n	8005f76 <startStateMachine+0x3f6>
                }

                if (is_breakwire_broken_debounce()) {
 8005de6:	f7fe f9c7 	bl	8004178 <is_breakwire_broken_debounce>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80bd 	beq.w	8005f6c <startStateMachine+0x3ec>
                    //reset_timer();

                    launchTime = currentTime;
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	62fb      	str	r3, [r7, #44]	; 0x2c

                    //set_launch_asserted(ON);
                    flight_state = LAUNCHED;
 8005df6:	4b3e      	ldr	r3, [pc, #248]	; (8005ef0 <startStateMachine+0x370>)
 8005df8:	2205      	movs	r2, #5
 8005dfa:	701a      	strb	r2, [r3, #0]
                    cam_has_toggled = 0;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    break;
 8005e02:	e0b8      	b.n	8005f76 <startStateMachine+0x3f6>
                }
                break;

            case LAUNCHED:
                is_data_logging = 1;
 8005e04:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <startStateMachine+0x374>)
 8005e06:	2201      	movs	r2, #1
 8005e08:	701a      	strb	r2, [r3, #0]
                changeLed(100, 100, 100);
 8005e0a:	2264      	movs	r2, #100	; 0x64
 8005e0c:	2164      	movs	r1, #100	; 0x64
 8005e0e:	2064      	movs	r0, #100	; 0x64
 8005e10:	f7ff fd76 	bl	8005900 <changeLed>
                apply_complementary = 0;
 8005e14:	4b38      	ldr	r3, [pc, #224]	; (8005ef8 <startStateMachine+0x378>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
                buzzer_beep(BEEP_SHORT);
 8005e1a:	200c      	movs	r0, #12
 8005e1c:	f7fe f9c8 	bl	80041b0 <buzzer_beep>
                buzzer_beep(BEEP_SHORT);
 8005e20:	200c      	movs	r0, #12
 8005e22:	f7fe f9c5 	bl	80041b0 <buzzer_beep>

                if (timeSinceLaunch >= MAX_DEPLOY_TIME
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f643 2297 	movw	r2, #14999	; 0x3a97
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d80b      	bhi.n	8005e48 <startStateMachine+0x2c8>
                        || (timeSinceLaunch >= MIN_DEPLOY_TIME
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e36:	4293      	cmp	r3, r2
 8005e38:	f240 809a 	bls.w	8005f70 <startStateMachine+0x3f0>
                                && is_vote_asserted())) {
 8005e3c:	f7fe fa67 	bl	800430e <is_vote_asserted>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 8094 	beq.w	8005f70 <startStateMachine+0x3f0>

                    if (is_armed()) {
 8005e48:	f7fe f950 	bl	80040ec <is_armed>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d011      	beq.n	8005e76 <startStateMachine+0x2f6>
                        servo_writeangle(&deployServo, SERVO_DEPLOY_POSITION);
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	21b4      	movs	r1, #180	; 0xb4
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fb fdcf 	bl	80019fc <servo_writeangle>
                        servo_setting = 2;
 8005e5e:	4b23      	ldr	r3, [pc, #140]	; (8005eec <startStateMachine+0x36c>)
 8005e60:	2202      	movs	r2, #2
 8005e62:	701a      	strb	r2, [r3, #0]

                        last_logged_deploy_time = timeSinceLaunch;
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <startStateMachine+0x37c>)
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	6013      	str	r3, [r2, #0]
                        buzzer_clear_queue();
 8005e6a:	f7fe f9cd 	bl	8004208 <buzzer_clear_queue>
                        flight_state = DEPLOYED;
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <startStateMachine+0x370>)
 8005e70:	2206      	movs	r2, #6
 8005e72:	701a      	strb	r2, [r3, #0]
                        break;
 8005e74:	e07f      	b.n	8005f76 <startStateMachine+0x3f6>
                    } else { // go back to systems check if rearmed
                        flight_state = SYSTEMS_CHECK;
 8005e76:	4b1e      	ldr	r3, [pc, #120]	; (8005ef0 <startStateMachine+0x370>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
                        break;
 8005e7c:	e07b      	b.n	8005f76 <startStateMachine+0x3f6>
                    }
                }
                break;

            case DEPLOYED:
                is_data_logging = 1;
 8005e7e:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <startStateMachine+0x374>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	701a      	strb	r2, [r3, #0]
                changeLed(100, 0, 100);
 8005e84:	2264      	movs	r2, #100	; 0x64
 8005e86:	2100      	movs	r1, #0
 8005e88:	2064      	movs	r0, #100	; 0x64
 8005e8a:	f7ff fd39 	bl	8005900 <changeLed>
                buzzer_beep(BEEP_LONG);
 8005e8e:	2032      	movs	r0, #50	; 0x32
 8005e90:	f7fe f98e 	bl	80041b0 <buzzer_beep>

                if (!cam_has_toggled && baro.altitude < 100) {
 8005e94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d114      	bne.n	8005ec6 <startStateMachine+0x346>
 8005e9c:	4b18      	ldr	r3, [pc, #96]	; (8005f00 <startStateMachine+0x380>)
 8005e9e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005ea2:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8005f04 <startStateMachine+0x384>
 8005ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eae:	d50a      	bpl.n	8005ec6 <startStateMachine+0x346>
                    pulse_recording_button();
 8005eb0:	f7fe f9b6 	bl	8004220 <pulse_recording_button>
                    osDelay(400);
 8005eb4:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005eb8:	f00b fbba 	bl	8011630 <osDelay>
                    pulse_recording_button();
 8005ebc:	f7fe f9b0 	bl	8004220 <pulse_recording_button>
                    cam_has_toggled = 1;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                if (timeSinceLaunch > 240000) { // 4 min after launch
 8005ec6:	6a3b      	ldr	r3, [r7, #32]
 8005ec8:	4a0f      	ldr	r2, [pc, #60]	; (8005f08 <startStateMachine+0x388>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d952      	bls.n	8005f74 <startStateMachine+0x3f4>
                    flight_state = LANDED;
 8005ece:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <startStateMachine+0x370>)
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	701a      	strb	r2, [r3, #0]
                }

                break;
 8005ed4:	e04e      	b.n	8005f74 <startStateMachine+0x3f4>
 8005ed6:	bf00      	nop
 8005ed8:	cccccccd 	.word	0xcccccccd
 8005edc:	401ccccc 	.word	0x401ccccc
 8005ee0:	9999999a 	.word	0x9999999a
 8005ee4:	401d9999 	.word	0x401d9999
 8005ee8:	20004c04 	.word	0x20004c04
 8005eec:	20000878 	.word	0x20000878
 8005ef0:	20000000 	.word	0x20000000
 8005ef4:	20000882 	.word	0x20000882
 8005ef8:	2000027c 	.word	0x2000027c
 8005efc:	2000087c 	.word	0x2000087c
 8005f00:	20004b2c 	.word	0x20004b2c
 8005f04:	42c80000 	.word	0x42c80000
 8005f08:	0003a980 	.word	0x0003a980

            case LANDED:
                is_data_logging = 0;
 8005f0c:	4b1c      	ldr	r3, [pc, #112]	; (8005f80 <startStateMachine+0x400>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
                buzzer_beep(BEEP_LONG);
 8005f12:	2032      	movs	r0, #50	; 0x32
 8005f14:	f7fe f94c 	bl	80041b0 <buzzer_beep>
                disable_camera();
 8005f18:	f7fe f9bc 	bl	8004294 <disable_camera>
                break;
 8005f1c:	bf00      	nop
 8005f1e:	e02a      	b.n	8005f76 <startStateMachine+0x3f6>
            }
        } else {
            // when "soft on/off switch" is off. Play some music and disable everything
            apply_complementary = 1;
 8005f20:	4b18      	ldr	r3, [pc, #96]	; (8005f84 <startStateMachine+0x404>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
            is_data_logging = 0;
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <startStateMachine+0x400>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
            changeLed(100, 0, 0);
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	2100      	movs	r1, #0
 8005f30:	2064      	movs	r0, #100	; 0x64
 8005f32:	f7ff fce5 	bl	8005900 <changeLed>
            buzzer_setting = KSP_MAIN;
 8005f36:	4b14      	ldr	r3, [pc, #80]	; (8005f88 <startStateMachine+0x408>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
            flight_state = SYSTEMS_CHECK;
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <startStateMachine+0x40c>)
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]
            servo_disable(&deployServo);
 8005f42:	f107 030c 	add.w	r3, r7, #12
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fb fd7a 	bl	8001a40 <servo_disable>
            servo_setting = 0;
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <startStateMachine+0x410>)
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
            baro.basepressure = baro.pressure_Pa; // Continously "zero out" altitude when soft off
 8005f52:	4b10      	ldr	r3, [pc, #64]	; (8005f94 <startStateMachine+0x414>)
 8005f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f56:	4a0f      	ldr	r2, [pc, #60]	; (8005f94 <startStateMachine+0x414>)
 8005f58:	6313      	str	r3, [r2, #48]	; 0x30
            disable_camera();
 8005f5a:	f7fe f99b 	bl	8004294 <disable_camera>
 8005f5e:	e00a      	b.n	8005f76 <startStateMachine+0x3f6>
                break;
 8005f60:	bf00      	nop
 8005f62:	e008      	b.n	8005f76 <startStateMachine+0x3f6>
                break;
 8005f64:	bf00      	nop
 8005f66:	e006      	b.n	8005f76 <startStateMachine+0x3f6>
                break;
 8005f68:	bf00      	nop
 8005f6a:	e004      	b.n	8005f76 <startStateMachine+0x3f6>
                break;
 8005f6c:	bf00      	nop
 8005f6e:	e002      	b.n	8005f76 <startStateMachine+0x3f6>
                break;
 8005f70:	bf00      	nop
 8005f72:	e000      	b.n	8005f76 <startStateMachine+0x3f6>
                break;
 8005f74:	bf00      	nop
        }
        osDelay(1);
 8005f76:	2001      	movs	r0, #1
 8005f78:	f00b fb5a 	bl	8011630 <osDelay>
        currentTime = osKernelSysTick();
 8005f7c:	e621      	b.n	8005bc2 <startStateMachine+0x42>
 8005f7e:	bf00      	nop
 8005f80:	20000882 	.word	0x20000882
 8005f84:	2000027c 	.word	0x2000027c
 8005f88:	20000001 	.word	0x20000001
 8005f8c:	20000000 	.word	0x20000000
 8005f90:	20000878 	.word	0x20000878
 8005f94:	20004b2c 	.word	0x20004b2c

08005f98 <StartTelemTask>:
 * @brief Function implementing the telemTask thread.
 * @retval None
 */
/* USER CODE END Header_StartTelemTask */
void StartTelemTask(void const * argument)
{
 8005f98:	b590      	push	{r4, r7, lr}
 8005f9a:	b0b3      	sub	sp, #204	; 0xcc
 8005f9c:	af02      	add	r7, sp, #8
 8005f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemTask */
    sx1280_custom radio;

    sxInit(&radio, &hspi3, LORA_NSS_GPIO_Port, LORA_NSS_Pin);
 8005fa0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8005fa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fa8:	4ad0      	ldr	r2, [pc, #832]	; (80062ec <StartTelemTask+0x354>)
 8005faa:	49d1      	ldr	r1, [pc, #836]	; (80062f0 <StartTelemTask+0x358>)
 8005fac:	f7fb fdac 	bl	8001b08 <sxInit>
    sxSetDio1Pin(&radio, LORA_DIO1_GPIO_Port, LORA_DIO1_Pin);
 8005fb0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005fb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fb8:	49ce      	ldr	r1, [pc, #824]	; (80062f4 <StartTelemTask+0x35c>)
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fb fe04 	bl	8001bc8 <sxSetDio1Pin>

    SetTxParams(&radio, 0x1F, 0xE0); // Power = 13 dBm (0x1F), Pout = -18 + power (dBm) ramptime = 20 us.
 8005fc0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005fc4:	22e0      	movs	r2, #224	; 0xe0
 8005fc6:	211f      	movs	r1, #31
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fb fef7 	bl	8001dbc <SetTxParams>
    //SetTxParams(&radio, 0, 0xE0); // lowest power -18dBm
    osDelay(3);
 8005fce:	2003      	movs	r0, #3
 8005fd0:	f00b fb2e 	bl	8011630 <osDelay>

    //lsm6dso imu;
    //uint8_t lsm_init_status = LSM_init(&imu, &hspi2, SPI2_NSS_GPIO_Port,SPI2_NSS_Pin);

    uint32_t counter = 0;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

    TLM_decoded TLM_dec;
    TLM_encoded TLM_enc;

    TLM_dec.packet_type = 1;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    TLM_dec.flight_state = 4;
 8005fe0:	2304      	movs	r3, #4
 8005fe2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    TLM_dec.is_playing_music = 0;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
    TLM_dec.is_data_logging = 0;
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    TLM_dec.pin_states = 0b00011011;
 8005ff2:	231b      	movs	r3, #27
 8005ff4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    TLM_dec.servo_state = 3;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    TLM_dec.vbat = 7.283;
 8005ffe:	4bbe      	ldr	r3, [pc, #760]	; (80062f8 <StartTelemTask+0x360>)
 8006000:	63bb      	str	r3, [r7, #56]	; 0x38
    TLM_dec.systick = 1232432;
 8006002:	4bbe      	ldr	r3, [pc, #760]	; (80062fc <StartTelemTask+0x364>)
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
    TLM_dec.orientation_quat[0] = 0.143123;
 8006006:	4bbe      	ldr	r3, [pc, #760]	; (8006300 <StartTelemTask+0x368>)
 8006008:	63fb      	str	r3, [r7, #60]	; 0x3c
    TLM_dec.acc[2] = 1337;
 800600a:	f240 5339 	movw	r3, #1337	; 0x539
 800600e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
    TLM_dec.gyro[2] = -21;
 8006012:	f64f 73eb 	movw	r3, #65515	; 0xffeb
 8006016:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
    TLM_dec.baro = 90001.623;
 800601a:	4bba      	ldr	r3, [pc, #744]	; (8006304 <StartTelemTask+0x36c>)
 800601c:	65bb      	str	r3, [r7, #88]	; 0x58
    TLM_dec.temp = 63.4;
 800601e:	4bba      	ldr	r3, [pc, #744]	; (8006308 <StartTelemTask+0x370>)
 8006020:	65fb      	str	r3, [r7, #92]	; 0x5c
    TLM_dec.vertical_velocity = 180;
 8006022:	4bba      	ldr	r3, [pc, #744]	; (800630c <StartTelemTask+0x374>)
 8006024:	667b      	str	r3, [r7, #100]	; 0x64
    TLM_dec.altitude = 1321;
 8006026:	4bba      	ldr	r3, [pc, #744]	; (8006310 <StartTelemTask+0x378>)
 8006028:	663b      	str	r3, [r7, #96]	; 0x60
    TLM_dec.debug = 1337;
 800602a:	f240 5339 	movw	r3, #1337	; 0x539
 800602e:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
    TLM_dec.ranging = 15212;
 8006032:	4bb8      	ldr	r3, [pc, #736]	; (8006314 <StartTelemTask+0x37c>)
 8006034:	66fb      	str	r3, [r7, #108]	; 0x6c

    encode_TLM(&TLM_dec, &TLM_enc);
 8006036:	f107 020c 	add.w	r2, r7, #12
 800603a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f7fc f91d 	bl	8002280 <encode_TLM>

    WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 8006046:	f107 020c 	add.w	r2, r7, #12
 800604a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800604e:	231f      	movs	r3, #31
 8006050:	2100      	movs	r1, #0
 8006052:	f7fb ff2c 	bl	8001eae <WriteBuffer>
    osDelay(1);
 8006056:	2001      	movs	r0, #1
 8006058:	f00b faea 	bl	8011630 <osDelay>

    SetDioIrqParams(&radio, 1 | (1 << 1) | (1<<9), 1 | (1 << 1) | (1<<9), 0, 0); // txdone and rxdone and rangingresultvalid on gpio1
 800605c:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8006060:	2300      	movs	r3, #0
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	f240 2203 	movw	r2, #515	; 0x203
 800606a:	f240 2103 	movw	r1, #515	; 0x203
 800606e:	f7fb ff87 	bl	8001f80 <SetDioIrqParams>
    osDelay(1);
 8006072:	2001      	movs	r0, #1
 8006074:	f00b fadc 	bl	8011630 <osDelay>
    sxStandardRangingMaster(&radio);
 8006078:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800607c:	4618      	mov	r0, r3
 800607e:	f7fb fe39 	bl	8001cf4 <sxStandardRangingMaster>

    osDelay(3);
 8006082:	2003      	movs	r0, #3
 8006084:	f00b fad4 	bl	8011630 <osDelay>

    uint8_t rxData[4];

    uint32_t lasttime = HAL_GetTick();
 8006088:	f001 fa5a 	bl	8007540 <HAL_GetTick>
 800608c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
    uint32_t nowtime = HAL_GetTick();
 8006090:	f001 fa56 	bl	8007540 <HAL_GetTick>
 8006094:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
        //changeLed(0, 0, 100);
        //nowtime = HAL_GetTick();
        //dt = (nowtime - lasttime) / 1000.0;
        //lasttime = nowtime;

        counter++;
 8006098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800609c:	3301      	adds	r3, #1
 800609e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

        for (int i = 0; i < 10; i++) {
 80060a2:	2300      	movs	r3, #0
 80060a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060a8:	e00f      	b.n	80060ca <StartTelemTask+0x132>
            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 80060aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80060ae:	4891      	ldr	r0, [pc, #580]	; (80062f4 <StartTelemTask+0x35c>)
 80060b0:	f002 fc20 	bl	80088f4 <HAL_GPIO_ReadPin>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10c      	bne.n	80060d4 <StartTelemTask+0x13c>
                break;
            }
            osDelay(3);
 80060ba:	2003      	movs	r0, #3
 80060bc:	f00b fab8 	bl	8011630 <osDelay>
        for (int i = 0; i < 10; i++) {
 80060c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060c4:	3301      	adds	r3, #1
 80060c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ce:	2b09      	cmp	r3, #9
 80060d0:	ddeb      	ble.n	80060aa <StartTelemTask+0x112>
 80060d2:	e000      	b.n	80060d6 <StartTelemTask+0x13e>
                break;
 80060d4:	bf00      	nop
        }

        if (counter % 30 == 0) {
 80060d6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80060da:	4b8f      	ldr	r3, [pc, #572]	; (8006318 <StartTelemTask+0x380>)
 80060dc:	fba3 2301 	umull	r2, r3, r3, r1
 80060e0:	091a      	lsrs	r2, r3, #4
 80060e2:	4613      	mov	r3, r2
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	1a9b      	subs	r3, r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	1aca      	subs	r2, r1, r3
 80060ec:	2a00      	cmp	r2, #0
 80060ee:	d178      	bne.n	80061e2 <StartTelemTask+0x24a>
            // change to receive mode every second for two way radio
            SetPacketParamsLora(&radio, 12, 0x80, 4, 0x20, 0x40); // 4 byte payload
 80060f0:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80060f4:	2340      	movs	r3, #64	; 0x40
 80060f6:	9301      	str	r3, [sp, #4]
 80060f8:	2320      	movs	r3, #32
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	2304      	movs	r3, #4
 80060fe:	2280      	movs	r2, #128	; 0x80
 8006100:	210c      	movs	r1, #12
 8006102:	f7fb feb0 	bl	8001e66 <SetPacketParamsLora>
            osDelay(1);
 8006106:	2001      	movs	r0, #1
 8006108:	f00b fa92 	bl	8011630 <osDelay>
            ClrIrqStatus(&radio, 1 | (1 << 1) | (1<<9));
 800610c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006110:	f240 2103 	movw	r1, #515	; 0x203
 8006114:	4618      	mov	r0, r3
 8006116:	f7fb ff6d 	bl	8001ff4 <ClrIrqStatus>
            osDelay(1);
 800611a:	2001      	movs	r0, #1
 800611c:	f00b fa88 	bl	8011630 <osDelay>
            SetRx(&radio, 0x02, 25);
 8006120:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006124:	2219      	movs	r2, #25
 8006126:	2102      	movs	r1, #2
 8006128:	4618      	mov	r0, r3
 800612a:	f7fb ffce 	bl	80020ca <SetRx>

            for (int i = 0; i < 25; i++) { // 25 ms timeout
 800612e:	2300      	movs	r3, #0
 8006130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006134:	e00f      	b.n	8006156 <StartTelemTask+0x1be>
                if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8006136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800613a:	486e      	ldr	r0, [pc, #440]	; (80062f4 <StartTelemTask+0x35c>)
 800613c:	f002 fbda 	bl	80088f4 <HAL_GPIO_ReadPin>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10c      	bne.n	8006160 <StartTelemTask+0x1c8>
                    break;
                }
                HAL_Delay(1);
 8006146:	2001      	movs	r0, #1
 8006148:	f001 fa06 	bl	8007558 <HAL_Delay>
            for (int i = 0; i < 25; i++) { // 25 ms timeout
 800614c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006150:	3301      	adds	r3, #1
 8006152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006156:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800615a:	2b18      	cmp	r3, #24
 800615c:	ddeb      	ble.n	8006136 <StartTelemTask+0x19e>
 800615e:	e000      	b.n	8006162 <StartTelemTask+0x1ca>
                    break;
 8006160:	bf00      	nop
            }

            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 8006162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006166:	4863      	ldr	r0, [pc, #396]	; (80062f4 <StartTelemTask+0x35c>)
 8006168:	f002 fbc4 	bl	80088f4 <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d028      	beq.n	80061c4 <StartTelemTask+0x22c>
                // rxdone
                ReadBuffer(&radio, 0, sizeof(rxData), rxData);
 8006172:	f107 0308 	add.w	r3, r7, #8
 8006176:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800617a:	2204      	movs	r2, #4
 800617c:	2100      	movs	r1, #0
 800617e:	f7fb feca 	bl	8001f16 <ReadBuffer>

                if (rxData[0] == 123 && rxData[1] == 100 && rxData[2] == 123 && rxData[3] == 100) {
 8006182:	7a3b      	ldrb	r3, [r7, #8]
 8006184:	2b7b      	cmp	r3, #123	; 0x7b
 8006186:	d10f      	bne.n	80061a8 <StartTelemTask+0x210>
 8006188:	7a7b      	ldrb	r3, [r7, #9]
 800618a:	2b64      	cmp	r3, #100	; 0x64
 800618c:	d10c      	bne.n	80061a8 <StartTelemTask+0x210>
 800618e:	7abb      	ldrb	r3, [r7, #10]
 8006190:	2b7b      	cmp	r3, #123	; 0x7b
 8006192:	d109      	bne.n	80061a8 <StartTelemTask+0x210>
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	2b64      	cmp	r3, #100	; 0x64
 8006198:	d106      	bne.n	80061a8 <StartTelemTask+0x210>
                    // enable camera
                    if (!is_camera_recording) {
 800619a:	4b60      	ldr	r3, [pc, #384]	; (800631c <StartTelemTask+0x384>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d110      	bne.n	80061c4 <StartTelemTask+0x22c>
                        restart_camera_with_recording();
 80061a2:	f7fe f897 	bl	80042d4 <restart_camera_with_recording>
                    if (!is_camera_recording) {
 80061a6:	e00d      	b.n	80061c4 <StartTelemTask+0x22c>
                    }
                }
                else if (rxData[0] == 12 && rxData[1] == 34 && rxData[2] == 56 && rxData[3] == 78) {
 80061a8:	7a3b      	ldrb	r3, [r7, #8]
 80061aa:	2b0c      	cmp	r3, #12
 80061ac:	d10a      	bne.n	80061c4 <StartTelemTask+0x22c>
 80061ae:	7a7b      	ldrb	r3, [r7, #9]
 80061b0:	2b22      	cmp	r3, #34	; 0x22
 80061b2:	d107      	bne.n	80061c4 <StartTelemTask+0x22c>
 80061b4:	7abb      	ldrb	r3, [r7, #10]
 80061b6:	2b38      	cmp	r3, #56	; 0x38
 80061b8:	d104      	bne.n	80061c4 <StartTelemTask+0x22c>
 80061ba:	7afb      	ldrb	r3, [r7, #11]
 80061bc:	2b4e      	cmp	r3, #78	; 0x4e
 80061be:	d101      	bne.n	80061c4 <StartTelemTask+0x22c>
                    // disable camera
                    disable_camera();
 80061c0:	f7fe f868 	bl	8004294 <disable_camera>

                }
            }
            osDelay(1);
 80061c4:	2001      	movs	r0, #1
 80061c6:	f00b fa33 	bl	8011630 <osDelay>

            SetPacketParamsLora(&radio, 12, 0x80, 32, 0x20, 0x40);
 80061ca:	f107 0070 	add.w	r0, r7, #112	; 0x70
 80061ce:	2340      	movs	r3, #64	; 0x40
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	2320      	movs	r3, #32
 80061d4:	9300      	str	r3, [sp, #0]
 80061d6:	2320      	movs	r3, #32
 80061d8:	2280      	movs	r2, #128	; 0x80
 80061da:	210c      	movs	r1, #12
 80061dc:	f7fb fe43 	bl	8001e66 <SetPacketParamsLora>
 80061e0:	e158      	b.n	8006494 <StartTelemTask+0x4fc>

        }
        else if ((counter % 60 == 12 || counter % 60 == 24) && ranging_enabled) {
 80061e2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80061e6:	4b4c      	ldr	r3, [pc, #304]	; (8006318 <StartTelemTask+0x380>)
 80061e8:	fba3 2301 	umull	r2, r3, r3, r1
 80061ec:	095a      	lsrs	r2, r3, #5
 80061ee:	4613      	mov	r3, r2
 80061f0:	011b      	lsls	r3, r3, #4
 80061f2:	1a9b      	subs	r3, r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	1aca      	subs	r2, r1, r3
 80061f8:	2a0c      	cmp	r2, #12
 80061fa:	d00d      	beq.n	8006218 <StartTelemTask+0x280>
 80061fc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8006200:	4b45      	ldr	r3, [pc, #276]	; (8006318 <StartTelemTask+0x380>)
 8006202:	fba3 2301 	umull	r2, r3, r3, r1
 8006206:	095a      	lsrs	r2, r3, #5
 8006208:	4613      	mov	r3, r2
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	1a9b      	subs	r3, r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	1aca      	subs	r2, r1, r3
 8006212:	2a18      	cmp	r2, #24
 8006214:	f040 80ab 	bne.w	800636e <StartTelemTask+0x3d6>
 8006218:	4b41      	ldr	r3, [pc, #260]	; (8006320 <StartTelemTask+0x388>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 80a6 	beq.w	800636e <StartTelemTask+0x3d6>
            // twice per second, try ranging
            ClrIrqStatus(&radio, 1 | (1 << 1) | (1<<9));
 8006222:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006226:	f240 2103 	movw	r1, #515	; 0x203
 800622a:	4618      	mov	r0, r3
 800622c:	f7fb fee2 	bl	8001ff4 <ClrIrqStatus>
            osDelay(1);
 8006230:	2001      	movs	r0, #1
 8006232:	f00b f9fd 	bl	8011630 <osDelay>
            SetStandbyRC(&radio);
 8006236:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800623a:	4618      	mov	r0, r3
 800623c:	f7fb fcd7 	bl	8001bee <SetStandbyRC>
            osDelay(1);
 8006240:	2001      	movs	r0, #1
 8006242:	f00b f9f5 	bl	8011630 <osDelay>
            setPacketRanging(&radio);
 8006246:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800624a:	4618      	mov	r0, r3
 800624c:	f7fb fd26 	bl	8001c9c <setPacketRanging>
            osDelay(1);
 8006250:	2001      	movs	r0, #1
 8006252:	f00b f9ed 	bl	8011630 <osDelay>
            SetModulationParams(&radio, 0x80, 0x18, 0x01);
 8006256:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800625a:	2301      	movs	r3, #1
 800625c:	2218      	movs	r2, #24
 800625e:	2180      	movs	r1, #128	; 0x80
 8006260:	f7fb fde0 	bl	8001e24 <SetModulationParams>
            osDelay(1);
 8006264:	2001      	movs	r0, #1
 8006266:	f00b f9e3 	bl	8011630 <osDelay>
            SetPacketParamsLora(&radio, 12, 0x80, 0, 0x20, 0x40);
 800626a:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800626e:	2340      	movs	r3, #64	; 0x40
 8006270:	9301      	str	r3, [sp, #4]
 8006272:	2320      	movs	r3, #32
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	2280      	movs	r2, #128	; 0x80
 800627a:	210c      	movs	r1, #12
 800627c:	f7fb fdf3 	bl	8001e66 <SetPacketParamsLora>
            osDelay(1);
 8006280:	2001      	movs	r0, #1
 8006282:	f00b f9d5 	bl	8011630 <osDelay>
            sxStandardRangingMaster(&radio);
 8006286:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800628a:	4618      	mov	r0, r3
 800628c:	f7fb fd32 	bl	8001cf4 <sxStandardRangingMaster>
            osDelay(1);
 8006290:	2001      	movs	r0, #1
 8006292:	f00b f9cd 	bl	8011630 <osDelay>
            SetRfFrequency(&radio);
 8006296:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800629a:	4618      	mov	r0, r3
 800629c:	f7fb fcbc 	bl	8001c18 <SetRfFrequency>
            osDelay(1);
 80062a0:	2001      	movs	r0, #1
 80062a2:	f00b f9c5 	bl	8011630 <osDelay>
            SetTx(&radio, 0x02, 25); // time-out of 1ms * 30 = 30ms
 80062a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80062aa:	2219      	movs	r2, #25
 80062ac:	2102      	movs	r1, #2
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fb feec 	bl	800208c <SetTx>
            osDelay(1);
 80062b4:	2001      	movs	r0, #1
 80062b6:	f00b f9bb 	bl	8011630 <osDelay>

            for (int i = 0; i < 30; i++) { // 30 ms timeout
 80062ba:	2300      	movs	r3, #0
 80062bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062c0:	e00f      	b.n	80062e2 <StartTelemTask+0x34a>
                if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin)) {
 80062c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062c6:	480b      	ldr	r0, [pc, #44]	; (80062f4 <StartTelemTask+0x35c>)
 80062c8:	f002 fb14 	bl	80088f4 <HAL_GPIO_ReadPin>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d128      	bne.n	8006324 <StartTelemTask+0x38c>
                    break;
                }
                HAL_Delay(1);
 80062d2:	2001      	movs	r0, #1
 80062d4:	f001 f940 	bl	8007558 <HAL_Delay>
            for (int i = 0; i < 30; i++) { // 30 ms timeout
 80062d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062dc:	3301      	adds	r3, #1
 80062de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80062e6:	2b1d      	cmp	r3, #29
 80062e8:	ddeb      	ble.n	80062c2 <StartTelemTask+0x32a>
 80062ea:	e01c      	b.n	8006326 <StartTelemTask+0x38e>
 80062ec:	40020000 	.word	0x40020000
 80062f0:	20004984 	.word	0x20004984
 80062f4:	40020800 	.word	0x40020800
 80062f8:	40e90e56 	.word	0x40e90e56
 80062fc:	0012ce30 	.word	0x0012ce30
 8006300:	3e128ed6 	.word	0x3e128ed6
 8006304:	47afc8d0 	.word	0x47afc8d0
 8006308:	427d999a 	.word	0x427d999a
 800630c:	43340000 	.word	0x43340000
 8006310:	44a52000 	.word	0x44a52000
 8006314:	466db000 	.word	0x466db000
 8006318:	88888889 	.word	0x88888889
 800631c:	20000880 	.word	0x20000880
 8006320:	20000883 	.word	0x20000883
                    break;
 8006324:	bf00      	nop
            }

            if (HAL_GPIO_ReadPin(LORA_DIO1_GPIO_Port, LORA_DIO1_Pin) && 0) {
 8006326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800632a:	485c      	ldr	r0, [pc, #368]	; (800649c <StartTelemTask+0x504>)
 800632c:	f002 fae2 	bl	80088f4 <HAL_GPIO_ReadPin>
                // TODO
                SetStandbyRC(&radio);
                osDelay(1);
            }

            osDelay(1);
 8006330:	2001      	movs	r0, #1
 8006332:	f00b f97d 	bl	8011630 <osDelay>
            SetRfFrequency2(&radio);
 8006336:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800633a:	4618      	mov	r0, r3
 800633c:	f7fb fc82 	bl	8001c44 <SetRfFrequency2>
            osDelay(1);
 8006340:	2001      	movs	r0, #1
 8006342:	f00b f975 	bl	8011630 <osDelay>
            setPacketLora(&radio);
 8006346:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800634a:	4618      	mov	r0, r3
 800634c:	f7fb fc90 	bl	8001c70 <setPacketLora>
            osDelay(1);
 8006350:	2001      	movs	r0, #1
 8006352:	f00b f96d 	bl	8011630 <osDelay>
            SetPacketParamsLora(&radio, 12, 0x80, 32, 0x20, 0x40);
 8006356:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800635a:	2340      	movs	r3, #64	; 0x40
 800635c:	9301      	str	r3, [sp, #4]
 800635e:	2320      	movs	r3, #32
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	2320      	movs	r3, #32
 8006364:	2280      	movs	r2, #128	; 0x80
 8006366:	210c      	movs	r1, #12
 8006368:	f7fb fd7d 	bl	8001e66 <SetPacketParamsLora>
 800636c:	e092      	b.n	8006494 <StartTelemTask+0x4fc>
        } else {
            TLM_dec.vbat = get_battery_voltage();
 800636e:	f7fd fe8b 	bl	8004088 <get_battery_voltage>
 8006372:	eef0 7a40 	vmov.f32	s15, s0
 8006376:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            TLM_dec.systick = osKernelSysTick();
 800637a:	f00b f8fd 	bl	8011578 <osKernelSysTick>
 800637e:	4603      	mov	r3, r0
 8006380:	637b      	str	r3, [r7, #52]	; 0x34
            TLM_dec.is_data_logging = is_data_logging;
 8006382:	4b47      	ldr	r3, [pc, #284]	; (80064a0 <StartTelemTask+0x508>)
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
            TLM_dec.acc[0] = imu.rawAcc[0];
 800638a:	4b46      	ldr	r3, [pc, #280]	; (80064a4 <StartTelemTask+0x50c>)
 800638c:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8006390:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
            TLM_dec.acc[1] = imu.rawAcc[1];
 8006394:	4b43      	ldr	r3, [pc, #268]	; (80064a4 <StartTelemTask+0x50c>)
 8006396:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800639a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
            TLM_dec.acc[2] = imu.rawAcc[2];
 800639e:	4b41      	ldr	r3, [pc, #260]	; (80064a4 <StartTelemTask+0x50c>)
 80063a0:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 80063a4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            TLM_dec.gyro[0] = imu.rawGyro[0];
 80063a8:	4b3e      	ldr	r3, [pc, #248]	; (80064a4 <StartTelemTask+0x50c>)
 80063aa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80063ae:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            TLM_dec.gyro[1] = imu.rawGyro[1];
 80063b2:	4b3c      	ldr	r3, [pc, #240]	; (80064a4 <StartTelemTask+0x50c>)
 80063b4:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80063b8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
            TLM_dec.gyro[2] = imu.rawGyro[2];
 80063bc:	4b39      	ldr	r3, [pc, #228]	; (80064a4 <StartTelemTask+0x50c>)
 80063be:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80063c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
            TLM_dec.orientation_quat[0] = ori.orientationQuat.w;
 80063c6:	4b38      	ldr	r3, [pc, #224]	; (80064a8 <StartTelemTask+0x510>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	63fb      	str	r3, [r7, #60]	; 0x3c
            TLM_dec.orientation_quat[1] = ori.orientationQuat.v[0];
 80063cc:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <StartTelemTask+0x510>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	643b      	str	r3, [r7, #64]	; 0x40
            TLM_dec.orientation_quat[2] = ori.orientationQuat.v[1];
 80063d2:	4b35      	ldr	r3, [pc, #212]	; (80064a8 <StartTelemTask+0x510>)
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	647b      	str	r3, [r7, #68]	; 0x44
            TLM_dec.orientation_quat[3] = ori.orientationQuat.v[2];
 80063d8:	4b33      	ldr	r3, [pc, #204]	; (80064a8 <StartTelemTask+0x510>)
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	64bb      	str	r3, [r7, #72]	; 0x48
            // SPL06_Read(&baro);
            TLM_dec.baro = baro.pressure_Pa;
 80063de:	4b33      	ldr	r3, [pc, #204]	; (80064ac <StartTelemTask+0x514>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	65bb      	str	r3, [r7, #88]	; 0x58
            TLM_dec.temp = baro.temperature_C;
 80063e4:	4b31      	ldr	r3, [pc, #196]	; (80064ac <StartTelemTask+0x514>)
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	65fb      	str	r3, [r7, #92]	; 0x5c
            TLM_dec.altitude = baro.altitude;
 80063ea:	4b30      	ldr	r3, [pc, #192]	; (80064ac <StartTelemTask+0x514>)
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	663b      	str	r3, [r7, #96]	; 0x60
            TLM_dec.vertical_velocity = baro.vertical_speed;
 80063f0:	4b2e      	ldr	r3, [pc, #184]	; (80064ac <StartTelemTask+0x514>)
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	667b      	str	r3, [r7, #100]	; 0x64
            TLM_dec.flight_state = flight_state;
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <StartTelemTask+0x518>)
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
            TLM_dec.pin_states = (is_soft_enabled()) | (is_armed() << 1)
 80063fe:	f7fd fe9d 	bl	800413c <is_soft_enabled>
 8006402:	4603      	mov	r3, r0
 8006404:	b25c      	sxtb	r4, r3
 8006406:	f7fd fe71 	bl	80040ec <is_armed>
 800640a:	4603      	mov	r3, r0
 800640c:	005b      	lsls	r3, r3, #1
 800640e:	b25b      	sxtb	r3, r3
 8006410:	4323      	orrs	r3, r4
 8006412:	b25c      	sxtb	r4, r3
                    | (is_breakwire_connected() << 2) | (is_camera_on << 3);
 8006414:	f7fd fe9e 	bl	8004154 <is_breakwire_connected>
 8006418:	4603      	mov	r3, r0
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	b25b      	sxtb	r3, r3
 800641e:	4323      	orrs	r3, r4
 8006420:	b25a      	sxtb	r2, r3
 8006422:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <StartTelemTask+0x51c>)
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	b25b      	sxtb	r3, r3
 800642a:	4313      	orrs	r3, r2
 800642c:	b25b      	sxtb	r3, r3
 800642e:	b2db      	uxtb	r3, r3
            TLM_dec.pin_states = (is_soft_enabled()) | (is_armed() << 1)
 8006430:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
            TLM_dec.servo_state = servo_setting;
 8006434:	4b20      	ldr	r3, [pc, #128]	; (80064b8 <StartTelemTask+0x520>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
            //        data[1], data[2], data[3]);
            //sprintf(printBuffer, "Quaternion: %f, %f, %f, %f\r\n",data[0],ori.orientationQuat.v[0],ori.orientationQuat.v[1],ori.orientationQuat.v[2]);
            //CDC_Transmit_FS((uint8_t*) printBuffer,
            //        MIN(strlen(printBuffer), 128));

            encode_TLM(&TLM_dec, &TLM_enc);
 800643c:	f107 020c 	add.w	r2, r7, #12
 8006440:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7fb ff1a 	bl	8002280 <encode_TLM>
            WriteBuffer(&radio, 0, (uint8_t*) &TLM_enc, sizeof(TLM_enc));
 800644c:	f107 020c 	add.w	r2, r7, #12
 8006450:	f107 0070 	add.w	r0, r7, #112	; 0x70
 8006454:	231f      	movs	r3, #31
 8006456:	2100      	movs	r1, #0
 8006458:	f7fb fd29 	bl	8001eae <WriteBuffer>
            //WriteBuffer(&radio, 0, (uint8_t*) data, sizeof(data));
            osDelay(1);
 800645c:	2001      	movs	r0, #1
 800645e:	f00b f8e7 	bl	8011630 <osDelay>
            ClrIrqStatus(&radio, 1 | (1 << 1) | (1<<9)); // clear txdone/rxdone irq
 8006462:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006466:	f240 2103 	movw	r1, #515	; 0x203
 800646a:	4618      	mov	r0, r3
 800646c:	f7fb fdc2 	bl	8001ff4 <ClrIrqStatus>
            osDelay(1);
 8006470:	2001      	movs	r0, #1
 8006472:	f00b f8dd 	bl	8011630 <osDelay>
            SetRfFrequency2(&radio);
 8006476:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800647a:	4618      	mov	r0, r3
 800647c:	f7fb fbe2 	bl	8001c44 <SetRfFrequency2>
            osDelay(1);
 8006480:	2001      	movs	r0, #1
 8006482:	f00b f8d5 	bl	8011630 <osDelay>
            SetTx(&radio, 0x02, 50); // time-out of 1ms * 50 = 50ms
 8006486:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800648a:	2232      	movs	r2, #50	; 0x32
 800648c:	2102      	movs	r1, #2
 800648e:	4618      	mov	r0, r3
 8006490:	f7fb fdfc 	bl	800208c <SetTx>
        }


        osDelay(10);
 8006494:	200a      	movs	r0, #10
 8006496:	f00b f8cb 	bl	8011630 <osDelay>
        counter++;
 800649a:	e5fd      	b.n	8006098 <StartTelemTask+0x100>
 800649c:	40020800 	.word	0x40020800
 80064a0:	20000882 	.word	0x20000882
 80064a4:	20004860 	.word	0x20004860
 80064a8:	20004618 	.word	0x20004618
 80064ac:	20004b2c 	.word	0x20004b2c
 80064b0:	20000000 	.word	0x20000000
 80064b4:	20000881 	.word	0x20000881
 80064b8:	20000878 	.word	0x20000878

080064bc <StartBaroTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBaroTask */
void StartBaroTask(void const * argument)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b088      	sub	sp, #32
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBaroTask */
  /* Infinite loop */
    uint32_t counter = 0;
 80064c4:	2300      	movs	r3, #0
 80064c6:	61bb      	str	r3, [r7, #24]
    float prevh = 0;
 80064c8:	f04f 0300 	mov.w	r3, #0
 80064cc:	617b      	str	r3, [r7, #20]
    uint32_t last_baro_time = osKernelSysTick();
 80064ce:	f00b f853 	bl	8011578 <osKernelSysTick>
 80064d2:	61f8      	str	r0, [r7, #28]
    uint32_t new_baro_time = osKernelSysTick();
 80064d4:	f00b f850 	bl	8011578 <osKernelSysTick>
 80064d8:	6138      	str	r0, [r7, #16]
    for (;;) {
        float dt = ((float) __HAL_TIM_GET_COUNTER(&htim6))/1000000;
 80064da:	4b27      	ldr	r3, [pc, #156]	; (8006578 <StartBaroTask+0xbc>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	ee07 3a90 	vmov	s15, r3
 80064e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80064e8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800657c <StartBaroTask+0xc0>
 80064ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f0:	edc7 7a03 	vstr	s15, [r7, #12]
        __HAL_TIM_SET_COUNTER(&htim6,0);
 80064f4:	4b20      	ldr	r3, [pc, #128]	; (8006578 <StartBaroTask+0xbc>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2200      	movs	r2, #0
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24
        orientation_setGyro(&ori, imu.gyroRPS);
 80064fc:	4920      	ldr	r1, [pc, #128]	; (8006580 <StartBaroTask+0xc4>)
 80064fe:	4821      	ldr	r0, [pc, #132]	; (8006584 <StartBaroTask+0xc8>)
 8006500:	f000 fa1b 	bl	800693a <orientation_setGyro>
        orientation_setAcc(&ori, imu.accMPS);
 8006504:	4920      	ldr	r1, [pc, #128]	; (8006588 <StartBaroTask+0xcc>)
 8006506:	481f      	ldr	r0, [pc, #124]	; (8006584 <StartBaroTask+0xc8>)
 8006508:	f000 fa2e 	bl	8006968 <orientation_setAcc>
        orientation_update(&ori, dt, apply_complementary);
 800650c:	4b1f      	ldr	r3, [pc, #124]	; (800658c <StartBaroTask+0xd0>)
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	ed97 0a03 	vldr	s0, [r7, #12]
 8006516:	481b      	ldr	r0, [pc, #108]	; (8006584 <StartBaroTask+0xc8>)
 8006518:	f000 fa3e 	bl	8006998 <orientation_update>
        if (counter % 50 == 0) { // 20 Hz
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <StartBaroTask+0xd4>)
 8006520:	fba3 1302 	umull	r1, r3, r3, r2
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	2132      	movs	r1, #50	; 0x32
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d11d      	bne.n	800656e <StartBaroTask+0xb2>
            prevh = baro.altitude;
 8006532:	4b18      	ldr	r3, [pc, #96]	; (8006594 <StartBaroTask+0xd8>)
 8006534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006536:	617b      	str	r3, [r7, #20]
            SPL06_Read(&baro);
 8006538:	4816      	ldr	r0, [pc, #88]	; (8006594 <StartBaroTask+0xd8>)
 800653a:	f7fb f963 	bl	8001804 <SPL06_Read>
            new_baro_time = osKernelSysTick();
 800653e:	f00b f81b 	bl	8011578 <osKernelSysTick>
 8006542:	6138      	str	r0, [r7, #16]
            baro.vertical_speed = (baro.altitude - prevh) / (new_baro_time - last_baro_time);
 8006544:	4b13      	ldr	r3, [pc, #76]	; (8006594 <StartBaroTask+0xd8>)
 8006546:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800654a:	edd7 7a05 	vldr	s15, [r7, #20]
 800654e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	1ad3      	subs	r3, r2, r3
 8006558:	ee07 3a90 	vmov	s15, r3
 800655c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006564:	4b0b      	ldr	r3, [pc, #44]	; (8006594 <StartBaroTask+0xd8>)
 8006566:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
            last_baro_time = new_baro_time;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	61fb      	str	r3, [r7, #28]
        }
        osDelay(1);
 800656e:	2001      	movs	r0, #1
 8006570:	f00b f85e 	bl	8011630 <osDelay>
    for (;;) {
 8006574:	e7b1      	b.n	80064da <StartBaroTask+0x1e>
 8006576:	bf00      	nop
 8006578:	20004b68 	.word	0x20004b68
 800657c:	49742400 	.word	0x49742400
 8006580:	20004898 	.word	0x20004898
 8006584:	20004618 	.word	0x20004618
 8006588:	200048c4 	.word	0x200048c4
 800658c:	2000027c 	.word	0x2000027c
 8006590:	51eb851f 	.word	0x51eb851f
 8006594:	20004b2c 	.word	0x20004b2c

08006598 <StartBlackboxTask>:
* @param argument: Not used
* @retval None
 */
/* USER CODE END Header_StartBlackboxTask */
void StartBlackboxTask(void const * argument)
{
 8006598:	b590      	push	{r4, r7, lr}
 800659a:	b097      	sub	sp, #92	; 0x5c
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlackboxTask */
    osDelay(1);
 80065a0:	2001      	movs	r0, #1
 80065a2:	f00b f845 	bl	8011630 <osDelay>
    W25qxx_Init();
 80065a6:	f7fc fdbd 	bl	8003124 <W25qxx_Init>


    osDelay(1); // wait 10 sec.
 80065aa:	2001      	movs	r0, #1
 80065ac:	f00b f840 	bl	8011630 <osDelay>
    TLM_decoded TLM_dec;


    uint16_t current_page = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    while (1) {
        while (!is_data_logging) {
 80065b6:	e002      	b.n	80065be <StartBlackboxTask+0x26>
            osDelay(10);
 80065b8:	200a      	movs	r0, #10
 80065ba:	f00b f839 	bl	8011630 <osDelay>
        while (!is_data_logging) {
 80065be:	4b5b      	ldr	r3, [pc, #364]	; (800672c <StartBlackboxTask+0x194>)
 80065c0:	781b      	ldrb	r3, [r3, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0f8      	beq.n	80065b8 <StartBlackboxTask+0x20>
        }
        osDelay(5000);
 80065c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80065ca:	f00b f831 	bl	8011630 <osDelay>
        if (is_data_logging) {
 80065ce:	4b57      	ldr	r3, [pc, #348]	; (800672c <StartBlackboxTask+0x194>)
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d100      	bne.n	80065d8 <StartBlackboxTask+0x40>
        while (!is_data_logging) {
 80065d6:	e7f2      	b.n	80065be <StartBlackboxTask+0x26>
            break;
 80065d8:	bf00      	nop
        }
    }
    playtoneRTOS(1000, 100, 20);
 80065da:	2214      	movs	r2, #20
 80065dc:	2164      	movs	r1, #100	; 0x64
 80065de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80065e2:	f7ff f911 	bl	8005808 <playtoneRTOS>
    W25qxx_EraseChip(); // takes some time
 80065e6:	f7fc ff41 	bl	800346c <W25qxx_EraseChip>
    playtoneRTOS(1500, 100, 20);
 80065ea:	2214      	movs	r2, #20
 80065ec:	2164      	movs	r1, #100	; 0x64
 80065ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80065f2:	f7ff f909 	bl	8005808 <playtoneRTOS>


    chunk_of_flash.blockinfo[0] = 123;
 80065f6:	4b4e      	ldr	r3, [pc, #312]	; (8006730 <StartBlackboxTask+0x198>)
 80065f8:	227b      	movs	r2, #123	; 0x7b
 80065fa:	701a      	strb	r2, [r3, #0]
    chunk_of_flash.blockinfo[1] = 123;
 80065fc:	4b4c      	ldr	r3, [pc, #304]	; (8006730 <StartBlackboxTask+0x198>)
 80065fe:	227b      	movs	r2, #123	; 0x7b
 8006600:	705a      	strb	r2, [r3, #1]
    /* Infinite loop */
    for (;;) {

        if (is_data_logging) {
 8006602:	4b4a      	ldr	r3, [pc, #296]	; (800672c <StartBlackboxTask+0x194>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8089 	beq.w	800671e <StartBlackboxTask+0x186>

            for (int i = 0; i < 7; i++) {
 800660c:	2300      	movs	r3, #0
 800660e:	653b      	str	r3, [r7, #80]	; 0x50
 8006610:	e070      	b.n	80066f4 <StartBlackboxTask+0x15c>
                TLM_dec.vbat = get_battery_voltage();
 8006612:	f7fd fd39 	bl	8004088 <get_battery_voltage>
 8006616:	eef0 7a40 	vmov.f32	s15, s0
 800661a:	edc7 7a06 	vstr	s15, [r7, #24]
                TLM_dec.systick = osKernelSysTick();
 800661e:	f00a ffab 	bl	8011578 <osKernelSysTick>
 8006622:	4603      	mov	r3, r0
 8006624:	617b      	str	r3, [r7, #20]
                TLM_dec.is_data_logging = is_data_logging;
 8006626:	4b41      	ldr	r3, [pc, #260]	; (800672c <StartBlackboxTask+0x194>)
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	73fb      	strb	r3, [r7, #15]
                TLM_dec.acc[0] = imu.rawAcc[0];
 800662c:	4b41      	ldr	r3, [pc, #260]	; (8006734 <StartBlackboxTask+0x19c>)
 800662e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8006632:	85bb      	strh	r3, [r7, #44]	; 0x2c
                TLM_dec.acc[1] = imu.rawAcc[1];
 8006634:	4b3f      	ldr	r3, [pc, #252]	; (8006734 <StartBlackboxTask+0x19c>)
 8006636:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 800663a:	85fb      	strh	r3, [r7, #46]	; 0x2e
                TLM_dec.acc[2] = imu.rawAcc[2];
 800663c:	4b3d      	ldr	r3, [pc, #244]	; (8006734 <StartBlackboxTask+0x19c>)
 800663e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8006642:	863b      	strh	r3, [r7, #48]	; 0x30
                TLM_dec.gyro[0] = imu.rawGyro[0];
 8006644:	4b3b      	ldr	r3, [pc, #236]	; (8006734 <StartBlackboxTask+0x19c>)
 8006646:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800664a:	867b      	strh	r3, [r7, #50]	; 0x32
                TLM_dec.gyro[1] = imu.rawGyro[1];
 800664c:	4b39      	ldr	r3, [pc, #228]	; (8006734 <StartBlackboxTask+0x19c>)
 800664e:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8006652:	86bb      	strh	r3, [r7, #52]	; 0x34
                TLM_dec.gyro[2] = imu.rawGyro[2];
 8006654:	4b37      	ldr	r3, [pc, #220]	; (8006734 <StartBlackboxTask+0x19c>)
 8006656:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800665a:	86fb      	strh	r3, [r7, #54]	; 0x36
                TLM_dec.orientation_quat[0] = ori.orientationQuat.w;
 800665c:	4b36      	ldr	r3, [pc, #216]	; (8006738 <StartBlackboxTask+0x1a0>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	61fb      	str	r3, [r7, #28]
                TLM_dec.orientation_quat[1] = ori.orientationQuat.v[0];
 8006662:	4b35      	ldr	r3, [pc, #212]	; (8006738 <StartBlackboxTask+0x1a0>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	623b      	str	r3, [r7, #32]
                TLM_dec.orientation_quat[2] = ori.orientationQuat.v[1];
 8006668:	4b33      	ldr	r3, [pc, #204]	; (8006738 <StartBlackboxTask+0x1a0>)
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	627b      	str	r3, [r7, #36]	; 0x24
                TLM_dec.orientation_quat[3] = ori.orientationQuat.v[2];
 800666e:	4b32      	ldr	r3, [pc, #200]	; (8006738 <StartBlackboxTask+0x1a0>)
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	62bb      	str	r3, [r7, #40]	; 0x28
                // SPL06_Read(&baro);
                TLM_dec.baro = baro.pressure_Pa;
 8006674:	4b31      	ldr	r3, [pc, #196]	; (800673c <StartBlackboxTask+0x1a4>)
 8006676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006678:	63bb      	str	r3, [r7, #56]	; 0x38
                TLM_dec.temp = baro.temperature_C;
 800667a:	4b30      	ldr	r3, [pc, #192]	; (800673c <StartBlackboxTask+0x1a4>)
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	63fb      	str	r3, [r7, #60]	; 0x3c
                TLM_dec.altitude = baro.altitude;
 8006680:	4b2e      	ldr	r3, [pc, #184]	; (800673c <StartBlackboxTask+0x1a4>)
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
                TLM_dec.vertical_velocity = baro.vertical_speed;
 8006686:	4b2d      	ldr	r3, [pc, #180]	; (800673c <StartBlackboxTask+0x1a4>)
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	647b      	str	r3, [r7, #68]	; 0x44
                TLM_dec.flight_state = flight_state;
 800668c:	4b2c      	ldr	r3, [pc, #176]	; (8006740 <StartBlackboxTask+0x1a8>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	737b      	strb	r3, [r7, #13]
                TLM_dec.pin_states = (is_soft_enabled()) | (is_armed() << 1)
 8006692:	f7fd fd53 	bl	800413c <is_soft_enabled>
 8006696:	4603      	mov	r3, r0
 8006698:	b25c      	sxtb	r4, r3
 800669a:	f7fd fd27 	bl	80040ec <is_armed>
 800669e:	4603      	mov	r3, r0
 80066a0:	005b      	lsls	r3, r3, #1
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	4323      	orrs	r3, r4
 80066a6:	b25c      	sxtb	r4, r3
                        | (is_breakwire_connected() << 2) | (is_camera_on << 3);
 80066a8:	f7fd fd54 	bl	8004154 <is_breakwire_connected>
 80066ac:	4603      	mov	r3, r0
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	4323      	orrs	r3, r4
 80066b4:	b25a      	sxtb	r2, r3
 80066b6:	4b23      	ldr	r3, [pc, #140]	; (8006744 <StartBlackboxTask+0x1ac>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	4313      	orrs	r3, r2
 80066c0:	b25b      	sxtb	r3, r3
 80066c2:	b2db      	uxtb	r3, r3
                TLM_dec.pin_states = (is_soft_enabled()) | (is_armed() << 1)
 80066c4:	743b      	strb	r3, [r7, #16]
                TLM_dec.servo_state = servo_setting;
 80066c6:	4b20      	ldr	r3, [pc, #128]	; (8006748 <StartBlackboxTask+0x1b0>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	747b      	strb	r3, [r7, #17]

                encode_Blackbox(&TLM_dec, &chunk_of_flash.packets[i]);
 80066cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80066ce:	4613      	mov	r3, r2
 80066d0:	00db      	lsls	r3, r3, #3
 80066d2:	4413      	add	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4a16      	ldr	r2, [pc, #88]	; (8006730 <StartBlackboxTask+0x198>)
 80066d8:	4413      	add	r3, r2
 80066da:	1cda      	adds	r2, r3, #3
 80066dc:	f107 030c 	add.w	r3, r7, #12
 80066e0:	4611      	mov	r1, r2
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fb ffd4 	bl	8002690 <encode_Blackbox>
                osDelay(5); // approx 200 Hz logging rate.
 80066e8:	2005      	movs	r0, #5
 80066ea:	f00a ffa1 	bl	8011630 <osDelay>
            for (int i = 0; i < 7; i++) {
 80066ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f0:	3301      	adds	r3, #1
 80066f2:	653b      	str	r3, [r7, #80]	; 0x50
 80066f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	dd8b      	ble.n	8006612 <StartBlackboxTask+0x7a>
            }


            W25qxx_WritePage((uint8_t*) &chunk_of_flash, current_page, 0, 255);
 80066fa:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80066fe:	23ff      	movs	r3, #255	; 0xff
 8006700:	2200      	movs	r2, #0
 8006702:	480b      	ldr	r0, [pc, #44]	; (8006730 <StartBlackboxTask+0x198>)
 8006704:	f7fc fee0 	bl	80034c8 <W25qxx_WritePage>
            current_page = (current_page + 1) % 65536;
 8006708:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800670c:	3301      	adds	r3, #1
 800670e:	425a      	negs	r2, r3
 8006710:	b29b      	uxth	r3, r3
 8006712:	b292      	uxth	r2, r2
 8006714:	bf58      	it	pl
 8006716:	4253      	negpl	r3, r2
 8006718:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800671c:	e002      	b.n	8006724 <StartBlackboxTask+0x18c>

        }
        else {
            osDelay(10);
 800671e:	200a      	movs	r0, #10
 8006720:	f00a ff86 	bl	8011630 <osDelay>
        }
        osDelay(1);
 8006724:	2001      	movs	r0, #1
 8006726:	f00a ff83 	bl	8011630 <osDelay>
        if (is_data_logging) {
 800672a:	e76a      	b.n	8006602 <StartBlackboxTask+0x6a>
 800672c:	20000882 	.word	0x20000882
 8006730:	200046b4 	.word	0x200046b4
 8006734:	20004860 	.word	0x20004860
 8006738:	20004618 	.word	0x20004618
 800673c:	20004b2c 	.word	0x20004b2c
 8006740:	20000000 	.word	0x20000000
 8006744:	20000881 	.word	0x20000881
 8006748:	20000878 	.word	0x20000878

0800674c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a04      	ldr	r2, [pc, #16]	; (800676c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d101      	bne.n	8006762 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800675e:	f000 fedb 	bl	8007518 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	40010000 	.word	0x40010000

08006770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006774:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8006776:	e7fe      	b.n	8006776 <Error_Handler+0x6>

08006778 <cross_product>:


#include "orientation.h"
#include "constants.h"

void cross_product(float a[3], float b[3], float output[3]) {
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
    output[0] = a[1] * b[2] - a[2]*b[1];
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3304      	adds	r3, #4
 8006788:	ed93 7a00 	vldr	s14, [r3]
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	3308      	adds	r3, #8
 8006790:	edd3 7a00 	vldr	s15, [r3]
 8006794:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	3308      	adds	r3, #8
 800679c:	edd3 6a00 	vldr	s13, [r3]
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	3304      	adds	r3, #4
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[2] * b[0] - a[0]*b[2];
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	3308      	adds	r3, #8
 80067ba:	ed93 7a00 	vldr	s14, [r3]
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	edd3 7a00 	vldr	s15, [r3]
 80067c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	edd3 6a00 	vldr	s13, [r3]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	3308      	adds	r3, #8
 80067d2:	edd3 7a00 	vldr	s15, [r3]
 80067d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	3304      	adds	r3, #4
 80067de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067e2:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[0] * b[1] - a[1]*b[0];
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	ed93 7a00 	vldr	s14, [r3]
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	3304      	adds	r3, #4
 80067f0:	edd3 7a00 	vldr	s15, [r3]
 80067f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3304      	adds	r3, #4
 80067fc:	edd3 6a00 	vldr	s13, [r3]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	edd3 7a00 	vldr	s15, [r3]
 8006806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	3308      	adds	r3, #8
 800680e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006812:	edc3 7a00 	vstr	s15, [r3]
}
 8006816:	bf00      	nop
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <vector_sum>:

void vector_sum(float a[3], float b[3], float output[3]) {
 8006822:	b480      	push	{r7}
 8006824:	b085      	sub	sp, #20
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
    output[0] = a[0] + b[0];
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	ed93 7a00 	vldr	s14, [r3]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	edd3 7a00 	vldr	s15, [r3]
 800683a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	edc3 7a00 	vstr	s15, [r3]
    output[1] = a[1] + b[1];
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	3304      	adds	r3, #4
 8006848:	ed93 7a00 	vldr	s14, [r3]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	3304      	adds	r3, #4
 8006850:	edd3 7a00 	vldr	s15, [r3]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	3304      	adds	r3, #4
 8006858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800685c:	edc3 7a00 	vstr	s15, [r3]
    output[2] = a[2] + b[2];
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	3308      	adds	r3, #8
 8006864:	ed93 7a00 	vldr	s14, [r3]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	3308      	adds	r3, #8
 800686c:	edd3 7a00 	vldr	s15, [r3]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	3308      	adds	r3, #8
 8006874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006878:	edc3 7a00 	vstr	s15, [r3]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <vector_lenSquared>:

float vector_lenSquared(float a[3]) {
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
    return a[0]*a[0] + a[1]*a[1] + a[2]*a[2];
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	ed93 7a00 	vldr	s14, [r3]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	edd3 7a00 	vldr	s15, [r3]
 800689c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	3304      	adds	r3, #4
 80068a4:	edd3 6a00 	vldr	s13, [r3]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	3304      	adds	r3, #4
 80068ac:	edd3 7a00 	vldr	s15, [r3]
 80068b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3308      	adds	r3, #8
 80068bc:	edd3 6a00 	vldr	s13, [r3]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	3308      	adds	r3, #8
 80068c4:	edd3 7a00 	vldr	s15, [r3]
 80068c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80068cc:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80068d0:	eeb0 0a67 	vmov.f32	s0, s15
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr

080068de <orientation_init>:

void orientation_init(Orientation *ori) {
 80068de:	b580      	push	{r7, lr}
 80068e0:	b082      	sub	sp, #8
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
    Quaternion_setIdentity(&ori->orientationQuat);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fc ff13 	bl	8003714 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->accQuat);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	3370      	adds	r3, #112	; 0x70
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fc ff0e 	bl	8003714 <Quaternion_setIdentity>
    Quaternion_setIdentity(&ori->gyroQuat);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3360      	adds	r3, #96	; 0x60
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fc ff09 	bl	8003714 <Quaternion_setIdentity>

    // Point down (-z axis)
    ori->vertical[0] = 0;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f04f 0200 	mov.w	r2, #0
 8006908:	655a      	str	r2, [r3, #84]	; 0x54
    ori->vertical[1] = 0;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	659a      	str	r2, [r3, #88]	; 0x58
    ori->vertical[2] = 1;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006918:	65da      	str	r2, [r3, #92]	; 0x5c

    ori->gyroVec[0] = 0;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = 0;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f04f 0200 	mov.w	r2, #0
 8006928:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = 0;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f04f 0200 	mov.w	r2, #0
 8006930:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <orientation_setGyro>:

void orientation_setGyro(Orientation *ori, float gyro[3]) {
 800693a:	b480      	push	{r7}
 800693c:	b083      	sub	sp, #12
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
 8006942:	6039      	str	r1, [r7, #0]
    ori->gyroVec[0] = gyro[2];
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	631a      	str	r2, [r3, #48]	; 0x30
    ori->gyroVec[1] = gyro[0];
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	635a      	str	r2, [r3, #52]	; 0x34
    ori->gyroVec[2] = gyro[1];
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	685a      	ldr	r2, [r3, #4]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <orientation_setAcc>:

void orientation_setAcc(Orientation *ori, float acc[3]) {
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
    ori->accBodyVec[0] = acc[2];
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	63da      	str	r2, [r3, #60]	; 0x3c
    ori->accBodyVec[1] = acc[0];
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
    ori->accBodyVec[2] = acc[1];
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	645a      	str	r2, [r3, #68]	; 0x44
}
 800698a:	bf00      	nop
 800698c:	370c      	adds	r7, #12
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
	...

08006998 <orientation_update>:

// based on https://github.com/daPhoosa/SimpleIMU-6/blob/master/SimpleIMU-6.ino
void orientation_update(Orientation *ori, float dt, uint8_t apply_complementary) {
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b091      	sub	sp, #68	; 0x44
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80069a4:	460b      	mov	r3, r1
 80069a6:	71fb      	strb	r3, [r7, #7]

    //Quaternion_set(0,ori->gyroVec[0],ori->gyroVec[1],ori->gyroVec[2],&ori->gyroQuat);
    //Quaternion_set(0,ori->accBodyVec[0],ori->accBodyVec[1],ori->accBodyVec[2],&ori->accQuat);

    Quaternion_rotate(&ori->orientationQuat, ori->accBodyVec, ori->accWorldVec);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	3348      	adds	r3, #72	; 0x48
 80069b4:	461a      	mov	r2, r3
 80069b6:	f7fd f907 	bl	8003bc8 <Quaternion_rotate>
    float correctionWorld[3];
    cross_product(ori->accWorldVec, ori->vertical, correctionWorld);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f103 0048 	add.w	r0, r3, #72	; 0x48
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	3354      	adds	r3, #84	; 0x54
 80069c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80069c8:	4619      	mov	r1, r3
 80069ca:	f7ff fed5 	bl	8006778 <cross_product>

    float correctionBody[3];
    Quaternion_conjugate(&ori->orientationQuat, &ori->orientationQuatConj);
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3310      	adds	r3, #16
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f7fd f802 	bl	80039e0 <Quaternion_conjugate>
    Quaternion_rotate(&ori->orientationQuatConj, correctionWorld, correctionBody);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3310      	adds	r3, #16
 80069e0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80069e4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7fd f8ed 	bl	8003bc8 <Quaternion_rotate>

    correctionBody[0] = correctionBody[0] * 0.1;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7f9 fdc9 	bl	8000588 <__aeabi_f2d>
 80069f6:	a348      	add	r3, pc, #288	; (adr r3, 8006b18 <orientation_update+0x180>)
 80069f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069fc:	f7f9 fe1c 	bl	8000638 <__aeabi_dmul>
 8006a00:	4603      	mov	r3, r0
 8006a02:	460c      	mov	r4, r1
 8006a04:	4618      	mov	r0, r3
 8006a06:	4621      	mov	r1, r4
 8006a08:	f7fa f90e 	bl	8000c28 <__aeabi_d2f>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	627b      	str	r3, [r7, #36]	; 0x24
    correctionBody[1] = correctionBody[1] * 0.1;
 8006a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7f9 fdb8 	bl	8000588 <__aeabi_f2d>
 8006a18:	a33f      	add	r3, pc, #252	; (adr r3, 8006b18 <orientation_update+0x180>)
 8006a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a1e:	f7f9 fe0b 	bl	8000638 <__aeabi_dmul>
 8006a22:	4603      	mov	r3, r0
 8006a24:	460c      	mov	r4, r1
 8006a26:	4618      	mov	r0, r3
 8006a28:	4621      	mov	r1, r4
 8006a2a:	f7fa f8fd 	bl	8000c28 <__aeabi_d2f>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	62bb      	str	r3, [r7, #40]	; 0x28
    correctionBody[2] = correctionBody[2] * 0.1;
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	4618      	mov	r0, r3
 8006a36:	f7f9 fda7 	bl	8000588 <__aeabi_f2d>
 8006a3a:	a337      	add	r3, pc, #220	; (adr r3, 8006b18 <orientation_update+0x180>)
 8006a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a40:	f7f9 fdfa 	bl	8000638 <__aeabi_dmul>
 8006a44:	4603      	mov	r3, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	4618      	mov	r0, r3
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	f7fa f8ec 	bl	8000c28 <__aeabi_d2f>
 8006a50:	4603      	mov	r3, r0
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c

    float GsSquared = vector_lenSquared(ori->accBodyVec) / (standardGravity * standardGravity);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	333c      	adds	r3, #60	; 0x3c
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff ff15 	bl	8006888 <vector_lenSquared>
 8006a5e:	ee10 3a10 	vmov	r3, s0
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7f9 fd90 	bl	8000588 <__aeabi_f2d>
 8006a68:	a32d      	add	r3, pc, #180	; (adr r3, 8006b20 <orientation_update+0x188>)
 8006a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6e:	f7f9 ff0d 	bl	800088c <__aeabi_ddiv>
 8006a72:	4603      	mov	r3, r0
 8006a74:	460c      	mov	r4, r1
 8006a76:	4618      	mov	r0, r3
 8006a78:	4621      	mov	r1, r4
 8006a7a:	f7fa f8d5 	bl	8000c28 <__aeabi_d2f>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (GsSquared > 0.81 && GsSquared < 1.21 && apply_complementary) {
 8006a82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a84:	f7f9 fd80 	bl	8000588 <__aeabi_f2d>
 8006a88:	a327      	add	r3, pc, #156	; (adr r3, 8006b28 <orientation_update+0x190>)
 8006a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a8e:	f7fa f863 	bl	8000b58 <__aeabi_dcmpgt>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d018      	beq.n	8006aca <orientation_update+0x132>
 8006a98:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006a9a:	f7f9 fd75 	bl	8000588 <__aeabi_f2d>
 8006a9e:	a324      	add	r3, pc, #144	; (adr r3, 8006b30 <orientation_update+0x198>)
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f7fa f83a 	bl	8000b1c <__aeabi_dcmplt>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00d      	beq.n	8006aca <orientation_update+0x132>
 8006aae:	79fb      	ldrb	r3, [r7, #7]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d00a      	beq.n	8006aca <orientation_update+0x132>
        vector_sum(ori->gyroVec, correctionBody, ori->gyroVec);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f7ff feac 	bl	8006822 <vector_sum>
    }
    Quaternion_fromRate(ori->gyroVec, dt, &ori->incrementalRotation);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	3320      	adds	r3, #32
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ada:	4610      	mov	r0, r2
 8006adc:	f7fd f9fc 	bl	8003ed8 <Quaternion_fromRate>

    Quaternion tempQuat;

    Quaternion_multiply(&ori->orientationQuat, &ori->incrementalRotation, &tempQuat);
 8006ae0:	68f8      	ldr	r0, [r7, #12]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3320      	adds	r3, #32
 8006ae6:	f107 0214 	add.w	r2, r7, #20
 8006aea:	4619      	mov	r1, r3
 8006aec:	f7fc ffac 	bl	8003a48 <Quaternion_multiply>
    Quaternion_copy(&tempQuat, &ori->orientationQuat);
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	f107 0314 	add.w	r3, r7, #20
 8006af6:	4611      	mov	r1, r2
 8006af8:	4618      	mov	r0, r3
 8006afa:	f7fc fe2f 	bl	800375c <Quaternion_copy>
    //Quaternion_lockY(&ori->orientationQuat, &ori->horQuat);
    Quaternion_toEulerZYX(&ori->orientationQuat, ori->eulerZYX);
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	3380      	adds	r3, #128	; 0x80
 8006b04:	4619      	mov	r1, r3
 8006b06:	4610      	mov	r0, r2
 8006b08:	f7fc fe4a 	bl	80037a0 <Quaternion_toEulerZYX>
    //ori->eulerZYX[2] = 0;
    //Quaternion_fromEulerZYX(ori->eulerZYX, &ori->horQuat);
}
 8006b0c:	bf00      	nop
 8006b0e:	3744      	adds	r7, #68	; 0x44
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}
 8006b14:	f3af 8000 	nop.w
 8006b18:	9999999a 	.word	0x9999999a
 8006b1c:	3fb99999 	.word	0x3fb99999
 8006b20:	9339d914 	.word	0x9339d914
 8006b24:	40580ae7 	.word	0x40580ae7
 8006b28:	1eb851ec 	.word	0x1eb851ec
 8006b2c:	3fe9eb85 	.word	0x3fe9eb85
 8006b30:	f5c28f5c 	.word	0xf5c28f5c
 8006b34:	3ff35c28 	.word	0x3ff35c28

08006b38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b3e:	2300      	movs	r3, #0
 8006b40:	607b      	str	r3, [r7, #4]
 8006b42:	4b12      	ldr	r3, [pc, #72]	; (8006b8c <HAL_MspInit+0x54>)
 8006b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b46:	4a11      	ldr	r2, [pc, #68]	; (8006b8c <HAL_MspInit+0x54>)
 8006b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b4e:	4b0f      	ldr	r3, [pc, #60]	; (8006b8c <HAL_MspInit+0x54>)
 8006b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b56:	607b      	str	r3, [r7, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	4b0b      	ldr	r3, [pc, #44]	; (8006b8c <HAL_MspInit+0x54>)
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	4a0a      	ldr	r2, [pc, #40]	; (8006b8c <HAL_MspInit+0x54>)
 8006b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b68:	6413      	str	r3, [r2, #64]	; 0x40
 8006b6a:	4b08      	ldr	r3, [pc, #32]	; (8006b8c <HAL_MspInit+0x54>)
 8006b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006b76:	2200      	movs	r2, #0
 8006b78:	210f      	movs	r1, #15
 8006b7a:	f06f 0001 	mvn.w	r0, #1
 8006b7e:	f001 f98f 	bl	8007ea0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	40023800 	.word	0x40023800

08006b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b98:	f107 0314 	add.w	r3, r7, #20
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	601a      	str	r2, [r3, #0]
 8006ba0:	605a      	str	r2, [r3, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a17      	ldr	r2, [pc, #92]	; (8006c0c <HAL_ADC_MspInit+0x7c>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d127      	bne.n	8006c02 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	4b16      	ldr	r3, [pc, #88]	; (8006c10 <HAL_ADC_MspInit+0x80>)
 8006bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bba:	4a15      	ldr	r2, [pc, #84]	; (8006c10 <HAL_ADC_MspInit+0x80>)
 8006bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8006bc2:	4b13      	ldr	r3, [pc, #76]	; (8006c10 <HAL_ADC_MspInit+0x80>)
 8006bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <HAL_ADC_MspInit+0x80>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	4a0e      	ldr	r2, [pc, #56]	; (8006c10 <HAL_ADC_MspInit+0x80>)
 8006bd8:	f043 0304 	orr.w	r3, r3, #4
 8006bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <HAL_ADC_MspInit+0x80>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	60fb      	str	r3, [r7, #12]
 8006be8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin;
 8006bea:	2304      	movs	r3, #4
 8006bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8006bf6:	f107 0314 	add.w	r3, r7, #20
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	4805      	ldr	r0, [pc, #20]	; (8006c14 <HAL_ADC_MspInit+0x84>)
 8006bfe:	f001 fce7 	bl	80085d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006c02:	bf00      	nop
 8006c04:	3728      	adds	r7, #40	; 0x28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40012000 	.word	0x40012000
 8006c10:	40023800 	.word	0x40023800
 8006c14:	40020800 	.word	0x40020800

08006c18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b08a      	sub	sp, #40	; 0x28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c20:	f107 0314 	add.w	r3, r7, #20
 8006c24:	2200      	movs	r2, #0
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a29      	ldr	r2, [pc, #164]	; (8006cdc <HAL_I2C_MspInit+0xc4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d14b      	bne.n	8006cd2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	613b      	str	r3, [r7, #16]
 8006c3e:	4b28      	ldr	r3, [pc, #160]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c42:	4a27      	ldr	r2, [pc, #156]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006c44:	f043 0304 	orr.w	r3, r3, #4
 8006c48:	6313      	str	r3, [r2, #48]	; 0x30
 8006c4a:	4b25      	ldr	r3, [pc, #148]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4e:	f003 0304 	and.w	r3, r3, #4
 8006c52:	613b      	str	r3, [r7, #16]
 8006c54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c56:	2300      	movs	r3, #0
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	4b21      	ldr	r3, [pc, #132]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5e:	4a20      	ldr	r2, [pc, #128]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	6313      	str	r3, [r2, #48]	; 0x30
 8006c66:	4b1e      	ldr	r3, [pc, #120]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c78:	2312      	movs	r3, #18
 8006c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c80:	2303      	movs	r3, #3
 8006c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c84:	2304      	movs	r3, #4
 8006c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c88:	f107 0314 	add.w	r3, r7, #20
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4815      	ldr	r0, [pc, #84]	; (8006ce4 <HAL_I2C_MspInit+0xcc>)
 8006c90:	f001 fc9e 	bl	80085d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c9a:	2312      	movs	r3, #18
 8006c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006ca6:	2304      	movs	r3, #4
 8006ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006caa:	f107 0314 	add.w	r3, r7, #20
 8006cae:	4619      	mov	r1, r3
 8006cb0:	480d      	ldr	r0, [pc, #52]	; (8006ce8 <HAL_I2C_MspInit+0xd0>)
 8006cb2:	f001 fc8d 	bl	80085d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60bb      	str	r3, [r7, #8]
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006cc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8006cc6:	4b06      	ldr	r3, [pc, #24]	; (8006ce0 <HAL_I2C_MspInit+0xc8>)
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cce:	60bb      	str	r3, [r7, #8]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006cd2:	bf00      	nop
 8006cd4:	3728      	adds	r7, #40	; 0x28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	40005c00 	.word	0x40005c00
 8006ce0:	40023800 	.word	0x40023800
 8006ce4:	40020800 	.word	0x40020800
 8006ce8:	40020000 	.word	0x40020000

08006cec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b08e      	sub	sp, #56	; 0x38
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	605a      	str	r2, [r3, #4]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	60da      	str	r2, [r3, #12]
 8006d02:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4aa1      	ldr	r2, [pc, #644]	; (8006f90 <HAL_SPI_MspInit+0x2a4>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d15b      	bne.n	8006dc6 <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006d0e:	2300      	movs	r3, #0
 8006d10:	623b      	str	r3, [r7, #32]
 8006d12:	4ba0      	ldr	r3, [pc, #640]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d16:	4a9f      	ldr	r2, [pc, #636]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006d18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d1e:	4b9d      	ldr	r3, [pc, #628]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d26:	623b      	str	r3, [r7, #32]
 8006d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	4b99      	ldr	r3, [pc, #612]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	4a98      	ldr	r2, [pc, #608]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	6313      	str	r3, [r2, #48]	; 0x30
 8006d3a:	4b96      	ldr	r3, [pc, #600]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006d46:	23e0      	movs	r3, #224	; 0xe0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d52:	2303      	movs	r3, #3
 8006d54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006d56:	2305      	movs	r3, #5
 8006d58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d5e:	4619      	mov	r1, r3
 8006d60:	488d      	ldr	r0, [pc, #564]	; (8006f98 <HAL_SPI_MspInit+0x2ac>)
 8006d62:	f001 fc35 	bl	80085d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8006d66:	4b8d      	ldr	r3, [pc, #564]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d68:	4a8d      	ldr	r2, [pc, #564]	; (8006fa0 <HAL_SPI_MspInit+0x2b4>)
 8006d6a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8006d6c:	4b8b      	ldr	r3, [pc, #556]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d6e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8006d72:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d74:	4b89      	ldr	r3, [pc, #548]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d76:	2240      	movs	r2, #64	; 0x40
 8006d78:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d7a:	4b88      	ldr	r3, [pc, #544]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d80:	4b86      	ldr	r3, [pc, #536]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d86:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d88:	4b84      	ldr	r3, [pc, #528]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d8e:	4b83      	ldr	r3, [pc, #524]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d90:	2200      	movs	r2, #0
 8006d92:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8006d94:	4b81      	ldr	r3, [pc, #516]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d96:	2200      	movs	r2, #0
 8006d98:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d9a:	4b80      	ldr	r3, [pc, #512]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006da0:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006da2:	4b7e      	ldr	r3, [pc, #504]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8006da8:	487c      	ldr	r0, [pc, #496]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006daa:	f001 f8a3 	bl	8007ef4 <HAL_DMA_Init>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8006db4:	f7ff fcdc 	bl	8006770 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	4a78      	ldr	r2, [pc, #480]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006dbc:	649a      	str	r2, [r3, #72]	; 0x48
 8006dbe:	4a77      	ldr	r2, [pc, #476]	; (8006f9c <HAL_SPI_MspInit+0x2b0>)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8006dc4:	e0df      	b.n	8006f86 <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI2)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a76      	ldr	r2, [pc, #472]	; (8006fa4 <HAL_SPI_MspInit+0x2b8>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	f040 808a 	bne.w	8006ee6 <HAL_SPI_MspInit+0x1fa>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61bb      	str	r3, [r7, #24]
 8006dd6:	4b6f      	ldr	r3, [pc, #444]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	4a6e      	ldr	r2, [pc, #440]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006ddc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006de0:	6413      	str	r3, [r2, #64]	; 0x40
 8006de2:	4b6c      	ldr	r3, [pc, #432]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dea:	61bb      	str	r3, [r7, #24]
 8006dec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dee:	2300      	movs	r3, #0
 8006df0:	617b      	str	r3, [r7, #20]
 8006df2:	4b68      	ldr	r3, [pc, #416]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006df6:	4a67      	ldr	r2, [pc, #412]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006df8:	f043 0302 	orr.w	r3, r3, #2
 8006dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8006dfe:	4b65      	ldr	r3, [pc, #404]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006e0a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e10:	2302      	movs	r3, #2
 8006e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e1c:	2305      	movs	r3, #5
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e24:	4619      	mov	r1, r3
 8006e26:	4860      	ldr	r0, [pc, #384]	; (8006fa8 <HAL_SPI_MspInit+0x2bc>)
 8006e28:	f001 fbd2 	bl	80085d0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8006e2c:	4b5f      	ldr	r3, [pc, #380]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e2e:	4a60      	ldr	r2, [pc, #384]	; (8006fb0 <HAL_SPI_MspInit+0x2c4>)
 8006e30:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8006e32:	4b5e      	ldr	r3, [pc, #376]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e38:	4b5c      	ldr	r3, [pc, #368]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e3e:	4b5b      	ldr	r3, [pc, #364]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e44:	4b59      	ldr	r3, [pc, #356]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e4a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006e4c:	4b57      	ldr	r3, [pc, #348]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e4e:	2200      	movs	r2, #0
 8006e50:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e52:	4b56      	ldr	r3, [pc, #344]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8006e58:	4b54      	ldr	r3, [pc, #336]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006e5e:	4b53      	ldr	r3, [pc, #332]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006e64:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e66:	4b51      	ldr	r3, [pc, #324]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006e6c:	484f      	ldr	r0, [pc, #316]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e6e:	f001 f841 	bl	8007ef4 <HAL_DMA_Init>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d001      	beq.n	8006e7c <HAL_SPI_MspInit+0x190>
      Error_Handler();
 8006e78:	f7ff fc7a 	bl	8006770 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a4b      	ldr	r2, [pc, #300]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e80:	64da      	str	r2, [r3, #76]	; 0x4c
 8006e82:	4a4a      	ldr	r2, [pc, #296]	; (8006fac <HAL_SPI_MspInit+0x2c0>)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8006e88:	4b4a      	ldr	r3, [pc, #296]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006e8a:	4a4b      	ldr	r2, [pc, #300]	; (8006fb8 <HAL_SPI_MspInit+0x2cc>)
 8006e8c:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8006e8e:	4b49      	ldr	r3, [pc, #292]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e94:	4b47      	ldr	r3, [pc, #284]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006e96:	2240      	movs	r2, #64	; 0x40
 8006e98:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e9a:	4b46      	ldr	r3, [pc, #280]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006ea0:	4b44      	ldr	r3, [pc, #272]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006ea2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ea6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ea8:	4b42      	ldr	r3, [pc, #264]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006eaa:	2200      	movs	r2, #0
 8006eac:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006eae:	4b41      	ldr	r3, [pc, #260]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8006eb4:	4b3f      	ldr	r3, [pc, #252]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006eba:	4b3e      	ldr	r3, [pc, #248]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006ebc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006ec0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ec2:	4b3c      	ldr	r3, [pc, #240]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8006ec8:	483a      	ldr	r0, [pc, #232]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006eca:	f001 f813 	bl	8007ef4 <HAL_DMA_Init>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d001      	beq.n	8006ed8 <HAL_SPI_MspInit+0x1ec>
      Error_Handler();
 8006ed4:	f7ff fc4c 	bl	8006770 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a36      	ldr	r2, [pc, #216]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006edc:	649a      	str	r2, [r3, #72]	; 0x48
 8006ede:	4a35      	ldr	r2, [pc, #212]	; (8006fb4 <HAL_SPI_MspInit+0x2c8>)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006ee4:	e04f      	b.n	8006f86 <HAL_SPI_MspInit+0x29a>
  else if(hspi->Instance==SPI3)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a34      	ldr	r2, [pc, #208]	; (8006fbc <HAL_SPI_MspInit+0x2d0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d14a      	bne.n	8006f86 <HAL_SPI_MspInit+0x29a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef8:	4a26      	ldr	r2, [pc, #152]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006efa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006efe:	6413      	str	r3, [r2, #64]	; 0x40
 8006f00:	4b24      	ldr	r3, [pc, #144]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	60fb      	str	r3, [r7, #12]
 8006f10:	4b20      	ldr	r3, [pc, #128]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	4a1f      	ldr	r2, [pc, #124]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f16:	f043 0304 	orr.w	r3, r3, #4
 8006f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1c:	4b1d      	ldr	r3, [pc, #116]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	60fb      	str	r3, [r7, #12]
 8006f26:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f28:	2300      	movs	r3, #0
 8006f2a:	60bb      	str	r3, [r7, #8]
 8006f2c:	4b19      	ldr	r3, [pc, #100]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f30:	4a18      	ldr	r2, [pc, #96]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f32:	f043 0302 	orr.w	r3, r3, #2
 8006f36:	6313      	str	r3, [r2, #48]	; 0x30
 8006f38:	4b16      	ldr	r3, [pc, #88]	; (8006f94 <HAL_SPI_MspInit+0x2a8>)
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3c:	f003 0302 	and.w	r3, r3, #2
 8006f40:	60bb      	str	r3, [r7, #8]
 8006f42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006f44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f52:	2303      	movs	r3, #3
 8006f54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f56:	2306      	movs	r3, #6
 8006f58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f5e:	4619      	mov	r1, r3
 8006f60:	4817      	ldr	r0, [pc, #92]	; (8006fc0 <HAL_SPI_MspInit+0x2d4>)
 8006f62:	f001 fb35 	bl	80085d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006f66:	2320      	movs	r3, #32
 8006f68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f6a:	2302      	movs	r3, #2
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f72:	2303      	movs	r3, #3
 8006f74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006f76:	2306      	movs	r3, #6
 8006f78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f7e:	4619      	mov	r1, r3
 8006f80:	4809      	ldr	r0, [pc, #36]	; (8006fa8 <HAL_SPI_MspInit+0x2bc>)
 8006f82:	f001 fb25 	bl	80085d0 <HAL_GPIO_Init>
}
 8006f86:	bf00      	nop
 8006f88:	3738      	adds	r7, #56	; 0x38
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40013000 	.word	0x40013000
 8006f94:	40023800 	.word	0x40023800
 8006f98:	40020000 	.word	0x40020000
 8006f9c:	20004cac 	.word	0x20004cac
 8006fa0:	40026458 	.word	0x40026458
 8006fa4:	40003800 	.word	0x40003800
 8006fa8:	40020400 	.word	0x40020400
 8006fac:	200048e0 	.word	0x200048e0
 8006fb0:	40026058 	.word	0x40026058
 8006fb4:	20004c4c 	.word	0x20004c4c
 8006fb8:	40026070 	.word	0x40026070
 8006fbc:	40003c00 	.word	0x40003c00
 8006fc0:	40020800 	.word	0x40020800

08006fc4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b085      	sub	sp, #20
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd4:	d10d      	bne.n	8006ff2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	4b09      	ldr	r3, [pc, #36]	; (8007000 <HAL_TIM_PWM_MspInit+0x3c>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	4a08      	ldr	r2, [pc, #32]	; (8007000 <HAL_TIM_PWM_MspInit+0x3c>)
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HAL_TIM_PWM_MspInit+0x3c>)
 8006fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40023800 	.word	0x40023800

08007004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a15      	ldr	r2, [pc, #84]	; (8007068 <HAL_TIM_Base_MspInit+0x64>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d10e      	bne.n	8007034 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <HAL_TIM_Base_MspInit+0x68>)
 800701c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701e:	4a13      	ldr	r2, [pc, #76]	; (800706c <HAL_TIM_Base_MspInit+0x68>)
 8007020:	f043 0302 	orr.w	r3, r3, #2
 8007024:	6413      	str	r3, [r2, #64]	; 0x40
 8007026:	4b11      	ldr	r3, [pc, #68]	; (800706c <HAL_TIM_Base_MspInit+0x68>)
 8007028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8007032:	e012      	b.n	800705a <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM6)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a0d      	ldr	r2, [pc, #52]	; (8007070 <HAL_TIM_Base_MspInit+0x6c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d10d      	bne.n	800705a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800703e:	2300      	movs	r3, #0
 8007040:	60bb      	str	r3, [r7, #8]
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <HAL_TIM_Base_MspInit+0x68>)
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	4a09      	ldr	r2, [pc, #36]	; (800706c <HAL_TIM_Base_MspInit+0x68>)
 8007048:	f043 0310 	orr.w	r3, r3, #16
 800704c:	6413      	str	r3, [r2, #64]	; 0x40
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <HAL_TIM_Base_MspInit+0x68>)
 8007050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	60bb      	str	r3, [r7, #8]
 8007058:	68bb      	ldr	r3, [r7, #8]
}
 800705a:	bf00      	nop
 800705c:	3714      	adds	r7, #20
 800705e:	46bd      	mov	sp, r7
 8007060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007064:	4770      	bx	lr
 8007066:	bf00      	nop
 8007068:	40000400 	.word	0x40000400
 800706c:	40023800 	.word	0x40023800
 8007070:	40001000 	.word	0x40001000

08007074 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	; 0x28
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	2200      	movs	r2, #0
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	605a      	str	r2, [r3, #4]
 8007086:	609a      	str	r2, [r3, #8]
 8007088:	60da      	str	r2, [r3, #12]
 800708a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007094:	d11e      	bne.n	80070d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
 800709a:	4b31      	ldr	r3, [pc, #196]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 800709c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709e:	4a30      	ldr	r2, [pc, #192]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	6313      	str	r3, [r2, #48]	; 0x30
 80070a6:	4b2e      	ldr	r3, [pc, #184]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 80070a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	613b      	str	r3, [r7, #16]
 80070b0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80070b2:	230a      	movs	r3, #10
 80070b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b6:	2302      	movs	r3, #2
 80070b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070be:	2300      	movs	r3, #0
 80070c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80070c2:	2301      	movs	r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070c6:	f107 0314 	add.w	r3, r7, #20
 80070ca:	4619      	mov	r1, r3
 80070cc:	4825      	ldr	r0, [pc, #148]	; (8007164 <HAL_TIM_MspPostInit+0xf0>)
 80070ce:	f001 fa7f 	bl	80085d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80070d2:	e041      	b.n	8007158 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a23      	ldr	r2, [pc, #140]	; (8007168 <HAL_TIM_MspPostInit+0xf4>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d13c      	bne.n	8007158 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	60fb      	str	r3, [r7, #12]
 80070e2:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 80070e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070e6:	4a1e      	ldr	r2, [pc, #120]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 80070e8:	f043 0302 	orr.w	r3, r3, #2
 80070ec:	6313      	str	r3, [r2, #48]	; 0x30
 80070ee:	4b1c      	ldr	r3, [pc, #112]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 80070f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070fa:	2300      	movs	r3, #0
 80070fc:	60bb      	str	r3, [r7, #8]
 80070fe:	4b18      	ldr	r3, [pc, #96]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 8007104:	f043 0304 	orr.w	r3, r3, #4
 8007108:	6313      	str	r3, [r2, #48]	; 0x30
 800710a:	4b15      	ldr	r3, [pc, #84]	; (8007160 <HAL_TIM_MspPostInit+0xec>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	60bb      	str	r3, [r7, #8]
 8007114:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007116:	2302      	movs	r3, #2
 8007118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711a:	2302      	movs	r3, #2
 800711c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007122:	2300      	movs	r3, #0
 8007124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007126:	2302      	movs	r3, #2
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800712a:	f107 0314 	add.w	r3, r7, #20
 800712e:	4619      	mov	r1, r3
 8007130:	480e      	ldr	r0, [pc, #56]	; (800716c <HAL_TIM_MspPostInit+0xf8>)
 8007132:	f001 fa4d 	bl	80085d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8007136:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 800713a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713c:	2302      	movs	r3, #2
 800713e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007140:	2300      	movs	r3, #0
 8007142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007144:	2300      	movs	r3, #0
 8007146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007148:	2302      	movs	r3, #2
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800714c:	f107 0314 	add.w	r3, r7, #20
 8007150:	4619      	mov	r1, r3
 8007152:	4807      	ldr	r0, [pc, #28]	; (8007170 <HAL_TIM_MspPostInit+0xfc>)
 8007154:	f001 fa3c 	bl	80085d0 <HAL_GPIO_Init>
}
 8007158:	bf00      	nop
 800715a:	3728      	adds	r7, #40	; 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40023800 	.word	0x40023800
 8007164:	40020000 	.word	0x40020000
 8007168:	40000400 	.word	0x40000400
 800716c:	40020400 	.word	0x40020400
 8007170:	40020800 	.word	0x40020800

08007174 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b08c      	sub	sp, #48	; 0x30
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800717c:	2300      	movs	r3, #0
 800717e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007180:	2300      	movs	r3, #0
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8007184:	2200      	movs	r2, #0
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	2019      	movs	r0, #25
 800718a:	f000 fe89 	bl	8007ea0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800718e:	2019      	movs	r0, #25
 8007190:	f000 fea2 	bl	8007ed8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	4b1f      	ldr	r3, [pc, #124]	; (8007218 <HAL_InitTick+0xa4>)
 800719a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800719c:	4a1e      	ldr	r2, [pc, #120]	; (8007218 <HAL_InitTick+0xa4>)
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	6453      	str	r3, [r2, #68]	; 0x44
 80071a4:	4b1c      	ldr	r3, [pc, #112]	; (8007218 <HAL_InitTick+0xa4>)
 80071a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071a8:	f003 0301 	and.w	r3, r3, #1
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80071b0:	f107 0210 	add.w	r2, r7, #16
 80071b4:	f107 0314 	add.w	r3, r7, #20
 80071b8:	4611      	mov	r1, r2
 80071ba:	4618      	mov	r0, r3
 80071bc:	f003 fed0 	bl	800af60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80071c0:	f003 feba 	bl	800af38 <HAL_RCC_GetPCLK2Freq>
 80071c4:	4603      	mov	r3, r0
 80071c6:	005b      	lsls	r3, r3, #1
 80071c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80071ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071cc:	4a13      	ldr	r2, [pc, #76]	; (800721c <HAL_InitTick+0xa8>)
 80071ce:	fba2 2303 	umull	r2, r3, r2, r3
 80071d2:	0c9b      	lsrs	r3, r3, #18
 80071d4:	3b01      	subs	r3, #1
 80071d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80071d8:	4b11      	ldr	r3, [pc, #68]	; (8007220 <HAL_InitTick+0xac>)
 80071da:	4a12      	ldr	r2, [pc, #72]	; (8007224 <HAL_InitTick+0xb0>)
 80071dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80071de:	4b10      	ldr	r3, [pc, #64]	; (8007220 <HAL_InitTick+0xac>)
 80071e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80071e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80071e6:	4a0e      	ldr	r2, [pc, #56]	; (8007220 <HAL_InitTick+0xac>)
 80071e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80071ec:	4b0c      	ldr	r3, [pc, #48]	; (8007220 <HAL_InitTick+0xac>)
 80071ee:	2200      	movs	r2, #0
 80071f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <HAL_InitTick+0xac>)
 80071f4:	2200      	movs	r2, #0
 80071f6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80071f8:	4809      	ldr	r0, [pc, #36]	; (8007220 <HAL_InitTick+0xac>)
 80071fa:	f005 fd6d 	bl	800ccd8 <HAL_TIM_Base_Init>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8007204:	4806      	ldr	r0, [pc, #24]	; (8007220 <HAL_InitTick+0xac>)
 8007206:	f005 fdb6 	bl	800cd76 <HAL_TIM_Base_Start_IT>
 800720a:	4603      	mov	r3, r0
 800720c:	e000      	b.n	8007210 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
}
 8007210:	4618      	mov	r0, r3
 8007212:	3730      	adds	r7, #48	; 0x30
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40023800 	.word	0x40023800
 800721c:	431bde83 	.word	0x431bde83
 8007220:	20004d10 	.word	0x20004d10
 8007224:	40010000 	.word	0x40010000

08007228 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007228:	b480      	push	{r7}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800722c:	e7fe      	b.n	800722c <NMI_Handler+0x4>

0800722e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800722e:	b480      	push	{r7}
 8007230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007232:	e7fe      	b.n	8007232 <HardFault_Handler+0x4>

08007234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007238:	e7fe      	b.n	8007238 <MemManage_Handler+0x4>

0800723a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800723a:	b480      	push	{r7}
 800723c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800723e:	e7fe      	b.n	800723e <BusFault_Handler+0x4>

08007240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007240:	b480      	push	{r7}
 8007242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007244:	e7fe      	b.n	8007244 <UsageFault_Handler+0x4>

08007246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007246:	b480      	push	{r7}
 8007248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800724a:	bf00      	nop
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007258:	4802      	ldr	r0, [pc, #8]	; (8007264 <DMA1_Stream3_IRQHandler+0x10>)
 800725a:	f000 ff51 	bl	8008100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800725e:	bf00      	nop
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	200048e0 	.word	0x200048e0

08007268 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800726c:	4802      	ldr	r0, [pc, #8]	; (8007278 <DMA1_Stream4_IRQHandler+0x10>)
 800726e:	f000 ff47 	bl	8008100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20004c4c 	.word	0x20004c4c

0800727c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007280:	4802      	ldr	r0, [pc, #8]	; (800728c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007282:	f005 fe05 	bl	800ce90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007286:	bf00      	nop
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20004d10 	.word	0x20004d10

08007290 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007294:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007298:	f001 fb5e 	bl	8008958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800729c:	bf00      	nop
 800729e:	bd80      	pop	{r7, pc}

080072a0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80072a4:	4802      	ldr	r0, [pc, #8]	; (80072b0 <DMA2_Stream3_IRQHandler+0x10>)
 80072a6:	f000 ff2b 	bl	8008100 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80072aa:	bf00      	nop
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20004cac 	.word	0x20004cac

080072b4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80072b8:	4802      	ldr	r0, [pc, #8]	; (80072c4 <OTG_FS_IRQHandler+0x10>)
 80072ba:	f002 fc6f 	bl	8009b9c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80072be:	bf00      	nop
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	20006698 	.word	0x20006698

080072c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
	return 1;
 80072cc:	2301      	movs	r3, #1
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <_kill>:

int _kill(int pid, int sig)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80072e2:	f00d f935 	bl	8014550 <__errno>
 80072e6:	4602      	mov	r2, r0
 80072e8:	2316      	movs	r3, #22
 80072ea:	6013      	str	r3, [r2, #0]
	return -1;
 80072ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3708      	adds	r7, #8
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <_exit>:

void _exit (int status)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8007300:	f04f 31ff 	mov.w	r1, #4294967295
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f7ff ffe7 	bl	80072d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800730a:	e7fe      	b.n	800730a <_exit+0x12>

0800730c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e00a      	b.n	8007334 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800731e:	f3af 8000 	nop.w
 8007322:	4601      	mov	r1, r0
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	1c5a      	adds	r2, r3, #1
 8007328:	60ba      	str	r2, [r7, #8]
 800732a:	b2ca      	uxtb	r2, r1
 800732c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	3301      	adds	r3, #1
 8007332:	617b      	str	r3, [r7, #20]
 8007334:	697a      	ldr	r2, [r7, #20]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	429a      	cmp	r2, r3
 800733a:	dbf0      	blt.n	800731e <_read+0x12>
	}

return len;
 800733c:	687b      	ldr	r3, [r7, #4]
}
 800733e:	4618      	mov	r0, r3
 8007340:	3718      	adds	r7, #24
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b086      	sub	sp, #24
 800734a:	af00      	add	r7, sp, #0
 800734c:	60f8      	str	r0, [r7, #12]
 800734e:	60b9      	str	r1, [r7, #8]
 8007350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007352:	2300      	movs	r3, #0
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	e009      	b.n	800736c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	1c5a      	adds	r2, r3, #1
 800735c:	60ba      	str	r2, [r7, #8]
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	3301      	adds	r3, #1
 800736a:	617b      	str	r3, [r7, #20]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	429a      	cmp	r2, r3
 8007372:	dbf1      	blt.n	8007358 <_write+0x12>
	}
	return len;
 8007374:	687b      	ldr	r3, [r7, #4]
}
 8007376:	4618      	mov	r0, r3
 8007378:	3718      	adds	r7, #24
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <_close>:

int _close(int file)
{
 800737e:	b480      	push	{r7}
 8007380:	b083      	sub	sp, #12
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
	return -1;
 8007386:	f04f 33ff 	mov.w	r3, #4294967295
}
 800738a:	4618      	mov	r0, r3
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007396:	b480      	push	{r7}
 8007398:	b083      	sub	sp, #12
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073a6:	605a      	str	r2, [r3, #4]
	return 0;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	370c      	adds	r7, #12
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr

080073b6 <_isatty>:

int _isatty(int file)
{
 80073b6:	b480      	push	{r7}
 80073b8:	b083      	sub	sp, #12
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
	return 1;
 80073be:	2301      	movs	r3, #1
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
	return 0;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b086      	sub	sp, #24
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073f0:	4a14      	ldr	r2, [pc, #80]	; (8007444 <_sbrk+0x5c>)
 80073f2:	4b15      	ldr	r3, [pc, #84]	; (8007448 <_sbrk+0x60>)
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073fc:	4b13      	ldr	r3, [pc, #76]	; (800744c <_sbrk+0x64>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d102      	bne.n	800740a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007404:	4b11      	ldr	r3, [pc, #68]	; (800744c <_sbrk+0x64>)
 8007406:	4a12      	ldr	r2, [pc, #72]	; (8007450 <_sbrk+0x68>)
 8007408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800740a:	4b10      	ldr	r3, [pc, #64]	; (800744c <_sbrk+0x64>)
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4413      	add	r3, r2
 8007412:	693a      	ldr	r2, [r7, #16]
 8007414:	429a      	cmp	r2, r3
 8007416:	d207      	bcs.n	8007428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007418:	f00d f89a 	bl	8014550 <__errno>
 800741c:	4602      	mov	r2, r0
 800741e:	230c      	movs	r3, #12
 8007420:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8007422:	f04f 33ff 	mov.w	r3, #4294967295
 8007426:	e009      	b.n	800743c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007428:	4b08      	ldr	r3, [pc, #32]	; (800744c <_sbrk+0x64>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800742e:	4b07      	ldr	r3, [pc, #28]	; (800744c <_sbrk+0x64>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4413      	add	r3, r2
 8007436:	4a05      	ldr	r2, [pc, #20]	; (800744c <_sbrk+0x64>)
 8007438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800743a:	68fb      	ldr	r3, [r7, #12]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3718      	adds	r7, #24
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	20020000 	.word	0x20020000
 8007448:	00000400 	.word	0x00000400
 800744c:	20000888 	.word	0x20000888
 8007450:	20006aa8 	.word	0x20006aa8

08007454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007454:	b480      	push	{r7}
 8007456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007458:	4b08      	ldr	r3, [pc, #32]	; (800747c <SystemInit+0x28>)
 800745a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800745e:	4a07      	ldr	r2, [pc, #28]	; (800747c <SystemInit+0x28>)
 8007460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007468:	4b04      	ldr	r3, [pc, #16]	; (800747c <SystemInit+0x28>)
 800746a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800746e:	609a      	str	r2, [r3, #8]
#endif
}
 8007470:	bf00      	nop
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	e000ed00 	.word	0xe000ed00

08007480 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007480:	f8df d034 	ldr.w	sp, [pc, #52]	; 80074b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007484:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007486:	e003      	b.n	8007490 <LoopCopyDataInit>

08007488 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007488:	4b0c      	ldr	r3, [pc, #48]	; (80074bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800748a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800748c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800748e:	3104      	adds	r1, #4

08007490 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007490:	480b      	ldr	r0, [pc, #44]	; (80074c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007492:	4b0c      	ldr	r3, [pc, #48]	; (80074c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007494:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007496:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007498:	d3f6      	bcc.n	8007488 <CopyDataInit>
  ldr  r2, =_sbss
 800749a:	4a0b      	ldr	r2, [pc, #44]	; (80074c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800749c:	e002      	b.n	80074a4 <LoopFillZerobss>

0800749e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800749e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80074a0:	f842 3b04 	str.w	r3, [r2], #4

080074a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80074a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074a8:	d3f9      	bcc.n	800749e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80074aa:	f7ff ffd3 	bl	8007454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80074ae:	f00d f867 	bl	8014580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80074b2:	f7fd fa65 	bl	8004980 <main>
  bx  lr    
 80074b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80074b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80074bc:	0801a530 	.word	0x0801a530
  ldr  r0, =_sdata
 80074c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80074c4:	20000608 	.word	0x20000608
  ldr  r2, =_sbss
 80074c8:	20000608 	.word	0x20000608
  ldr  r3, = _ebss
 80074cc:	20006aa4 	.word	0x20006aa4

080074d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074d0:	e7fe      	b.n	80074d0 <ADC_IRQHandler>
	...

080074d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80074d8:	4b0e      	ldr	r3, [pc, #56]	; (8007514 <HAL_Init+0x40>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4a0d      	ldr	r2, [pc, #52]	; (8007514 <HAL_Init+0x40>)
 80074de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80074e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80074e4:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <HAL_Init+0x40>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a0a      	ldr	r2, [pc, #40]	; (8007514 <HAL_Init+0x40>)
 80074ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80074ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80074f0:	4b08      	ldr	r3, [pc, #32]	; (8007514 <HAL_Init+0x40>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a07      	ldr	r2, [pc, #28]	; (8007514 <HAL_Init+0x40>)
 80074f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074fc:	2003      	movs	r0, #3
 80074fe:	f000 fcc4 	bl	8007e8a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007502:	2000      	movs	r0, #0
 8007504:	f7ff fe36 	bl	8007174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007508:	f7ff fb16 	bl	8006b38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	40023c00 	.word	0x40023c00

08007518 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800751c:	4b06      	ldr	r3, [pc, #24]	; (8007538 <HAL_IncTick+0x20>)
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	461a      	mov	r2, r3
 8007522:	4b06      	ldr	r3, [pc, #24]	; (800753c <HAL_IncTick+0x24>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4413      	add	r3, r2
 8007528:	4a04      	ldr	r2, [pc, #16]	; (800753c <HAL_IncTick+0x24>)
 800752a:	6013      	str	r3, [r2, #0]
}
 800752c:	bf00      	nop
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	20000288 	.word	0x20000288
 800753c:	20004d50 	.word	0x20004d50

08007540 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  return uwTick;
 8007544:	4b03      	ldr	r3, [pc, #12]	; (8007554 <HAL_GetTick+0x14>)
 8007546:	681b      	ldr	r3, [r3, #0]
}
 8007548:	4618      	mov	r0, r3
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20004d50 	.word	0x20004d50

08007558 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	b084      	sub	sp, #16
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007560:	f7ff ffee 	bl	8007540 <HAL_GetTick>
 8007564:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007570:	d005      	beq.n	800757e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007572:	4b09      	ldr	r3, [pc, #36]	; (8007598 <HAL_Delay+0x40>)
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	461a      	mov	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800757e:	bf00      	nop
 8007580:	f7ff ffde 	bl	8007540 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	429a      	cmp	r2, r3
 800758e:	d8f7      	bhi.n	8007580 <HAL_Delay+0x28>
  {
  }
}
 8007590:	bf00      	nop
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}
 8007598:	20000288 	.word	0x20000288

0800759c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075a4:	2300      	movs	r3, #0
 80075a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d101      	bne.n	80075b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e033      	b.n	800761a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7ff fae8 	bl	8006b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	f003 0310 	and.w	r3, r3, #16
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d118      	bne.n	800760c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80075e2:	f023 0302 	bic.w	r3, r3, #2
 80075e6:	f043 0202 	orr.w	r2, r3, #2
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 faa2 	bl	8007b38 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fe:	f023 0303 	bic.w	r3, r3, #3
 8007602:	f043 0201 	orr.w	r2, r3, #1
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	641a      	str	r2, [r3, #64]	; 0x40
 800760a:	e001      	b.n	8007610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3710      	adds	r7, #16
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8007624:	b480      	push	{r7}
 8007626:	b085      	sub	sp, #20
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007636:	2b01      	cmp	r3, #1
 8007638:	d101      	bne.n	800763e <HAL_ADC_Start+0x1a>
 800763a:	2302      	movs	r3, #2
 800763c:	e0a5      	b.n	800778a <HAL_ADC_Start+0x166>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 0301 	and.w	r3, r3, #1
 8007650:	2b01      	cmp	r3, #1
 8007652:	d018      	beq.n	8007686 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007664:	4b4c      	ldr	r3, [pc, #304]	; (8007798 <HAL_ADC_Start+0x174>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a4c      	ldr	r2, [pc, #304]	; (800779c <HAL_ADC_Start+0x178>)
 800766a:	fba2 2303 	umull	r2, r3, r2, r3
 800766e:	0c9a      	lsrs	r2, r3, #18
 8007670:	4613      	mov	r3, r2
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	4413      	add	r3, r2
 8007676:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007678:	e002      	b.n	8007680 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	3b01      	subs	r3, #1
 800767e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d1f9      	bne.n	800767a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	d179      	bne.n	8007788 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007698:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800769c:	f023 0301 	bic.w	r3, r3, #1
 80076a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076d2:	d106      	bne.n	80076e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076d8:	f023 0206 	bic.w	r2, r3, #6
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	645a      	str	r2, [r3, #68]	; 0x44
 80076e0:	e002      	b.n	80076e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076f0:	4b2b      	ldr	r3, [pc, #172]	; (80077a0 <HAL_ADC_Start+0x17c>)
 80076f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80076fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f003 031f 	and.w	r3, r3, #31
 8007706:	2b00      	cmp	r3, #0
 8007708:	d12a      	bne.n	8007760 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	4a25      	ldr	r2, [pc, #148]	; (80077a4 <HAL_ADC_Start+0x180>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d015      	beq.n	8007740 <HAL_ADC_Start+0x11c>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	4a23      	ldr	r2, [pc, #140]	; (80077a8 <HAL_ADC_Start+0x184>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d105      	bne.n	800772a <HAL_ADC_Start+0x106>
 800771e:	4b20      	ldr	r3, [pc, #128]	; (80077a0 <HAL_ADC_Start+0x17c>)
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1f      	ldr	r2, [pc, #124]	; (80077ac <HAL_ADC_Start+0x188>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d129      	bne.n	8007788 <HAL_ADC_Start+0x164>
 8007734:	4b1a      	ldr	r3, [pc, #104]	; (80077a0 <HAL_ADC_Start+0x17c>)
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2b0f      	cmp	r3, #15
 800773e:	d823      	bhi.n	8007788 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d11c      	bne.n	8007788 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800775c:	609a      	str	r2, [r3, #8]
 800775e:	e013      	b.n	8007788 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a0f      	ldr	r2, [pc, #60]	; (80077a4 <HAL_ADC_Start+0x180>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d10e      	bne.n	8007788 <HAL_ADC_Start+0x164>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d107      	bne.n	8007788 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007786:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	20000280 	.word	0x20000280
 800779c:	431bde83 	.word	0x431bde83
 80077a0:	40012300 	.word	0x40012300
 80077a4:	40012000 	.word	0x40012000
 80077a8:	40012100 	.word	0x40012100
 80077ac:	40012200 	.word	0x40012200

080077b0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077cc:	d113      	bne.n	80077f6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80077d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077dc:	d10b      	bne.n	80077f6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e2:	f043 0220 	orr.w	r2, r3, #32
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e05c      	b.n	80078b0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80077f6:	f7ff fea3 	bl	8007540 <HAL_GetTick>
 80077fa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80077fc:	e01a      	b.n	8007834 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d016      	beq.n	8007834 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d007      	beq.n	800781c <HAL_ADC_PollForConversion+0x6c>
 800780c:	f7ff fe98 	bl	8007540 <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	429a      	cmp	r2, r3
 800781a:	d20b      	bcs.n	8007834 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007820:	f043 0204 	orr.w	r2, r3, #4
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8007830:	2303      	movs	r3, #3
 8007832:	e03d      	b.n	80078b0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b02      	cmp	r3, #2
 8007840:	d1dd      	bne.n	80077fe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f06f 0212 	mvn.w	r2, #18
 800784a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007850:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689b      	ldr	r3, [r3, #8]
 800785e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d123      	bne.n	80078ae <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800786a:	2b00      	cmp	r3, #0
 800786c:	d11f      	bne.n	80078ae <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007874:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007878:	2b00      	cmp	r3, #0
 800787a:	d006      	beq.n	800788a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007886:	2b00      	cmp	r3, #0
 8007888:	d111      	bne.n	80078ae <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800789a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d105      	bne.n	80078ae <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a6:	f043 0201 	orr.w	r2, r3, #1
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}

080078b8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr
	...

080078d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
 80078dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d101      	bne.n	80078f0 <HAL_ADC_ConfigChannel+0x1c>
 80078ec:	2302      	movs	r3, #2
 80078ee:	e113      	b.n	8007b18 <HAL_ADC_ConfigChannel+0x244>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2201      	movs	r2, #1
 80078f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d925      	bls.n	800794c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68d9      	ldr	r1, [r3, #12]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	b29b      	uxth	r3, r3
 800790c:	461a      	mov	r2, r3
 800790e:	4613      	mov	r3, r2
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4413      	add	r3, r2
 8007914:	3b1e      	subs	r3, #30
 8007916:	2207      	movs	r2, #7
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	43da      	mvns	r2, r3
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	400a      	ands	r2, r1
 8007924:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	68d9      	ldr	r1, [r3, #12]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	689a      	ldr	r2, [r3, #8]
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	b29b      	uxth	r3, r3
 8007936:	4618      	mov	r0, r3
 8007938:	4603      	mov	r3, r0
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4403      	add	r3, r0
 800793e:	3b1e      	subs	r3, #30
 8007940:	409a      	lsls	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	60da      	str	r2, [r3, #12]
 800794a:	e022      	b.n	8007992 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6919      	ldr	r1, [r3, #16]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	b29b      	uxth	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	4613      	mov	r3, r2
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4413      	add	r3, r2
 8007960:	2207      	movs	r2, #7
 8007962:	fa02 f303 	lsl.w	r3, r2, r3
 8007966:	43da      	mvns	r2, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	400a      	ands	r2, r1
 800796e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	6919      	ldr	r1, [r3, #16]
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	b29b      	uxth	r3, r3
 8007980:	4618      	mov	r0, r3
 8007982:	4603      	mov	r3, r0
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4403      	add	r3, r0
 8007988:	409a      	lsls	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2b06      	cmp	r3, #6
 8007998:	d824      	bhi.n	80079e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	685a      	ldr	r2, [r3, #4]
 80079a4:	4613      	mov	r3, r2
 80079a6:	009b      	lsls	r3, r3, #2
 80079a8:	4413      	add	r3, r2
 80079aa:	3b05      	subs	r3, #5
 80079ac:	221f      	movs	r2, #31
 80079ae:	fa02 f303 	lsl.w	r3, r2, r3
 80079b2:	43da      	mvns	r2, r3
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	400a      	ands	r2, r1
 80079ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4618      	mov	r0, r3
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	4613      	mov	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	3b05      	subs	r3, #5
 80079d6:	fa00 f203 	lsl.w	r2, r0, r3
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	635a      	str	r2, [r3, #52]	; 0x34
 80079e2:	e04c      	b.n	8007a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b0c      	cmp	r3, #12
 80079ea:	d824      	bhi.n	8007a36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	4613      	mov	r3, r2
 80079f8:	009b      	lsls	r3, r3, #2
 80079fa:	4413      	add	r3, r2
 80079fc:	3b23      	subs	r3, #35	; 0x23
 80079fe:	221f      	movs	r2, #31
 8007a00:	fa02 f303 	lsl.w	r3, r2, r3
 8007a04:	43da      	mvns	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	400a      	ands	r2, r1
 8007a0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	3b23      	subs	r3, #35	; 0x23
 8007a28:	fa00 f203 	lsl.w	r2, r0, r3
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	430a      	orrs	r2, r1
 8007a32:	631a      	str	r2, [r3, #48]	; 0x30
 8007a34:	e023      	b.n	8007a7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	4613      	mov	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	4413      	add	r3, r2
 8007a46:	3b41      	subs	r3, #65	; 0x41
 8007a48:	221f      	movs	r2, #31
 8007a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4e:	43da      	mvns	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	400a      	ands	r2, r1
 8007a56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	4618      	mov	r0, r3
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	685a      	ldr	r2, [r3, #4]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	3b41      	subs	r3, #65	; 0x41
 8007a72:	fa00 f203 	lsl.w	r2, r0, r3
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a7e:	4b29      	ldr	r3, [pc, #164]	; (8007b24 <HAL_ADC_ConfigChannel+0x250>)
 8007a80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a28      	ldr	r2, [pc, #160]	; (8007b28 <HAL_ADC_ConfigChannel+0x254>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d10f      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x1d8>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b12      	cmp	r3, #18
 8007a92:	d10b      	bne.n	8007aac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	685b      	ldr	r3, [r3, #4]
 8007aa4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1d      	ldr	r2, [pc, #116]	; (8007b28 <HAL_ADC_ConfigChannel+0x254>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d12b      	bne.n	8007b0e <HAL_ADC_ConfigChannel+0x23a>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a1c      	ldr	r2, [pc, #112]	; (8007b2c <HAL_ADC_ConfigChannel+0x258>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d003      	beq.n	8007ac8 <HAL_ADC_ConfigChannel+0x1f4>
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b11      	cmp	r3, #17
 8007ac6:	d122      	bne.n	8007b0e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a11      	ldr	r2, [pc, #68]	; (8007b2c <HAL_ADC_ConfigChannel+0x258>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d111      	bne.n	8007b0e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007aea:	4b11      	ldr	r3, [pc, #68]	; (8007b30 <HAL_ADC_ConfigChannel+0x25c>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a11      	ldr	r2, [pc, #68]	; (8007b34 <HAL_ADC_ConfigChannel+0x260>)
 8007af0:	fba2 2303 	umull	r2, r3, r2, r3
 8007af4:	0c9a      	lsrs	r2, r3, #18
 8007af6:	4613      	mov	r3, r2
 8007af8:	009b      	lsls	r3, r3, #2
 8007afa:	4413      	add	r3, r2
 8007afc:	005b      	lsls	r3, r3, #1
 8007afe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b00:	e002      	b.n	8007b08 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f9      	bne.n	8007b02 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b16:	2300      	movs	r3, #0
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3714      	adds	r7, #20
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr
 8007b24:	40012300 	.word	0x40012300
 8007b28:	40012000 	.word	0x40012000
 8007b2c:	10000012 	.word	0x10000012
 8007b30:	20000280 	.word	0x20000280
 8007b34:	431bde83 	.word	0x431bde83

08007b38 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007b40:	4b79      	ldr	r3, [pc, #484]	; (8007d28 <ADC_Init+0x1f0>)
 8007b42:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	685b      	ldr	r3, [r3, #4]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b6c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6859      	ldr	r1, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	691b      	ldr	r3, [r3, #16]
 8007b78:	021a      	lsls	r2, r3, #8
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6859      	ldr	r1, [r3, #4]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	689a      	ldr	r2, [r3, #8]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bca:	4a58      	ldr	r2, [pc, #352]	; (8007d2c <ADC_Init+0x1f4>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d022      	beq.n	8007c16 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689a      	ldr	r2, [r3, #8]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bde:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6899      	ldr	r1, [r3, #8]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689a      	ldr	r2, [r3, #8]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c00:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6899      	ldr	r1, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	609a      	str	r2, [r3, #8]
 8007c14:	e00f      	b.n	8007c36 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	689a      	ldr	r2, [r3, #8]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	689a      	ldr	r2, [r3, #8]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c34:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 0202 	bic.w	r2, r2, #2
 8007c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	6899      	ldr	r1, [r3, #8]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	7e1b      	ldrb	r3, [r3, #24]
 8007c50:	005a      	lsls	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d01b      	beq.n	8007c9c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c72:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c82:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6859      	ldr	r1, [r3, #4]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	035a      	lsls	r2, r3, #13
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
 8007c9a:	e007      	b.n	8007cac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007caa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	69db      	ldr	r3, [r3, #28]
 8007cc6:	3b01      	subs	r3, #1
 8007cc8:	051a      	lsls	r2, r3, #20
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	689a      	ldr	r2, [r3, #8]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ce0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6899      	ldr	r1, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cee:	025a      	lsls	r2, r3, #9
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689a      	ldr	r2, [r3, #8]
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6899      	ldr	r1, [r3, #8]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	029a      	lsls	r2, r3, #10
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
}
 8007d1c:	bf00      	nop
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	40012300 	.word	0x40012300
 8007d2c:	0f000001 	.word	0x0f000001

08007d30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d40:	4b0c      	ldr	r3, [pc, #48]	; (8007d74 <__NVIC_SetPriorityGrouping+0x44>)
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d62:	4a04      	ldr	r2, [pc, #16]	; (8007d74 <__NVIC_SetPriorityGrouping+0x44>)
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	60d3      	str	r3, [r2, #12]
}
 8007d68:	bf00      	nop
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr
 8007d74:	e000ed00 	.word	0xe000ed00

08007d78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007d7c:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <__NVIC_GetPriorityGrouping+0x18>)
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	0a1b      	lsrs	r3, r3, #8
 8007d82:	f003 0307 	and.w	r3, r3, #7
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr
 8007d90:	e000ed00 	.word	0xe000ed00

08007d94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	db0b      	blt.n	8007dbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007da6:	79fb      	ldrb	r3, [r7, #7]
 8007da8:	f003 021f 	and.w	r2, r3, #31
 8007dac:	4907      	ldr	r1, [pc, #28]	; (8007dcc <__NVIC_EnableIRQ+0x38>)
 8007dae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007db2:	095b      	lsrs	r3, r3, #5
 8007db4:	2001      	movs	r0, #1
 8007db6:	fa00 f202 	lsl.w	r2, r0, r2
 8007dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	370c      	adds	r7, #12
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	e000e100 	.word	0xe000e100

08007dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	6039      	str	r1, [r7, #0]
 8007dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	db0a      	blt.n	8007dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	490c      	ldr	r1, [pc, #48]	; (8007e1c <__NVIC_SetPriority+0x4c>)
 8007dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dee:	0112      	lsls	r2, r2, #4
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	440b      	add	r3, r1
 8007df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007df8:	e00a      	b.n	8007e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	b2da      	uxtb	r2, r3
 8007dfe:	4908      	ldr	r1, [pc, #32]	; (8007e20 <__NVIC_SetPriority+0x50>)
 8007e00:	79fb      	ldrb	r3, [r7, #7]
 8007e02:	f003 030f 	and.w	r3, r3, #15
 8007e06:	3b04      	subs	r3, #4
 8007e08:	0112      	lsls	r2, r2, #4
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	761a      	strb	r2, [r3, #24]
}
 8007e10:	bf00      	nop
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr
 8007e1c:	e000e100 	.word	0xe000e100
 8007e20:	e000ed00 	.word	0xe000ed00

08007e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b089      	sub	sp, #36	; 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	f1c3 0307 	rsb	r3, r3, #7
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	bf28      	it	cs
 8007e42:	2304      	movcs	r3, #4
 8007e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	3304      	adds	r3, #4
 8007e4a:	2b06      	cmp	r3, #6
 8007e4c:	d902      	bls.n	8007e54 <NVIC_EncodePriority+0x30>
 8007e4e:	69fb      	ldr	r3, [r7, #28]
 8007e50:	3b03      	subs	r3, #3
 8007e52:	e000      	b.n	8007e56 <NVIC_EncodePriority+0x32>
 8007e54:	2300      	movs	r3, #0
 8007e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e58:	f04f 32ff 	mov.w	r2, #4294967295
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	43da      	mvns	r2, r3
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	401a      	ands	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	fa01 f303 	lsl.w	r3, r1, r3
 8007e76:	43d9      	mvns	r1, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e7c:	4313      	orrs	r3, r2
         );
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3724      	adds	r7, #36	; 0x24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b082      	sub	sp, #8
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f7ff ff4c 	bl	8007d30 <__NVIC_SetPriorityGrouping>
}
 8007e98:	bf00      	nop
 8007e9a:	3708      	adds	r7, #8
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	60b9      	str	r1, [r7, #8]
 8007eaa:	607a      	str	r2, [r7, #4]
 8007eac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007eb2:	f7ff ff61 	bl	8007d78 <__NVIC_GetPriorityGrouping>
 8007eb6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	68b9      	ldr	r1, [r7, #8]
 8007ebc:	6978      	ldr	r0, [r7, #20]
 8007ebe:	f7ff ffb1 	bl	8007e24 <NVIC_EncodePriority>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7ff ff80 	bl	8007dd0 <__NVIC_SetPriority>
}
 8007ed0:	bf00      	nop
 8007ed2:	3718      	adds	r7, #24
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff ff54 	bl	8007d94 <__NVIC_EnableIRQ>
}
 8007eec:	bf00      	nop
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007efc:	2300      	movs	r3, #0
 8007efe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007f00:	f7ff fb1e 	bl	8007540 <HAL_GetTick>
 8007f04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e099      	b.n	8008044 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2200      	movs	r2, #0
 8007f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f022 0201 	bic.w	r2, r2, #1
 8007f2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f30:	e00f      	b.n	8007f52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f32:	f7ff fb05 	bl	8007540 <HAL_GetTick>
 8007f36:	4602      	mov	r2, r0
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	2b05      	cmp	r3, #5
 8007f3e:	d908      	bls.n	8007f52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2220      	movs	r2, #32
 8007f44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2203      	movs	r2, #3
 8007f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007f4e:	2303      	movs	r3, #3
 8007f50:	e078      	b.n	8008044 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e8      	bne.n	8007f32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4b38      	ldr	r3, [pc, #224]	; (800804c <HAL_DMA_Init+0x158>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685a      	ldr	r2, [r3, #4]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007f8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007f96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a1b      	ldr	r3, [r3, #32]
 8007f9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d107      	bne.n	8007fbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	697a      	ldr	r2, [r7, #20]
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	695b      	ldr	r3, [r3, #20]
 8007fca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0307 	bic.w	r3, r3, #7
 8007fd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe2:	2b04      	cmp	r3, #4
 8007fe4:	d117      	bne.n	8008016 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00e      	beq.n	8008016 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa6f 	bl	80084dc <DMA_CheckFifoParam>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d008      	beq.n	8008016 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2240      	movs	r2, #64	; 0x40
 8008008:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008012:	2301      	movs	r3, #1
 8008014:	e016      	b.n	8008044 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	697a      	ldr	r2, [r7, #20]
 800801c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 fa26 	bl	8008470 <DMA_CalcBaseAndBitshift>
 8008024:	4603      	mov	r3, r0
 8008026:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	223f      	movs	r2, #63	; 0x3f
 800802e:	409a      	lsls	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2201      	movs	r2, #1
 800803e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	3718      	adds	r7, #24
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	f010803f 	.word	0xf010803f

08008050 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b086      	sub	sp, #24
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800805e:	2300      	movs	r3, #0
 8008060:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008066:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800806e:	2b01      	cmp	r3, #1
 8008070:	d101      	bne.n	8008076 <HAL_DMA_Start_IT+0x26>
 8008072:	2302      	movs	r3, #2
 8008074:	e040      	b.n	80080f8 <HAL_DMA_Start_IT+0xa8>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b01      	cmp	r3, #1
 8008088:	d12f      	bne.n	80080ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2202      	movs	r2, #2
 800808e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	68b9      	ldr	r1, [r7, #8]
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f9b8 	bl	8008414 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a8:	223f      	movs	r2, #63	; 0x3f
 80080aa:	409a      	lsls	r2, r3
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0216 	orr.w	r2, r2, #22
 80080be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d007      	beq.n	80080d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f042 0208 	orr.w	r2, r2, #8
 80080d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	e005      	b.n	80080f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2200      	movs	r2, #0
 80080ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80080f2:	2302      	movs	r3, #2
 80080f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80080f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3718      	adds	r7, #24
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b086      	sub	sp, #24
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008108:	2300      	movs	r3, #0
 800810a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800810c:	4b92      	ldr	r3, [pc, #584]	; (8008358 <HAL_DMA_IRQHandler+0x258>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a92      	ldr	r2, [pc, #584]	; (800835c <HAL_DMA_IRQHandler+0x25c>)
 8008112:	fba2 2303 	umull	r2, r3, r2, r3
 8008116:	0a9b      	lsrs	r3, r3, #10
 8008118:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800812a:	2208      	movs	r2, #8
 800812c:	409a      	lsls	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	4013      	ands	r3, r2
 8008132:	2b00      	cmp	r3, #0
 8008134:	d01a      	beq.n	800816c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	d013      	beq.n	800816c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f022 0204 	bic.w	r2, r2, #4
 8008152:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008158:	2208      	movs	r2, #8
 800815a:	409a      	lsls	r2, r3
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008164:	f043 0201 	orr.w	r2, r3, #1
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008170:	2201      	movs	r2, #1
 8008172:	409a      	lsls	r2, r3
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4013      	ands	r3, r2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d012      	beq.n	80081a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	695b      	ldr	r3, [r3, #20]
 8008182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800818e:	2201      	movs	r2, #1
 8008190:	409a      	lsls	r2, r3
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819a:	f043 0202 	orr.w	r2, r3, #2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a6:	2204      	movs	r2, #4
 80081a8:	409a      	lsls	r2, r3
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d012      	beq.n	80081d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f003 0302 	and.w	r3, r3, #2
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00b      	beq.n	80081d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c4:	2204      	movs	r2, #4
 80081c6:	409a      	lsls	r2, r3
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081d0:	f043 0204 	orr.w	r2, r3, #4
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081dc:	2210      	movs	r2, #16
 80081de:	409a      	lsls	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d043      	beq.n	8008270 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f003 0308 	and.w	r3, r3, #8
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d03c      	beq.n	8008270 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fa:	2210      	movs	r2, #16
 80081fc:	409a      	lsls	r2, r3
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800820c:	2b00      	cmp	r3, #0
 800820e:	d018      	beq.n	8008242 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d108      	bne.n	8008230 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008222:	2b00      	cmp	r3, #0
 8008224:	d024      	beq.n	8008270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
 800822e:	e01f      	b.n	8008270 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008234:	2b00      	cmp	r3, #0
 8008236:	d01b      	beq.n	8008270 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800823c:	6878      	ldr	r0, [r7, #4]
 800823e:	4798      	blx	r3
 8008240:	e016      	b.n	8008270 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800824c:	2b00      	cmp	r3, #0
 800824e:	d107      	bne.n	8008260 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f022 0208 	bic.w	r2, r2, #8
 800825e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008264:	2b00      	cmp	r3, #0
 8008266:	d003      	beq.n	8008270 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008274:	2220      	movs	r2, #32
 8008276:	409a      	lsls	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	4013      	ands	r3, r2
 800827c:	2b00      	cmp	r3, #0
 800827e:	f000 808e 	beq.w	800839e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f003 0310 	and.w	r3, r3, #16
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 8086 	beq.w	800839e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008296:	2220      	movs	r2, #32
 8008298:	409a      	lsls	r2, r3
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d136      	bne.n	8008318 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f022 0216 	bic.w	r2, r2, #22
 80082b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	695a      	ldr	r2, [r3, #20]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d103      	bne.n	80082da <HAL_DMA_IRQHandler+0x1da>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d007      	beq.n	80082ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0208 	bic.w	r2, r2, #8
 80082e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082ee:	223f      	movs	r2, #63	; 0x3f
 80082f0:	409a      	lsls	r2, r3
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800830a:	2b00      	cmp	r3, #0
 800830c:	d07d      	beq.n	800840a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	4798      	blx	r3
        }
        return;
 8008316:	e078      	b.n	800840a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d01c      	beq.n	8008360 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d108      	bne.n	8008346 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008338:	2b00      	cmp	r3, #0
 800833a:	d030      	beq.n	800839e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	4798      	blx	r3
 8008344:	e02b      	b.n	800839e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d027      	beq.n	800839e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
 8008356:	e022      	b.n	800839e <HAL_DMA_IRQHandler+0x29e>
 8008358:	20000280 	.word	0x20000280
 800835c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10f      	bne.n	800838e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f022 0210 	bic.w	r2, r2, #16
 800837c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2200      	movs	r2, #0
 8008382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d032      	beq.n	800840c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083aa:	f003 0301 	and.w	r3, r3, #1
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d022      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2205      	movs	r2, #5
 80083b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f022 0201 	bic.w	r2, r2, #1
 80083c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	3301      	adds	r3, #1
 80083ce:	60bb      	str	r3, [r7, #8]
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d307      	bcc.n	80083e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0301 	and.w	r3, r3, #1
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f2      	bne.n	80083ca <HAL_DMA_IRQHandler+0x2ca>
 80083e4:	e000      	b.n	80083e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80083e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
 8008408:	e000      	b.n	800840c <HAL_DMA_IRQHandler+0x30c>
        return;
 800840a:	bf00      	nop
    }
  }
}
 800840c:	3718      	adds	r7, #24
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop

08008414 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	60f8      	str	r0, [r7, #12]
 800841c:	60b9      	str	r1, [r7, #8]
 800841e:	607a      	str	r2, [r7, #4]
 8008420:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008430:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d108      	bne.n	8008454 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008452:	e007      	b.n	8008464 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	60da      	str	r2, [r3, #12]
}
 8008464:	bf00      	nop
 8008466:	3714      	adds	r7, #20
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008470:	b480      	push	{r7}
 8008472:	b085      	sub	sp, #20
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	b2db      	uxtb	r3, r3
 800847e:	3b10      	subs	r3, #16
 8008480:	4a14      	ldr	r2, [pc, #80]	; (80084d4 <DMA_CalcBaseAndBitshift+0x64>)
 8008482:	fba2 2303 	umull	r2, r3, r2, r3
 8008486:	091b      	lsrs	r3, r3, #4
 8008488:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800848a:	4a13      	ldr	r2, [pc, #76]	; (80084d8 <DMA_CalcBaseAndBitshift+0x68>)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	461a      	mov	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b03      	cmp	r3, #3
 800849c:	d909      	bls.n	80084b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80084a6:	f023 0303 	bic.w	r3, r3, #3
 80084aa:	1d1a      	adds	r2, r3, #4
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	659a      	str	r2, [r3, #88]	; 0x58
 80084b0:	e007      	b.n	80084c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80084ba:	f023 0303 	bic.w	r3, r3, #3
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3714      	adds	r7, #20
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr
 80084d2:	bf00      	nop
 80084d4:	aaaaaaab 	.word	0xaaaaaaab
 80084d8:	08019fd0 	.word	0x08019fd0

080084dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084e4:	2300      	movs	r3, #0
 80084e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d11f      	bne.n	8008536 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	2b03      	cmp	r3, #3
 80084fa:	d855      	bhi.n	80085a8 <DMA_CheckFifoParam+0xcc>
 80084fc:	a201      	add	r2, pc, #4	; (adr r2, 8008504 <DMA_CheckFifoParam+0x28>)
 80084fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008502:	bf00      	nop
 8008504:	08008515 	.word	0x08008515
 8008508:	08008527 	.word	0x08008527
 800850c:	08008515 	.word	0x08008515
 8008510:	080085a9 	.word	0x080085a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d045      	beq.n	80085ac <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008524:	e042      	b.n	80085ac <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800852e:	d13f      	bne.n	80085b0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008534:	e03c      	b.n	80085b0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800853e:	d121      	bne.n	8008584 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2b03      	cmp	r3, #3
 8008544:	d836      	bhi.n	80085b4 <DMA_CheckFifoParam+0xd8>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <DMA_CheckFifoParam+0x70>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	0800855d 	.word	0x0800855d
 8008550:	08008563 	.word	0x08008563
 8008554:	0800855d 	.word	0x0800855d
 8008558:	08008575 	.word	0x08008575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	73fb      	strb	r3, [r7, #15]
      break;
 8008560:	e02f      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800856a:	2b00      	cmp	r3, #0
 800856c:	d024      	beq.n	80085b8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008572:	e021      	b.n	80085b8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800857c:	d11e      	bne.n	80085bc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008582:	e01b      	b.n	80085bc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	2b02      	cmp	r3, #2
 8008588:	d902      	bls.n	8008590 <DMA_CheckFifoParam+0xb4>
 800858a:	2b03      	cmp	r3, #3
 800858c:	d003      	beq.n	8008596 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800858e:	e018      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	73fb      	strb	r3, [r7, #15]
      break;
 8008594:	e015      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00e      	beq.n	80085c0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	73fb      	strb	r3, [r7, #15]
      break;
 80085a6:	e00b      	b.n	80085c0 <DMA_CheckFifoParam+0xe4>
      break;
 80085a8:	bf00      	nop
 80085aa:	e00a      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      break;
 80085ac:	bf00      	nop
 80085ae:	e008      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      break;
 80085b0:	bf00      	nop
 80085b2:	e006      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      break;
 80085b4:	bf00      	nop
 80085b6:	e004      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      break;
 80085b8:	bf00      	nop
 80085ba:	e002      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      break;   
 80085bc:	bf00      	nop
 80085be:	e000      	b.n	80085c2 <DMA_CheckFifoParam+0xe6>
      break;
 80085c0:	bf00      	nop
    }
  } 
  
  return status; 
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b089      	sub	sp, #36	; 0x24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80085de:	2300      	movs	r3, #0
 80085e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80085e2:	2300      	movs	r3, #0
 80085e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085e6:	2300      	movs	r3, #0
 80085e8:	61fb      	str	r3, [r7, #28]
 80085ea:	e165      	b.n	80088b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085ec:	2201      	movs	r2, #1
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	697a      	ldr	r2, [r7, #20]
 80085fc:	4013      	ands	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	429a      	cmp	r2, r3
 8008606:	f040 8154 	bne.w	80088b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	2b01      	cmp	r3, #1
 8008610:	d00b      	beq.n	800862a <HAL_GPIO_Init+0x5a>
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	2b02      	cmp	r3, #2
 8008618:	d007      	beq.n	800862a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800861e:	2b11      	cmp	r3, #17
 8008620:	d003      	beq.n	800862a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	685b      	ldr	r3, [r3, #4]
 8008626:	2b12      	cmp	r3, #18
 8008628:	d130      	bne.n	800868c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	2203      	movs	r2, #3
 8008636:	fa02 f303 	lsl.w	r3, r2, r3
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	68da      	ldr	r2, [r3, #12]
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	fa02 f303 	lsl.w	r3, r2, r3
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	4313      	orrs	r3, r2
 8008652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	69ba      	ldr	r2, [r7, #24]
 8008658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008660:	2201      	movs	r2, #1
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	fa02 f303 	lsl.w	r3, r2, r3
 8008668:	43db      	mvns	r3, r3
 800866a:	69ba      	ldr	r2, [r7, #24]
 800866c:	4013      	ands	r3, r2
 800866e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	091b      	lsrs	r3, r3, #4
 8008676:	f003 0201 	and.w	r2, r3, #1
 800867a:	69fb      	ldr	r3, [r7, #28]
 800867c:	fa02 f303 	lsl.w	r3, r2, r3
 8008680:	69ba      	ldr	r2, [r7, #24]
 8008682:	4313      	orrs	r3, r2
 8008684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	69ba      	ldr	r2, [r7, #24]
 800868a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008692:	69fb      	ldr	r3, [r7, #28]
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	2203      	movs	r2, #3
 8008698:	fa02 f303 	lsl.w	r3, r2, r3
 800869c:	43db      	mvns	r3, r3
 800869e:	69ba      	ldr	r2, [r7, #24]
 80086a0:	4013      	ands	r3, r2
 80086a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	fa02 f303 	lsl.w	r3, r2, r3
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d003      	beq.n	80086cc <HAL_GPIO_Init+0xfc>
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	2b12      	cmp	r3, #18
 80086ca:	d123      	bne.n	8008714 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	08da      	lsrs	r2, r3, #3
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3208      	adds	r2, #8
 80086d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	220f      	movs	r2, #15
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	43db      	mvns	r3, r3
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	4013      	ands	r3, r2
 80086ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	691a      	ldr	r2, [r3, #16]
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	08da      	lsrs	r2, r3, #3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	3208      	adds	r2, #8
 800870e:	69b9      	ldr	r1, [r7, #24]
 8008710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800871a:	69fb      	ldr	r3, [r7, #28]
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	2203      	movs	r2, #3
 8008720:	fa02 f303 	lsl.w	r3, r2, r3
 8008724:	43db      	mvns	r3, r3
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	4013      	ands	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f003 0203 	and.w	r2, r3, #3
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	005b      	lsls	r3, r3, #1
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	4313      	orrs	r3, r2
 8008740:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69ba      	ldr	r2, [r7, #24]
 8008746:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80ae 	beq.w	80088b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008756:	2300      	movs	r3, #0
 8008758:	60fb      	str	r3, [r7, #12]
 800875a:	4b5c      	ldr	r3, [pc, #368]	; (80088cc <HAL_GPIO_Init+0x2fc>)
 800875c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875e:	4a5b      	ldr	r2, [pc, #364]	; (80088cc <HAL_GPIO_Init+0x2fc>)
 8008760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008764:	6453      	str	r3, [r2, #68]	; 0x44
 8008766:	4b59      	ldr	r3, [pc, #356]	; (80088cc <HAL_GPIO_Init+0x2fc>)
 8008768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800876a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800876e:	60fb      	str	r3, [r7, #12]
 8008770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008772:	4a57      	ldr	r2, [pc, #348]	; (80088d0 <HAL_GPIO_Init+0x300>)
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	089b      	lsrs	r3, r3, #2
 8008778:	3302      	adds	r3, #2
 800877a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800877e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	f003 0303 	and.w	r3, r3, #3
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	220f      	movs	r2, #15
 800878a:	fa02 f303 	lsl.w	r3, r2, r3
 800878e:	43db      	mvns	r3, r3
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	4013      	ands	r3, r2
 8008794:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	4a4e      	ldr	r2, [pc, #312]	; (80088d4 <HAL_GPIO_Init+0x304>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d025      	beq.n	80087ea <HAL_GPIO_Init+0x21a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4a4d      	ldr	r2, [pc, #308]	; (80088d8 <HAL_GPIO_Init+0x308>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d01f      	beq.n	80087e6 <HAL_GPIO_Init+0x216>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a4c      	ldr	r2, [pc, #304]	; (80088dc <HAL_GPIO_Init+0x30c>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d019      	beq.n	80087e2 <HAL_GPIO_Init+0x212>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	4a4b      	ldr	r2, [pc, #300]	; (80088e0 <HAL_GPIO_Init+0x310>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d013      	beq.n	80087de <HAL_GPIO_Init+0x20e>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a4a      	ldr	r2, [pc, #296]	; (80088e4 <HAL_GPIO_Init+0x314>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d00d      	beq.n	80087da <HAL_GPIO_Init+0x20a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a49      	ldr	r2, [pc, #292]	; (80088e8 <HAL_GPIO_Init+0x318>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d007      	beq.n	80087d6 <HAL_GPIO_Init+0x206>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a48      	ldr	r2, [pc, #288]	; (80088ec <HAL_GPIO_Init+0x31c>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d101      	bne.n	80087d2 <HAL_GPIO_Init+0x202>
 80087ce:	2306      	movs	r3, #6
 80087d0:	e00c      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087d2:	2307      	movs	r3, #7
 80087d4:	e00a      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087d6:	2305      	movs	r3, #5
 80087d8:	e008      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087da:	2304      	movs	r3, #4
 80087dc:	e006      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087de:	2303      	movs	r3, #3
 80087e0:	e004      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e002      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087e6:	2301      	movs	r3, #1
 80087e8:	e000      	b.n	80087ec <HAL_GPIO_Init+0x21c>
 80087ea:	2300      	movs	r3, #0
 80087ec:	69fa      	ldr	r2, [r7, #28]
 80087ee:	f002 0203 	and.w	r2, r2, #3
 80087f2:	0092      	lsls	r2, r2, #2
 80087f4:	4093      	lsls	r3, r2
 80087f6:	69ba      	ldr	r2, [r7, #24]
 80087f8:	4313      	orrs	r3, r2
 80087fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087fc:	4934      	ldr	r1, [pc, #208]	; (80088d0 <HAL_GPIO_Init+0x300>)
 80087fe:	69fb      	ldr	r3, [r7, #28]
 8008800:	089b      	lsrs	r3, r3, #2
 8008802:	3302      	adds	r3, #2
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800880a:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <HAL_GPIO_Init+0x320>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	43db      	mvns	r3, r3
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	4013      	ands	r3, r2
 8008818:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008826:	69ba      	ldr	r2, [r7, #24]
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	4313      	orrs	r3, r2
 800882c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800882e:	4a30      	ldr	r2, [pc, #192]	; (80088f0 <HAL_GPIO_Init+0x320>)
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008834:	4b2e      	ldr	r3, [pc, #184]	; (80088f0 <HAL_GPIO_Init+0x320>)
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	43db      	mvns	r3, r3
 800883e:	69ba      	ldr	r2, [r7, #24]
 8008840:	4013      	ands	r3, r2
 8008842:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d003      	beq.n	8008858 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008850:	69ba      	ldr	r2, [r7, #24]
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	4313      	orrs	r3, r2
 8008856:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008858:	4a25      	ldr	r2, [pc, #148]	; (80088f0 <HAL_GPIO_Init+0x320>)
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800885e:	4b24      	ldr	r3, [pc, #144]	; (80088f0 <HAL_GPIO_Init+0x320>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	43db      	mvns	r3, r3
 8008868:	69ba      	ldr	r2, [r7, #24]
 800886a:	4013      	ands	r3, r2
 800886c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d003      	beq.n	8008882 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	4313      	orrs	r3, r2
 8008880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008882:	4a1b      	ldr	r2, [pc, #108]	; (80088f0 <HAL_GPIO_Init+0x320>)
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008888:	4b19      	ldr	r3, [pc, #100]	; (80088f0 <HAL_GPIO_Init+0x320>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	43db      	mvns	r3, r3
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	4013      	ands	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d003      	beq.n	80088ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80088ac:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <HAL_GPIO_Init+0x320>)
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	3301      	adds	r3, #1
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b0f      	cmp	r3, #15
 80088bc:	f67f ae96 	bls.w	80085ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80088c0:	bf00      	nop
 80088c2:	3724      	adds	r7, #36	; 0x24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr
 80088cc:	40023800 	.word	0x40023800
 80088d0:	40013800 	.word	0x40013800
 80088d4:	40020000 	.word	0x40020000
 80088d8:	40020400 	.word	0x40020400
 80088dc:	40020800 	.word	0x40020800
 80088e0:	40020c00 	.word	0x40020c00
 80088e4:	40021000 	.word	0x40021000
 80088e8:	40021400 	.word	0x40021400
 80088ec:	40021800 	.word	0x40021800
 80088f0:	40013c00 	.word	0x40013c00

080088f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b085      	sub	sp, #20
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	460b      	mov	r3, r1
 80088fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	887b      	ldrh	r3, [r7, #2]
 8008906:	4013      	ands	r3, r2
 8008908:	2b00      	cmp	r3, #0
 800890a:	d002      	beq.n	8008912 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800890c:	2301      	movs	r3, #1
 800890e:	73fb      	strb	r3, [r7, #15]
 8008910:	e001      	b.n	8008916 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008916:	7bfb      	ldrb	r3, [r7, #15]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3714      	adds	r7, #20
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	807b      	strh	r3, [r7, #2]
 8008930:	4613      	mov	r3, r2
 8008932:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008934:	787b      	ldrb	r3, [r7, #1]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d003      	beq.n	8008942 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800893a:	887a      	ldrh	r2, [r7, #2]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008940:	e003      	b.n	800894a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008942:	887b      	ldrh	r3, [r7, #2]
 8008944:	041a      	lsls	r2, r3, #16
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	619a      	str	r2, [r3, #24]
}
 800894a:	bf00      	nop
 800894c:	370c      	adds	r7, #12
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
	...

08008958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	4603      	mov	r3, r0
 8008960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008962:	4b08      	ldr	r3, [pc, #32]	; (8008984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008964:	695a      	ldr	r2, [r3, #20]
 8008966:	88fb      	ldrh	r3, [r7, #6]
 8008968:	4013      	ands	r3, r2
 800896a:	2b00      	cmp	r3, #0
 800896c:	d006      	beq.n	800897c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800896e:	4a05      	ldr	r2, [pc, #20]	; (8008984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008970:	88fb      	ldrh	r3, [r7, #6]
 8008972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008974:	88fb      	ldrh	r3, [r7, #6]
 8008976:	4618      	mov	r0, r3
 8008978:	f7fb ffd6 	bl	8004928 <HAL_GPIO_EXTI_Callback>
  }
}
 800897c:	bf00      	nop
 800897e:	3708      	adds	r7, #8
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	40013c00 	.word	0x40013c00

08008988 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008988:	b580      	push	{r7, lr}
 800898a:	b084      	sub	sp, #16
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d101      	bne.n	800899a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e11f      	b.n	8008bda <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d106      	bne.n	80089b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7fe f932 	bl	8006c18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2224      	movs	r2, #36	; 0x24
 80089b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	681a      	ldr	r2, [r3, #0]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0201 	bic.w	r2, r2, #1
 80089ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80089da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80089ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80089ec:	f002 fa90 	bl	800af10 <HAL_RCC_GetPCLK1Freq>
 80089f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	4a7b      	ldr	r2, [pc, #492]	; (8008be4 <HAL_I2C_Init+0x25c>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d807      	bhi.n	8008a0c <HAL_I2C_Init+0x84>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a7a      	ldr	r2, [pc, #488]	; (8008be8 <HAL_I2C_Init+0x260>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	bf94      	ite	ls
 8008a04:	2301      	movls	r3, #1
 8008a06:	2300      	movhi	r3, #0
 8008a08:	b2db      	uxtb	r3, r3
 8008a0a:	e006      	b.n	8008a1a <HAL_I2C_Init+0x92>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4a77      	ldr	r2, [pc, #476]	; (8008bec <HAL_I2C_Init+0x264>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	bf94      	ite	ls
 8008a14:	2301      	movls	r3, #1
 8008a16:	2300      	movhi	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e0db      	b.n	8008bda <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4a72      	ldr	r2, [pc, #456]	; (8008bf0 <HAL_I2C_Init+0x268>)
 8008a26:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2a:	0c9b      	lsrs	r3, r3, #18
 8008a2c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	4a64      	ldr	r2, [pc, #400]	; (8008be4 <HAL_I2C_Init+0x25c>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d802      	bhi.n	8008a5c <HAL_I2C_Init+0xd4>
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	3301      	adds	r3, #1
 8008a5a:	e009      	b.n	8008a70 <HAL_I2C_Init+0xe8>
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
 8008a66:	4a63      	ldr	r2, [pc, #396]	; (8008bf4 <HAL_I2C_Init+0x26c>)
 8008a68:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6c:	099b      	lsrs	r3, r3, #6
 8008a6e:	3301      	adds	r3, #1
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6812      	ldr	r2, [r2, #0]
 8008a74:	430b      	orrs	r3, r1
 8008a76:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69db      	ldr	r3, [r3, #28]
 8008a7e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008a82:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	4956      	ldr	r1, [pc, #344]	; (8008be4 <HAL_I2C_Init+0x25c>)
 8008a8c:	428b      	cmp	r3, r1
 8008a8e:	d80d      	bhi.n	8008aac <HAL_I2C_Init+0x124>
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	1e59      	subs	r1, r3, #1
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	bf38      	it	cc
 8008aa8:	2304      	movcc	r3, #4
 8008aaa:	e04f      	b.n	8008b4c <HAL_I2C_Init+0x1c4>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d111      	bne.n	8008ad8 <HAL_I2C_Init+0x150>
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	1e58      	subs	r0, r3, #1
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6859      	ldr	r1, [r3, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	005b      	lsls	r3, r3, #1
 8008ac0:	440b      	add	r3, r1
 8008ac2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	bf0c      	ite	eq
 8008ad0:	2301      	moveq	r3, #1
 8008ad2:	2300      	movne	r3, #0
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	e012      	b.n	8008afe <HAL_I2C_Init+0x176>
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	1e58      	subs	r0, r3, #1
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6859      	ldr	r1, [r3, #4]
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	0099      	lsls	r1, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8008aee:	3301      	adds	r3, #1
 8008af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	bf0c      	ite	eq
 8008af8:	2301      	moveq	r3, #1
 8008afa:	2300      	movne	r3, #0
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d001      	beq.n	8008b06 <HAL_I2C_Init+0x17e>
 8008b02:	2301      	movs	r3, #1
 8008b04:	e022      	b.n	8008b4c <HAL_I2C_Init+0x1c4>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10e      	bne.n	8008b2c <HAL_I2C_Init+0x1a4>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	1e58      	subs	r0, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6859      	ldr	r1, [r3, #4]
 8008b16:	460b      	mov	r3, r1
 8008b18:	005b      	lsls	r3, r3, #1
 8008b1a:	440b      	add	r3, r1
 8008b1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b20:	3301      	adds	r3, #1
 8008b22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b2a:	e00f      	b.n	8008b4c <HAL_I2C_Init+0x1c4>
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	1e58      	subs	r0, r3, #1
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6859      	ldr	r1, [r3, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	009b      	lsls	r3, r3, #2
 8008b38:	440b      	add	r3, r1
 8008b3a:	0099      	lsls	r1, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008b42:	3301      	adds	r3, #1
 8008b44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008b4c:	6879      	ldr	r1, [r7, #4]
 8008b4e:	6809      	ldr	r1, [r1, #0]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	69da      	ldr	r2, [r3, #28]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	431a      	orrs	r2, r3
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	689b      	ldr	r3, [r3, #8]
 8008b76:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008b7a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6911      	ldr	r1, [r2, #16]
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	68d2      	ldr	r2, [r2, #12]
 8008b86:	4311      	orrs	r1, r2
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6812      	ldr	r2, [r2, #0]
 8008b8c:	430b      	orrs	r3, r1
 8008b8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	695a      	ldr	r2, [r3, #20]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	431a      	orrs	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	430a      	orrs	r2, r1
 8008baa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f042 0201 	orr.w	r2, r2, #1
 8008bba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2220      	movs	r2, #32
 8008bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	000186a0 	.word	0x000186a0
 8008be8:	001e847f 	.word	0x001e847f
 8008bec:	003d08ff 	.word	0x003d08ff
 8008bf0:	431bde83 	.word	0x431bde83
 8008bf4:	10624dd3 	.word	0x10624dd3

08008bf8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af02      	add	r7, sp, #8
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	4608      	mov	r0, r1
 8008c02:	4611      	mov	r1, r2
 8008c04:	461a      	mov	r2, r3
 8008c06:	4603      	mov	r3, r0
 8008c08:	817b      	strh	r3, [r7, #10]
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	813b      	strh	r3, [r7, #8]
 8008c0e:	4613      	mov	r3, r2
 8008c10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008c12:	f7fe fc95 	bl	8007540 <HAL_GetTick>
 8008c16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	f040 80d9 	bne.w	8008dd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	2319      	movs	r3, #25
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	496d      	ldr	r1, [pc, #436]	; (8008de4 <HAL_I2C_Mem_Write+0x1ec>)
 8008c30:	68f8      	ldr	r0, [r7, #12]
 8008c32:	f000 fc7f 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008c3c:	2302      	movs	r3, #2
 8008c3e:	e0cc      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_I2C_Mem_Write+0x56>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e0c5      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b01      	cmp	r3, #1
 8008c62:	d007      	beq.n	8008c74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f042 0201 	orr.w	r2, r2, #1
 8008c72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008c82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2221      	movs	r2, #33	; 0x21
 8008c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2240      	movs	r2, #64	; 0x40
 8008c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	6a3a      	ldr	r2, [r7, #32]
 8008c9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008caa:	b29a      	uxth	r2, r3
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	4a4d      	ldr	r2, [pc, #308]	; (8008de8 <HAL_I2C_Mem_Write+0x1f0>)
 8008cb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008cb6:	88f8      	ldrh	r0, [r7, #6]
 8008cb8:	893a      	ldrh	r2, [r7, #8]
 8008cba:	8979      	ldrh	r1, [r7, #10]
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	9301      	str	r3, [sp, #4]
 8008cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc2:	9300      	str	r3, [sp, #0]
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	f000 fab6 	bl	8009238 <I2C_RequestMemoryWrite>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d052      	beq.n	8008d78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e081      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008cd6:	697a      	ldr	r2, [r7, #20]
 8008cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 fd00 	bl	80096e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d00d      	beq.n	8008d02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cea:	2b04      	cmp	r3, #4
 8008cec:	d107      	bne.n	8008cfe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e06b      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d06:	781a      	ldrb	r2, [r3, #0]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	695b      	ldr	r3, [r3, #20]
 8008d38:	f003 0304 	and.w	r3, r3, #4
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	d11b      	bne.n	8008d78 <HAL_I2C_Mem_Write+0x180>
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d017      	beq.n	8008d78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d4c:	781a      	ldrb	r2, [r3, #0]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d58:	1c5a      	adds	r2, r3, #1
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	3b01      	subs	r3, #1
 8008d72:	b29a      	uxth	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1aa      	bne.n	8008cd6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f000 fcec 	bl	8009762 <I2C_WaitOnBTFFlagUntilTimeout>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d00d      	beq.n	8008dac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d94:	2b04      	cmp	r3, #4
 8008d96:	d107      	bne.n	8008da8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008da6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e016      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2220      	movs	r2, #32
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e000      	b.n	8008dda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008dd8:	2302      	movs	r3, #2
  }
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	00100002 	.word	0x00100002
 8008de8:	ffff0000 	.word	0xffff0000

08008dec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b08c      	sub	sp, #48	; 0x30
 8008df0:	af02      	add	r7, sp, #8
 8008df2:	60f8      	str	r0, [r7, #12]
 8008df4:	4608      	mov	r0, r1
 8008df6:	4611      	mov	r1, r2
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	817b      	strh	r3, [r7, #10]
 8008dfe:	460b      	mov	r3, r1
 8008e00:	813b      	strh	r3, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e06:	f7fe fb9b 	bl	8007540 <HAL_GetTick>
 8008e0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b20      	cmp	r3, #32
 8008e16:	f040 8208 	bne.w	800922a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	9300      	str	r3, [sp, #0]
 8008e1e:	2319      	movs	r3, #25
 8008e20:	2201      	movs	r2, #1
 8008e22:	497b      	ldr	r1, [pc, #492]	; (8009010 <HAL_I2C_Mem_Read+0x224>)
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f000 fb85 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d001      	beq.n	8008e34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8008e30:	2302      	movs	r3, #2
 8008e32:	e1fb      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e3a:	2b01      	cmp	r3, #1
 8008e3c:	d101      	bne.n	8008e42 <HAL_I2C_Mem_Read+0x56>
 8008e3e:	2302      	movs	r3, #2
 8008e40:	e1f4      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	2201      	movs	r2, #1
 8008e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f003 0301 	and.w	r3, r3, #1
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d007      	beq.n	8008e68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0201 	orr.w	r2, r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2222      	movs	r2, #34	; 0x22
 8008e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2240      	movs	r2, #64	; 0x40
 8008e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008e92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8008e98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4a5b      	ldr	r2, [pc, #364]	; (8009014 <HAL_I2C_Mem_Read+0x228>)
 8008ea8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008eaa:	88f8      	ldrh	r0, [r7, #6]
 8008eac:	893a      	ldrh	r2, [r7, #8]
 8008eae:	8979      	ldrh	r1, [r7, #10]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb2:	9301      	str	r3, [sp, #4]
 8008eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eb6:	9300      	str	r3, [sp, #0]
 8008eb8:	4603      	mov	r3, r0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fa52 	bl	8009364 <I2C_RequestMemoryRead>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e1b0      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d113      	bne.n	8008efa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	623b      	str	r3, [r7, #32]
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	623b      	str	r3, [r7, #32]
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	699b      	ldr	r3, [r3, #24]
 8008ee4:	623b      	str	r3, [r7, #32]
 8008ee6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef6:	601a      	str	r2, [r3, #0]
 8008ef8:	e184      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008efe:	2b01      	cmp	r3, #1
 8008f00:	d11b      	bne.n	8008f3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f12:	2300      	movs	r3, #0
 8008f14:	61fb      	str	r3, [r7, #28]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	695b      	ldr	r3, [r3, #20]
 8008f1c:	61fb      	str	r3, [r7, #28]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	699b      	ldr	r3, [r3, #24]
 8008f24:	61fb      	str	r3, [r7, #28]
 8008f26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f36:	601a      	str	r2, [r3, #0]
 8008f38:	e164      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d11b      	bne.n	8008f7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f62:	2300      	movs	r3, #0
 8008f64:	61bb      	str	r3, [r7, #24]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	61bb      	str	r3, [r7, #24]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	e144      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	695b      	ldr	r3, [r3, #20]
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008f90:	e138      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	f200 80f1 	bhi.w	800917e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d123      	bne.n	8008fec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fa6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 fc1b 	bl	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e139      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691a      	ldr	r2, [r3, #16]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fd4:	3b01      	subs	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	3b01      	subs	r3, #1
 8008fe4:	b29a      	uxth	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fea:	e10b      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ff0:	2b02      	cmp	r3, #2
 8008ff2:	d14e      	bne.n	8009092 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	4906      	ldr	r1, [pc, #24]	; (8009018 <HAL_I2C_Mem_Read+0x22c>)
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f000 fa98 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 8009004:	4603      	mov	r3, r0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d008      	beq.n	800901c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e10e      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
 800900e:	bf00      	nop
 8009010:	00100002 	.word	0x00100002
 8009014:	ffff0000 	.word	0xffff0000
 8009018:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800902a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	b2d2      	uxtb	r2, r2
 8009038:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903e:	1c5a      	adds	r2, r3, #1
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009048:	3b01      	subs	r3, #1
 800904a:	b29a      	uxth	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009054:	b29b      	uxth	r3, r3
 8009056:	3b01      	subs	r3, #1
 8009058:	b29a      	uxth	r2, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	b2d2      	uxtb	r2, r2
 800906a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800907a:	3b01      	subs	r3, #1
 800907c:	b29a      	uxth	r2, r3
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009086:	b29b      	uxth	r3, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	b29a      	uxth	r2, r3
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009090:	e0b8      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009094:	9300      	str	r3, [sp, #0]
 8009096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009098:	2200      	movs	r2, #0
 800909a:	4966      	ldr	r1, [pc, #408]	; (8009234 <HAL_I2C_Mem_Read+0x448>)
 800909c:	68f8      	ldr	r0, [r7, #12]
 800909e:	f000 fa49 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e0bf      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	691a      	ldr	r2, [r3, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c6:	b2d2      	uxtb	r2, r2
 80090c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090ce:	1c5a      	adds	r2, r3, #1
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	3b01      	subs	r3, #1
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	2200      	movs	r2, #0
 80090f6:	494f      	ldr	r1, [pc, #316]	; (8009234 <HAL_I2C_Mem_Read+0x448>)
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 fa1b 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e091      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009116:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	691a      	ldr	r2, [r3, #16]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	1c5a      	adds	r2, r3, #1
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009134:	3b01      	subs	r3, #1
 8009136:	b29a      	uxth	r2, r3
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009140:	b29b      	uxth	r3, r3
 8009142:	3b01      	subs	r3, #1
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009154:	b2d2      	uxtb	r2, r2
 8009156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009166:	3b01      	subs	r3, #1
 8009168:	b29a      	uxth	r2, r3
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800917c:	e042      	b.n	8009204 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800917e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009180:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009182:	68f8      	ldr	r0, [r7, #12]
 8009184:	f000 fb2e 	bl	80097e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800918e:	2301      	movs	r3, #1
 8009190:	e04c      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	691a      	ldr	r2, [r3, #16]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	b2d2      	uxtb	r2, r2
 800919e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a4:	1c5a      	adds	r2, r3, #1
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ae:	3b01      	subs	r3, #1
 80091b0:	b29a      	uxth	r2, r3
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	3b01      	subs	r3, #1
 80091be:	b29a      	uxth	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	f003 0304 	and.w	r3, r3, #4
 80091ce:	2b04      	cmp	r3, #4
 80091d0:	d118      	bne.n	8009204 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	691a      	ldr	r2, [r3, #16]
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091dc:	b2d2      	uxtb	r2, r2
 80091de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e4:	1c5a      	adds	r2, r3, #1
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091ee:	3b01      	subs	r3, #1
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009208:	2b00      	cmp	r3, #0
 800920a:	f47f aec2 	bne.w	8008f92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2220      	movs	r2, #32
 8009212:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e000      	b.n	800922c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800922a:	2302      	movs	r3, #2
  }
}
 800922c:	4618      	mov	r0, r3
 800922e:	3728      	adds	r7, #40	; 0x28
 8009230:	46bd      	mov	sp, r7
 8009232:	bd80      	pop	{r7, pc}
 8009234:	00010004 	.word	0x00010004

08009238 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af02      	add	r7, sp, #8
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	4608      	mov	r0, r1
 8009242:	4611      	mov	r1, r2
 8009244:	461a      	mov	r2, r3
 8009246:	4603      	mov	r3, r0
 8009248:	817b      	strh	r3, [r7, #10]
 800924a:	460b      	mov	r3, r1
 800924c:	813b      	strh	r3, [r7, #8]
 800924e:	4613      	mov	r3, r2
 8009250:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009264:	9300      	str	r3, [sp, #0]
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	2200      	movs	r2, #0
 800926a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f000 f960 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00d      	beq.n	8009296 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009288:	d103      	bne.n	8009292 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e05f      	b.n	8009356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009296:	897b      	ldrh	r3, [r7, #10]
 8009298:	b2db      	uxtb	r3, r3
 800929a:	461a      	mov	r2, r3
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80092a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80092a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a8:	6a3a      	ldr	r2, [r7, #32]
 80092aa:	492d      	ldr	r1, [pc, #180]	; (8009360 <I2C_RequestMemoryWrite+0x128>)
 80092ac:	68f8      	ldr	r0, [r7, #12]
 80092ae:	f000 f998 	bl	80095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80092b2:	4603      	mov	r3, r0
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e04c      	b.n	8009356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092bc:	2300      	movs	r3, #0
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	699b      	ldr	r3, [r3, #24]
 80092ce:	617b      	str	r3, [r7, #20]
 80092d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80092d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d4:	6a39      	ldr	r1, [r7, #32]
 80092d6:	68f8      	ldr	r0, [r7, #12]
 80092d8:	f000 fa02 	bl	80096e0 <I2C_WaitOnTXEFlagUntilTimeout>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d00d      	beq.n	80092fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	2b04      	cmp	r3, #4
 80092e8:	d107      	bne.n	80092fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e02b      	b.n	8009356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80092fe:	88fb      	ldrh	r3, [r7, #6]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d105      	bne.n	8009310 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009304:	893b      	ldrh	r3, [r7, #8]
 8009306:	b2da      	uxtb	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	611a      	str	r2, [r3, #16]
 800930e:	e021      	b.n	8009354 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009310:	893b      	ldrh	r3, [r7, #8]
 8009312:	0a1b      	lsrs	r3, r3, #8
 8009314:	b29b      	uxth	r3, r3
 8009316:	b2da      	uxtb	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800931e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009320:	6a39      	ldr	r1, [r7, #32]
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	f000 f9dc 	bl	80096e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009328:	4603      	mov	r3, r0
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00d      	beq.n	800934a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009332:	2b04      	cmp	r3, #4
 8009334:	d107      	bne.n	8009346 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009346:	2301      	movs	r3, #1
 8009348:	e005      	b.n	8009356 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800934a:	893b      	ldrh	r3, [r7, #8]
 800934c:	b2da      	uxtb	r2, r3
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	00010002 	.word	0x00010002

08009364 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b088      	sub	sp, #32
 8009368:	af02      	add	r7, sp, #8
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	461a      	mov	r2, r3
 8009372:	4603      	mov	r3, r0
 8009374:	817b      	strh	r3, [r7, #10]
 8009376:	460b      	mov	r3, r1
 8009378:	813b      	strh	r3, [r7, #8]
 800937a:	4613      	mov	r3, r2
 800937c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	681a      	ldr	r2, [r3, #0]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800938c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	681a      	ldr	r2, [r3, #0]
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800939c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800939e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	6a3b      	ldr	r3, [r7, #32]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f000 f8c2 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00d      	beq.n	80093d2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093c4:	d103      	bne.n	80093ce <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80093ce:	2303      	movs	r3, #3
 80093d0:	e0aa      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80093d2:	897b      	ldrh	r3, [r7, #10]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	461a      	mov	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80093e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	6a3a      	ldr	r2, [r7, #32]
 80093e6:	4952      	ldr	r1, [pc, #328]	; (8009530 <I2C_RequestMemoryRead+0x1cc>)
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	f000 f8fa 	bl	80095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d001      	beq.n	80093f8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	e097      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	617b      	str	r3, [r7, #20]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	617b      	str	r3, [r7, #20]
 800940c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800940e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009410:	6a39      	ldr	r1, [r7, #32]
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 f964 	bl	80096e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00d      	beq.n	800943a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009422:	2b04      	cmp	r3, #4
 8009424:	d107      	bne.n	8009436 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009434:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e076      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800943a:	88fb      	ldrh	r3, [r7, #6]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d105      	bne.n	800944c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009440:	893b      	ldrh	r3, [r7, #8]
 8009442:	b2da      	uxtb	r2, r3
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	611a      	str	r2, [r3, #16]
 800944a:	e021      	b.n	8009490 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800944c:	893b      	ldrh	r3, [r7, #8]
 800944e:	0a1b      	lsrs	r3, r3, #8
 8009450:	b29b      	uxth	r3, r3
 8009452:	b2da      	uxtb	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800945a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800945c:	6a39      	ldr	r1, [r7, #32]
 800945e:	68f8      	ldr	r0, [r7, #12]
 8009460:	f000 f93e 	bl	80096e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009464:	4603      	mov	r3, r0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00d      	beq.n	8009486 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800946e:	2b04      	cmp	r3, #4
 8009470:	d107      	bne.n	8009482 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009480:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	e050      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009486:	893b      	ldrh	r3, [r7, #8]
 8009488:	b2da      	uxtb	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009492:	6a39      	ldr	r1, [r7, #32]
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	f000 f923 	bl	80096e0 <I2C_WaitOnTXEFlagUntilTimeout>
 800949a:	4603      	mov	r3, r0
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00d      	beq.n	80094bc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d107      	bne.n	80094b8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681a      	ldr	r2, [r3, #0]
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094b6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e035      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094ca:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	2200      	movs	r2, #0
 80094d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094d8:	68f8      	ldr	r0, [r7, #12]
 80094da:	f000 f82b 	bl	8009534 <I2C_WaitOnFlagUntilTimeout>
 80094de:	4603      	mov	r3, r0
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00d      	beq.n	8009500 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094f2:	d103      	bne.n	80094fc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80094fc:	2303      	movs	r3, #3
 80094fe:	e013      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009500:	897b      	ldrh	r3, [r7, #10]
 8009502:	b2db      	uxtb	r3, r3
 8009504:	f043 0301 	orr.w	r3, r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009512:	6a3a      	ldr	r2, [r7, #32]
 8009514:	4906      	ldr	r1, [pc, #24]	; (8009530 <I2C_RequestMemoryRead+0x1cc>)
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f000 f863 	bl	80095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e000      	b.n	8009528 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	00010002 	.word	0x00010002

08009534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b084      	sub	sp, #16
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	603b      	str	r3, [r7, #0]
 8009540:	4613      	mov	r3, r2
 8009542:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009544:	e025      	b.n	8009592 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954c:	d021      	beq.n	8009592 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800954e:	f7fd fff7 	bl	8007540 <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	683a      	ldr	r2, [r7, #0]
 800955a:	429a      	cmp	r2, r3
 800955c:	d302      	bcc.n	8009564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d116      	bne.n	8009592 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2220      	movs	r2, #32
 800956e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2200      	movs	r2, #0
 8009576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	f043 0220 	orr.w	r2, r3, #32
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e023      	b.n	80095da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	0c1b      	lsrs	r3, r3, #16
 8009596:	b2db      	uxtb	r3, r3
 8009598:	2b01      	cmp	r3, #1
 800959a:	d10d      	bne.n	80095b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	43da      	mvns	r2, r3
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	4013      	ands	r3, r2
 80095a8:	b29b      	uxth	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	bf0c      	ite	eq
 80095ae:	2301      	moveq	r3, #1
 80095b0:	2300      	movne	r3, #0
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	e00c      	b.n	80095d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	43da      	mvns	r2, r3
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4013      	ands	r3, r2
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	bf0c      	ite	eq
 80095ca:	2301      	moveq	r3, #1
 80095cc:	2300      	movne	r3, #0
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	461a      	mov	r2, r3
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d0b6      	beq.n	8009546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b084      	sub	sp, #16
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	60b9      	str	r1, [r7, #8]
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80095f0:	e051      	b.n	8009696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009600:	d123      	bne.n	800964a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009610:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800961a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2220      	movs	r2, #32
 8009626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009636:	f043 0204 	orr.w	r2, r3, #4
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	2200      	movs	r2, #0
 8009642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	e046      	b.n	80096d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009650:	d021      	beq.n	8009696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009652:	f7fd ff75 	bl	8007540 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	429a      	cmp	r2, r3
 8009660:	d302      	bcc.n	8009668 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d116      	bne.n	8009696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2220      	movs	r2, #32
 8009672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	2200      	movs	r2, #0
 800967a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f043 0220 	orr.w	r2, r3, #32
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2200      	movs	r2, #0
 800968e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e020      	b.n	80096d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	0c1b      	lsrs	r3, r3, #16
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b01      	cmp	r3, #1
 800969e:	d10c      	bne.n	80096ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	43da      	mvns	r2, r3
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	4013      	ands	r3, r2
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	bf14      	ite	ne
 80096b2:	2301      	movne	r3, #1
 80096b4:	2300      	moveq	r3, #0
 80096b6:	b2db      	uxtb	r3, r3
 80096b8:	e00b      	b.n	80096d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	699b      	ldr	r3, [r3, #24]
 80096c0:	43da      	mvns	r2, r3
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	4013      	ands	r3, r2
 80096c6:	b29b      	uxth	r3, r3
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	bf14      	ite	ne
 80096cc:	2301      	movne	r3, #1
 80096ce:	2300      	moveq	r3, #0
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d18d      	bne.n	80095f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80096ec:	e02d      	b.n	800974a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f000 f8ce 	bl	8009890 <I2C_IsAcknowledgeFailed>
 80096f4:	4603      	mov	r3, r0
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d001      	beq.n	80096fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	e02d      	b.n	800975a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009704:	d021      	beq.n	800974a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009706:	f7fd ff1b 	bl	8007540 <HAL_GetTick>
 800970a:	4602      	mov	r2, r0
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	1ad3      	subs	r3, r2, r3
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	429a      	cmp	r2, r3
 8009714:	d302      	bcc.n	800971c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d116      	bne.n	800974a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2220      	movs	r2, #32
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009736:	f043 0220 	orr.w	r2, r3, #32
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e007      	b.n	800975a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	695b      	ldr	r3, [r3, #20]
 8009750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009754:	2b80      	cmp	r3, #128	; 0x80
 8009756:	d1ca      	bne.n	80096ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b084      	sub	sp, #16
 8009766:	af00      	add	r7, sp, #0
 8009768:	60f8      	str	r0, [r7, #12]
 800976a:	60b9      	str	r1, [r7, #8]
 800976c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800976e:	e02d      	b.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f000 f88d 	bl	8009890 <I2C_IsAcknowledgeFailed>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e02d      	b.n	80097dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009786:	d021      	beq.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009788:	f7fd feda 	bl	8007540 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	429a      	cmp	r2, r3
 8009796:	d302      	bcc.n	800979e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d116      	bne.n	80097cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	2200      	movs	r2, #0
 80097a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	2220      	movs	r2, #32
 80097a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	f043 0220 	orr.w	r2, r3, #32
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80097c8:	2301      	movs	r3, #1
 80097ca:	e007      	b.n	80097dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	695b      	ldr	r3, [r3, #20]
 80097d2:	f003 0304 	and.w	r3, r3, #4
 80097d6:	2b04      	cmp	r3, #4
 80097d8:	d1ca      	bne.n	8009770 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80097f0:	e042      	b.n	8009878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	695b      	ldr	r3, [r3, #20]
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b10      	cmp	r3, #16
 80097fe:	d119      	bne.n	8009834 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f06f 0210 	mvn.w	r2, #16
 8009808:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009830:	2301      	movs	r3, #1
 8009832:	e029      	b.n	8009888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009834:	f7fd fe84 	bl	8007540 <HAL_GetTick>
 8009838:	4602      	mov	r2, r0
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	68ba      	ldr	r2, [r7, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	d302      	bcc.n	800984a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d116      	bne.n	8009878 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	2220      	movs	r2, #32
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009864:	f043 0220 	orr.w	r2, r3, #32
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e007      	b.n	8009888 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009882:	2b40      	cmp	r3, #64	; 0x40
 8009884:	d1b5      	bne.n	80097f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098a6:	d11b      	bne.n	80098e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80098b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2220      	movs	r2, #32
 80098bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2200      	movs	r2, #0
 80098c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098cc:	f043 0204 	orr.w	r2, r3, #4
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e000      	b.n	80098e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80098ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098f0:	b08f      	sub	sp, #60	; 0x3c
 80098f2:	af0a      	add	r7, sp, #40	; 0x28
 80098f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d101      	bne.n	8009900 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	e116      	b.n	8009b2e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800990c:	b2db      	uxtb	r3, r3
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2200      	movs	r2, #0
 8009916:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f00a fab0 	bl	8013e80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2203      	movs	r2, #3
 8009924:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009930:	2b00      	cmp	r3, #0
 8009932:	d102      	bne.n	800993a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2200      	movs	r2, #0
 8009938:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4618      	mov	r0, r3
 8009940:	f004 fa09 	bl	800dd56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	603b      	str	r3, [r7, #0]
 800994a:	687e      	ldr	r6, [r7, #4]
 800994c:	466d      	mov	r5, sp
 800994e:	f106 0410 	add.w	r4, r6, #16
 8009952:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009954:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009956:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009958:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800995a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800995e:	e885 0003 	stmia.w	r5, {r0, r1}
 8009962:	1d33      	adds	r3, r6, #4
 8009964:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009966:	6838      	ldr	r0, [r7, #0]
 8009968:	f004 f8e0 	bl	800db2c <USB_CoreInit>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d005      	beq.n	800997e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2202      	movs	r2, #2
 8009976:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e0d7      	b.n	8009b2e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2100      	movs	r1, #0
 8009984:	4618      	mov	r0, r3
 8009986:	f004 f9f7 	bl	800dd78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800998a:	2300      	movs	r3, #0
 800998c:	73fb      	strb	r3, [r7, #15]
 800998e:	e04a      	b.n	8009a26 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009990:	7bfa      	ldrb	r2, [r7, #15]
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	4613      	mov	r3, r2
 8009996:	00db      	lsls	r3, r3, #3
 8009998:	1a9b      	subs	r3, r3, r2
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	440b      	add	r3, r1
 800999e:	333d      	adds	r3, #61	; 0x3d
 80099a0:	2201      	movs	r2, #1
 80099a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80099a4:	7bfa      	ldrb	r2, [r7, #15]
 80099a6:	6879      	ldr	r1, [r7, #4]
 80099a8:	4613      	mov	r3, r2
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	1a9b      	subs	r3, r3, r2
 80099ae:	009b      	lsls	r3, r3, #2
 80099b0:	440b      	add	r3, r1
 80099b2:	333c      	adds	r3, #60	; 0x3c
 80099b4:	7bfa      	ldrb	r2, [r7, #15]
 80099b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80099b8:	7bfa      	ldrb	r2, [r7, #15]
 80099ba:	7bfb      	ldrb	r3, [r7, #15]
 80099bc:	b298      	uxth	r0, r3
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	00db      	lsls	r3, r3, #3
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	3342      	adds	r3, #66	; 0x42
 80099cc:	4602      	mov	r2, r0
 80099ce:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80099d0:	7bfa      	ldrb	r2, [r7, #15]
 80099d2:	6879      	ldr	r1, [r7, #4]
 80099d4:	4613      	mov	r3, r2
 80099d6:	00db      	lsls	r3, r3, #3
 80099d8:	1a9b      	subs	r3, r3, r2
 80099da:	009b      	lsls	r3, r3, #2
 80099dc:	440b      	add	r3, r1
 80099de:	333f      	adds	r3, #63	; 0x3f
 80099e0:	2200      	movs	r2, #0
 80099e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80099e4:	7bfa      	ldrb	r2, [r7, #15]
 80099e6:	6879      	ldr	r1, [r7, #4]
 80099e8:	4613      	mov	r3, r2
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	440b      	add	r3, r1
 80099f2:	3344      	adds	r3, #68	; 0x44
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80099f8:	7bfa      	ldrb	r2, [r7, #15]
 80099fa:	6879      	ldr	r1, [r7, #4]
 80099fc:	4613      	mov	r3, r2
 80099fe:	00db      	lsls	r3, r3, #3
 8009a00:	1a9b      	subs	r3, r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	3348      	adds	r3, #72	; 0x48
 8009a08:	2200      	movs	r2, #0
 8009a0a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009a0c:	7bfa      	ldrb	r2, [r7, #15]
 8009a0e:	6879      	ldr	r1, [r7, #4]
 8009a10:	4613      	mov	r3, r2
 8009a12:	00db      	lsls	r3, r3, #3
 8009a14:	1a9b      	subs	r3, r3, r2
 8009a16:	009b      	lsls	r3, r3, #2
 8009a18:	440b      	add	r3, r1
 8009a1a:	3350      	adds	r3, #80	; 0x50
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	3301      	adds	r3, #1
 8009a24:	73fb      	strb	r3, [r7, #15]
 8009a26:	7bfa      	ldrb	r2, [r7, #15]
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d3af      	bcc.n	8009990 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]
 8009a34:	e044      	b.n	8009ac0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009a36:	7bfa      	ldrb	r2, [r7, #15]
 8009a38:	6879      	ldr	r1, [r7, #4]
 8009a3a:	4613      	mov	r3, r2
 8009a3c:	00db      	lsls	r3, r3, #3
 8009a3e:	1a9b      	subs	r3, r3, r2
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	440b      	add	r3, r1
 8009a44:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8009a48:	2200      	movs	r2, #0
 8009a4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009a4c:	7bfa      	ldrb	r2, [r7, #15]
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4613      	mov	r3, r2
 8009a52:	00db      	lsls	r3, r3, #3
 8009a54:	1a9b      	subs	r3, r3, r2
 8009a56:	009b      	lsls	r3, r3, #2
 8009a58:	440b      	add	r3, r1
 8009a5a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8009a5e:	7bfa      	ldrb	r2, [r7, #15]
 8009a60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009a62:	7bfa      	ldrb	r2, [r7, #15]
 8009a64:	6879      	ldr	r1, [r7, #4]
 8009a66:	4613      	mov	r3, r2
 8009a68:	00db      	lsls	r3, r3, #3
 8009a6a:	1a9b      	subs	r3, r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	440b      	add	r3, r1
 8009a70:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009a78:	7bfa      	ldrb	r2, [r7, #15]
 8009a7a:	6879      	ldr	r1, [r7, #4]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	00db      	lsls	r3, r3, #3
 8009a80:	1a9b      	subs	r3, r3, r2
 8009a82:	009b      	lsls	r3, r3, #2
 8009a84:	440b      	add	r3, r1
 8009a86:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a8e:	7bfa      	ldrb	r2, [r7, #15]
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	1a9b      	subs	r3, r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009aa4:	7bfa      	ldrb	r2, [r7, #15]
 8009aa6:	6879      	ldr	r1, [r7, #4]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	00db      	lsls	r3, r3, #3
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	440b      	add	r3, r1
 8009ab2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009aba:	7bfb      	ldrb	r3, [r7, #15]
 8009abc:	3301      	adds	r3, #1
 8009abe:	73fb      	strb	r3, [r7, #15]
 8009ac0:	7bfa      	ldrb	r2, [r7, #15]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	429a      	cmp	r2, r3
 8009ac8:	d3b5      	bcc.n	8009a36 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	687e      	ldr	r6, [r7, #4]
 8009ad2:	466d      	mov	r5, sp
 8009ad4:	f106 0410 	add.w	r4, r6, #16
 8009ad8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ada:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009adc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009ade:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009ae0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009ae4:	e885 0003 	stmia.w	r5, {r0, r1}
 8009ae8:	1d33      	adds	r3, r6, #4
 8009aea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009aec:	6838      	ldr	r0, [r7, #0]
 8009aee:	f004 f96d 	bl	800ddcc <USB_DevInit>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2202      	movs	r2, #2
 8009afc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	e014      	b.n	8009b2e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d102      	bne.n	8009b22 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f001 f891 	bl	800ac44 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4618      	mov	r0, r3
 8009b28:	f005 f9a8 	bl	800ee7c <USB_DevDisconnect>

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b36 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d101      	bne.n	8009b52 <HAL_PCD_Start+0x1c>
 8009b4e:	2302      	movs	r3, #2
 8009b50:	e020      	b.n	8009b94 <HAL_PCD_Start+0x5e>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d109      	bne.n	8009b76 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d005      	beq.n	8009b76 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f004 f8da 	bl	800dd34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4618      	mov	r0, r3
 8009b86:	f005 f958 	bl	800ee3a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009b92:	2300      	movs	r3, #0
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	3710      	adds	r7, #16
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bd80      	pop	{r7, pc}

08009b9c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009b9c:	b590      	push	{r4, r7, lr}
 8009b9e:	b08d      	sub	sp, #52	; 0x34
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f005 fa16 	bl	800efe4 <USB_GetMode>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f040 83ca 	bne.w	800a354 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f005 f97a 	bl	800eebe <USB_ReadInterrupts>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 83c0 	beq.w	800a352 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f005 f971 	bl	800eebe <USB_ReadInterrupts>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	f003 0302 	and.w	r3, r3, #2
 8009be2:	2b02      	cmp	r3, #2
 8009be4:	d107      	bne.n	8009bf6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	695a      	ldr	r2, [r3, #20]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f002 0202 	and.w	r2, r2, #2
 8009bf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f005 f95f 	bl	800eebe <USB_ReadInterrupts>
 8009c00:	4603      	mov	r3, r0
 8009c02:	f003 0310 	and.w	r3, r3, #16
 8009c06:	2b10      	cmp	r3, #16
 8009c08:	d161      	bne.n	8009cce <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	699a      	ldr	r2, [r3, #24]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f022 0210 	bic.w	r2, r2, #16
 8009c18:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009c20:	69bb      	ldr	r3, [r7, #24]
 8009c22:	f003 020f 	and.w	r2, r3, #15
 8009c26:	4613      	mov	r3, r2
 8009c28:	00db      	lsls	r3, r3, #3
 8009c2a:	1a9b      	subs	r3, r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4413      	add	r3, r2
 8009c36:	3304      	adds	r3, #4
 8009c38:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009c3a:	69bb      	ldr	r3, [r7, #24]
 8009c3c:	0c5b      	lsrs	r3, r3, #17
 8009c3e:	f003 030f 	and.w	r3, r3, #15
 8009c42:	2b02      	cmp	r3, #2
 8009c44:	d124      	bne.n	8009c90 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009c46:	69ba      	ldr	r2, [r7, #24]
 8009c48:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009c4c:	4013      	ands	r3, r2
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d035      	beq.n	8009cbe <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	091b      	lsrs	r3, r3, #4
 8009c5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009c5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	461a      	mov	r2, r3
 8009c64:	6a38      	ldr	r0, [r7, #32]
 8009c66:	f004 ffc5 	bl	800ebf4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	68da      	ldr	r2, [r3, #12]
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	091b      	lsrs	r3, r3, #4
 8009c72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c76:	441a      	add	r2, r3
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	699a      	ldr	r2, [r3, #24]
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	091b      	lsrs	r3, r3, #4
 8009c84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c88:	441a      	add	r2, r3
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	619a      	str	r2, [r3, #24]
 8009c8e:	e016      	b.n	8009cbe <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	0c5b      	lsrs	r3, r3, #17
 8009c94:	f003 030f 	and.w	r3, r3, #15
 8009c98:	2b06      	cmp	r3, #6
 8009c9a:	d110      	bne.n	8009cbe <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ca2:	2208      	movs	r2, #8
 8009ca4:	4619      	mov	r1, r3
 8009ca6:	6a38      	ldr	r0, [r7, #32]
 8009ca8:	f004 ffa4 	bl	800ebf4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009cac:	697b      	ldr	r3, [r7, #20]
 8009cae:	699a      	ldr	r2, [r3, #24]
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	091b      	lsrs	r3, r3, #4
 8009cb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009cb8:	441a      	add	r2, r3
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	699a      	ldr	r2, [r3, #24]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f042 0210 	orr.w	r2, r2, #16
 8009ccc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f005 f8f3 	bl	800eebe <USB_ReadInterrupts>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cde:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ce2:	d16e      	bne.n	8009dc2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	4618      	mov	r0, r3
 8009cee:	f005 f8f9 	bl	800eee4 <USB_ReadDevAllOutEpInterrupt>
 8009cf2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009cf4:	e062      	b.n	8009dbc <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d057      	beq.n	8009db0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f005 f91e 	bl	800ef4c <USB_ReadDevOutEPInterrupt>
 8009d10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	f003 0301 	and.w	r3, r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00c      	beq.n	8009d36 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d28:	461a      	mov	r2, r3
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009d2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f000 fddd 	bl	800a8f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	f003 0308 	and.w	r3, r3, #8
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00c      	beq.n	8009d5a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	015a      	lsls	r2, r3, #5
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	4413      	add	r3, r2
 8009d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d4c:	461a      	mov	r2, r3
 8009d4e:	2308      	movs	r3, #8
 8009d50:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009d52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fed7 	bl	800ab08 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f003 0310 	and.w	r3, r3, #16
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d008      	beq.n	8009d76 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d70:	461a      	mov	r2, r3
 8009d72:	2310      	movs	r3, #16
 8009d74:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	f003 0320 	and.w	r3, r3, #32
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d008      	beq.n	8009d92 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	2320      	movs	r3, #32
 8009d90:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	461a      	mov	r2, r3
 8009daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009dae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	3301      	adds	r3, #1
 8009db4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db8:	085b      	lsrs	r3, r3, #1
 8009dba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d199      	bne.n	8009cf6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f005 f879 	bl	800eebe <USB_ReadInterrupts>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009dd2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009dd6:	f040 80c0 	bne.w	8009f5a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f005 f89a 	bl	800ef18 <USB_ReadDevAllInEpInterrupt>
 8009de4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009dea:	e0b2      	b.n	8009f52 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dee:	f003 0301 	and.w	r3, r3, #1
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80a7 	beq.w	8009f46 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f005 f8c0 	bl	800ef88 <USB_ReadDevInEPInterrupt>
 8009e08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d057      	beq.n	8009ec4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	f003 030f 	and.w	r3, r3, #15
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009e22:	69fb      	ldr	r3, [r7, #28]
 8009e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	43db      	mvns	r3, r3
 8009e2e:	69f9      	ldr	r1, [r7, #28]
 8009e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e34:	4013      	ands	r3, r2
 8009e36:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3a:	015a      	lsls	r2, r3, #5
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	4413      	add	r3, r2
 8009e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e44:	461a      	mov	r2, r3
 8009e46:	2301      	movs	r3, #1
 8009e48:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	2b01      	cmp	r3, #1
 8009e50:	d132      	bne.n	8009eb8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009e52:	6879      	ldr	r1, [r7, #4]
 8009e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e56:	4613      	mov	r3, r2
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	1a9b      	subs	r3, r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	3348      	adds	r3, #72	; 0x48
 8009e62:	6819      	ldr	r1, [r3, #0]
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e68:	4613      	mov	r3, r2
 8009e6a:	00db      	lsls	r3, r3, #3
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	4403      	add	r3, r0
 8009e72:	3344      	adds	r3, #68	; 0x44
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4419      	add	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	00db      	lsls	r3, r3, #3
 8009e80:	1a9b      	subs	r3, r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4403      	add	r3, r0
 8009e86:	3348      	adds	r3, #72	; 0x48
 8009e88:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d113      	bne.n	8009eb8 <HAL_PCD_IRQHandler+0x31c>
 8009e90:	6879      	ldr	r1, [r7, #4]
 8009e92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e94:	4613      	mov	r3, r2
 8009e96:	00db      	lsls	r3, r3, #3
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	3350      	adds	r3, #80	; 0x50
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d108      	bne.n	8009eb8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6818      	ldr	r0, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009eb0:	461a      	mov	r2, r3
 8009eb2:	2101      	movs	r1, #1
 8009eb4:	f005 f8c8 	bl	800f048 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	b2db      	uxtb	r3, r3
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f00a f85f 	bl	8013f82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	f003 0308 	and.w	r3, r3, #8
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d008      	beq.n	8009ee0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed0:	015a      	lsls	r2, r3, #5
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009eda:	461a      	mov	r2, r3
 8009edc:	2308      	movs	r3, #8
 8009ede:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f003 0310 	and.w	r3, r3, #16
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d008      	beq.n	8009efc <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ef6:	461a      	mov	r2, r3
 8009ef8:	2310      	movs	r3, #16
 8009efa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d008      	beq.n	8009f18 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f12:	461a      	mov	r2, r3
 8009f14:	2340      	movs	r3, #64	; 0x40
 8009f16:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009f18:	693b      	ldr	r3, [r7, #16]
 8009f1a:	f003 0302 	and.w	r3, r3, #2
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d008      	beq.n	8009f34 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2e:	461a      	mov	r2, r3
 8009f30:	2302      	movs	r3, #2
 8009f32:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009f3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f000 fc48 	bl	800a7d6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f48:	3301      	adds	r3, #1
 8009f4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f4e:	085b      	lsrs	r3, r3, #1
 8009f50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f47f af49 	bne.w	8009dec <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f004 ffad 	bl	800eebe <USB_ReadInterrupts>
 8009f64:	4603      	mov	r3, r0
 8009f66:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f6e:	d122      	bne.n	8009fb6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009f70:	69fb      	ldr	r3, [r7, #28]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	69fa      	ldr	r2, [r7, #28]
 8009f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f7e:	f023 0301 	bic.w	r3, r3, #1
 8009f82:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d108      	bne.n	8009fa0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2200      	movs	r2, #0
 8009f92:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f96:	2100      	movs	r1, #0
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f00a fa41 	bl	8014420 <HAL_PCDEx_LPM_Callback>
 8009f9e:	e002      	b.n	8009fa6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	f00a f865 	bl	8014070 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	695a      	ldr	r2, [r3, #20]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009fb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f004 ff7f 	bl	800eebe <USB_ReadInterrupts>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009fca:	d112      	bne.n	8009ff2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd2:	689b      	ldr	r3, [r3, #8]
 8009fd4:	f003 0301 	and.w	r3, r3, #1
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d102      	bne.n	8009fe2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f00a f821 	bl	8014024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	695a      	ldr	r2, [r3, #20]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009ff0:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f004 ff61 	bl	800eebe <USB_ReadInterrupts>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a002:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a006:	d121      	bne.n	800a04c <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	695a      	ldr	r2, [r3, #20]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a016:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d111      	bne.n	800a046 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a030:	089b      	lsrs	r3, r3, #2
 800a032:	f003 020f 	and.w	r2, r3, #15
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a03c:	2101      	movs	r1, #1
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f00a f9ee 	bl	8014420 <HAL_PCDEx_LPM_Callback>
 800a044:	e002      	b.n	800a04c <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f009 ffec 	bl	8014024 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4618      	mov	r0, r3
 800a052:	f004 ff34 	bl	800eebe <USB_ReadInterrupts>
 800a056:	4603      	mov	r3, r0
 800a058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a05c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a060:	f040 80c7 	bne.w	800a1f2 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	69fa      	ldr	r2, [r7, #28]
 800a06e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a072:	f023 0301 	bic.w	r3, r3, #1
 800a076:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	2110      	movs	r1, #16
 800a07e:	4618      	mov	r0, r3
 800a080:	f004 f802 	bl	800e088 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a084:	2300      	movs	r3, #0
 800a086:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a088:	e056      	b.n	800a138 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a096:	461a      	mov	r2, r3
 800a098:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a09c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a0:	015a      	lsls	r2, r3, #5
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ae:	0151      	lsls	r1, r2, #5
 800a0b0:	69fa      	ldr	r2, [r7, #28]
 800a0b2:	440a      	add	r2, r1
 800a0b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0bc:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0ce:	0151      	lsls	r1, r2, #5
 800a0d0:	69fa      	ldr	r2, [r7, #28]
 800a0d2:	440a      	add	r2, r1
 800a0d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f4:	015a      	lsls	r2, r3, #5
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	4413      	add	r3, r2
 800a0fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a102:	0151      	lsls	r1, r2, #5
 800a104:	69fa      	ldr	r2, [r7, #28]
 800a106:	440a      	add	r2, r1
 800a108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a10c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a110:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a114:	015a      	lsls	r2, r3, #5
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	4413      	add	r3, r2
 800a11a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a122:	0151      	lsls	r1, r2, #5
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	440a      	add	r2, r1
 800a128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a12c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a130:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	3301      	adds	r3, #1
 800a136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a13e:	429a      	cmp	r2, r3
 800a140:	d3a3      	bcc.n	800a08a <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	69fa      	ldr	r2, [r7, #28]
 800a14c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a150:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a154:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d016      	beq.n	800a18c <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a164:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a168:	69fa      	ldr	r2, [r7, #28]
 800a16a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a16e:	f043 030b 	orr.w	r3, r3, #11
 800a172:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a176:	69fb      	ldr	r3, [r7, #28]
 800a178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a17e:	69fa      	ldr	r2, [r7, #28]
 800a180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a184:	f043 030b 	orr.w	r3, r3, #11
 800a188:	6453      	str	r3, [r2, #68]	; 0x44
 800a18a:	e015      	b.n	800a1b8 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a192:	695b      	ldr	r3, [r3, #20]
 800a194:	69fa      	ldr	r2, [r7, #28]
 800a196:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a19a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a19e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a1a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1aa:	691b      	ldr	r3, [r3, #16]
 800a1ac:	69fa      	ldr	r2, [r7, #28]
 800a1ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b2:	f043 030b 	orr.w	r3, r3, #11
 800a1b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a1b8:	69fb      	ldr	r3, [r7, #28]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	69fa      	ldr	r2, [r7, #28]
 800a1c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a1ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	6818      	ldr	r0, [r3, #0]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	691b      	ldr	r3, [r3, #16]
 800a1d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a1dc:	461a      	mov	r2, r3
 800a1de:	f004 ff33 	bl	800f048 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	695a      	ldr	r2, [r3, #20]
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a1f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f004 fe61 	bl	800eebe <USB_ReadInterrupts>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a206:	d124      	bne.n	800a252 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f004 fef7 	bl	800f000 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4618      	mov	r0, r3
 800a218:	f003 ff97 	bl	800e14a <USB_GetDevSpeed>
 800a21c:	4603      	mov	r3, r0
 800a21e:	461a      	mov	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681c      	ldr	r4, [r3, #0]
 800a228:	f000 fe66 	bl	800aef8 <HAL_RCC_GetHCLKFreq>
 800a22c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a232:	b2db      	uxtb	r3, r3
 800a234:	461a      	mov	r2, r3
 800a236:	4620      	mov	r0, r4
 800a238:	f003 fcda 	bl	800dbf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f009 fec8 	bl	8013fd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	695a      	ldr	r2, [r3, #20]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a250:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f004 fe31 	bl	800eebe <USB_ReadInterrupts>
 800a25c:	4603      	mov	r3, r0
 800a25e:	f003 0308 	and.w	r3, r3, #8
 800a262:	2b08      	cmp	r3, #8
 800a264:	d10a      	bne.n	800a27c <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a266:	6878      	ldr	r0, [r7, #4]
 800a268:	f009 fea5 	bl	8013fb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	695a      	ldr	r2, [r3, #20]
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f002 0208 	and.w	r2, r2, #8
 800a27a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4618      	mov	r0, r3
 800a282:	f004 fe1c 	bl	800eebe <USB_ReadInterrupts>
 800a286:	4603      	mov	r3, r0
 800a288:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a28c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a290:	d10f      	bne.n	800a2b2 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	4619      	mov	r1, r3
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f009 ff07 	bl	80140b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	695a      	ldr	r2, [r3, #20]
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a2b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f004 fe01 	bl	800eebe <USB_ReadInterrupts>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2c6:	d10f      	bne.n	800a2e8 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a2cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	4619      	mov	r1, r3
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f009 feda 	bl	801408c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a2e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f004 fde6 	bl	800eebe <USB_ReadInterrupts>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a2f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2fc:	d10a      	bne.n	800a314 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f009 fee8 	bl	80140d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	695a      	ldr	r2, [r3, #20]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4618      	mov	r0, r3
 800a31a:	f004 fdd0 	bl	800eebe <USB_ReadInterrupts>
 800a31e:	4603      	mov	r3, r0
 800a320:	f003 0304 	and.w	r3, r3, #4
 800a324:	2b04      	cmp	r3, #4
 800a326:	d115      	bne.n	800a354 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f009 fed8 	bl	80140f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	6859      	ldr	r1, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	605a      	str	r2, [r3, #4]
 800a350:	e000      	b.n	800a354 <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a352:	bf00      	nop
    }
  }
}
 800a354:	3734      	adds	r7, #52	; 0x34
 800a356:	46bd      	mov	sp, r7
 800a358:	bd90      	pop	{r4, r7, pc}

0800a35a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a35a:	b580      	push	{r7, lr}
 800a35c:	b082      	sub	sp, #8
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
 800a362:	460b      	mov	r3, r1
 800a364:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a36c:	2b01      	cmp	r3, #1
 800a36e:	d101      	bne.n	800a374 <HAL_PCD_SetAddress+0x1a>
 800a370:	2302      	movs	r3, #2
 800a372:	e013      	b.n	800a39c <HAL_PCD_SetAddress+0x42>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	78fa      	ldrb	r2, [r7, #3]
 800a380:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	78fa      	ldrb	r2, [r7, #3]
 800a38a:	4611      	mov	r1, r2
 800a38c:	4618      	mov	r0, r3
 800a38e:	f004 fd2e 	bl	800edee <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2200      	movs	r2, #0
 800a396:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}

0800a3a4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b084      	sub	sp, #16
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
 800a3ac:	4608      	mov	r0, r1
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	70fb      	strb	r3, [r7, #3]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	803b      	strh	r3, [r7, #0]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	da0f      	bge.n	800a3ea <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3ca:	78fb      	ldrb	r3, [r7, #3]
 800a3cc:	f003 020f 	and.w	r2, r3, #15
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	00db      	lsls	r3, r3, #3
 800a3d4:	1a9b      	subs	r3, r3, r2
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	3338      	adds	r3, #56	; 0x38
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	4413      	add	r3, r2
 800a3de:	3304      	adds	r3, #4
 800a3e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2201      	movs	r2, #1
 800a3e6:	705a      	strb	r2, [r3, #1]
 800a3e8:	e00f      	b.n	800a40a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3ea:	78fb      	ldrb	r3, [r7, #3]
 800a3ec:	f003 020f 	and.w	r2, r3, #15
 800a3f0:	4613      	mov	r3, r2
 800a3f2:	00db      	lsls	r3, r3, #3
 800a3f4:	1a9b      	subs	r3, r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	4413      	add	r3, r2
 800a400:	3304      	adds	r3, #4
 800a402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2200      	movs	r2, #0
 800a408:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	f003 030f 	and.w	r3, r3, #15
 800a410:	b2da      	uxtb	r2, r3
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a416:	883a      	ldrh	r2, [r7, #0]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	78ba      	ldrb	r2, [r7, #2]
 800a420:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	785b      	ldrb	r3, [r3, #1]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d004      	beq.n	800a434 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a434:	78bb      	ldrb	r3, [r7, #2]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d102      	bne.n	800a440 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a446:	2b01      	cmp	r3, #1
 800a448:	d101      	bne.n	800a44e <HAL_PCD_EP_Open+0xaa>
 800a44a:	2302      	movs	r3, #2
 800a44c:	e00e      	b.n	800a46c <HAL_PCD_EP_Open+0xc8>
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2201      	movs	r2, #1
 800a452:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68f9      	ldr	r1, [r7, #12]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f003 fe99 	bl	800e194 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2200      	movs	r2, #0
 800a466:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a46a:	7afb      	ldrb	r3, [r7, #11]
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3710      	adds	r7, #16
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	460b      	mov	r3, r1
 800a47e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a480:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a484:	2b00      	cmp	r3, #0
 800a486:	da0f      	bge.n	800a4a8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a488:	78fb      	ldrb	r3, [r7, #3]
 800a48a:	f003 020f 	and.w	r2, r3, #15
 800a48e:	4613      	mov	r3, r2
 800a490:	00db      	lsls	r3, r3, #3
 800a492:	1a9b      	subs	r3, r3, r2
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	3338      	adds	r3, #56	; 0x38
 800a498:	687a      	ldr	r2, [r7, #4]
 800a49a:	4413      	add	r3, r2
 800a49c:	3304      	adds	r3, #4
 800a49e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	705a      	strb	r2, [r3, #1]
 800a4a6:	e00f      	b.n	800a4c8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a4a8:	78fb      	ldrb	r3, [r7, #3]
 800a4aa:	f003 020f 	and.w	r2, r3, #15
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	1a9b      	subs	r3, r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4ba:	687a      	ldr	r2, [r7, #4]
 800a4bc:	4413      	add	r3, r2
 800a4be:	3304      	adds	r3, #4
 800a4c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a4c8:	78fb      	ldrb	r3, [r7, #3]
 800a4ca:	f003 030f 	and.w	r3, r3, #15
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d101      	bne.n	800a4e2 <HAL_PCD_EP_Close+0x6e>
 800a4de:	2302      	movs	r3, #2
 800a4e0:	e00e      	b.n	800a500 <HAL_PCD_EP_Close+0x8c>
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2201      	movs	r2, #1
 800a4e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68f9      	ldr	r1, [r7, #12]
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f003 fed7 	bl	800e2a4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	3710      	adds	r7, #16
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}

0800a508 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	460b      	mov	r3, r1
 800a516:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a518:	7afb      	ldrb	r3, [r7, #11]
 800a51a:	f003 020f 	and.w	r2, r3, #15
 800a51e:	4613      	mov	r3, r2
 800a520:	00db      	lsls	r3, r3, #3
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4413      	add	r3, r2
 800a52e:	3304      	adds	r3, #4
 800a530:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a538:	697b      	ldr	r3, [r7, #20]
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2200      	movs	r2, #0
 800a542:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	2200      	movs	r2, #0
 800a548:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a54a:	7afb      	ldrb	r3, [r7, #11]
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	b2da      	uxtb	r2, r3
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	691b      	ldr	r3, [r3, #16]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d102      	bne.n	800a564 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a564:	7afb      	ldrb	r3, [r7, #11]
 800a566:	f003 030f 	and.w	r3, r3, #15
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d109      	bne.n	800a582 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	6818      	ldr	r0, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	b2db      	uxtb	r3, r3
 800a578:	461a      	mov	r2, r3
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	f004 f9b2 	bl	800e8e4 <USB_EP0StartXfer>
 800a580:	e008      	b.n	800a594 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6818      	ldr	r0, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	691b      	ldr	r3, [r3, #16]
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	461a      	mov	r2, r3
 800a58e:	6979      	ldr	r1, [r7, #20]
 800a590:	f003 ff64 	bl	800e45c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a59e:	b480      	push	{r7}
 800a5a0:	b083      	sub	sp, #12
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a5aa:	78fb      	ldrb	r3, [r7, #3]
 800a5ac:	f003 020f 	and.w	r2, r3, #15
 800a5b0:	6879      	ldr	r1, [r7, #4]
 800a5b2:	4613      	mov	r3, r2
 800a5b4:	00db      	lsls	r3, r3, #3
 800a5b6:	1a9b      	subs	r3, r3, r2
 800a5b8:	009b      	lsls	r3, r3, #2
 800a5ba:	440b      	add	r3, r1
 800a5bc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a5c0:	681b      	ldr	r3, [r3, #0]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a5ce:	b580      	push	{r7, lr}
 800a5d0:	b086      	sub	sp, #24
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	603b      	str	r3, [r7, #0]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	f003 020f 	and.w	r2, r3, #15
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	00db      	lsls	r3, r3, #3
 800a5e8:	1a9b      	subs	r3, r3, r2
 800a5ea:	009b      	lsls	r3, r3, #2
 800a5ec:	3338      	adds	r3, #56	; 0x38
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2200      	movs	r2, #0
 800a606:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	2201      	movs	r2, #1
 800a60c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a60e:	7afb      	ldrb	r3, [r7, #11]
 800a610:	f003 030f 	and.w	r3, r3, #15
 800a614:	b2da      	uxtb	r2, r3
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d102      	bne.n	800a628 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a628:	7afb      	ldrb	r3, [r7, #11]
 800a62a:	f003 030f 	and.w	r3, r3, #15
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d109      	bne.n	800a646 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6818      	ldr	r0, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	691b      	ldr	r3, [r3, #16]
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	461a      	mov	r2, r3
 800a63e:	6979      	ldr	r1, [r7, #20]
 800a640:	f004 f950 	bl	800e8e4 <USB_EP0StartXfer>
 800a644:	e008      	b.n	800a658 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6818      	ldr	r0, [r3, #0]
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	691b      	ldr	r3, [r3, #16]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	461a      	mov	r2, r3
 800a652:	6979      	ldr	r1, [r7, #20]
 800a654:	f003 ff02 	bl	800e45c <USB_EPStartXfer>
  }

  return HAL_OK;
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3718      	adds	r7, #24
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a66e:	78fb      	ldrb	r3, [r7, #3]
 800a670:	f003 020f 	and.w	r2, r3, #15
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d901      	bls.n	800a680 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	e050      	b.n	800a722 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	da0f      	bge.n	800a6a8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f003 020f 	and.w	r2, r3, #15
 800a68e:	4613      	mov	r3, r2
 800a690:	00db      	lsls	r3, r3, #3
 800a692:	1a9b      	subs	r3, r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	3338      	adds	r3, #56	; 0x38
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	4413      	add	r3, r2
 800a69c:	3304      	adds	r3, #4
 800a69e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	705a      	strb	r2, [r3, #1]
 800a6a6:	e00d      	b.n	800a6c4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a6a8:	78fa      	ldrb	r2, [r7, #3]
 800a6aa:	4613      	mov	r3, r2
 800a6ac:	00db      	lsls	r3, r3, #3
 800a6ae:	1a9b      	subs	r3, r3, r2
 800a6b0:	009b      	lsls	r3, r3, #2
 800a6b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	3304      	adds	r3, #4
 800a6bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a6ca:	78fb      	ldrb	r3, [r7, #3]
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d101      	bne.n	800a6e4 <HAL_PCD_EP_SetStall+0x82>
 800a6e0:	2302      	movs	r3, #2
 800a6e2:	e01e      	b.n	800a722 <HAL_PCD_EP_SetStall+0xc0>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	68f9      	ldr	r1, [r7, #12]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f004 faa7 	bl	800ec46 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	f003 030f 	and.w	r3, r3, #15
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10a      	bne.n	800a718 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6818      	ldr	r0, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	691b      	ldr	r3, [r3, #16]
 800a70a:	b2d9      	uxtb	r1, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a712:	461a      	mov	r2, r3
 800a714:	f004 fc98 	bl	800f048 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}

0800a72a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a72a:	b580      	push	{r7, lr}
 800a72c:	b084      	sub	sp, #16
 800a72e:	af00      	add	r7, sp, #0
 800a730:	6078      	str	r0, [r7, #4]
 800a732:	460b      	mov	r3, r1
 800a734:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a736:	78fb      	ldrb	r3, [r7, #3]
 800a738:	f003 020f 	and.w	r2, r3, #15
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	429a      	cmp	r2, r3
 800a742:	d901      	bls.n	800a748 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e042      	b.n	800a7ce <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a748:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da0f      	bge.n	800a770 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	f003 020f 	and.w	r2, r3, #15
 800a756:	4613      	mov	r3, r2
 800a758:	00db      	lsls	r3, r3, #3
 800a75a:	1a9b      	subs	r3, r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	3338      	adds	r3, #56	; 0x38
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	3304      	adds	r3, #4
 800a766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2201      	movs	r2, #1
 800a76c:	705a      	strb	r2, [r3, #1]
 800a76e:	e00f      	b.n	800a790 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a770:	78fb      	ldrb	r3, [r7, #3]
 800a772:	f003 020f 	and.w	r2, r3, #15
 800a776:	4613      	mov	r3, r2
 800a778:	00db      	lsls	r3, r3, #3
 800a77a:	1a9b      	subs	r3, r3, r2
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	4413      	add	r3, r2
 800a786:	3304      	adds	r3, #4
 800a788:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a796:	78fb      	ldrb	r3, [r7, #3]
 800a798:	f003 030f 	and.w	r3, r3, #15
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d101      	bne.n	800a7b0 <HAL_PCD_EP_ClrStall+0x86>
 800a7ac:	2302      	movs	r3, #2
 800a7ae:	e00e      	b.n	800a7ce <HAL_PCD_EP_ClrStall+0xa4>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2201      	movs	r2, #1
 800a7b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68f9      	ldr	r1, [r7, #12]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f004 faaf 	bl	800ed22 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b08a      	sub	sp, #40	; 0x28
 800a7da:	af02      	add	r7, sp, #8
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7ea:	683a      	ldr	r2, [r7, #0]
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	00db      	lsls	r3, r3, #3
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	3338      	adds	r3, #56	; 0x38
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	3304      	adds	r3, #4
 800a7fc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	699a      	ldr	r2, [r3, #24]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	695b      	ldr	r3, [r3, #20]
 800a806:	429a      	cmp	r2, r3
 800a808:	d901      	bls.n	800a80e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e06c      	b.n	800a8e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	695a      	ldr	r2, [r3, #20]
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	699b      	ldr	r3, [r3, #24]
 800a816:	1ad3      	subs	r3, r2, r3
 800a818:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	69fa      	ldr	r2, [r7, #28]
 800a820:	429a      	cmp	r2, r3
 800a822:	d902      	bls.n	800a82a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	3303      	adds	r3, #3
 800a82e:	089b      	lsrs	r3, r3, #2
 800a830:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a832:	e02b      	b.n	800a88c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	695a      	ldr	r2, [r3, #20]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	69fa      	ldr	r2, [r7, #28]
 800a846:	429a      	cmp	r2, r3
 800a848:	d902      	bls.n	800a850 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	689b      	ldr	r3, [r3, #8]
 800a84e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a850:	69fb      	ldr	r3, [r7, #28]
 800a852:	3303      	adds	r3, #3
 800a854:	089b      	lsrs	r3, r3, #2
 800a856:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	68d9      	ldr	r1, [r3, #12]
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	b2da      	uxtb	r2, r3
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a868:	b2db      	uxtb	r3, r3
 800a86a:	9300      	str	r3, [sp, #0]
 800a86c:	4603      	mov	r3, r0
 800a86e:	6978      	ldr	r0, [r7, #20]
 800a870:	f004 f98b 	bl	800eb8a <USB_WritePacket>

    ep->xfer_buff  += len;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68da      	ldr	r2, [r3, #12]
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	441a      	add	r2, r3
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	699a      	ldr	r2, [r3, #24]
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	441a      	add	r2, r3
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	015a      	lsls	r2, r3, #5
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	4413      	add	r3, r2
 800a894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a898:	699b      	ldr	r3, [r3, #24]
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	69ba      	ldr	r2, [r7, #24]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d809      	bhi.n	800a8b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	699a      	ldr	r2, [r3, #24]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a8aa:	429a      	cmp	r2, r3
 800a8ac:	d203      	bcs.n	800a8b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	695b      	ldr	r3, [r3, #20]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d1be      	bne.n	800a834 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	695a      	ldr	r2, [r3, #20]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d811      	bhi.n	800a8e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	2201      	movs	r2, #1
 800a8ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	6939      	ldr	r1, [r7, #16]
 800a8de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8e6:	2300      	movs	r3, #0
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3720      	adds	r7, #32
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}

0800a8f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	333c      	adds	r3, #60	; 0x3c
 800a908:	3304      	adds	r3, #4
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	015a      	lsls	r2, r3, #5
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	4413      	add	r3, r2
 800a916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	691b      	ldr	r3, [r3, #16]
 800a922:	2b01      	cmp	r3, #1
 800a924:	f040 80a0 	bne.w	800aa68 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	f003 0308 	and.w	r3, r3, #8
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d015      	beq.n	800a95e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	4a72      	ldr	r2, [pc, #456]	; (800ab00 <PCD_EP_OutXfrComplete_int+0x210>)
 800a936:	4293      	cmp	r3, r2
 800a938:	f240 80dd 	bls.w	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a942:	2b00      	cmp	r3, #0
 800a944:	f000 80d7 	beq.w	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	015a      	lsls	r2, r3, #5
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	4413      	add	r3, r2
 800a950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a954:	461a      	mov	r2, r3
 800a956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a95a:	6093      	str	r3, [r2, #8]
 800a95c:	e0cb      	b.n	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	d009      	beq.n	800a97c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	015a      	lsls	r2, r3, #5
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	4413      	add	r3, r2
 800a970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a974:	461a      	mov	r2, r3
 800a976:	2320      	movs	r3, #32
 800a978:	6093      	str	r3, [r2, #8]
 800a97a:	e0bc      	b.n	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a982:	2b00      	cmp	r3, #0
 800a984:	f040 80b7 	bne.w	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4a5d      	ldr	r2, [pc, #372]	; (800ab00 <PCD_EP_OutXfrComplete_int+0x210>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d90f      	bls.n	800a9b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00a      	beq.n	800a9b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9ac:	6093      	str	r3, [r2, #8]
 800a9ae:	e0a2      	b.n	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a9b0:	6879      	ldr	r1, [r7, #4]
 800a9b2:	683a      	ldr	r2, [r7, #0]
 800a9b4:	4613      	mov	r3, r2
 800a9b6:	00db      	lsls	r3, r3, #3
 800a9b8:	1a9b      	subs	r3, r3, r2
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	440b      	add	r3, r1
 800a9be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a9c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	0159      	lsls	r1, r3, #5
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	440b      	add	r3, r1
 800a9cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9d0:	691b      	ldr	r3, [r3, #16]
 800a9d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a9d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	4613      	mov	r3, r2
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	1a9b      	subs	r3, r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4403      	add	r3, r0
 800a9e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a9ec:	6879      	ldr	r1, [r7, #4]
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	00db      	lsls	r3, r3, #3
 800a9f4:	1a9b      	subs	r3, r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	683a      	ldr	r2, [r7, #0]
 800aa04:	4613      	mov	r3, r2
 800aa06:	00db      	lsls	r3, r3, #3
 800aa08:	1a9b      	subs	r3, r3, r2
 800aa0a:	009b      	lsls	r3, r3, #2
 800aa0c:	4403      	add	r3, r0
 800aa0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4419      	add	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	683a      	ldr	r2, [r7, #0]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	1a9b      	subs	r3, r3, r2
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4403      	add	r3, r0
 800aa24:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800aa28:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d114      	bne.n	800aa5a <PCD_EP_OutXfrComplete_int+0x16a>
 800aa30:	6879      	ldr	r1, [r7, #4]
 800aa32:	683a      	ldr	r2, [r7, #0]
 800aa34:	4613      	mov	r3, r2
 800aa36:	00db      	lsls	r3, r3, #3
 800aa38:	1a9b      	subs	r3, r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	440b      	add	r3, r1
 800aa3e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d108      	bne.n	800aa5a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6818      	ldr	r0, [r3, #0]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa52:	461a      	mov	r2, r3
 800aa54:	2101      	movs	r1, #1
 800aa56:	f004 faf7 	bl	800f048 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	4619      	mov	r1, r3
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	f009 fa73 	bl	8013f4c <HAL_PCD_DataOutStageCallback>
 800aa66:	e046      	b.n	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4a26      	ldr	r2, [pc, #152]	; (800ab04 <PCD_EP_OutXfrComplete_int+0x214>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d124      	bne.n	800aaba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa86:	461a      	mov	r2, r3
 800aa88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa8c:	6093      	str	r3, [r2, #8]
 800aa8e:	e032      	b.n	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f003 0320 	and.w	r3, r3, #32
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d008      	beq.n	800aaac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	2320      	movs	r3, #32
 800aaaa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f009 fa4a 	bl	8013f4c <HAL_PCD_DataOutStageCallback>
 800aab8:	e01d      	b.n	800aaf6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d114      	bne.n	800aaea <PCD_EP_OutXfrComplete_int+0x1fa>
 800aac0:	6879      	ldr	r1, [r7, #4]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	4613      	mov	r3, r2
 800aac6:	00db      	lsls	r3, r3, #3
 800aac8:	1a9b      	subs	r3, r3, r2
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	440b      	add	r3, r1
 800aace:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d108      	bne.n	800aaea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6818      	ldr	r0, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aae2:	461a      	mov	r2, r3
 800aae4:	2100      	movs	r1, #0
 800aae6:	f004 faaf 	bl	800f048 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	4619      	mov	r1, r3
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f009 fa2b 	bl	8013f4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aaf6:	2300      	movs	r3, #0
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	4f54300a 	.word	0x4f54300a
 800ab04:	4f54310a 	.word	0x4f54310a

0800ab08 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b086      	sub	sp, #24
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	333c      	adds	r3, #60	; 0x3c
 800ab20:	3304      	adds	r3, #4
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	4a15      	ldr	r2, [pc, #84]	; (800ab90 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d90e      	bls.n	800ab5c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d009      	beq.n	800ab5c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	015a      	lsls	r2, r3, #5
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	4413      	add	r3, r2
 800ab50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab54:	461a      	mov	r2, r3
 800ab56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab5a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f009 f9e3 	bl	8013f28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	4a0a      	ldr	r2, [pc, #40]	; (800ab90 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d90c      	bls.n	800ab84 <PCD_EP_OutSetupPacket_int+0x7c>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d108      	bne.n	800ab84 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6818      	ldr	r0, [r3, #0]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	2101      	movs	r1, #1
 800ab80:	f004 fa62 	bl	800f048 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab84:	2300      	movs	r3, #0
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	3718      	adds	r7, #24
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	4f54300a 	.word	0x4f54300a

0800ab94 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	460b      	mov	r3, r1
 800ab9e:	70fb      	strb	r3, [r7, #3]
 800aba0:	4613      	mov	r3, r2
 800aba2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800abac:	78fb      	ldrb	r3, [r7, #3]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d107      	bne.n	800abc2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800abb2:	883b      	ldrh	r3, [r7, #0]
 800abb4:	0419      	lsls	r1, r3, #16
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	629a      	str	r2, [r3, #40]	; 0x28
 800abc0:	e028      	b.n	800ac14 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abc8:	0c1b      	lsrs	r3, r3, #16
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
 800abd4:	e00d      	b.n	800abf2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	7bfb      	ldrb	r3, [r7, #15]
 800abdc:	3340      	adds	r3, #64	; 0x40
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	4413      	add	r3, r2
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	0c1b      	lsrs	r3, r3, #16
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	4413      	add	r3, r2
 800abea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abec:	7bfb      	ldrb	r3, [r7, #15]
 800abee:	3301      	adds	r3, #1
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	7bfa      	ldrb	r2, [r7, #15]
 800abf4:	78fb      	ldrb	r3, [r7, #3]
 800abf6:	3b01      	subs	r3, #1
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d3ec      	bcc.n	800abd6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800abfc:	883b      	ldrh	r3, [r7, #0]
 800abfe:	0418      	lsls	r0, r3, #16
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6819      	ldr	r1, [r3, #0]
 800ac04:	78fb      	ldrb	r3, [r7, #3]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	4302      	orrs	r2, r0
 800ac0c:	3340      	adds	r3, #64	; 0x40
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	440b      	add	r3, r1
 800ac12:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b083      	sub	sp, #12
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	6078      	str	r0, [r7, #4]
 800ac2a:	460b      	mov	r3, r1
 800ac2c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	887a      	ldrh	r2, [r7, #2]
 800ac34:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	699b      	ldr	r3, [r3, #24]
 800ac66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac76:	f043 0303 	orr.w	r3, r3, #3
 800ac7a:	68fa      	ldr	r2, [r7, #12]
 800ac7c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3714      	adds	r7, #20
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ac92:	2300      	movs	r3, #0
 800ac94:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac96:	2300      	movs	r3, #0
 800ac98:	603b      	str	r3, [r7, #0]
 800ac9a:	4b20      	ldr	r3, [pc, #128]	; (800ad1c <HAL_PWREx_EnableOverDrive+0x90>)
 800ac9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9e:	4a1f      	ldr	r2, [pc, #124]	; (800ad1c <HAL_PWREx_EnableOverDrive+0x90>)
 800aca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aca4:	6413      	str	r3, [r2, #64]	; 0x40
 800aca6:	4b1d      	ldr	r3, [pc, #116]	; (800ad1c <HAL_PWREx_EnableOverDrive+0x90>)
 800aca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800acb2:	4b1b      	ldr	r3, [pc, #108]	; (800ad20 <HAL_PWREx_EnableOverDrive+0x94>)
 800acb4:	2201      	movs	r2, #1
 800acb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acb8:	f7fc fc42 	bl	8007540 <HAL_GetTick>
 800acbc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acbe:	e009      	b.n	800acd4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acc0:	f7fc fc3e 	bl	8007540 <HAL_GetTick>
 800acc4:	4602      	mov	r2, r0
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	1ad3      	subs	r3, r2, r3
 800acca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acce:	d901      	bls.n	800acd4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e01f      	b.n	800ad14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800acd4:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <HAL_PWREx_EnableOverDrive+0x98>)
 800acd6:	685b      	ldr	r3, [r3, #4]
 800acd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ace0:	d1ee      	bne.n	800acc0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800ace2:	4b11      	ldr	r3, [pc, #68]	; (800ad28 <HAL_PWREx_EnableOverDrive+0x9c>)
 800ace4:	2201      	movs	r2, #1
 800ace6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ace8:	f7fc fc2a 	bl	8007540 <HAL_GetTick>
 800acec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acee:	e009      	b.n	800ad04 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acf0:	f7fc fc26 	bl	8007540 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acfe:	d901      	bls.n	800ad04 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800ad00:	2303      	movs	r3, #3
 800ad02:	e007      	b.n	800ad14 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800ad04:	4b07      	ldr	r3, [pc, #28]	; (800ad24 <HAL_PWREx_EnableOverDrive+0x98>)
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad10:	d1ee      	bne.n	800acf0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ad12:	2300      	movs	r3, #0
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	40023800 	.word	0x40023800
 800ad20:	420e0040 	.word	0x420e0040
 800ad24:	40007000 	.word	0x40007000
 800ad28:	420e0044 	.word	0x420e0044

0800ad2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d101      	bne.n	800ad40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	e0cc      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad40:	4b68      	ldr	r3, [pc, #416]	; (800aee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	683a      	ldr	r2, [r7, #0]
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d90c      	bls.n	800ad68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad4e:	4b65      	ldr	r3, [pc, #404]	; (800aee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad50:	683a      	ldr	r2, [r7, #0]
 800ad52:	b2d2      	uxtb	r2, r2
 800ad54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad56:	4b63      	ldr	r3, [pc, #396]	; (800aee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 030f 	and.w	r3, r3, #15
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d001      	beq.n	800ad68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e0b8      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f003 0302 	and.w	r3, r3, #2
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d020      	beq.n	800adb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 0304 	and.w	r3, r3, #4
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad80:	4b59      	ldr	r3, [pc, #356]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	4a58      	ldr	r2, [pc, #352]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 0308 	and.w	r3, r3, #8
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d005      	beq.n	800ada4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad98:	4b53      	ldr	r3, [pc, #332]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	4a52      	ldr	r2, [pc, #328]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ad9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ada2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ada4:	4b50      	ldr	r3, [pc, #320]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	494d      	ldr	r1, [pc, #308]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800adb2:	4313      	orrs	r3, r2
 800adb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0301 	and.w	r3, r3, #1
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d044      	beq.n	800ae4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	685b      	ldr	r3, [r3, #4]
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d107      	bne.n	800adda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adca:	4b47      	ldr	r3, [pc, #284]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add2:	2b00      	cmp	r3, #0
 800add4:	d119      	bne.n	800ae0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800add6:	2301      	movs	r3, #1
 800add8:	e07f      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d003      	beq.n	800adea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ade6:	2b03      	cmp	r3, #3
 800ade8:	d107      	bne.n	800adfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adea:	4b3f      	ldr	r3, [pc, #252]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d109      	bne.n	800ae0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e06f      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adfa:	4b3b      	ldr	r3, [pc, #236]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0302 	and.w	r3, r3, #2
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d101      	bne.n	800ae0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	e067      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae0a:	4b37      	ldr	r3, [pc, #220]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	f023 0203 	bic.w	r2, r3, #3
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	685b      	ldr	r3, [r3, #4]
 800ae16:	4934      	ldr	r1, [pc, #208]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800ae1c:	f7fc fb90 	bl	8007540 <HAL_GetTick>
 800ae20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae22:	e00a      	b.n	800ae3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae24:	f7fc fb8c 	bl	8007540 <HAL_GetTick>
 800ae28:	4602      	mov	r2, r0
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d901      	bls.n	800ae3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae36:	2303      	movs	r3, #3
 800ae38:	e04f      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae3a:	4b2b      	ldr	r3, [pc, #172]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f003 020c 	and.w	r2, r3, #12
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d1eb      	bne.n	800ae24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae4c:	4b25      	ldr	r3, [pc, #148]	; (800aee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	f003 030f 	and.w	r3, r3, #15
 800ae54:	683a      	ldr	r2, [r7, #0]
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d20c      	bcs.n	800ae74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae5a:	4b22      	ldr	r3, [pc, #136]	; (800aee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae5c:	683a      	ldr	r2, [r7, #0]
 800ae5e:	b2d2      	uxtb	r2, r2
 800ae60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae62:	4b20      	ldr	r3, [pc, #128]	; (800aee4 <HAL_RCC_ClockConfig+0x1b8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 030f 	and.w	r3, r3, #15
 800ae6a:	683a      	ldr	r2, [r7, #0]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d001      	beq.n	800ae74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e032      	b.n	800aeda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f003 0304 	and.w	r3, r3, #4
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d008      	beq.n	800ae92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae80:	4b19      	ldr	r3, [pc, #100]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	68db      	ldr	r3, [r3, #12]
 800ae8c:	4916      	ldr	r1, [pc, #88]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 0308 	and.w	r3, r3, #8
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d009      	beq.n	800aeb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae9e:	4b12      	ldr	r3, [pc, #72]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	691b      	ldr	r3, [r3, #16]
 800aeaa:	00db      	lsls	r3, r3, #3
 800aeac:	490e      	ldr	r1, [pc, #56]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aeb2:	f000 fbb1 	bl	800b618 <HAL_RCC_GetSysClockFreq>
 800aeb6:	4601      	mov	r1, r0
 800aeb8:	4b0b      	ldr	r3, [pc, #44]	; (800aee8 <HAL_RCC_ClockConfig+0x1bc>)
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	091b      	lsrs	r3, r3, #4
 800aebe:	f003 030f 	and.w	r3, r3, #15
 800aec2:	4a0a      	ldr	r2, [pc, #40]	; (800aeec <HAL_RCC_ClockConfig+0x1c0>)
 800aec4:	5cd3      	ldrb	r3, [r2, r3]
 800aec6:	fa21 f303 	lsr.w	r3, r1, r3
 800aeca:	4a09      	ldr	r2, [pc, #36]	; (800aef0 <HAL_RCC_ClockConfig+0x1c4>)
 800aecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aece:	4b09      	ldr	r3, [pc, #36]	; (800aef4 <HAL_RCC_ClockConfig+0x1c8>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7fc f94e 	bl	8007174 <HAL_InitTick>

  return HAL_OK;
 800aed8:	2300      	movs	r3, #0
}
 800aeda:	4618      	mov	r0, r3
 800aedc:	3710      	adds	r7, #16
 800aede:	46bd      	mov	sp, r7
 800aee0:	bd80      	pop	{r7, pc}
 800aee2:	bf00      	nop
 800aee4:	40023c00 	.word	0x40023c00
 800aee8:	40023800 	.word	0x40023800
 800aeec:	08019fb8 	.word	0x08019fb8
 800aef0:	20000280 	.word	0x20000280
 800aef4:	20000284 	.word	0x20000284

0800aef8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aefc:	4b03      	ldr	r3, [pc, #12]	; (800af0c <HAL_RCC_GetHCLKFreq+0x14>)
 800aefe:	681b      	ldr	r3, [r3, #0]
}
 800af00:	4618      	mov	r0, r3
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	20000280 	.word	0x20000280

0800af10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800af14:	f7ff fff0 	bl	800aef8 <HAL_RCC_GetHCLKFreq>
 800af18:	4601      	mov	r1, r0
 800af1a:	4b05      	ldr	r3, [pc, #20]	; (800af30 <HAL_RCC_GetPCLK1Freq+0x20>)
 800af1c:	689b      	ldr	r3, [r3, #8]
 800af1e:	0a9b      	lsrs	r3, r3, #10
 800af20:	f003 0307 	and.w	r3, r3, #7
 800af24:	4a03      	ldr	r2, [pc, #12]	; (800af34 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af26:	5cd3      	ldrb	r3, [r2, r3]
 800af28:	fa21 f303 	lsr.w	r3, r1, r3
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	40023800 	.word	0x40023800
 800af34:	08019fc8 	.word	0x08019fc8

0800af38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800af3c:	f7ff ffdc 	bl	800aef8 <HAL_RCC_GetHCLKFreq>
 800af40:	4601      	mov	r1, r0
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <HAL_RCC_GetPCLK2Freq+0x20>)
 800af44:	689b      	ldr	r3, [r3, #8]
 800af46:	0b5b      	lsrs	r3, r3, #13
 800af48:	f003 0307 	and.w	r3, r3, #7
 800af4c:	4a03      	ldr	r2, [pc, #12]	; (800af5c <HAL_RCC_GetPCLK2Freq+0x24>)
 800af4e:	5cd3      	ldrb	r3, [r2, r3]
 800af50:	fa21 f303 	lsr.w	r3, r1, r3
}
 800af54:	4618      	mov	r0, r3
 800af56:	bd80      	pop	{r7, pc}
 800af58:	40023800 	.word	0x40023800
 800af5c:	08019fc8 	.word	0x08019fc8

0800af60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800af60:	b480      	push	{r7}
 800af62:	b083      	sub	sp, #12
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
 800af68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	220f      	movs	r2, #15
 800af6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800af70:	4b12      	ldr	r3, [pc, #72]	; (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f003 0203 	and.w	r2, r3, #3
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800af7c:	4b0f      	ldr	r3, [pc, #60]	; (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af7e:	689b      	ldr	r3, [r3, #8]
 800af80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800af88:	4b0c      	ldr	r3, [pc, #48]	; (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af8a:	689b      	ldr	r3, [r3, #8]
 800af8c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800af94:	4b09      	ldr	r3, [pc, #36]	; (800afbc <HAL_RCC_GetClockConfig+0x5c>)
 800af96:	689b      	ldr	r3, [r3, #8]
 800af98:	08db      	lsrs	r3, r3, #3
 800af9a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afa2:	4b07      	ldr	r3, [pc, #28]	; (800afc0 <HAL_RCC_GetClockConfig+0x60>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 020f 	and.w	r2, r3, #15
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	601a      	str	r2, [r3, #0]
}
 800afae:	bf00      	nop
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr
 800afba:	bf00      	nop
 800afbc:	40023800 	.word	0x40023800
 800afc0:	40023c00 	.word	0x40023c00

0800afc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b08c      	sub	sp, #48	; 0x30
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800afd0:	2300      	movs	r3, #0
 800afd2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800afd4:	2300      	movs	r3, #0
 800afd6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800afe0:	2300      	movs	r3, #0
 800afe2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800afec:	2300      	movs	r3, #0
 800afee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0301 	and.w	r3, r3, #1
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d010      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800affc:	4b6f      	ldr	r3, [pc, #444]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800affe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b002:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b00a:	496c      	ldr	r1, [pc, #432]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b00c:	4313      	orrs	r3, r2
 800b00e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b01a:	2301      	movs	r3, #1
 800b01c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0302 	and.w	r3, r3, #2
 800b026:	2b00      	cmp	r3, #0
 800b028:	d010      	beq.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b02a:	4b64      	ldr	r3, [pc, #400]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b02c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b030:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b038:	4960      	ldr	r1, [pc, #384]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b03a:	4313      	orrs	r3, r2
 800b03c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d101      	bne.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b048:	2301      	movs	r3, #1
 800b04a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f003 0304 	and.w	r3, r3, #4
 800b054:	2b00      	cmp	r3, #0
 800b056:	d017      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b058:	4b58      	ldr	r3, [pc, #352]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b05e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b066:	4955      	ldr	r1, [pc, #340]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b068:	4313      	orrs	r3, r2
 800b06a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b076:	d101      	bne.n	800b07c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b078:	2301      	movs	r3, #1
 800b07a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	2b00      	cmp	r3, #0
 800b082:	d101      	bne.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b084:	2301      	movs	r3, #1
 800b086:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0308 	and.w	r3, r3, #8
 800b090:	2b00      	cmp	r3, #0
 800b092:	d017      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b094:	4b49      	ldr	r3, [pc, #292]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b09a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a2:	4946      	ldr	r1, [pc, #280]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0a4:	4313      	orrs	r3, r2
 800b0a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0b2:	d101      	bne.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b0b4:	2301      	movs	r3, #1
 800b0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d101      	bne.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0320 	and.w	r3, r3, #32
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 808a 	beq.w	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60bb      	str	r3, [r7, #8]
 800b0d6:	4b39      	ldr	r3, [pc, #228]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0da:	4a38      	ldr	r2, [pc, #224]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0e0:	6413      	str	r3, [r2, #64]	; 0x40
 800b0e2:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0ea:	60bb      	str	r3, [r7, #8]
 800b0ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b0ee:	4b34      	ldr	r3, [pc, #208]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a33      	ldr	r2, [pc, #204]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b0f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0f8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b0fa:	f7fc fa21 	bl	8007540 <HAL_GetTick>
 800b0fe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b100:	e008      	b.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b102:	f7fc fa1d 	bl	8007540 <HAL_GetTick>
 800b106:	4602      	mov	r2, r0
 800b108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10a:	1ad3      	subs	r3, r2, r3
 800b10c:	2b02      	cmp	r3, #2
 800b10e:	d901      	bls.n	800b114 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	e278      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b114:	4b2a      	ldr	r3, [pc, #168]	; (800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d0f0      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b120:	4b26      	ldr	r3, [pc, #152]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b128:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b12a:	6a3b      	ldr	r3, [r7, #32]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d02f      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b138:	6a3a      	ldr	r2, [r7, #32]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d028      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b13e:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b146:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b148:	4b1e      	ldr	r3, [pc, #120]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b14a:	2201      	movs	r2, #1
 800b14c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b14e:	4b1d      	ldr	r3, [pc, #116]	; (800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b154:	4a19      	ldr	r2, [pc, #100]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b156:	6a3b      	ldr	r3, [r7, #32]
 800b158:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b15a:	4b18      	ldr	r3, [pc, #96]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b15c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b15e:	f003 0301 	and.w	r3, r3, #1
 800b162:	2b01      	cmp	r3, #1
 800b164:	d114      	bne.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b166:	f7fc f9eb 	bl	8007540 <HAL_GetTick>
 800b16a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b16c:	e00a      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b16e:	f7fc f9e7 	bl	8007540 <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	f241 3288 	movw	r2, #5000	; 0x1388
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d901      	bls.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b180:	2303      	movs	r3, #3
 800b182:	e240      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b184:	4b0d      	ldr	r3, [pc, #52]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b188:	f003 0302 	and.w	r3, r3, #2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0ee      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b194:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b19c:	d114      	bne.n	800b1c8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b19e:	4b07      	ldr	r3, [pc, #28]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b1a0:	689b      	ldr	r3, [r3, #8]
 800b1a2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b1ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1b2:	4902      	ldr	r1, [pc, #8]	; (800b1bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	608b      	str	r3, [r1, #8]
 800b1b8:	e00c      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b1ba:	bf00      	nop
 800b1bc:	40023800 	.word	0x40023800
 800b1c0:	40007000 	.word	0x40007000
 800b1c4:	42470e40 	.word	0x42470e40
 800b1c8:	4b4a      	ldr	r3, [pc, #296]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1ca:	689b      	ldr	r3, [r3, #8]
 800b1cc:	4a49      	ldr	r2, [pc, #292]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b1d2:	6093      	str	r3, [r2, #8]
 800b1d4:	4b47      	ldr	r3, [pc, #284]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b1e0:	4944      	ldr	r1, [pc, #272]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1e2:	4313      	orrs	r3, r2
 800b1e4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 0310 	and.w	r3, r3, #16
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b1f8:	4b3f      	ldr	r3, [pc, #252]	; (800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b1fa:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b204:	2b00      	cmp	r3, #0
 800b206:	d00a      	beq.n	800b21e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b208:	4b3a      	ldr	r3, [pc, #232]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b20a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b20e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b216:	4937      	ldr	r1, [pc, #220]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b218:	4313      	orrs	r3, r2
 800b21a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	d00a      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b22a:	4b32      	ldr	r3, [pc, #200]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b22c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b230:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b238:	492e      	ldr	r1, [pc, #184]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b23a:	4313      	orrs	r3, r2
 800b23c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d011      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b24c:	4b29      	ldr	r3, [pc, #164]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b252:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b25a:	4926      	ldr	r1, [pc, #152]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b25c:	4313      	orrs	r3, r2
 800b25e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b26a:	d101      	bne.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b26c:	2301      	movs	r3, #1
 800b26e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b27c:	4b1d      	ldr	r3, [pc, #116]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b27e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b282:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b28a:	491a      	ldr	r1, [pc, #104]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b28c:	4313      	orrs	r3, r2
 800b28e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d011      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b29e:	4b15      	ldr	r3, [pc, #84]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2a4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2ac:	4911      	ldr	r1, [pc, #68]	; (800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2bc:	d101      	bne.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	2b01      	cmp	r3, #1
 800b2c6:	d005      	beq.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d0:	f040 80ff 	bne.w	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b2d4:	4b09      	ldr	r3, [pc, #36]	; (800b2fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b2da:	f7fc f931 	bl	8007540 <HAL_GetTick>
 800b2de:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b2e0:	e00e      	b.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b2e2:	f7fc f92d 	bl	8007540 <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	2b02      	cmp	r3, #2
 800b2ee:	d907      	bls.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e188      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b2f4:	40023800 	.word	0x40023800
 800b2f8:	424711e0 	.word	0x424711e0
 800b2fc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b300:	4b7e      	ldr	r3, [pc, #504]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d1ea      	bne.n	800b2e2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 0301 	and.w	r3, r3, #1
 800b314:	2b00      	cmp	r3, #0
 800b316:	d003      	beq.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d028      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b330:	2b00      	cmp	r3, #0
 800b332:	d124      	bne.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b334:	4b71      	ldr	r3, [pc, #452]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b336:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b33a:	0c1b      	lsrs	r3, r3, #16
 800b33c:	f003 0303 	and.w	r3, r3, #3
 800b340:	3301      	adds	r3, #1
 800b342:	005b      	lsls	r3, r3, #1
 800b344:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b346:	4b6d      	ldr	r3, [pc, #436]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b34c:	0e1b      	lsrs	r3, r3, #24
 800b34e:	f003 030f 	and.w	r3, r3, #15
 800b352:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	685a      	ldr	r2, [r3, #4]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	019b      	lsls	r3, r3, #6
 800b35e:	431a      	orrs	r2, r3
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	085b      	lsrs	r3, r3, #1
 800b364:	3b01      	subs	r3, #1
 800b366:	041b      	lsls	r3, r3, #16
 800b368:	431a      	orrs	r2, r3
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	061b      	lsls	r3, r3, #24
 800b36e:	431a      	orrs	r2, r3
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	071b      	lsls	r3, r3, #28
 800b376:	4961      	ldr	r1, [pc, #388]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f003 0304 	and.w	r3, r3, #4
 800b386:	2b00      	cmp	r3, #0
 800b388:	d004      	beq.n	800b394 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b392:	d00a      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d035      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3a8:	d130      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b3aa:	4b54      	ldr	r3, [pc, #336]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3b0:	0c1b      	lsrs	r3, r3, #16
 800b3b2:	f003 0303 	and.w	r3, r3, #3
 800b3b6:	3301      	adds	r3, #1
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b3bc:	4b4f      	ldr	r3, [pc, #316]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3c2:	0f1b      	lsrs	r3, r3, #28
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	019b      	lsls	r3, r3, #6
 800b3d4:	431a      	orrs	r2, r3
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	085b      	lsrs	r3, r3, #1
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	041b      	lsls	r3, r3, #16
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	061b      	lsls	r3, r3, #24
 800b3e6:	431a      	orrs	r2, r3
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	071b      	lsls	r3, r3, #28
 800b3ec:	4943      	ldr	r1, [pc, #268]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b3f4:	4b41      	ldr	r3, [pc, #260]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b3fa:	f023 021f 	bic.w	r2, r3, #31
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b402:	3b01      	subs	r3, #1
 800b404:	493d      	ldr	r1, [pc, #244]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b406:	4313      	orrs	r3, r2
 800b408:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b414:	2b00      	cmp	r3, #0
 800b416:	d029      	beq.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b420:	d124      	bne.n	800b46c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b422:	4b36      	ldr	r3, [pc, #216]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b428:	0c1b      	lsrs	r3, r3, #16
 800b42a:	f003 0303 	and.w	r3, r3, #3
 800b42e:	3301      	adds	r3, #1
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b434:	4b31      	ldr	r3, [pc, #196]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b43a:	0f1b      	lsrs	r3, r3, #28
 800b43c:	f003 0307 	and.w	r3, r3, #7
 800b440:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	685a      	ldr	r2, [r3, #4]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	689b      	ldr	r3, [r3, #8]
 800b44a:	019b      	lsls	r3, r3, #6
 800b44c:	431a      	orrs	r2, r3
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	085b      	lsrs	r3, r3, #1
 800b454:	3b01      	subs	r3, #1
 800b456:	041b      	lsls	r3, r3, #16
 800b458:	431a      	orrs	r2, r3
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	061b      	lsls	r3, r3, #24
 800b45e:	431a      	orrs	r2, r3
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	071b      	lsls	r3, r3, #28
 800b464:	4925      	ldr	r1, [pc, #148]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b466:	4313      	orrs	r3, r2
 800b468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b474:	2b00      	cmp	r3, #0
 800b476:	d016      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	685a      	ldr	r2, [r3, #4]
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	019b      	lsls	r3, r3, #6
 800b482:	431a      	orrs	r2, r3
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	3b01      	subs	r3, #1
 800b48c:	041b      	lsls	r3, r3, #16
 800b48e:	431a      	orrs	r2, r3
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	691b      	ldr	r3, [r3, #16]
 800b494:	061b      	lsls	r3, r3, #24
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	071b      	lsls	r3, r3, #28
 800b49e:	4917      	ldr	r1, [pc, #92]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b4a6:	4b16      	ldr	r3, [pc, #88]	; (800b500 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b4a8:	2201      	movs	r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b4ac:	f7fc f848 	bl	8007540 <HAL_GetTick>
 800b4b0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b4b2:	e008      	b.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b4b4:	f7fc f844 	bl	8007540 <HAL_GetTick>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	1ad3      	subs	r3, r2, r3
 800b4be:	2b02      	cmp	r3, #2
 800b4c0:	d901      	bls.n	800b4c6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e09f      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b4c6:	4b0d      	ldr	r3, [pc, #52]	; (800b4fc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d0f0      	beq.n	800b4b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b4d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	f040 8095 	bne.w	800b604 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b4da:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b4dc:	2200      	movs	r2, #0
 800b4de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b4e0:	f7fc f82e 	bl	8007540 <HAL_GetTick>
 800b4e4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b4e6:	e00f      	b.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b4e8:	f7fc f82a 	bl	8007540 <HAL_GetTick>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f0:	1ad3      	subs	r3, r2, r3
 800b4f2:	2b02      	cmp	r3, #2
 800b4f4:	d908      	bls.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	e085      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b4fa:	bf00      	nop
 800b4fc:	40023800 	.word	0x40023800
 800b500:	42470068 	.word	0x42470068
 800b504:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b508:	4b41      	ldr	r3, [pc, #260]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b514:	d0e8      	beq.n	800b4e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d003      	beq.n	800b52a <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b526:	2b00      	cmp	r3, #0
 800b528:	d009      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b532:	2b00      	cmp	r3, #0
 800b534:	d02b      	beq.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d127      	bne.n	800b58e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b53e:	4b34      	ldr	r3, [pc, #208]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b544:	0c1b      	lsrs	r3, r3, #16
 800b546:	f003 0303 	and.w	r3, r3, #3
 800b54a:	3301      	adds	r3, #1
 800b54c:	005b      	lsls	r3, r3, #1
 800b54e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	699a      	ldr	r2, [r3, #24]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	69db      	ldr	r3, [r3, #28]
 800b558:	019b      	lsls	r3, r3, #6
 800b55a:	431a      	orrs	r2, r3
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	085b      	lsrs	r3, r3, #1
 800b560:	3b01      	subs	r3, #1
 800b562:	041b      	lsls	r3, r3, #16
 800b564:	431a      	orrs	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b56a:	061b      	lsls	r3, r3, #24
 800b56c:	4928      	ldr	r1, [pc, #160]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b56e:	4313      	orrs	r3, r2
 800b570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b574:	4b26      	ldr	r3, [pc, #152]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b576:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b57a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b582:	3b01      	subs	r3, #1
 800b584:	021b      	lsls	r3, r3, #8
 800b586:	4922      	ldr	r1, [pc, #136]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b588:	4313      	orrs	r3, r2
 800b58a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b596:	2b00      	cmp	r3, #0
 800b598:	d01d      	beq.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b59e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5a2:	d118      	bne.n	800b5d6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b5a4:	4b1a      	ldr	r3, [pc, #104]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5aa:	0e1b      	lsrs	r3, r3, #24
 800b5ac:	f003 030f 	and.w	r3, r3, #15
 800b5b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	699a      	ldr	r2, [r3, #24]
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	69db      	ldr	r3, [r3, #28]
 800b5ba:	019b      	lsls	r3, r3, #6
 800b5bc:	431a      	orrs	r2, r3
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	085b      	lsrs	r3, r3, #1
 800b5c4:	3b01      	subs	r3, #1
 800b5c6:	041b      	lsls	r3, r3, #16
 800b5c8:	431a      	orrs	r2, r3
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	061b      	lsls	r3, r3, #24
 800b5ce:	4910      	ldr	r1, [pc, #64]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5d0:	4313      	orrs	r3, r2
 800b5d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b5d6:	4b0f      	ldr	r3, [pc, #60]	; (800b614 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b5d8:	2201      	movs	r2, #1
 800b5da:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b5dc:	f7fb ffb0 	bl	8007540 <HAL_GetTick>
 800b5e0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b5e2:	e008      	b.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b5e4:	f7fb ffac 	bl	8007540 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	d901      	bls.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b5f2:	2303      	movs	r3, #3
 800b5f4:	e007      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b5f6:	4b06      	ldr	r3, [pc, #24]	; (800b610 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b602:	d1ef      	bne.n	800b5e4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b604:	2300      	movs	r3, #0
}
 800b606:	4618      	mov	r0, r3
 800b608:	3730      	adds	r7, #48	; 0x30
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	40023800 	.word	0x40023800
 800b614:	42470070 	.word	0x42470070

0800b618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b61a:	b087      	sub	sp, #28
 800b61c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b61e:	2300      	movs	r3, #0
 800b620:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b626:	2300      	movs	r3, #0
 800b628:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b62a:	2300      	movs	r3, #0
 800b62c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b632:	4bc6      	ldr	r3, [pc, #792]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b634:	689b      	ldr	r3, [r3, #8]
 800b636:	f003 030c 	and.w	r3, r3, #12
 800b63a:	2b0c      	cmp	r3, #12
 800b63c:	f200 817e 	bhi.w	800b93c <HAL_RCC_GetSysClockFreq+0x324>
 800b640:	a201      	add	r2, pc, #4	; (adr r2, 800b648 <HAL_RCC_GetSysClockFreq+0x30>)
 800b642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b646:	bf00      	nop
 800b648:	0800b67d 	.word	0x0800b67d
 800b64c:	0800b93d 	.word	0x0800b93d
 800b650:	0800b93d 	.word	0x0800b93d
 800b654:	0800b93d 	.word	0x0800b93d
 800b658:	0800b683 	.word	0x0800b683
 800b65c:	0800b93d 	.word	0x0800b93d
 800b660:	0800b93d 	.word	0x0800b93d
 800b664:	0800b93d 	.word	0x0800b93d
 800b668:	0800b689 	.word	0x0800b689
 800b66c:	0800b93d 	.word	0x0800b93d
 800b670:	0800b93d 	.word	0x0800b93d
 800b674:	0800b93d 	.word	0x0800b93d
 800b678:	0800b7e5 	.word	0x0800b7e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b67c:	4bb4      	ldr	r3, [pc, #720]	; (800b950 <HAL_RCC_GetSysClockFreq+0x338>)
 800b67e:	613b      	str	r3, [r7, #16]
       break;
 800b680:	e15f      	b.n	800b942 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b682:	4bb4      	ldr	r3, [pc, #720]	; (800b954 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b684:	613b      	str	r3, [r7, #16]
      break;
 800b686:	e15c      	b.n	800b942 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b688:	4bb0      	ldr	r3, [pc, #704]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b690:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b692:	4bae      	ldr	r3, [pc, #696]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d04a      	beq.n	800b734 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b69e:	4bab      	ldr	r3, [pc, #684]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b6a0:	685b      	ldr	r3, [r3, #4]
 800b6a2:	099b      	lsrs	r3, r3, #6
 800b6a4:	f04f 0400 	mov.w	r4, #0
 800b6a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b6ac:	f04f 0200 	mov.w	r2, #0
 800b6b0:	ea03 0501 	and.w	r5, r3, r1
 800b6b4:	ea04 0602 	and.w	r6, r4, r2
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	4632      	mov	r2, r6
 800b6bc:	f04f 0300 	mov.w	r3, #0
 800b6c0:	f04f 0400 	mov.w	r4, #0
 800b6c4:	0154      	lsls	r4, r2, #5
 800b6c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b6ca:	014b      	lsls	r3, r1, #5
 800b6cc:	4619      	mov	r1, r3
 800b6ce:	4622      	mov	r2, r4
 800b6d0:	1b49      	subs	r1, r1, r5
 800b6d2:	eb62 0206 	sbc.w	r2, r2, r6
 800b6d6:	f04f 0300 	mov.w	r3, #0
 800b6da:	f04f 0400 	mov.w	r4, #0
 800b6de:	0194      	lsls	r4, r2, #6
 800b6e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6e4:	018b      	lsls	r3, r1, #6
 800b6e6:	1a5b      	subs	r3, r3, r1
 800b6e8:	eb64 0402 	sbc.w	r4, r4, r2
 800b6ec:	f04f 0100 	mov.w	r1, #0
 800b6f0:	f04f 0200 	mov.w	r2, #0
 800b6f4:	00e2      	lsls	r2, r4, #3
 800b6f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b6fa:	00d9      	lsls	r1, r3, #3
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	4614      	mov	r4, r2
 800b700:	195b      	adds	r3, r3, r5
 800b702:	eb44 0406 	adc.w	r4, r4, r6
 800b706:	f04f 0100 	mov.w	r1, #0
 800b70a:	f04f 0200 	mov.w	r2, #0
 800b70e:	0262      	lsls	r2, r4, #9
 800b710:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b714:	0259      	lsls	r1, r3, #9
 800b716:	460b      	mov	r3, r1
 800b718:	4614      	mov	r4, r2
 800b71a:	4618      	mov	r0, r3
 800b71c:	4621      	mov	r1, r4
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f04f 0400 	mov.w	r4, #0
 800b724:	461a      	mov	r2, r3
 800b726:	4623      	mov	r3, r4
 800b728:	f7f5 face 	bl	8000cc8 <__aeabi_uldivmod>
 800b72c:	4603      	mov	r3, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	617b      	str	r3, [r7, #20]
 800b732:	e049      	b.n	800b7c8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b734:	4b85      	ldr	r3, [pc, #532]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b736:	685b      	ldr	r3, [r3, #4]
 800b738:	099b      	lsrs	r3, r3, #6
 800b73a:	f04f 0400 	mov.w	r4, #0
 800b73e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b742:	f04f 0200 	mov.w	r2, #0
 800b746:	ea03 0501 	and.w	r5, r3, r1
 800b74a:	ea04 0602 	and.w	r6, r4, r2
 800b74e:	4629      	mov	r1, r5
 800b750:	4632      	mov	r2, r6
 800b752:	f04f 0300 	mov.w	r3, #0
 800b756:	f04f 0400 	mov.w	r4, #0
 800b75a:	0154      	lsls	r4, r2, #5
 800b75c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b760:	014b      	lsls	r3, r1, #5
 800b762:	4619      	mov	r1, r3
 800b764:	4622      	mov	r2, r4
 800b766:	1b49      	subs	r1, r1, r5
 800b768:	eb62 0206 	sbc.w	r2, r2, r6
 800b76c:	f04f 0300 	mov.w	r3, #0
 800b770:	f04f 0400 	mov.w	r4, #0
 800b774:	0194      	lsls	r4, r2, #6
 800b776:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b77a:	018b      	lsls	r3, r1, #6
 800b77c:	1a5b      	subs	r3, r3, r1
 800b77e:	eb64 0402 	sbc.w	r4, r4, r2
 800b782:	f04f 0100 	mov.w	r1, #0
 800b786:	f04f 0200 	mov.w	r2, #0
 800b78a:	00e2      	lsls	r2, r4, #3
 800b78c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b790:	00d9      	lsls	r1, r3, #3
 800b792:	460b      	mov	r3, r1
 800b794:	4614      	mov	r4, r2
 800b796:	195b      	adds	r3, r3, r5
 800b798:	eb44 0406 	adc.w	r4, r4, r6
 800b79c:	f04f 0100 	mov.w	r1, #0
 800b7a0:	f04f 0200 	mov.w	r2, #0
 800b7a4:	02a2      	lsls	r2, r4, #10
 800b7a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b7aa:	0299      	lsls	r1, r3, #10
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4614      	mov	r4, r2
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	4621      	mov	r1, r4
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f04f 0400 	mov.w	r4, #0
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	4623      	mov	r3, r4
 800b7be:	f7f5 fa83 	bl	8000cc8 <__aeabi_uldivmod>
 800b7c2:	4603      	mov	r3, r0
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b7c8:	4b60      	ldr	r3, [pc, #384]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	0c1b      	lsrs	r3, r3, #16
 800b7ce:	f003 0303 	and.w	r3, r3, #3
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	005b      	lsls	r3, r3, #1
 800b7d6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b7d8:	697a      	ldr	r2, [r7, #20]
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7e0:	613b      	str	r3, [r7, #16]
      break;
 800b7e2:	e0ae      	b.n	800b942 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7e4:	4b59      	ldr	r3, [pc, #356]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b7e6:	685b      	ldr	r3, [r3, #4]
 800b7e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7ec:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7ee:	4b57      	ldr	r3, [pc, #348]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d04a      	beq.n	800b890 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7fa:	4b54      	ldr	r3, [pc, #336]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	099b      	lsrs	r3, r3, #6
 800b800:	f04f 0400 	mov.w	r4, #0
 800b804:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b808:	f04f 0200 	mov.w	r2, #0
 800b80c:	ea03 0501 	and.w	r5, r3, r1
 800b810:	ea04 0602 	and.w	r6, r4, r2
 800b814:	4629      	mov	r1, r5
 800b816:	4632      	mov	r2, r6
 800b818:	f04f 0300 	mov.w	r3, #0
 800b81c:	f04f 0400 	mov.w	r4, #0
 800b820:	0154      	lsls	r4, r2, #5
 800b822:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b826:	014b      	lsls	r3, r1, #5
 800b828:	4619      	mov	r1, r3
 800b82a:	4622      	mov	r2, r4
 800b82c:	1b49      	subs	r1, r1, r5
 800b82e:	eb62 0206 	sbc.w	r2, r2, r6
 800b832:	f04f 0300 	mov.w	r3, #0
 800b836:	f04f 0400 	mov.w	r4, #0
 800b83a:	0194      	lsls	r4, r2, #6
 800b83c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b840:	018b      	lsls	r3, r1, #6
 800b842:	1a5b      	subs	r3, r3, r1
 800b844:	eb64 0402 	sbc.w	r4, r4, r2
 800b848:	f04f 0100 	mov.w	r1, #0
 800b84c:	f04f 0200 	mov.w	r2, #0
 800b850:	00e2      	lsls	r2, r4, #3
 800b852:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b856:	00d9      	lsls	r1, r3, #3
 800b858:	460b      	mov	r3, r1
 800b85a:	4614      	mov	r4, r2
 800b85c:	195b      	adds	r3, r3, r5
 800b85e:	eb44 0406 	adc.w	r4, r4, r6
 800b862:	f04f 0100 	mov.w	r1, #0
 800b866:	f04f 0200 	mov.w	r2, #0
 800b86a:	0262      	lsls	r2, r4, #9
 800b86c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b870:	0259      	lsls	r1, r3, #9
 800b872:	460b      	mov	r3, r1
 800b874:	4614      	mov	r4, r2
 800b876:	4618      	mov	r0, r3
 800b878:	4621      	mov	r1, r4
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	f04f 0400 	mov.w	r4, #0
 800b880:	461a      	mov	r2, r3
 800b882:	4623      	mov	r3, r4
 800b884:	f7f5 fa20 	bl	8000cc8 <__aeabi_uldivmod>
 800b888:	4603      	mov	r3, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	617b      	str	r3, [r7, #20]
 800b88e:	e049      	b.n	800b924 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b890:	4b2e      	ldr	r3, [pc, #184]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	099b      	lsrs	r3, r3, #6
 800b896:	f04f 0400 	mov.w	r4, #0
 800b89a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b89e:	f04f 0200 	mov.w	r2, #0
 800b8a2:	ea03 0501 	and.w	r5, r3, r1
 800b8a6:	ea04 0602 	and.w	r6, r4, r2
 800b8aa:	4629      	mov	r1, r5
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	f04f 0300 	mov.w	r3, #0
 800b8b2:	f04f 0400 	mov.w	r4, #0
 800b8b6:	0154      	lsls	r4, r2, #5
 800b8b8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b8bc:	014b      	lsls	r3, r1, #5
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4622      	mov	r2, r4
 800b8c2:	1b49      	subs	r1, r1, r5
 800b8c4:	eb62 0206 	sbc.w	r2, r2, r6
 800b8c8:	f04f 0300 	mov.w	r3, #0
 800b8cc:	f04f 0400 	mov.w	r4, #0
 800b8d0:	0194      	lsls	r4, r2, #6
 800b8d2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b8d6:	018b      	lsls	r3, r1, #6
 800b8d8:	1a5b      	subs	r3, r3, r1
 800b8da:	eb64 0402 	sbc.w	r4, r4, r2
 800b8de:	f04f 0100 	mov.w	r1, #0
 800b8e2:	f04f 0200 	mov.w	r2, #0
 800b8e6:	00e2      	lsls	r2, r4, #3
 800b8e8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8ec:	00d9      	lsls	r1, r3, #3
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	195b      	adds	r3, r3, r5
 800b8f4:	eb44 0406 	adc.w	r4, r4, r6
 800b8f8:	f04f 0100 	mov.w	r1, #0
 800b8fc:	f04f 0200 	mov.w	r2, #0
 800b900:	02a2      	lsls	r2, r4, #10
 800b902:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b906:	0299      	lsls	r1, r3, #10
 800b908:	460b      	mov	r3, r1
 800b90a:	4614      	mov	r4, r2
 800b90c:	4618      	mov	r0, r3
 800b90e:	4621      	mov	r1, r4
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	f04f 0400 	mov.w	r4, #0
 800b916:	461a      	mov	r2, r3
 800b918:	4623      	mov	r3, r4
 800b91a:	f7f5 f9d5 	bl	8000cc8 <__aeabi_uldivmod>
 800b91e:	4603      	mov	r3, r0
 800b920:	460c      	mov	r4, r1
 800b922:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b924:	4b09      	ldr	r3, [pc, #36]	; (800b94c <HAL_RCC_GetSysClockFreq+0x334>)
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	0f1b      	lsrs	r3, r3, #28
 800b92a:	f003 0307 	and.w	r3, r3, #7
 800b92e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	fbb2 f3f3 	udiv	r3, r2, r3
 800b938:	613b      	str	r3, [r7, #16]
      break;
 800b93a:	e002      	b.n	800b942 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b93c:	4b04      	ldr	r3, [pc, #16]	; (800b950 <HAL_RCC_GetSysClockFreq+0x338>)
 800b93e:	613b      	str	r3, [r7, #16]
      break;
 800b940:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b942:	693b      	ldr	r3, [r7, #16]
}
 800b944:	4618      	mov	r0, r3
 800b946:	371c      	adds	r7, #28
 800b948:	46bd      	mov	sp, r7
 800b94a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94c:	40023800 	.word	0x40023800
 800b950:	00f42400 	.word	0x00f42400
 800b954:	007a1200 	.word	0x007a1200

0800b958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b960:	2300      	movs	r3, #0
 800b962:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	f003 0301 	and.w	r3, r3, #1
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	f000 8083 	beq.w	800ba78 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b972:	4b95      	ldr	r3, [pc, #596]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f003 030c 	and.w	r3, r3, #12
 800b97a:	2b04      	cmp	r3, #4
 800b97c:	d019      	beq.n	800b9b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b97e:	4b92      	ldr	r3, [pc, #584]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b986:	2b08      	cmp	r3, #8
 800b988:	d106      	bne.n	800b998 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b98a:	4b8f      	ldr	r3, [pc, #572]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b98c:	685b      	ldr	r3, [r3, #4]
 800b98e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b992:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b996:	d00c      	beq.n	800b9b2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b998:	4b8b      	ldr	r3, [pc, #556]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9a0:	2b0c      	cmp	r3, #12
 800b9a2:	d112      	bne.n	800b9ca <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9a4:	4b88      	ldr	r3, [pc, #544]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9b0:	d10b      	bne.n	800b9ca <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9b2:	4b85      	ldr	r3, [pc, #532]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d05b      	beq.n	800ba76 <HAL_RCC_OscConfig+0x11e>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d157      	bne.n	800ba76 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	e216      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9d2:	d106      	bne.n	800b9e2 <HAL_RCC_OscConfig+0x8a>
 800b9d4:	4b7c      	ldr	r3, [pc, #496]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a7b      	ldr	r2, [pc, #492]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9de:	6013      	str	r3, [r2, #0]
 800b9e0:	e01d      	b.n	800ba1e <HAL_RCC_OscConfig+0xc6>
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	685b      	ldr	r3, [r3, #4]
 800b9e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9ea:	d10c      	bne.n	800ba06 <HAL_RCC_OscConfig+0xae>
 800b9ec:	4b76      	ldr	r3, [pc, #472]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	4a75      	ldr	r2, [pc, #468]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9f6:	6013      	str	r3, [r2, #0]
 800b9f8:	4b73      	ldr	r3, [pc, #460]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a72      	ldr	r2, [pc, #456]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800b9fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba02:	6013      	str	r3, [r2, #0]
 800ba04:	e00b      	b.n	800ba1e <HAL_RCC_OscConfig+0xc6>
 800ba06:	4b70      	ldr	r3, [pc, #448]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a6f      	ldr	r2, [pc, #444]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba10:	6013      	str	r3, [r2, #0]
 800ba12:	4b6d      	ldr	r3, [pc, #436]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a6c      	ldr	r2, [pc, #432]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba1c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	685b      	ldr	r3, [r3, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d013      	beq.n	800ba4e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba26:	f7fb fd8b 	bl	8007540 <HAL_GetTick>
 800ba2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba2c:	e008      	b.n	800ba40 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba2e:	f7fb fd87 	bl	8007540 <HAL_GetTick>
 800ba32:	4602      	mov	r2, r0
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	1ad3      	subs	r3, r2, r3
 800ba38:	2b64      	cmp	r3, #100	; 0x64
 800ba3a:	d901      	bls.n	800ba40 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ba3c:	2303      	movs	r3, #3
 800ba3e:	e1db      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba40:	4b61      	ldr	r3, [pc, #388]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d0f0      	beq.n	800ba2e <HAL_RCC_OscConfig+0xd6>
 800ba4c:	e014      	b.n	800ba78 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba4e:	f7fb fd77 	bl	8007540 <HAL_GetTick>
 800ba52:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba54:	e008      	b.n	800ba68 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba56:	f7fb fd73 	bl	8007540 <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	2b64      	cmp	r3, #100	; 0x64
 800ba62:	d901      	bls.n	800ba68 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800ba64:	2303      	movs	r3, #3
 800ba66:	e1c7      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba68:	4b57      	ldr	r3, [pc, #348]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d1f0      	bne.n	800ba56 <HAL_RCC_OscConfig+0xfe>
 800ba74:	e000      	b.n	800ba78 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba76:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0302 	and.w	r3, r3, #2
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d06f      	beq.n	800bb64 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba84:	4b50      	ldr	r3, [pc, #320]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f003 030c 	and.w	r3, r3, #12
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d017      	beq.n	800bac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba90:	4b4d      	ldr	r3, [pc, #308]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba92:	689b      	ldr	r3, [r3, #8]
 800ba94:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba98:	2b08      	cmp	r3, #8
 800ba9a:	d105      	bne.n	800baa8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba9c:	4b4a      	ldr	r3, [pc, #296]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d00b      	beq.n	800bac0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800baa8:	4b47      	ldr	r3, [pc, #284]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bab0:	2b0c      	cmp	r3, #12
 800bab2:	d11c      	bne.n	800baee <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bab4:	4b44      	ldr	r3, [pc, #272]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d116      	bne.n	800baee <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bac0:	4b41      	ldr	r3, [pc, #260]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	f003 0302 	and.w	r3, r3, #2
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d005      	beq.n	800bad8 <HAL_RCC_OscConfig+0x180>
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d001      	beq.n	800bad8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e18f      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bad8:	4b3b      	ldr	r3, [pc, #236]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	691b      	ldr	r3, [r3, #16]
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	4938      	ldr	r1, [pc, #224]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800baec:	e03a      	b.n	800bb64 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	68db      	ldr	r3, [r3, #12]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d020      	beq.n	800bb38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800baf6:	4b35      	ldr	r3, [pc, #212]	; (800bbcc <HAL_RCC_OscConfig+0x274>)
 800baf8:	2201      	movs	r2, #1
 800bafa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bafc:	f7fb fd20 	bl	8007540 <HAL_GetTick>
 800bb00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb02:	e008      	b.n	800bb16 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb04:	f7fb fd1c 	bl	8007540 <HAL_GetTick>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	693b      	ldr	r3, [r7, #16]
 800bb0c:	1ad3      	subs	r3, r2, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d901      	bls.n	800bb16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bb12:	2303      	movs	r3, #3
 800bb14:	e170      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb16:	4b2c      	ldr	r3, [pc, #176]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d0f0      	beq.n	800bb04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb22:	4b29      	ldr	r3, [pc, #164]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	691b      	ldr	r3, [r3, #16]
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	4925      	ldr	r1, [pc, #148]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bb32:	4313      	orrs	r3, r2
 800bb34:	600b      	str	r3, [r1, #0]
 800bb36:	e015      	b.n	800bb64 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb38:	4b24      	ldr	r3, [pc, #144]	; (800bbcc <HAL_RCC_OscConfig+0x274>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb3e:	f7fb fcff 	bl	8007540 <HAL_GetTick>
 800bb42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb44:	e008      	b.n	800bb58 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb46:	f7fb fcfb 	bl	8007540 <HAL_GetTick>
 800bb4a:	4602      	mov	r2, r0
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	1ad3      	subs	r3, r2, r3
 800bb50:	2b02      	cmp	r3, #2
 800bb52:	d901      	bls.n	800bb58 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bb54:	2303      	movs	r3, #3
 800bb56:	e14f      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb58:	4b1b      	ldr	r3, [pc, #108]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 0302 	and.w	r3, r3, #2
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d1f0      	bne.n	800bb46 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f003 0308 	and.w	r3, r3, #8
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d037      	beq.n	800bbe0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	695b      	ldr	r3, [r3, #20]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d016      	beq.n	800bba6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb78:	4b15      	ldr	r3, [pc, #84]	; (800bbd0 <HAL_RCC_OscConfig+0x278>)
 800bb7a:	2201      	movs	r2, #1
 800bb7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb7e:	f7fb fcdf 	bl	8007540 <HAL_GetTick>
 800bb82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb84:	e008      	b.n	800bb98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb86:	f7fb fcdb 	bl	8007540 <HAL_GetTick>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	d901      	bls.n	800bb98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bb94:	2303      	movs	r3, #3
 800bb96:	e12f      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb98:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <HAL_RCC_OscConfig+0x270>)
 800bb9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb9c:	f003 0302 	and.w	r3, r3, #2
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d0f0      	beq.n	800bb86 <HAL_RCC_OscConfig+0x22e>
 800bba4:	e01c      	b.n	800bbe0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bba6:	4b0a      	ldr	r3, [pc, #40]	; (800bbd0 <HAL_RCC_OscConfig+0x278>)
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbac:	f7fb fcc8 	bl	8007540 <HAL_GetTick>
 800bbb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbb2:	e00f      	b.n	800bbd4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbb4:	f7fb fcc4 	bl	8007540 <HAL_GetTick>
 800bbb8:	4602      	mov	r2, r0
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	1ad3      	subs	r3, r2, r3
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d908      	bls.n	800bbd4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bbc2:	2303      	movs	r3, #3
 800bbc4:	e118      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
 800bbc6:	bf00      	nop
 800bbc8:	40023800 	.word	0x40023800
 800bbcc:	42470000 	.word	0x42470000
 800bbd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbd4:	4b8a      	ldr	r3, [pc, #552]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bbd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d1e9      	bne.n	800bbb4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f003 0304 	and.w	r3, r3, #4
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f000 8097 	beq.w	800bd1c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbee:	2300      	movs	r3, #0
 800bbf0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bbf2:	4b83      	ldr	r3, [pc, #524]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bbf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d10f      	bne.n	800bc1e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60fb      	str	r3, [r7, #12]
 800bc02:	4b7f      	ldr	r3, [pc, #508]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	4a7e      	ldr	r2, [pc, #504]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc0c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc0e:	4b7c      	ldr	r3, [pc, #496]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc16:	60fb      	str	r3, [r7, #12]
 800bc18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bc1a:	2301      	movs	r3, #1
 800bc1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc1e:	4b79      	ldr	r3, [pc, #484]	; (800be04 <HAL_RCC_OscConfig+0x4ac>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d118      	bne.n	800bc5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc2a:	4b76      	ldr	r3, [pc, #472]	; (800be04 <HAL_RCC_OscConfig+0x4ac>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a75      	ldr	r2, [pc, #468]	; (800be04 <HAL_RCC_OscConfig+0x4ac>)
 800bc30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc36:	f7fb fc83 	bl	8007540 <HAL_GetTick>
 800bc3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc3c:	e008      	b.n	800bc50 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc3e:	f7fb fc7f 	bl	8007540 <HAL_GetTick>
 800bc42:	4602      	mov	r2, r0
 800bc44:	693b      	ldr	r3, [r7, #16]
 800bc46:	1ad3      	subs	r3, r2, r3
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	d901      	bls.n	800bc50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bc4c:	2303      	movs	r3, #3
 800bc4e:	e0d3      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc50:	4b6c      	ldr	r3, [pc, #432]	; (800be04 <HAL_RCC_OscConfig+0x4ac>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d0f0      	beq.n	800bc3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	689b      	ldr	r3, [r3, #8]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d106      	bne.n	800bc72 <HAL_RCC_OscConfig+0x31a>
 800bc64:	4b66      	ldr	r3, [pc, #408]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc68:	4a65      	ldr	r2, [pc, #404]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc6a:	f043 0301 	orr.w	r3, r3, #1
 800bc6e:	6713      	str	r3, [r2, #112]	; 0x70
 800bc70:	e01c      	b.n	800bcac <HAL_RCC_OscConfig+0x354>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	689b      	ldr	r3, [r3, #8]
 800bc76:	2b05      	cmp	r3, #5
 800bc78:	d10c      	bne.n	800bc94 <HAL_RCC_OscConfig+0x33c>
 800bc7a:	4b61      	ldr	r3, [pc, #388]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc7e:	4a60      	ldr	r2, [pc, #384]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc80:	f043 0304 	orr.w	r3, r3, #4
 800bc84:	6713      	str	r3, [r2, #112]	; 0x70
 800bc86:	4b5e      	ldr	r3, [pc, #376]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc8a:	4a5d      	ldr	r2, [pc, #372]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc8c:	f043 0301 	orr.w	r3, r3, #1
 800bc90:	6713      	str	r3, [r2, #112]	; 0x70
 800bc92:	e00b      	b.n	800bcac <HAL_RCC_OscConfig+0x354>
 800bc94:	4b5a      	ldr	r3, [pc, #360]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc98:	4a59      	ldr	r2, [pc, #356]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bc9a:	f023 0301 	bic.w	r3, r3, #1
 800bc9e:	6713      	str	r3, [r2, #112]	; 0x70
 800bca0:	4b57      	ldr	r3, [pc, #348]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca4:	4a56      	ldr	r2, [pc, #344]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bca6:	f023 0304 	bic.w	r3, r3, #4
 800bcaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d015      	beq.n	800bce0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcb4:	f7fb fc44 	bl	8007540 <HAL_GetTick>
 800bcb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcba:	e00a      	b.n	800bcd2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcbc:	f7fb fc40 	bl	8007540 <HAL_GetTick>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d901      	bls.n	800bcd2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bcce:	2303      	movs	r3, #3
 800bcd0:	e092      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcd2:	4b4b      	ldr	r3, [pc, #300]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bcd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd6:	f003 0302 	and.w	r3, r3, #2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d0ee      	beq.n	800bcbc <HAL_RCC_OscConfig+0x364>
 800bcde:	e014      	b.n	800bd0a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bce0:	f7fb fc2e 	bl	8007540 <HAL_GetTick>
 800bce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bce6:	e00a      	b.n	800bcfe <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bce8:	f7fb fc2a 	bl	8007540 <HAL_GetTick>
 800bcec:	4602      	mov	r2, r0
 800bcee:	693b      	ldr	r3, [r7, #16]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d901      	bls.n	800bcfe <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bcfa:	2303      	movs	r3, #3
 800bcfc:	e07c      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcfe:	4b40      	ldr	r3, [pc, #256]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd02:	f003 0302 	and.w	r3, r3, #2
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d1ee      	bne.n	800bce8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd0a:	7dfb      	ldrb	r3, [r7, #23]
 800bd0c:	2b01      	cmp	r3, #1
 800bd0e:	d105      	bne.n	800bd1c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd10:	4b3b      	ldr	r3, [pc, #236]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd14:	4a3a      	ldr	r2, [pc, #232]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bd16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	699b      	ldr	r3, [r3, #24]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d068      	beq.n	800bdf6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd24:	4b36      	ldr	r3, [pc, #216]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f003 030c 	and.w	r3, r3, #12
 800bd2c:	2b08      	cmp	r3, #8
 800bd2e:	d060      	beq.n	800bdf2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	2b02      	cmp	r3, #2
 800bd36:	d145      	bne.n	800bdc4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd38:	4b33      	ldr	r3, [pc, #204]	; (800be08 <HAL_RCC_OscConfig+0x4b0>)
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3e:	f7fb fbff 	bl	8007540 <HAL_GetTick>
 800bd42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd44:	e008      	b.n	800bd58 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd46:	f7fb fbfb 	bl	8007540 <HAL_GetTick>
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	693b      	ldr	r3, [r7, #16]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	d901      	bls.n	800bd58 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e04f      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd58:	4b29      	ldr	r3, [pc, #164]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1f0      	bne.n	800bd46 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	69da      	ldr	r2, [r3, #28]
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6a1b      	ldr	r3, [r3, #32]
 800bd6c:	431a      	orrs	r2, r3
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd72:	019b      	lsls	r3, r3, #6
 800bd74:	431a      	orrs	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	041b      	lsls	r3, r3, #16
 800bd80:	431a      	orrs	r2, r3
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd86:	061b      	lsls	r3, r3, #24
 800bd88:	431a      	orrs	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd8e:	071b      	lsls	r3, r3, #28
 800bd90:	491b      	ldr	r1, [pc, #108]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bd92:	4313      	orrs	r3, r2
 800bd94:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd96:	4b1c      	ldr	r3, [pc, #112]	; (800be08 <HAL_RCC_OscConfig+0x4b0>)
 800bd98:	2201      	movs	r2, #1
 800bd9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd9c:	f7fb fbd0 	bl	8007540 <HAL_GetTick>
 800bda0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bda2:	e008      	b.n	800bdb6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bda4:	f7fb fbcc 	bl	8007540 <HAL_GetTick>
 800bda8:	4602      	mov	r2, r0
 800bdaa:	693b      	ldr	r3, [r7, #16]
 800bdac:	1ad3      	subs	r3, r2, r3
 800bdae:	2b02      	cmp	r3, #2
 800bdb0:	d901      	bls.n	800bdb6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800bdb2:	2303      	movs	r3, #3
 800bdb4:	e020      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdb6:	4b12      	ldr	r3, [pc, #72]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0f0      	beq.n	800bda4 <HAL_RCC_OscConfig+0x44c>
 800bdc2:	e018      	b.n	800bdf6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdc4:	4b10      	ldr	r3, [pc, #64]	; (800be08 <HAL_RCC_OscConfig+0x4b0>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdca:	f7fb fbb9 	bl	8007540 <HAL_GetTick>
 800bdce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdd0:	e008      	b.n	800bde4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdd2:	f7fb fbb5 	bl	8007540 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d901      	bls.n	800bde4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e009      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bde4:	4b06      	ldr	r3, [pc, #24]	; (800be00 <HAL_RCC_OscConfig+0x4a8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f0      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x47a>
 800bdf0:	e001      	b.n	800bdf6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e000      	b.n	800bdf8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	40023800 	.word	0x40023800
 800be04:	40007000 	.word	0x40007000
 800be08:	42470060 	.word	0x42470060

0800be0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b082      	sub	sp, #8
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e056      	b.n	800becc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be2a:	b2db      	uxtb	r3, r3
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d106      	bne.n	800be3e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be38:	6878      	ldr	r0, [r7, #4]
 800be3a:	f7fa ff57 	bl	8006cec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2202      	movs	r2, #2
 800be42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	681a      	ldr	r2, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be54:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	689b      	ldr	r3, [r3, #8]
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	431a      	orrs	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	691b      	ldr	r3, [r3, #16]
 800be6a:	431a      	orrs	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	695b      	ldr	r3, [r3, #20]
 800be70:	431a      	orrs	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	699b      	ldr	r3, [r3, #24]
 800be76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be7a:	431a      	orrs	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	431a      	orrs	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	ea42 0103 	orr.w	r1, r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	699b      	ldr	r3, [r3, #24]
 800be9a:	0c1b      	lsrs	r3, r3, #16
 800be9c:	f003 0104 	and.w	r1, r3, #4
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	69da      	ldr	r2, [r3, #28]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800beba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2201      	movs	r2, #1
 800bec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800beca:	2300      	movs	r3, #0
}
 800becc:	4618      	mov	r0, r3
 800bece:	3708      	adds	r7, #8
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b088      	sub	sp, #32
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	4613      	mov	r3, r2
 800bee2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bee4:	2300      	movs	r3, #0
 800bee6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d101      	bne.n	800bef6 <HAL_SPI_Transmit+0x22>
 800bef2:	2302      	movs	r3, #2
 800bef4:	e11e      	b.n	800c134 <HAL_SPI_Transmit+0x260>
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2201      	movs	r2, #1
 800befa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800befe:	f7fb fb1f 	bl	8007540 <HAL_GetTick>
 800bf02:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800bf04:	88fb      	ldrh	r3, [r7, #6]
 800bf06:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b01      	cmp	r3, #1
 800bf12:	d002      	beq.n	800bf1a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800bf14:	2302      	movs	r3, #2
 800bf16:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf18:	e103      	b.n	800c122 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <HAL_SPI_Transmit+0x52>
 800bf20:	88fb      	ldrh	r3, [r7, #6]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d102      	bne.n	800bf2c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800bf26:	2301      	movs	r3, #1
 800bf28:	77fb      	strb	r3, [r7, #31]
    goto error;
 800bf2a:	e0fa      	b.n	800c122 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	2203      	movs	r2, #3
 800bf30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2200      	movs	r2, #0
 800bf38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	68ba      	ldr	r2, [r7, #8]
 800bf3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	88fa      	ldrh	r2, [r7, #6]
 800bf44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	88fa      	ldrh	r2, [r7, #6]
 800bf4a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	2200      	movs	r2, #0
 800bf50:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2200      	movs	r2, #0
 800bf56:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2200      	movs	r2, #0
 800bf62:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bf72:	d107      	bne.n	800bf84 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bf82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf8e:	2b40      	cmp	r3, #64	; 0x40
 800bf90:	d007      	beq.n	800bfa2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681a      	ldr	r2, [r3, #0]
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfa0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfaa:	d14b      	bne.n	800c044 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	685b      	ldr	r3, [r3, #4]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d002      	beq.n	800bfba <HAL_SPI_Transmit+0xe6>
 800bfb4:	8afb      	ldrh	r3, [r7, #22]
 800bfb6:	2b01      	cmp	r3, #1
 800bfb8:	d13e      	bne.n	800c038 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfbe:	881a      	ldrh	r2, [r3, #0]
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfca:	1c9a      	adds	r2, r3, #2
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800bfd4:	b29b      	uxth	r3, r3
 800bfd6:	3b01      	subs	r3, #1
 800bfd8:	b29a      	uxth	r2, r3
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800bfde:	e02b      	b.n	800c038 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f003 0302 	and.w	r3, r3, #2
 800bfea:	2b02      	cmp	r3, #2
 800bfec:	d112      	bne.n	800c014 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	881a      	ldrh	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c008:	b29b      	uxth	r3, r3
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	86da      	strh	r2, [r3, #54]	; 0x36
 800c012:	e011      	b.n	800c038 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c014:	f7fb fa94 	bl	8007540 <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	683a      	ldr	r2, [r7, #0]
 800c020:	429a      	cmp	r2, r3
 800c022:	d803      	bhi.n	800c02c <HAL_SPI_Transmit+0x158>
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c02a:	d102      	bne.n	800c032 <HAL_SPI_Transmit+0x15e>
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d102      	bne.n	800c038 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800c032:	2303      	movs	r3, #3
 800c034:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c036:	e074      	b.n	800c122 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d1ce      	bne.n	800bfe0 <HAL_SPI_Transmit+0x10c>
 800c042:	e04c      	b.n	800c0de <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	685b      	ldr	r3, [r3, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d002      	beq.n	800c052 <HAL_SPI_Transmit+0x17e>
 800c04c:	8afb      	ldrh	r3, [r7, #22]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d140      	bne.n	800c0d4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	330c      	adds	r3, #12
 800c05c:	7812      	ldrb	r2, [r2, #0]
 800c05e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c06e:	b29b      	uxth	r3, r3
 800c070:	3b01      	subs	r3, #1
 800c072:	b29a      	uxth	r2, r3
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800c078:	e02c      	b.n	800c0d4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f003 0302 	and.w	r3, r3, #2
 800c084:	2b02      	cmp	r3, #2
 800c086:	d113      	bne.n	800c0b0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	330c      	adds	r3, #12
 800c092:	7812      	ldrb	r2, [r2, #0]
 800c094:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09a:	1c5a      	adds	r2, r3, #1
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	86da      	strh	r2, [r3, #54]	; 0x36
 800c0ae:	e011      	b.n	800c0d4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c0b0:	f7fb fa46 	bl	8007540 <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	683a      	ldr	r2, [r7, #0]
 800c0bc:	429a      	cmp	r2, r3
 800c0be:	d803      	bhi.n	800c0c8 <HAL_SPI_Transmit+0x1f4>
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0c6:	d102      	bne.n	800c0ce <HAL_SPI_Transmit+0x1fa>
 800c0c8:	683b      	ldr	r3, [r7, #0]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d102      	bne.n	800c0d4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800c0ce:	2303      	movs	r3, #3
 800c0d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800c0d2:	e026      	b.n	800c122 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d1cd      	bne.n	800c07a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c0de:	69ba      	ldr	r2, [r7, #24]
 800c0e0:	6839      	ldr	r1, [r7, #0]
 800c0e2:	68f8      	ldr	r0, [r7, #12]
 800c0e4:	f000 fdb6 	bl	800cc54 <SPI_EndRxTxTransaction>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d002      	beq.n	800c0f4 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d10a      	bne.n	800c112 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	613b      	str	r3, [r7, #16]
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	613b      	str	r3, [r7, #16]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	613b      	str	r3, [r7, #16]
 800c110:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c116:	2b00      	cmp	r3, #0
 800c118:	d002      	beq.n	800c120 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800c11a:	2301      	movs	r3, #1
 800c11c:	77fb      	strb	r3, [r7, #31]
 800c11e:	e000      	b.n	800c122 <HAL_SPI_Transmit+0x24e>
  }

error:
 800c120:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2201      	movs	r2, #1
 800c126:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c132:	7ffb      	ldrb	r3, [r7, #31]
}
 800c134:	4618      	mov	r0, r3
 800c136:	3720      	adds	r7, #32
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b088      	sub	sp, #32
 800c140:	af02      	add	r7, sp, #8
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	603b      	str	r3, [r7, #0]
 800c148:	4613      	mov	r3, r2
 800c14a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c14c:	2300      	movs	r3, #0
 800c14e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c158:	d112      	bne.n	800c180 <HAL_SPI_Receive+0x44>
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	689b      	ldr	r3, [r3, #8]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d10e      	bne.n	800c180 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	2204      	movs	r2, #4
 800c166:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800c16a:	88fa      	ldrh	r2, [r7, #6]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	9300      	str	r3, [sp, #0]
 800c170:	4613      	mov	r3, r2
 800c172:	68ba      	ldr	r2, [r7, #8]
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f000 f8e9 	bl	800c34e <HAL_SPI_TransmitReceive>
 800c17c:	4603      	mov	r3, r0
 800c17e:	e0e2      	b.n	800c346 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c186:	2b01      	cmp	r3, #1
 800c188:	d101      	bne.n	800c18e <HAL_SPI_Receive+0x52>
 800c18a:	2302      	movs	r3, #2
 800c18c:	e0db      	b.n	800c346 <HAL_SPI_Receive+0x20a>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	2201      	movs	r2, #1
 800c192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c196:	f7fb f9d3 	bl	8007540 <HAL_GetTick>
 800c19a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c1a2:	b2db      	uxtb	r3, r3
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d002      	beq.n	800c1ae <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800c1a8:	2302      	movs	r3, #2
 800c1aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1ac:	e0c2      	b.n	800c334 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <HAL_SPI_Receive+0x7e>
 800c1b4:	88fb      	ldrh	r3, [r7, #6]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d102      	bne.n	800c1c0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c1be:	e0b9      	b.n	800c334 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	2204      	movs	r2, #4
 800c1c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	88fa      	ldrh	r2, [r7, #6]
 800c1d8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	88fa      	ldrh	r2, [r7, #6]
 800c1de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c206:	d107      	bne.n	800c218 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c216:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c222:	2b40      	cmp	r3, #64	; 0x40
 800c224:	d007      	beq.n	800c236 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c234:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d162      	bne.n	800c304 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800c23e:	e02e      	b.n	800c29e <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	f003 0301 	and.w	r3, r3, #1
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d115      	bne.n	800c27a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f103 020c 	add.w	r2, r3, #12
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c25a:	7812      	ldrb	r2, [r2, #0]
 800c25c:	b2d2      	uxtb	r2, r2
 800c25e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c264:	1c5a      	adds	r2, r3, #1
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c26e:	b29b      	uxth	r3, r3
 800c270:	3b01      	subs	r3, #1
 800c272:	b29a      	uxth	r2, r3
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c278:	e011      	b.n	800c29e <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c27a:	f7fb f961 	bl	8007540 <HAL_GetTick>
 800c27e:	4602      	mov	r2, r0
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	1ad3      	subs	r3, r2, r3
 800c284:	683a      	ldr	r2, [r7, #0]
 800c286:	429a      	cmp	r2, r3
 800c288:	d803      	bhi.n	800c292 <HAL_SPI_Receive+0x156>
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c290:	d102      	bne.n	800c298 <HAL_SPI_Receive+0x15c>
 800c292:	683b      	ldr	r3, [r7, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d102      	bne.n	800c29e <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800c298:	2303      	movs	r3, #3
 800c29a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c29c:	e04a      	b.n	800c334 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1cb      	bne.n	800c240 <HAL_SPI_Receive+0x104>
 800c2a8:	e031      	b.n	800c30e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	689b      	ldr	r3, [r3, #8]
 800c2b0:	f003 0301 	and.w	r3, r3, #1
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d113      	bne.n	800c2e0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	68da      	ldr	r2, [r3, #12]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c2:	b292      	uxth	r2, r2
 800c2c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ca:	1c9a      	adds	r2, r3, #2
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	3b01      	subs	r3, #1
 800c2d8:	b29a      	uxth	r2, r3
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c2de:	e011      	b.n	800c304 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c2e0:	f7fb f92e 	bl	8007540 <HAL_GetTick>
 800c2e4:	4602      	mov	r2, r0
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	1ad3      	subs	r3, r2, r3
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d803      	bhi.n	800c2f8 <HAL_SPI_Receive+0x1bc>
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2f6:	d102      	bne.n	800c2fe <HAL_SPI_Receive+0x1c2>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d102      	bne.n	800c304 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	75fb      	strb	r3, [r7, #23]
          goto error;
 800c302:	e017      	b.n	800c334 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c308:	b29b      	uxth	r3, r3
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1cd      	bne.n	800c2aa <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c30e:	693a      	ldr	r2, [r7, #16]
 800c310:	6839      	ldr	r1, [r7, #0]
 800c312:	68f8      	ldr	r0, [r7, #12]
 800c314:	f000 fc38 	bl	800cb88 <SPI_EndRxTransaction>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d002      	beq.n	800c324 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	2220      	movs	r2, #32
 800c322:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d002      	beq.n	800c332 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800c32c:	2301      	movs	r3, #1
 800c32e:	75fb      	strb	r3, [r7, #23]
 800c330:	e000      	b.n	800c334 <HAL_SPI_Receive+0x1f8>
  }

error :
 800c332:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2201      	movs	r2, #1
 800c338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c344:	7dfb      	ldrb	r3, [r7, #23]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3718      	adds	r7, #24
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b08c      	sub	sp, #48	; 0x30
 800c352:	af00      	add	r7, sp, #0
 800c354:	60f8      	str	r0, [r7, #12]
 800c356:	60b9      	str	r1, [r7, #8]
 800c358:	607a      	str	r2, [r7, #4]
 800c35a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800c35c:	2301      	movs	r3, #1
 800c35e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c360:	2300      	movs	r3, #0
 800c362:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d101      	bne.n	800c374 <HAL_SPI_TransmitReceive+0x26>
 800c370:	2302      	movs	r3, #2
 800c372:	e18a      	b.n	800c68a <HAL_SPI_TransmitReceive+0x33c>
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c37c:	f7fb f8e0 	bl	8007540 <HAL_GetTick>
 800c380:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c388:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	685b      	ldr	r3, [r3, #4]
 800c390:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800c392:	887b      	ldrh	r3, [r7, #2]
 800c394:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c396:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	d00f      	beq.n	800c3be <HAL_SPI_TransmitReceive+0x70>
 800c39e:	69fb      	ldr	r3, [r7, #28]
 800c3a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c3a4:	d107      	bne.n	800c3b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d103      	bne.n	800c3b6 <HAL_SPI_TransmitReceive+0x68>
 800c3ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800c3b2:	2b04      	cmp	r3, #4
 800c3b4:	d003      	beq.n	800c3be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800c3b6:	2302      	movs	r3, #2
 800c3b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3bc:	e15b      	b.n	800c676 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c3be:	68bb      	ldr	r3, [r7, #8]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d005      	beq.n	800c3d0 <HAL_SPI_TransmitReceive+0x82>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d002      	beq.n	800c3d0 <HAL_SPI_TransmitReceive+0x82>
 800c3ca:	887b      	ldrh	r3, [r7, #2]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d103      	bne.n	800c3d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800c3d6:	e14e      	b.n	800c676 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b04      	cmp	r3, #4
 800c3e2:	d003      	beq.n	800c3ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2205      	movs	r2, #5
 800c3e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	887a      	ldrh	r2, [r7, #2]
 800c3fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	887a      	ldrh	r2, [r7, #2]
 800c402:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	68ba      	ldr	r2, [r7, #8]
 800c408:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	887a      	ldrh	r2, [r7, #2]
 800c40e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	887a      	ldrh	r2, [r7, #2]
 800c414:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2200      	movs	r2, #0
 800c420:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c42c:	2b40      	cmp	r3, #64	; 0x40
 800c42e:	d007      	beq.n	800c440 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c43e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c448:	d178      	bne.n	800c53c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	685b      	ldr	r3, [r3, #4]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d002      	beq.n	800c458 <HAL_SPI_TransmitReceive+0x10a>
 800c452:	8b7b      	ldrh	r3, [r7, #26]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d166      	bne.n	800c526 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45c:	881a      	ldrh	r2, [r3, #0]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c468:	1c9a      	adds	r2, r3, #2
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c472:	b29b      	uxth	r3, r3
 800c474:	3b01      	subs	r3, #1
 800c476:	b29a      	uxth	r2, r3
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c47c:	e053      	b.n	800c526 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	f003 0302 	and.w	r3, r3, #2
 800c488:	2b02      	cmp	r3, #2
 800c48a:	d11b      	bne.n	800c4c4 <HAL_SPI_TransmitReceive+0x176>
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c490:	b29b      	uxth	r3, r3
 800c492:	2b00      	cmp	r3, #0
 800c494:	d016      	beq.n	800c4c4 <HAL_SPI_TransmitReceive+0x176>
 800c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d113      	bne.n	800c4c4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4a0:	881a      	ldrh	r2, [r3, #0]
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4ac:	1c9a      	adds	r2, r3, #2
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	3b01      	subs	r3, #1
 800c4ba:	b29a      	uxth	r2, r3
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	689b      	ldr	r3, [r3, #8]
 800c4ca:	f003 0301 	and.w	r3, r3, #1
 800c4ce:	2b01      	cmp	r3, #1
 800c4d0:	d119      	bne.n	800c506 <HAL_SPI_TransmitReceive+0x1b8>
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4d6:	b29b      	uxth	r3, r3
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d014      	beq.n	800c506 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68da      	ldr	r2, [r3, #12]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4e6:	b292      	uxth	r2, r2
 800c4e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4ee:	1c9a      	adds	r2, r3, #2
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	3b01      	subs	r3, #1
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c502:	2301      	movs	r3, #1
 800c504:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c506:	f7fb f81b 	bl	8007540 <HAL_GetTick>
 800c50a:	4602      	mov	r2, r0
 800c50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c512:	429a      	cmp	r2, r3
 800c514:	d807      	bhi.n	800c526 <HAL_SPI_TransmitReceive+0x1d8>
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c51c:	d003      	beq.n	800c526 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c51e:	2303      	movs	r3, #3
 800c520:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c524:	e0a7      	b.n	800c676 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d1a6      	bne.n	800c47e <HAL_SPI_TransmitReceive+0x130>
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c534:	b29b      	uxth	r3, r3
 800c536:	2b00      	cmp	r3, #0
 800c538:	d1a1      	bne.n	800c47e <HAL_SPI_TransmitReceive+0x130>
 800c53a:	e07c      	b.n	800c636 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	685b      	ldr	r3, [r3, #4]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <HAL_SPI_TransmitReceive+0x1fc>
 800c544:	8b7b      	ldrh	r3, [r7, #26]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d16b      	bne.n	800c622 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	330c      	adds	r3, #12
 800c554:	7812      	ldrb	r2, [r2, #0]
 800c556:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c55c:	1c5a      	adds	r2, r3, #1
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c566:	b29b      	uxth	r3, r3
 800c568:	3b01      	subs	r3, #1
 800c56a:	b29a      	uxth	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c570:	e057      	b.n	800c622 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	f003 0302 	and.w	r3, r3, #2
 800c57c:	2b02      	cmp	r3, #2
 800c57e:	d11c      	bne.n	800c5ba <HAL_SPI_TransmitReceive+0x26c>
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c584:	b29b      	uxth	r3, r3
 800c586:	2b00      	cmp	r3, #0
 800c588:	d017      	beq.n	800c5ba <HAL_SPI_TransmitReceive+0x26c>
 800c58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d114      	bne.n	800c5ba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	330c      	adds	r3, #12
 800c59a:	7812      	ldrb	r2, [r2, #0]
 800c59c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a2:	1c5a      	adds	r2, r3, #1
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c5ac:	b29b      	uxth	r3, r3
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	b29a      	uxth	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	f003 0301 	and.w	r3, r3, #1
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d119      	bne.n	800c5fc <HAL_SPI_TransmitReceive+0x2ae>
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d014      	beq.n	800c5fc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68da      	ldr	r2, [r3, #12]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5dc:	b2d2      	uxtb	r2, r2
 800c5de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e4:	1c5a      	adds	r2, r3, #1
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5ee:	b29b      	uxth	r3, r3
 800c5f0:	3b01      	subs	r3, #1
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c5f8:	2301      	movs	r3, #1
 800c5fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c5fc:	f7fa ffa0 	bl	8007540 <HAL_GetTick>
 800c600:	4602      	mov	r2, r0
 800c602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c604:	1ad3      	subs	r3, r2, r3
 800c606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c608:	429a      	cmp	r2, r3
 800c60a:	d803      	bhi.n	800c614 <HAL_SPI_TransmitReceive+0x2c6>
 800c60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c612:	d102      	bne.n	800c61a <HAL_SPI_TransmitReceive+0x2cc>
 800c614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c616:	2b00      	cmp	r3, #0
 800c618:	d103      	bne.n	800c622 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c61a:	2303      	movs	r3, #3
 800c61c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c620:	e029      	b.n	800c676 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c626:	b29b      	uxth	r3, r3
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d1a2      	bne.n	800c572 <HAL_SPI_TransmitReceive+0x224>
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c630:	b29b      	uxth	r3, r3
 800c632:	2b00      	cmp	r3, #0
 800c634:	d19d      	bne.n	800c572 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c638:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c63a:	68f8      	ldr	r0, [r7, #12]
 800c63c:	f000 fb0a 	bl	800cc54 <SPI_EndRxTxTransaction>
 800c640:	4603      	mov	r3, r0
 800c642:	2b00      	cmp	r3, #0
 800c644:	d006      	beq.n	800c654 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2220      	movs	r2, #32
 800c650:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c652:	e010      	b.n	800c676 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10b      	bne.n	800c674 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c65c:	2300      	movs	r3, #0
 800c65e:	617b      	str	r3, [r7, #20]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68db      	ldr	r3, [r3, #12]
 800c666:	617b      	str	r3, [r7, #20]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	689b      	ldr	r3, [r3, #8]
 800c66e:	617b      	str	r3, [r7, #20]
 800c670:	697b      	ldr	r3, [r7, #20]
 800c672:	e000      	b.n	800c676 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c674:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c686:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	3730      	adds	r7, #48	; 0x30
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd80      	pop	{r7, pc}
	...

0800c694 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	60f8      	str	r0, [r7, #12]
 800c69c:	60b9      	str	r1, [r7, #8]
 800c69e:	607a      	str	r2, [r7, #4]
 800c6a0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c6ac:	2b01      	cmp	r3, #1
 800c6ae:	d101      	bne.n	800c6b4 <HAL_SPI_TransmitReceive_DMA+0x20>
 800c6b0:	2302      	movs	r3, #2
 800c6b2:	e0e3      	b.n	800c87c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c6c2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c6ca:	7dbb      	ldrb	r3, [r7, #22]
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d00d      	beq.n	800c6ec <HAL_SPI_TransmitReceive_DMA+0x58>
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c6d6:	d106      	bne.n	800c6e6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	689b      	ldr	r3, [r3, #8]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d102      	bne.n	800c6e6 <HAL_SPI_TransmitReceive_DMA+0x52>
 800c6e0:	7dbb      	ldrb	r3, [r7, #22]
 800c6e2:	2b04      	cmp	r3, #4
 800c6e4:	d002      	beq.n	800c6ec <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c6e6:	2302      	movs	r3, #2
 800c6e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c6ea:	e0c2      	b.n	800c872 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d005      	beq.n	800c6fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <HAL_SPI_TransmitReceive_DMA+0x6a>
 800c6f8:	887b      	ldrh	r3, [r7, #2]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d102      	bne.n	800c704 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c702:	e0b6      	b.n	800c872 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c70a:	b2db      	uxtb	r3, r3
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d003      	beq.n	800c718 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2205      	movs	r2, #5
 800c714:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2200      	movs	r2, #0
 800c71c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	887a      	ldrh	r2, [r7, #2]
 800c728:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	887a      	ldrh	r2, [r7, #2]
 800c72e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	887a      	ldrh	r2, [r7, #2]
 800c73a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	887a      	ldrh	r2, [r7, #2]
 800c740:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	2200      	movs	r2, #0
 800c746:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2200      	movs	r2, #0
 800c74c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c754:	b2db      	uxtb	r3, r3
 800c756:	2b04      	cmp	r3, #4
 800c758:	d108      	bne.n	800c76c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c75e:	4a49      	ldr	r2, [pc, #292]	; (800c884 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 800c760:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c766:	4a48      	ldr	r2, [pc, #288]	; (800c888 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800c768:	63da      	str	r2, [r3, #60]	; 0x3c
 800c76a:	e007      	b.n	800c77c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c770:	4a46      	ldr	r2, [pc, #280]	; (800c88c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800c772:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c778:	4a45      	ldr	r2, [pc, #276]	; (800c890 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800c77a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c780:	4a44      	ldr	r2, [pc, #272]	; (800c894 <HAL_SPI_TransmitReceive_DMA+0x200>)
 800c782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c788:	2200      	movs	r2, #0
 800c78a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	330c      	adds	r3, #12
 800c796:	4619      	mov	r1, r3
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c79c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c7a2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800c7a4:	f7fb fc54 	bl	8008050 <HAL_DMA_Start_IT>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00c      	beq.n	800c7c8 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7b2:	f043 0210 	orr.w	r2, r3, #16
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800c7c6:	e054      	b.n	800c872 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	685a      	ldr	r2, [r3, #4]
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f042 0201 	orr.w	r2, r2, #1
 800c7d6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7dc:	2200      	movs	r2, #0
 800c7de:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c800:	4619      	mov	r1, r3
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	330c      	adds	r3, #12
 800c808:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c80e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800c810:	f7fb fc1e 	bl	8008050 <HAL_DMA_Start_IT>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d00c      	beq.n	800c834 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c81e:	f043 0210 	orr.w	r2, r3, #16
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800c826:	2301      	movs	r3, #1
 800c828:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2201      	movs	r2, #1
 800c82e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800c832:	e01e      	b.n	800c872 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c83e:	2b40      	cmp	r3, #64	; 0x40
 800c840:	d007      	beq.n	800c852 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c850:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0220 	orr.w	r2, r2, #32
 800c860:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f042 0202 	orr.w	r2, r2, #2
 800c870:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c87c:	4618      	mov	r0, r3
 800c87e:	3718      	adds	r7, #24
 800c880:	46bd      	mov	sp, r7
 800c882:	bd80      	pop	{r7, pc}
 800c884:	0800ca3d 	.word	0x0800ca3d
 800c888:	0800c905 	.word	0x0800c905
 800c88c:	0800ca59 	.word	0x0800ca59
 800c890:	0800c9ad 	.word	0x0800c9ad
 800c894:	0800ca75 	.word	0x0800ca75

0800c898 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c8a0:	bf00      	nop
 800c8a2:	370c      	adds	r7, #12
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8aa:	4770      	bx	lr

0800c8ac <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	b083      	sub	sp, #12
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800c8b4:	bf00      	nop
 800c8b6:	370c      	adds	r7, #12
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8be:	4770      	bx	lr

0800c8c0 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800c8c8:	bf00      	nop
 800c8ca:	370c      	adds	r7, #12
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d2:	4770      	bx	lr

0800c8d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b083      	sub	sp, #12
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c8dc:	bf00      	nop
 800c8de:	370c      	adds	r7, #12
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e6:	4770      	bx	lr

0800c8e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c8f6:	b2db      	uxtb	r3, r3
}
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c910:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c912:	f7fa fe15 	bl	8007540 <HAL_GetTick>
 800c916:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c926:	d03b      	beq.n	800c9a0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	685a      	ldr	r2, [r3, #4]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f022 0220 	bic.w	r2, r2, #32
 800c936:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d10d      	bne.n	800c95c <SPI_DMAReceiveCplt+0x58>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c948:	d108      	bne.n	800c95c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	685a      	ldr	r2, [r3, #4]
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f022 0203 	bic.w	r2, r2, #3
 800c958:	605a      	str	r2, [r3, #4]
 800c95a:	e007      	b.n	800c96c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685a      	ldr	r2, [r3, #4]
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	f022 0201 	bic.w	r2, r2, #1
 800c96a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	2164      	movs	r1, #100	; 0x64
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 f909 	bl	800cb88 <SPI_EndRxTransaction>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d002      	beq.n	800c982 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2220      	movs	r2, #32
 800c980:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	2200      	movs	r2, #0
 800c986:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2201      	movs	r2, #1
 800c98c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c994:	2b00      	cmp	r3, #0
 800c996:	d003      	beq.n	800c9a0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff ff9b 	bl	800c8d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c99e:	e002      	b.n	800c9a6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f7ff ff79 	bl	800c898 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c9a6:	3710      	adds	r7, #16
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b8:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c9ba:	f7fa fdc1 	bl	8007540 <HAL_GetTick>
 800c9be:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9ce:	d02f      	beq.n	800ca30 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	685a      	ldr	r2, [r3, #4]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f022 0220 	bic.w	r2, r2, #32
 800c9de:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	2164      	movs	r1, #100	; 0x64
 800c9e4:	68f8      	ldr	r0, [r7, #12]
 800c9e6:	f000 f935 	bl	800cc54 <SPI_EndRxTxTransaction>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d005      	beq.n	800c9fc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9f4:	f043 0220 	orr.w	r2, r3, #32
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f022 0203 	bic.w	r2, r2, #3
 800ca0a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2200      	movs	r2, #0
 800ca10:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2200      	movs	r2, #0
 800ca16:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d003      	beq.n	800ca30 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ca28:	68f8      	ldr	r0, [r7, #12]
 800ca2a:	f7ff ff53 	bl	800c8d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ca2e:	e002      	b.n	800ca36 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f7f7 ff91 	bl	8004958 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca36:	3710      	adds	r7, #16
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bd80      	pop	{r7, pc}

0800ca3c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca48:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff ff2e 	bl	800c8ac <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca50:	bf00      	nop
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b084      	sub	sp, #16
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca64:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800ca66:	68f8      	ldr	r0, [r7, #12]
 800ca68:	f7ff ff2a 	bl	800c8c0 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ca6c:	bf00      	nop
 800ca6e:	3710      	adds	r7, #16
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b084      	sub	sp, #16
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca80:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	f022 0203 	bic.w	r2, r2, #3
 800ca90:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca96:	f043 0210 	orr.w	r2, r3, #16
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2201      	movs	r2, #1
 800caa2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800caa6:	68f8      	ldr	r0, [r7, #12]
 800caa8:	f7ff ff14 	bl	800c8d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800caac:	bf00      	nop
 800caae:	3710      	adds	r7, #16
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b084      	sub	sp, #16
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	603b      	str	r3, [r7, #0]
 800cac0:	4613      	mov	r3, r2
 800cac2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cac4:	e04c      	b.n	800cb60 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cacc:	d048      	beq.n	800cb60 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800cace:	f7fa fd37 	bl	8007540 <HAL_GetTick>
 800cad2:	4602      	mov	r2, r0
 800cad4:	69bb      	ldr	r3, [r7, #24]
 800cad6:	1ad3      	subs	r3, r2, r3
 800cad8:	683a      	ldr	r2, [r7, #0]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d902      	bls.n	800cae4 <SPI_WaitFlagStateUntilTimeout+0x30>
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d13d      	bne.n	800cb60 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	685a      	ldr	r2, [r3, #4]
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800caf2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	685b      	ldr	r3, [r3, #4]
 800caf8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cafc:	d111      	bne.n	800cb22 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	689b      	ldr	r3, [r3, #8]
 800cb02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb06:	d004      	beq.n	800cb12 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb10:	d107      	bne.n	800cb22 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681a      	ldr	r2, [r3, #0]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb20:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb2a:	d10f      	bne.n	800cb4c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	681a      	ldr	r2, [r3, #0]
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb4a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2200      	movs	r2, #0
 800cb58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	e00f      	b.n	800cb80 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	689a      	ldr	r2, [r3, #8]
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	4013      	ands	r3, r2
 800cb6a:	68ba      	ldr	r2, [r7, #8]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	bf0c      	ite	eq
 800cb70:	2301      	moveq	r3, #1
 800cb72:	2300      	movne	r3, #0
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	461a      	mov	r2, r3
 800cb78:	79fb      	ldrb	r3, [r7, #7]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d1a3      	bne.n	800cac6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800cb7e:	2300      	movs	r3, #0
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b086      	sub	sp, #24
 800cb8c:	af02      	add	r7, sp, #8
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cb9c:	d111      	bne.n	800cbc2 <SPI_EndRxTransaction+0x3a>
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cba6:	d004      	beq.n	800cbb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	689b      	ldr	r3, [r3, #8]
 800cbac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbb0:	d107      	bne.n	800cbc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cbc0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	685b      	ldr	r3, [r3, #4]
 800cbc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbca:	d12a      	bne.n	800cc22 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cbd4:	d012      	beq.n	800cbfc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	9300      	str	r3, [sp, #0]
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	2180      	movs	r1, #128	; 0x80
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f7ff ff67 	bl	800cab4 <SPI_WaitFlagStateUntilTimeout>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d02d      	beq.n	800cc48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf0:	f043 0220 	orr.w	r2, r3, #32
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e026      	b.n	800cc4a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	9300      	str	r3, [sp, #0]
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2200      	movs	r2, #0
 800cc04:	2101      	movs	r1, #1
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f7ff ff54 	bl	800cab4 <SPI_WaitFlagStateUntilTimeout>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d01a      	beq.n	800cc48 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc16:	f043 0220 	orr.w	r2, r3, #32
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800cc1e:	2303      	movs	r3, #3
 800cc20:	e013      	b.n	800cc4a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	9300      	str	r3, [sp, #0]
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	2101      	movs	r1, #1
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7ff ff41 	bl	800cab4 <SPI_WaitFlagStateUntilTimeout>
 800cc32:	4603      	mov	r3, r0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d007      	beq.n	800cc48 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc3c:	f043 0220 	orr.w	r2, r3, #32
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cc44:	2303      	movs	r3, #3
 800cc46:	e000      	b.n	800cc4a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
	...

0800cc54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af02      	add	r7, sp, #8
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cc60:	4b1b      	ldr	r3, [pc, #108]	; (800ccd0 <SPI_EndRxTxTransaction+0x7c>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4a1b      	ldr	r2, [pc, #108]	; (800ccd4 <SPI_EndRxTxTransaction+0x80>)
 800cc66:	fba2 2303 	umull	r2, r3, r2, r3
 800cc6a:	0d5b      	lsrs	r3, r3, #21
 800cc6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cc70:	fb02 f303 	mul.w	r3, r2, r3
 800cc74:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cc7e:	d112      	bne.n	800cca6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	2200      	movs	r2, #0
 800cc88:	2180      	movs	r1, #128	; 0x80
 800cc8a:	68f8      	ldr	r0, [r7, #12]
 800cc8c:	f7ff ff12 	bl	800cab4 <SPI_WaitFlagStateUntilTimeout>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d016      	beq.n	800ccc4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc9a:	f043 0220 	orr.w	r2, r3, #32
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800cca2:	2303      	movs	r3, #3
 800cca4:	e00f      	b.n	800ccc6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d00a      	beq.n	800ccc2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800ccac:	697b      	ldr	r3, [r7, #20]
 800ccae:	3b01      	subs	r3, #1
 800ccb0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	689b      	ldr	r3, [r3, #8]
 800ccb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccbc:	2b80      	cmp	r3, #128	; 0x80
 800ccbe:	d0f2      	beq.n	800cca6 <SPI_EndRxTxTransaction+0x52>
 800ccc0:	e000      	b.n	800ccc4 <SPI_EndRxTxTransaction+0x70>
        break;
 800ccc2:	bf00      	nop
  }

  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3718      	adds	r7, #24
 800ccca:	46bd      	mov	sp, r7
 800cccc:	bd80      	pop	{r7, pc}
 800ccce:	bf00      	nop
 800ccd0:	20000280 	.word	0x20000280
 800ccd4:	165e9f81 	.word	0x165e9f81

0800ccd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d101      	bne.n	800ccea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e01d      	b.n	800cd26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d106      	bne.n	800cd04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f7fa f980 	bl	8007004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	2202      	movs	r2, #2
 800cd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681a      	ldr	r2, [r3, #0]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	3304      	adds	r3, #4
 800cd14:	4619      	mov	r1, r3
 800cd16:	4610      	mov	r0, r2
 800cd18:	f000 fb68 	bl	800d3ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2201      	movs	r2, #1
 800cd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cd24:	2300      	movs	r3, #0
}
 800cd26:	4618      	mov	r0, r3
 800cd28:	3708      	adds	r7, #8
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	bd80      	pop	{r7, pc}

0800cd2e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cd2e:	b480      	push	{r7}
 800cd30:	b085      	sub	sp, #20
 800cd32:	af00      	add	r7, sp, #0
 800cd34:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	2202      	movs	r2, #2
 800cd3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	689b      	ldr	r3, [r3, #8]
 800cd44:	f003 0307 	and.w	r3, r3, #7
 800cd48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b06      	cmp	r3, #6
 800cd4e:	d007      	beq.n	800cd60 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f042 0201 	orr.w	r2, r2, #1
 800cd5e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3714      	adds	r7, #20
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b085      	sub	sp, #20
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	68da      	ldr	r2, [r3, #12]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f042 0201 	orr.w	r2, r2, #1
 800cd8c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	f003 0307 	and.w	r3, r3, #7
 800cd98:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2b06      	cmp	r3, #6
 800cd9e:	d007      	beq.n	800cdb0 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	f042 0201 	orr.w	r2, r2, #1
 800cdae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cdb0:	2300      	movs	r3, #0
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3714      	adds	r7, #20
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbc:	4770      	bx	lr

0800cdbe <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cdbe:	b580      	push	{r7, lr}
 800cdc0:	b082      	sub	sp, #8
 800cdc2:	af00      	add	r7, sp, #0
 800cdc4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d101      	bne.n	800cdd0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e01d      	b.n	800ce0c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdd6:	b2db      	uxtb	r3, r3
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d106      	bne.n	800cdea <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2200      	movs	r2, #0
 800cde0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7fa f8ed 	bl	8006fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2202      	movs	r2, #2
 800cdee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681a      	ldr	r2, [r3, #0]
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3304      	adds	r3, #4
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	4610      	mov	r0, r2
 800cdfe:	f000 faf5 	bl	800d3ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	2201      	movs	r2, #1
 800ce06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2201      	movs	r2, #1
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	4618      	mov	r0, r3
 800ce28:	f000 fdca 	bl	800d9c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4a15      	ldr	r2, [pc, #84]	; (800ce88 <HAL_TIM_PWM_Start+0x74>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d004      	beq.n	800ce40 <HAL_TIM_PWM_Start+0x2c>
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a14      	ldr	r2, [pc, #80]	; (800ce8c <HAL_TIM_PWM_Start+0x78>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d101      	bne.n	800ce44 <HAL_TIM_PWM_Start+0x30>
 800ce40:	2301      	movs	r3, #1
 800ce42:	e000      	b.n	800ce46 <HAL_TIM_PWM_Start+0x32>
 800ce44:	2300      	movs	r3, #0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d007      	beq.n	800ce5a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	689b      	ldr	r3, [r3, #8]
 800ce60:	f003 0307 	and.w	r3, r3, #7
 800ce64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b06      	cmp	r3, #6
 800ce6a:	d007      	beq.n	800ce7c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	681a      	ldr	r2, [r3, #0]
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f042 0201 	orr.w	r2, r2, #1
 800ce7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce7c:	2300      	movs	r3, #0
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	40010000 	.word	0x40010000
 800ce8c:	40010400 	.word	0x40010400

0800ce90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	f003 0302 	and.w	r3, r3, #2
 800cea2:	2b02      	cmp	r3, #2
 800cea4:	d122      	bne.n	800ceec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	f003 0302 	and.w	r3, r3, #2
 800ceb0:	2b02      	cmp	r3, #2
 800ceb2:	d11b      	bne.n	800ceec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f06f 0202 	mvn.w	r2, #2
 800cebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2201      	movs	r2, #1
 800cec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	699b      	ldr	r3, [r3, #24]
 800ceca:	f003 0303 	and.w	r3, r3, #3
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d003      	beq.n	800ceda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 fa6b 	bl	800d3ae <HAL_TIM_IC_CaptureCallback>
 800ced8:	e005      	b.n	800cee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 fa5d 	bl	800d39a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 fa6e 	bl	800d3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	691b      	ldr	r3, [r3, #16]
 800cef2:	f003 0304 	and.w	r3, r3, #4
 800cef6:	2b04      	cmp	r3, #4
 800cef8:	d122      	bne.n	800cf40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	f003 0304 	and.w	r3, r3, #4
 800cf04:	2b04      	cmp	r3, #4
 800cf06:	d11b      	bne.n	800cf40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f06f 0204 	mvn.w	r2, #4
 800cf10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	2202      	movs	r2, #2
 800cf16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	699b      	ldr	r3, [r3, #24]
 800cf1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f000 fa41 	bl	800d3ae <HAL_TIM_IC_CaptureCallback>
 800cf2c:	e005      	b.n	800cf3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f000 fa33 	bl	800d39a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf34:	6878      	ldr	r0, [r7, #4]
 800cf36:	f000 fa44 	bl	800d3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	691b      	ldr	r3, [r3, #16]
 800cf46:	f003 0308 	and.w	r3, r3, #8
 800cf4a:	2b08      	cmp	r3, #8
 800cf4c:	d122      	bne.n	800cf94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	f003 0308 	and.w	r3, r3, #8
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d11b      	bne.n	800cf94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f06f 0208 	mvn.w	r2, #8
 800cf64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	2204      	movs	r2, #4
 800cf6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	69db      	ldr	r3, [r3, #28]
 800cf72:	f003 0303 	and.w	r3, r3, #3
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fa17 	bl	800d3ae <HAL_TIM_IC_CaptureCallback>
 800cf80:	e005      	b.n	800cf8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	f000 fa09 	bl	800d39a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fa1a 	bl	800d3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	691b      	ldr	r3, [r3, #16]
 800cf9a:	f003 0310 	and.w	r3, r3, #16
 800cf9e:	2b10      	cmp	r3, #16
 800cfa0:	d122      	bne.n	800cfe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	f003 0310 	and.w	r3, r3, #16
 800cfac:	2b10      	cmp	r3, #16
 800cfae:	d11b      	bne.n	800cfe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f06f 0210 	mvn.w	r2, #16
 800cfb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	69db      	ldr	r3, [r3, #28]
 800cfc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d003      	beq.n	800cfd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 f9ed 	bl	800d3ae <HAL_TIM_IC_CaptureCallback>
 800cfd4:	e005      	b.n	800cfe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 f9df 	bl	800d39a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f9f0 	bl	800d3c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	2200      	movs	r2, #0
 800cfe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	691b      	ldr	r3, [r3, #16]
 800cfee:	f003 0301 	and.w	r3, r3, #1
 800cff2:	2b01      	cmp	r3, #1
 800cff4:	d10e      	bne.n	800d014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68db      	ldr	r3, [r3, #12]
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	2b01      	cmp	r3, #1
 800d002:	d107      	bne.n	800d014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f06f 0201 	mvn.w	r2, #1
 800d00c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7f9 fb9c 	bl	800674c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	691b      	ldr	r3, [r3, #16]
 800d01a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d01e:	2b80      	cmp	r3, #128	; 0x80
 800d020:	d10e      	bne.n	800d040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d02c:	2b80      	cmp	r3, #128	; 0x80
 800d02e:	d107      	bne.n	800d040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fd6c 	bl	800db18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d04a:	2b40      	cmp	r3, #64	; 0x40
 800d04c:	d10e      	bne.n	800d06c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	68db      	ldr	r3, [r3, #12]
 800d054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d058:	2b40      	cmp	r3, #64	; 0x40
 800d05a:	d107      	bne.n	800d06c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	f000 f9b5 	bl	800d3d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	691b      	ldr	r3, [r3, #16]
 800d072:	f003 0320 	and.w	r3, r3, #32
 800d076:	2b20      	cmp	r3, #32
 800d078:	d10e      	bne.n	800d098 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	68db      	ldr	r3, [r3, #12]
 800d080:	f003 0320 	and.w	r3, r3, #32
 800d084:	2b20      	cmp	r3, #32
 800d086:	d107      	bne.n	800d098 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	f06f 0220 	mvn.w	r2, #32
 800d090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f000 fd36 	bl	800db04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d098:	bf00      	nop
 800d09a:	3708      	adds	r7, #8
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	60f8      	str	r0, [r7, #12]
 800d0a8:	60b9      	str	r1, [r7, #8]
 800d0aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d101      	bne.n	800d0ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 800d0b6:	2302      	movs	r3, #2
 800d0b8:	e0b4      	b.n	800d224 <HAL_TIM_PWM_ConfigChannel+0x184>
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2202      	movs	r2, #2
 800d0c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2b0c      	cmp	r3, #12
 800d0ce:	f200 809f 	bhi.w	800d210 <HAL_TIM_PWM_ConfigChannel+0x170>
 800d0d2:	a201      	add	r2, pc, #4	; (adr r2, 800d0d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800d0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0d8:	0800d10d 	.word	0x0800d10d
 800d0dc:	0800d211 	.word	0x0800d211
 800d0e0:	0800d211 	.word	0x0800d211
 800d0e4:	0800d211 	.word	0x0800d211
 800d0e8:	0800d14d 	.word	0x0800d14d
 800d0ec:	0800d211 	.word	0x0800d211
 800d0f0:	0800d211 	.word	0x0800d211
 800d0f4:	0800d211 	.word	0x0800d211
 800d0f8:	0800d18f 	.word	0x0800d18f
 800d0fc:	0800d211 	.word	0x0800d211
 800d100:	0800d211 	.word	0x0800d211
 800d104:	0800d211 	.word	0x0800d211
 800d108:	0800d1cf 	.word	0x0800d1cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68b9      	ldr	r1, [r7, #8]
 800d112:	4618      	mov	r0, r3
 800d114:	f000 fa0a 	bl	800d52c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	699a      	ldr	r2, [r3, #24]
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f042 0208 	orr.w	r2, r2, #8
 800d126:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	699a      	ldr	r2, [r3, #24]
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 0204 	bic.w	r2, r2, #4
 800d136:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	6999      	ldr	r1, [r3, #24]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	691a      	ldr	r2, [r3, #16]
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	430a      	orrs	r2, r1
 800d148:	619a      	str	r2, [r3, #24]
      break;
 800d14a:	e062      	b.n	800d212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	4618      	mov	r0, r3
 800d154:	f000 fa5a 	bl	800d60c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	699a      	ldr	r2, [r3, #24]
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	699a      	ldr	r2, [r3, #24]
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	6999      	ldr	r1, [r3, #24]
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	691b      	ldr	r3, [r3, #16]
 800d182:	021a      	lsls	r2, r3, #8
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	430a      	orrs	r2, r1
 800d18a:	619a      	str	r2, [r3, #24]
      break;
 800d18c:	e041      	b.n	800d212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	68b9      	ldr	r1, [r7, #8]
 800d194:	4618      	mov	r0, r3
 800d196:	f000 faaf 	bl	800d6f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	69da      	ldr	r2, [r3, #28]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	f042 0208 	orr.w	r2, r2, #8
 800d1a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	69da      	ldr	r2, [r3, #28]
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f022 0204 	bic.w	r2, r2, #4
 800d1b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	69d9      	ldr	r1, [r3, #28]
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	691a      	ldr	r2, [r3, #16]
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	430a      	orrs	r2, r1
 800d1ca:	61da      	str	r2, [r3, #28]
      break;
 800d1cc:	e021      	b.n	800d212 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	68b9      	ldr	r1, [r7, #8]
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	f000 fb03 	bl	800d7e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	69da      	ldr	r2, [r3, #28]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d1e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	69da      	ldr	r2, [r3, #28]
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d1f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	69d9      	ldr	r1, [r3, #28]
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	691b      	ldr	r3, [r3, #16]
 800d204:	021a      	lsls	r2, r3, #8
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	430a      	orrs	r2, r1
 800d20c:	61da      	str	r2, [r3, #28]
      break;
 800d20e:	e000      	b.n	800d212 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d210:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2201      	movs	r2, #1
 800d216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	2200      	movs	r2, #0
 800d21e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3710      	adds	r7, #16
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}

0800d22c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d23c:	2b01      	cmp	r3, #1
 800d23e:	d101      	bne.n	800d244 <HAL_TIM_ConfigClockSource+0x18>
 800d240:	2302      	movs	r3, #2
 800d242:	e0a6      	b.n	800d392 <HAL_TIM_ConfigClockSource+0x166>
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	2201      	movs	r2, #1
 800d248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2202      	movs	r2, #2
 800d250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	689b      	ldr	r3, [r3, #8]
 800d25a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d26a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b40      	cmp	r3, #64	; 0x40
 800d27a:	d067      	beq.n	800d34c <HAL_TIM_ConfigClockSource+0x120>
 800d27c:	2b40      	cmp	r3, #64	; 0x40
 800d27e:	d80b      	bhi.n	800d298 <HAL_TIM_ConfigClockSource+0x6c>
 800d280:	2b10      	cmp	r3, #16
 800d282:	d073      	beq.n	800d36c <HAL_TIM_ConfigClockSource+0x140>
 800d284:	2b10      	cmp	r3, #16
 800d286:	d802      	bhi.n	800d28e <HAL_TIM_ConfigClockSource+0x62>
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d06f      	beq.n	800d36c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d28c:	e078      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d28e:	2b20      	cmp	r3, #32
 800d290:	d06c      	beq.n	800d36c <HAL_TIM_ConfigClockSource+0x140>
 800d292:	2b30      	cmp	r3, #48	; 0x30
 800d294:	d06a      	beq.n	800d36c <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d296:	e073      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d298:	2b70      	cmp	r3, #112	; 0x70
 800d29a:	d00d      	beq.n	800d2b8 <HAL_TIM_ConfigClockSource+0x8c>
 800d29c:	2b70      	cmp	r3, #112	; 0x70
 800d29e:	d804      	bhi.n	800d2aa <HAL_TIM_ConfigClockSource+0x7e>
 800d2a0:	2b50      	cmp	r3, #80	; 0x50
 800d2a2:	d033      	beq.n	800d30c <HAL_TIM_ConfigClockSource+0xe0>
 800d2a4:	2b60      	cmp	r3, #96	; 0x60
 800d2a6:	d041      	beq.n	800d32c <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d2a8:	e06a      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d2aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d2ae:	d066      	beq.n	800d37e <HAL_TIM_ConfigClockSource+0x152>
 800d2b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2b4:	d017      	beq.n	800d2e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d2b6:	e063      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6818      	ldr	r0, [r3, #0]
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	6899      	ldr	r1, [r3, #8]
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	685a      	ldr	r2, [r3, #4]
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	68db      	ldr	r3, [r3, #12]
 800d2c8:	f000 fb5a 	bl	800d980 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d2da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	68fa      	ldr	r2, [r7, #12]
 800d2e2:	609a      	str	r2, [r3, #8]
      break;
 800d2e4:	e04c      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	6818      	ldr	r0, [r3, #0]
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	6899      	ldr	r1, [r3, #8]
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	685a      	ldr	r2, [r3, #4]
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	68db      	ldr	r3, [r3, #12]
 800d2f6:	f000 fb43 	bl	800d980 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	689a      	ldr	r2, [r3, #8]
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d308:	609a      	str	r2, [r3, #8]
      break;
 800d30a:	e039      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	6818      	ldr	r0, [r3, #0]
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	6859      	ldr	r1, [r3, #4]
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	461a      	mov	r2, r3
 800d31a:	f000 fab7 	bl	800d88c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	2150      	movs	r1, #80	; 0x50
 800d324:	4618      	mov	r0, r3
 800d326:	f000 fb10 	bl	800d94a <TIM_ITRx_SetConfig>
      break;
 800d32a:	e029      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6818      	ldr	r0, [r3, #0]
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	6859      	ldr	r1, [r3, #4]
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	68db      	ldr	r3, [r3, #12]
 800d338:	461a      	mov	r2, r3
 800d33a:	f000 fad6 	bl	800d8ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	2160      	movs	r1, #96	; 0x60
 800d344:	4618      	mov	r0, r3
 800d346:	f000 fb00 	bl	800d94a <TIM_ITRx_SetConfig>
      break;
 800d34a:	e019      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6818      	ldr	r0, [r3, #0]
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	6859      	ldr	r1, [r3, #4]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	461a      	mov	r2, r3
 800d35a:	f000 fa97 	bl	800d88c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2140      	movs	r1, #64	; 0x40
 800d364:	4618      	mov	r0, r3
 800d366:	f000 faf0 	bl	800d94a <TIM_ITRx_SetConfig>
      break;
 800d36a:	e009      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681a      	ldr	r2, [r3, #0]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	4619      	mov	r1, r3
 800d376:	4610      	mov	r0, r2
 800d378:	f000 fae7 	bl	800d94a <TIM_ITRx_SetConfig>
      break;
 800d37c:	e000      	b.n	800d380 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d37e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	2201      	movs	r2, #1
 800d384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3710      	adds	r7, #16
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}

0800d39a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d39a:	b480      	push	{r7}
 800d39c:	b083      	sub	sp, #12
 800d39e:	af00      	add	r7, sp, #0
 800d3a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d3a2:	bf00      	nop
 800d3a4:	370c      	adds	r7, #12
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ac:	4770      	bx	lr

0800d3ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d3ae:	b480      	push	{r7}
 800d3b0:	b083      	sub	sp, #12
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d3b6:	bf00      	nop
 800d3b8:	370c      	adds	r7, #12
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	b083      	sub	sp, #12
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d3ca:	bf00      	nop
 800d3cc:	370c      	adds	r7, #12
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr

0800d3d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d3de:	bf00      	nop
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
	...

0800d3ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b085      	sub	sp, #20
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	4a40      	ldr	r2, [pc, #256]	; (800d500 <TIM_Base_SetConfig+0x114>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d013      	beq.n	800d42c <TIM_Base_SetConfig+0x40>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d40a:	d00f      	beq.n	800d42c <TIM_Base_SetConfig+0x40>
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	4a3d      	ldr	r2, [pc, #244]	; (800d504 <TIM_Base_SetConfig+0x118>)
 800d410:	4293      	cmp	r3, r2
 800d412:	d00b      	beq.n	800d42c <TIM_Base_SetConfig+0x40>
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	4a3c      	ldr	r2, [pc, #240]	; (800d508 <TIM_Base_SetConfig+0x11c>)
 800d418:	4293      	cmp	r3, r2
 800d41a:	d007      	beq.n	800d42c <TIM_Base_SetConfig+0x40>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a3b      	ldr	r2, [pc, #236]	; (800d50c <TIM_Base_SetConfig+0x120>)
 800d420:	4293      	cmp	r3, r2
 800d422:	d003      	beq.n	800d42c <TIM_Base_SetConfig+0x40>
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	4a3a      	ldr	r2, [pc, #232]	; (800d510 <TIM_Base_SetConfig+0x124>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d108      	bne.n	800d43e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	685b      	ldr	r3, [r3, #4]
 800d438:	68fa      	ldr	r2, [r7, #12]
 800d43a:	4313      	orrs	r3, r2
 800d43c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	4a2f      	ldr	r2, [pc, #188]	; (800d500 <TIM_Base_SetConfig+0x114>)
 800d442:	4293      	cmp	r3, r2
 800d444:	d02b      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d44c:	d027      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	4a2c      	ldr	r2, [pc, #176]	; (800d504 <TIM_Base_SetConfig+0x118>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d023      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	4a2b      	ldr	r2, [pc, #172]	; (800d508 <TIM_Base_SetConfig+0x11c>)
 800d45a:	4293      	cmp	r3, r2
 800d45c:	d01f      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	4a2a      	ldr	r2, [pc, #168]	; (800d50c <TIM_Base_SetConfig+0x120>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d01b      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	4a29      	ldr	r2, [pc, #164]	; (800d510 <TIM_Base_SetConfig+0x124>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d017      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	4a28      	ldr	r2, [pc, #160]	; (800d514 <TIM_Base_SetConfig+0x128>)
 800d472:	4293      	cmp	r3, r2
 800d474:	d013      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	4a27      	ldr	r2, [pc, #156]	; (800d518 <TIM_Base_SetConfig+0x12c>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d00f      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	4a26      	ldr	r2, [pc, #152]	; (800d51c <TIM_Base_SetConfig+0x130>)
 800d482:	4293      	cmp	r3, r2
 800d484:	d00b      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	4a25      	ldr	r2, [pc, #148]	; (800d520 <TIM_Base_SetConfig+0x134>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d007      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	4a24      	ldr	r2, [pc, #144]	; (800d524 <TIM_Base_SetConfig+0x138>)
 800d492:	4293      	cmp	r3, r2
 800d494:	d003      	beq.n	800d49e <TIM_Base_SetConfig+0xb2>
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a23      	ldr	r2, [pc, #140]	; (800d528 <TIM_Base_SetConfig+0x13c>)
 800d49a:	4293      	cmp	r3, r2
 800d49c:	d108      	bne.n	800d4b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4313      	orrs	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	695b      	ldr	r3, [r3, #20]
 800d4ba:	4313      	orrs	r3, r2
 800d4bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68fa      	ldr	r2, [r7, #12]
 800d4c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d4c4:	683b      	ldr	r3, [r7, #0]
 800d4c6:	689a      	ldr	r2, [r3, #8]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	4a0a      	ldr	r2, [pc, #40]	; (800d500 <TIM_Base_SetConfig+0x114>)
 800d4d8:	4293      	cmp	r3, r2
 800d4da:	d003      	beq.n	800d4e4 <TIM_Base_SetConfig+0xf8>
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	4a0c      	ldr	r2, [pc, #48]	; (800d510 <TIM_Base_SetConfig+0x124>)
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d103      	bne.n	800d4ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	691a      	ldr	r2, [r3, #16]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	615a      	str	r2, [r3, #20]
}
 800d4f2:	bf00      	nop
 800d4f4:	3714      	adds	r7, #20
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fc:	4770      	bx	lr
 800d4fe:	bf00      	nop
 800d500:	40010000 	.word	0x40010000
 800d504:	40000400 	.word	0x40000400
 800d508:	40000800 	.word	0x40000800
 800d50c:	40000c00 	.word	0x40000c00
 800d510:	40010400 	.word	0x40010400
 800d514:	40014000 	.word	0x40014000
 800d518:	40014400 	.word	0x40014400
 800d51c:	40014800 	.word	0x40014800
 800d520:	40001800 	.word	0x40001800
 800d524:	40001c00 	.word	0x40001c00
 800d528:	40002000 	.word	0x40002000

0800d52c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d52c:	b480      	push	{r7}
 800d52e:	b087      	sub	sp, #28
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6a1b      	ldr	r3, [r3, #32]
 800d53a:	f023 0201 	bic.w	r2, r3, #1
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	6a1b      	ldr	r3, [r3, #32]
 800d546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	699b      	ldr	r3, [r3, #24]
 800d552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d55a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f023 0303 	bic.w	r3, r3, #3
 800d562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	4313      	orrs	r3, r2
 800d56c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	f023 0302 	bic.w	r3, r3, #2
 800d574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	689b      	ldr	r3, [r3, #8]
 800d57a:	697a      	ldr	r2, [r7, #20]
 800d57c:	4313      	orrs	r3, r2
 800d57e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	4a20      	ldr	r2, [pc, #128]	; (800d604 <TIM_OC1_SetConfig+0xd8>)
 800d584:	4293      	cmp	r3, r2
 800d586:	d003      	beq.n	800d590 <TIM_OC1_SetConfig+0x64>
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4a1f      	ldr	r2, [pc, #124]	; (800d608 <TIM_OC1_SetConfig+0xdc>)
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d10c      	bne.n	800d5aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	f023 0308 	bic.w	r3, r3, #8
 800d596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	697a      	ldr	r2, [r7, #20]
 800d59e:	4313      	orrs	r3, r2
 800d5a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	f023 0304 	bic.w	r3, r3, #4
 800d5a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4a15      	ldr	r2, [pc, #84]	; (800d604 <TIM_OC1_SetConfig+0xd8>)
 800d5ae:	4293      	cmp	r3, r2
 800d5b0:	d003      	beq.n	800d5ba <TIM_OC1_SetConfig+0x8e>
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	4a14      	ldr	r2, [pc, #80]	; (800d608 <TIM_OC1_SetConfig+0xdc>)
 800d5b6:	4293      	cmp	r3, r2
 800d5b8:	d111      	bne.n	800d5de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d5c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d5c2:	693b      	ldr	r3, [r7, #16]
 800d5c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	695b      	ldr	r3, [r3, #20]
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	699b      	ldr	r3, [r3, #24]
 800d5d8:	693a      	ldr	r2, [r7, #16]
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	693a      	ldr	r2, [r7, #16]
 800d5e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	68fa      	ldr	r2, [r7, #12]
 800d5e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	685a      	ldr	r2, [r3, #4]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	621a      	str	r2, [r3, #32]
}
 800d5f8:	bf00      	nop
 800d5fa:	371c      	adds	r7, #28
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr
 800d604:	40010000 	.word	0x40010000
 800d608:	40010400 	.word	0x40010400

0800d60c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b087      	sub	sp, #28
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
 800d614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	6a1b      	ldr	r3, [r3, #32]
 800d61a:	f023 0210 	bic.w	r2, r3, #16
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6a1b      	ldr	r3, [r3, #32]
 800d626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	685b      	ldr	r3, [r3, #4]
 800d62c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	699b      	ldr	r3, [r3, #24]
 800d632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d63a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d642:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	021b      	lsls	r3, r3, #8
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	4313      	orrs	r3, r2
 800d64e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	f023 0320 	bic.w	r3, r3, #32
 800d656:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	689b      	ldr	r3, [r3, #8]
 800d65c:	011b      	lsls	r3, r3, #4
 800d65e:	697a      	ldr	r2, [r7, #20]
 800d660:	4313      	orrs	r3, r2
 800d662:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	4a22      	ldr	r2, [pc, #136]	; (800d6f0 <TIM_OC2_SetConfig+0xe4>)
 800d668:	4293      	cmp	r3, r2
 800d66a:	d003      	beq.n	800d674 <TIM_OC2_SetConfig+0x68>
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	4a21      	ldr	r2, [pc, #132]	; (800d6f4 <TIM_OC2_SetConfig+0xe8>)
 800d670:	4293      	cmp	r3, r2
 800d672:	d10d      	bne.n	800d690 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d67a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	68db      	ldr	r3, [r3, #12]
 800d680:	011b      	lsls	r3, r3, #4
 800d682:	697a      	ldr	r2, [r7, #20]
 800d684:	4313      	orrs	r3, r2
 800d686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d68e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	4a17      	ldr	r2, [pc, #92]	; (800d6f0 <TIM_OC2_SetConfig+0xe4>)
 800d694:	4293      	cmp	r3, r2
 800d696:	d003      	beq.n	800d6a0 <TIM_OC2_SetConfig+0x94>
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	4a16      	ldr	r2, [pc, #88]	; (800d6f4 <TIM_OC2_SetConfig+0xe8>)
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d113      	bne.n	800d6c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d6a0:	693b      	ldr	r3, [r7, #16]
 800d6a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d6a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d6a8:	693b      	ldr	r3, [r7, #16]
 800d6aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d6ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	695b      	ldr	r3, [r3, #20]
 800d6b4:	009b      	lsls	r3, r3, #2
 800d6b6:	693a      	ldr	r2, [r7, #16]
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	699b      	ldr	r3, [r3, #24]
 800d6c0:	009b      	lsls	r3, r3, #2
 800d6c2:	693a      	ldr	r2, [r7, #16]
 800d6c4:	4313      	orrs	r3, r2
 800d6c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	693a      	ldr	r2, [r7, #16]
 800d6cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68fa      	ldr	r2, [r7, #12]
 800d6d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	685a      	ldr	r2, [r3, #4]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	621a      	str	r2, [r3, #32]
}
 800d6e2:	bf00      	nop
 800d6e4:	371c      	adds	r7, #28
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ec:	4770      	bx	lr
 800d6ee:	bf00      	nop
 800d6f0:	40010000 	.word	0x40010000
 800d6f4:	40010400 	.word	0x40010400

0800d6f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d6f8:	b480      	push	{r7}
 800d6fa:	b087      	sub	sp, #28
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
 800d700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6a1b      	ldr	r3, [r3, #32]
 800d706:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	6a1b      	ldr	r3, [r3, #32]
 800d712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	69db      	ldr	r3, [r3, #28]
 800d71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d726:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	f023 0303 	bic.w	r3, r3, #3
 800d72e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	4313      	orrs	r3, r2
 800d738:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d740:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	689b      	ldr	r3, [r3, #8]
 800d746:	021b      	lsls	r3, r3, #8
 800d748:	697a      	ldr	r2, [r7, #20]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	4a21      	ldr	r2, [pc, #132]	; (800d7d8 <TIM_OC3_SetConfig+0xe0>)
 800d752:	4293      	cmp	r3, r2
 800d754:	d003      	beq.n	800d75e <TIM_OC3_SetConfig+0x66>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	4a20      	ldr	r2, [pc, #128]	; (800d7dc <TIM_OC3_SetConfig+0xe4>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d10d      	bne.n	800d77a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d75e:	697b      	ldr	r3, [r7, #20]
 800d760:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d764:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	68db      	ldr	r3, [r3, #12]
 800d76a:	021b      	lsls	r3, r3, #8
 800d76c:	697a      	ldr	r2, [r7, #20]
 800d76e:	4313      	orrs	r3, r2
 800d770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	4a16      	ldr	r2, [pc, #88]	; (800d7d8 <TIM_OC3_SetConfig+0xe0>)
 800d77e:	4293      	cmp	r3, r2
 800d780:	d003      	beq.n	800d78a <TIM_OC3_SetConfig+0x92>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	4a15      	ldr	r2, [pc, #84]	; (800d7dc <TIM_OC3_SetConfig+0xe4>)
 800d786:	4293      	cmp	r3, r2
 800d788:	d113      	bne.n	800d7b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d78a:	693b      	ldr	r3, [r7, #16]
 800d78c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d790:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d792:	693b      	ldr	r3, [r7, #16]
 800d794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d798:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	011b      	lsls	r3, r3, #4
 800d7a0:	693a      	ldr	r2, [r7, #16]
 800d7a2:	4313      	orrs	r3, r2
 800d7a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	011b      	lsls	r3, r3, #4
 800d7ac:	693a      	ldr	r2, [r7, #16]
 800d7ae:	4313      	orrs	r3, r2
 800d7b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	685a      	ldr	r2, [r3, #4]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	697a      	ldr	r2, [r7, #20]
 800d7ca:	621a      	str	r2, [r3, #32]
}
 800d7cc:	bf00      	nop
 800d7ce:	371c      	adds	r7, #28
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr
 800d7d8:	40010000 	.word	0x40010000
 800d7dc:	40010400 	.word	0x40010400

0800d7e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d7e0:	b480      	push	{r7}
 800d7e2:	b087      	sub	sp, #28
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a1b      	ldr	r3, [r3, #32]
 800d7ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	69db      	ldr	r3, [r3, #28]
 800d806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d80e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	021b      	lsls	r3, r3, #8
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4313      	orrs	r3, r2
 800d822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d82a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	689b      	ldr	r3, [r3, #8]
 800d830:	031b      	lsls	r3, r3, #12
 800d832:	693a      	ldr	r2, [r7, #16]
 800d834:	4313      	orrs	r3, r2
 800d836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	4a12      	ldr	r2, [pc, #72]	; (800d884 <TIM_OC4_SetConfig+0xa4>)
 800d83c:	4293      	cmp	r3, r2
 800d83e:	d003      	beq.n	800d848 <TIM_OC4_SetConfig+0x68>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	4a11      	ldr	r2, [pc, #68]	; (800d888 <TIM_OC4_SetConfig+0xa8>)
 800d844:	4293      	cmp	r3, r2
 800d846:	d109      	bne.n	800d85c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d84e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	019b      	lsls	r3, r3, #6
 800d856:	697a      	ldr	r2, [r7, #20]
 800d858:	4313      	orrs	r3, r2
 800d85a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	697a      	ldr	r2, [r7, #20]
 800d860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68fa      	ldr	r2, [r7, #12]
 800d866:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	685a      	ldr	r2, [r3, #4]
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	693a      	ldr	r2, [r7, #16]
 800d874:	621a      	str	r2, [r3, #32]
}
 800d876:	bf00      	nop
 800d878:	371c      	adds	r7, #28
 800d87a:	46bd      	mov	sp, r7
 800d87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d880:	4770      	bx	lr
 800d882:	bf00      	nop
 800d884:	40010000 	.word	0x40010000
 800d888:	40010400 	.word	0x40010400

0800d88c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b087      	sub	sp, #28
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	6a1b      	ldr	r3, [r3, #32]
 800d89c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6a1b      	ldr	r3, [r3, #32]
 800d8a2:	f023 0201 	bic.w	r2, r3, #1
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	699b      	ldr	r3, [r3, #24]
 800d8ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	011b      	lsls	r3, r3, #4
 800d8bc:	693a      	ldr	r2, [r7, #16]
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	f023 030a 	bic.w	r3, r3, #10
 800d8c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d8ca:	697a      	ldr	r2, [r7, #20]
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	4313      	orrs	r3, r2
 800d8d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	693a      	ldr	r2, [r7, #16]
 800d8d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	697a      	ldr	r2, [r7, #20]
 800d8dc:	621a      	str	r2, [r3, #32]
}
 800d8de:	bf00      	nop
 800d8e0:	371c      	adds	r7, #28
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr

0800d8ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d8ea:	b480      	push	{r7}
 800d8ec:	b087      	sub	sp, #28
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	60f8      	str	r0, [r7, #12]
 800d8f2:	60b9      	str	r1, [r7, #8]
 800d8f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	6a1b      	ldr	r3, [r3, #32]
 800d8fa:	f023 0210 	bic.w	r2, r3, #16
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	699b      	ldr	r3, [r3, #24]
 800d906:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6a1b      	ldr	r3, [r3, #32]
 800d90c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d914:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	031b      	lsls	r3, r3, #12
 800d91a:	697a      	ldr	r2, [r7, #20]
 800d91c:	4313      	orrs	r3, r2
 800d91e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d926:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	011b      	lsls	r3, r3, #4
 800d92c:	693a      	ldr	r2, [r7, #16]
 800d92e:	4313      	orrs	r3, r2
 800d930:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	697a      	ldr	r2, [r7, #20]
 800d936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	693a      	ldr	r2, [r7, #16]
 800d93c:	621a      	str	r2, [r3, #32]
}
 800d93e:	bf00      	nop
 800d940:	371c      	adds	r7, #28
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d94a:	b480      	push	{r7}
 800d94c:	b085      	sub	sp, #20
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
 800d952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	689b      	ldr	r3, [r3, #8]
 800d958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d960:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d962:	683a      	ldr	r2, [r7, #0]
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	4313      	orrs	r3, r2
 800d968:	f043 0307 	orr.w	r3, r3, #7
 800d96c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	609a      	str	r2, [r3, #8]
}
 800d974:	bf00      	nop
 800d976:	3714      	adds	r7, #20
 800d978:	46bd      	mov	sp, r7
 800d97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d97e:	4770      	bx	lr

0800d980 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d980:	b480      	push	{r7}
 800d982:	b087      	sub	sp, #28
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
 800d98c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	689b      	ldr	r3, [r3, #8]
 800d992:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d99a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d99c:	683b      	ldr	r3, [r7, #0]
 800d99e:	021a      	lsls	r2, r3, #8
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	431a      	orrs	r2, r3
 800d9a4:	68bb      	ldr	r3, [r7, #8]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	697a      	ldr	r2, [r7, #20]
 800d9aa:	4313      	orrs	r3, r2
 800d9ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	697a      	ldr	r2, [r7, #20]
 800d9b2:	609a      	str	r2, [r3, #8]
}
 800d9b4:	bf00      	nop
 800d9b6:	371c      	adds	r7, #28
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d9c0:	b480      	push	{r7}
 800d9c2:	b087      	sub	sp, #28
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	60f8      	str	r0, [r7, #12]
 800d9c8:	60b9      	str	r1, [r7, #8]
 800d9ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	f003 031f 	and.w	r3, r3, #31
 800d9d2:	2201      	movs	r2, #1
 800d9d4:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	6a1a      	ldr	r2, [r3, #32]
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	43db      	mvns	r3, r3
 800d9e2:	401a      	ands	r2, r3
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6a1a      	ldr	r2, [r3, #32]
 800d9ec:	68bb      	ldr	r3, [r7, #8]
 800d9ee:	f003 031f 	and.w	r3, r3, #31
 800d9f2:	6879      	ldr	r1, [r7, #4]
 800d9f4:	fa01 f303 	lsl.w	r3, r1, r3
 800d9f8:	431a      	orrs	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	621a      	str	r2, [r3, #32]
}
 800d9fe:	bf00      	nop
 800da00:	371c      	adds	r7, #28
 800da02:	46bd      	mov	sp, r7
 800da04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da08:	4770      	bx	lr
	...

0800da0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da0c:	b480      	push	{r7}
 800da0e:	b085      	sub	sp, #20
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d101      	bne.n	800da24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da20:	2302      	movs	r3, #2
 800da22:	e05a      	b.n	800dada <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2202      	movs	r2, #2
 800da30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	689b      	ldr	r3, [r3, #8]
 800da42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	68fa      	ldr	r2, [r7, #12]
 800da52:	4313      	orrs	r3, r2
 800da54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68fa      	ldr	r2, [r7, #12]
 800da5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a21      	ldr	r2, [pc, #132]	; (800dae8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d022      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da70:	d01d      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a1d      	ldr	r2, [pc, #116]	; (800daec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d018      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	4a1b      	ldr	r2, [pc, #108]	; (800daf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800da82:	4293      	cmp	r3, r2
 800da84:	d013      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	4a1a      	ldr	r2, [pc, #104]	; (800daf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d00e      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a18      	ldr	r2, [pc, #96]	; (800daf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d009      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a17      	ldr	r2, [pc, #92]	; (800dafc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d004      	beq.n	800daae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a15      	ldr	r2, [pc, #84]	; (800db00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800daaa:	4293      	cmp	r3, r2
 800daac:	d10c      	bne.n	800dac8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dab4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	68ba      	ldr	r2, [r7, #8]
 800dabc:	4313      	orrs	r3, r2
 800dabe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	68ba      	ldr	r2, [r7, #8]
 800dac6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2200      	movs	r2, #0
 800dad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dad8:	2300      	movs	r3, #0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3714      	adds	r7, #20
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr
 800dae6:	bf00      	nop
 800dae8:	40010000 	.word	0x40010000
 800daec:	40000400 	.word	0x40000400
 800daf0:	40000800 	.word	0x40000800
 800daf4:	40000c00 	.word	0x40000c00
 800daf8:	40010400 	.word	0x40010400
 800dafc:	40014000 	.word	0x40014000
 800db00:	40001800 	.word	0x40001800

0800db04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db04:	b480      	push	{r7}
 800db06:	b083      	sub	sp, #12
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db0c:	bf00      	nop
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db18:	b480      	push	{r7}
 800db1a:	b083      	sub	sp, #12
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db20:	bf00      	nop
 800db22:	370c      	adds	r7, #12
 800db24:	46bd      	mov	sp, r7
 800db26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2a:	4770      	bx	lr

0800db2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800db2c:	b084      	sub	sp, #16
 800db2e:	b580      	push	{r7, lr}
 800db30:	b084      	sub	sp, #16
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
 800db36:	f107 001c 	add.w	r0, r7, #28
 800db3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800db3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db40:	2b01      	cmp	r3, #1
 800db42:	d122      	bne.n	800db8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800db58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db5c:	687a      	ldr	r2, [r7, #4]
 800db5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800db6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6e:	2b01      	cmp	r3, #1
 800db70:	d105      	bne.n	800db7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f001 fac0 	bl	800f104 <USB_CoreReset>
 800db84:	4603      	mov	r3, r0
 800db86:	73fb      	strb	r3, [r7, #15]
 800db88:	e01a      	b.n	800dbc0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	68db      	ldr	r3, [r3, #12]
 800db8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800db96:	6878      	ldr	r0, [r7, #4]
 800db98:	f001 fab4 	bl	800f104 <USB_CoreReset>
 800db9c:	4603      	mov	r3, r0
 800db9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dba0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d106      	bne.n	800dbb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38
 800dbb2:	e005      	b.n	800dbc0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d10b      	bne.n	800dbde <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	689b      	ldr	r3, [r3, #8]
 800dbca:	f043 0206 	orr.w	r2, r3, #6
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	f043 0220 	orr.w	r2, r3, #32
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dbde:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3710      	adds	r7, #16
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dbea:	b004      	add	sp, #16
 800dbec:	4770      	bx	lr
	...

0800dbf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dbf0:	b480      	push	{r7}
 800dbf2:	b087      	sub	sp, #28
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	4613      	mov	r3, r2
 800dbfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d165      	bne.n	800dcd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	4a41      	ldr	r2, [pc, #260]	; (800dd0c <USB_SetTurnaroundTime+0x11c>)
 800dc08:	4293      	cmp	r3, r2
 800dc0a:	d906      	bls.n	800dc1a <USB_SetTurnaroundTime+0x2a>
 800dc0c:	68bb      	ldr	r3, [r7, #8]
 800dc0e:	4a40      	ldr	r2, [pc, #256]	; (800dd10 <USB_SetTurnaroundTime+0x120>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d802      	bhi.n	800dc1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dc14:	230f      	movs	r3, #15
 800dc16:	617b      	str	r3, [r7, #20]
 800dc18:	e062      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	4a3c      	ldr	r2, [pc, #240]	; (800dd10 <USB_SetTurnaroundTime+0x120>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d906      	bls.n	800dc30 <USB_SetTurnaroundTime+0x40>
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	4a3b      	ldr	r2, [pc, #236]	; (800dd14 <USB_SetTurnaroundTime+0x124>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d802      	bhi.n	800dc30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dc2a:	230e      	movs	r3, #14
 800dc2c:	617b      	str	r3, [r7, #20]
 800dc2e:	e057      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	4a38      	ldr	r2, [pc, #224]	; (800dd14 <USB_SetTurnaroundTime+0x124>)
 800dc34:	4293      	cmp	r3, r2
 800dc36:	d906      	bls.n	800dc46 <USB_SetTurnaroundTime+0x56>
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	4a37      	ldr	r2, [pc, #220]	; (800dd18 <USB_SetTurnaroundTime+0x128>)
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	d802      	bhi.n	800dc46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dc40:	230d      	movs	r3, #13
 800dc42:	617b      	str	r3, [r7, #20]
 800dc44:	e04c      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800dc46:	68bb      	ldr	r3, [r7, #8]
 800dc48:	4a33      	ldr	r2, [pc, #204]	; (800dd18 <USB_SetTurnaroundTime+0x128>)
 800dc4a:	4293      	cmp	r3, r2
 800dc4c:	d906      	bls.n	800dc5c <USB_SetTurnaroundTime+0x6c>
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	4a32      	ldr	r2, [pc, #200]	; (800dd1c <USB_SetTurnaroundTime+0x12c>)
 800dc52:	4293      	cmp	r3, r2
 800dc54:	d802      	bhi.n	800dc5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800dc56:	230c      	movs	r3, #12
 800dc58:	617b      	str	r3, [r7, #20]
 800dc5a:	e041      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	4a2f      	ldr	r2, [pc, #188]	; (800dd1c <USB_SetTurnaroundTime+0x12c>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d906      	bls.n	800dc72 <USB_SetTurnaroundTime+0x82>
 800dc64:	68bb      	ldr	r3, [r7, #8]
 800dc66:	4a2e      	ldr	r2, [pc, #184]	; (800dd20 <USB_SetTurnaroundTime+0x130>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d802      	bhi.n	800dc72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800dc6c:	230b      	movs	r3, #11
 800dc6e:	617b      	str	r3, [r7, #20]
 800dc70:	e036      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	4a2a      	ldr	r2, [pc, #168]	; (800dd20 <USB_SetTurnaroundTime+0x130>)
 800dc76:	4293      	cmp	r3, r2
 800dc78:	d906      	bls.n	800dc88 <USB_SetTurnaroundTime+0x98>
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4a29      	ldr	r2, [pc, #164]	; (800dd24 <USB_SetTurnaroundTime+0x134>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d802      	bhi.n	800dc88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dc82:	230a      	movs	r3, #10
 800dc84:	617b      	str	r3, [r7, #20]
 800dc86:	e02b      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	4a26      	ldr	r2, [pc, #152]	; (800dd24 <USB_SetTurnaroundTime+0x134>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d906      	bls.n	800dc9e <USB_SetTurnaroundTime+0xae>
 800dc90:	68bb      	ldr	r3, [r7, #8]
 800dc92:	4a25      	ldr	r2, [pc, #148]	; (800dd28 <USB_SetTurnaroundTime+0x138>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d802      	bhi.n	800dc9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800dc98:	2309      	movs	r3, #9
 800dc9a:	617b      	str	r3, [r7, #20]
 800dc9c:	e020      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	4a21      	ldr	r2, [pc, #132]	; (800dd28 <USB_SetTurnaroundTime+0x138>)
 800dca2:	4293      	cmp	r3, r2
 800dca4:	d906      	bls.n	800dcb4 <USB_SetTurnaroundTime+0xc4>
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	4a20      	ldr	r2, [pc, #128]	; (800dd2c <USB_SetTurnaroundTime+0x13c>)
 800dcaa:	4293      	cmp	r3, r2
 800dcac:	d802      	bhi.n	800dcb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800dcae:	2308      	movs	r3, #8
 800dcb0:	617b      	str	r3, [r7, #20]
 800dcb2:	e015      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800dcb4:	68bb      	ldr	r3, [r7, #8]
 800dcb6:	4a1d      	ldr	r2, [pc, #116]	; (800dd2c <USB_SetTurnaroundTime+0x13c>)
 800dcb8:	4293      	cmp	r3, r2
 800dcba:	d906      	bls.n	800dcca <USB_SetTurnaroundTime+0xda>
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	4a1c      	ldr	r2, [pc, #112]	; (800dd30 <USB_SetTurnaroundTime+0x140>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d802      	bhi.n	800dcca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800dcc4:	2307      	movs	r3, #7
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	e00a      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dcca:	2306      	movs	r3, #6
 800dccc:	617b      	str	r3, [r7, #20]
 800dcce:	e007      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dcd0:	79fb      	ldrb	r3, [r7, #7]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d102      	bne.n	800dcdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800dcd6:	2309      	movs	r3, #9
 800dcd8:	617b      	str	r3, [r7, #20]
 800dcda:	e001      	b.n	800dce0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800dcdc:	2309      	movs	r3, #9
 800dcde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	68db      	ldr	r3, [r3, #12]
 800dce4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	68da      	ldr	r2, [r3, #12]
 800dcf0:	697b      	ldr	r3, [r7, #20]
 800dcf2:	029b      	lsls	r3, r3, #10
 800dcf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800dcf8:	431a      	orrs	r2, r3
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800dcfe:	2300      	movs	r3, #0
}
 800dd00:	4618      	mov	r0, r3
 800dd02:	371c      	adds	r7, #28
 800dd04:	46bd      	mov	sp, r7
 800dd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0a:	4770      	bx	lr
 800dd0c:	00d8acbf 	.word	0x00d8acbf
 800dd10:	00e4e1bf 	.word	0x00e4e1bf
 800dd14:	00f423ff 	.word	0x00f423ff
 800dd18:	0106737f 	.word	0x0106737f
 800dd1c:	011a499f 	.word	0x011a499f
 800dd20:	01312cff 	.word	0x01312cff
 800dd24:	014ca43f 	.word	0x014ca43f
 800dd28:	016e35ff 	.word	0x016e35ff
 800dd2c:	01a6ab1f 	.word	0x01a6ab1f
 800dd30:	01e847ff 	.word	0x01e847ff

0800dd34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd34:	b480      	push	{r7}
 800dd36:	b083      	sub	sp, #12
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	f043 0201 	orr.w	r2, r3, #1
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	370c      	adds	r7, #12
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr

0800dd56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800dd56:	b480      	push	{r7}
 800dd58:	b083      	sub	sp, #12
 800dd5a:	af00      	add	r7, sp, #0
 800dd5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	689b      	ldr	r3, [r3, #8]
 800dd62:	f023 0201 	bic.w	r2, r3, #1
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dd6a:	2300      	movs	r3, #0
}
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	370c      	adds	r7, #12
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b082      	sub	sp, #8
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	460b      	mov	r3, r1
 800dd82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800dd90:	78fb      	ldrb	r3, [r7, #3]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d106      	bne.n	800dda4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68db      	ldr	r3, [r3, #12]
 800dd9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	60da      	str	r2, [r3, #12]
 800dda2:	e00b      	b.n	800ddbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800dda4:	78fb      	ldrb	r3, [r7, #3]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d106      	bne.n	800ddb8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	68db      	ldr	r3, [r3, #12]
 800ddae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	60da      	str	r2, [r3, #12]
 800ddb6:	e001      	b.n	800ddbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e003      	b.n	800ddc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800ddbc:	2032      	movs	r0, #50	; 0x32
 800ddbe:	f7f9 fbcb 	bl	8007558 <HAL_Delay>

  return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3708      	adds	r7, #8
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ddcc:	b084      	sub	sp, #16
 800ddce:	b580      	push	{r7, lr}
 800ddd0:	b086      	sub	sp, #24
 800ddd2:	af00      	add	r7, sp, #0
 800ddd4:	6078      	str	r0, [r7, #4]
 800ddd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ddda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ddde:	2300      	movs	r3, #0
 800dde0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dde6:	2300      	movs	r3, #0
 800dde8:	613b      	str	r3, [r7, #16]
 800ddea:	e009      	b.n	800de00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	693b      	ldr	r3, [r7, #16]
 800ddf0:	3340      	adds	r3, #64	; 0x40
 800ddf2:	009b      	lsls	r3, r3, #2
 800ddf4:	4413      	add	r3, r2
 800ddf6:	2200      	movs	r2, #0
 800ddf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ddfa:	693b      	ldr	r3, [r7, #16]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	613b      	str	r3, [r7, #16]
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	2b0e      	cmp	r3, #14
 800de04:	d9f2      	bls.n	800ddec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800de06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d11c      	bne.n	800de46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de12:	685b      	ldr	r3, [r3, #4]
 800de14:	68fa      	ldr	r2, [r7, #12]
 800de16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de1a:	f043 0302 	orr.w	r3, r3, #2
 800de1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	601a      	str	r2, [r3, #0]
 800de44:	e005      	b.n	800de52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800de58:	461a      	mov	r2, r3
 800de5a:	2300      	movs	r3, #0
 800de5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de64:	4619      	mov	r1, r3
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de6c:	461a      	mov	r2, r3
 800de6e:	680b      	ldr	r3, [r1, #0]
 800de70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800de72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de74:	2b01      	cmp	r3, #1
 800de76:	d10c      	bne.n	800de92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800de78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d104      	bne.n	800de88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800de7e:	2100      	movs	r1, #0
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f949 	bl	800e118 <USB_SetDevSpeed>
 800de86:	e008      	b.n	800de9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800de88:	2101      	movs	r1, #1
 800de8a:	6878      	ldr	r0, [r7, #4]
 800de8c:	f000 f944 	bl	800e118 <USB_SetDevSpeed>
 800de90:	e003      	b.n	800de9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800de92:	2103      	movs	r1, #3
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f93f 	bl	800e118 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800de9a:	2110      	movs	r1, #16
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f000 f8f3 	bl	800e088 <USB_FlushTxFifo>
 800dea2:	4603      	mov	r3, r0
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	d001      	beq.n	800deac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dea8:	2301      	movs	r3, #1
 800deaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800deac:	6878      	ldr	r0, [r7, #4]
 800deae:	f000 f911 	bl	800e0d4 <USB_FlushRxFifo>
 800deb2:	4603      	mov	r3, r0
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dec2:	461a      	mov	r2, r3
 800dec4:	2300      	movs	r3, #0
 800dec6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dece:	461a      	mov	r2, r3
 800ded0:	2300      	movs	r3, #0
 800ded2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800deda:	461a      	mov	r2, r3
 800dedc:	2300      	movs	r3, #0
 800dede:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dee0:	2300      	movs	r3, #0
 800dee2:	613b      	str	r3, [r7, #16]
 800dee4:	e043      	b.n	800df6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	015a      	lsls	r2, r3, #5
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	4413      	add	r3, r2
 800deee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800def8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800defc:	d118      	bne.n	800df30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d10a      	bne.n	800df1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	015a      	lsls	r2, r3, #5
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4413      	add	r3, r2
 800df0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df10:	461a      	mov	r2, r3
 800df12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800df16:	6013      	str	r3, [r2, #0]
 800df18:	e013      	b.n	800df42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	015a      	lsls	r2, r3, #5
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	4413      	add	r3, r2
 800df22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df26:	461a      	mov	r2, r3
 800df28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800df2c:	6013      	str	r3, [r2, #0]
 800df2e:	e008      	b.n	800df42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800df30:	693b      	ldr	r3, [r7, #16]
 800df32:	015a      	lsls	r2, r3, #5
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4413      	add	r3, r2
 800df38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df3c:	461a      	mov	r2, r3
 800df3e:	2300      	movs	r3, #0
 800df40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800df42:	693b      	ldr	r3, [r7, #16]
 800df44:	015a      	lsls	r2, r3, #5
 800df46:	68fb      	ldr	r3, [r7, #12]
 800df48:	4413      	add	r3, r2
 800df4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df4e:	461a      	mov	r2, r3
 800df50:	2300      	movs	r3, #0
 800df52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	015a      	lsls	r2, r3, #5
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	4413      	add	r3, r2
 800df5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800df60:	461a      	mov	r2, r3
 800df62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800df66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	3301      	adds	r3, #1
 800df6c:	613b      	str	r3, [r7, #16]
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	693a      	ldr	r2, [r7, #16]
 800df72:	429a      	cmp	r2, r3
 800df74:	d3b7      	bcc.n	800dee6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800df76:	2300      	movs	r3, #0
 800df78:	613b      	str	r3, [r7, #16]
 800df7a:	e043      	b.n	800e004 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800df7c:	693b      	ldr	r3, [r7, #16]
 800df7e:	015a      	lsls	r2, r3, #5
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	4413      	add	r3, r2
 800df84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800df8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800df92:	d118      	bne.n	800dfc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800df94:	693b      	ldr	r3, [r7, #16]
 800df96:	2b00      	cmp	r3, #0
 800df98:	d10a      	bne.n	800dfb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	015a      	lsls	r2, r3, #5
 800df9e:	68fb      	ldr	r3, [r7, #12]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dfac:	6013      	str	r3, [r2, #0]
 800dfae:	e013      	b.n	800dfd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	015a      	lsls	r2, r3, #5
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	4413      	add	r3, r2
 800dfb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dfc2:	6013      	str	r3, [r2, #0]
 800dfc4:	e008      	b.n	800dfd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	015a      	lsls	r2, r3, #5
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	4413      	add	r3, r2
 800dfce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfd2:	461a      	mov	r2, r3
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800dfd8:	693b      	ldr	r3, [r7, #16]
 800dfda:	015a      	lsls	r2, r3, #5
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	4413      	add	r3, r2
 800dfe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	015a      	lsls	r2, r3, #5
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	4413      	add	r3, r2
 800dff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dff6:	461a      	mov	r2, r3
 800dff8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dffc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	3301      	adds	r3, #1
 800e002:	613b      	str	r3, [r7, #16]
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	693a      	ldr	r2, [r7, #16]
 800e008:	429a      	cmp	r2, r3
 800e00a:	d3b7      	bcc.n	800df7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e012:	691b      	ldr	r3, [r3, #16]
 800e014:	68fa      	ldr	r2, [r7, #12]
 800e016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e01a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e01e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800e02c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e030:	2b00      	cmp	r3, #0
 800e032:	d105      	bne.n	800e040 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	699b      	ldr	r3, [r3, #24]
 800e038:	f043 0210 	orr.w	r2, r3, #16
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	699a      	ldr	r2, [r3, #24]
 800e044:	4b0f      	ldr	r3, [pc, #60]	; (800e084 <USB_DevInit+0x2b8>)
 800e046:	4313      	orrs	r3, r2
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e04c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d005      	beq.n	800e05e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	f043 0208 	orr.w	r2, r3, #8
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e05e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e060:	2b01      	cmp	r3, #1
 800e062:	d107      	bne.n	800e074 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	699b      	ldr	r3, [r3, #24]
 800e068:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e06c:	f043 0304 	orr.w	r3, r3, #4
 800e070:	687a      	ldr	r2, [r7, #4]
 800e072:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
}
 800e076:	4618      	mov	r0, r3
 800e078:	3718      	adds	r7, #24
 800e07a:	46bd      	mov	sp, r7
 800e07c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e080:	b004      	add	sp, #16
 800e082:	4770      	bx	lr
 800e084:	803c3800 	.word	0x803c3800

0800e088 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e088:	b480      	push	{r7}
 800e08a:	b085      	sub	sp, #20
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800e092:	2300      	movs	r3, #0
 800e094:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	019b      	lsls	r3, r3, #6
 800e09a:	f043 0220 	orr.w	r2, r3, #32
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	60fb      	str	r3, [r7, #12]
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	4a09      	ldr	r2, [pc, #36]	; (800e0d0 <USB_FlushTxFifo+0x48>)
 800e0ac:	4293      	cmp	r3, r2
 800e0ae:	d901      	bls.n	800e0b4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800e0b0:	2303      	movs	r3, #3
 800e0b2:	e006      	b.n	800e0c2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	691b      	ldr	r3, [r3, #16]
 800e0b8:	f003 0320 	and.w	r3, r3, #32
 800e0bc:	2b20      	cmp	r3, #32
 800e0be:	d0f0      	beq.n	800e0a2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	3714      	adds	r7, #20
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr
 800e0ce:	bf00      	nop
 800e0d0:	00030d40 	.word	0x00030d40

0800e0d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e0d4:	b480      	push	{r7}
 800e0d6:	b085      	sub	sp, #20
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800e0dc:	2300      	movs	r3, #0
 800e0de:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2210      	movs	r2, #16
 800e0e4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	3301      	adds	r3, #1
 800e0ea:	60fb      	str	r3, [r7, #12]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4a09      	ldr	r2, [pc, #36]	; (800e114 <USB_FlushRxFifo+0x40>)
 800e0f0:	4293      	cmp	r3, r2
 800e0f2:	d901      	bls.n	800e0f8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800e0f4:	2303      	movs	r3, #3
 800e0f6:	e006      	b.n	800e106 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	691b      	ldr	r3, [r3, #16]
 800e0fc:	f003 0310 	and.w	r3, r3, #16
 800e100:	2b10      	cmp	r3, #16
 800e102:	d0f0      	beq.n	800e0e6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3714      	adds	r7, #20
 800e10a:	46bd      	mov	sp, r7
 800e10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop
 800e114:	00030d40 	.word	0x00030d40

0800e118 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e118:	b480      	push	{r7}
 800e11a:	b085      	sub	sp, #20
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	460b      	mov	r3, r1
 800e122:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	68f9      	ldr	r1, [r7, #12]
 800e134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e138:	4313      	orrs	r3, r2
 800e13a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e13c:	2300      	movs	r3, #0
}
 800e13e:	4618      	mov	r0, r3
 800e140:	3714      	adds	r7, #20
 800e142:	46bd      	mov	sp, r7
 800e144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e148:	4770      	bx	lr

0800e14a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800e14a:	b480      	push	{r7}
 800e14c:	b087      	sub	sp, #28
 800e14e:	af00      	add	r7, sp, #0
 800e150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e15c:	689b      	ldr	r3, [r3, #8]
 800e15e:	f003 0306 	and.w	r3, r3, #6
 800e162:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d102      	bne.n	800e170 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e16a:	2300      	movs	r3, #0
 800e16c:	75fb      	strb	r3, [r7, #23]
 800e16e:	e00a      	b.n	800e186 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	2b02      	cmp	r3, #2
 800e174:	d002      	beq.n	800e17c <USB_GetDevSpeed+0x32>
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b06      	cmp	r3, #6
 800e17a:	d102      	bne.n	800e182 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e17c:	2302      	movs	r3, #2
 800e17e:	75fb      	strb	r3, [r7, #23]
 800e180:	e001      	b.n	800e186 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e182:	230f      	movs	r3, #15
 800e184:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e186:	7dfb      	ldrb	r3, [r7, #23]
}
 800e188:	4618      	mov	r0, r3
 800e18a:	371c      	adds	r7, #28
 800e18c:	46bd      	mov	sp, r7
 800e18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e192:	4770      	bx	lr

0800e194 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e194:	b480      	push	{r7}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
 800e19c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	785b      	ldrb	r3, [r3, #1]
 800e1ac:	2b01      	cmp	r3, #1
 800e1ae:	d13a      	bne.n	800e226 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e1b6:	69da      	ldr	r2, [r3, #28]
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	781b      	ldrb	r3, [r3, #0]
 800e1bc:	f003 030f 	and.w	r3, r3, #15
 800e1c0:	2101      	movs	r1, #1
 800e1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800e1c6:	b29b      	uxth	r3, r3
 800e1c8:	68f9      	ldr	r1, [r7, #12]
 800e1ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	015a      	lsls	r2, r3, #5
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4413      	add	r3, r2
 800e1da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d155      	bne.n	800e294 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	015a      	lsls	r2, r3, #5
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e1f4:	681a      	ldr	r2, [r3, #0]
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	78db      	ldrb	r3, [r3, #3]
 800e202:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e204:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e206:	68bb      	ldr	r3, [r7, #8]
 800e208:	059b      	lsls	r3, r3, #22
 800e20a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e20c:	4313      	orrs	r3, r2
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	0151      	lsls	r1, r2, #5
 800e212:	68fa      	ldr	r2, [r7, #12]
 800e214:	440a      	add	r2, r1
 800e216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e21a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e21e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e222:	6013      	str	r3, [r2, #0]
 800e224:	e036      	b.n	800e294 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e22c:	69da      	ldr	r2, [r3, #28]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	f003 030f 	and.w	r3, r3, #15
 800e236:	2101      	movs	r1, #1
 800e238:	fa01 f303 	lsl.w	r3, r1, r3
 800e23c:	041b      	lsls	r3, r3, #16
 800e23e:	68f9      	ldr	r1, [r7, #12]
 800e240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e244:	4313      	orrs	r3, r2
 800e246:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	015a      	lsls	r2, r3, #5
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	4413      	add	r3, r2
 800e250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d11a      	bne.n	800e294 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	015a      	lsls	r2, r3, #5
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	4413      	add	r3, r2
 800e266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	78db      	ldrb	r3, [r3, #3]
 800e278:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e27a:	430b      	orrs	r3, r1
 800e27c:	4313      	orrs	r3, r2
 800e27e:	68ba      	ldr	r2, [r7, #8]
 800e280:	0151      	lsls	r1, r2, #5
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	440a      	add	r2, r1
 800e286:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e28a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e28e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e292:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e294:	2300      	movs	r3, #0
}
 800e296:	4618      	mov	r0, r3
 800e298:	3714      	adds	r7, #20
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr
	...

0800e2a4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	785b      	ldrb	r3, [r3, #1]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d161      	bne.n	800e384 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	015a      	lsls	r2, r3, #5
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	4413      	add	r3, r2
 800e2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e2d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2d6:	d11f      	bne.n	800e318 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	015a      	lsls	r2, r3, #5
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	4413      	add	r3, r2
 800e2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68ba      	ldr	r2, [r7, #8]
 800e2e8:	0151      	lsls	r1, r2, #5
 800e2ea:	68fa      	ldr	r2, [r7, #12]
 800e2ec:	440a      	add	r2, r1
 800e2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e2f2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e2f6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	015a      	lsls	r2, r3, #5
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	4413      	add	r3, r2
 800e300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	0151      	lsls	r1, r2, #5
 800e30a:	68fa      	ldr	r2, [r7, #12]
 800e30c:	440a      	add	r2, r1
 800e30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e316:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e31e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	f003 030f 	and.w	r3, r3, #15
 800e328:	2101      	movs	r1, #1
 800e32a:	fa01 f303 	lsl.w	r3, r1, r3
 800e32e:	b29b      	uxth	r3, r3
 800e330:	43db      	mvns	r3, r3
 800e332:	68f9      	ldr	r1, [r7, #12]
 800e334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e338:	4013      	ands	r3, r2
 800e33a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e342:	69da      	ldr	r2, [r3, #28]
 800e344:	683b      	ldr	r3, [r7, #0]
 800e346:	781b      	ldrb	r3, [r3, #0]
 800e348:	f003 030f 	and.w	r3, r3, #15
 800e34c:	2101      	movs	r1, #1
 800e34e:	fa01 f303 	lsl.w	r3, r1, r3
 800e352:	b29b      	uxth	r3, r3
 800e354:	43db      	mvns	r3, r3
 800e356:	68f9      	ldr	r1, [r7, #12]
 800e358:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e35c:	4013      	ands	r3, r2
 800e35e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e360:	68bb      	ldr	r3, [r7, #8]
 800e362:	015a      	lsls	r2, r3, #5
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	4413      	add	r3, r2
 800e368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	0159      	lsls	r1, r3, #5
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	440b      	add	r3, r1
 800e376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e37a:	4619      	mov	r1, r3
 800e37c:	4b35      	ldr	r3, [pc, #212]	; (800e454 <USB_DeactivateEndpoint+0x1b0>)
 800e37e:	4013      	ands	r3, r2
 800e380:	600b      	str	r3, [r1, #0]
 800e382:	e060      	b.n	800e446 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e384:	68bb      	ldr	r3, [r7, #8]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e39a:	d11f      	bne.n	800e3dc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e39c:	68bb      	ldr	r3, [r7, #8]
 800e39e:	015a      	lsls	r2, r3, #5
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	4413      	add	r3, r2
 800e3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	0151      	lsls	r1, r2, #5
 800e3ae:	68fa      	ldr	r2, [r7, #12]
 800e3b0:	440a      	add	r2, r1
 800e3b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e3ba:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e3bc:	68bb      	ldr	r3, [r7, #8]
 800e3be:	015a      	lsls	r2, r3, #5
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	68ba      	ldr	r2, [r7, #8]
 800e3cc:	0151      	lsls	r1, r2, #5
 800e3ce:	68fa      	ldr	r2, [r7, #12]
 800e3d0:	440a      	add	r2, r1
 800e3d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e3d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e3da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e3e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	f003 030f 	and.w	r3, r3, #15
 800e3ec:	2101      	movs	r1, #1
 800e3ee:	fa01 f303 	lsl.w	r3, r1, r3
 800e3f2:	041b      	lsls	r3, r3, #16
 800e3f4:	43db      	mvns	r3, r3
 800e3f6:	68f9      	ldr	r1, [r7, #12]
 800e3f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e3fc:	4013      	ands	r3, r2
 800e3fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e406:	69da      	ldr	r2, [r3, #28]
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	f003 030f 	and.w	r3, r3, #15
 800e410:	2101      	movs	r1, #1
 800e412:	fa01 f303 	lsl.w	r3, r1, r3
 800e416:	041b      	lsls	r3, r3, #16
 800e418:	43db      	mvns	r3, r3
 800e41a:	68f9      	ldr	r1, [r7, #12]
 800e41c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e420:	4013      	ands	r3, r2
 800e422:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	015a      	lsls	r2, r3, #5
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	4413      	add	r3, r2
 800e42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	0159      	lsls	r1, r3, #5
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	440b      	add	r3, r1
 800e43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e43e:	4619      	mov	r1, r3
 800e440:	4b05      	ldr	r3, [pc, #20]	; (800e458 <USB_DeactivateEndpoint+0x1b4>)
 800e442:	4013      	ands	r3, r2
 800e444:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3714      	adds	r7, #20
 800e44c:	46bd      	mov	sp, r7
 800e44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e452:	4770      	bx	lr
 800e454:	ec337800 	.word	0xec337800
 800e458:	eff37800 	.word	0xeff37800

0800e45c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08a      	sub	sp, #40	; 0x28
 800e460:	af02      	add	r7, sp, #8
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	4613      	mov	r3, r2
 800e468:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	781b      	ldrb	r3, [r3, #0]
 800e472:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	785b      	ldrb	r3, [r3, #1]
 800e478:	2b01      	cmp	r3, #1
 800e47a:	f040 815c 	bne.w	800e736 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d132      	bne.n	800e4ec <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	015a      	lsls	r2, r3, #5
 800e48a:	69fb      	ldr	r3, [r7, #28]
 800e48c:	4413      	add	r3, r2
 800e48e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e492:	691b      	ldr	r3, [r3, #16]
 800e494:	69ba      	ldr	r2, [r7, #24]
 800e496:	0151      	lsls	r1, r2, #5
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	440a      	add	r2, r1
 800e49c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e4a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e4a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e4aa:	69bb      	ldr	r3, [r7, #24]
 800e4ac:	015a      	lsls	r2, r3, #5
 800e4ae:	69fb      	ldr	r3, [r7, #28]
 800e4b0:	4413      	add	r3, r2
 800e4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	69ba      	ldr	r2, [r7, #24]
 800e4ba:	0151      	lsls	r1, r2, #5
 800e4bc:	69fa      	ldr	r2, [r7, #28]
 800e4be:	440a      	add	r2, r1
 800e4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e4c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	015a      	lsls	r2, r3, #5
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	69ba      	ldr	r2, [r7, #24]
 800e4da:	0151      	lsls	r1, r2, #5
 800e4dc:	69fa      	ldr	r2, [r7, #28]
 800e4de:	440a      	add	r2, r1
 800e4e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e4e4:	0cdb      	lsrs	r3, r3, #19
 800e4e6:	04db      	lsls	r3, r3, #19
 800e4e8:	6113      	str	r3, [r2, #16]
 800e4ea:	e074      	b.n	800e5d6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	015a      	lsls	r2, r3, #5
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	4413      	add	r3, r2
 800e4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e4f8:	691b      	ldr	r3, [r3, #16]
 800e4fa:	69ba      	ldr	r2, [r7, #24]
 800e4fc:	0151      	lsls	r1, r2, #5
 800e4fe:	69fa      	ldr	r2, [r7, #28]
 800e500:	440a      	add	r2, r1
 800e502:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e506:	0cdb      	lsrs	r3, r3, #19
 800e508:	04db      	lsls	r3, r3, #19
 800e50a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e50c:	69bb      	ldr	r3, [r7, #24]
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	69fb      	ldr	r3, [r7, #28]
 800e512:	4413      	add	r3, r2
 800e514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e518:	691b      	ldr	r3, [r3, #16]
 800e51a:	69ba      	ldr	r2, [r7, #24]
 800e51c:	0151      	lsls	r1, r2, #5
 800e51e:	69fa      	ldr	r2, [r7, #28]
 800e520:	440a      	add	r2, r1
 800e522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e52a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e52e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e530:	69bb      	ldr	r3, [r7, #24]
 800e532:	015a      	lsls	r2, r3, #5
 800e534:	69fb      	ldr	r3, [r7, #28]
 800e536:	4413      	add	r3, r2
 800e538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e53c:	691a      	ldr	r2, [r3, #16]
 800e53e:	68bb      	ldr	r3, [r7, #8]
 800e540:	6959      	ldr	r1, [r3, #20]
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	440b      	add	r3, r1
 800e548:	1e59      	subs	r1, r3, #1
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	689b      	ldr	r3, [r3, #8]
 800e54e:	fbb1 f3f3 	udiv	r3, r1, r3
 800e552:	04d9      	lsls	r1, r3, #19
 800e554:	4b9d      	ldr	r3, [pc, #628]	; (800e7cc <USB_EPStartXfer+0x370>)
 800e556:	400b      	ands	r3, r1
 800e558:	69b9      	ldr	r1, [r7, #24]
 800e55a:	0148      	lsls	r0, r1, #5
 800e55c:	69f9      	ldr	r1, [r7, #28]
 800e55e:	4401      	add	r1, r0
 800e560:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e564:	4313      	orrs	r3, r2
 800e566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e568:	69bb      	ldr	r3, [r7, #24]
 800e56a:	015a      	lsls	r2, r3, #5
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	4413      	add	r3, r2
 800e570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e574:	691a      	ldr	r2, [r3, #16]
 800e576:	68bb      	ldr	r3, [r7, #8]
 800e578:	695b      	ldr	r3, [r3, #20]
 800e57a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e57e:	69b9      	ldr	r1, [r7, #24]
 800e580:	0148      	lsls	r0, r1, #5
 800e582:	69f9      	ldr	r1, [r7, #28]
 800e584:	4401      	add	r1, r0
 800e586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800e58a:	4313      	orrs	r3, r2
 800e58c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	78db      	ldrb	r3, [r3, #3]
 800e592:	2b01      	cmp	r3, #1
 800e594:	d11f      	bne.n	800e5d6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	015a      	lsls	r2, r3, #5
 800e59a:	69fb      	ldr	r3, [r7, #28]
 800e59c:	4413      	add	r3, r2
 800e59e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5a2:	691b      	ldr	r3, [r3, #16]
 800e5a4:	69ba      	ldr	r2, [r7, #24]
 800e5a6:	0151      	lsls	r1, r2, #5
 800e5a8:	69fa      	ldr	r2, [r7, #28]
 800e5aa:	440a      	add	r2, r1
 800e5ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5b0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800e5b4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e5b6:	69bb      	ldr	r3, [r7, #24]
 800e5b8:	015a      	lsls	r2, r3, #5
 800e5ba:	69fb      	ldr	r3, [r7, #28]
 800e5bc:	4413      	add	r3, r2
 800e5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5c2:	691b      	ldr	r3, [r3, #16]
 800e5c4:	69ba      	ldr	r2, [r7, #24]
 800e5c6:	0151      	lsls	r1, r2, #5
 800e5c8:	69fa      	ldr	r2, [r7, #28]
 800e5ca:	440a      	add	r2, r1
 800e5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e5d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e5d4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e5d6:	79fb      	ldrb	r3, [r7, #7]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d14b      	bne.n	800e674 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e5dc:	68bb      	ldr	r3, [r7, #8]
 800e5de:	691b      	ldr	r3, [r3, #16]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d009      	beq.n	800e5f8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	015a      	lsls	r2, r3, #5
 800e5e8:	69fb      	ldr	r3, [r7, #28]
 800e5ea:	4413      	add	r3, r2
 800e5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e5f0:	461a      	mov	r2, r3
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	78db      	ldrb	r3, [r3, #3]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d128      	bne.n	800e652 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e600:	69fb      	ldr	r3, [r7, #28]
 800e602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e606:	689b      	ldr	r3, [r3, #8]
 800e608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d110      	bne.n	800e632 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e610:	69bb      	ldr	r3, [r7, #24]
 800e612:	015a      	lsls	r2, r3, #5
 800e614:	69fb      	ldr	r3, [r7, #28]
 800e616:	4413      	add	r3, r2
 800e618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	69ba      	ldr	r2, [r7, #24]
 800e620:	0151      	lsls	r1, r2, #5
 800e622:	69fa      	ldr	r2, [r7, #28]
 800e624:	440a      	add	r2, r1
 800e626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e62a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e62e:	6013      	str	r3, [r2, #0]
 800e630:	e00f      	b.n	800e652 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	015a      	lsls	r2, r3, #5
 800e636:	69fb      	ldr	r3, [r7, #28]
 800e638:	4413      	add	r3, r2
 800e63a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	69ba      	ldr	r2, [r7, #24]
 800e642:	0151      	lsls	r1, r2, #5
 800e644:	69fa      	ldr	r2, [r7, #28]
 800e646:	440a      	add	r2, r1
 800e648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e64c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e650:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e652:	69bb      	ldr	r3, [r7, #24]
 800e654:	015a      	lsls	r2, r3, #5
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	4413      	add	r3, r2
 800e65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	69ba      	ldr	r2, [r7, #24]
 800e662:	0151      	lsls	r1, r2, #5
 800e664:	69fa      	ldr	r2, [r7, #28]
 800e666:	440a      	add	r2, r1
 800e668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e66c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e670:	6013      	str	r3, [r2, #0]
 800e672:	e12f      	b.n	800e8d4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	015a      	lsls	r2, r3, #5
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	4413      	add	r3, r2
 800e67c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	69ba      	ldr	r2, [r7, #24]
 800e684:	0151      	lsls	r1, r2, #5
 800e686:	69fa      	ldr	r2, [r7, #28]
 800e688:	440a      	add	r2, r1
 800e68a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e68e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e692:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	78db      	ldrb	r3, [r3, #3]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d015      	beq.n	800e6c8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e69c:	68bb      	ldr	r3, [r7, #8]
 800e69e:	695b      	ldr	r3, [r3, #20]
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f000 8117 	beq.w	800e8d4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e6a6:	69fb      	ldr	r3, [r7, #28]
 800e6a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	f003 030f 	and.w	r3, r3, #15
 800e6b6:	2101      	movs	r1, #1
 800e6b8:	fa01 f303 	lsl.w	r3, r1, r3
 800e6bc:	69f9      	ldr	r1, [r7, #28]
 800e6be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e6c2:	4313      	orrs	r3, r2
 800e6c4:	634b      	str	r3, [r1, #52]	; 0x34
 800e6c6:	e105      	b.n	800e8d4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e6ce:	689b      	ldr	r3, [r3, #8]
 800e6d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d110      	bne.n	800e6fa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e6d8:	69bb      	ldr	r3, [r7, #24]
 800e6da:	015a      	lsls	r2, r3, #5
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	4413      	add	r3, r2
 800e6e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	69ba      	ldr	r2, [r7, #24]
 800e6e8:	0151      	lsls	r1, r2, #5
 800e6ea:	69fa      	ldr	r2, [r7, #28]
 800e6ec:	440a      	add	r2, r1
 800e6ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e6f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e6f6:	6013      	str	r3, [r2, #0]
 800e6f8:	e00f      	b.n	800e71a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e6fa:	69bb      	ldr	r3, [r7, #24]
 800e6fc:	015a      	lsls	r2, r3, #5
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	4413      	add	r3, r2
 800e702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	69ba      	ldr	r2, [r7, #24]
 800e70a:	0151      	lsls	r1, r2, #5
 800e70c:	69fa      	ldr	r2, [r7, #28]
 800e70e:	440a      	add	r2, r1
 800e710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e718:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	68d9      	ldr	r1, [r3, #12]
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	781a      	ldrb	r2, [r3, #0]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	695b      	ldr	r3, [r3, #20]
 800e726:	b298      	uxth	r0, r3
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	4603      	mov	r3, r0
 800e72e:	68f8      	ldr	r0, [r7, #12]
 800e730:	f000 fa2b 	bl	800eb8a <USB_WritePacket>
 800e734:	e0ce      	b.n	800e8d4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	015a      	lsls	r2, r3, #5
 800e73a:	69fb      	ldr	r3, [r7, #28]
 800e73c:	4413      	add	r3, r2
 800e73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e742:	691b      	ldr	r3, [r3, #16]
 800e744:	69ba      	ldr	r2, [r7, #24]
 800e746:	0151      	lsls	r1, r2, #5
 800e748:	69fa      	ldr	r2, [r7, #28]
 800e74a:	440a      	add	r2, r1
 800e74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e750:	0cdb      	lsrs	r3, r3, #19
 800e752:	04db      	lsls	r3, r3, #19
 800e754:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e756:	69bb      	ldr	r3, [r7, #24]
 800e758:	015a      	lsls	r2, r3, #5
 800e75a:	69fb      	ldr	r3, [r7, #28]
 800e75c:	4413      	add	r3, r2
 800e75e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e762:	691b      	ldr	r3, [r3, #16]
 800e764:	69ba      	ldr	r2, [r7, #24]
 800e766:	0151      	lsls	r1, r2, #5
 800e768:	69fa      	ldr	r2, [r7, #28]
 800e76a:	440a      	add	r2, r1
 800e76c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e778:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800e77a:	68bb      	ldr	r3, [r7, #8]
 800e77c:	695b      	ldr	r3, [r3, #20]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d126      	bne.n	800e7d0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	015a      	lsls	r2, r3, #5
 800e786:	69fb      	ldr	r3, [r7, #28]
 800e788:	4413      	add	r3, r2
 800e78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e78e:	691a      	ldr	r2, [r3, #16]
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	689b      	ldr	r3, [r3, #8]
 800e794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e798:	69b9      	ldr	r1, [r7, #24]
 800e79a:	0148      	lsls	r0, r1, #5
 800e79c:	69f9      	ldr	r1, [r7, #28]
 800e79e:	4401      	add	r1, r0
 800e7a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	015a      	lsls	r2, r3, #5
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	4413      	add	r3, r2
 800e7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7b4:	691b      	ldr	r3, [r3, #16]
 800e7b6:	69ba      	ldr	r2, [r7, #24]
 800e7b8:	0151      	lsls	r1, r2, #5
 800e7ba:	69fa      	ldr	r2, [r7, #28]
 800e7bc:	440a      	add	r2, r1
 800e7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e7c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e7c6:	6113      	str	r3, [r2, #16]
 800e7c8:	e036      	b.n	800e838 <USB_EPStartXfer+0x3dc>
 800e7ca:	bf00      	nop
 800e7cc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	695a      	ldr	r2, [r3, #20]
 800e7d4:	68bb      	ldr	r3, [r7, #8]
 800e7d6:	689b      	ldr	r3, [r3, #8]
 800e7d8:	4413      	add	r3, r2
 800e7da:	1e5a      	subs	r2, r3, #1
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	689b      	ldr	r3, [r3, #8]
 800e7e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7e4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800e7e6:	69bb      	ldr	r3, [r7, #24]
 800e7e8:	015a      	lsls	r2, r3, #5
 800e7ea:	69fb      	ldr	r3, [r7, #28]
 800e7ec:	4413      	add	r3, r2
 800e7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e7f2:	691a      	ldr	r2, [r3, #16]
 800e7f4:	8afb      	ldrh	r3, [r7, #22]
 800e7f6:	04d9      	lsls	r1, r3, #19
 800e7f8:	4b39      	ldr	r3, [pc, #228]	; (800e8e0 <USB_EPStartXfer+0x484>)
 800e7fa:	400b      	ands	r3, r1
 800e7fc:	69b9      	ldr	r1, [r7, #24]
 800e7fe:	0148      	lsls	r0, r1, #5
 800e800:	69f9      	ldr	r1, [r7, #28]
 800e802:	4401      	add	r1, r0
 800e804:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e808:	4313      	orrs	r3, r2
 800e80a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800e80c:	69bb      	ldr	r3, [r7, #24]
 800e80e:	015a      	lsls	r2, r3, #5
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	4413      	add	r3, r2
 800e814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e818:	691a      	ldr	r2, [r3, #16]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	689b      	ldr	r3, [r3, #8]
 800e81e:	8af9      	ldrh	r1, [r7, #22]
 800e820:	fb01 f303 	mul.w	r3, r1, r3
 800e824:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e828:	69b9      	ldr	r1, [r7, #24]
 800e82a:	0148      	lsls	r0, r1, #5
 800e82c:	69f9      	ldr	r1, [r7, #28]
 800e82e:	4401      	add	r1, r0
 800e830:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800e834:	4313      	orrs	r3, r2
 800e836:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800e838:	79fb      	ldrb	r3, [r7, #7]
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d10d      	bne.n	800e85a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	68db      	ldr	r3, [r3, #12]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d009      	beq.n	800e85a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	68d9      	ldr	r1, [r3, #12]
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	015a      	lsls	r2, r3, #5
 800e84e:	69fb      	ldr	r3, [r7, #28]
 800e850:	4413      	add	r3, r2
 800e852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e856:	460a      	mov	r2, r1
 800e858:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800e85a:	68bb      	ldr	r3, [r7, #8]
 800e85c:	78db      	ldrb	r3, [r3, #3]
 800e85e:	2b01      	cmp	r3, #1
 800e860:	d128      	bne.n	800e8b4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e862:	69fb      	ldr	r3, [r7, #28]
 800e864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e868:	689b      	ldr	r3, [r3, #8]
 800e86a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d110      	bne.n	800e894 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800e872:	69bb      	ldr	r3, [r7, #24]
 800e874:	015a      	lsls	r2, r3, #5
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	4413      	add	r3, r2
 800e87a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	69ba      	ldr	r2, [r7, #24]
 800e882:	0151      	lsls	r1, r2, #5
 800e884:	69fa      	ldr	r2, [r7, #28]
 800e886:	440a      	add	r2, r1
 800e888:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e88c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e890:	6013      	str	r3, [r2, #0]
 800e892:	e00f      	b.n	800e8b4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800e894:	69bb      	ldr	r3, [r7, #24]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	69ba      	ldr	r2, [r7, #24]
 800e8a4:	0151      	lsls	r1, r2, #5
 800e8a6:	69fa      	ldr	r2, [r7, #28]
 800e8a8:	440a      	add	r2, r1
 800e8aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e8b2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	015a      	lsls	r2, r3, #5
 800e8b8:	69fb      	ldr	r3, [r7, #28]
 800e8ba:	4413      	add	r3, r2
 800e8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	0151      	lsls	r1, r2, #5
 800e8c6:	69fa      	ldr	r2, [r7, #28]
 800e8c8:	440a      	add	r2, r1
 800e8ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800e8ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800e8d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e8d4:	2300      	movs	r3, #0
}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3720      	adds	r7, #32
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}
 800e8de:	bf00      	nop
 800e8e0:	1ff80000 	.word	0x1ff80000

0800e8e4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b087      	sub	sp, #28
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	4613      	mov	r3, r2
 800e8f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800e8f6:	68bb      	ldr	r3, [r7, #8]
 800e8f8:	781b      	ldrb	r3, [r3, #0]
 800e8fa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	785b      	ldrb	r3, [r3, #1]
 800e900:	2b01      	cmp	r3, #1
 800e902:	f040 80cd 	bne.w	800eaa0 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e906:	68bb      	ldr	r3, [r7, #8]
 800e908:	695b      	ldr	r3, [r3, #20]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d132      	bne.n	800e974 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	015a      	lsls	r2, r3, #5
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	4413      	add	r3, r2
 800e916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e91a:	691b      	ldr	r3, [r3, #16]
 800e91c:	693a      	ldr	r2, [r7, #16]
 800e91e:	0151      	lsls	r1, r2, #5
 800e920:	697a      	ldr	r2, [r7, #20]
 800e922:	440a      	add	r2, r1
 800e924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e928:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e92c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e930:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	015a      	lsls	r2, r3, #5
 800e936:	697b      	ldr	r3, [r7, #20]
 800e938:	4413      	add	r3, r2
 800e93a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e93e:	691b      	ldr	r3, [r3, #16]
 800e940:	693a      	ldr	r2, [r7, #16]
 800e942:	0151      	lsls	r1, r2, #5
 800e944:	697a      	ldr	r2, [r7, #20]
 800e946:	440a      	add	r2, r1
 800e948:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e94c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e950:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e952:	693b      	ldr	r3, [r7, #16]
 800e954:	015a      	lsls	r2, r3, #5
 800e956:	697b      	ldr	r3, [r7, #20]
 800e958:	4413      	add	r3, r2
 800e95a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e95e:	691b      	ldr	r3, [r3, #16]
 800e960:	693a      	ldr	r2, [r7, #16]
 800e962:	0151      	lsls	r1, r2, #5
 800e964:	697a      	ldr	r2, [r7, #20]
 800e966:	440a      	add	r2, r1
 800e968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e96c:	0cdb      	lsrs	r3, r3, #19
 800e96e:	04db      	lsls	r3, r3, #19
 800e970:	6113      	str	r3, [r2, #16]
 800e972:	e04e      	b.n	800ea12 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	015a      	lsls	r2, r3, #5
 800e978:	697b      	ldr	r3, [r7, #20]
 800e97a:	4413      	add	r3, r2
 800e97c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	693a      	ldr	r2, [r7, #16]
 800e984:	0151      	lsls	r1, r2, #5
 800e986:	697a      	ldr	r2, [r7, #20]
 800e988:	440a      	add	r2, r1
 800e98a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e98e:	0cdb      	lsrs	r3, r3, #19
 800e990:	04db      	lsls	r3, r3, #19
 800e992:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	015a      	lsls	r2, r3, #5
 800e998:	697b      	ldr	r3, [r7, #20]
 800e99a:	4413      	add	r3, r2
 800e99c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	693a      	ldr	r2, [r7, #16]
 800e9a4:	0151      	lsls	r1, r2, #5
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	440a      	add	r2, r1
 800e9aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800e9b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800e9b6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	695a      	ldr	r2, [r3, #20]
 800e9bc:	68bb      	ldr	r3, [r7, #8]
 800e9be:	689b      	ldr	r3, [r3, #8]
 800e9c0:	429a      	cmp	r2, r3
 800e9c2:	d903      	bls.n	800e9cc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	689a      	ldr	r2, [r3, #8]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	015a      	lsls	r2, r3, #5
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	0151      	lsls	r1, r2, #5
 800e9de:	697a      	ldr	r2, [r7, #20]
 800e9e0:	440a      	add	r2, r1
 800e9e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800e9e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e9ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	015a      	lsls	r2, r3, #5
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9f8:	691a      	ldr	r2, [r3, #16]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	695b      	ldr	r3, [r3, #20]
 800e9fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea02:	6939      	ldr	r1, [r7, #16]
 800ea04:	0148      	lsls	r0, r1, #5
 800ea06:	6979      	ldr	r1, [r7, #20]
 800ea08:	4401      	add	r1, r0
 800ea0a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ea0e:	4313      	orrs	r3, r2
 800ea10:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	2b01      	cmp	r3, #1
 800ea16:	d11e      	bne.n	800ea56 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	691b      	ldr	r3, [r3, #16]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d009      	beq.n	800ea34 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	015a      	lsls	r2, r3, #5
 800ea24:	697b      	ldr	r3, [r7, #20]
 800ea26:	4413      	add	r3, r2
 800ea28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	015a      	lsls	r2, r3, #5
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	693a      	ldr	r2, [r7, #16]
 800ea44:	0151      	lsls	r1, r2, #5
 800ea46:	697a      	ldr	r2, [r7, #20]
 800ea48:	440a      	add	r2, r1
 800ea4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea4e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea52:	6013      	str	r3, [r2, #0]
 800ea54:	e092      	b.n	800eb7c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	015a      	lsls	r2, r3, #5
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	4413      	add	r3, r2
 800ea5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	693a      	ldr	r2, [r7, #16]
 800ea66:	0151      	lsls	r1, r2, #5
 800ea68:	697a      	ldr	r2, [r7, #20]
 800ea6a:	440a      	add	r2, r1
 800ea6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ea70:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ea74:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	695b      	ldr	r3, [r3, #20]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d07e      	beq.n	800eb7c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ea7e:	697b      	ldr	r3, [r7, #20]
 800ea80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	781b      	ldrb	r3, [r3, #0]
 800ea8a:	f003 030f 	and.w	r3, r3, #15
 800ea8e:	2101      	movs	r1, #1
 800ea90:	fa01 f303 	lsl.w	r3, r1, r3
 800ea94:	6979      	ldr	r1, [r7, #20]
 800ea96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	634b      	str	r3, [r1, #52]	; 0x34
 800ea9e:	e06d      	b.n	800eb7c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800eaa0:	693b      	ldr	r3, [r7, #16]
 800eaa2:	015a      	lsls	r2, r3, #5
 800eaa4:	697b      	ldr	r3, [r7, #20]
 800eaa6:	4413      	add	r3, r2
 800eaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eaac:	691b      	ldr	r3, [r3, #16]
 800eaae:	693a      	ldr	r2, [r7, #16]
 800eab0:	0151      	lsls	r1, r2, #5
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	440a      	add	r2, r1
 800eab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eaba:	0cdb      	lsrs	r3, r3, #19
 800eabc:	04db      	lsls	r3, r3, #19
 800eabe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	015a      	lsls	r2, r3, #5
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	4413      	add	r3, r2
 800eac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eacc:	691b      	ldr	r3, [r3, #16]
 800eace:	693a      	ldr	r2, [r7, #16]
 800ead0:	0151      	lsls	r1, r2, #5
 800ead2:	697a      	ldr	r2, [r7, #20]
 800ead4:	440a      	add	r2, r1
 800ead6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eada:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800eade:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800eae2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	695b      	ldr	r3, [r3, #20]
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d003      	beq.n	800eaf4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	689a      	ldr	r2, [r3, #8]
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaf4:	693b      	ldr	r3, [r7, #16]
 800eaf6:	015a      	lsls	r2, r3, #5
 800eaf8:	697b      	ldr	r3, [r7, #20]
 800eafa:	4413      	add	r3, r2
 800eafc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb00:	691b      	ldr	r3, [r3, #16]
 800eb02:	693a      	ldr	r2, [r7, #16]
 800eb04:	0151      	lsls	r1, r2, #5
 800eb06:	697a      	ldr	r2, [r7, #20]
 800eb08:	440a      	add	r2, r1
 800eb0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800eb12:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800eb14:	693b      	ldr	r3, [r7, #16]
 800eb16:	015a      	lsls	r2, r3, #5
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb20:	691a      	ldr	r2, [r3, #16]
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	689b      	ldr	r3, [r3, #8]
 800eb26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb2a:	6939      	ldr	r1, [r7, #16]
 800eb2c:	0148      	lsls	r0, r1, #5
 800eb2e:	6979      	ldr	r1, [r7, #20]
 800eb30:	4401      	add	r1, r0
 800eb32:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800eb36:	4313      	orrs	r3, r2
 800eb38:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800eb3a:	79fb      	ldrb	r3, [r7, #7]
 800eb3c:	2b01      	cmp	r3, #1
 800eb3e:	d10d      	bne.n	800eb5c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb40:	68bb      	ldr	r3, [r7, #8]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d009      	beq.n	800eb5c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb48:	68bb      	ldr	r3, [r7, #8]
 800eb4a:	68d9      	ldr	r1, [r3, #12]
 800eb4c:	693b      	ldr	r3, [r7, #16]
 800eb4e:	015a      	lsls	r2, r3, #5
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	4413      	add	r3, r2
 800eb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb58:	460a      	mov	r2, r1
 800eb5a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb5c:	693b      	ldr	r3, [r7, #16]
 800eb5e:	015a      	lsls	r2, r3, #5
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	4413      	add	r3, r2
 800eb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	693a      	ldr	r2, [r7, #16]
 800eb6c:	0151      	lsls	r1, r2, #5
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	440a      	add	r2, r1
 800eb72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800eb76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800eb7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	371c      	adds	r7, #28
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b089      	sub	sp, #36	; 0x24
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	60f8      	str	r0, [r7, #12]
 800eb92:	60b9      	str	r1, [r7, #8]
 800eb94:	4611      	mov	r1, r2
 800eb96:	461a      	mov	r2, r3
 800eb98:	460b      	mov	r3, r1
 800eb9a:	71fb      	strb	r3, [r7, #7]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800eba8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d11a      	bne.n	800ebe6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ebb0:	88bb      	ldrh	r3, [r7, #4]
 800ebb2:	3303      	adds	r3, #3
 800ebb4:	089b      	lsrs	r3, r3, #2
 800ebb6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ebb8:	2300      	movs	r3, #0
 800ebba:	61bb      	str	r3, [r7, #24]
 800ebbc:	e00f      	b.n	800ebde <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ebbe:	79fb      	ldrb	r3, [r7, #7]
 800ebc0:	031a      	lsls	r2, r3, #12
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ebca:	461a      	mov	r2, r3
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ebd8:	69bb      	ldr	r3, [r7, #24]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	61bb      	str	r3, [r7, #24]
 800ebde:	69ba      	ldr	r2, [r7, #24]
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	429a      	cmp	r2, r3
 800ebe4:	d3eb      	bcc.n	800ebbe <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ebe6:	2300      	movs	r3, #0
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3724      	adds	r7, #36	; 0x24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b089      	sub	sp, #36	; 0x24
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800ec0a:	88fb      	ldrh	r3, [r7, #6]
 800ec0c:	3303      	adds	r3, #3
 800ec0e:	089b      	lsrs	r3, r3, #2
 800ec10:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800ec12:	2300      	movs	r3, #0
 800ec14:	61bb      	str	r3, [r7, #24]
 800ec16:	e00b      	b.n	800ec30 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ec18:	697b      	ldr	r3, [r7, #20]
 800ec1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ec1e:	681a      	ldr	r2, [r3, #0]
 800ec20:	69fb      	ldr	r3, [r7, #28]
 800ec22:	601a      	str	r2, [r3, #0]
    pDest++;
 800ec24:	69fb      	ldr	r3, [r7, #28]
 800ec26:	3304      	adds	r3, #4
 800ec28:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800ec2a:	69bb      	ldr	r3, [r7, #24]
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	61bb      	str	r3, [r7, #24]
 800ec30:	69ba      	ldr	r2, [r7, #24]
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d3ef      	bcc.n	800ec18 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800ec38:	69fb      	ldr	r3, [r7, #28]
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3724      	adds	r7, #36	; 0x24
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec44:	4770      	bx	lr

0800ec46 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ec46:	b480      	push	{r7}
 800ec48:	b085      	sub	sp, #20
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
 800ec4e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	785b      	ldrb	r3, [r3, #1]
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d12c      	bne.n	800ecbc <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	015a      	lsls	r2, r3, #5
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	4413      	add	r3, r2
 800ec6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	db12      	blt.n	800ec9a <USB_EPSetStall+0x54>
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d00f      	beq.n	800ec9a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	015a      	lsls	r2, r3, #5
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	4413      	add	r3, r2
 800ec82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	68ba      	ldr	r2, [r7, #8]
 800ec8a:	0151      	lsls	r1, r2, #5
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	440a      	add	r2, r1
 800ec90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ec94:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ec98:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	015a      	lsls	r2, r3, #5
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	4413      	add	r3, r2
 800eca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68ba      	ldr	r2, [r7, #8]
 800ecaa:	0151      	lsls	r1, r2, #5
 800ecac:	68fa      	ldr	r2, [r7, #12]
 800ecae:	440a      	add	r2, r1
 800ecb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ecb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ecb8:	6013      	str	r3, [r2, #0]
 800ecba:	e02b      	b.n	800ed14 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ecbc:	68bb      	ldr	r3, [r7, #8]
 800ecbe:	015a      	lsls	r2, r3, #5
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	4413      	add	r3, r2
 800ecc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	db12      	blt.n	800ecf4 <USB_EPSetStall+0xae>
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00f      	beq.n	800ecf4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	015a      	lsls	r2, r3, #5
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	4413      	add	r3, r2
 800ecdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	0151      	lsls	r1, r2, #5
 800ece6:	68fa      	ldr	r2, [r7, #12]
 800ece8:	440a      	add	r2, r1
 800ecea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ecee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ecf2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	015a      	lsls	r2, r3, #5
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4413      	add	r3, r2
 800ecfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	68ba      	ldr	r2, [r7, #8]
 800ed04:	0151      	lsls	r1, r2, #5
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	440a      	add	r2, r1
 800ed0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ed0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ed12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ed14:	2300      	movs	r3, #0
}
 800ed16:	4618      	mov	r0, r3
 800ed18:	3714      	adds	r7, #20
 800ed1a:	46bd      	mov	sp, r7
 800ed1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed20:	4770      	bx	lr

0800ed22 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ed22:	b480      	push	{r7}
 800ed24:	b085      	sub	sp, #20
 800ed26:	af00      	add	r7, sp, #0
 800ed28:	6078      	str	r0, [r7, #4]
 800ed2a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ed30:	683b      	ldr	r3, [r7, #0]
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ed36:	683b      	ldr	r3, [r7, #0]
 800ed38:	785b      	ldrb	r3, [r3, #1]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d128      	bne.n	800ed90 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	015a      	lsls	r2, r3, #5
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	4413      	add	r3, r2
 800ed46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	68ba      	ldr	r2, [r7, #8]
 800ed4e:	0151      	lsls	r1, r2, #5
 800ed50:	68fa      	ldr	r2, [r7, #12]
 800ed52:	440a      	add	r2, r1
 800ed54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ed5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	78db      	ldrb	r3, [r3, #3]
 800ed62:	2b03      	cmp	r3, #3
 800ed64:	d003      	beq.n	800ed6e <USB_EPClearStall+0x4c>
 800ed66:	683b      	ldr	r3, [r7, #0]
 800ed68:	78db      	ldrb	r3, [r3, #3]
 800ed6a:	2b02      	cmp	r3, #2
 800ed6c:	d138      	bne.n	800ede0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	015a      	lsls	r2, r3, #5
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	4413      	add	r3, r2
 800ed76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	68ba      	ldr	r2, [r7, #8]
 800ed7e:	0151      	lsls	r1, r2, #5
 800ed80:	68fa      	ldr	r2, [r7, #12]
 800ed82:	440a      	add	r2, r1
 800ed84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ed88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed8c:	6013      	str	r3, [r2, #0]
 800ed8e:	e027      	b.n	800ede0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ed90:	68bb      	ldr	r3, [r7, #8]
 800ed92:	015a      	lsls	r2, r3, #5
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	4413      	add	r3, r2
 800ed98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed9c:	681b      	ldr	r3, [r3, #0]
 800ed9e:	68ba      	ldr	r2, [r7, #8]
 800eda0:	0151      	lsls	r1, r2, #5
 800eda2:	68fa      	ldr	r2, [r7, #12]
 800eda4:	440a      	add	r2, r1
 800eda6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edaa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800edae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	78db      	ldrb	r3, [r3, #3]
 800edb4:	2b03      	cmp	r3, #3
 800edb6:	d003      	beq.n	800edc0 <USB_EPClearStall+0x9e>
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	78db      	ldrb	r3, [r3, #3]
 800edbc:	2b02      	cmp	r3, #2
 800edbe:	d10f      	bne.n	800ede0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800edc0:	68bb      	ldr	r3, [r7, #8]
 800edc2:	015a      	lsls	r2, r3, #5
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	4413      	add	r3, r2
 800edc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	0151      	lsls	r1, r2, #5
 800edd2:	68fa      	ldr	r2, [r7, #12]
 800edd4:	440a      	add	r2, r1
 800edd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800edda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800edde:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3714      	adds	r7, #20
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr

0800edee <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800edee:	b480      	push	{r7}
 800edf0:	b085      	sub	sp, #20
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
 800edf6:	460b      	mov	r3, r1
 800edf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	68fa      	ldr	r2, [r7, #12]
 800ee08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ee10:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	78fb      	ldrb	r3, [r7, #3]
 800ee1c:	011b      	lsls	r3, r3, #4
 800ee1e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ee22:	68f9      	ldr	r1, [r7, #12]
 800ee24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ee28:	4313      	orrs	r3, r2
 800ee2a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ee2c:	2300      	movs	r3, #0
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3714      	adds	r7, #20
 800ee32:	46bd      	mov	sp, r7
 800ee34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee38:	4770      	bx	lr

0800ee3a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee3a:	b480      	push	{r7}
 800ee3c:	b085      	sub	sp, #20
 800ee3e:	af00      	add	r7, sp, #0
 800ee40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	68fa      	ldr	r2, [r7, #12]
 800ee50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee54:	f023 0303 	bic.w	r3, r3, #3
 800ee58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	68fa      	ldr	r2, [r7, #12]
 800ee64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee68:	f023 0302 	bic.w	r3, r3, #2
 800ee6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ee6e:	2300      	movs	r3, #0
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3714      	adds	r7, #20
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b085      	sub	sp, #20
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ee96:	f023 0303 	bic.w	r3, r3, #3
 800ee9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eea2:	685b      	ldr	r3, [r3, #4]
 800eea4:	68fa      	ldr	r2, [r7, #12]
 800eea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800eeaa:	f043 0302 	orr.w	r3, r3, #2
 800eeae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3714      	adds	r7, #20
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebc:	4770      	bx	lr

0800eebe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800eebe:	b480      	push	{r7}
 800eec0:	b085      	sub	sp, #20
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	695b      	ldr	r3, [r3, #20]
 800eeca:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	699b      	ldr	r3, [r3, #24]
 800eed0:	68fa      	ldr	r2, [r7, #12]
 800eed2:	4013      	ands	r3, r2
 800eed4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800eed6:	68fb      	ldr	r3, [r7, #12]
}
 800eed8:	4618      	mov	r0, r3
 800eeda:	3714      	adds	r7, #20
 800eedc:	46bd      	mov	sp, r7
 800eede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee2:	4770      	bx	lr

0800eee4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800eee4:	b480      	push	{r7}
 800eee6:	b085      	sub	sp, #20
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef00:	69db      	ldr	r3, [r3, #28]
 800ef02:	68ba      	ldr	r2, [r7, #8]
 800ef04:	4013      	ands	r3, r2
 800ef06:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	0c1b      	lsrs	r3, r3, #16
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	3714      	adds	r7, #20
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ef18:	b480      	push	{r7}
 800ef1a:	b085      	sub	sp, #20
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef2a:	699b      	ldr	r3, [r3, #24]
 800ef2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	68ba      	ldr	r2, [r7, #8]
 800ef38:	4013      	ands	r3, r2
 800ef3a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	b29b      	uxth	r3, r3
}
 800ef40:	4618      	mov	r0, r3
 800ef42:	3714      	adds	r7, #20
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b085      	sub	sp, #20
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
 800ef54:	460b      	mov	r3, r1
 800ef56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ef5c:	78fb      	ldrb	r3, [r7, #3]
 800ef5e:	015a      	lsls	r2, r3, #5
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	4413      	add	r3, r2
 800ef64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ef68:	689b      	ldr	r3, [r3, #8]
 800ef6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	68ba      	ldr	r2, [r7, #8]
 800ef76:	4013      	ands	r3, r2
 800ef78:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ef7a:	68bb      	ldr	r3, [r7, #8]
}
 800ef7c:	4618      	mov	r0, r3
 800ef7e:	3714      	adds	r7, #20
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b087      	sub	sp, #28
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
 800ef90:	460b      	mov	r3, r1
 800ef92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ef98:	697b      	ldr	r3, [r7, #20]
 800ef9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efaa:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800efac:	78fb      	ldrb	r3, [r7, #3]
 800efae:	f003 030f 	and.w	r3, r3, #15
 800efb2:	68fa      	ldr	r2, [r7, #12]
 800efb4:	fa22 f303 	lsr.w	r3, r2, r3
 800efb8:	01db      	lsls	r3, r3, #7
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	693a      	ldr	r2, [r7, #16]
 800efbe:	4313      	orrs	r3, r2
 800efc0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800efc2:	78fb      	ldrb	r3, [r7, #3]
 800efc4:	015a      	lsls	r2, r3, #5
 800efc6:	697b      	ldr	r3, [r7, #20]
 800efc8:	4413      	add	r3, r2
 800efca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	4013      	ands	r3, r2
 800efd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800efd6:	68bb      	ldr	r3, [r7, #8]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	371c      	adds	r7, #28
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	695b      	ldr	r3, [r3, #20]
 800eff0:	f003 0301 	and.w	r3, r3, #1
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	370c      	adds	r7, #12
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr

0800f000 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800f000:	b480      	push	{r7}
 800f002:	b085      	sub	sp, #20
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	68fa      	ldr	r2, [r7, #12]
 800f016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f01a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800f01e:	f023 0307 	bic.w	r3, r3, #7
 800f022:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	68fa      	ldr	r2, [r7, #12]
 800f02e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f036:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3714      	adds	r7, #20
 800f03e:	46bd      	mov	sp, r7
 800f040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f044:	4770      	bx	lr
	...

0800f048 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800f048:	b480      	push	{r7}
 800f04a:	b087      	sub	sp, #28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	460b      	mov	r3, r1
 800f052:	607a      	str	r2, [r7, #4]
 800f054:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	333c      	adds	r3, #60	; 0x3c
 800f05e:	3304      	adds	r3, #4
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f064:	693b      	ldr	r3, [r7, #16]
 800f066:	4a26      	ldr	r2, [pc, #152]	; (800f100 <USB_EP0_OutStart+0xb8>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d90a      	bls.n	800f082 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f078:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f07c:	d101      	bne.n	800f082 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f07e:	2300      	movs	r3, #0
 800f080:	e037      	b.n	800f0f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f082:	697b      	ldr	r3, [r7, #20]
 800f084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f088:	461a      	mov	r2, r3
 800f08a:	2300      	movs	r3, #0
 800f08c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	697a      	ldr	r2, [r7, #20]
 800f098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f09c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f0a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f0a2:	697b      	ldr	r3, [r7, #20]
 800f0a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0a8:	691b      	ldr	r3, [r3, #16]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0b0:	f043 0318 	orr.w	r3, r3, #24
 800f0b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f0b6:	697b      	ldr	r3, [r7, #20]
 800f0b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	697a      	ldr	r2, [r7, #20]
 800f0c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0c4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800f0c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f0ca:	7afb      	ldrb	r3, [r7, #11]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	d10f      	bne.n	800f0f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	697a      	ldr	r2, [r7, #20]
 800f0e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f0ea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800f0ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f0f0:	2300      	movs	r3, #0
}
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	371c      	adds	r7, #28
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	4f54300a 	.word	0x4f54300a

0800f104 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800f10c:	2300      	movs	r3, #0
 800f10e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	3301      	adds	r3, #1
 800f114:	60fb      	str	r3, [r7, #12]
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	4a13      	ldr	r2, [pc, #76]	; (800f168 <USB_CoreReset+0x64>)
 800f11a:	4293      	cmp	r3, r2
 800f11c:	d901      	bls.n	800f122 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f11e:	2303      	movs	r3, #3
 800f120:	e01b      	b.n	800f15a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	691b      	ldr	r3, [r3, #16]
 800f126:	2b00      	cmp	r3, #0
 800f128:	daf2      	bge.n	800f110 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f12a:	2300      	movs	r3, #0
 800f12c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	691b      	ldr	r3, [r3, #16]
 800f132:	f043 0201 	orr.w	r2, r3, #1
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	3301      	adds	r3, #1
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	4a09      	ldr	r2, [pc, #36]	; (800f168 <USB_CoreReset+0x64>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d901      	bls.n	800f14c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f148:	2303      	movs	r3, #3
 800f14a:	e006      	b.n	800f15a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	691b      	ldr	r3, [r3, #16]
 800f150:	f003 0301 	and.w	r3, r3, #1
 800f154:	2b01      	cmp	r3, #1
 800f156:	d0f0      	beq.n	800f13a <USB_CoreReset+0x36>

  return HAL_OK;
 800f158:	2300      	movs	r3, #0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
 800f166:	bf00      	nop
 800f168:	00030d40 	.word	0x00030d40

0800f16c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800f170:	4904      	ldr	r1, [pc, #16]	; (800f184 <MX_FATFS_Init+0x18>)
 800f172:	4805      	ldr	r0, [pc, #20]	; (800f188 <MX_FATFS_Init+0x1c>)
 800f174:	f002 f9c0 	bl	80114f8 <FATFS_LinkDriver>
 800f178:	4603      	mov	r3, r0
 800f17a:	461a      	mov	r2, r3
 800f17c:	4b03      	ldr	r3, [pc, #12]	; (800f18c <MX_FATFS_Init+0x20>)
 800f17e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f180:	bf00      	nop
 800f182:	bd80      	pop	{r7, pc}
 800f184:	20004d54 	.word	0x20004d54
 800f188:	2000028c 	.word	0x2000028c
 800f18c:	20004d58 	.word	0x20004d58

0800f190 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	4603      	mov	r3, r0
 800f198:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return USER_SPI_initialize(pdrv);
 800f19a:	79fb      	ldrb	r3, [r7, #7]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f000 f9d7 	bl	800f550 <USER_SPI_initialize>
 800f1a2:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	3708      	adds	r7, #8
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	bd80      	pop	{r7, pc}

0800f1ac <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b082      	sub	sp, #8
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return USER_SPI_status(pdrv);
 800f1b6:	79fb      	ldrb	r3, [r7, #7]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f000 fab3 	bl	800f724 <USER_SPI_status>
 800f1be:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3708      	adds	r7, #8
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60b9      	str	r1, [r7, #8]
 800f1d0:	607a      	str	r2, [r7, #4]
 800f1d2:	603b      	str	r3, [r7, #0]
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return USER_SPI_read(pdrv, buff, sector, count);
 800f1d8:	7bf8      	ldrb	r0, [r7, #15]
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	687a      	ldr	r2, [r7, #4]
 800f1de:	68b9      	ldr	r1, [r7, #8]
 800f1e0:	f000 fab6 	bl	800f750 <USER_SPI_read>
 800f1e4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	3710      	adds	r7, #16
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	bd80      	pop	{r7, pc}

0800f1ee <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800f1ee:	b580      	push	{r7, lr}
 800f1f0:	b084      	sub	sp, #16
 800f1f2:	af00      	add	r7, sp, #0
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	607a      	str	r2, [r7, #4]
 800f1f8:	603b      	str	r3, [r7, #0]
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return USER_SPI_write(pdrv, buff, sector, count);
 800f1fe:	7bf8      	ldrb	r0, [r7, #15]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	687a      	ldr	r2, [r7, #4]
 800f204:	68b9      	ldr	r1, [r7, #8]
 800f206:	f000 fb09 	bl	800f81c <USER_SPI_write>
 800f20a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3710      	adds	r7, #16
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b082      	sub	sp, #8
 800f218:	af00      	add	r7, sp, #0
 800f21a:	4603      	mov	r3, r0
 800f21c:	603a      	str	r2, [r7, #0]
 800f21e:	71fb      	strb	r3, [r7, #7]
 800f220:	460b      	mov	r3, r1
 800f222:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return USER_SPI_ioctl(pdrv, cmd, buff);
 800f224:	79b9      	ldrb	r1, [r7, #6]
 800f226:	79fb      	ldrb	r3, [r7, #7]
 800f228:	683a      	ldr	r2, [r7, #0]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f000 fb72 	bl	800f914 <USER_SPI_ioctl>
 800f230:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}
	...

0800f23c <SPI_Timer_On>:
BYTE CardType;          /* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800f244:	f7f8 f97c 	bl	8007540 <HAL_GetTick>
 800f248:	4602      	mov	r2, r0
 800f24a:	4b04      	ldr	r3, [pc, #16]	; (800f25c <SPI_Timer_On+0x20>)
 800f24c:	601a      	str	r2, [r3, #0]
    spiTimerTickDelay = waitTicks;
 800f24e:	4a04      	ldr	r2, [pc, #16]	; (800f260 <SPI_Timer_On+0x24>)
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	6013      	str	r3, [r2, #0]
}
 800f254:	bf00      	nop
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	200051c0 	.word	0x200051c0
 800f260:	200051c4 	.word	0x200051c4

0800f264 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800f264:	b580      	push	{r7, lr}
 800f266:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800f268:	f7f8 f96a 	bl	8007540 <HAL_GetTick>
 800f26c:	4602      	mov	r2, r0
 800f26e:	4b06      	ldr	r3, [pc, #24]	; (800f288 <SPI_Timer_Status+0x24>)
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	1ad2      	subs	r2, r2, r3
 800f274:	4b05      	ldr	r3, [pc, #20]	; (800f28c <SPI_Timer_Status+0x28>)
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	bf34      	ite	cc
 800f27c:	2301      	movcc	r3, #1
 800f27e:	2300      	movcs	r3, #0
 800f280:	b2db      	uxtb	r3, r3
}
 800f282:	4618      	mov	r0, r3
 800f284:	bd80      	pop	{r7, pc}
 800f286:	bf00      	nop
 800f288:	200051c0 	.word	0x200051c0
 800f28c:	200051c4 	.word	0x200051c4

0800f290 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
    BYTE dat    /* Data to send */
)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b086      	sub	sp, #24
 800f294:	af02      	add	r7, sp, #8
 800f296:	4603      	mov	r3, r0
 800f298:	71fb      	strb	r3, [r7, #7]
    BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800f29a:	f107 020f 	add.w	r2, r7, #15
 800f29e:	1df9      	adds	r1, r7, #7
 800f2a0:	2332      	movs	r3, #50	; 0x32
 800f2a2:	9300      	str	r3, [sp, #0]
 800f2a4:	2301      	movs	r3, #1
 800f2a6:	4804      	ldr	r0, [pc, #16]	; (800f2b8 <xchg_spi+0x28>)
 800f2a8:	f7fd f851 	bl	800c34e <HAL_SPI_TransmitReceive>
    return rxDat;
 800f2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3710      	adds	r7, #16
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	20004bac 	.word	0x20004bac

0800f2bc <rcvr_spi_multi>:
static
void rcvr_spi_multi (
    BYTE *buff,     /* Pointer to data buffer */
    UINT btr        /* Number of bytes to receive (even number) */
)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	b085      	sub	sp, #20
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	6078      	str	r0, [r7, #4]
 800f2c4:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btr; i++) {
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	60fb      	str	r3, [r7, #12]
 800f2ca:	e00a      	b.n	800f2e2 <rcvr_spi_multi+0x26>
        *(buff+i) = xchg_spi(0xFF);
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	18d4      	adds	r4, r2, r3
 800f2d2:	20ff      	movs	r0, #255	; 0xff
 800f2d4:	f7ff ffdc 	bl	800f290 <xchg_spi>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	7023      	strb	r3, [r4, #0]
    for(UINT i=0; i<btr; i++) {
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	3301      	adds	r3, #1
 800f2e0:	60fb      	str	r3, [r7, #12]
 800f2e2:	68fa      	ldr	r2, [r7, #12]
 800f2e4:	683b      	ldr	r3, [r7, #0]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d3f0      	bcc.n	800f2cc <rcvr_spi_multi+0x10>
    }
}
 800f2ea:	bf00      	nop
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd90      	pop	{r4, r7, pc}

0800f2f2 <xmit_spi_multi>:
static
void xmit_spi_multi (
    const BYTE *buff,   /* Pointer to the data */
    UINT btx            /* Number of bytes to send (even number) */
)
{
 800f2f2:	b580      	push	{r7, lr}
 800f2f4:	b084      	sub	sp, #16
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
 800f2fa:	6039      	str	r1, [r7, #0]
    for(UINT i=0; i<btx; i++) {
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	60fb      	str	r3, [r7, #12]
 800f300:	e009      	b.n	800f316 <xmit_spi_multi+0x24>
        xchg_spi(*(buff+i));
 800f302:	687a      	ldr	r2, [r7, #4]
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	4413      	add	r3, r2
 800f308:	781b      	ldrb	r3, [r3, #0]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f7ff ffc0 	bl	800f290 <xchg_spi>
    for(UINT i=0; i<btx; i++) {
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	3301      	adds	r3, #1
 800f314:	60fb      	str	r3, [r7, #12]
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	683b      	ldr	r3, [r7, #0]
 800f31a:	429a      	cmp	r2, r3
 800f31c:	d3f1      	bcc.n	800f302 <xmit_spi_multi+0x10>
    }
}
 800f31e:	bf00      	nop
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <wait_ready>:

static
int wait_ready (    /* 1:Ready, 0:Timeout */
    UINT wt         /* Timeout [ms] */
)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b086      	sub	sp, #24
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
    //wait_ready needs its own timer, unfortunately, so it can't use the
    //spi_timer functions
    uint32_t waitSpiTimerTickStart;
    uint32_t waitSpiTimerTickDelay;

    waitSpiTimerTickStart = HAL_GetTick();
 800f32e:	f7f8 f907 	bl	8007540 <HAL_GetTick>
 800f332:	6178      	str	r0, [r7, #20]
    waitSpiTimerTickDelay = (uint32_t)wt;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	613b      	str	r3, [r7, #16]
    do {
        d = xchg_spi(0xFF);
 800f338:	20ff      	movs	r0, #255	; 0xff
 800f33a:	f7ff ffa9 	bl	800f290 <xchg_spi>
 800f33e:	4603      	mov	r3, r0
 800f340:	73fb      	strb	r3, [r7, #15]
        /* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
    } while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));   /* Wait for card goes ready or timeout */
 800f342:	7bfb      	ldrb	r3, [r7, #15]
 800f344:	2bff      	cmp	r3, #255	; 0xff
 800f346:	d007      	beq.n	800f358 <wait_ready+0x32>
 800f348:	f7f8 f8fa 	bl	8007540 <HAL_GetTick>
 800f34c:	4602      	mov	r2, r0
 800f34e:	697b      	ldr	r3, [r7, #20]
 800f350:	1ad3      	subs	r3, r2, r3
 800f352:	693a      	ldr	r2, [r7, #16]
 800f354:	429a      	cmp	r2, r3
 800f356:	d8ef      	bhi.n	800f338 <wait_ready+0x12>

    return (d == 0xFF) ? 1 : 0;
 800f358:	7bfb      	ldrb	r3, [r7, #15]
 800f35a:	2bff      	cmp	r3, #255	; 0xff
 800f35c:	bf0c      	ite	eq
 800f35e:	2301      	moveq	r3, #1
 800f360:	2300      	movne	r3, #0
 800f362:	b2db      	uxtb	r3, r3
}
 800f364:	4618      	mov	r0, r3
 800f366:	3718      	adds	r7, #24
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	af00      	add	r7, sp, #0
    CS_HIGH();      /* Set CS# high */
 800f370:	2201      	movs	r2, #1
 800f372:	2110      	movs	r1, #16
 800f374:	4803      	ldr	r0, [pc, #12]	; (800f384 <despiselect+0x18>)
 800f376:	f7f9 fad5 	bl	8008924 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 800f37a:	20ff      	movs	r0, #255	; 0xff
 800f37c:	f7ff ff88 	bl	800f290 <xchg_spi>

}
 800f380:	bf00      	nop
 800f382:	bd80      	pop	{r7, pc}
 800f384:	40020800 	.word	0x40020800

0800f388 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)    /* 1:OK, 0:Timeout */
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	af00      	add	r7, sp, #0
    CS_LOW();       /* Set CS# low */
 800f38c:	2200      	movs	r2, #0
 800f38e:	2110      	movs	r1, #16
 800f390:	4809      	ldr	r0, [pc, #36]	; (800f3b8 <spiselect+0x30>)
 800f392:	f7f9 fac7 	bl	8008924 <HAL_GPIO_WritePin>
    xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 800f396:	20ff      	movs	r0, #255	; 0xff
 800f398:	f7ff ff7a 	bl	800f290 <xchg_spi>
    if (wait_ready(500)) return 1;  /* Wait for card ready */
 800f39c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f3a0:	f7ff ffc1 	bl	800f326 <wait_ready>
 800f3a4:	4603      	mov	r3, r0
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <spiselect+0x26>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e002      	b.n	800f3b4 <spiselect+0x2c>

    despiselect();
 800f3ae:	f7ff ffdd 	bl	800f36c <despiselect>
    return 0;   /* Timeout */
 800f3b2:	2300      	movs	r3, #0
}
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	40020800 	.word	0x40020800

0800f3bc <rcvr_datablock>:
static
int rcvr_datablock (    /* 1:OK, 0:Error */
    BYTE *buff,         /* Data buffer */
    UINT btr            /* Data block length (byte) */
)
{
 800f3bc:	b580      	push	{r7, lr}
 800f3be:	b084      	sub	sp, #16
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	6039      	str	r1, [r7, #0]
    BYTE token;


    SPI_Timer_On(200);
 800f3c6:	20c8      	movs	r0, #200	; 0xc8
 800f3c8:	f7ff ff38 	bl	800f23c <SPI_Timer_On>
    do {                            /* Wait for DataStart token in timeout of 200ms */
        token = xchg_spi(0xFF);
 800f3cc:	20ff      	movs	r0, #255	; 0xff
 800f3ce:	f7ff ff5f 	bl	800f290 <xchg_spi>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	73fb      	strb	r3, [r7, #15]
        /* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
    } while ((token == 0xFF) && SPI_Timer_Status());
 800f3d6:	7bfb      	ldrb	r3, [r7, #15]
 800f3d8:	2bff      	cmp	r3, #255	; 0xff
 800f3da:	d104      	bne.n	800f3e6 <rcvr_datablock+0x2a>
 800f3dc:	f7ff ff42 	bl	800f264 <SPI_Timer_Status>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d1f2      	bne.n	800f3cc <rcvr_datablock+0x10>
    if(token != 0xFE) return 0;     /* Function fails if invalid DataStart token or timeout */
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	2bfe      	cmp	r3, #254	; 0xfe
 800f3ea:	d001      	beq.n	800f3f0 <rcvr_datablock+0x34>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e00a      	b.n	800f406 <rcvr_datablock+0x4a>

    rcvr_spi_multi(buff, btr);      /* Store trailing data to the buffer */
 800f3f0:	6839      	ldr	r1, [r7, #0]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff ff62 	bl	800f2bc <rcvr_spi_multi>
    xchg_spi(0xFF); xchg_spi(0xFF);         /* Discard CRC */
 800f3f8:	20ff      	movs	r0, #255	; 0xff
 800f3fa:	f7ff ff49 	bl	800f290 <xchg_spi>
 800f3fe:	20ff      	movs	r0, #255	; 0xff
 800f400:	f7ff ff46 	bl	800f290 <xchg_spi>

    return 1;                       /* Function succeeded */
 800f404:	2301      	movs	r3, #1
}
 800f406:	4618      	mov	r0, r3
 800f408:	3710      	adds	r7, #16
 800f40a:	46bd      	mov	sp, r7
 800f40c:	bd80      	pop	{r7, pc}

0800f40e <xmit_datablock>:
static
int xmit_datablock (    /* 1:OK, 0:Failed */
    const BYTE *buff,   /* Ponter to 512 byte data to be sent */
    BYTE token          /* Token */
)
{
 800f40e:	b580      	push	{r7, lr}
 800f410:	b084      	sub	sp, #16
 800f412:	af00      	add	r7, sp, #0
 800f414:	6078      	str	r0, [r7, #4]
 800f416:	460b      	mov	r3, r1
 800f418:	70fb      	strb	r3, [r7, #3]
    BYTE resp;


    if (!wait_ready(500)) return 0;     /* Wait for card ready */
 800f41a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800f41e:	f7ff ff82 	bl	800f326 <wait_ready>
 800f422:	4603      	mov	r3, r0
 800f424:	2b00      	cmp	r3, #0
 800f426:	d101      	bne.n	800f42c <xmit_datablock+0x1e>
 800f428:	2300      	movs	r3, #0
 800f42a:	e01e      	b.n	800f46a <xmit_datablock+0x5c>

    xchg_spi(token);                    /* Send token */
 800f42c:	78fb      	ldrb	r3, [r7, #3]
 800f42e:	4618      	mov	r0, r3
 800f430:	f7ff ff2e 	bl	800f290 <xchg_spi>
    if (token != 0xFD) {                /* Send data if token is other than StopTran */
 800f434:	78fb      	ldrb	r3, [r7, #3]
 800f436:	2bfd      	cmp	r3, #253	; 0xfd
 800f438:	d016      	beq.n	800f468 <xmit_datablock+0x5a>
        xmit_spi_multi(buff, 512);      /* Data */
 800f43a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f43e:	6878      	ldr	r0, [r7, #4]
 800f440:	f7ff ff57 	bl	800f2f2 <xmit_spi_multi>
        xchg_spi(0xFF); xchg_spi(0xFF); /* Dummy CRC */
 800f444:	20ff      	movs	r0, #255	; 0xff
 800f446:	f7ff ff23 	bl	800f290 <xchg_spi>
 800f44a:	20ff      	movs	r0, #255	; 0xff
 800f44c:	f7ff ff20 	bl	800f290 <xchg_spi>

        resp = xchg_spi(0xFF);              /* Receive data resp */
 800f450:	20ff      	movs	r0, #255	; 0xff
 800f452:	f7ff ff1d 	bl	800f290 <xchg_spi>
 800f456:	4603      	mov	r3, r0
 800f458:	73fb      	strb	r3, [r7, #15]
        if ((resp & 0x1F) != 0x05) return 0;    /* Function fails if the data packet was not accepted */
 800f45a:	7bfb      	ldrb	r3, [r7, #15]
 800f45c:	f003 031f 	and.w	r3, r3, #31
 800f460:	2b05      	cmp	r3, #5
 800f462:	d001      	beq.n	800f468 <xmit_datablock+0x5a>
 800f464:	2300      	movs	r3, #0
 800f466:	e000      	b.n	800f46a <xmit_datablock+0x5c>
    }
    return 1;
 800f468:	2301      	movs	r3, #1
}
 800f46a:	4618      	mov	r0, r3
 800f46c:	3710      	adds	r7, #16
 800f46e:	46bd      	mov	sp, r7
 800f470:	bd80      	pop	{r7, pc}

0800f472 <send_cmd>:
static
BYTE send_cmd (     /* Return value: R1 resp (bit7==1:Failed to send) */
    BYTE cmd,       /* Command index */
    DWORD arg       /* Argument */
)
{
 800f472:	b580      	push	{r7, lr}
 800f474:	b084      	sub	sp, #16
 800f476:	af00      	add	r7, sp, #0
 800f478:	4603      	mov	r3, r0
 800f47a:	6039      	str	r1, [r7, #0]
 800f47c:	71fb      	strb	r3, [r7, #7]
    BYTE n, res;


    if (cmd & 0x80) {   /* Send a CMD55 prior to ACMD<n> */
 800f47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f482:	2b00      	cmp	r3, #0
 800f484:	da0e      	bge.n	800f4a4 <send_cmd+0x32>
        cmd &= 0x7F;
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f48c:	71fb      	strb	r3, [r7, #7]
        res = send_cmd(CMD55, 0);
 800f48e:	2100      	movs	r1, #0
 800f490:	2037      	movs	r0, #55	; 0x37
 800f492:	f7ff ffee 	bl	800f472 <send_cmd>
 800f496:	4603      	mov	r3, r0
 800f498:	73bb      	strb	r3, [r7, #14]
        if (res > 1) return res;
 800f49a:	7bbb      	ldrb	r3, [r7, #14]
 800f49c:	2b01      	cmp	r3, #1
 800f49e:	d901      	bls.n	800f4a4 <send_cmd+0x32>
 800f4a0:	7bbb      	ldrb	r3, [r7, #14]
 800f4a2:	e051      	b.n	800f548 <send_cmd+0xd6>
    }

    /* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12) {
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	2b0c      	cmp	r3, #12
 800f4a8:	d008      	beq.n	800f4bc <send_cmd+0x4a>
        despiselect();
 800f4aa:	f7ff ff5f 	bl	800f36c <despiselect>
        if (!spiselect()) return 0xFF;
 800f4ae:	f7ff ff6b 	bl	800f388 <spiselect>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d101      	bne.n	800f4bc <send_cmd+0x4a>
 800f4b8:	23ff      	movs	r3, #255	; 0xff
 800f4ba:	e045      	b.n	800f548 <send_cmd+0xd6>
    }

    /* Send command packet */
    xchg_spi(0x40 | cmd);               /* Start + command index */
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f7ff fee3 	bl	800f290 <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));        /* Argument[31..24] */
 800f4ca:	683b      	ldr	r3, [r7, #0]
 800f4cc:	0e1b      	lsrs	r3, r3, #24
 800f4ce:	b2db      	uxtb	r3, r3
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7ff fedd 	bl	800f290 <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));        /* Argument[23..16] */
 800f4d6:	683b      	ldr	r3, [r7, #0]
 800f4d8:	0c1b      	lsrs	r3, r3, #16
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7ff fed7 	bl	800f290 <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));         /* Argument[15..8] */
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	0a1b      	lsrs	r3, r3, #8
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f7ff fed1 	bl	800f290 <xchg_spi>
    xchg_spi((BYTE)arg);                /* Argument[7..0] */
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	f7ff fecc 	bl	800f290 <xchg_spi>
    n = 0x01;                           /* Dummy CRC + Stop */
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD0) n = 0x95;          /* Valid CRC for CMD0(0) */
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d101      	bne.n	800f506 <send_cmd+0x94>
 800f502:	2395      	movs	r3, #149	; 0x95
 800f504:	73fb      	strb	r3, [r7, #15]
    if (cmd == CMD8) n = 0x87;          /* Valid CRC for CMD8(0x1AA) */
 800f506:	79fb      	ldrb	r3, [r7, #7]
 800f508:	2b08      	cmp	r3, #8
 800f50a:	d101      	bne.n	800f510 <send_cmd+0x9e>
 800f50c:	2387      	movs	r3, #135	; 0x87
 800f50e:	73fb      	strb	r3, [r7, #15]
    xchg_spi(n);
 800f510:	7bfb      	ldrb	r3, [r7, #15]
 800f512:	4618      	mov	r0, r3
 800f514:	f7ff febc 	bl	800f290 <xchg_spi>

    /* Receive command resp */
    if (cmd == CMD12) xchg_spi(0xFF);   /* Diacard following one byte when CMD12 */
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	2b0c      	cmp	r3, #12
 800f51c:	d102      	bne.n	800f524 <send_cmd+0xb2>
 800f51e:	20ff      	movs	r0, #255	; 0xff
 800f520:	f7ff feb6 	bl	800f290 <xchg_spi>
    n = 10;                             /* Wait for response (10 bytes max) */
 800f524:	230a      	movs	r3, #10
 800f526:	73fb      	strb	r3, [r7, #15]
    do {
        res = xchg_spi(0xFF);
 800f528:	20ff      	movs	r0, #255	; 0xff
 800f52a:	f7ff feb1 	bl	800f290 <xchg_spi>
 800f52e:	4603      	mov	r3, r0
 800f530:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 800f532:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f536:	2b00      	cmp	r3, #0
 800f538:	da05      	bge.n	800f546 <send_cmd+0xd4>
 800f53a:	7bfb      	ldrb	r3, [r7, #15]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	73fb      	strb	r3, [r7, #15]
 800f540:	7bfb      	ldrb	r3, [r7, #15]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d1f0      	bne.n	800f528 <send_cmd+0xb6>

    return res;                         /* Return received response */
 800f546:	7bbb      	ldrb	r3, [r7, #14]
}
 800f548:	4618      	mov	r0, r3
 800f54a:	3710      	adds	r7, #16
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
    BYTE drv        /* Physical drive number (0) */
)
{
 800f550:	b590      	push	{r4, r7, lr}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	4603      	mov	r3, r0
 800f558:	71fb      	strb	r3, [r7, #7]
    BYTE n, cmd, ty, ocr[4];

    if (drv != 0) return STA_NOINIT;        /* Supports only drive 0 */
 800f55a:	79fb      	ldrb	r3, [r7, #7]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d001      	beq.n	800f564 <USER_SPI_initialize+0x14>
 800f560:	2301      	movs	r3, #1
 800f562:	e0d4      	b.n	800f70e <USER_SPI_initialize+0x1be>
    //assume SPI already init init_spi();   /* Initialize SPI */

    if (Stat & STA_NODISK) return Stat; /* Is card existing in the soket? */
 800f564:	4b6c      	ldr	r3, [pc, #432]	; (800f718 <USER_SPI_initialize+0x1c8>)
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	b2db      	uxtb	r3, r3
 800f56a:	f003 0302 	and.w	r3, r3, #2
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d003      	beq.n	800f57a <USER_SPI_initialize+0x2a>
 800f572:	4b69      	ldr	r3, [pc, #420]	; (800f718 <USER_SPI_initialize+0x1c8>)
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	b2db      	uxtb	r3, r3
 800f578:	e0c9      	b.n	800f70e <USER_SPI_initialize+0x1be>

    FCLK_SLOW();
 800f57a:	4b68      	ldr	r3, [pc, #416]	; (800f71c <USER_SPI_initialize+0x1cc>)
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	681a      	ldr	r2, [r3, #0]
 800f580:	4b66      	ldr	r3, [pc, #408]	; (800f71c <USER_SPI_initialize+0x1cc>)
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 800f588:	601a      	str	r2, [r3, #0]
    for (n = 10; n; n--) xchg_spi(0xFF);    /* Send 80 dummy clocks */
 800f58a:	230a      	movs	r3, #10
 800f58c:	73fb      	strb	r3, [r7, #15]
 800f58e:	e005      	b.n	800f59c <USER_SPI_initialize+0x4c>
 800f590:	20ff      	movs	r0, #255	; 0xff
 800f592:	f7ff fe7d 	bl	800f290 <xchg_spi>
 800f596:	7bfb      	ldrb	r3, [r7, #15]
 800f598:	3b01      	subs	r3, #1
 800f59a:	73fb      	strb	r3, [r7, #15]
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1f6      	bne.n	800f590 <USER_SPI_initialize+0x40>

    ty = 0;
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	737b      	strb	r3, [r7, #13]
    if (send_cmd(CMD0, 0) == 1) {           /* Put the card SPI/Idle state */
 800f5a6:	2100      	movs	r1, #0
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	f7ff ff62 	bl	800f472 <send_cmd>
 800f5ae:	4603      	mov	r3, r0
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	f040 808b 	bne.w	800f6cc <USER_SPI_initialize+0x17c>
        SPI_Timer_On(1000);                 /* Initialization timeout = 1 sec */
 800f5b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800f5ba:	f7ff fe3f 	bl	800f23c <SPI_Timer_On>
        if (send_cmd(CMD8, 0x1AA) == 1) {   /* SDv2? */
 800f5be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f5c2:	2008      	movs	r0, #8
 800f5c4:	f7ff ff55 	bl	800f472 <send_cmd>
 800f5c8:	4603      	mov	r3, r0
 800f5ca:	2b01      	cmp	r3, #1
 800f5cc:	d151      	bne.n	800f672 <USER_SPI_initialize+0x122>
            for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);    /* Get 32 bit return value of R7 resp */
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	73fb      	strb	r3, [r7, #15]
 800f5d2:	e00d      	b.n	800f5f0 <USER_SPI_initialize+0xa0>
 800f5d4:	7bfc      	ldrb	r4, [r7, #15]
 800f5d6:	20ff      	movs	r0, #255	; 0xff
 800f5d8:	f7ff fe5a 	bl	800f290 <xchg_spi>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	461a      	mov	r2, r3
 800f5e0:	f107 0310 	add.w	r3, r7, #16
 800f5e4:	4423      	add	r3, r4
 800f5e6:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f5ea:	7bfb      	ldrb	r3, [r7, #15]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	73fb      	strb	r3, [r7, #15]
 800f5f0:	7bfb      	ldrb	r3, [r7, #15]
 800f5f2:	2b03      	cmp	r3, #3
 800f5f4:	d9ee      	bls.n	800f5d4 <USER_SPI_initialize+0x84>
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) {             /* Is the card supports vcc of 2.7-3.6V? */
 800f5f6:	7abb      	ldrb	r3, [r7, #10]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d167      	bne.n	800f6cc <USER_SPI_initialize+0x17c>
 800f5fc:	7afb      	ldrb	r3, [r7, #11]
 800f5fe:	2baa      	cmp	r3, #170	; 0xaa
 800f600:	d164      	bne.n	800f6cc <USER_SPI_initialize+0x17c>
                while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ; /* Wait for end of initialization with ACMD41(HCS) */
 800f602:	bf00      	nop
 800f604:	f7ff fe2e 	bl	800f264 <SPI_Timer_Status>
 800f608:	4603      	mov	r3, r0
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d007      	beq.n	800f61e <USER_SPI_initialize+0xce>
 800f60e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f612:	20a9      	movs	r0, #169	; 0xa9
 800f614:	f7ff ff2d 	bl	800f472 <send_cmd>
 800f618:	4603      	mov	r3, r0
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d1f2      	bne.n	800f604 <USER_SPI_initialize+0xb4>
                if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {        /* Check CCS bit in the OCR */
 800f61e:	f7ff fe21 	bl	800f264 <SPI_Timer_Status>
 800f622:	4603      	mov	r3, r0
 800f624:	2b00      	cmp	r3, #0
 800f626:	d051      	beq.n	800f6cc <USER_SPI_initialize+0x17c>
 800f628:	2100      	movs	r1, #0
 800f62a:	203a      	movs	r0, #58	; 0x3a
 800f62c:	f7ff ff21 	bl	800f472 <send_cmd>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	d14a      	bne.n	800f6cc <USER_SPI_initialize+0x17c>
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800f636:	2300      	movs	r3, #0
 800f638:	73fb      	strb	r3, [r7, #15]
 800f63a:	e00d      	b.n	800f658 <USER_SPI_initialize+0x108>
 800f63c:	7bfc      	ldrb	r4, [r7, #15]
 800f63e:	20ff      	movs	r0, #255	; 0xff
 800f640:	f7ff fe26 	bl	800f290 <xchg_spi>
 800f644:	4603      	mov	r3, r0
 800f646:	461a      	mov	r2, r3
 800f648:	f107 0310 	add.w	r3, r7, #16
 800f64c:	4423      	add	r3, r4
 800f64e:	f803 2c08 	strb.w	r2, [r3, #-8]
 800f652:	7bfb      	ldrb	r3, [r7, #15]
 800f654:	3301      	adds	r3, #1
 800f656:	73fb      	strb	r3, [r7, #15]
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	2b03      	cmp	r3, #3
 800f65c:	d9ee      	bls.n	800f63c <USER_SPI_initialize+0xec>
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* Card id SDv2 */
 800f65e:	7a3b      	ldrb	r3, [r7, #8]
 800f660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f664:	2b00      	cmp	r3, #0
 800f666:	d001      	beq.n	800f66c <USER_SPI_initialize+0x11c>
 800f668:	230c      	movs	r3, #12
 800f66a:	e000      	b.n	800f66e <USER_SPI_initialize+0x11e>
 800f66c:	2304      	movs	r3, #4
 800f66e:	737b      	strb	r3, [r7, #13]
 800f670:	e02c      	b.n	800f6cc <USER_SPI_initialize+0x17c>
                }
            }
        } else {    /* Not SDv2 card */
            if (send_cmd(ACMD41, 0) <= 1)   {   /* SDv1 or MMC? */
 800f672:	2100      	movs	r1, #0
 800f674:	20a9      	movs	r0, #169	; 0xa9
 800f676:	f7ff fefc 	bl	800f472 <send_cmd>
 800f67a:	4603      	mov	r3, r0
 800f67c:	2b01      	cmp	r3, #1
 800f67e:	d804      	bhi.n	800f68a <USER_SPI_initialize+0x13a>
                ty = CT_SD1; cmd = ACMD41;  /* SDv1 (ACMD41(0)) */
 800f680:	2302      	movs	r3, #2
 800f682:	737b      	strb	r3, [r7, #13]
 800f684:	23a9      	movs	r3, #169	; 0xa9
 800f686:	73bb      	strb	r3, [r7, #14]
 800f688:	e003      	b.n	800f692 <USER_SPI_initialize+0x142>
            } else {
                ty = CT_MMC; cmd = CMD1;    /* MMCv3 (CMD1(0)) */
 800f68a:	2301      	movs	r3, #1
 800f68c:	737b      	strb	r3, [r7, #13]
 800f68e:	2301      	movs	r3, #1
 800f690:	73bb      	strb	r3, [r7, #14]
            }
            while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;        /* Wait for end of initialization */
 800f692:	bf00      	nop
 800f694:	f7ff fde6 	bl	800f264 <SPI_Timer_Status>
 800f698:	4603      	mov	r3, r0
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d007      	beq.n	800f6ae <USER_SPI_initialize+0x15e>
 800f69e:	7bbb      	ldrb	r3, [r7, #14]
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff fee5 	bl	800f472 <send_cmd>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d1f2      	bne.n	800f694 <USER_SPI_initialize+0x144>
            if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)   /* Set block length: 512 */
 800f6ae:	f7ff fdd9 	bl	800f264 <SPI_Timer_Status>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d007      	beq.n	800f6c8 <USER_SPI_initialize+0x178>
 800f6b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f6bc:	2010      	movs	r0, #16
 800f6be:	f7ff fed8 	bl	800f472 <send_cmd>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d001      	beq.n	800f6cc <USER_SPI_initialize+0x17c>
                ty = 0;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	737b      	strb	r3, [r7, #13]
        }
    }
    CardType = ty;  /* Card type */
 800f6cc:	4a14      	ldr	r2, [pc, #80]	; (800f720 <USER_SPI_initialize+0x1d0>)
 800f6ce:	7b7b      	ldrb	r3, [r7, #13]
 800f6d0:	7013      	strb	r3, [r2, #0]
    despiselect();
 800f6d2:	f7ff fe4b 	bl	800f36c <despiselect>

    if (ty) {           /* OK */
 800f6d6:	7b7b      	ldrb	r3, [r7, #13]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d012      	beq.n	800f702 <USER_SPI_initialize+0x1b2>
        FCLK_FAST();            /* Set fast clock */
 800f6dc:	4b0f      	ldr	r3, [pc, #60]	; (800f71c <USER_SPI_initialize+0x1cc>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800f6e6:	4b0d      	ldr	r3, [pc, #52]	; (800f71c <USER_SPI_initialize+0x1cc>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	f042 0220 	orr.w	r2, r2, #32
 800f6ee:	601a      	str	r2, [r3, #0]
        Stat &= ~STA_NOINIT;    /* Clear STA_NOINIT flag */
 800f6f0:	4b09      	ldr	r3, [pc, #36]	; (800f718 <USER_SPI_initialize+0x1c8>)
 800f6f2:	781b      	ldrb	r3, [r3, #0]
 800f6f4:	b2db      	uxtb	r3, r3
 800f6f6:	f023 0301 	bic.w	r3, r3, #1
 800f6fa:	b2da      	uxtb	r2, r3
 800f6fc:	4b06      	ldr	r3, [pc, #24]	; (800f718 <USER_SPI_initialize+0x1c8>)
 800f6fe:	701a      	strb	r2, [r3, #0]
 800f700:	e002      	b.n	800f708 <USER_SPI_initialize+0x1b8>
    } else {            /* Failed */
        Stat = STA_NOINIT;
 800f702:	4b05      	ldr	r3, [pc, #20]	; (800f718 <USER_SPI_initialize+0x1c8>)
 800f704:	2201      	movs	r2, #1
 800f706:	701a      	strb	r2, [r3, #0]
    }

    return Stat;
 800f708:	4b03      	ldr	r3, [pc, #12]	; (800f718 <USER_SPI_initialize+0x1c8>)
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	b2db      	uxtb	r3, r3
}
 800f70e:	4618      	mov	r0, r3
 800f710:	3714      	adds	r7, #20
 800f712:	46bd      	mov	sp, r7
 800f714:	bd90      	pop	{r4, r7, pc}
 800f716:	bf00      	nop
 800f718:	200002a0 	.word	0x200002a0
 800f71c:	20004bac 	.word	0x20004bac
 800f720:	2000088c 	.word	0x2000088c

0800f724 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
    BYTE drv        /* Physical drive number (0) */
)
{
 800f724:	b480      	push	{r7}
 800f726:	b083      	sub	sp, #12
 800f728:	af00      	add	r7, sp, #0
 800f72a:	4603      	mov	r3, r0
 800f72c:	71fb      	strb	r3, [r7, #7]
    if (drv) return STA_NOINIT;     /* Supports only drive 0 */
 800f72e:	79fb      	ldrb	r3, [r7, #7]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d001      	beq.n	800f738 <USER_SPI_status+0x14>
 800f734:	2301      	movs	r3, #1
 800f736:	e002      	b.n	800f73e <USER_SPI_status+0x1a>

    return Stat;    /* Return disk status */
 800f738:	4b04      	ldr	r3, [pc, #16]	; (800f74c <USER_SPI_status+0x28>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	b2db      	uxtb	r3, r3
}
 800f73e:	4618      	mov	r0, r3
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr
 800f74a:	bf00      	nop
 800f74c:	200002a0 	.word	0x200002a0

0800f750 <USER_SPI_read>:
    BYTE drv,       /* Physical drive number (0) */
    BYTE *buff,     /* Pointer to the data buffer to store read data */
    DWORD sector,   /* Start sector number (LBA) */
    UINT count      /* Number of sectors to read (1..128) */
)
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b084      	sub	sp, #16
 800f754:	af00      	add	r7, sp, #0
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	607a      	str	r2, [r7, #4]
 800f75a:	603b      	str	r3, [r7, #0]
 800f75c:	4603      	mov	r3, r0
 800f75e:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800f760:	7bfb      	ldrb	r3, [r7, #15]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d102      	bne.n	800f76c <USER_SPI_read+0x1c>
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <USER_SPI_read+0x20>
 800f76c:	2304      	movs	r3, #4
 800f76e:	e04d      	b.n	800f80c <USER_SPI_read+0xbc>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800f770:	4b28      	ldr	r3, [pc, #160]	; (800f814 <USER_SPI_read+0xc4>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	b2db      	uxtb	r3, r3
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d001      	beq.n	800f782 <USER_SPI_read+0x32>
 800f77e:	2303      	movs	r3, #3
 800f780:	e044      	b.n	800f80c <USER_SPI_read+0xbc>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ot BA conversion (byte addressing cards) */
 800f782:	4b25      	ldr	r3, [pc, #148]	; (800f818 <USER_SPI_read+0xc8>)
 800f784:	781b      	ldrb	r3, [r3, #0]
 800f786:	f003 0308 	and.w	r3, r3, #8
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d102      	bne.n	800f794 <USER_SPI_read+0x44>
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	025b      	lsls	r3, r3, #9
 800f792:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector read */
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d111      	bne.n	800f7be <USER_SPI_read+0x6e>
        if ((send_cmd(CMD17, sector) == 0)  /* READ_SINGLE_BLOCK */
 800f79a:	6879      	ldr	r1, [r7, #4]
 800f79c:	2011      	movs	r0, #17
 800f79e:	f7ff fe68 	bl	800f472 <send_cmd>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d129      	bne.n	800f7fc <USER_SPI_read+0xac>
            && rcvr_datablock(buff, 512)) {
 800f7a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7ac:	68b8      	ldr	r0, [r7, #8]
 800f7ae:	f7ff fe05 	bl	800f3bc <rcvr_datablock>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d021      	beq.n	800f7fc <USER_SPI_read+0xac>
            count = 0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	603b      	str	r3, [r7, #0]
 800f7bc:	e01e      	b.n	800f7fc <USER_SPI_read+0xac>
        }
    }
    else {              /* Multiple sector read */
        if (send_cmd(CMD18, sector) == 0) { /* READ_MULTIPLE_BLOCK */
 800f7be:	6879      	ldr	r1, [r7, #4]
 800f7c0:	2012      	movs	r0, #18
 800f7c2:	f7ff fe56 	bl	800f472 <send_cmd>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d117      	bne.n	800f7fc <USER_SPI_read+0xac>
            do {
                if (!rcvr_datablock(buff, 512)) break;
 800f7cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f7d0:	68b8      	ldr	r0, [r7, #8]
 800f7d2:	f7ff fdf3 	bl	800f3bc <rcvr_datablock>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00a      	beq.n	800f7f2 <USER_SPI_read+0xa2>
                buff += 512;
 800f7dc:	68bb      	ldr	r3, [r7, #8]
 800f7de:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f7e2:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	3b01      	subs	r3, #1
 800f7e8:	603b      	str	r3, [r7, #0]
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d1ed      	bne.n	800f7cc <USER_SPI_read+0x7c>
 800f7f0:	e000      	b.n	800f7f4 <USER_SPI_read+0xa4>
                if (!rcvr_datablock(buff, 512)) break;
 800f7f2:	bf00      	nop
            send_cmd(CMD12, 0);             /* STOP_TRANSMISSION */
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	200c      	movs	r0, #12
 800f7f8:	f7ff fe3b 	bl	800f472 <send_cmd>
        }
    }
    despiselect();
 800f7fc:	f7ff fdb6 	bl	800f36c <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800f800:	683b      	ldr	r3, [r7, #0]
 800f802:	2b00      	cmp	r3, #0
 800f804:	bf14      	ite	ne
 800f806:	2301      	movne	r3, #1
 800f808:	2300      	moveq	r3, #0
 800f80a:	b2db      	uxtb	r3, r3
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3710      	adds	r7, #16
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	200002a0 	.word	0x200002a0
 800f818:	2000088c 	.word	0x2000088c

0800f81c <USER_SPI_write>:
    BYTE drv,           /* Physical drive number (0) */
    const BYTE *buff,   /* Ponter to the data to write */
    DWORD sector,       /* Start sector number (LBA) */
    UINT count          /* Number of sectors to write (1..128) */
)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	60b9      	str	r1, [r7, #8]
 800f824:	607a      	str	r2, [r7, #4]
 800f826:	603b      	str	r3, [r7, #0]
 800f828:	4603      	mov	r3, r0
 800f82a:	73fb      	strb	r3, [r7, #15]
    if (drv || !count) return RES_PARERR;       /* Check parameter */
 800f82c:	7bfb      	ldrb	r3, [r7, #15]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d102      	bne.n	800f838 <USER_SPI_write+0x1c>
 800f832:	683b      	ldr	r3, [r7, #0]
 800f834:	2b00      	cmp	r3, #0
 800f836:	d101      	bne.n	800f83c <USER_SPI_write+0x20>
 800f838:	2304      	movs	r3, #4
 800f83a:	e063      	b.n	800f904 <USER_SPI_write+0xe8>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check drive status */
 800f83c:	4b33      	ldr	r3, [pc, #204]	; (800f90c <USER_SPI_write+0xf0>)
 800f83e:	781b      	ldrb	r3, [r3, #0]
 800f840:	b2db      	uxtb	r3, r3
 800f842:	f003 0301 	and.w	r3, r3, #1
 800f846:	2b00      	cmp	r3, #0
 800f848:	d001      	beq.n	800f84e <USER_SPI_write+0x32>
 800f84a:	2303      	movs	r3, #3
 800f84c:	e05a      	b.n	800f904 <USER_SPI_write+0xe8>
    if (Stat & STA_PROTECT) return RES_WRPRT;   /* Check write protect */
 800f84e:	4b2f      	ldr	r3, [pc, #188]	; (800f90c <USER_SPI_write+0xf0>)
 800f850:	781b      	ldrb	r3, [r3, #0]
 800f852:	b2db      	uxtb	r3, r3
 800f854:	f003 0304 	and.w	r3, r3, #4
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d001      	beq.n	800f860 <USER_SPI_write+0x44>
 800f85c:	2302      	movs	r3, #2
 800f85e:	e051      	b.n	800f904 <USER_SPI_write+0xe8>

    if (!(CardType & CT_BLOCK)) sector *= 512;  /* LBA ==> BA conversion (byte addressing cards) */
 800f860:	4b2b      	ldr	r3, [pc, #172]	; (800f910 <USER_SPI_write+0xf4>)
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	f003 0308 	and.w	r3, r3, #8
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d102      	bne.n	800f872 <USER_SPI_write+0x56>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	025b      	lsls	r3, r3, #9
 800f870:	607b      	str	r3, [r7, #4]

    if (count == 1) {   /* Single sector write */
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	2b01      	cmp	r3, #1
 800f876:	d110      	bne.n	800f89a <USER_SPI_write+0x7e>
        if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	2018      	movs	r0, #24
 800f87c:	f7ff fdf9 	bl	800f472 <send_cmd>
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d136      	bne.n	800f8f4 <USER_SPI_write+0xd8>
            && xmit_datablock(buff, 0xFE)) {
 800f886:	21fe      	movs	r1, #254	; 0xfe
 800f888:	68b8      	ldr	r0, [r7, #8]
 800f88a:	f7ff fdc0 	bl	800f40e <xmit_datablock>
 800f88e:	4603      	mov	r3, r0
 800f890:	2b00      	cmp	r3, #0
 800f892:	d02f      	beq.n	800f8f4 <USER_SPI_write+0xd8>
            count = 0;
 800f894:	2300      	movs	r3, #0
 800f896:	603b      	str	r3, [r7, #0]
 800f898:	e02c      	b.n	800f8f4 <USER_SPI_write+0xd8>
        }
    }
    else {              /* Multiple sector write */
        if (CardType & CT_SDC) send_cmd(ACMD23, count); /* Predefine number of sectors */
 800f89a:	4b1d      	ldr	r3, [pc, #116]	; (800f910 <USER_SPI_write+0xf4>)
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	f003 0306 	and.w	r3, r3, #6
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d003      	beq.n	800f8ae <USER_SPI_write+0x92>
 800f8a6:	6839      	ldr	r1, [r7, #0]
 800f8a8:	2097      	movs	r0, #151	; 0x97
 800f8aa:	f7ff fde2 	bl	800f472 <send_cmd>
        if (send_cmd(CMD25, sector) == 0) { /* WRITE_MULTIPLE_BLOCK */
 800f8ae:	6879      	ldr	r1, [r7, #4]
 800f8b0:	2019      	movs	r0, #25
 800f8b2:	f7ff fdde 	bl	800f472 <send_cmd>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d11b      	bne.n	800f8f4 <USER_SPI_write+0xd8>
            do {
                if (!xmit_datablock(buff, 0xFC)) break;
 800f8bc:	21fc      	movs	r1, #252	; 0xfc
 800f8be:	68b8      	ldr	r0, [r7, #8]
 800f8c0:	f7ff fda5 	bl	800f40e <xmit_datablock>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d00a      	beq.n	800f8e0 <USER_SPI_write+0xc4>
                buff += 512;
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f8d0:	60bb      	str	r3, [r7, #8]
            } while (--count);
 800f8d2:	683b      	ldr	r3, [r7, #0]
 800f8d4:	3b01      	subs	r3, #1
 800f8d6:	603b      	str	r3, [r7, #0]
 800f8d8:	683b      	ldr	r3, [r7, #0]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d1ee      	bne.n	800f8bc <USER_SPI_write+0xa0>
 800f8de:	e000      	b.n	800f8e2 <USER_SPI_write+0xc6>
                if (!xmit_datablock(buff, 0xFC)) break;
 800f8e0:	bf00      	nop
            if (!xmit_datablock(0, 0xFD)) count = 1;    /* STOP_TRAN token */
 800f8e2:	21fd      	movs	r1, #253	; 0xfd
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	f7ff fd92 	bl	800f40e <xmit_datablock>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <USER_SPI_write+0xd8>
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	603b      	str	r3, [r7, #0]
        }
    }
    despiselect();
 800f8f4:	f7ff fd3a 	bl	800f36c <despiselect>

    return count ? RES_ERROR : RES_OK;  /* Return result */
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	bf14      	ite	ne
 800f8fe:	2301      	movne	r3, #1
 800f900:	2300      	moveq	r3, #0
 800f902:	b2db      	uxtb	r3, r3
}
 800f904:	4618      	mov	r0, r3
 800f906:	3710      	adds	r7, #16
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	200002a0 	.word	0x200002a0
 800f910:	2000088c 	.word	0x2000088c

0800f914 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
    BYTE drv,       /* Physical drive number (0) */
    BYTE cmd,       /* Control command code */
    void *buff      /* Pointer to the conrtol data */
)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b08c      	sub	sp, #48	; 0x30
 800f918:	af00      	add	r7, sp, #0
 800f91a:	4603      	mov	r3, r0
 800f91c:	603a      	str	r2, [r7, #0]
 800f91e:	71fb      	strb	r3, [r7, #7]
 800f920:	460b      	mov	r3, r1
 800f922:	71bb      	strb	r3, [r7, #6]
    DRESULT res;
    BYTE n, csd[16];
    DWORD *dp, st, ed, csize;


    if (drv) return RES_PARERR;                 /* Check parameter */
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <USER_SPI_ioctl+0x1a>
 800f92a:	2304      	movs	r3, #4
 800f92c:	e15a      	b.n	800fbe4 <USER_SPI_ioctl+0x2d0>
    if (Stat & STA_NOINIT) return RES_NOTRDY;   /* Check if drive is ready */
 800f92e:	4baf      	ldr	r3, [pc, #700]	; (800fbec <USER_SPI_ioctl+0x2d8>)
 800f930:	781b      	ldrb	r3, [r3, #0]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	f003 0301 	and.w	r3, r3, #1
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d001      	beq.n	800f940 <USER_SPI_ioctl+0x2c>
 800f93c:	2303      	movs	r3, #3
 800f93e:	e151      	b.n	800fbe4 <USER_SPI_ioctl+0x2d0>

    res = RES_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    switch (cmd) {
 800f946:	79bb      	ldrb	r3, [r7, #6]
 800f948:	2b04      	cmp	r3, #4
 800f94a:	f200 8136 	bhi.w	800fbba <USER_SPI_ioctl+0x2a6>
 800f94e:	a201      	add	r2, pc, #4	; (adr r2, 800f954 <USER_SPI_ioctl+0x40>)
 800f950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f954:	0800f969 	.word	0x0800f969
 800f958:	0800f97d 	.word	0x0800f97d
 800f95c:	0800fbbb 	.word	0x0800fbbb
 800f960:	0800fa29 	.word	0x0800fa29
 800f964:	0800fb1f 	.word	0x0800fb1f
    case CTRL_SYNC :        /* Wait for end of internal write process of the drive */
        if (spiselect()) res = RES_OK;
 800f968:	f7ff fd0e 	bl	800f388 <spiselect>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	f000 8127 	beq.w	800fbc2 <USER_SPI_ioctl+0x2ae>
 800f974:	2300      	movs	r3, #0
 800f976:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800f97a:	e122      	b.n	800fbc2 <USER_SPI_ioctl+0x2ae>

    case GET_SECTOR_COUNT : /* Get drive capacity in unit of sector (DWORD) */
        if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800f97c:	2100      	movs	r1, #0
 800f97e:	2009      	movs	r0, #9
 800f980:	f7ff fd77 	bl	800f472 <send_cmd>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	f040 811d 	bne.w	800fbc6 <USER_SPI_ioctl+0x2b2>
 800f98c:	f107 030c 	add.w	r3, r7, #12
 800f990:	2110      	movs	r1, #16
 800f992:	4618      	mov	r0, r3
 800f994:	f7ff fd12 	bl	800f3bc <rcvr_datablock>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	f000 8113 	beq.w	800fbc6 <USER_SPI_ioctl+0x2b2>
            if ((csd[0] >> 6) == 1) {   /* SDC ver 2.00 */
 800f9a0:	7b3b      	ldrb	r3, [r7, #12]
 800f9a2:	099b      	lsrs	r3, r3, #6
 800f9a4:	b2db      	uxtb	r3, r3
 800f9a6:	2b01      	cmp	r3, #1
 800f9a8:	d111      	bne.n	800f9ce <USER_SPI_ioctl+0xba>
                csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800f9aa:	7d7b      	ldrb	r3, [r7, #21]
 800f9ac:	461a      	mov	r2, r3
 800f9ae:	7d3b      	ldrb	r3, [r7, #20]
 800f9b0:	021b      	lsls	r3, r3, #8
 800f9b2:	4413      	add	r3, r2
 800f9b4:	461a      	mov	r2, r3
 800f9b6:	7cfb      	ldrb	r3, [r7, #19]
 800f9b8:	041b      	lsls	r3, r3, #16
 800f9ba:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800f9be:	4413      	add	r3, r2
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << 10;
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	029a      	lsls	r2, r3, #10
 800f9c8:	683b      	ldr	r3, [r7, #0]
 800f9ca:	601a      	str	r2, [r3, #0]
 800f9cc:	e028      	b.n	800fa20 <USER_SPI_ioctl+0x10c>
            } else {                    /* SDC ver 1.XX or MMC ver 3 */
                n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800f9ce:	7c7b      	ldrb	r3, [r7, #17]
 800f9d0:	f003 030f 	and.w	r3, r3, #15
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	7dbb      	ldrb	r3, [r7, #22]
 800f9d8:	09db      	lsrs	r3, r3, #7
 800f9da:	b2db      	uxtb	r3, r3
 800f9dc:	4413      	add	r3, r2
 800f9de:	b2da      	uxtb	r2, r3
 800f9e0:	7d7b      	ldrb	r3, [r7, #21]
 800f9e2:	005b      	lsls	r3, r3, #1
 800f9e4:	b2db      	uxtb	r3, r3
 800f9e6:	f003 0306 	and.w	r3, r3, #6
 800f9ea:	b2db      	uxtb	r3, r3
 800f9ec:	4413      	add	r3, r2
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	3302      	adds	r3, #2
 800f9f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800f9f6:	7d3b      	ldrb	r3, [r7, #20]
 800f9f8:	099b      	lsrs	r3, r3, #6
 800f9fa:	b2db      	uxtb	r3, r3
 800f9fc:	461a      	mov	r2, r3
 800f9fe:	7cfb      	ldrb	r3, [r7, #19]
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	441a      	add	r2, r3
 800fa04:	7cbb      	ldrb	r3, [r7, #18]
 800fa06:	029b      	lsls	r3, r3, #10
 800fa08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800fa0c:	4413      	add	r3, r2
 800fa0e:	3301      	adds	r3, #1
 800fa10:	61fb      	str	r3, [r7, #28]
                *(DWORD*)buff = csize << (n - 9);
 800fa12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa16:	3b09      	subs	r3, #9
 800fa18:	69fa      	ldr	r2, [r7, #28]
 800fa1a:	409a      	lsls	r2, r3
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	601a      	str	r2, [r3, #0]
            }
            res = RES_OK;
 800fa20:	2300      	movs	r3, #0
 800fa22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800fa26:	e0ce      	b.n	800fbc6 <USER_SPI_ioctl+0x2b2>

    case GET_BLOCK_SIZE :   /* Get erase block size in unit of sector (DWORD) */
        if (CardType & CT_SD2) {    /* SDC ver 2.00 */
 800fa28:	4b71      	ldr	r3, [pc, #452]	; (800fbf0 <USER_SPI_ioctl+0x2dc>)
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	f003 0304 	and.w	r3, r3, #4
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d031      	beq.n	800fa98 <USER_SPI_ioctl+0x184>
            if (send_cmd(ACMD13, 0) == 0) { /* Read SD status */
 800fa34:	2100      	movs	r1, #0
 800fa36:	208d      	movs	r0, #141	; 0x8d
 800fa38:	f7ff fd1b 	bl	800f472 <send_cmd>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f040 80c3 	bne.w	800fbca <USER_SPI_ioctl+0x2b6>
                xchg_spi(0xFF);
 800fa44:	20ff      	movs	r0, #255	; 0xff
 800fa46:	f7ff fc23 	bl	800f290 <xchg_spi>
                if (rcvr_datablock(csd, 16)) {              /* Read partial block */
 800fa4a:	f107 030c 	add.w	r3, r7, #12
 800fa4e:	2110      	movs	r1, #16
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7ff fcb3 	bl	800f3bc <rcvr_datablock>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	f000 80b6 	beq.w	800fbca <USER_SPI_ioctl+0x2b6>
                    for (n = 64 - 16; n; n--) xchg_spi(0xFF);   /* Purge trailing data */
 800fa5e:	2330      	movs	r3, #48	; 0x30
 800fa60:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800fa64:	e007      	b.n	800fa76 <USER_SPI_ioctl+0x162>
 800fa66:	20ff      	movs	r0, #255	; 0xff
 800fa68:	f7ff fc12 	bl	800f290 <xchg_spi>
 800fa6c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa70:	3b01      	subs	r3, #1
 800fa72:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800fa76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1f3      	bne.n	800fa66 <USER_SPI_ioctl+0x152>
                    *(DWORD*)buff = 16UL << (csd[10] >> 4);
 800fa7e:	7dbb      	ldrb	r3, [r7, #22]
 800fa80:	091b      	lsrs	r3, r3, #4
 800fa82:	b2db      	uxtb	r3, r3
 800fa84:	461a      	mov	r2, r3
 800fa86:	2310      	movs	r3, #16
 800fa88:	fa03 f202 	lsl.w	r2, r3, r2
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	601a      	str	r2, [r3, #0]
                    res = RES_OK;
 800fa90:	2300      	movs	r3, #0
 800fa92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
                }
                res = RES_OK;
            }
        }
        break;
 800fa96:	e098      	b.n	800fbca <USER_SPI_ioctl+0x2b6>
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {  /* Read CSD */
 800fa98:	2100      	movs	r1, #0
 800fa9a:	2009      	movs	r0, #9
 800fa9c:	f7ff fce9 	bl	800f472 <send_cmd>
 800faa0:	4603      	mov	r3, r0
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	f040 8091 	bne.w	800fbca <USER_SPI_ioctl+0x2b6>
 800faa8:	f107 030c 	add.w	r3, r7, #12
 800faac:	2110      	movs	r1, #16
 800faae:	4618      	mov	r0, r3
 800fab0:	f7ff fc84 	bl	800f3bc <rcvr_datablock>
 800fab4:	4603      	mov	r3, r0
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	f000 8087 	beq.w	800fbca <USER_SPI_ioctl+0x2b6>
                if (CardType & CT_SD1) {    /* SDC ver 1.XX */
 800fabc:	4b4c      	ldr	r3, [pc, #304]	; (800fbf0 <USER_SPI_ioctl+0x2dc>)
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	f003 0302 	and.w	r3, r3, #2
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d012      	beq.n	800faee <USER_SPI_ioctl+0x1da>
                    *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800fac8:	7dbb      	ldrb	r3, [r7, #22]
 800faca:	005b      	lsls	r3, r3, #1
 800facc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800fad0:	7dfa      	ldrb	r2, [r7, #23]
 800fad2:	09d2      	lsrs	r2, r2, #7
 800fad4:	b2d2      	uxtb	r2, r2
 800fad6:	4413      	add	r3, r2
 800fad8:	1c5a      	adds	r2, r3, #1
 800fada:	7e7b      	ldrb	r3, [r7, #25]
 800fadc:	099b      	lsrs	r3, r3, #6
 800fade:	b2db      	uxtb	r3, r3
 800fae0:	3b01      	subs	r3, #1
 800fae2:	fa02 f303 	lsl.w	r3, r2, r3
 800fae6:	461a      	mov	r2, r3
 800fae8:	683b      	ldr	r3, [r7, #0]
 800faea:	601a      	str	r2, [r3, #0]
 800faec:	e013      	b.n	800fb16 <USER_SPI_ioctl+0x202>
                    *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800faee:	7dbb      	ldrb	r3, [r7, #22]
 800faf0:	109b      	asrs	r3, r3, #2
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	f003 031f 	and.w	r3, r3, #31
 800faf8:	3301      	adds	r3, #1
 800fafa:	7dfa      	ldrb	r2, [r7, #23]
 800fafc:	00d2      	lsls	r2, r2, #3
 800fafe:	f002 0218 	and.w	r2, r2, #24
 800fb02:	7df9      	ldrb	r1, [r7, #23]
 800fb04:	0949      	lsrs	r1, r1, #5
 800fb06:	b2c9      	uxtb	r1, r1
 800fb08:	440a      	add	r2, r1
 800fb0a:	3201      	adds	r2, #1
 800fb0c:	fb02 f303 	mul.w	r3, r2, r3
 800fb10:	461a      	mov	r2, r3
 800fb12:	683b      	ldr	r3, [r7, #0]
 800fb14:	601a      	str	r2, [r3, #0]
                res = RES_OK;
 800fb16:	2300      	movs	r3, #0
 800fb18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        break;
 800fb1c:	e055      	b.n	800fbca <USER_SPI_ioctl+0x2b6>

    case CTRL_TRIM :    /* Erase a block of sectors (used when _USE_ERASE == 1) */
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800fb1e:	4b34      	ldr	r3, [pc, #208]	; (800fbf0 <USER_SPI_ioctl+0x2dc>)
 800fb20:	781b      	ldrb	r3, [r3, #0]
 800fb22:	f003 0306 	and.w	r3, r3, #6
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d051      	beq.n	800fbce <USER_SPI_ioctl+0x2ba>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800fb2a:	f107 020c 	add.w	r2, r7, #12
 800fb2e:	79fb      	ldrb	r3, [r7, #7]
 800fb30:	210b      	movs	r1, #11
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7ff feee 	bl	800f914 <USER_SPI_ioctl>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d149      	bne.n	800fbd2 <USER_SPI_ioctl+0x2be>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800fb3e:	7b3b      	ldrb	r3, [r7, #12]
 800fb40:	099b      	lsrs	r3, r3, #6
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d104      	bne.n	800fb52 <USER_SPI_ioctl+0x23e>
 800fb48:	7dbb      	ldrb	r3, [r7, #22]
 800fb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d041      	beq.n	800fbd6 <USER_SPI_ioctl+0x2c2>
        dp = buff; st = dp[0]; ed = dp[1];              /* Load sector block */
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	623b      	str	r3, [r7, #32]
 800fb56:	6a3b      	ldr	r3, [r7, #32]
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	627b      	str	r3, [r7, #36]	; 0x24
        if (!(CardType & CT_BLOCK)) {
 800fb62:	4b23      	ldr	r3, [pc, #140]	; (800fbf0 <USER_SPI_ioctl+0x2dc>)
 800fb64:	781b      	ldrb	r3, [r3, #0]
 800fb66:	f003 0308 	and.w	r3, r3, #8
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d105      	bne.n	800fb7a <USER_SPI_ioctl+0x266>
            st *= 512; ed *= 512;
 800fb6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb70:	025b      	lsls	r3, r3, #9
 800fb72:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb76:	025b      	lsls	r3, r3, #9
 800fb78:	627b      	str	r3, [r7, #36]	; 0x24
        }
        if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) { /* Erase sector block */
 800fb7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fb7c:	2020      	movs	r0, #32
 800fb7e:	f7ff fc78 	bl	800f472 <send_cmd>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d128      	bne.n	800fbda <USER_SPI_ioctl+0x2c6>
 800fb88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fb8a:	2021      	movs	r0, #33	; 0x21
 800fb8c:	f7ff fc71 	bl	800f472 <send_cmd>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d121      	bne.n	800fbda <USER_SPI_ioctl+0x2c6>
 800fb96:	2100      	movs	r1, #0
 800fb98:	2026      	movs	r0, #38	; 0x26
 800fb9a:	f7ff fc6a 	bl	800f472 <send_cmd>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d11a      	bne.n	800fbda <USER_SPI_ioctl+0x2c6>
 800fba4:	f247 5030 	movw	r0, #30000	; 0x7530
 800fba8:	f7ff fbbd 	bl	800f326 <wait_ready>
 800fbac:	4603      	mov	r3, r0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d013      	beq.n	800fbda <USER_SPI_ioctl+0x2c6>
            res = RES_OK;   /* FatFs does not check result of this command */
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        }
        break;
 800fbb8:	e00f      	b.n	800fbda <USER_SPI_ioctl+0x2c6>

    default:
        res = RES_PARERR;
 800fbba:	2304      	movs	r3, #4
 800fbbc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fbc0:	e00c      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        break;
 800fbc2:	bf00      	nop
 800fbc4:	e00a      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        break;
 800fbc6:	bf00      	nop
 800fbc8:	e008      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        break;
 800fbca:	bf00      	nop
 800fbcc:	e006      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        if (!(CardType & CT_SDC)) break;                /* Check if the card is SDC */
 800fbce:	bf00      	nop
 800fbd0:	e004      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;   /* Get CSD */
 800fbd2:	bf00      	nop
 800fbd4:	e002      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break; /* Check if sector erase can be applied to the card */
 800fbd6:	bf00      	nop
 800fbd8:	e000      	b.n	800fbdc <USER_SPI_ioctl+0x2c8>
        break;
 800fbda:	bf00      	nop
    }

    despiselect();
 800fbdc:	f7ff fbc6 	bl	800f36c <despiselect>

    return res;
 800fbe0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3730      	adds	r7, #48	; 0x30
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	200002a0 	.word	0x200002a0
 800fbf0:	2000088c 	.word	0x2000088c

0800fbf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b084      	sub	sp, #16
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fc00:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800fc04:	f004 fce0 	bl	80145c8 <malloc>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d105      	bne.n	800fc1e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	2200      	movs	r2, #0
 800fc16:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800fc1a:	2302      	movs	r3, #2
 800fc1c:	e066      	b.n	800fcec <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	68fa      	ldr	r2, [r7, #12]
 800fc22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	7c1b      	ldrb	r3, [r3, #16]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d119      	bne.n	800fc62 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fc2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc32:	2202      	movs	r2, #2
 800fc34:	2181      	movs	r1, #129	; 0x81
 800fc36:	6878      	ldr	r0, [r7, #4]
 800fc38:	f004 facf 	bl	80141da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2201      	movs	r2, #1
 800fc40:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fc42:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc46:	2202      	movs	r2, #2
 800fc48:	2101      	movs	r1, #1
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f004 fac5 	bl	80141da <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2201      	movs	r2, #1
 800fc54:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2210      	movs	r2, #16
 800fc5c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800fc60:	e016      	b.n	800fc90 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800fc62:	2340      	movs	r3, #64	; 0x40
 800fc64:	2202      	movs	r2, #2
 800fc66:	2181      	movs	r1, #129	; 0x81
 800fc68:	6878      	ldr	r0, [r7, #4]
 800fc6a:	f004 fab6 	bl	80141da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800fc6e:	687b      	ldr	r3, [r7, #4]
 800fc70:	2201      	movs	r2, #1
 800fc72:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800fc74:	2340      	movs	r3, #64	; 0x40
 800fc76:	2202      	movs	r2, #2
 800fc78:	2101      	movs	r1, #1
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f004 faad 	bl	80141da <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2201      	movs	r2, #1
 800fc84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2210      	movs	r2, #16
 800fc8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fc90:	2308      	movs	r3, #8
 800fc92:	2203      	movs	r2, #3
 800fc94:	2182      	movs	r1, #130	; 0x82
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f004 fa9f 	bl	80141da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	2201      	movs	r2, #1
 800fca0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	2200      	movs	r2, #0
 800fcba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	7c1b      	ldrb	r3, [r3, #16]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d109      	bne.n	800fcda <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f004 fb70 	bl	80143b8 <USBD_LL_PrepareReceive>
 800fcd8:	e007      	b.n	800fcea <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800fce0:	2340      	movs	r3, #64	; 0x40
 800fce2:	2101      	movs	r1, #1
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f004 fb67 	bl	80143b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b084      	sub	sp, #16
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	460b      	mov	r3, r1
 800fcfe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 800fd00:	2300      	movs	r3, #0
 800fd02:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800fd04:	2181      	movs	r1, #129	; 0x81
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f004 fa8d 	bl	8014226 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2200      	movs	r2, #0
 800fd10:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800fd12:	2101      	movs	r1, #1
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f004 fa86 	bl	8014226 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	2200      	movs	r2, #0
 800fd1e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800fd22:	2182      	movs	r1, #130	; 0x82
 800fd24:	6878      	ldr	r0, [r7, #4]
 800fd26:	f004 fa7e 	bl	8014226 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00e      	beq.n	800fd62 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fd4a:	685b      	ldr	r3, [r3, #4]
 800fd4c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd54:	4618      	mov	r0, r3
 800fd56:	f004 fc3f 	bl	80145d8 <free>
    pdev->pClassData = NULL;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800fd62:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd64:	4618      	mov	r0, r3
 800fd66:	3710      	adds	r7, #16
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}

0800fd6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b086      	sub	sp, #24
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fd7c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800fd82:	2300      	movs	r3, #0
 800fd84:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fd8a:	683b      	ldr	r3, [r7, #0]
 800fd8c:	781b      	ldrb	r3, [r3, #0]
 800fd8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d03a      	beq.n	800fe0c <USBD_CDC_Setup+0xa0>
 800fd96:	2b20      	cmp	r3, #32
 800fd98:	f040 8097 	bne.w	800feca <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	88db      	ldrh	r3, [r3, #6]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d029      	beq.n	800fdf8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	b25b      	sxtb	r3, r3
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	da11      	bge.n	800fdd2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	683a      	ldr	r2, [r7, #0]
 800fdb8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800fdba:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fdbc:	683a      	ldr	r2, [r7, #0]
 800fdbe:	88d2      	ldrh	r2, [r2, #6]
 800fdc0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fdc2:	6939      	ldr	r1, [r7, #16]
 800fdc4:	683b      	ldr	r3, [r7, #0]
 800fdc6:	88db      	ldrh	r3, [r3, #6]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f001 fac7 	bl	801135e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 800fdd0:	e082      	b.n	800fed8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	785a      	ldrb	r2, [r3, #1]
 800fdd6:	693b      	ldr	r3, [r7, #16]
 800fdd8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	88db      	ldrh	r3, [r3, #6]
 800fde0:	b2da      	uxtb	r2, r3
 800fde2:	693b      	ldr	r3, [r7, #16]
 800fde4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800fde8:	6939      	ldr	r1, [r7, #16]
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	88db      	ldrh	r3, [r3, #6]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f001 fae0 	bl	80113b6 <USBD_CtlPrepareRx>
    break;
 800fdf6:	e06f      	b.n	800fed8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800fdfe:	689b      	ldr	r3, [r3, #8]
 800fe00:	683a      	ldr	r2, [r7, #0]
 800fe02:	7850      	ldrb	r0, [r2, #1]
 800fe04:	2200      	movs	r2, #0
 800fe06:	6839      	ldr	r1, [r7, #0]
 800fe08:	4798      	blx	r3
    break;
 800fe0a:	e065      	b.n	800fed8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	785b      	ldrb	r3, [r3, #1]
 800fe10:	2b0b      	cmp	r3, #11
 800fe12:	d84f      	bhi.n	800feb4 <USBD_CDC_Setup+0x148>
 800fe14:	a201      	add	r2, pc, #4	; (adr r2, 800fe1c <USBD_CDC_Setup+0xb0>)
 800fe16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe1a:	bf00      	nop
 800fe1c:	0800fe4d 	.word	0x0800fe4d
 800fe20:	0800fec3 	.word	0x0800fec3
 800fe24:	0800feb5 	.word	0x0800feb5
 800fe28:	0800feb5 	.word	0x0800feb5
 800fe2c:	0800feb5 	.word	0x0800feb5
 800fe30:	0800feb5 	.word	0x0800feb5
 800fe34:	0800feb5 	.word	0x0800feb5
 800fe38:	0800feb5 	.word	0x0800feb5
 800fe3c:	0800feb5 	.word	0x0800feb5
 800fe40:	0800feb5 	.word	0x0800feb5
 800fe44:	0800fe75 	.word	0x0800fe75
 800fe48:	0800fe9d 	.word	0x0800fe9d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe52:	2b03      	cmp	r3, #3
 800fe54:	d107      	bne.n	800fe66 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fe56:	f107 030c 	add.w	r3, r7, #12
 800fe5a:	2202      	movs	r2, #2
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	6878      	ldr	r0, [r7, #4]
 800fe60:	f001 fa7d 	bl	801135e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800fe64:	e030      	b.n	800fec8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800fe66:	6839      	ldr	r1, [r7, #0]
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f001 fa07 	bl	801127c <USBD_CtlError>
        ret = USBD_FAIL;
 800fe6e:	2303      	movs	r3, #3
 800fe70:	75fb      	strb	r3, [r7, #23]
      break;
 800fe72:	e029      	b.n	800fec8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	d107      	bne.n	800fe8e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fe7e:	f107 030f 	add.w	r3, r7, #15
 800fe82:	2201      	movs	r2, #1
 800fe84:	4619      	mov	r1, r3
 800fe86:	6878      	ldr	r0, [r7, #4]
 800fe88:	f001 fa69 	bl	801135e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800fe8c:	e01c      	b.n	800fec8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800fe8e:	6839      	ldr	r1, [r7, #0]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f001 f9f3 	bl	801127c <USBD_CtlError>
        ret = USBD_FAIL;
 800fe96:	2303      	movs	r3, #3
 800fe98:	75fb      	strb	r3, [r7, #23]
      break;
 800fe9a:	e015      	b.n	800fec8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fea2:	2b03      	cmp	r3, #3
 800fea4:	d00f      	beq.n	800fec6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800fea6:	6839      	ldr	r1, [r7, #0]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f001 f9e7 	bl	801127c <USBD_CtlError>
        ret = USBD_FAIL;
 800feae:	2303      	movs	r3, #3
 800feb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800feb2:	e008      	b.n	800fec6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800feb4:	6839      	ldr	r1, [r7, #0]
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	f001 f9e0 	bl	801127c <USBD_CtlError>
      ret = USBD_FAIL;
 800febc:	2303      	movs	r3, #3
 800febe:	75fb      	strb	r3, [r7, #23]
      break;
 800fec0:	e002      	b.n	800fec8 <USBD_CDC_Setup+0x15c>
      break;
 800fec2:	bf00      	nop
 800fec4:	e008      	b.n	800fed8 <USBD_CDC_Setup+0x16c>
      break;
 800fec6:	bf00      	nop
    }
    break;
 800fec8:	e006      	b.n	800fed8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800feca:	6839      	ldr	r1, [r7, #0]
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	f001 f9d5 	bl	801127c <USBD_CtlError>
    ret = USBD_FAIL;
 800fed2:	2303      	movs	r3, #3
 800fed4:	75fb      	strb	r3, [r7, #23]
    break;
 800fed6:	bf00      	nop
  }

  return (uint8_t)ret;
 800fed8:	7dfb      	ldrb	r3, [r7, #23]
}
 800feda:	4618      	mov	r0, r3
 800fedc:	3718      	adds	r7, #24
 800fede:	46bd      	mov	sp, r7
 800fee0:	bd80      	pop	{r7, pc}
 800fee2:	bf00      	nop

0800fee4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b084      	sub	sp, #16
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	460b      	mov	r3, r1
 800feee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800fef6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d101      	bne.n	800ff06 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ff02:	2303      	movs	r3, #3
 800ff04:	e049      	b.n	800ff9a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ff0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ff0e:	78fa      	ldrb	r2, [r7, #3]
 800ff10:	6879      	ldr	r1, [r7, #4]
 800ff12:	4613      	mov	r3, r2
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	4413      	add	r3, r2
 800ff18:	009b      	lsls	r3, r3, #2
 800ff1a:	440b      	add	r3, r1
 800ff1c:	3318      	adds	r3, #24
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d029      	beq.n	800ff78 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ff24:	78fa      	ldrb	r2, [r7, #3]
 800ff26:	6879      	ldr	r1, [r7, #4]
 800ff28:	4613      	mov	r3, r2
 800ff2a:	009b      	lsls	r3, r3, #2
 800ff2c:	4413      	add	r3, r2
 800ff2e:	009b      	lsls	r3, r3, #2
 800ff30:	440b      	add	r3, r1
 800ff32:	3318      	adds	r3, #24
 800ff34:	681a      	ldr	r2, [r3, #0]
 800ff36:	78f9      	ldrb	r1, [r7, #3]
 800ff38:	68f8      	ldr	r0, [r7, #12]
 800ff3a:	460b      	mov	r3, r1
 800ff3c:	00db      	lsls	r3, r3, #3
 800ff3e:	1a5b      	subs	r3, r3, r1
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	4403      	add	r3, r0
 800ff44:	3344      	adds	r3, #68	; 0x44
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	fbb2 f1f3 	udiv	r1, r2, r3
 800ff4c:	fb03 f301 	mul.w	r3, r3, r1
 800ff50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d110      	bne.n	800ff78 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ff56:	78fa      	ldrb	r2, [r7, #3]
 800ff58:	6879      	ldr	r1, [r7, #4]
 800ff5a:	4613      	mov	r3, r2
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	4413      	add	r3, r2
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	440b      	add	r3, r1
 800ff64:	3318      	adds	r3, #24
 800ff66:	2200      	movs	r2, #0
 800ff68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ff6a:	78f9      	ldrb	r1, [r7, #3]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	2200      	movs	r2, #0
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f004 fa00 	bl	8014376 <USBD_LL_Transmit>
 800ff76:	e00f      	b.n	800ff98 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ff86:	691b      	ldr	r3, [r3, #16]
 800ff88:	68ba      	ldr	r2, [r7, #8]
 800ff8a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ff94:	78fa      	ldrb	r2, [r7, #3]
 800ff96:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 800ff98:	2300      	movs	r3, #0
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3710      	adds	r7, #16
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}

0800ffa2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ffa2:	b580      	push	{r7, lr}
 800ffa4:	b084      	sub	sp, #16
 800ffa6:	af00      	add	r7, sp, #0
 800ffa8:	6078      	str	r0, [r7, #4]
 800ffaa:	460b      	mov	r3, r1
 800ffac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffb4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d101      	bne.n	800ffc4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ffc0:	2303      	movs	r3, #3
 800ffc2:	e015      	b.n	800fff0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ffc4:	78fb      	ldrb	r3, [r7, #3]
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f004 fa16 	bl	80143fa <USBD_LL_GetRxDataSize>
 800ffce:	4602      	mov	r2, r0
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ffdc:	68db      	ldr	r3, [r3, #12]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ffe4:	68fa      	ldr	r2, [r7, #12]
 800ffe6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ffea:	4611      	mov	r1, r2
 800ffec:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ffee:	2300      	movs	r3, #0
}
 800fff0:	4618      	mov	r0, r3
 800fff2:	3710      	adds	r7, #16
 800fff4:	46bd      	mov	sp, r7
 800fff6:	bd80      	pop	{r7, pc}

0800fff8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010006:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d015      	beq.n	801003e <USBD_CDC_EP0_RxReady+0x46>
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8010018:	2bff      	cmp	r3, #255	; 0xff
 801001a:	d010      	beq.n	801003e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010022:	689b      	ldr	r3, [r3, #8]
 8010024:	68fa      	ldr	r2, [r7, #12]
 8010026:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801002a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801002c:	68fa      	ldr	r2, [r7, #12]
 801002e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8010032:	b292      	uxth	r2, r2
 8010034:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	22ff      	movs	r2, #255	; 0xff
 801003a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 801003e:	2300      	movs	r3, #0
}
 8010040:	4618      	mov	r0, r3
 8010042:	3710      	adds	r7, #16
 8010044:	46bd      	mov	sp, r7
 8010046:	bd80      	pop	{r7, pc}

08010048 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010048:	b480      	push	{r7}
 801004a:	b083      	sub	sp, #12
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	2243      	movs	r2, #67	; 0x43
 8010054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8010056:	4b03      	ldr	r3, [pc, #12]	; (8010064 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8010058:	4618      	mov	r0, r3
 801005a:	370c      	adds	r7, #12
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr
 8010064:	2000032c 	.word	0x2000032c

08010068 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010068:	b480      	push	{r7}
 801006a:	b083      	sub	sp, #12
 801006c:	af00      	add	r7, sp, #0
 801006e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2243      	movs	r2, #67	; 0x43
 8010074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8010076:	4b03      	ldr	r3, [pc, #12]	; (8010084 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8010078:	4618      	mov	r0, r3
 801007a:	370c      	adds	r7, #12
 801007c:	46bd      	mov	sp, r7
 801007e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010082:	4770      	bx	lr
 8010084:	200002e8 	.word	0x200002e8

08010088 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	2243      	movs	r2, #67	; 0x43
 8010094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8010096:	4b03      	ldr	r3, [pc, #12]	; (80100a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8010098:	4618      	mov	r0, r3
 801009a:	370c      	adds	r7, #12
 801009c:	46bd      	mov	sp, r7
 801009e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a2:	4770      	bx	lr
 80100a4:	20000370 	.word	0x20000370

080100a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80100a8:	b480      	push	{r7}
 80100aa:	b083      	sub	sp, #12
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	220a      	movs	r2, #10
 80100b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80100b6:	4b03      	ldr	r3, [pc, #12]	; (80100c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	370c      	adds	r7, #12
 80100bc:	46bd      	mov	sp, r7
 80100be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c2:	4770      	bx	lr
 80100c4:	200002a4 	.word	0x200002a4

080100c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b083      	sub	sp, #12
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d101      	bne.n	80100dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80100d8:	2303      	movs	r3, #3
 80100da:	e004      	b.n	80100e6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	683a      	ldr	r2, [r7, #0]
 80100e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80100e4:	2300      	movs	r3, #0
}
 80100e6:	4618      	mov	r0, r3
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80100f2:	b480      	push	{r7}
 80100f4:	b087      	sub	sp, #28
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	60f8      	str	r0, [r7, #12]
 80100fa:	60b9      	str	r1, [r7, #8]
 80100fc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010104:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	68ba      	ldr	r2, [r7, #8]
 801010a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801010e:	697b      	ldr	r3, [r7, #20]
 8010110:	687a      	ldr	r2, [r7, #4]
 8010112:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8010116:	2300      	movs	r3, #0
}
 8010118:	4618      	mov	r0, r3
 801011a:	371c      	adds	r7, #28
 801011c:	46bd      	mov	sp, r7
 801011e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010122:	4770      	bx	lr

08010124 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010124:	b480      	push	{r7}
 8010126:	b085      	sub	sp, #20
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
 801012c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010134:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	683a      	ldr	r2, [r7, #0]
 801013a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 801013e:	2300      	movs	r3, #0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3714      	adds	r7, #20
 8010144:	46bd      	mov	sp, r7
 8010146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014a:	4770      	bx	lr

0801014c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801014c:	b580      	push	{r7, lr}
 801014e:	b084      	sub	sp, #16
 8010150:	af00      	add	r7, sp, #0
 8010152:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801015a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 801015c:	2301      	movs	r3, #1
 801015e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010166:	2b00      	cmp	r3, #0
 8010168:	d101      	bne.n	801016e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801016a:	2303      	movs	r3, #3
 801016c:	e01a      	b.n	80101a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 801016e:	68bb      	ldr	r3, [r7, #8]
 8010170:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010174:	2b00      	cmp	r3, #0
 8010176:	d114      	bne.n	80101a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	2201      	movs	r2, #1
 801017c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8010190:	68bb      	ldr	r3, [r7, #8]
 8010192:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8010196:	2181      	movs	r1, #129	; 0x81
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f004 f8ec 	bl	8014376 <USBD_LL_Transmit>

    ret = USBD_OK;
 801019e:	2300      	movs	r3, #0
 80101a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80101a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3710      	adds	r7, #16
 80101a8:	46bd      	mov	sp, r7
 80101aa:	bd80      	pop	{r7, pc}

080101ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b084      	sub	sp, #16
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d101      	bne.n	80101ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80101c6:	2303      	movs	r3, #3
 80101c8:	e016      	b.n	80101f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	7c1b      	ldrb	r3, [r3, #16]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d109      	bne.n	80101e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80101d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101dc:	2101      	movs	r1, #1
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f004 f8ea 	bl	80143b8 <USBD_LL_PrepareReceive>
 80101e4:	e007      	b.n	80101f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80101ec:	2340      	movs	r3, #64	; 0x40
 80101ee:	2101      	movs	r1, #1
 80101f0:	6878      	ldr	r0, [r7, #4]
 80101f2:	f004 f8e1 	bl	80143b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80101f6:	2300      	movs	r3, #0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3710      	adds	r7, #16
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}

08010200 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b086      	sub	sp, #24
 8010204:	af00      	add	r7, sp, #0
 8010206:	60f8      	str	r0, [r7, #12]
 8010208:	60b9      	str	r1, [r7, #8]
 801020a:	4613      	mov	r3, r2
 801020c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d101      	bne.n	8010218 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8010214:	2303      	movs	r3, #3
 8010216:	e025      	b.n	8010264 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801021e:	2b00      	cmp	r3, #0
 8010220:	d003      	beq.n	801022a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	2200      	movs	r2, #0
 8010226:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8010230:	2b00      	cmp	r3, #0
 8010232:	d003      	beq.n	801023c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2200      	movs	r2, #0
 8010238:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	2b00      	cmp	r3, #0
 8010240:	d003      	beq.n	801024a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	68ba      	ldr	r2, [r7, #8]
 8010246:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	2201      	movs	r2, #1
 801024e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	79fa      	ldrb	r2, [r7, #7]
 8010256:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010258:	68f8      	ldr	r0, [r7, #12]
 801025a:	f003 ff57 	bl	801410c <USBD_LL_Init>
 801025e:	4603      	mov	r3, r0
 8010260:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010262:	7dfb      	ldrb	r3, [r7, #23]
}
 8010264:	4618      	mov	r0, r3
 8010266:	3718      	adds	r7, #24
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}

0801026c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801026c:	b580      	push	{r7, lr}
 801026e:	b084      	sub	sp, #16
 8010270:	af00      	add	r7, sp, #0
 8010272:	6078      	str	r0, [r7, #4]
 8010274:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010276:	2300      	movs	r3, #0
 8010278:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801027a:	683b      	ldr	r3, [r7, #0]
 801027c:	2b00      	cmp	r3, #0
 801027e:	d101      	bne.n	8010284 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8010280:	2303      	movs	r3, #3
 8010282:	e010      	b.n	80102a6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	683a      	ldr	r2, [r7, #0]
 8010288:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010294:	f107 020e 	add.w	r2, r7, #14
 8010298:	4610      	mov	r0, r2
 801029a:	4798      	blx	r3
 801029c:	4602      	mov	r2, r0
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80102a4:	2300      	movs	r3, #0
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3710      	adds	r7, #16
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b082      	sub	sp, #8
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f003 ff74 	bl	80141a4 <USBD_LL_Start>
 80102bc:	4603      	mov	r3, r0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	3708      	adds	r7, #8
 80102c2:	46bd      	mov	sp, r7
 80102c4:	bd80      	pop	{r7, pc}

080102c6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80102c6:	b480      	push	{r7}
 80102c8:	b083      	sub	sp, #12
 80102ca:	af00      	add	r7, sp, #0
 80102cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80102ce:	2300      	movs	r3, #0
}
 80102d0:	4618      	mov	r0, r3
 80102d2:	370c      	adds	r7, #12
 80102d4:	46bd      	mov	sp, r7
 80102d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102da:	4770      	bx	lr

080102dc <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
 80102e4:	460b      	mov	r3, r1
 80102e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80102e8:	2303      	movs	r3, #3
 80102ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d009      	beq.n	801030a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	78fa      	ldrb	r2, [r7, #3]
 8010300:	4611      	mov	r1, r2
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	4798      	blx	r3
 8010306:	4603      	mov	r3, r0
 8010308:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801030a:	7bfb      	ldrb	r3, [r7, #15]
}
 801030c:	4618      	mov	r0, r3
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b082      	sub	sp, #8
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
 801031c:	460b      	mov	r3, r1
 801031e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010326:	2b00      	cmp	r3, #0
 8010328:	d007      	beq.n	801033a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010330:	685b      	ldr	r3, [r3, #4]
 8010332:	78fa      	ldrb	r2, [r7, #3]
 8010334:	4611      	mov	r1, r2
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	4798      	blx	r3
  }

  return USBD_OK;
 801033a:	2300      	movs	r3, #0
}
 801033c:	4618      	mov	r0, r3
 801033e:	3708      	adds	r7, #8
 8010340:	46bd      	mov	sp, r7
 8010342:	bd80      	pop	{r7, pc}

08010344 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b084      	sub	sp, #16
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010354:	6839      	ldr	r1, [r7, #0]
 8010356:	4618      	mov	r0, r3
 8010358:	f000 ff56 	bl	8011208 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	2201      	movs	r2, #1
 8010360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801036a:	461a      	mov	r2, r3
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010378:	f003 031f 	and.w	r3, r3, #31
 801037c:	2b01      	cmp	r3, #1
 801037e:	d00e      	beq.n	801039e <USBD_LL_SetupStage+0x5a>
 8010380:	2b01      	cmp	r3, #1
 8010382:	d302      	bcc.n	801038a <USBD_LL_SetupStage+0x46>
 8010384:	2b02      	cmp	r3, #2
 8010386:	d014      	beq.n	80103b2 <USBD_LL_SetupStage+0x6e>
 8010388:	e01d      	b.n	80103c6 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 fa18 	bl	80107c8 <USBD_StdDevReq>
 8010398:	4603      	mov	r3, r0
 801039a:	73fb      	strb	r3, [r7, #15]
      break;
 801039c:	e020      	b.n	80103e0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103a4:	4619      	mov	r1, r3
 80103a6:	6878      	ldr	r0, [r7, #4]
 80103a8:	f000 fa7c 	bl	80108a4 <USBD_StdItfReq>
 80103ac:	4603      	mov	r3, r0
 80103ae:	73fb      	strb	r3, [r7, #15]
      break;
 80103b0:	e016      	b.n	80103e0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80103b8:	4619      	mov	r1, r3
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f000 fab8 	bl	8010930 <USBD_StdEPReq>
 80103c0:	4603      	mov	r3, r0
 80103c2:	73fb      	strb	r3, [r7, #15]
      break;
 80103c4:	e00c      	b.n	80103e0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80103cc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	4619      	mov	r1, r3
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f003 ff45 	bl	8014264 <USBD_LL_StallEP>
 80103da:	4603      	mov	r3, r0
 80103dc:	73fb      	strb	r3, [r7, #15]
      break;
 80103de:	bf00      	nop
  }

  return ret;
 80103e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e2:	4618      	mov	r0, r3
 80103e4:	3710      	adds	r7, #16
 80103e6:	46bd      	mov	sp, r7
 80103e8:	bd80      	pop	{r7, pc}

080103ea <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80103ea:	b580      	push	{r7, lr}
 80103ec:	b086      	sub	sp, #24
 80103ee:	af00      	add	r7, sp, #0
 80103f0:	60f8      	str	r0, [r7, #12]
 80103f2:	460b      	mov	r3, r1
 80103f4:	607a      	str	r2, [r7, #4]
 80103f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80103f8:	7afb      	ldrb	r3, [r7, #11]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d137      	bne.n	801046e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010404:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801040c:	2b03      	cmp	r3, #3
 801040e:	d14a      	bne.n	80104a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8010410:	693b      	ldr	r3, [r7, #16]
 8010412:	689a      	ldr	r2, [r3, #8]
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	68db      	ldr	r3, [r3, #12]
 8010418:	429a      	cmp	r2, r3
 801041a:	d913      	bls.n	8010444 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	689a      	ldr	r2, [r3, #8]
 8010420:	693b      	ldr	r3, [r7, #16]
 8010422:	68db      	ldr	r3, [r3, #12]
 8010424:	1ad2      	subs	r2, r2, r3
 8010426:	693b      	ldr	r3, [r7, #16]
 8010428:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	68da      	ldr	r2, [r3, #12]
 801042e:	693b      	ldr	r3, [r7, #16]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	4293      	cmp	r3, r2
 8010434:	bf28      	it	cs
 8010436:	4613      	movcs	r3, r2
 8010438:	461a      	mov	r2, r3
 801043a:	6879      	ldr	r1, [r7, #4]
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f000 ffd7 	bl	80113f0 <USBD_CtlContinueRx>
 8010442:	e030      	b.n	80104a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801044a:	691b      	ldr	r3, [r3, #16]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d00a      	beq.n	8010466 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8010456:	2b03      	cmp	r3, #3
 8010458:	d105      	bne.n	8010466 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010460:	691b      	ldr	r3, [r3, #16]
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f000 ffd3 	bl	8011412 <USBD_CtlSendStatus>
 801046c:	e01b      	b.n	80104a6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d013      	beq.n	80104a2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8010480:	2b03      	cmp	r3, #3
 8010482:	d10e      	bne.n	80104a2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801048a:	699b      	ldr	r3, [r3, #24]
 801048c:	7afa      	ldrb	r2, [r7, #11]
 801048e:	4611      	mov	r1, r2
 8010490:	68f8      	ldr	r0, [r7, #12]
 8010492:	4798      	blx	r3
 8010494:	4603      	mov	r3, r0
 8010496:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8010498:	7dfb      	ldrb	r3, [r7, #23]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d003      	beq.n	80104a6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801049e:	7dfb      	ldrb	r3, [r7, #23]
 80104a0:	e002      	b.n	80104a8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80104a2:	2303      	movs	r3, #3
 80104a4:	e000      	b.n	80104a8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80104a6:	2300      	movs	r3, #0
}
 80104a8:	4618      	mov	r0, r3
 80104aa:	3718      	adds	r7, #24
 80104ac:	46bd      	mov	sp, r7
 80104ae:	bd80      	pop	{r7, pc}

080104b0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80104b0:	b580      	push	{r7, lr}
 80104b2:	b086      	sub	sp, #24
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	60f8      	str	r0, [r7, #12]
 80104b8:	460b      	mov	r3, r1
 80104ba:	607a      	str	r2, [r7, #4]
 80104bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80104be:	7afb      	ldrb	r3, [r7, #11]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d16a      	bne.n	801059a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	3314      	adds	r3, #20
 80104c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80104d0:	2b02      	cmp	r3, #2
 80104d2:	d155      	bne.n	8010580 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80104d4:	693b      	ldr	r3, [r7, #16]
 80104d6:	689a      	ldr	r2, [r3, #8]
 80104d8:	693b      	ldr	r3, [r7, #16]
 80104da:	68db      	ldr	r3, [r3, #12]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d914      	bls.n	801050a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	689a      	ldr	r2, [r3, #8]
 80104e4:	693b      	ldr	r3, [r7, #16]
 80104e6:	68db      	ldr	r3, [r3, #12]
 80104e8:	1ad2      	subs	r2, r2, r3
 80104ea:	693b      	ldr	r3, [r7, #16]
 80104ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80104ee:	693b      	ldr	r3, [r7, #16]
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	461a      	mov	r2, r3
 80104f4:	6879      	ldr	r1, [r7, #4]
 80104f6:	68f8      	ldr	r0, [r7, #12]
 80104f8:	f000 ff4c 	bl	8011394 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80104fc:	2300      	movs	r3, #0
 80104fe:	2200      	movs	r2, #0
 8010500:	2100      	movs	r1, #0
 8010502:	68f8      	ldr	r0, [r7, #12]
 8010504:	f003 ff58 	bl	80143b8 <USBD_LL_PrepareReceive>
 8010508:	e03a      	b.n	8010580 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	68da      	ldr	r2, [r3, #12]
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	689b      	ldr	r3, [r3, #8]
 8010512:	429a      	cmp	r2, r3
 8010514:	d11c      	bne.n	8010550 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	685a      	ldr	r2, [r3, #4]
 801051a:	693b      	ldr	r3, [r7, #16]
 801051c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801051e:	429a      	cmp	r2, r3
 8010520:	d316      	bcc.n	8010550 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010522:	693b      	ldr	r3, [r7, #16]
 8010524:	685a      	ldr	r2, [r3, #4]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801052c:	429a      	cmp	r2, r3
 801052e:	d20f      	bcs.n	8010550 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010530:	2200      	movs	r2, #0
 8010532:	2100      	movs	r1, #0
 8010534:	68f8      	ldr	r0, [r7, #12]
 8010536:	f000 ff2d 	bl	8011394 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010542:	2300      	movs	r3, #0
 8010544:	2200      	movs	r2, #0
 8010546:	2100      	movs	r1, #0
 8010548:	68f8      	ldr	r0, [r7, #12]
 801054a:	f003 ff35 	bl	80143b8 <USBD_LL_PrepareReceive>
 801054e:	e017      	b.n	8010580 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d00a      	beq.n	8010572 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8010562:	2b03      	cmp	r3, #3
 8010564:	d105      	bne.n	8010572 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801056c:	68db      	ldr	r3, [r3, #12]
 801056e:	68f8      	ldr	r0, [r7, #12]
 8010570:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010572:	2180      	movs	r1, #128	; 0x80
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f003 fe75 	bl	8014264 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801057a:	68f8      	ldr	r0, [r7, #12]
 801057c:	f000 ff5c 	bl	8011438 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8010580:	68fb      	ldr	r3, [r7, #12]
 8010582:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010586:	2b01      	cmp	r3, #1
 8010588:	d123      	bne.n	80105d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 801058a:	68f8      	ldr	r0, [r7, #12]
 801058c:	f7ff fe9b 	bl	80102c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8010598:	e01b      	b.n	80105d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105a0:	695b      	ldr	r3, [r3, #20]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d013      	beq.n	80105ce <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80105ac:	2b03      	cmp	r3, #3
 80105ae:	d10e      	bne.n	80105ce <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	7afa      	ldrb	r2, [r7, #11]
 80105ba:	4611      	mov	r1, r2
 80105bc:	68f8      	ldr	r0, [r7, #12]
 80105be:	4798      	blx	r3
 80105c0:	4603      	mov	r3, r0
 80105c2:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80105c4:	7dfb      	ldrb	r3, [r7, #23]
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d003      	beq.n	80105d2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80105ca:	7dfb      	ldrb	r3, [r7, #23]
 80105cc:	e002      	b.n	80105d4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80105ce:	2303      	movs	r3, #3
 80105d0:	e000      	b.n	80105d4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80105d2:	2300      	movs	r3, #0
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3718      	adds	r7, #24
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2201      	movs	r2, #1
 80105e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2200      	movs	r2, #0
 80105f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010608:	2b00      	cmp	r3, #0
 801060a:	d009      	beq.n	8010620 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	6852      	ldr	r2, [r2, #4]
 8010618:	b2d2      	uxtb	r2, r2
 801061a:	4611      	mov	r1, r2
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010620:	2340      	movs	r3, #64	; 0x40
 8010622:	2200      	movs	r2, #0
 8010624:	2100      	movs	r1, #0
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f003 fdd7 	bl	80141da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	2201      	movs	r2, #1
 8010630:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2240      	movs	r2, #64	; 0x40
 8010638:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801063c:	2340      	movs	r3, #64	; 0x40
 801063e:	2200      	movs	r2, #0
 8010640:	2180      	movs	r1, #128	; 0x80
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f003 fdc9 	bl	80141da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	2201      	movs	r2, #1
 801064c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	2240      	movs	r2, #64	; 0x40
 8010652:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8010654:	2300      	movs	r3, #0
}
 8010656:	4618      	mov	r0, r3
 8010658:	3708      	adds	r7, #8
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}

0801065e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801065e:	b480      	push	{r7}
 8010660:	b083      	sub	sp, #12
 8010662:	af00      	add	r7, sp, #0
 8010664:	6078      	str	r0, [r7, #4]
 8010666:	460b      	mov	r3, r1
 8010668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	78fa      	ldrb	r2, [r7, #3]
 801066e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010670:	2300      	movs	r3, #0
}
 8010672:	4618      	mov	r0, r3
 8010674:	370c      	adds	r7, #12
 8010676:	46bd      	mov	sp, r7
 8010678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067c:	4770      	bx	lr

0801067e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801067e:	b480      	push	{r7}
 8010680:	b083      	sub	sp, #12
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	2204      	movs	r2, #4
 8010696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	370c      	adds	r7, #12
 80106a0:	46bd      	mov	sp, r7
 80106a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a6:	4770      	bx	lr

080106a8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80106a8:	b480      	push	{r7}
 80106aa:	b083      	sub	sp, #12
 80106ac:	af00      	add	r7, sp, #0
 80106ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106b6:	2b04      	cmp	r3, #4
 80106b8:	d105      	bne.n	80106c6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80106c6:	2300      	movs	r3, #0
}
 80106c8:	4618      	mov	r0, r3
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106e2:	2b03      	cmp	r3, #3
 80106e4:	d10b      	bne.n	80106fe <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106ec:	69db      	ldr	r3, [r3, #28]
 80106ee:	2b00      	cmp	r3, #0
 80106f0:	d005      	beq.n	80106fe <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80106f8:	69db      	ldr	r3, [r3, #28]
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3708      	adds	r7, #8
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}

08010708 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	460b      	mov	r3, r1
 8010712:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8010714:	2300      	movs	r3, #0
}
 8010716:	4618      	mov	r0, r3
 8010718:	370c      	adds	r7, #12
 801071a:	46bd      	mov	sp, r7
 801071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010720:	4770      	bx	lr

08010722 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010722:	b480      	push	{r7}
 8010724:	b083      	sub	sp, #12
 8010726:	af00      	add	r7, sp, #0
 8010728:	6078      	str	r0, [r7, #4]
 801072a:	460b      	mov	r3, r1
 801072c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801072e:	2300      	movs	r3, #0
}
 8010730:	4618      	mov	r0, r3
 8010732:	370c      	adds	r7, #12
 8010734:	46bd      	mov	sp, r7
 8010736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073a:	4770      	bx	lr

0801073c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801073c:	b480      	push	{r7}
 801073e:	b083      	sub	sp, #12
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010744:	2300      	movs	r3, #0
}
 8010746:	4618      	mov	r0, r3
 8010748:	370c      	adds	r7, #12
 801074a:	46bd      	mov	sp, r7
 801074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010750:	4770      	bx	lr

08010752 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	2201      	movs	r2, #1
 801075e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010768:	2b00      	cmp	r3, #0
 801076a:	d009      	beq.n	8010780 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	6852      	ldr	r2, [r2, #4]
 8010778:	b2d2      	uxtb	r2, r2
 801077a:	4611      	mov	r1, r2
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	4798      	blx	r3
  }

  return USBD_OK;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}

0801078a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801078a:	b480      	push	{r7}
 801078c:	b087      	sub	sp, #28
 801078e:	af00      	add	r7, sp, #0
 8010790:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	781b      	ldrb	r3, [r3, #0]
 801079a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801079c:	697b      	ldr	r3, [r7, #20]
 801079e:	3301      	adds	r3, #1
 80107a0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80107a2:	697b      	ldr	r3, [r7, #20]
 80107a4:	781b      	ldrb	r3, [r3, #0]
 80107a6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80107a8:	8a3b      	ldrh	r3, [r7, #16]
 80107aa:	021b      	lsls	r3, r3, #8
 80107ac:	b21a      	sxth	r2, r3
 80107ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80107b2:	4313      	orrs	r3, r2
 80107b4:	b21b      	sxth	r3, r3
 80107b6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80107b8:	89fb      	ldrh	r3, [r7, #14]
}
 80107ba:	4618      	mov	r0, r3
 80107bc:	371c      	adds	r7, #28
 80107be:	46bd      	mov	sp, r7
 80107c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c4:	4770      	bx	lr
	...

080107c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b084      	sub	sp, #16
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80107d2:	2300      	movs	r3, #0
 80107d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80107d6:	683b      	ldr	r3, [r7, #0]
 80107d8:	781b      	ldrb	r3, [r3, #0]
 80107da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80107de:	2b20      	cmp	r3, #32
 80107e0:	d004      	beq.n	80107ec <USBD_StdDevReq+0x24>
 80107e2:	2b40      	cmp	r3, #64	; 0x40
 80107e4:	d002      	beq.n	80107ec <USBD_StdDevReq+0x24>
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d00a      	beq.n	8010800 <USBD_StdDevReq+0x38>
 80107ea:	e050      	b.n	801088e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80107f2:	689b      	ldr	r3, [r3, #8]
 80107f4:	6839      	ldr	r1, [r7, #0]
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	4798      	blx	r3
 80107fa:	4603      	mov	r3, r0
 80107fc:	73fb      	strb	r3, [r7, #15]
    break;
 80107fe:	e04b      	b.n	8010898 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	785b      	ldrb	r3, [r3, #1]
 8010804:	2b09      	cmp	r3, #9
 8010806:	d83c      	bhi.n	8010882 <USBD_StdDevReq+0xba>
 8010808:	a201      	add	r2, pc, #4	; (adr r2, 8010810 <USBD_StdDevReq+0x48>)
 801080a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801080e:	bf00      	nop
 8010810:	08010865 	.word	0x08010865
 8010814:	08010879 	.word	0x08010879
 8010818:	08010883 	.word	0x08010883
 801081c:	0801086f 	.word	0x0801086f
 8010820:	08010883 	.word	0x08010883
 8010824:	08010843 	.word	0x08010843
 8010828:	08010839 	.word	0x08010839
 801082c:	08010883 	.word	0x08010883
 8010830:	0801085b 	.word	0x0801085b
 8010834:	0801084d 	.word	0x0801084d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8010838:	6839      	ldr	r1, [r7, #0]
 801083a:	6878      	ldr	r0, [r7, #4]
 801083c:	f000 f9ce 	bl	8010bdc <USBD_GetDescriptor>
      break;
 8010840:	e024      	b.n	801088c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8010842:	6839      	ldr	r1, [r7, #0]
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f000 fb5d 	bl	8010f04 <USBD_SetAddress>
      break;
 801084a:	e01f      	b.n	801088c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 801084c:	6839      	ldr	r1, [r7, #0]
 801084e:	6878      	ldr	r0, [r7, #4]
 8010850:	f000 fb9a 	bl	8010f88 <USBD_SetConfig>
 8010854:	4603      	mov	r3, r0
 8010856:	73fb      	strb	r3, [r7, #15]
      break;
 8010858:	e018      	b.n	801088c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801085a:	6839      	ldr	r1, [r7, #0]
 801085c:	6878      	ldr	r0, [r7, #4]
 801085e:	f000 fc37 	bl	80110d0 <USBD_GetConfig>
      break;
 8010862:	e013      	b.n	801088c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8010864:	6839      	ldr	r1, [r7, #0]
 8010866:	6878      	ldr	r0, [r7, #4]
 8010868:	f000 fc66 	bl	8011138 <USBD_GetStatus>
      break;
 801086c:	e00e      	b.n	801088c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801086e:	6839      	ldr	r1, [r7, #0]
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 fc94 	bl	801119e <USBD_SetFeature>
      break;
 8010876:	e009      	b.n	801088c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8010878:	6839      	ldr	r1, [r7, #0]
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f000 fca3 	bl	80111c6 <USBD_ClrFeature>
      break;
 8010880:	e004      	b.n	801088c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8010882:	6839      	ldr	r1, [r7, #0]
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f000 fcf9 	bl	801127c <USBD_CtlError>
      break;
 801088a:	bf00      	nop
    }
    break;
 801088c:	e004      	b.n	8010898 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801088e:	6839      	ldr	r1, [r7, #0]
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f000 fcf3 	bl	801127c <USBD_CtlError>
    break;
 8010896:	bf00      	nop
  }

  return ret;
 8010898:	7bfb      	ldrb	r3, [r7, #15]
}
 801089a:	4618      	mov	r0, r3
 801089c:	3710      	adds	r7, #16
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop

080108a4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b084      	sub	sp, #16
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	6078      	str	r0, [r7, #4]
 80108ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80108ae:	2300      	movs	r3, #0
 80108b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	781b      	ldrb	r3, [r3, #0]
 80108b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80108ba:	2b20      	cmp	r3, #32
 80108bc:	d003      	beq.n	80108c6 <USBD_StdItfReq+0x22>
 80108be:	2b40      	cmp	r3, #64	; 0x40
 80108c0:	d001      	beq.n	80108c6 <USBD_StdItfReq+0x22>
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d12a      	bne.n	801091c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80108cc:	3b01      	subs	r3, #1
 80108ce:	2b02      	cmp	r3, #2
 80108d0:	d81d      	bhi.n	801090e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80108d2:	683b      	ldr	r3, [r7, #0]
 80108d4:	889b      	ldrh	r3, [r3, #4]
 80108d6:	b2db      	uxtb	r3, r3
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d813      	bhi.n	8010904 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80108e2:	689b      	ldr	r3, [r3, #8]
 80108e4:	6839      	ldr	r1, [r7, #0]
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	4798      	blx	r3
 80108ea:	4603      	mov	r3, r0
 80108ec:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	88db      	ldrh	r3, [r3, #6]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d110      	bne.n	8010918 <USBD_StdItfReq+0x74>
 80108f6:	7bfb      	ldrb	r3, [r7, #15]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d10d      	bne.n	8010918 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 fd88 	bl	8011412 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8010902:	e009      	b.n	8010918 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8010904:	6839      	ldr	r1, [r7, #0]
 8010906:	6878      	ldr	r0, [r7, #4]
 8010908:	f000 fcb8 	bl	801127c <USBD_CtlError>
      break;
 801090c:	e004      	b.n	8010918 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801090e:	6839      	ldr	r1, [r7, #0]
 8010910:	6878      	ldr	r0, [r7, #4]
 8010912:	f000 fcb3 	bl	801127c <USBD_CtlError>
      break;
 8010916:	e000      	b.n	801091a <USBD_StdItfReq+0x76>
      break;
 8010918:	bf00      	nop
    }
    break;
 801091a:	e004      	b.n	8010926 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 801091c:	6839      	ldr	r1, [r7, #0]
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	f000 fcac 	bl	801127c <USBD_CtlError>
    break;
 8010924:	bf00      	nop
  }

  return ret;
 8010926:	7bfb      	ldrb	r3, [r7, #15]
}
 8010928:	4618      	mov	r0, r3
 801092a:	3710      	adds	r7, #16
 801092c:	46bd      	mov	sp, r7
 801092e:	bd80      	pop	{r7, pc}

08010930 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
 8010938:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801093a:	2300      	movs	r3, #0
 801093c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	889b      	ldrh	r3, [r3, #4]
 8010942:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801094c:	2b20      	cmp	r3, #32
 801094e:	d004      	beq.n	801095a <USBD_StdEPReq+0x2a>
 8010950:	2b40      	cmp	r3, #64	; 0x40
 8010952:	d002      	beq.n	801095a <USBD_StdEPReq+0x2a>
 8010954:	2b00      	cmp	r3, #0
 8010956:	d00a      	beq.n	801096e <USBD_StdEPReq+0x3e>
 8010958:	e135      	b.n	8010bc6 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010960:	689b      	ldr	r3, [r3, #8]
 8010962:	6839      	ldr	r1, [r7, #0]
 8010964:	6878      	ldr	r0, [r7, #4]
 8010966:	4798      	blx	r3
 8010968:	4603      	mov	r3, r0
 801096a:	73fb      	strb	r3, [r7, #15]
    break;
 801096c:	e130      	b.n	8010bd0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801096e:	683b      	ldr	r3, [r7, #0]
 8010970:	785b      	ldrb	r3, [r3, #1]
 8010972:	2b01      	cmp	r3, #1
 8010974:	d03e      	beq.n	80109f4 <USBD_StdEPReq+0xc4>
 8010976:	2b03      	cmp	r3, #3
 8010978:	d002      	beq.n	8010980 <USBD_StdEPReq+0x50>
 801097a:	2b00      	cmp	r3, #0
 801097c:	d077      	beq.n	8010a6e <USBD_StdEPReq+0x13e>
 801097e:	e11c      	b.n	8010bba <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010986:	2b02      	cmp	r3, #2
 8010988:	d002      	beq.n	8010990 <USBD_StdEPReq+0x60>
 801098a:	2b03      	cmp	r3, #3
 801098c:	d015      	beq.n	80109ba <USBD_StdEPReq+0x8a>
 801098e:	e02b      	b.n	80109e8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010990:	7bbb      	ldrb	r3, [r7, #14]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d00c      	beq.n	80109b0 <USBD_StdEPReq+0x80>
 8010996:	7bbb      	ldrb	r3, [r7, #14]
 8010998:	2b80      	cmp	r3, #128	; 0x80
 801099a:	d009      	beq.n	80109b0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801099c:	7bbb      	ldrb	r3, [r7, #14]
 801099e:	4619      	mov	r1, r3
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f003 fc5f 	bl	8014264 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80109a6:	2180      	movs	r1, #128	; 0x80
 80109a8:	6878      	ldr	r0, [r7, #4]
 80109aa:	f003 fc5b 	bl	8014264 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80109ae:	e020      	b.n	80109f2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f000 fc62 	bl	801127c <USBD_CtlError>
        break;
 80109b8:	e01b      	b.n	80109f2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80109ba:	683b      	ldr	r3, [r7, #0]
 80109bc:	885b      	ldrh	r3, [r3, #2]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d10e      	bne.n	80109e0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80109c2:	7bbb      	ldrb	r3, [r7, #14]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d00b      	beq.n	80109e0 <USBD_StdEPReq+0xb0>
 80109c8:	7bbb      	ldrb	r3, [r7, #14]
 80109ca:	2b80      	cmp	r3, #128	; 0x80
 80109cc:	d008      	beq.n	80109e0 <USBD_StdEPReq+0xb0>
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	88db      	ldrh	r3, [r3, #6]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d104      	bne.n	80109e0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80109d6:	7bbb      	ldrb	r3, [r7, #14]
 80109d8:	4619      	mov	r1, r3
 80109da:	6878      	ldr	r0, [r7, #4]
 80109dc:	f003 fc42 	bl	8014264 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f000 fd16 	bl	8011412 <USBD_CtlSendStatus>

        break;
 80109e6:	e004      	b.n	80109f2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80109e8:	6839      	ldr	r1, [r7, #0]
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f000 fc46 	bl	801127c <USBD_CtlError>
        break;
 80109f0:	bf00      	nop
      }
      break;
 80109f2:	e0e7      	b.n	8010bc4 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80109fa:	2b02      	cmp	r3, #2
 80109fc:	d002      	beq.n	8010a04 <USBD_StdEPReq+0xd4>
 80109fe:	2b03      	cmp	r3, #3
 8010a00:	d015      	beq.n	8010a2e <USBD_StdEPReq+0xfe>
 8010a02:	e02d      	b.n	8010a60 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a04:	7bbb      	ldrb	r3, [r7, #14]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d00c      	beq.n	8010a24 <USBD_StdEPReq+0xf4>
 8010a0a:	7bbb      	ldrb	r3, [r7, #14]
 8010a0c:	2b80      	cmp	r3, #128	; 0x80
 8010a0e:	d009      	beq.n	8010a24 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a10:	7bbb      	ldrb	r3, [r7, #14]
 8010a12:	4619      	mov	r1, r3
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f003 fc25 	bl	8014264 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a1a:	2180      	movs	r1, #128	; 0x80
 8010a1c:	6878      	ldr	r0, [r7, #4]
 8010a1e:	f003 fc21 	bl	8014264 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8010a22:	e023      	b.n	8010a6c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8010a24:	6839      	ldr	r1, [r7, #0]
 8010a26:	6878      	ldr	r0, [r7, #4]
 8010a28:	f000 fc28 	bl	801127c <USBD_CtlError>
        break;
 8010a2c:	e01e      	b.n	8010a6c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	885b      	ldrh	r3, [r3, #2]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d119      	bne.n	8010a6a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8010a36:	7bbb      	ldrb	r3, [r7, #14]
 8010a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d004      	beq.n	8010a4a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a40:	7bbb      	ldrb	r3, [r7, #14]
 8010a42:	4619      	mov	r1, r3
 8010a44:	6878      	ldr	r0, [r7, #4]
 8010a46:	f003 fc2c 	bl	80142a2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 fce1 	bl	8011412 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010a56:	689b      	ldr	r3, [r3, #8]
 8010a58:	6839      	ldr	r1, [r7, #0]
 8010a5a:	6878      	ldr	r0, [r7, #4]
 8010a5c:	4798      	blx	r3
        }
        break;
 8010a5e:	e004      	b.n	8010a6a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8010a60:	6839      	ldr	r1, [r7, #0]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f000 fc0a 	bl	801127c <USBD_CtlError>
        break;
 8010a68:	e000      	b.n	8010a6c <USBD_StdEPReq+0x13c>
        break;
 8010a6a:	bf00      	nop
      }
      break;
 8010a6c:	e0aa      	b.n	8010bc4 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010a74:	2b02      	cmp	r3, #2
 8010a76:	d002      	beq.n	8010a7e <USBD_StdEPReq+0x14e>
 8010a78:	2b03      	cmp	r3, #3
 8010a7a:	d032      	beq.n	8010ae2 <USBD_StdEPReq+0x1b2>
 8010a7c:	e097      	b.n	8010bae <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010a7e:	7bbb      	ldrb	r3, [r7, #14]
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d007      	beq.n	8010a94 <USBD_StdEPReq+0x164>
 8010a84:	7bbb      	ldrb	r3, [r7, #14]
 8010a86:	2b80      	cmp	r3, #128	; 0x80
 8010a88:	d004      	beq.n	8010a94 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f000 fbf5 	bl	801127c <USBD_CtlError>
          break;
 8010a92:	e091      	b.n	8010bb8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	da0b      	bge.n	8010ab4 <USBD_StdEPReq+0x184>
 8010a9c:	7bbb      	ldrb	r3, [r7, #14]
 8010a9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	009b      	lsls	r3, r3, #2
 8010aa6:	4413      	add	r3, r2
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	3310      	adds	r3, #16
 8010aac:	687a      	ldr	r2, [r7, #4]
 8010aae:	4413      	add	r3, r2
 8010ab0:	3304      	adds	r3, #4
 8010ab2:	e00b      	b.n	8010acc <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010ab4:	7bbb      	ldrb	r3, [r7, #14]
 8010ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010aba:	4613      	mov	r3, r2
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	4413      	add	r3, r2
 8010ac0:	009b      	lsls	r3, r3, #2
 8010ac2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010ac6:	687a      	ldr	r2, [r7, #4]
 8010ac8:	4413      	add	r3, r2
 8010aca:	3304      	adds	r3, #4
 8010acc:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ad4:	68bb      	ldr	r3, [r7, #8]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	4619      	mov	r1, r3
 8010ada:	6878      	ldr	r0, [r7, #4]
 8010adc:	f000 fc3f 	bl	801135e <USBD_CtlSendData>
        break;
 8010ae0:	e06a      	b.n	8010bb8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8010ae2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	da11      	bge.n	8010b0e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010aea:	7bbb      	ldrb	r3, [r7, #14]
 8010aec:	f003 020f 	and.w	r2, r3, #15
 8010af0:	6879      	ldr	r1, [r7, #4]
 8010af2:	4613      	mov	r3, r2
 8010af4:	009b      	lsls	r3, r3, #2
 8010af6:	4413      	add	r3, r2
 8010af8:	009b      	lsls	r3, r3, #2
 8010afa:	440b      	add	r3, r1
 8010afc:	3324      	adds	r3, #36	; 0x24
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d117      	bne.n	8010b34 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010b04:	6839      	ldr	r1, [r7, #0]
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 fbb8 	bl	801127c <USBD_CtlError>
            break;
 8010b0c:	e054      	b.n	8010bb8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010b0e:	7bbb      	ldrb	r3, [r7, #14]
 8010b10:	f003 020f 	and.w	r2, r3, #15
 8010b14:	6879      	ldr	r1, [r7, #4]
 8010b16:	4613      	mov	r3, r2
 8010b18:	009b      	lsls	r3, r3, #2
 8010b1a:	4413      	add	r3, r2
 8010b1c:	009b      	lsls	r3, r3, #2
 8010b1e:	440b      	add	r3, r1
 8010b20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8010b24:	881b      	ldrh	r3, [r3, #0]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d104      	bne.n	8010b34 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8010b2a:	6839      	ldr	r1, [r7, #0]
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 fba5 	bl	801127c <USBD_CtlError>
            break;
 8010b32:	e041      	b.n	8010bb8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	da0b      	bge.n	8010b54 <USBD_StdEPReq+0x224>
 8010b3c:	7bbb      	ldrb	r3, [r7, #14]
 8010b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010b42:	4613      	mov	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	4413      	add	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	3310      	adds	r3, #16
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	4413      	add	r3, r2
 8010b50:	3304      	adds	r3, #4
 8010b52:	e00b      	b.n	8010b6c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8010b54:	7bbb      	ldrb	r3, [r7, #14]
 8010b56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	009b      	lsls	r3, r3, #2
 8010b5e:	4413      	add	r3, r2
 8010b60:	009b      	lsls	r3, r3, #2
 8010b62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	4413      	add	r3, r2
 8010b6a:	3304      	adds	r3, #4
 8010b6c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010b6e:	7bbb      	ldrb	r3, [r7, #14]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d002      	beq.n	8010b7a <USBD_StdEPReq+0x24a>
 8010b74:	7bbb      	ldrb	r3, [r7, #14]
 8010b76:	2b80      	cmp	r3, #128	; 0x80
 8010b78:	d103      	bne.n	8010b82 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8010b7a:	68bb      	ldr	r3, [r7, #8]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	601a      	str	r2, [r3, #0]
 8010b80:	e00e      	b.n	8010ba0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
 8010b84:	4619      	mov	r1, r3
 8010b86:	6878      	ldr	r0, [r7, #4]
 8010b88:	f003 fbaa 	bl	80142e0 <USBD_LL_IsStallEP>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d003      	beq.n	8010b9a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8010b92:	68bb      	ldr	r3, [r7, #8]
 8010b94:	2201      	movs	r2, #1
 8010b96:	601a      	str	r2, [r3, #0]
 8010b98:	e002      	b.n	8010ba0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2202      	movs	r2, #2
 8010ba4:	4619      	mov	r1, r3
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f000 fbd9 	bl	801135e <USBD_CtlSendData>
          break;
 8010bac:	e004      	b.n	8010bb8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8010bae:	6839      	ldr	r1, [r7, #0]
 8010bb0:	6878      	ldr	r0, [r7, #4]
 8010bb2:	f000 fb63 	bl	801127c <USBD_CtlError>
        break;
 8010bb6:	bf00      	nop
      }
      break;
 8010bb8:	e004      	b.n	8010bc4 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8010bba:	6839      	ldr	r1, [r7, #0]
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f000 fb5d 	bl	801127c <USBD_CtlError>
      break;
 8010bc2:	bf00      	nop
    }
    break;
 8010bc4:	e004      	b.n	8010bd0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8010bc6:	6839      	ldr	r1, [r7, #0]
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 fb57 	bl	801127c <USBD_CtlError>
    break;
 8010bce:	bf00      	nop
  }

  return ret;
 8010bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	3710      	adds	r7, #16
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
	...

08010bdc <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
 8010be4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010be6:	2300      	movs	r3, #0
 8010be8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010bea:	2300      	movs	r3, #0
 8010bec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010bee:	2300      	movs	r3, #0
 8010bf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010bf2:	683b      	ldr	r3, [r7, #0]
 8010bf4:	885b      	ldrh	r3, [r3, #2]
 8010bf6:	0a1b      	lsrs	r3, r3, #8
 8010bf8:	b29b      	uxth	r3, r3
 8010bfa:	3b01      	subs	r3, #1
 8010bfc:	2b0e      	cmp	r3, #14
 8010bfe:	f200 8152 	bhi.w	8010ea6 <USBD_GetDescriptor+0x2ca>
 8010c02:	a201      	add	r2, pc, #4	; (adr r2, 8010c08 <USBD_GetDescriptor+0x2c>)
 8010c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c08:	08010c79 	.word	0x08010c79
 8010c0c:	08010c91 	.word	0x08010c91
 8010c10:	08010cd1 	.word	0x08010cd1
 8010c14:	08010ea7 	.word	0x08010ea7
 8010c18:	08010ea7 	.word	0x08010ea7
 8010c1c:	08010e47 	.word	0x08010e47
 8010c20:	08010e73 	.word	0x08010e73
 8010c24:	08010ea7 	.word	0x08010ea7
 8010c28:	08010ea7 	.word	0x08010ea7
 8010c2c:	08010ea7 	.word	0x08010ea7
 8010c30:	08010ea7 	.word	0x08010ea7
 8010c34:	08010ea7 	.word	0x08010ea7
 8010c38:	08010ea7 	.word	0x08010ea7
 8010c3c:	08010ea7 	.word	0x08010ea7
 8010c40:	08010c45 	.word	0x08010c45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c4a:	69db      	ldr	r3, [r3, #28]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00b      	beq.n	8010c68 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c56:	69db      	ldr	r3, [r3, #28]
 8010c58:	687a      	ldr	r2, [r7, #4]
 8010c5a:	7c12      	ldrb	r2, [r2, #16]
 8010c5c:	f107 0108 	add.w	r1, r7, #8
 8010c60:	4610      	mov	r0, r2
 8010c62:	4798      	blx	r3
 8010c64:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010c66:	e126      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8010c68:	6839      	ldr	r1, [r7, #0]
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 fb06 	bl	801127c <USBD_CtlError>
      err++;
 8010c70:	7afb      	ldrb	r3, [r7, #11]
 8010c72:	3301      	adds	r3, #1
 8010c74:	72fb      	strb	r3, [r7, #11]
    break;
 8010c76:	e11e      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	687a      	ldr	r2, [r7, #4]
 8010c82:	7c12      	ldrb	r2, [r2, #16]
 8010c84:	f107 0108 	add.w	r1, r7, #8
 8010c88:	4610      	mov	r0, r2
 8010c8a:	4798      	blx	r3
 8010c8c:	60f8      	str	r0, [r7, #12]
    break;
 8010c8e:	e112      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	7c1b      	ldrb	r3, [r3, #16]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d10d      	bne.n	8010cb4 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ca0:	f107 0208 	add.w	r2, r7, #8
 8010ca4:	4610      	mov	r0, r2
 8010ca6:	4798      	blx	r3
 8010ca8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	3301      	adds	r3, #1
 8010cae:	2202      	movs	r2, #2
 8010cb0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8010cb2:	e100      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cbc:	f107 0208 	add.w	r2, r7, #8
 8010cc0:	4610      	mov	r0, r2
 8010cc2:	4798      	blx	r3
 8010cc4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3301      	adds	r3, #1
 8010cca:	2202      	movs	r2, #2
 8010ccc:	701a      	strb	r2, [r3, #0]
    break;
 8010cce:	e0f2      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8010cd0:	683b      	ldr	r3, [r7, #0]
 8010cd2:	885b      	ldrh	r3, [r3, #2]
 8010cd4:	b2db      	uxtb	r3, r3
 8010cd6:	2b05      	cmp	r3, #5
 8010cd8:	f200 80ac 	bhi.w	8010e34 <USBD_GetDescriptor+0x258>
 8010cdc:	a201      	add	r2, pc, #4	; (adr r2, 8010ce4 <USBD_GetDescriptor+0x108>)
 8010cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ce2:	bf00      	nop
 8010ce4:	08010cfd 	.word	0x08010cfd
 8010ce8:	08010d31 	.word	0x08010d31
 8010cec:	08010d65 	.word	0x08010d65
 8010cf0:	08010d99 	.word	0x08010d99
 8010cf4:	08010dcd 	.word	0x08010dcd
 8010cf8:	08010e01 	.word	0x08010e01
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d02:	685b      	ldr	r3, [r3, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d00b      	beq.n	8010d20 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d0e:	685b      	ldr	r3, [r3, #4]
 8010d10:	687a      	ldr	r2, [r7, #4]
 8010d12:	7c12      	ldrb	r2, [r2, #16]
 8010d14:	f107 0108 	add.w	r1, r7, #8
 8010d18:	4610      	mov	r0, r2
 8010d1a:	4798      	blx	r3
 8010d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d1e:	e091      	b.n	8010e44 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8010d20:	6839      	ldr	r1, [r7, #0]
 8010d22:	6878      	ldr	r0, [r7, #4]
 8010d24:	f000 faaa 	bl	801127c <USBD_CtlError>
        err++;
 8010d28:	7afb      	ldrb	r3, [r7, #11]
 8010d2a:	3301      	adds	r3, #1
 8010d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8010d2e:	e089      	b.n	8010e44 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d36:	689b      	ldr	r3, [r3, #8]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d00b      	beq.n	8010d54 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	687a      	ldr	r2, [r7, #4]
 8010d46:	7c12      	ldrb	r2, [r2, #16]
 8010d48:	f107 0108 	add.w	r1, r7, #8
 8010d4c:	4610      	mov	r0, r2
 8010d4e:	4798      	blx	r3
 8010d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d52:	e077      	b.n	8010e44 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8010d54:	6839      	ldr	r1, [r7, #0]
 8010d56:	6878      	ldr	r0, [r7, #4]
 8010d58:	f000 fa90 	bl	801127c <USBD_CtlError>
        err++;
 8010d5c:	7afb      	ldrb	r3, [r7, #11]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	72fb      	strb	r3, [r7, #11]
      break;
 8010d62:	e06f      	b.n	8010e44 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d6a:	68db      	ldr	r3, [r3, #12]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d00b      	beq.n	8010d88 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d76:	68db      	ldr	r3, [r3, #12]
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	7c12      	ldrb	r2, [r2, #16]
 8010d7c:	f107 0108 	add.w	r1, r7, #8
 8010d80:	4610      	mov	r0, r2
 8010d82:	4798      	blx	r3
 8010d84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d86:	e05d      	b.n	8010e44 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8010d88:	6839      	ldr	r1, [r7, #0]
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 fa76 	bl	801127c <USBD_CtlError>
        err++;
 8010d90:	7afb      	ldrb	r3, [r7, #11]
 8010d92:	3301      	adds	r3, #1
 8010d94:	72fb      	strb	r3, [r7, #11]
      break;
 8010d96:	e055      	b.n	8010e44 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010d9e:	691b      	ldr	r3, [r3, #16]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	d00b      	beq.n	8010dbc <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	687a      	ldr	r2, [r7, #4]
 8010dae:	7c12      	ldrb	r2, [r2, #16]
 8010db0:	f107 0108 	add.w	r1, r7, #8
 8010db4:	4610      	mov	r0, r2
 8010db6:	4798      	blx	r3
 8010db8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010dba:	e043      	b.n	8010e44 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8010dbc:	6839      	ldr	r1, [r7, #0]
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 fa5c 	bl	801127c <USBD_CtlError>
        err++;
 8010dc4:	7afb      	ldrb	r3, [r7, #11]
 8010dc6:	3301      	adds	r3, #1
 8010dc8:	72fb      	strb	r3, [r7, #11]
      break;
 8010dca:	e03b      	b.n	8010e44 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dd2:	695b      	ldr	r3, [r3, #20]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d00b      	beq.n	8010df0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	687a      	ldr	r2, [r7, #4]
 8010de2:	7c12      	ldrb	r2, [r2, #16]
 8010de4:	f107 0108 	add.w	r1, r7, #8
 8010de8:	4610      	mov	r0, r2
 8010dea:	4798      	blx	r3
 8010dec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010dee:	e029      	b.n	8010e44 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8010df0:	6839      	ldr	r1, [r7, #0]
 8010df2:	6878      	ldr	r0, [r7, #4]
 8010df4:	f000 fa42 	bl	801127c <USBD_CtlError>
        err++;
 8010df8:	7afb      	ldrb	r3, [r7, #11]
 8010dfa:	3301      	adds	r3, #1
 8010dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8010dfe:	e021      	b.n	8010e44 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e06:	699b      	ldr	r3, [r3, #24]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d00b      	beq.n	8010e24 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010e12:	699b      	ldr	r3, [r3, #24]
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	7c12      	ldrb	r2, [r2, #16]
 8010e18:	f107 0108 	add.w	r1, r7, #8
 8010e1c:	4610      	mov	r0, r2
 8010e1e:	4798      	blx	r3
 8010e20:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e22:	e00f      	b.n	8010e44 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8010e24:	6839      	ldr	r1, [r7, #0]
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fa28 	bl	801127c <USBD_CtlError>
        err++;
 8010e2c:	7afb      	ldrb	r3, [r7, #11]
 8010e2e:	3301      	adds	r3, #1
 8010e30:	72fb      	strb	r3, [r7, #11]
      break;
 8010e32:	e007      	b.n	8010e44 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8010e34:	6839      	ldr	r1, [r7, #0]
 8010e36:	6878      	ldr	r0, [r7, #4]
 8010e38:	f000 fa20 	bl	801127c <USBD_CtlError>
      err++;
 8010e3c:	7afb      	ldrb	r3, [r7, #11]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8010e42:	bf00      	nop
    }
    break;
 8010e44:	e037      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	7c1b      	ldrb	r3, [r3, #16]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d109      	bne.n	8010e62 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e56:	f107 0208 	add.w	r2, r7, #8
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	4798      	blx	r3
 8010e5e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010e60:	e029      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8010e62:	6839      	ldr	r1, [r7, #0]
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 fa09 	bl	801127c <USBD_CtlError>
      err++;
 8010e6a:	7afb      	ldrb	r3, [r7, #11]
 8010e6c:	3301      	adds	r3, #1
 8010e6e:	72fb      	strb	r3, [r7, #11]
    break;
 8010e70:	e021      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	7c1b      	ldrb	r3, [r3, #16]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d10d      	bne.n	8010e96 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e82:	f107 0208 	add.w	r2, r7, #8
 8010e86:	4610      	mov	r0, r2
 8010e88:	4798      	blx	r3
 8010e8a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	3301      	adds	r3, #1
 8010e90:	2207      	movs	r2, #7
 8010e92:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010e94:	e00f      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f000 f9ef 	bl	801127c <USBD_CtlError>
      err++;
 8010e9e:	7afb      	ldrb	r3, [r7, #11]
 8010ea0:	3301      	adds	r3, #1
 8010ea2:	72fb      	strb	r3, [r7, #11]
    break;
 8010ea4:	e007      	b.n	8010eb6 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8010ea6:	6839      	ldr	r1, [r7, #0]
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 f9e7 	bl	801127c <USBD_CtlError>
    err++;
 8010eae:	7afb      	ldrb	r3, [r7, #11]
 8010eb0:	3301      	adds	r3, #1
 8010eb2:	72fb      	strb	r3, [r7, #11]
    break;
 8010eb4:	bf00      	nop
  }

  if (err != 0U)
 8010eb6:	7afb      	ldrb	r3, [r7, #11]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d11e      	bne.n	8010efa <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8010ebc:	683b      	ldr	r3, [r7, #0]
 8010ebe:	88db      	ldrh	r3, [r3, #6]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d016      	beq.n	8010ef2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8010ec4:	893b      	ldrh	r3, [r7, #8]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d00e      	beq.n	8010ee8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8010eca:	683b      	ldr	r3, [r7, #0]
 8010ecc:	88da      	ldrh	r2, [r3, #6]
 8010ece:	893b      	ldrh	r3, [r7, #8]
 8010ed0:	4293      	cmp	r3, r2
 8010ed2:	bf28      	it	cs
 8010ed4:	4613      	movcs	r3, r2
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8010eda:	893b      	ldrh	r3, [r7, #8]
 8010edc:	461a      	mov	r2, r3
 8010ede:	68f9      	ldr	r1, [r7, #12]
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f000 fa3c 	bl	801135e <USBD_CtlSendData>
 8010ee6:	e009      	b.n	8010efc <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010ee8:	6839      	ldr	r1, [r7, #0]
 8010eea:	6878      	ldr	r0, [r7, #4]
 8010eec:	f000 f9c6 	bl	801127c <USBD_CtlError>
 8010ef0:	e004      	b.n	8010efc <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 fa8d 	bl	8011412 <USBD_CtlSendStatus>
 8010ef8:	e000      	b.n	8010efc <USBD_GetDescriptor+0x320>
    return;
 8010efa:	bf00      	nop
    }
  }
}
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop

08010f04 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f04:	b580      	push	{r7, lr}
 8010f06:	b084      	sub	sp, #16
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
 8010f0c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	889b      	ldrh	r3, [r3, #4]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d130      	bne.n	8010f78 <USBD_SetAddress+0x74>
 8010f16:	683b      	ldr	r3, [r7, #0]
 8010f18:	88db      	ldrh	r3, [r3, #6]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d12c      	bne.n	8010f78 <USBD_SetAddress+0x74>
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	885b      	ldrh	r3, [r3, #2]
 8010f22:	2b7f      	cmp	r3, #127	; 0x7f
 8010f24:	d828      	bhi.n	8010f78 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	885b      	ldrh	r3, [r3, #2]
 8010f2a:	b2db      	uxtb	r3, r3
 8010f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010f30:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010f38:	2b03      	cmp	r3, #3
 8010f3a:	d104      	bne.n	8010f46 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8010f3c:	6839      	ldr	r1, [r7, #0]
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f000 f99c 	bl	801127c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f44:	e01c      	b.n	8010f80 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	7bfa      	ldrb	r2, [r7, #15]
 8010f4a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010f4e:	7bfb      	ldrb	r3, [r7, #15]
 8010f50:	4619      	mov	r1, r3
 8010f52:	6878      	ldr	r0, [r7, #4]
 8010f54:	f003 f9f0 	bl	8014338 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f000 fa5a 	bl	8011412 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010f5e:	7bfb      	ldrb	r3, [r7, #15]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d004      	beq.n	8010f6e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2202      	movs	r2, #2
 8010f68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f6c:	e008      	b.n	8010f80 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f76:	e003      	b.n	8010f80 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010f78:	6839      	ldr	r1, [r7, #0]
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 f97e 	bl	801127c <USBD_CtlError>
  }
}
 8010f80:	bf00      	nop
 8010f82:	3710      	adds	r7, #16
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}

08010f88 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010f92:	2300      	movs	r3, #0
 8010f94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	885b      	ldrh	r3, [r3, #2]
 8010f9a:	b2da      	uxtb	r2, r3
 8010f9c:	4b4b      	ldr	r3, [pc, #300]	; (80110cc <USBD_SetConfig+0x144>)
 8010f9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010fa0:	4b4a      	ldr	r3, [pc, #296]	; (80110cc <USBD_SetConfig+0x144>)
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	d905      	bls.n	8010fb4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010fa8:	6839      	ldr	r1, [r7, #0]
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 f966 	bl	801127c <USBD_CtlError>
    return USBD_FAIL;
 8010fb0:	2303      	movs	r3, #3
 8010fb2:	e087      	b.n	80110c4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010fba:	2b02      	cmp	r3, #2
 8010fbc:	d002      	beq.n	8010fc4 <USBD_SetConfig+0x3c>
 8010fbe:	2b03      	cmp	r3, #3
 8010fc0:	d025      	beq.n	801100e <USBD_SetConfig+0x86>
 8010fc2:	e071      	b.n	80110a8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8010fc4:	4b41      	ldr	r3, [pc, #260]	; (80110cc <USBD_SetConfig+0x144>)
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d01c      	beq.n	8011006 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8010fcc:	4b3f      	ldr	r3, [pc, #252]	; (80110cc <USBD_SetConfig+0x144>)
 8010fce:	781b      	ldrb	r3, [r3, #0]
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010fd6:	4b3d      	ldr	r3, [pc, #244]	; (80110cc <USBD_SetConfig+0x144>)
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f7ff f97d 	bl	80102dc <USBD_SetClassConfig>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8010fe6:	7bfb      	ldrb	r3, [r7, #15]
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d004      	beq.n	8010ff6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8010fec:	6839      	ldr	r1, [r7, #0]
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f944 	bl	801127c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8010ff4:	e065      	b.n	80110c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f000 fa0b 	bl	8011412 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2203      	movs	r2, #3
 8011000:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011004:	e05d      	b.n	80110c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f000 fa03 	bl	8011412 <USBD_CtlSendStatus>
    break;
 801100c:	e059      	b.n	80110c2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801100e:	4b2f      	ldr	r3, [pc, #188]	; (80110cc <USBD_SetConfig+0x144>)
 8011010:	781b      	ldrb	r3, [r3, #0]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d112      	bne.n	801103c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2202      	movs	r2, #2
 801101a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801101e:	4b2b      	ldr	r3, [pc, #172]	; (80110cc <USBD_SetConfig+0x144>)
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	461a      	mov	r2, r3
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011028:	4b28      	ldr	r3, [pc, #160]	; (80110cc <USBD_SetConfig+0x144>)
 801102a:	781b      	ldrb	r3, [r3, #0]
 801102c:	4619      	mov	r1, r3
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff f970 	bl	8010314 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f9ec 	bl	8011412 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801103a:	e042      	b.n	80110c2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 801103c:	4b23      	ldr	r3, [pc, #140]	; (80110cc <USBD_SetConfig+0x144>)
 801103e:	781b      	ldrb	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	685b      	ldr	r3, [r3, #4]
 8011046:	429a      	cmp	r2, r3
 8011048:	d02a      	beq.n	80110a0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	b2db      	uxtb	r3, r3
 8011050:	4619      	mov	r1, r3
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7ff f95e 	bl	8010314 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8011058:	4b1c      	ldr	r3, [pc, #112]	; (80110cc <USBD_SetConfig+0x144>)
 801105a:	781b      	ldrb	r3, [r3, #0]
 801105c:	461a      	mov	r2, r3
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8011062:	4b1a      	ldr	r3, [pc, #104]	; (80110cc <USBD_SetConfig+0x144>)
 8011064:	781b      	ldrb	r3, [r3, #0]
 8011066:	4619      	mov	r1, r3
 8011068:	6878      	ldr	r0, [r7, #4]
 801106a:	f7ff f937 	bl	80102dc <USBD_SetClassConfig>
 801106e:	4603      	mov	r3, r0
 8011070:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8011072:	7bfb      	ldrb	r3, [r7, #15]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d00f      	beq.n	8011098 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8011078:	6839      	ldr	r1, [r7, #0]
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 f8fe 	bl	801127c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	b2db      	uxtb	r3, r3
 8011086:	4619      	mov	r1, r3
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7ff f943 	bl	8010314 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2202      	movs	r2, #2
 8011092:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8011096:	e014      	b.n	80110c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8011098:	6878      	ldr	r0, [r7, #4]
 801109a:	f000 f9ba 	bl	8011412 <USBD_CtlSendStatus>
    break;
 801109e:	e010      	b.n	80110c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80110a0:	6878      	ldr	r0, [r7, #4]
 80110a2:	f000 f9b6 	bl	8011412 <USBD_CtlSendStatus>
    break;
 80110a6:	e00c      	b.n	80110c2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80110a8:	6839      	ldr	r1, [r7, #0]
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 f8e6 	bl	801127c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110b0:	4b06      	ldr	r3, [pc, #24]	; (80110cc <USBD_SetConfig+0x144>)
 80110b2:	781b      	ldrb	r3, [r3, #0]
 80110b4:	4619      	mov	r1, r3
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7ff f92c 	bl	8010314 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80110bc:	2303      	movs	r3, #3
 80110be:	73fb      	strb	r3, [r7, #15]
    break;
 80110c0:	bf00      	nop
  }

  return ret;
 80110c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80110c4:	4618      	mov	r0, r3
 80110c6:	3710      	adds	r7, #16
 80110c8:	46bd      	mov	sp, r7
 80110ca:	bd80      	pop	{r7, pc}
 80110cc:	2000088d 	.word	0x2000088d

080110d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
 80110d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	88db      	ldrh	r3, [r3, #6]
 80110de:	2b01      	cmp	r3, #1
 80110e0:	d004      	beq.n	80110ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80110e2:	6839      	ldr	r1, [r7, #0]
 80110e4:	6878      	ldr	r0, [r7, #4]
 80110e6:	f000 f8c9 	bl	801127c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80110ea:	e021      	b.n	8011130 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80110f2:	2b01      	cmp	r3, #1
 80110f4:	db17      	blt.n	8011126 <USBD_GetConfig+0x56>
 80110f6:	2b02      	cmp	r3, #2
 80110f8:	dd02      	ble.n	8011100 <USBD_GetConfig+0x30>
 80110fa:	2b03      	cmp	r3, #3
 80110fc:	d00b      	beq.n	8011116 <USBD_GetConfig+0x46>
 80110fe:	e012      	b.n	8011126 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	2200      	movs	r2, #0
 8011104:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	3308      	adds	r3, #8
 801110a:	2201      	movs	r2, #1
 801110c:	4619      	mov	r1, r3
 801110e:	6878      	ldr	r0, [r7, #4]
 8011110:	f000 f925 	bl	801135e <USBD_CtlSendData>
      break;
 8011114:	e00c      	b.n	8011130 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	3304      	adds	r3, #4
 801111a:	2201      	movs	r2, #1
 801111c:	4619      	mov	r1, r3
 801111e:	6878      	ldr	r0, [r7, #4]
 8011120:	f000 f91d 	bl	801135e <USBD_CtlSendData>
      break;
 8011124:	e004      	b.n	8011130 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8011126:	6839      	ldr	r1, [r7, #0]
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f000 f8a7 	bl	801127c <USBD_CtlError>
      break;
 801112e:	bf00      	nop
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b082      	sub	sp, #8
 801113c:	af00      	add	r7, sp, #0
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011148:	3b01      	subs	r3, #1
 801114a:	2b02      	cmp	r3, #2
 801114c:	d81e      	bhi.n	801118c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	88db      	ldrh	r3, [r3, #6]
 8011152:	2b02      	cmp	r3, #2
 8011154:	d004      	beq.n	8011160 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8011156:	6839      	ldr	r1, [r7, #0]
 8011158:	6878      	ldr	r0, [r7, #4]
 801115a:	f000 f88f 	bl	801127c <USBD_CtlError>
      break;
 801115e:	e01a      	b.n	8011196 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2201      	movs	r2, #1
 8011164:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	68db      	ldr	r3, [r3, #12]
 8011174:	f043 0202 	orr.w	r2, r3, #2
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	330c      	adds	r3, #12
 8011180:	2202      	movs	r2, #2
 8011182:	4619      	mov	r1, r3
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f000 f8ea 	bl	801135e <USBD_CtlSendData>
    break;
 801118a:	e004      	b.n	8011196 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801118c:	6839      	ldr	r1, [r7, #0]
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f000 f874 	bl	801127c <USBD_CtlError>
    break;
 8011194:	bf00      	nop
  }
}
 8011196:	bf00      	nop
 8011198:	3708      	adds	r7, #8
 801119a:	46bd      	mov	sp, r7
 801119c:	bd80      	pop	{r7, pc}

0801119e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801119e:	b580      	push	{r7, lr}
 80111a0:	b082      	sub	sp, #8
 80111a2:	af00      	add	r7, sp, #0
 80111a4:	6078      	str	r0, [r7, #4]
 80111a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111a8:	683b      	ldr	r3, [r7, #0]
 80111aa:	885b      	ldrh	r3, [r3, #2]
 80111ac:	2b01      	cmp	r3, #1
 80111ae:	d106      	bne.n	80111be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2201      	movs	r2, #1
 80111b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80111b8:	6878      	ldr	r0, [r7, #4]
 80111ba:	f000 f92a 	bl	8011412 <USBD_CtlSendStatus>
  }
}
 80111be:	bf00      	nop
 80111c0:	3708      	adds	r7, #8
 80111c2:	46bd      	mov	sp, r7
 80111c4:	bd80      	pop	{r7, pc}

080111c6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111c6:	b580      	push	{r7, lr}
 80111c8:	b082      	sub	sp, #8
 80111ca:	af00      	add	r7, sp, #0
 80111cc:	6078      	str	r0, [r7, #4]
 80111ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80111d6:	3b01      	subs	r3, #1
 80111d8:	2b02      	cmp	r3, #2
 80111da:	d80b      	bhi.n	80111f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111dc:	683b      	ldr	r3, [r7, #0]
 80111de:	885b      	ldrh	r3, [r3, #2]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d10c      	bne.n	80111fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2200      	movs	r2, #0
 80111e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f910 	bl	8011412 <USBD_CtlSendStatus>
      }
      break;
 80111f2:	e004      	b.n	80111fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80111f4:	6839      	ldr	r1, [r7, #0]
 80111f6:	6878      	ldr	r0, [r7, #4]
 80111f8:	f000 f840 	bl	801127c <USBD_CtlError>
      break;
 80111fc:	e000      	b.n	8011200 <USBD_ClrFeature+0x3a>
      break;
 80111fe:	bf00      	nop
  }
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	781a      	ldrb	r2, [r3, #0]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	3301      	adds	r3, #1
 8011222:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	781a      	ldrb	r2, [r3, #0]
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	3301      	adds	r3, #1
 8011230:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011232:	68f8      	ldr	r0, [r7, #12]
 8011234:	f7ff faa9 	bl	801078a <SWAPBYTE>
 8011238:	4603      	mov	r3, r0
 801123a:	461a      	mov	r2, r3
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	3301      	adds	r3, #1
 8011244:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	3301      	adds	r3, #1
 801124a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801124c:	68f8      	ldr	r0, [r7, #12]
 801124e:	f7ff fa9c 	bl	801078a <SWAPBYTE>
 8011252:	4603      	mov	r3, r0
 8011254:	461a      	mov	r2, r3
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	3301      	adds	r3, #1
 801125e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	3301      	adds	r3, #1
 8011264:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011266:	68f8      	ldr	r0, [r7, #12]
 8011268:	f7ff fa8f 	bl	801078a <SWAPBYTE>
 801126c:	4603      	mov	r3, r0
 801126e:	461a      	mov	r2, r3
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	80da      	strh	r2, [r3, #6]
}
 8011274:	bf00      	nop
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801127c:	b580      	push	{r7, lr}
 801127e:	b082      	sub	sp, #8
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011286:	2180      	movs	r1, #128	; 0x80
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f002 ffeb 	bl	8014264 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801128e:	2100      	movs	r1, #0
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f002 ffe7 	bl	8014264 <USBD_LL_StallEP>
}
 8011296:	bf00      	nop
 8011298:	3708      	adds	r7, #8
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b086      	sub	sp, #24
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	60f8      	str	r0, [r7, #12]
 80112a6:	60b9      	str	r1, [r7, #8]
 80112a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80112aa:	2300      	movs	r3, #0
 80112ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d036      	beq.n	8011322 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80112b8:	6938      	ldr	r0, [r7, #16]
 80112ba:	f000 f836 	bl	801132a <USBD_GetLen>
 80112be:	4603      	mov	r3, r0
 80112c0:	3301      	adds	r3, #1
 80112c2:	b29b      	uxth	r3, r3
 80112c4:	005b      	lsls	r3, r3, #1
 80112c6:	b29a      	uxth	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80112cc:	7dfb      	ldrb	r3, [r7, #23]
 80112ce:	68ba      	ldr	r2, [r7, #8]
 80112d0:	4413      	add	r3, r2
 80112d2:	687a      	ldr	r2, [r7, #4]
 80112d4:	7812      	ldrb	r2, [r2, #0]
 80112d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80112d8:	7dfb      	ldrb	r3, [r7, #23]
 80112da:	3301      	adds	r3, #1
 80112dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80112de:	7dfb      	ldrb	r3, [r7, #23]
 80112e0:	68ba      	ldr	r2, [r7, #8]
 80112e2:	4413      	add	r3, r2
 80112e4:	2203      	movs	r2, #3
 80112e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80112e8:	7dfb      	ldrb	r3, [r7, #23]
 80112ea:	3301      	adds	r3, #1
 80112ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80112ee:	e013      	b.n	8011318 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80112f0:	7dfb      	ldrb	r3, [r7, #23]
 80112f2:	68ba      	ldr	r2, [r7, #8]
 80112f4:	4413      	add	r3, r2
 80112f6:	693a      	ldr	r2, [r7, #16]
 80112f8:	7812      	ldrb	r2, [r2, #0]
 80112fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	3301      	adds	r3, #1
 8011300:	613b      	str	r3, [r7, #16]
    idx++;
 8011302:	7dfb      	ldrb	r3, [r7, #23]
 8011304:	3301      	adds	r3, #1
 8011306:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011308:	7dfb      	ldrb	r3, [r7, #23]
 801130a:	68ba      	ldr	r2, [r7, #8]
 801130c:	4413      	add	r3, r2
 801130e:	2200      	movs	r2, #0
 8011310:	701a      	strb	r2, [r3, #0]
    idx++;
 8011312:	7dfb      	ldrb	r3, [r7, #23]
 8011314:	3301      	adds	r3, #1
 8011316:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8011318:	693b      	ldr	r3, [r7, #16]
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d1e7      	bne.n	80112f0 <USBD_GetString+0x52>
 8011320:	e000      	b.n	8011324 <USBD_GetString+0x86>
    return;
 8011322:	bf00      	nop
  }
}
 8011324:	3718      	adds	r7, #24
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}

0801132a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801132a:	b480      	push	{r7}
 801132c:	b085      	sub	sp, #20
 801132e:	af00      	add	r7, sp, #0
 8011330:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011332:	2300      	movs	r3, #0
 8011334:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801133a:	e005      	b.n	8011348 <USBD_GetLen+0x1e>
  {
    len++;
 801133c:	7bfb      	ldrb	r3, [r7, #15]
 801133e:	3301      	adds	r3, #1
 8011340:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	3301      	adds	r3, #1
 8011346:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011348:	68bb      	ldr	r3, [r7, #8]
 801134a:	781b      	ldrb	r3, [r3, #0]
 801134c:	2b00      	cmp	r3, #0
 801134e:	d1f5      	bne.n	801133c <USBD_GetLen+0x12>
  }

  return len;
 8011350:	7bfb      	ldrb	r3, [r7, #15]
}
 8011352:	4618      	mov	r0, r3
 8011354:	3714      	adds	r7, #20
 8011356:	46bd      	mov	sp, r7
 8011358:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135c:	4770      	bx	lr

0801135e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b084      	sub	sp, #16
 8011362:	af00      	add	r7, sp, #0
 8011364:	60f8      	str	r0, [r7, #12]
 8011366:	60b9      	str	r1, [r7, #8]
 8011368:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	2202      	movs	r2, #2
 801136e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	687a      	ldr	r2, [r7, #4]
 801137c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	68ba      	ldr	r2, [r7, #8]
 8011382:	2100      	movs	r1, #0
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f002 fff6 	bl	8014376 <USBD_LL_Transmit>

  return USBD_OK;
 801138a:	2300      	movs	r3, #0
}
 801138c:	4618      	mov	r0, r3
 801138e:	3710      	adds	r7, #16
 8011390:	46bd      	mov	sp, r7
 8011392:	bd80      	pop	{r7, pc}

08011394 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b084      	sub	sp, #16
 8011398:	af00      	add	r7, sp, #0
 801139a:	60f8      	str	r0, [r7, #12]
 801139c:	60b9      	str	r1, [r7, #8]
 801139e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	68ba      	ldr	r2, [r7, #8]
 80113a4:	2100      	movs	r1, #0
 80113a6:	68f8      	ldr	r0, [r7, #12]
 80113a8:	f002 ffe5 	bl	8014376 <USBD_LL_Transmit>

  return USBD_OK;
 80113ac:	2300      	movs	r3, #0
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}

080113b6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80113b6:	b580      	push	{r7, lr}
 80113b8:	b084      	sub	sp, #16
 80113ba:	af00      	add	r7, sp, #0
 80113bc:	60f8      	str	r0, [r7, #12]
 80113be:	60b9      	str	r1, [r7, #8]
 80113c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	2203      	movs	r2, #3
 80113c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	687a      	ldr	r2, [r7, #4]
 80113ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	687a      	ldr	r2, [r7, #4]
 80113d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	68ba      	ldr	r2, [r7, #8]
 80113de:	2100      	movs	r1, #0
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f002 ffe9 	bl	80143b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80113e6:	2300      	movs	r3, #0
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3710      	adds	r7, #16
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}

080113f0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	68ba      	ldr	r2, [r7, #8]
 8011400:	2100      	movs	r1, #0
 8011402:	68f8      	ldr	r0, [r7, #12]
 8011404:	f002 ffd8 	bl	80143b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}

08011412 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011412:	b580      	push	{r7, lr}
 8011414:	b082      	sub	sp, #8
 8011416:	af00      	add	r7, sp, #0
 8011418:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801141a:	687b      	ldr	r3, [r7, #4]
 801141c:	2204      	movs	r2, #4
 801141e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011422:	2300      	movs	r3, #0
 8011424:	2200      	movs	r2, #0
 8011426:	2100      	movs	r1, #0
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f002 ffa4 	bl	8014376 <USBD_LL_Transmit>

  return USBD_OK;
 801142e:	2300      	movs	r3, #0
}
 8011430:	4618      	mov	r0, r3
 8011432:	3708      	adds	r7, #8
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b082      	sub	sp, #8
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2205      	movs	r2, #5
 8011444:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011448:	2300      	movs	r3, #0
 801144a:	2200      	movs	r2, #0
 801144c:	2100      	movs	r1, #0
 801144e:	6878      	ldr	r0, [r7, #4]
 8011450:	f002 ffb2 	bl	80143b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3708      	adds	r7, #8
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
	...

08011460 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011460:	b480      	push	{r7}
 8011462:	b087      	sub	sp, #28
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	4613      	mov	r3, r2
 801146c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801146e:	2301      	movs	r3, #1
 8011470:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011472:	2300      	movs	r3, #0
 8011474:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011476:	4b1f      	ldr	r3, [pc, #124]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011478:	7a5b      	ldrb	r3, [r3, #9]
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	d131      	bne.n	80114e4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011480:	4b1c      	ldr	r3, [pc, #112]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011482:	7a5b      	ldrb	r3, [r3, #9]
 8011484:	b2db      	uxtb	r3, r3
 8011486:	461a      	mov	r2, r3
 8011488:	4b1a      	ldr	r3, [pc, #104]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 801148a:	2100      	movs	r1, #0
 801148c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801148e:	4b19      	ldr	r3, [pc, #100]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011490:	7a5b      	ldrb	r3, [r3, #9]
 8011492:	b2db      	uxtb	r3, r3
 8011494:	4a17      	ldr	r2, [pc, #92]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	68fa      	ldr	r2, [r7, #12]
 801149c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801149e:	4b15      	ldr	r3, [pc, #84]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114a0:	7a5b      	ldrb	r3, [r3, #9]
 80114a2:	b2db      	uxtb	r3, r3
 80114a4:	461a      	mov	r2, r3
 80114a6:	4b13      	ldr	r3, [pc, #76]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114a8:	4413      	add	r3, r2
 80114aa:	79fa      	ldrb	r2, [r7, #7]
 80114ac:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80114ae:	4b11      	ldr	r3, [pc, #68]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114b0:	7a5b      	ldrb	r3, [r3, #9]
 80114b2:	b2db      	uxtb	r3, r3
 80114b4:	1c5a      	adds	r2, r3, #1
 80114b6:	b2d1      	uxtb	r1, r2
 80114b8:	4a0e      	ldr	r2, [pc, #56]	; (80114f4 <FATFS_LinkDriverEx+0x94>)
 80114ba:	7251      	strb	r1, [r2, #9]
 80114bc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80114be:	7dbb      	ldrb	r3, [r7, #22]
 80114c0:	3330      	adds	r3, #48	; 0x30
 80114c2:	b2da      	uxtb	r2, r3
 80114c4:	68bb      	ldr	r3, [r7, #8]
 80114c6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	3301      	adds	r3, #1
 80114cc:	223a      	movs	r2, #58	; 0x3a
 80114ce:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	3302      	adds	r3, #2
 80114d4:	222f      	movs	r2, #47	; 0x2f
 80114d6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	3303      	adds	r3, #3
 80114dc:	2200      	movs	r2, #0
 80114de:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80114e0:	2300      	movs	r3, #0
 80114e2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80114e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	371c      	adds	r7, #28
 80114ea:	46bd      	mov	sp, r7
 80114ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114f0:	4770      	bx	lr
 80114f2:	bf00      	nop
 80114f4:	20000890 	.word	0x20000890

080114f8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011502:	2200      	movs	r2, #0
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	6878      	ldr	r0, [r7, #4]
 8011508:	f7ff ffaa 	bl	8011460 <FATFS_LinkDriverEx>
 801150c:	4603      	mov	r3, r0
}
 801150e:	4618      	mov	r0, r3
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}

08011516 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011516:	b480      	push	{r7}
 8011518:	b085      	sub	sp, #20
 801151a:	af00      	add	r7, sp, #0
 801151c:	4603      	mov	r3, r0
 801151e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011520:	2300      	movs	r3, #0
 8011522:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011528:	2b84      	cmp	r3, #132	; 0x84
 801152a:	d005      	beq.n	8011538 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801152c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4413      	add	r3, r2
 8011534:	3303      	adds	r3, #3
 8011536:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011538:	68fb      	ldr	r3, [r7, #12]
}
 801153a:	4618      	mov	r0, r3
 801153c:	3714      	adds	r7, #20
 801153e:	46bd      	mov	sp, r7
 8011540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011544:	4770      	bx	lr

08011546 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011546:	b480      	push	{r7}
 8011548:	b083      	sub	sp, #12
 801154a:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801154c:	f3ef 8305 	mrs	r3, IPSR
 8011550:	607b      	str	r3, [r7, #4]
  return(result);
 8011552:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011554:	2b00      	cmp	r3, #0
 8011556:	bf14      	ite	ne
 8011558:	2301      	movne	r3, #1
 801155a:	2300      	moveq	r3, #0
 801155c:	b2db      	uxtb	r3, r3
}
 801155e:	4618      	mov	r0, r3
 8011560:	370c      	adds	r7, #12
 8011562:	46bd      	mov	sp, r7
 8011564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011568:	4770      	bx	lr

0801156a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801156e:	f001 f927 	bl	80127c0 <vTaskStartScheduler>
  
  return osOK;
 8011572:	2300      	movs	r3, #0
}
 8011574:	4618      	mov	r0, r3
 8011576:	bd80      	pop	{r7, pc}

08011578 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011578:	b580      	push	{r7, lr}
 801157a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801157c:	f7ff ffe3 	bl	8011546 <inHandlerMode>
 8011580:	4603      	mov	r3, r0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d003      	beq.n	801158e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011586:	f001 fa33 	bl	80129f0 <xTaskGetTickCountFromISR>
 801158a:	4603      	mov	r3, r0
 801158c:	e002      	b.n	8011594 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801158e:	f001 fa1f 	bl	80129d0 <xTaskGetTickCount>
 8011592:	4603      	mov	r3, r0
  }
}
 8011594:	4618      	mov	r0, r3
 8011596:	bd80      	pop	{r7, pc}

08011598 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011598:	b5f0      	push	{r4, r5, r6, r7, lr}
 801159a:	b089      	sub	sp, #36	; 0x24
 801159c:	af04      	add	r7, sp, #16
 801159e:	6078      	str	r0, [r7, #4]
 80115a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	695b      	ldr	r3, [r3, #20]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d020      	beq.n	80115ec <osThreadCreate+0x54>
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	699b      	ldr	r3, [r3, #24]
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d01c      	beq.n	80115ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	685c      	ldr	r4, [r3, #4]
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	681d      	ldr	r5, [r3, #0]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	691e      	ldr	r6, [r3, #16]
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80115c4:	4618      	mov	r0, r3
 80115c6:	f7ff ffa6 	bl	8011516 <makeFreeRtosPriority>
 80115ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	695b      	ldr	r3, [r3, #20]
 80115d0:	687a      	ldr	r2, [r7, #4]
 80115d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115d4:	9202      	str	r2, [sp, #8]
 80115d6:	9301      	str	r3, [sp, #4]
 80115d8:	9100      	str	r1, [sp, #0]
 80115da:	683b      	ldr	r3, [r7, #0]
 80115dc:	4632      	mov	r2, r6
 80115de:	4629      	mov	r1, r5
 80115e0:	4620      	mov	r0, r4
 80115e2:	f000 ff2a 	bl	801243a <xTaskCreateStatic>
 80115e6:	4603      	mov	r3, r0
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	e01c      	b.n	8011626 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	685c      	ldr	r4, [r3, #4]
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115f8:	b29e      	uxth	r6, r3
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011600:	4618      	mov	r0, r3
 8011602:	f7ff ff88 	bl	8011516 <makeFreeRtosPriority>
 8011606:	4602      	mov	r2, r0
 8011608:	f107 030c 	add.w	r3, r7, #12
 801160c:	9301      	str	r3, [sp, #4]
 801160e:	9200      	str	r2, [sp, #0]
 8011610:	683b      	ldr	r3, [r7, #0]
 8011612:	4632      	mov	r2, r6
 8011614:	4629      	mov	r1, r5
 8011616:	4620      	mov	r0, r4
 8011618:	f000 ff69 	bl	80124ee <xTaskCreate>
 801161c:	4603      	mov	r3, r0
 801161e:	2b01      	cmp	r3, #1
 8011620:	d001      	beq.n	8011626 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011622:	2300      	movs	r3, #0
 8011624:	e000      	b.n	8011628 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011626:	68fb      	ldr	r3, [r7, #12]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3714      	adds	r7, #20
 801162c:	46bd      	mov	sp, r7
 801162e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011630 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b084      	sub	sp, #16
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d001      	beq.n	8011646 <osDelay+0x16>
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	e000      	b.n	8011648 <osDelay+0x18>
 8011646:	2301      	movs	r3, #1
 8011648:	4618      	mov	r0, r3
 801164a:	f001 f885 	bl	8012758 <vTaskDelay>
  
  return osOK;
 801164e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011650:	4618      	mov	r0, r3
 8011652:	3710      	adds	r7, #16
 8011654:	46bd      	mov	sp, r7
 8011656:	bd80      	pop	{r7, pc}

08011658 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011658:	b590      	push	{r4, r7, lr}
 801165a:	b085      	sub	sp, #20
 801165c:	af02      	add	r7, sp, #8
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	2b00      	cmp	r3, #0
 8011668:	d012      	beq.n	8011690 <osMessageCreate+0x38>
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	68db      	ldr	r3, [r3, #12]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d00e      	beq.n	8011690 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	6818      	ldr	r0, [r3, #0]
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	6859      	ldr	r1, [r3, #4]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	689a      	ldr	r2, [r3, #8]
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	68dc      	ldr	r4, [r3, #12]
 8011682:	2300      	movs	r3, #0
 8011684:	9300      	str	r3, [sp, #0]
 8011686:	4623      	mov	r3, r4
 8011688:	f000 f9ec 	bl	8011a64 <xQueueGenericCreateStatic>
 801168c:	4603      	mov	r3, r0
 801168e:	e008      	b.n	80116a2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6818      	ldr	r0, [r3, #0]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	2200      	movs	r2, #0
 801169a:	4619      	mov	r1, r3
 801169c:	f000 fa55 	bl	8011b4a <xQueueGenericCreate>
 80116a0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	370c      	adds	r7, #12
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd90      	pop	{r4, r7, pc}
	...

080116ac <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b086      	sub	sp, #24
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	60f8      	str	r0, [r7, #12]
 80116b4:	60b9      	str	r1, [r7, #8]
 80116b6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80116b8:	2300      	movs	r3, #0
 80116ba:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d101      	bne.n	80116ca <osMessagePut+0x1e>
    ticks = 1;
 80116c6:	2301      	movs	r3, #1
 80116c8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80116ca:	f7ff ff3c 	bl	8011546 <inHandlerMode>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d018      	beq.n	8011706 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80116d4:	f107 0210 	add.w	r2, r7, #16
 80116d8:	f107 0108 	add.w	r1, r7, #8
 80116dc:	2300      	movs	r3, #0
 80116de:	68f8      	ldr	r0, [r7, #12]
 80116e0:	f000 fb8c 	bl	8011dfc <xQueueGenericSendFromISR>
 80116e4:	4603      	mov	r3, r0
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d001      	beq.n	80116ee <osMessagePut+0x42>
      return osErrorOS;
 80116ea:	23ff      	movs	r3, #255	; 0xff
 80116ec:	e018      	b.n	8011720 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	2b00      	cmp	r3, #0
 80116f2:	d014      	beq.n	801171e <osMessagePut+0x72>
 80116f4:	4b0c      	ldr	r3, [pc, #48]	; (8011728 <osMessagePut+0x7c>)
 80116f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116fa:	601a      	str	r2, [r3, #0]
 80116fc:	f3bf 8f4f 	dsb	sy
 8011700:	f3bf 8f6f 	isb	sy
 8011704:	e00b      	b.n	801171e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011706:	f107 0108 	add.w	r1, r7, #8
 801170a:	2300      	movs	r3, #0
 801170c:	697a      	ldr	r2, [r7, #20]
 801170e:	68f8      	ldr	r0, [r7, #12]
 8011710:	f000 fa7a 	bl	8011c08 <xQueueGenericSend>
 8011714:	4603      	mov	r3, r0
 8011716:	2b01      	cmp	r3, #1
 8011718:	d001      	beq.n	801171e <osMessagePut+0x72>
      return osErrorOS;
 801171a:	23ff      	movs	r3, #255	; 0xff
 801171c:	e000      	b.n	8011720 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801171e:	2300      	movs	r3, #0
}
 8011720:	4618      	mov	r0, r3
 8011722:	3718      	adds	r7, #24
 8011724:	46bd      	mov	sp, r7
 8011726:	bd80      	pop	{r7, pc}
 8011728:	e000ed04 	.word	0xe000ed04

0801172c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801172c:	b590      	push	{r4, r7, lr}
 801172e:	b08b      	sub	sp, #44	; 0x2c
 8011730:	af00      	add	r7, sp, #0
 8011732:	60f8      	str	r0, [r7, #12]
 8011734:	60b9      	str	r1, [r7, #8]
 8011736:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011738:	68bb      	ldr	r3, [r7, #8]
 801173a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 801173c:	2300      	movs	r3, #0
 801173e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d10a      	bne.n	801175c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011746:	2380      	movs	r3, #128	; 0x80
 8011748:	617b      	str	r3, [r7, #20]
    return event;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	461c      	mov	r4, r3
 801174e:	f107 0314 	add.w	r3, r7, #20
 8011752:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801175a:	e054      	b.n	8011806 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 801175c:	2300      	movs	r3, #0
 801175e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011760:	2300      	movs	r3, #0
 8011762:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	f1b3 3fff 	cmp.w	r3, #4294967295
 801176a:	d103      	bne.n	8011774 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 801176c:	f04f 33ff 	mov.w	r3, #4294967295
 8011770:	627b      	str	r3, [r7, #36]	; 0x24
 8011772:	e009      	b.n	8011788 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	2b00      	cmp	r3, #0
 8011778:	d006      	beq.n	8011788 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801177e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011780:	2b00      	cmp	r3, #0
 8011782:	d101      	bne.n	8011788 <osMessageGet+0x5c>
      ticks = 1;
 8011784:	2301      	movs	r3, #1
 8011786:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011788:	f7ff fedd 	bl	8011546 <inHandlerMode>
 801178c:	4603      	mov	r3, r0
 801178e:	2b00      	cmp	r3, #0
 8011790:	d01c      	beq.n	80117cc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8011792:	f107 0220 	add.w	r2, r7, #32
 8011796:	f107 0314 	add.w	r3, r7, #20
 801179a:	3304      	adds	r3, #4
 801179c:	4619      	mov	r1, r3
 801179e:	68b8      	ldr	r0, [r7, #8]
 80117a0:	f000 fc9c 	bl	80120dc <xQueueReceiveFromISR>
 80117a4:	4603      	mov	r3, r0
 80117a6:	2b01      	cmp	r3, #1
 80117a8:	d102      	bne.n	80117b0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80117aa:	2310      	movs	r3, #16
 80117ac:	617b      	str	r3, [r7, #20]
 80117ae:	e001      	b.n	80117b4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80117b0:	2300      	movs	r3, #0
 80117b2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80117b4:	6a3b      	ldr	r3, [r7, #32]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d01d      	beq.n	80117f6 <osMessageGet+0xca>
 80117ba:	4b15      	ldr	r3, [pc, #84]	; (8011810 <osMessageGet+0xe4>)
 80117bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117c0:	601a      	str	r2, [r3, #0]
 80117c2:	f3bf 8f4f 	dsb	sy
 80117c6:	f3bf 8f6f 	isb	sy
 80117ca:	e014      	b.n	80117f6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80117cc:	f107 0314 	add.w	r3, r7, #20
 80117d0:	3304      	adds	r3, #4
 80117d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117d4:	4619      	mov	r1, r3
 80117d6:	68b8      	ldr	r0, [r7, #8]
 80117d8:	f000 fba4 	bl	8011f24 <xQueueReceive>
 80117dc:	4603      	mov	r3, r0
 80117de:	2b01      	cmp	r3, #1
 80117e0:	d102      	bne.n	80117e8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80117e2:	2310      	movs	r3, #16
 80117e4:	617b      	str	r3, [r7, #20]
 80117e6:	e006      	b.n	80117f6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80117e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d101      	bne.n	80117f2 <osMessageGet+0xc6>
 80117ee:	2300      	movs	r3, #0
 80117f0:	e000      	b.n	80117f4 <osMessageGet+0xc8>
 80117f2:	2340      	movs	r3, #64	; 0x40
 80117f4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	461c      	mov	r4, r3
 80117fa:	f107 0314 	add.w	r3, r7, #20
 80117fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011806:	68f8      	ldr	r0, [r7, #12]
 8011808:	372c      	adds	r7, #44	; 0x2c
 801180a:	46bd      	mov	sp, r7
 801180c:	bd90      	pop	{r4, r7, pc}
 801180e:	bf00      	nop
 8011810:	e000ed04 	.word	0xe000ed04

08011814 <osMessageAvailableSpace>:
* @brief  Get the available space in a message queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval available space in a message queue.
*/
uint32_t osMessageAvailableSpace(osMessageQId queue_id)  
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  return uxQueueSpacesAvailable(queue_id);
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f000 fcda 	bl	80121d6 <uxQueueSpacesAvailable>
 8011822:	4603      	mov	r3, r0
}
 8011824:	4618      	mov	r0, r3
 8011826:	3708      	adds	r7, #8
 8011828:	46bd      	mov	sp, r7
 801182a:	bd80      	pop	{r7, pc}

0801182c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801182c:	b480      	push	{r7}
 801182e:	b083      	sub	sp, #12
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	f103 0208 	add.w	r2, r3, #8
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f04f 32ff 	mov.w	r2, #4294967295
 8011844:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f103 0208 	add.w	r2, r3, #8
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	f103 0208 	add.w	r2, r3, #8
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2200      	movs	r2, #0
 801185e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011860:	bf00      	nop
 8011862:	370c      	adds	r7, #12
 8011864:	46bd      	mov	sp, r7
 8011866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186a:	4770      	bx	lr

0801186c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2200      	movs	r2, #0
 8011878:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801187a:	bf00      	nop
 801187c:	370c      	adds	r7, #12
 801187e:	46bd      	mov	sp, r7
 8011880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011884:	4770      	bx	lr

08011886 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011886:	b480      	push	{r7}
 8011888:	b085      	sub	sp, #20
 801188a:	af00      	add	r7, sp, #0
 801188c:	6078      	str	r0, [r7, #4]
 801188e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	685b      	ldr	r3, [r3, #4]
 8011894:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	68fa      	ldr	r2, [r7, #12]
 801189a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	689a      	ldr	r2, [r3, #8]
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	689b      	ldr	r3, [r3, #8]
 80118a8:	683a      	ldr	r2, [r7, #0]
 80118aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	683a      	ldr	r2, [r7, #0]
 80118b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80118b2:	683b      	ldr	r3, [r7, #0]
 80118b4:	687a      	ldr	r2, [r7, #4]
 80118b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	1c5a      	adds	r2, r3, #1
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	601a      	str	r2, [r3, #0]
}
 80118c2:	bf00      	nop
 80118c4:	3714      	adds	r7, #20
 80118c6:	46bd      	mov	sp, r7
 80118c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118cc:	4770      	bx	lr

080118ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80118ce:	b480      	push	{r7}
 80118d0:	b085      	sub	sp, #20
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
 80118d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118e4:	d103      	bne.n	80118ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	691b      	ldr	r3, [r3, #16]
 80118ea:	60fb      	str	r3, [r7, #12]
 80118ec:	e00c      	b.n	8011908 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	3308      	adds	r3, #8
 80118f2:	60fb      	str	r3, [r7, #12]
 80118f4:	e002      	b.n	80118fc <vListInsert+0x2e>
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	685b      	ldr	r3, [r3, #4]
 80118fa:	60fb      	str	r3, [r7, #12]
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	685b      	ldr	r3, [r3, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	68ba      	ldr	r2, [r7, #8]
 8011904:	429a      	cmp	r2, r3
 8011906:	d2f6      	bcs.n	80118f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	685a      	ldr	r2, [r3, #4]
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	683a      	ldr	r2, [r7, #0]
 8011916:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	68fa      	ldr	r2, [r7, #12]
 801191c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	683a      	ldr	r2, [r7, #0]
 8011922:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011924:	683b      	ldr	r3, [r7, #0]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	1c5a      	adds	r2, r3, #1
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	601a      	str	r2, [r3, #0]
}
 8011934:	bf00      	nop
 8011936:	3714      	adds	r7, #20
 8011938:	46bd      	mov	sp, r7
 801193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193e:	4770      	bx	lr

08011940 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011940:	b480      	push	{r7}
 8011942:	b085      	sub	sp, #20
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	691b      	ldr	r3, [r3, #16]
 801194c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	687a      	ldr	r2, [r7, #4]
 8011954:	6892      	ldr	r2, [r2, #8]
 8011956:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	689b      	ldr	r3, [r3, #8]
 801195c:	687a      	ldr	r2, [r7, #4]
 801195e:	6852      	ldr	r2, [r2, #4]
 8011960:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	685b      	ldr	r3, [r3, #4]
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	429a      	cmp	r2, r3
 801196a:	d103      	bne.n	8011974 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	689a      	ldr	r2, [r3, #8]
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	2200      	movs	r2, #0
 8011978:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	1e5a      	subs	r2, r3, #1
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	681b      	ldr	r3, [r3, #0]
}
 8011988:	4618      	mov	r0, r3
 801198a:	3714      	adds	r7, #20
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011994:	b580      	push	{r7, lr}
 8011996:	b084      	sub	sp, #16
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d109      	bne.n	80119bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80119a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119ac:	f383 8811 	msr	BASEPRI, r3
 80119b0:	f3bf 8f6f 	isb	sy
 80119b4:	f3bf 8f4f 	dsb	sy
 80119b8:	60bb      	str	r3, [r7, #8]
 80119ba:	e7fe      	b.n	80119ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80119bc:	f001 fd46 	bl	801344c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	681a      	ldr	r2, [r3, #0]
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119c8:	68f9      	ldr	r1, [r7, #12]
 80119ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119cc:	fb01 f303 	mul.w	r3, r1, r3
 80119d0:	441a      	add	r2, r3
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2200      	movs	r2, #0
 80119da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	681a      	ldr	r2, [r3, #0]
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	681a      	ldr	r2, [r3, #0]
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119ec:	3b01      	subs	r3, #1
 80119ee:	68f9      	ldr	r1, [r7, #12]
 80119f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80119f2:	fb01 f303 	mul.w	r3, r1, r3
 80119f6:	441a      	add	r2, r3
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80119fc:	68fb      	ldr	r3, [r7, #12]
 80119fe:	22ff      	movs	r2, #255	; 0xff
 8011a00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	22ff      	movs	r2, #255	; 0xff
 8011a08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011a0c:	683b      	ldr	r3, [r7, #0]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d114      	bne.n	8011a3c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	691b      	ldr	r3, [r3, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d01a      	beq.n	8011a50 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	3310      	adds	r3, #16
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f001 f92e 	bl	8012c80 <xTaskRemoveFromEventList>
 8011a24:	4603      	mov	r3, r0
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d012      	beq.n	8011a50 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011a2a:	4b0d      	ldr	r3, [pc, #52]	; (8011a60 <xQueueGenericReset+0xcc>)
 8011a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a30:	601a      	str	r2, [r3, #0]
 8011a32:	f3bf 8f4f 	dsb	sy
 8011a36:	f3bf 8f6f 	isb	sy
 8011a3a:	e009      	b.n	8011a50 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	3310      	adds	r3, #16
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7ff fef3 	bl	801182c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	3324      	adds	r3, #36	; 0x24
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7ff feee 	bl	801182c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a50:	f001 fd2a 	bl	80134a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a54:	2301      	movs	r3, #1
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
 8011a5e:	bf00      	nop
 8011a60:	e000ed04 	.word	0xe000ed04

08011a64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b08e      	sub	sp, #56	; 0x38
 8011a68:	af02      	add	r7, sp, #8
 8011a6a:	60f8      	str	r0, [r7, #12]
 8011a6c:	60b9      	str	r1, [r7, #8]
 8011a6e:	607a      	str	r2, [r7, #4]
 8011a70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d109      	bne.n	8011a8c <xQueueGenericCreateStatic+0x28>
 8011a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a7c:	f383 8811 	msr	BASEPRI, r3
 8011a80:	f3bf 8f6f 	isb	sy
 8011a84:	f3bf 8f4f 	dsb	sy
 8011a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8011a8a:	e7fe      	b.n	8011a8a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011a8c:	683b      	ldr	r3, [r7, #0]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d109      	bne.n	8011aa6 <xQueueGenericCreateStatic+0x42>
 8011a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a96:	f383 8811 	msr	BASEPRI, r3
 8011a9a:	f3bf 8f6f 	isb	sy
 8011a9e:	f3bf 8f4f 	dsb	sy
 8011aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8011aa4:	e7fe      	b.n	8011aa4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d002      	beq.n	8011ab2 <xQueueGenericCreateStatic+0x4e>
 8011aac:	68bb      	ldr	r3, [r7, #8]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d001      	beq.n	8011ab6 <xQueueGenericCreateStatic+0x52>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e000      	b.n	8011ab8 <xQueueGenericCreateStatic+0x54>
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d109      	bne.n	8011ad0 <xQueueGenericCreateStatic+0x6c>
 8011abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ac0:	f383 8811 	msr	BASEPRI, r3
 8011ac4:	f3bf 8f6f 	isb	sy
 8011ac8:	f3bf 8f4f 	dsb	sy
 8011acc:	623b      	str	r3, [r7, #32]
 8011ace:	e7fe      	b.n	8011ace <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d102      	bne.n	8011adc <xQueueGenericCreateStatic+0x78>
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d101      	bne.n	8011ae0 <xQueueGenericCreateStatic+0x7c>
 8011adc:	2301      	movs	r3, #1
 8011ade:	e000      	b.n	8011ae2 <xQueueGenericCreateStatic+0x7e>
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d109      	bne.n	8011afa <xQueueGenericCreateStatic+0x96>
 8011ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aea:	f383 8811 	msr	BASEPRI, r3
 8011aee:	f3bf 8f6f 	isb	sy
 8011af2:	f3bf 8f4f 	dsb	sy
 8011af6:	61fb      	str	r3, [r7, #28]
 8011af8:	e7fe      	b.n	8011af8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011afa:	2348      	movs	r3, #72	; 0x48
 8011afc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011afe:	697b      	ldr	r3, [r7, #20]
 8011b00:	2b48      	cmp	r3, #72	; 0x48
 8011b02:	d009      	beq.n	8011b18 <xQueueGenericCreateStatic+0xb4>
 8011b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b08:	f383 8811 	msr	BASEPRI, r3
 8011b0c:	f3bf 8f6f 	isb	sy
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	61bb      	str	r3, [r7, #24]
 8011b16:	e7fe      	b.n	8011b16 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011b18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d00d      	beq.n	8011b40 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b26:	2201      	movs	r2, #1
 8011b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b2c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	4613      	mov	r3, r2
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	68b9      	ldr	r1, [r7, #8]
 8011b3a:	68f8      	ldr	r0, [r7, #12]
 8011b3c:	f000 f844 	bl	8011bc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3730      	adds	r7, #48	; 0x30
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b08a      	sub	sp, #40	; 0x28
 8011b4e:	af02      	add	r7, sp, #8
 8011b50:	60f8      	str	r0, [r7, #12]
 8011b52:	60b9      	str	r1, [r7, #8]
 8011b54:	4613      	mov	r3, r2
 8011b56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d109      	bne.n	8011b72 <xQueueGenericCreate+0x28>
 8011b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b62:	f383 8811 	msr	BASEPRI, r3
 8011b66:	f3bf 8f6f 	isb	sy
 8011b6a:	f3bf 8f4f 	dsb	sy
 8011b6e:	613b      	str	r3, [r7, #16]
 8011b70:	e7fe      	b.n	8011b70 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011b72:	68bb      	ldr	r3, [r7, #8]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d102      	bne.n	8011b7e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	61fb      	str	r3, [r7, #28]
 8011b7c:	e004      	b.n	8011b88 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	68ba      	ldr	r2, [r7, #8]
 8011b82:	fb02 f303 	mul.w	r3, r2, r3
 8011b86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b88:	69fb      	ldr	r3, [r7, #28]
 8011b8a:	3348      	adds	r3, #72	; 0x48
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f001 fd77 	bl	8013680 <pvPortMalloc>
 8011b92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011b94:	69bb      	ldr	r3, [r7, #24]
 8011b96:	2b00      	cmp	r3, #0
 8011b98:	d011      	beq.n	8011bbe <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011b9a:	69bb      	ldr	r3, [r7, #24]
 8011b9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b9e:	697b      	ldr	r3, [r7, #20]
 8011ba0:	3348      	adds	r3, #72	; 0x48
 8011ba2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011ba4:	69bb      	ldr	r3, [r7, #24]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011bac:	79fa      	ldrb	r2, [r7, #7]
 8011bae:	69bb      	ldr	r3, [r7, #24]
 8011bb0:	9300      	str	r3, [sp, #0]
 8011bb2:	4613      	mov	r3, r2
 8011bb4:	697a      	ldr	r2, [r7, #20]
 8011bb6:	68b9      	ldr	r1, [r7, #8]
 8011bb8:	68f8      	ldr	r0, [r7, #12]
 8011bba:	f000 f805 	bl	8011bc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011bbe:	69bb      	ldr	r3, [r7, #24]
	}
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	3720      	adds	r7, #32
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	bd80      	pop	{r7, pc}

08011bc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b084      	sub	sp, #16
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	60f8      	str	r0, [r7, #12]
 8011bd0:	60b9      	str	r1, [r7, #8]
 8011bd2:	607a      	str	r2, [r7, #4]
 8011bd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d103      	bne.n	8011be4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011bdc:	69bb      	ldr	r3, [r7, #24]
 8011bde:	69ba      	ldr	r2, [r7, #24]
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	e002      	b.n	8011bea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011be4:	69bb      	ldr	r3, [r7, #24]
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	68ba      	ldr	r2, [r7, #8]
 8011bf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011bf6:	2101      	movs	r1, #1
 8011bf8:	69b8      	ldr	r0, [r7, #24]
 8011bfa:	f7ff fecb 	bl	8011994 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011bfe:	bf00      	nop
 8011c00:	3710      	adds	r7, #16
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
	...

08011c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b08e      	sub	sp, #56	; 0x38
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	60f8      	str	r0, [r7, #12]
 8011c10:	60b9      	str	r1, [r7, #8]
 8011c12:	607a      	str	r2, [r7, #4]
 8011c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011c16:	2300      	movs	r3, #0
 8011c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d109      	bne.n	8011c38 <xQueueGenericSend+0x30>
 8011c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c28:	f383 8811 	msr	BASEPRI, r3
 8011c2c:	f3bf 8f6f 	isb	sy
 8011c30:	f3bf 8f4f 	dsb	sy
 8011c34:	62bb      	str	r3, [r7, #40]	; 0x28
 8011c36:	e7fe      	b.n	8011c36 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c38:	68bb      	ldr	r3, [r7, #8]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d103      	bne.n	8011c46 <xQueueGenericSend+0x3e>
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d101      	bne.n	8011c4a <xQueueGenericSend+0x42>
 8011c46:	2301      	movs	r3, #1
 8011c48:	e000      	b.n	8011c4c <xQueueGenericSend+0x44>
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d109      	bne.n	8011c64 <xQueueGenericSend+0x5c>
 8011c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c54:	f383 8811 	msr	BASEPRI, r3
 8011c58:	f3bf 8f6f 	isb	sy
 8011c5c:	f3bf 8f4f 	dsb	sy
 8011c60:	627b      	str	r3, [r7, #36]	; 0x24
 8011c62:	e7fe      	b.n	8011c62 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	2b02      	cmp	r3, #2
 8011c68:	d103      	bne.n	8011c72 <xQueueGenericSend+0x6a>
 8011c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c6e:	2b01      	cmp	r3, #1
 8011c70:	d101      	bne.n	8011c76 <xQueueGenericSend+0x6e>
 8011c72:	2301      	movs	r3, #1
 8011c74:	e000      	b.n	8011c78 <xQueueGenericSend+0x70>
 8011c76:	2300      	movs	r3, #0
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d109      	bne.n	8011c90 <xQueueGenericSend+0x88>
 8011c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c80:	f383 8811 	msr	BASEPRI, r3
 8011c84:	f3bf 8f6f 	isb	sy
 8011c88:	f3bf 8f4f 	dsb	sy
 8011c8c:	623b      	str	r3, [r7, #32]
 8011c8e:	e7fe      	b.n	8011c8e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011c90:	f001 f9ac 	bl	8012fec <xTaskGetSchedulerState>
 8011c94:	4603      	mov	r3, r0
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d102      	bne.n	8011ca0 <xQueueGenericSend+0x98>
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d101      	bne.n	8011ca4 <xQueueGenericSend+0x9c>
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	e000      	b.n	8011ca6 <xQueueGenericSend+0x9e>
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d109      	bne.n	8011cbe <xQueueGenericSend+0xb6>
 8011caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cae:	f383 8811 	msr	BASEPRI, r3
 8011cb2:	f3bf 8f6f 	isb	sy
 8011cb6:	f3bf 8f4f 	dsb	sy
 8011cba:	61fb      	str	r3, [r7, #28]
 8011cbc:	e7fe      	b.n	8011cbc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011cbe:	f001 fbc5 	bl	801344c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011cca:	429a      	cmp	r2, r3
 8011ccc:	d302      	bcc.n	8011cd4 <xQueueGenericSend+0xcc>
 8011cce:	683b      	ldr	r3, [r7, #0]
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d129      	bne.n	8011d28 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011cd4:	683a      	ldr	r2, [r7, #0]
 8011cd6:	68b9      	ldr	r1, [r7, #8]
 8011cd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cda:	f000 fa9e 	bl	801221a <prvCopyDataToQueue>
 8011cde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d010      	beq.n	8011d0a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cea:	3324      	adds	r3, #36	; 0x24
 8011cec:	4618      	mov	r0, r3
 8011cee:	f000 ffc7 	bl	8012c80 <xTaskRemoveFromEventList>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d013      	beq.n	8011d20 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011cf8:	4b3f      	ldr	r3, [pc, #252]	; (8011df8 <xQueueGenericSend+0x1f0>)
 8011cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cfe:	601a      	str	r2, [r3, #0]
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	f3bf 8f6f 	isb	sy
 8011d08:	e00a      	b.n	8011d20 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d007      	beq.n	8011d20 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011d10:	4b39      	ldr	r3, [pc, #228]	; (8011df8 <xQueueGenericSend+0x1f0>)
 8011d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d16:	601a      	str	r2, [r3, #0]
 8011d18:	f3bf 8f4f 	dsb	sy
 8011d1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011d20:	f001 fbc2 	bl	80134a8 <vPortExitCritical>
				return pdPASS;
 8011d24:	2301      	movs	r3, #1
 8011d26:	e063      	b.n	8011df0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d103      	bne.n	8011d36 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011d2e:	f001 fbbb 	bl	80134a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011d32:	2300      	movs	r3, #0
 8011d34:	e05c      	b.n	8011df0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d106      	bne.n	8011d4a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011d3c:	f107 0314 	add.w	r3, r7, #20
 8011d40:	4618      	mov	r0, r3
 8011d42:	f000 ffff 	bl	8012d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011d46:	2301      	movs	r3, #1
 8011d48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011d4a:	f001 fbad 	bl	80134a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011d4e:	f000 fd95 	bl	801287c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011d52:	f001 fb7b 	bl	801344c <vPortEnterCritical>
 8011d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011d5c:	b25b      	sxtb	r3, r3
 8011d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d62:	d103      	bne.n	8011d6c <xQueueGenericSend+0x164>
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d72:	b25b      	sxtb	r3, r3
 8011d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d78:	d103      	bne.n	8011d82 <xQueueGenericSend+0x17a>
 8011d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011d82:	f001 fb91 	bl	80134a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011d86:	1d3a      	adds	r2, r7, #4
 8011d88:	f107 0314 	add.w	r3, r7, #20
 8011d8c:	4611      	mov	r1, r2
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f000 ffee 	bl	8012d70 <xTaskCheckForTimeOut>
 8011d94:	4603      	mov	r3, r0
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d124      	bne.n	8011de4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011d9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d9c:	f000 fb35 	bl	801240a <prvIsQueueFull>
 8011da0:	4603      	mov	r3, r0
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	d018      	beq.n	8011dd8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011da8:	3310      	adds	r3, #16
 8011daa:	687a      	ldr	r2, [r7, #4]
 8011dac:	4611      	mov	r1, r2
 8011dae:	4618      	mov	r0, r3
 8011db0:	f000 ff42 	bl	8012c38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011db4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011db6:	f000 fac0 	bl	801233a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011dba:	f000 fd6d 	bl	8012898 <xTaskResumeAll>
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	f47f af7c 	bne.w	8011cbe <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8011dc6:	4b0c      	ldr	r3, [pc, #48]	; (8011df8 <xQueueGenericSend+0x1f0>)
 8011dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dcc:	601a      	str	r2, [r3, #0]
 8011dce:	f3bf 8f4f 	dsb	sy
 8011dd2:	f3bf 8f6f 	isb	sy
 8011dd6:	e772      	b.n	8011cbe <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dda:	f000 faae 	bl	801233a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011dde:	f000 fd5b 	bl	8012898 <xTaskResumeAll>
 8011de2:	e76c      	b.n	8011cbe <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011de6:	f000 faa8 	bl	801233a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011dea:	f000 fd55 	bl	8012898 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011dee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3738      	adds	r7, #56	; 0x38
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}
 8011df8:	e000ed04 	.word	0xe000ed04

08011dfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b08e      	sub	sp, #56	; 0x38
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d109      	bne.n	8011e28 <xQueueGenericSendFromISR+0x2c>
 8011e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e18:	f383 8811 	msr	BASEPRI, r3
 8011e1c:	f3bf 8f6f 	isb	sy
 8011e20:	f3bf 8f4f 	dsb	sy
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24
 8011e26:	e7fe      	b.n	8011e26 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d103      	bne.n	8011e36 <xQueueGenericSendFromISR+0x3a>
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d101      	bne.n	8011e3a <xQueueGenericSendFromISR+0x3e>
 8011e36:	2301      	movs	r3, #1
 8011e38:	e000      	b.n	8011e3c <xQueueGenericSendFromISR+0x40>
 8011e3a:	2300      	movs	r3, #0
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d109      	bne.n	8011e54 <xQueueGenericSendFromISR+0x58>
 8011e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e44:	f383 8811 	msr	BASEPRI, r3
 8011e48:	f3bf 8f6f 	isb	sy
 8011e4c:	f3bf 8f4f 	dsb	sy
 8011e50:	623b      	str	r3, [r7, #32]
 8011e52:	e7fe      	b.n	8011e52 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011e54:	683b      	ldr	r3, [r7, #0]
 8011e56:	2b02      	cmp	r3, #2
 8011e58:	d103      	bne.n	8011e62 <xQueueGenericSendFromISR+0x66>
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d101      	bne.n	8011e66 <xQueueGenericSendFromISR+0x6a>
 8011e62:	2301      	movs	r3, #1
 8011e64:	e000      	b.n	8011e68 <xQueueGenericSendFromISR+0x6c>
 8011e66:	2300      	movs	r3, #0
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d109      	bne.n	8011e80 <xQueueGenericSendFromISR+0x84>
 8011e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e70:	f383 8811 	msr	BASEPRI, r3
 8011e74:	f3bf 8f6f 	isb	sy
 8011e78:	f3bf 8f4f 	dsb	sy
 8011e7c:	61fb      	str	r3, [r7, #28]
 8011e7e:	e7fe      	b.n	8011e7e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011e80:	f001 fbc0 	bl	8013604 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011e84:	f3ef 8211 	mrs	r2, BASEPRI
 8011e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8c:	f383 8811 	msr	BASEPRI, r3
 8011e90:	f3bf 8f6f 	isb	sy
 8011e94:	f3bf 8f4f 	dsb	sy
 8011e98:	61ba      	str	r2, [r7, #24]
 8011e9a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011e9c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d302      	bcc.n	8011eb2 <xQueueGenericSendFromISR+0xb6>
 8011eac:	683b      	ldr	r3, [r7, #0]
 8011eae:	2b02      	cmp	r3, #2
 8011eb0:	d12c      	bne.n	8011f0c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011ebc:	683a      	ldr	r2, [r7, #0]
 8011ebe:	68b9      	ldr	r1, [r7, #8]
 8011ec0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec2:	f000 f9aa 	bl	801221a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011ec6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ece:	d112      	bne.n	8011ef6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d016      	beq.n	8011f06 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eda:	3324      	adds	r3, #36	; 0x24
 8011edc:	4618      	mov	r0, r3
 8011ede:	f000 fecf 	bl	8012c80 <xTaskRemoveFromEventList>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d00e      	beq.n	8011f06 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d00b      	beq.n	8011f06 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	2201      	movs	r2, #1
 8011ef2:	601a      	str	r2, [r3, #0]
 8011ef4:	e007      	b.n	8011f06 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011ef6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011efa:	3301      	adds	r3, #1
 8011efc:	b2db      	uxtb	r3, r3
 8011efe:	b25a      	sxtb	r2, r3
 8011f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011f06:	2301      	movs	r3, #1
 8011f08:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011f0a:	e001      	b.n	8011f10 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f12:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3738      	adds	r7, #56	; 0x38
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b08c      	sub	sp, #48	; 0x30
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	60f8      	str	r0, [r7, #12]
 8011f2c:	60b9      	str	r1, [r7, #8]
 8011f2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f30:	2300      	movs	r3, #0
 8011f32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d109      	bne.n	8011f52 <xQueueReceive+0x2e>
	__asm volatile
 8011f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f42:	f383 8811 	msr	BASEPRI, r3
 8011f46:	f3bf 8f6f 	isb	sy
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	623b      	str	r3, [r7, #32]
 8011f50:	e7fe      	b.n	8011f50 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d103      	bne.n	8011f60 <xQueueReceive+0x3c>
 8011f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d101      	bne.n	8011f64 <xQueueReceive+0x40>
 8011f60:	2301      	movs	r3, #1
 8011f62:	e000      	b.n	8011f66 <xQueueReceive+0x42>
 8011f64:	2300      	movs	r3, #0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d109      	bne.n	8011f7e <xQueueReceive+0x5a>
 8011f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	61fb      	str	r3, [r7, #28]
 8011f7c:	e7fe      	b.n	8011f7c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011f7e:	f001 f835 	bl	8012fec <xTaskGetSchedulerState>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d102      	bne.n	8011f8e <xQueueReceive+0x6a>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d101      	bne.n	8011f92 <xQueueReceive+0x6e>
 8011f8e:	2301      	movs	r3, #1
 8011f90:	e000      	b.n	8011f94 <xQueueReceive+0x70>
 8011f92:	2300      	movs	r3, #0
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d109      	bne.n	8011fac <xQueueReceive+0x88>
 8011f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f9c:	f383 8811 	msr	BASEPRI, r3
 8011fa0:	f3bf 8f6f 	isb	sy
 8011fa4:	f3bf 8f4f 	dsb	sy
 8011fa8:	61bb      	str	r3, [r7, #24]
 8011faa:	e7fe      	b.n	8011faa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011fac:	f001 fa4e 	bl	801344c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fb4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d01f      	beq.n	8011ffc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011fbc:	68b9      	ldr	r1, [r7, #8]
 8011fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011fc0:	f000 f995 	bl	80122ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc6:	1e5a      	subs	r2, r3, #1
 8011fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fce:	691b      	ldr	r3, [r3, #16]
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d00f      	beq.n	8011ff4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd6:	3310      	adds	r3, #16
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f000 fe51 	bl	8012c80 <xTaskRemoveFromEventList>
 8011fde:	4603      	mov	r3, r0
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d007      	beq.n	8011ff4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011fe4:	4b3c      	ldr	r3, [pc, #240]	; (80120d8 <xQueueReceive+0x1b4>)
 8011fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fea:	601a      	str	r2, [r3, #0]
 8011fec:	f3bf 8f4f 	dsb	sy
 8011ff0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011ff4:	f001 fa58 	bl	80134a8 <vPortExitCritical>
				return pdPASS;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e069      	b.n	80120d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d103      	bne.n	801200a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012002:	f001 fa51 	bl	80134a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012006:	2300      	movs	r3, #0
 8012008:	e062      	b.n	80120d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d106      	bne.n	801201e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012010:	f107 0310 	add.w	r3, r7, #16
 8012014:	4618      	mov	r0, r3
 8012016:	f000 fe95 	bl	8012d44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801201a:	2301      	movs	r3, #1
 801201c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801201e:	f001 fa43 	bl	80134a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012022:	f000 fc2b 	bl	801287c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012026:	f001 fa11 	bl	801344c <vPortEnterCritical>
 801202a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012030:	b25b      	sxtb	r3, r3
 8012032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012036:	d103      	bne.n	8012040 <xQueueReceive+0x11c>
 8012038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203a:	2200      	movs	r2, #0
 801203c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012046:	b25b      	sxtb	r3, r3
 8012048:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204c:	d103      	bne.n	8012056 <xQueueReceive+0x132>
 801204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012050:	2200      	movs	r2, #0
 8012052:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012056:	f001 fa27 	bl	80134a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801205a:	1d3a      	adds	r2, r7, #4
 801205c:	f107 0310 	add.w	r3, r7, #16
 8012060:	4611      	mov	r1, r2
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fe84 	bl	8012d70 <xTaskCheckForTimeOut>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d123      	bne.n	80120b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801206e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012070:	f000 f9b5 	bl	80123de <prvIsQueueEmpty>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d017      	beq.n	80120aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801207a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801207c:	3324      	adds	r3, #36	; 0x24
 801207e:	687a      	ldr	r2, [r7, #4]
 8012080:	4611      	mov	r1, r2
 8012082:	4618      	mov	r0, r3
 8012084:	f000 fdd8 	bl	8012c38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801208a:	f000 f956 	bl	801233a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801208e:	f000 fc03 	bl	8012898 <xTaskResumeAll>
 8012092:	4603      	mov	r3, r0
 8012094:	2b00      	cmp	r3, #0
 8012096:	d189      	bne.n	8011fac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8012098:	4b0f      	ldr	r3, [pc, #60]	; (80120d8 <xQueueReceive+0x1b4>)
 801209a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801209e:	601a      	str	r2, [r3, #0]
 80120a0:	f3bf 8f4f 	dsb	sy
 80120a4:	f3bf 8f6f 	isb	sy
 80120a8:	e780      	b.n	8011fac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80120aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120ac:	f000 f945 	bl	801233a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80120b0:	f000 fbf2 	bl	8012898 <xTaskResumeAll>
 80120b4:	e77a      	b.n	8011fac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80120b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120b8:	f000 f93f 	bl	801233a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80120bc:	f000 fbec 	bl	8012898 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120c2:	f000 f98c 	bl	80123de <prvIsQueueEmpty>
 80120c6:	4603      	mov	r3, r0
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	f43f af6f 	beq.w	8011fac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80120ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3730      	adds	r7, #48	; 0x30
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	e000ed04 	.word	0xe000ed04

080120dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b08e      	sub	sp, #56	; 0x38
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	60f8      	str	r0, [r7, #12]
 80120e4:	60b9      	str	r1, [r7, #8]
 80120e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80120ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d109      	bne.n	8012106 <xQueueReceiveFromISR+0x2a>
 80120f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f6:	f383 8811 	msr	BASEPRI, r3
 80120fa:	f3bf 8f6f 	isb	sy
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	623b      	str	r3, [r7, #32]
 8012104:	e7fe      	b.n	8012104 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d103      	bne.n	8012114 <xQueueReceiveFromISR+0x38>
 801210c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012110:	2b00      	cmp	r3, #0
 8012112:	d101      	bne.n	8012118 <xQueueReceiveFromISR+0x3c>
 8012114:	2301      	movs	r3, #1
 8012116:	e000      	b.n	801211a <xQueueReceiveFromISR+0x3e>
 8012118:	2300      	movs	r3, #0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d109      	bne.n	8012132 <xQueueReceiveFromISR+0x56>
 801211e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012122:	f383 8811 	msr	BASEPRI, r3
 8012126:	f3bf 8f6f 	isb	sy
 801212a:	f3bf 8f4f 	dsb	sy
 801212e:	61fb      	str	r3, [r7, #28]
 8012130:	e7fe      	b.n	8012130 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012132:	f001 fa67 	bl	8013604 <vPortValidateInterruptPriority>
	__asm volatile
 8012136:	f3ef 8211 	mrs	r2, BASEPRI
 801213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801213e:	f383 8811 	msr	BASEPRI, r3
 8012142:	f3bf 8f6f 	isb	sy
 8012146:	f3bf 8f4f 	dsb	sy
 801214a:	61ba      	str	r2, [r7, #24]
 801214c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801214e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012150:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012156:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215a:	2b00      	cmp	r3, #0
 801215c:	d02f      	beq.n	80121be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012168:	68b9      	ldr	r1, [r7, #8]
 801216a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801216c:	f000 f8bf 	bl	80122ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012172:	1e5a      	subs	r2, r3, #1
 8012174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012176:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012178:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012180:	d112      	bne.n	80121a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012184:	691b      	ldr	r3, [r3, #16]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d016      	beq.n	80121b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801218a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801218c:	3310      	adds	r3, #16
 801218e:	4618      	mov	r0, r3
 8012190:	f000 fd76 	bl	8012c80 <xTaskRemoveFromEventList>
 8012194:	4603      	mov	r3, r0
 8012196:	2b00      	cmp	r3, #0
 8012198:	d00e      	beq.n	80121b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00b      	beq.n	80121b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2201      	movs	r2, #1
 80121a4:	601a      	str	r2, [r3, #0]
 80121a6:	e007      	b.n	80121b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80121a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121ac:	3301      	adds	r3, #1
 80121ae:	b2db      	uxtb	r3, r3
 80121b0:	b25a      	sxtb	r2, r3
 80121b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80121b8:	2301      	movs	r3, #1
 80121ba:	637b      	str	r3, [r7, #52]	; 0x34
 80121bc:	e001      	b.n	80121c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80121be:	2300      	movs	r3, #0
 80121c0:	637b      	str	r3, [r7, #52]	; 0x34
 80121c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80121c6:	693b      	ldr	r3, [r7, #16]
 80121c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80121cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3738      	adds	r7, #56	; 0x38
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}

080121d6 <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b086      	sub	sp, #24
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d109      	bne.n	80121fc <uxQueueSpacesAvailable+0x26>
	__asm volatile
 80121e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ec:	f383 8811 	msr	BASEPRI, r3
 80121f0:	f3bf 8f6f 	isb	sy
 80121f4:	f3bf 8f4f 	dsb	sy
 80121f8:	60fb      	str	r3, [r7, #12]
 80121fa:	e7fe      	b.n	80121fa <uxQueueSpacesAvailable+0x24>

	taskENTER_CRITICAL();
 80121fc:	f001 f926 	bl	801344c <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012204:	697b      	ldr	r3, [r7, #20]
 8012206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012208:	1ad3      	subs	r3, r2, r3
 801220a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 801220c:	f001 f94c 	bl	80134a8 <vPortExitCritical>

	return uxReturn;
 8012210:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8012212:	4618      	mov	r0, r3
 8012214:	3718      	adds	r7, #24
 8012216:	46bd      	mov	sp, r7
 8012218:	bd80      	pop	{r7, pc}

0801221a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801221a:	b580      	push	{r7, lr}
 801221c:	b086      	sub	sp, #24
 801221e:	af00      	add	r7, sp, #0
 8012220:	60f8      	str	r0, [r7, #12]
 8012222:	60b9      	str	r1, [r7, #8]
 8012224:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012226:	2300      	movs	r3, #0
 8012228:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801222e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012234:	2b00      	cmp	r3, #0
 8012236:	d10d      	bne.n	8012254 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	681b      	ldr	r3, [r3, #0]
 801223c:	2b00      	cmp	r3, #0
 801223e:	d14d      	bne.n	80122dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	689b      	ldr	r3, [r3, #8]
 8012244:	4618      	mov	r0, r3
 8012246:	f000 feef 	bl	8013028 <xTaskPriorityDisinherit>
 801224a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	2200      	movs	r2, #0
 8012250:	609a      	str	r2, [r3, #8]
 8012252:	e043      	b.n	80122dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d119      	bne.n	801228e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	6858      	ldr	r0, [r3, #4]
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012262:	461a      	mov	r2, r3
 8012264:	68b9      	ldr	r1, [r7, #8]
 8012266:	f002 f9bf 	bl	80145e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801226a:	68fb      	ldr	r3, [r7, #12]
 801226c:	685a      	ldr	r2, [r3, #4]
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012272:	441a      	add	r2, r3
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	685a      	ldr	r2, [r3, #4]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	689b      	ldr	r3, [r3, #8]
 8012280:	429a      	cmp	r2, r3
 8012282:	d32b      	bcc.n	80122dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681a      	ldr	r2, [r3, #0]
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	605a      	str	r2, [r3, #4]
 801228c:	e026      	b.n	80122dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	68d8      	ldr	r0, [r3, #12]
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012296:	461a      	mov	r2, r3
 8012298:	68b9      	ldr	r1, [r7, #8]
 801229a:	f002 f9a5 	bl	80145e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	68da      	ldr	r2, [r3, #12]
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122a6:	425b      	negs	r3, r3
 80122a8:	441a      	add	r2, r3
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	68da      	ldr	r2, [r3, #12]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	429a      	cmp	r2, r3
 80122b8:	d207      	bcs.n	80122ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	689a      	ldr	r2, [r3, #8]
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c2:	425b      	negs	r3, r3
 80122c4:	441a      	add	r2, r3
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d105      	bne.n	80122dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d002      	beq.n	80122dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	3b01      	subs	r3, #1
 80122da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	1c5a      	adds	r2, r3, #1
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80122e4:	697b      	ldr	r3, [r7, #20]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3718      	adds	r7, #24
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b082      	sub	sp, #8
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
 80122f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d018      	beq.n	8012332 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	68da      	ldr	r2, [r3, #12]
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012308:	441a      	add	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	68da      	ldr	r2, [r3, #12]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	689b      	ldr	r3, [r3, #8]
 8012316:	429a      	cmp	r2, r3
 8012318:	d303      	bcc.n	8012322 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	681a      	ldr	r2, [r3, #0]
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68d9      	ldr	r1, [r3, #12]
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801232a:	461a      	mov	r2, r3
 801232c:	6838      	ldr	r0, [r7, #0]
 801232e:	f002 f95b 	bl	80145e8 <memcpy>
	}
}
 8012332:	bf00      	nop
 8012334:	3708      	adds	r7, #8
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b084      	sub	sp, #16
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012342:	f001 f883 	bl	801344c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801234c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801234e:	e011      	b.n	8012374 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012354:	2b00      	cmp	r3, #0
 8012356:	d012      	beq.n	801237e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	3324      	adds	r3, #36	; 0x24
 801235c:	4618      	mov	r0, r3
 801235e:	f000 fc8f 	bl	8012c80 <xTaskRemoveFromEventList>
 8012362:	4603      	mov	r3, r0
 8012364:	2b00      	cmp	r3, #0
 8012366:	d001      	beq.n	801236c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012368:	f000 fd62 	bl	8012e30 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801236c:	7bfb      	ldrb	r3, [r7, #15]
 801236e:	3b01      	subs	r3, #1
 8012370:	b2db      	uxtb	r3, r3
 8012372:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012378:	2b00      	cmp	r3, #0
 801237a:	dce9      	bgt.n	8012350 <prvUnlockQueue+0x16>
 801237c:	e000      	b.n	8012380 <prvUnlockQueue+0x46>
					break;
 801237e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	22ff      	movs	r2, #255	; 0xff
 8012384:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012388:	f001 f88e 	bl	80134a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801238c:	f001 f85e 	bl	801344c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012396:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012398:	e011      	b.n	80123be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	691b      	ldr	r3, [r3, #16]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d012      	beq.n	80123c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	3310      	adds	r3, #16
 80123a6:	4618      	mov	r0, r3
 80123a8:	f000 fc6a 	bl	8012c80 <xTaskRemoveFromEventList>
 80123ac:	4603      	mov	r3, r0
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d001      	beq.n	80123b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80123b2:	f000 fd3d 	bl	8012e30 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80123b6:	7bbb      	ldrb	r3, [r7, #14]
 80123b8:	3b01      	subs	r3, #1
 80123ba:	b2db      	uxtb	r3, r3
 80123bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	dce9      	bgt.n	801239a <prvUnlockQueue+0x60>
 80123c6:	e000      	b.n	80123ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80123c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	22ff      	movs	r2, #255	; 0xff
 80123ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80123d2:	f001 f869 	bl	80134a8 <vPortExitCritical>
}
 80123d6:	bf00      	nop
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}

080123de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80123de:	b580      	push	{r7, lr}
 80123e0:	b084      	sub	sp, #16
 80123e2:	af00      	add	r7, sp, #0
 80123e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80123e6:	f001 f831 	bl	801344c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d102      	bne.n	80123f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80123f2:	2301      	movs	r3, #1
 80123f4:	60fb      	str	r3, [r7, #12]
 80123f6:	e001      	b.n	80123fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80123f8:	2300      	movs	r3, #0
 80123fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80123fc:	f001 f854 	bl	80134a8 <vPortExitCritical>

	return xReturn;
 8012400:	68fb      	ldr	r3, [r7, #12]
}
 8012402:	4618      	mov	r0, r3
 8012404:	3710      	adds	r7, #16
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}

0801240a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801240a:	b580      	push	{r7, lr}
 801240c:	b084      	sub	sp, #16
 801240e:	af00      	add	r7, sp, #0
 8012410:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012412:	f001 f81b 	bl	801344c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801241e:	429a      	cmp	r2, r3
 8012420:	d102      	bne.n	8012428 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012422:	2301      	movs	r3, #1
 8012424:	60fb      	str	r3, [r7, #12]
 8012426:	e001      	b.n	801242c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012428:	2300      	movs	r3, #0
 801242a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801242c:	f001 f83c 	bl	80134a8 <vPortExitCritical>

	return xReturn;
 8012430:	68fb      	ldr	r3, [r7, #12]
}
 8012432:	4618      	mov	r0, r3
 8012434:	3710      	adds	r7, #16
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801243a:	b580      	push	{r7, lr}
 801243c:	b08e      	sub	sp, #56	; 0x38
 801243e:	af04      	add	r7, sp, #16
 8012440:	60f8      	str	r0, [r7, #12]
 8012442:	60b9      	str	r1, [r7, #8]
 8012444:	607a      	str	r2, [r7, #4]
 8012446:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8012448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801244a:	2b00      	cmp	r3, #0
 801244c:	d109      	bne.n	8012462 <xTaskCreateStatic+0x28>
 801244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012452:	f383 8811 	msr	BASEPRI, r3
 8012456:	f3bf 8f6f 	isb	sy
 801245a:	f3bf 8f4f 	dsb	sy
 801245e:	623b      	str	r3, [r7, #32]
 8012460:	e7fe      	b.n	8012460 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8012462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012464:	2b00      	cmp	r3, #0
 8012466:	d109      	bne.n	801247c <xTaskCreateStatic+0x42>
 8012468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801246c:	f383 8811 	msr	BASEPRI, r3
 8012470:	f3bf 8f6f 	isb	sy
 8012474:	f3bf 8f4f 	dsb	sy
 8012478:	61fb      	str	r3, [r7, #28]
 801247a:	e7fe      	b.n	801247a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801247c:	2354      	movs	r3, #84	; 0x54
 801247e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012480:	693b      	ldr	r3, [r7, #16]
 8012482:	2b54      	cmp	r3, #84	; 0x54
 8012484:	d009      	beq.n	801249a <xTaskCreateStatic+0x60>
 8012486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801248a:	f383 8811 	msr	BASEPRI, r3
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f3bf 8f4f 	dsb	sy
 8012496:	61bb      	str	r3, [r7, #24]
 8012498:	e7fe      	b.n	8012498 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801249a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801249c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d01e      	beq.n	80124e0 <xTaskCreateStatic+0xa6>
 80124a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d01b      	beq.n	80124e0 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80124a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80124ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80124b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80124b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b4:	2202      	movs	r2, #2
 80124b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80124ba:	2300      	movs	r3, #0
 80124bc:	9303      	str	r3, [sp, #12]
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	9302      	str	r3, [sp, #8]
 80124c2:	f107 0314 	add.w	r3, r7, #20
 80124c6:	9301      	str	r3, [sp, #4]
 80124c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124ca:	9300      	str	r3, [sp, #0]
 80124cc:	683b      	ldr	r3, [r7, #0]
 80124ce:	687a      	ldr	r2, [r7, #4]
 80124d0:	68b9      	ldr	r1, [r7, #8]
 80124d2:	68f8      	ldr	r0, [r7, #12]
 80124d4:	f000 f850 	bl	8012578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80124d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80124da:	f000 f8d3 	bl	8012684 <prvAddNewTaskToReadyList>
 80124de:	e001      	b.n	80124e4 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80124e0:	2300      	movs	r3, #0
 80124e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80124e4:	697b      	ldr	r3, [r7, #20]
	}
 80124e6:	4618      	mov	r0, r3
 80124e8:	3728      	adds	r7, #40	; 0x28
 80124ea:	46bd      	mov	sp, r7
 80124ec:	bd80      	pop	{r7, pc}

080124ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80124ee:	b580      	push	{r7, lr}
 80124f0:	b08c      	sub	sp, #48	; 0x30
 80124f2:	af04      	add	r7, sp, #16
 80124f4:	60f8      	str	r0, [r7, #12]
 80124f6:	60b9      	str	r1, [r7, #8]
 80124f8:	603b      	str	r3, [r7, #0]
 80124fa:	4613      	mov	r3, r2
 80124fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80124fe:	88fb      	ldrh	r3, [r7, #6]
 8012500:	009b      	lsls	r3, r3, #2
 8012502:	4618      	mov	r0, r3
 8012504:	f001 f8bc 	bl	8013680 <pvPortMalloc>
 8012508:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801250a:	697b      	ldr	r3, [r7, #20]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d00e      	beq.n	801252e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012510:	2054      	movs	r0, #84	; 0x54
 8012512:	f001 f8b5 	bl	8013680 <pvPortMalloc>
 8012516:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012518:	69fb      	ldr	r3, [r7, #28]
 801251a:	2b00      	cmp	r3, #0
 801251c:	d003      	beq.n	8012526 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	697a      	ldr	r2, [r7, #20]
 8012522:	631a      	str	r2, [r3, #48]	; 0x30
 8012524:	e005      	b.n	8012532 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012526:	6978      	ldr	r0, [r7, #20]
 8012528:	f001 f96c 	bl	8013804 <vPortFree>
 801252c:	e001      	b.n	8012532 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801252e:	2300      	movs	r3, #0
 8012530:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012532:	69fb      	ldr	r3, [r7, #28]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d017      	beq.n	8012568 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012538:	69fb      	ldr	r3, [r7, #28]
 801253a:	2200      	movs	r2, #0
 801253c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012540:	88fa      	ldrh	r2, [r7, #6]
 8012542:	2300      	movs	r3, #0
 8012544:	9303      	str	r3, [sp, #12]
 8012546:	69fb      	ldr	r3, [r7, #28]
 8012548:	9302      	str	r3, [sp, #8]
 801254a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801254c:	9301      	str	r3, [sp, #4]
 801254e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	683b      	ldr	r3, [r7, #0]
 8012554:	68b9      	ldr	r1, [r7, #8]
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f000 f80e 	bl	8012578 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801255c:	69f8      	ldr	r0, [r7, #28]
 801255e:	f000 f891 	bl	8012684 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012562:	2301      	movs	r3, #1
 8012564:	61bb      	str	r3, [r7, #24]
 8012566:	e002      	b.n	801256e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012568:	f04f 33ff 	mov.w	r3, #4294967295
 801256c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801256e:	69bb      	ldr	r3, [r7, #24]
	}
 8012570:	4618      	mov	r0, r3
 8012572:	3720      	adds	r7, #32
 8012574:	46bd      	mov	sp, r7
 8012576:	bd80      	pop	{r7, pc}

08012578 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
 8012584:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012590:	3b01      	subs	r3, #1
 8012592:	009b      	lsls	r3, r3, #2
 8012594:	4413      	add	r3, r2
 8012596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012598:	69bb      	ldr	r3, [r7, #24]
 801259a:	f023 0307 	bic.w	r3, r3, #7
 801259e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	f003 0307 	and.w	r3, r3, #7
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d009      	beq.n	80125be <prvInitialiseNewTask+0x46>
 80125aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125ae:	f383 8811 	msr	BASEPRI, r3
 80125b2:	f3bf 8f6f 	isb	sy
 80125b6:	f3bf 8f4f 	dsb	sy
 80125ba:	617b      	str	r3, [r7, #20]
 80125bc:	e7fe      	b.n	80125bc <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d01f      	beq.n	8012604 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125c4:	2300      	movs	r3, #0
 80125c6:	61fb      	str	r3, [r7, #28]
 80125c8:	e012      	b.n	80125f0 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80125ca:	68ba      	ldr	r2, [r7, #8]
 80125cc:	69fb      	ldr	r3, [r7, #28]
 80125ce:	4413      	add	r3, r2
 80125d0:	7819      	ldrb	r1, [r3, #0]
 80125d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	4413      	add	r3, r2
 80125d8:	3334      	adds	r3, #52	; 0x34
 80125da:	460a      	mov	r2, r1
 80125dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80125de:	68ba      	ldr	r2, [r7, #8]
 80125e0:	69fb      	ldr	r3, [r7, #28]
 80125e2:	4413      	add	r3, r2
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d006      	beq.n	80125f8 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125ea:	69fb      	ldr	r3, [r7, #28]
 80125ec:	3301      	adds	r3, #1
 80125ee:	61fb      	str	r3, [r7, #28]
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	2b0f      	cmp	r3, #15
 80125f4:	d9e9      	bls.n	80125ca <prvInitialiseNewTask+0x52>
 80125f6:	e000      	b.n	80125fa <prvInitialiseNewTask+0x82>
			{
				break;
 80125f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80125fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fc:	2200      	movs	r2, #0
 80125fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012602:	e003      	b.n	801260c <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012606:	2200      	movs	r2, #0
 8012608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801260c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801260e:	2b06      	cmp	r3, #6
 8012610:	d901      	bls.n	8012616 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012612:	2306      	movs	r3, #6
 8012614:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801261a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012620:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012624:	2200      	movs	r2, #0
 8012626:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	3304      	adds	r3, #4
 801262c:	4618      	mov	r0, r3
 801262e:	f7ff f91d 	bl	801186c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012634:	3318      	adds	r3, #24
 8012636:	4618      	mov	r0, r3
 8012638:	f7ff f918 	bl	801186c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012640:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012644:	f1c3 0207 	rsb	r2, r3, #7
 8012648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012650:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012654:	2200      	movs	r2, #0
 8012656:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801265a:	2200      	movs	r2, #0
 801265c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012660:	683a      	ldr	r2, [r7, #0]
 8012662:	68f9      	ldr	r1, [r7, #12]
 8012664:	69b8      	ldr	r0, [r7, #24]
 8012666:	f000 fdc9 	bl	80131fc <pxPortInitialiseStack>
 801266a:	4602      	mov	r2, r0
 801266c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	2b00      	cmp	r3, #0
 8012674:	d002      	beq.n	801267c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801267a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801267c:	bf00      	nop
 801267e:	3720      	adds	r7, #32
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b082      	sub	sp, #8
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801268c:	f000 fede 	bl	801344c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012690:	4b2a      	ldr	r3, [pc, #168]	; (801273c <prvAddNewTaskToReadyList+0xb8>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	3301      	adds	r3, #1
 8012696:	4a29      	ldr	r2, [pc, #164]	; (801273c <prvAddNewTaskToReadyList+0xb8>)
 8012698:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801269a:	4b29      	ldr	r3, [pc, #164]	; (8012740 <prvAddNewTaskToReadyList+0xbc>)
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d109      	bne.n	80126b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80126a2:	4a27      	ldr	r2, [pc, #156]	; (8012740 <prvAddNewTaskToReadyList+0xbc>)
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80126a8:	4b24      	ldr	r3, [pc, #144]	; (801273c <prvAddNewTaskToReadyList+0xb8>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d110      	bne.n	80126d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80126b0:	f000 fbe2 	bl	8012e78 <prvInitialiseTaskLists>
 80126b4:	e00d      	b.n	80126d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80126b6:	4b23      	ldr	r3, [pc, #140]	; (8012744 <prvAddNewTaskToReadyList+0xc0>)
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d109      	bne.n	80126d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80126be:	4b20      	ldr	r3, [pc, #128]	; (8012740 <prvAddNewTaskToReadyList+0xbc>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c8:	429a      	cmp	r2, r3
 80126ca:	d802      	bhi.n	80126d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80126cc:	4a1c      	ldr	r2, [pc, #112]	; (8012740 <prvAddNewTaskToReadyList+0xbc>)
 80126ce:	687b      	ldr	r3, [r7, #4]
 80126d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80126d2:	4b1d      	ldr	r3, [pc, #116]	; (8012748 <prvAddNewTaskToReadyList+0xc4>)
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	3301      	adds	r3, #1
 80126d8:	4a1b      	ldr	r2, [pc, #108]	; (8012748 <prvAddNewTaskToReadyList+0xc4>)
 80126da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126e0:	2201      	movs	r2, #1
 80126e2:	409a      	lsls	r2, r3
 80126e4:	4b19      	ldr	r3, [pc, #100]	; (801274c <prvAddNewTaskToReadyList+0xc8>)
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	4313      	orrs	r3, r2
 80126ea:	4a18      	ldr	r2, [pc, #96]	; (801274c <prvAddNewTaskToReadyList+0xc8>)
 80126ec:	6013      	str	r3, [r2, #0]
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126f2:	4613      	mov	r3, r2
 80126f4:	009b      	lsls	r3, r3, #2
 80126f6:	4413      	add	r3, r2
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	4a15      	ldr	r2, [pc, #84]	; (8012750 <prvAddNewTaskToReadyList+0xcc>)
 80126fc:	441a      	add	r2, r3
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	3304      	adds	r3, #4
 8012702:	4619      	mov	r1, r3
 8012704:	4610      	mov	r0, r2
 8012706:	f7ff f8be 	bl	8011886 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801270a:	f000 fecd 	bl	80134a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801270e:	4b0d      	ldr	r3, [pc, #52]	; (8012744 <prvAddNewTaskToReadyList+0xc0>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00e      	beq.n	8012734 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012716:	4b0a      	ldr	r3, [pc, #40]	; (8012740 <prvAddNewTaskToReadyList+0xbc>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012720:	429a      	cmp	r2, r3
 8012722:	d207      	bcs.n	8012734 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012724:	4b0b      	ldr	r3, [pc, #44]	; (8012754 <prvAddNewTaskToReadyList+0xd0>)
 8012726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801272a:	601a      	str	r2, [r3, #0]
 801272c:	f3bf 8f4f 	dsb	sy
 8012730:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012734:	bf00      	nop
 8012736:	3708      	adds	r7, #8
 8012738:	46bd      	mov	sp, r7
 801273a:	bd80      	pop	{r7, pc}
 801273c:	2000099c 	.word	0x2000099c
 8012740:	2000089c 	.word	0x2000089c
 8012744:	200009a8 	.word	0x200009a8
 8012748:	200009b8 	.word	0x200009b8
 801274c:	200009a4 	.word	0x200009a4
 8012750:	200008a0 	.word	0x200008a0
 8012754:	e000ed04 	.word	0xe000ed04

08012758 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012760:	2300      	movs	r3, #0
 8012762:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	2b00      	cmp	r3, #0
 8012768:	d016      	beq.n	8012798 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801276a:	4b13      	ldr	r3, [pc, #76]	; (80127b8 <vTaskDelay+0x60>)
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d009      	beq.n	8012786 <vTaskDelay+0x2e>
 8012772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012776:	f383 8811 	msr	BASEPRI, r3
 801277a:	f3bf 8f6f 	isb	sy
 801277e:	f3bf 8f4f 	dsb	sy
 8012782:	60bb      	str	r3, [r7, #8]
 8012784:	e7fe      	b.n	8012784 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012786:	f000 f879 	bl	801287c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801278a:	2100      	movs	r1, #0
 801278c:	6878      	ldr	r0, [r7, #4]
 801278e:	f000 fccf 	bl	8013130 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012792:	f000 f881 	bl	8012898 <xTaskResumeAll>
 8012796:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d107      	bne.n	80127ae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801279e:	4b07      	ldr	r3, [pc, #28]	; (80127bc <vTaskDelay+0x64>)
 80127a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127a4:	601a      	str	r2, [r3, #0]
 80127a6:	f3bf 8f4f 	dsb	sy
 80127aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80127ae:	bf00      	nop
 80127b0:	3710      	adds	r7, #16
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	200009c4 	.word	0x200009c4
 80127bc:	e000ed04 	.word	0xe000ed04

080127c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b08a      	sub	sp, #40	; 0x28
 80127c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80127c6:	2300      	movs	r3, #0
 80127c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80127ca:	2300      	movs	r3, #0
 80127cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80127ce:	463a      	mov	r2, r7
 80127d0:	1d39      	adds	r1, r7, #4
 80127d2:	f107 0308 	add.w	r3, r7, #8
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7f1 fc3a 	bl	8004050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80127dc:	6839      	ldr	r1, [r7, #0]
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	68ba      	ldr	r2, [r7, #8]
 80127e2:	9202      	str	r2, [sp, #8]
 80127e4:	9301      	str	r3, [sp, #4]
 80127e6:	2300      	movs	r3, #0
 80127e8:	9300      	str	r3, [sp, #0]
 80127ea:	2300      	movs	r3, #0
 80127ec:	460a      	mov	r2, r1
 80127ee:	491d      	ldr	r1, [pc, #116]	; (8012864 <vTaskStartScheduler+0xa4>)
 80127f0:	481d      	ldr	r0, [pc, #116]	; (8012868 <vTaskStartScheduler+0xa8>)
 80127f2:	f7ff fe22 	bl	801243a <xTaskCreateStatic>
 80127f6:	4602      	mov	r2, r0
 80127f8:	4b1c      	ldr	r3, [pc, #112]	; (801286c <vTaskStartScheduler+0xac>)
 80127fa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80127fc:	4b1b      	ldr	r3, [pc, #108]	; (801286c <vTaskStartScheduler+0xac>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d002      	beq.n	801280a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012804:	2301      	movs	r3, #1
 8012806:	617b      	str	r3, [r7, #20]
 8012808:	e001      	b.n	801280e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801280a:	2300      	movs	r3, #0
 801280c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	2b01      	cmp	r3, #1
 8012812:	d115      	bne.n	8012840 <vTaskStartScheduler+0x80>
 8012814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012818:	f383 8811 	msr	BASEPRI, r3
 801281c:	f3bf 8f6f 	isb	sy
 8012820:	f3bf 8f4f 	dsb	sy
 8012824:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012826:	4b12      	ldr	r3, [pc, #72]	; (8012870 <vTaskStartScheduler+0xb0>)
 8012828:	f04f 32ff 	mov.w	r2, #4294967295
 801282c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801282e:	4b11      	ldr	r3, [pc, #68]	; (8012874 <vTaskStartScheduler+0xb4>)
 8012830:	2201      	movs	r2, #1
 8012832:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012834:	4b10      	ldr	r3, [pc, #64]	; (8012878 <vTaskStartScheduler+0xb8>)
 8012836:	2200      	movs	r2, #0
 8012838:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801283a:	f000 fd69 	bl	8013310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801283e:	e00d      	b.n	801285c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012846:	d109      	bne.n	801285c <vTaskStartScheduler+0x9c>
 8012848:	f04f 0350 	mov.w	r3, #80	; 0x50
 801284c:	f383 8811 	msr	BASEPRI, r3
 8012850:	f3bf 8f6f 	isb	sy
 8012854:	f3bf 8f4f 	dsb	sy
 8012858:	60fb      	str	r3, [r7, #12]
 801285a:	e7fe      	b.n	801285a <vTaskStartScheduler+0x9a>
}
 801285c:	bf00      	nop
 801285e:	3718      	adds	r7, #24
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	08019ee8 	.word	0x08019ee8
 8012868:	08012e49 	.word	0x08012e49
 801286c:	200009c0 	.word	0x200009c0
 8012870:	200009bc 	.word	0x200009bc
 8012874:	200009a8 	.word	0x200009a8
 8012878:	200009a0 	.word	0x200009a0

0801287c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801287c:	b480      	push	{r7}
 801287e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012880:	4b04      	ldr	r3, [pc, #16]	; (8012894 <vTaskSuspendAll+0x18>)
 8012882:	681b      	ldr	r3, [r3, #0]
 8012884:	3301      	adds	r3, #1
 8012886:	4a03      	ldr	r2, [pc, #12]	; (8012894 <vTaskSuspendAll+0x18>)
 8012888:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801288a:	bf00      	nop
 801288c:	46bd      	mov	sp, r7
 801288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012892:	4770      	bx	lr
 8012894:	200009c4 	.word	0x200009c4

08012898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012898:	b580      	push	{r7, lr}
 801289a:	b084      	sub	sp, #16
 801289c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801289e:	2300      	movs	r3, #0
 80128a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80128a2:	2300      	movs	r3, #0
 80128a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80128a6:	4b41      	ldr	r3, [pc, #260]	; (80129ac <xTaskResumeAll+0x114>)
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d109      	bne.n	80128c2 <xTaskResumeAll+0x2a>
 80128ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	603b      	str	r3, [r7, #0]
 80128c0:	e7fe      	b.n	80128c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80128c2:	f000 fdc3 	bl	801344c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80128c6:	4b39      	ldr	r3, [pc, #228]	; (80129ac <xTaskResumeAll+0x114>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	3b01      	subs	r3, #1
 80128cc:	4a37      	ldr	r2, [pc, #220]	; (80129ac <xTaskResumeAll+0x114>)
 80128ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128d0:	4b36      	ldr	r3, [pc, #216]	; (80129ac <xTaskResumeAll+0x114>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d161      	bne.n	801299c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80128d8:	4b35      	ldr	r3, [pc, #212]	; (80129b0 <xTaskResumeAll+0x118>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d05d      	beq.n	801299c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128e0:	e02e      	b.n	8012940 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128e2:	4b34      	ldr	r3, [pc, #208]	; (80129b4 <xTaskResumeAll+0x11c>)
 80128e4:	68db      	ldr	r3, [r3, #12]
 80128e6:	68db      	ldr	r3, [r3, #12]
 80128e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	3318      	adds	r3, #24
 80128ee:	4618      	mov	r0, r3
 80128f0:	f7ff f826 	bl	8011940 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	3304      	adds	r3, #4
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7ff f821 	bl	8011940 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128fe:	68fb      	ldr	r3, [r7, #12]
 8012900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012902:	2201      	movs	r2, #1
 8012904:	409a      	lsls	r2, r3
 8012906:	4b2c      	ldr	r3, [pc, #176]	; (80129b8 <xTaskResumeAll+0x120>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	4313      	orrs	r3, r2
 801290c:	4a2a      	ldr	r2, [pc, #168]	; (80129b8 <xTaskResumeAll+0x120>)
 801290e:	6013      	str	r3, [r2, #0]
 8012910:	68fb      	ldr	r3, [r7, #12]
 8012912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012914:	4613      	mov	r3, r2
 8012916:	009b      	lsls	r3, r3, #2
 8012918:	4413      	add	r3, r2
 801291a:	009b      	lsls	r3, r3, #2
 801291c:	4a27      	ldr	r2, [pc, #156]	; (80129bc <xTaskResumeAll+0x124>)
 801291e:	441a      	add	r2, r3
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	3304      	adds	r3, #4
 8012924:	4619      	mov	r1, r3
 8012926:	4610      	mov	r0, r2
 8012928:	f7fe ffad 	bl	8011886 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012930:	4b23      	ldr	r3, [pc, #140]	; (80129c0 <xTaskResumeAll+0x128>)
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012936:	429a      	cmp	r2, r3
 8012938:	d302      	bcc.n	8012940 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 801293a:	4b22      	ldr	r3, [pc, #136]	; (80129c4 <xTaskResumeAll+0x12c>)
 801293c:	2201      	movs	r2, #1
 801293e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012940:	4b1c      	ldr	r3, [pc, #112]	; (80129b4 <xTaskResumeAll+0x11c>)
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1cc      	bne.n	80128e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d001      	beq.n	8012952 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801294e:	f000 fb2d 	bl	8012fac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012952:	4b1d      	ldr	r3, [pc, #116]	; (80129c8 <xTaskResumeAll+0x130>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d010      	beq.n	8012980 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801295e:	f000 f859 	bl	8012a14 <xTaskIncrementTick>
 8012962:	4603      	mov	r3, r0
 8012964:	2b00      	cmp	r3, #0
 8012966:	d002      	beq.n	801296e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8012968:	4b16      	ldr	r3, [pc, #88]	; (80129c4 <xTaskResumeAll+0x12c>)
 801296a:	2201      	movs	r2, #1
 801296c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	3b01      	subs	r3, #1
 8012972:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	2b00      	cmp	r3, #0
 8012978:	d1f1      	bne.n	801295e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 801297a:	4b13      	ldr	r3, [pc, #76]	; (80129c8 <xTaskResumeAll+0x130>)
 801297c:	2200      	movs	r2, #0
 801297e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012980:	4b10      	ldr	r3, [pc, #64]	; (80129c4 <xTaskResumeAll+0x12c>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d009      	beq.n	801299c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012988:	2301      	movs	r3, #1
 801298a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801298c:	4b0f      	ldr	r3, [pc, #60]	; (80129cc <xTaskResumeAll+0x134>)
 801298e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012992:	601a      	str	r2, [r3, #0]
 8012994:	f3bf 8f4f 	dsb	sy
 8012998:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801299c:	f000 fd84 	bl	80134a8 <vPortExitCritical>

	return xAlreadyYielded;
 80129a0:	68bb      	ldr	r3, [r7, #8]
}
 80129a2:	4618      	mov	r0, r3
 80129a4:	3710      	adds	r7, #16
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	200009c4 	.word	0x200009c4
 80129b0:	2000099c 	.word	0x2000099c
 80129b4:	2000095c 	.word	0x2000095c
 80129b8:	200009a4 	.word	0x200009a4
 80129bc:	200008a0 	.word	0x200008a0
 80129c0:	2000089c 	.word	0x2000089c
 80129c4:	200009b0 	.word	0x200009b0
 80129c8:	200009ac 	.word	0x200009ac
 80129cc:	e000ed04 	.word	0xe000ed04

080129d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80129d0:	b480      	push	{r7}
 80129d2:	b083      	sub	sp, #12
 80129d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80129d6:	4b05      	ldr	r3, [pc, #20]	; (80129ec <xTaskGetTickCount+0x1c>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80129dc:	687b      	ldr	r3, [r7, #4]
}
 80129de:	4618      	mov	r0, r3
 80129e0:	370c      	adds	r7, #12
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr
 80129ea:	bf00      	nop
 80129ec:	200009a0 	.word	0x200009a0

080129f0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129f6:	f000 fe05 	bl	8013604 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80129fa:	2300      	movs	r3, #0
 80129fc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80129fe:	4b04      	ldr	r3, [pc, #16]	; (8012a10 <xTaskGetTickCountFromISR+0x20>)
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a04:	683b      	ldr	r3, [r7, #0]
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3708      	adds	r7, #8
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}
 8012a0e:	bf00      	nop
 8012a10:	200009a0 	.word	0x200009a0

08012a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b086      	sub	sp, #24
 8012a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a1e:	4b4e      	ldr	r3, [pc, #312]	; (8012b58 <xTaskIncrementTick+0x144>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	f040 8087 	bne.w	8012b36 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012a28:	4b4c      	ldr	r3, [pc, #304]	; (8012b5c <xTaskIncrementTick+0x148>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012a30:	4a4a      	ldr	r2, [pc, #296]	; (8012b5c <xTaskIncrementTick+0x148>)
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d11f      	bne.n	8012a7c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012a3c:	4b48      	ldr	r3, [pc, #288]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	681b      	ldr	r3, [r3, #0]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d009      	beq.n	8012a5a <xTaskIncrementTick+0x46>
 8012a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4a:	f383 8811 	msr	BASEPRI, r3
 8012a4e:	f3bf 8f6f 	isb	sy
 8012a52:	f3bf 8f4f 	dsb	sy
 8012a56:	603b      	str	r3, [r7, #0]
 8012a58:	e7fe      	b.n	8012a58 <xTaskIncrementTick+0x44>
 8012a5a:	4b41      	ldr	r3, [pc, #260]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	60fb      	str	r3, [r7, #12]
 8012a60:	4b40      	ldr	r3, [pc, #256]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	4a3e      	ldr	r2, [pc, #248]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a66:	6013      	str	r3, [r2, #0]
 8012a68:	4a3e      	ldr	r2, [pc, #248]	; (8012b64 <xTaskIncrementTick+0x150>)
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	6013      	str	r3, [r2, #0]
 8012a6e:	4b3e      	ldr	r3, [pc, #248]	; (8012b68 <xTaskIncrementTick+0x154>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	3301      	adds	r3, #1
 8012a74:	4a3c      	ldr	r2, [pc, #240]	; (8012b68 <xTaskIncrementTick+0x154>)
 8012a76:	6013      	str	r3, [r2, #0]
 8012a78:	f000 fa98 	bl	8012fac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012a7c:	4b3b      	ldr	r3, [pc, #236]	; (8012b6c <xTaskIncrementTick+0x158>)
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	693a      	ldr	r2, [r7, #16]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d348      	bcc.n	8012b18 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a86:	4b36      	ldr	r3, [pc, #216]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d104      	bne.n	8012a9a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a90:	4b36      	ldr	r3, [pc, #216]	; (8012b6c <xTaskIncrementTick+0x158>)
 8012a92:	f04f 32ff 	mov.w	r2, #4294967295
 8012a96:	601a      	str	r2, [r3, #0]
					break;
 8012a98:	e03e      	b.n	8012b18 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a9a:	4b31      	ldr	r3, [pc, #196]	; (8012b60 <xTaskIncrementTick+0x14c>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	68db      	ldr	r3, [r3, #12]
 8012aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	685b      	ldr	r3, [r3, #4]
 8012aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012aaa:	693a      	ldr	r2, [r7, #16]
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	429a      	cmp	r2, r3
 8012ab0:	d203      	bcs.n	8012aba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012ab2:	4a2e      	ldr	r2, [pc, #184]	; (8012b6c <xTaskIncrementTick+0x158>)
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012ab8:	e02e      	b.n	8012b18 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	3304      	adds	r3, #4
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f7fe ff3e 	bl	8011940 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012ac4:	68bb      	ldr	r3, [r7, #8]
 8012ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d004      	beq.n	8012ad6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	3318      	adds	r3, #24
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7fe ff35 	bl	8011940 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012ad6:	68bb      	ldr	r3, [r7, #8]
 8012ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ada:	2201      	movs	r2, #1
 8012adc:	409a      	lsls	r2, r3
 8012ade:	4b24      	ldr	r3, [pc, #144]	; (8012b70 <xTaskIncrementTick+0x15c>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	4313      	orrs	r3, r2
 8012ae4:	4a22      	ldr	r2, [pc, #136]	; (8012b70 <xTaskIncrementTick+0x15c>)
 8012ae6:	6013      	str	r3, [r2, #0]
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012aec:	4613      	mov	r3, r2
 8012aee:	009b      	lsls	r3, r3, #2
 8012af0:	4413      	add	r3, r2
 8012af2:	009b      	lsls	r3, r3, #2
 8012af4:	4a1f      	ldr	r2, [pc, #124]	; (8012b74 <xTaskIncrementTick+0x160>)
 8012af6:	441a      	add	r2, r3
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	3304      	adds	r3, #4
 8012afc:	4619      	mov	r1, r3
 8012afe:	4610      	mov	r0, r2
 8012b00:	f7fe fec1 	bl	8011886 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b04:	68bb      	ldr	r3, [r7, #8]
 8012b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b08:	4b1b      	ldr	r3, [pc, #108]	; (8012b78 <xTaskIncrementTick+0x164>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d3b9      	bcc.n	8012a86 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8012b12:	2301      	movs	r3, #1
 8012b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b16:	e7b6      	b.n	8012a86 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b18:	4b17      	ldr	r3, [pc, #92]	; (8012b78 <xTaskIncrementTick+0x164>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b1e:	4915      	ldr	r1, [pc, #84]	; (8012b74 <xTaskIncrementTick+0x160>)
 8012b20:	4613      	mov	r3, r2
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	4413      	add	r3, r2
 8012b26:	009b      	lsls	r3, r3, #2
 8012b28:	440b      	add	r3, r1
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b01      	cmp	r3, #1
 8012b2e:	d907      	bls.n	8012b40 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8012b30:	2301      	movs	r3, #1
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	e004      	b.n	8012b40 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012b36:	4b11      	ldr	r3, [pc, #68]	; (8012b7c <xTaskIncrementTick+0x168>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3301      	adds	r3, #1
 8012b3c:	4a0f      	ldr	r2, [pc, #60]	; (8012b7c <xTaskIncrementTick+0x168>)
 8012b3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012b40:	4b0f      	ldr	r3, [pc, #60]	; (8012b80 <xTaskIncrementTick+0x16c>)
 8012b42:	681b      	ldr	r3, [r3, #0]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d001      	beq.n	8012b4c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012b4c:	697b      	ldr	r3, [r7, #20]
}
 8012b4e:	4618      	mov	r0, r3
 8012b50:	3718      	adds	r7, #24
 8012b52:	46bd      	mov	sp, r7
 8012b54:	bd80      	pop	{r7, pc}
 8012b56:	bf00      	nop
 8012b58:	200009c4 	.word	0x200009c4
 8012b5c:	200009a0 	.word	0x200009a0
 8012b60:	20000954 	.word	0x20000954
 8012b64:	20000958 	.word	0x20000958
 8012b68:	200009b4 	.word	0x200009b4
 8012b6c:	200009bc 	.word	0x200009bc
 8012b70:	200009a4 	.word	0x200009a4
 8012b74:	200008a0 	.word	0x200008a0
 8012b78:	2000089c 	.word	0x2000089c
 8012b7c:	200009ac 	.word	0x200009ac
 8012b80:	200009b0 	.word	0x200009b0

08012b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012b84:	b480      	push	{r7}
 8012b86:	b087      	sub	sp, #28
 8012b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012b8a:	4b26      	ldr	r3, [pc, #152]	; (8012c24 <vTaskSwitchContext+0xa0>)
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d003      	beq.n	8012b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b92:	4b25      	ldr	r3, [pc, #148]	; (8012c28 <vTaskSwitchContext+0xa4>)
 8012b94:	2201      	movs	r2, #1
 8012b96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b98:	e03e      	b.n	8012c18 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8012b9a:	4b23      	ldr	r3, [pc, #140]	; (8012c28 <vTaskSwitchContext+0xa4>)
 8012b9c:	2200      	movs	r2, #0
 8012b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ba0:	4b22      	ldr	r3, [pc, #136]	; (8012c2c <vTaskSwitchContext+0xa8>)
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	fab3 f383 	clz	r3, r3
 8012bac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012bae:	7afb      	ldrb	r3, [r7, #11]
 8012bb0:	f1c3 031f 	rsb	r3, r3, #31
 8012bb4:	617b      	str	r3, [r7, #20]
 8012bb6:	491e      	ldr	r1, [pc, #120]	; (8012c30 <vTaskSwitchContext+0xac>)
 8012bb8:	697a      	ldr	r2, [r7, #20]
 8012bba:	4613      	mov	r3, r2
 8012bbc:	009b      	lsls	r3, r3, #2
 8012bbe:	4413      	add	r3, r2
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	440b      	add	r3, r1
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d109      	bne.n	8012bde <vTaskSwitchContext+0x5a>
	__asm volatile
 8012bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bce:	f383 8811 	msr	BASEPRI, r3
 8012bd2:	f3bf 8f6f 	isb	sy
 8012bd6:	f3bf 8f4f 	dsb	sy
 8012bda:	607b      	str	r3, [r7, #4]
 8012bdc:	e7fe      	b.n	8012bdc <vTaskSwitchContext+0x58>
 8012bde:	697a      	ldr	r2, [r7, #20]
 8012be0:	4613      	mov	r3, r2
 8012be2:	009b      	lsls	r3, r3, #2
 8012be4:	4413      	add	r3, r2
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4a11      	ldr	r2, [pc, #68]	; (8012c30 <vTaskSwitchContext+0xac>)
 8012bea:	4413      	add	r3, r2
 8012bec:	613b      	str	r3, [r7, #16]
 8012bee:	693b      	ldr	r3, [r7, #16]
 8012bf0:	685b      	ldr	r3, [r3, #4]
 8012bf2:	685a      	ldr	r2, [r3, #4]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	605a      	str	r2, [r3, #4]
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	685a      	ldr	r2, [r3, #4]
 8012bfc:	693b      	ldr	r3, [r7, #16]
 8012bfe:	3308      	adds	r3, #8
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d104      	bne.n	8012c0e <vTaskSwitchContext+0x8a>
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	685b      	ldr	r3, [r3, #4]
 8012c08:	685a      	ldr	r2, [r3, #4]
 8012c0a:	693b      	ldr	r3, [r7, #16]
 8012c0c:	605a      	str	r2, [r3, #4]
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	68db      	ldr	r3, [r3, #12]
 8012c14:	4a07      	ldr	r2, [pc, #28]	; (8012c34 <vTaskSwitchContext+0xb0>)
 8012c16:	6013      	str	r3, [r2, #0]
}
 8012c18:	bf00      	nop
 8012c1a:	371c      	adds	r7, #28
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr
 8012c24:	200009c4 	.word	0x200009c4
 8012c28:	200009b0 	.word	0x200009b0
 8012c2c:	200009a4 	.word	0x200009a4
 8012c30:	200008a0 	.word	0x200008a0
 8012c34:	2000089c 	.word	0x2000089c

08012c38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b084      	sub	sp, #16
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d109      	bne.n	8012c5c <vTaskPlaceOnEventList+0x24>
 8012c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4c:	f383 8811 	msr	BASEPRI, r3
 8012c50:	f3bf 8f6f 	isb	sy
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	60fb      	str	r3, [r7, #12]
 8012c5a:	e7fe      	b.n	8012c5a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c5c:	4b07      	ldr	r3, [pc, #28]	; (8012c7c <vTaskPlaceOnEventList+0x44>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	3318      	adds	r3, #24
 8012c62:	4619      	mov	r1, r3
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7fe fe32 	bl	80118ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c6a:	2101      	movs	r1, #1
 8012c6c:	6838      	ldr	r0, [r7, #0]
 8012c6e:	f000 fa5f 	bl	8013130 <prvAddCurrentTaskToDelayedList>
}
 8012c72:	bf00      	nop
 8012c74:	3710      	adds	r7, #16
 8012c76:	46bd      	mov	sp, r7
 8012c78:	bd80      	pop	{r7, pc}
 8012c7a:	bf00      	nop
 8012c7c:	2000089c 	.word	0x2000089c

08012c80 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b086      	sub	sp, #24
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	68db      	ldr	r3, [r3, #12]
 8012c8c:	68db      	ldr	r3, [r3, #12]
 8012c8e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d109      	bne.n	8012caa <xTaskRemoveFromEventList+0x2a>
 8012c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c9a:	f383 8811 	msr	BASEPRI, r3
 8012c9e:	f3bf 8f6f 	isb	sy
 8012ca2:	f3bf 8f4f 	dsb	sy
 8012ca6:	60fb      	str	r3, [r7, #12]
 8012ca8:	e7fe      	b.n	8012ca8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	3318      	adds	r3, #24
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f7fe fe46 	bl	8011940 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012cb4:	4b1d      	ldr	r3, [pc, #116]	; (8012d2c <xTaskRemoveFromEventList+0xac>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d11c      	bne.n	8012cf6 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012cbc:	693b      	ldr	r3, [r7, #16]
 8012cbe:	3304      	adds	r3, #4
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7fe fe3d 	bl	8011940 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012cc6:	693b      	ldr	r3, [r7, #16]
 8012cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cca:	2201      	movs	r2, #1
 8012ccc:	409a      	lsls	r2, r3
 8012cce:	4b18      	ldr	r3, [pc, #96]	; (8012d30 <xTaskRemoveFromEventList+0xb0>)
 8012cd0:	681b      	ldr	r3, [r3, #0]
 8012cd2:	4313      	orrs	r3, r2
 8012cd4:	4a16      	ldr	r2, [pc, #88]	; (8012d30 <xTaskRemoveFromEventList+0xb0>)
 8012cd6:	6013      	str	r3, [r2, #0]
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cdc:	4613      	mov	r3, r2
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	4413      	add	r3, r2
 8012ce2:	009b      	lsls	r3, r3, #2
 8012ce4:	4a13      	ldr	r2, [pc, #76]	; (8012d34 <xTaskRemoveFromEventList+0xb4>)
 8012ce6:	441a      	add	r2, r3
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	3304      	adds	r3, #4
 8012cec:	4619      	mov	r1, r3
 8012cee:	4610      	mov	r0, r2
 8012cf0:	f7fe fdc9 	bl	8011886 <vListInsertEnd>
 8012cf4:	e005      	b.n	8012d02 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012cf6:	693b      	ldr	r3, [r7, #16]
 8012cf8:	3318      	adds	r3, #24
 8012cfa:	4619      	mov	r1, r3
 8012cfc:	480e      	ldr	r0, [pc, #56]	; (8012d38 <xTaskRemoveFromEventList+0xb8>)
 8012cfe:	f7fe fdc2 	bl	8011886 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012d02:	693b      	ldr	r3, [r7, #16]
 8012d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d06:	4b0d      	ldr	r3, [pc, #52]	; (8012d3c <xTaskRemoveFromEventList+0xbc>)
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0c:	429a      	cmp	r2, r3
 8012d0e:	d905      	bls.n	8012d1c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012d10:	2301      	movs	r3, #1
 8012d12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012d14:	4b0a      	ldr	r3, [pc, #40]	; (8012d40 <xTaskRemoveFromEventList+0xc0>)
 8012d16:	2201      	movs	r2, #1
 8012d18:	601a      	str	r2, [r3, #0]
 8012d1a:	e001      	b.n	8012d20 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012d20:	697b      	ldr	r3, [r7, #20]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3718      	adds	r7, #24
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	200009c4 	.word	0x200009c4
 8012d30:	200009a4 	.word	0x200009a4
 8012d34:	200008a0 	.word	0x200008a0
 8012d38:	2000095c 	.word	0x2000095c
 8012d3c:	2000089c 	.word	0x2000089c
 8012d40:	200009b0 	.word	0x200009b0

08012d44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012d4c:	4b06      	ldr	r3, [pc, #24]	; (8012d68 <vTaskInternalSetTimeOutState+0x24>)
 8012d4e:	681a      	ldr	r2, [r3, #0]
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012d54:	4b05      	ldr	r3, [pc, #20]	; (8012d6c <vTaskInternalSetTimeOutState+0x28>)
 8012d56:	681a      	ldr	r2, [r3, #0]
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	605a      	str	r2, [r3, #4]
}
 8012d5c:	bf00      	nop
 8012d5e:	370c      	adds	r7, #12
 8012d60:	46bd      	mov	sp, r7
 8012d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d66:	4770      	bx	lr
 8012d68:	200009b4 	.word	0x200009b4
 8012d6c:	200009a0 	.word	0x200009a0

08012d70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b088      	sub	sp, #32
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d109      	bne.n	8012d94 <xTaskCheckForTimeOut+0x24>
 8012d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d84:	f383 8811 	msr	BASEPRI, r3
 8012d88:	f3bf 8f6f 	isb	sy
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	613b      	str	r3, [r7, #16]
 8012d92:	e7fe      	b.n	8012d92 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012d94:	683b      	ldr	r3, [r7, #0]
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	d109      	bne.n	8012dae <xTaskCheckForTimeOut+0x3e>
 8012d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9e:	f383 8811 	msr	BASEPRI, r3
 8012da2:	f3bf 8f6f 	isb	sy
 8012da6:	f3bf 8f4f 	dsb	sy
 8012daa:	60fb      	str	r3, [r7, #12]
 8012dac:	e7fe      	b.n	8012dac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012dae:	f000 fb4d 	bl	801344c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012db2:	4b1d      	ldr	r3, [pc, #116]	; (8012e28 <xTaskCheckForTimeOut+0xb8>)
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	69ba      	ldr	r2, [r7, #24]
 8012dbe:	1ad3      	subs	r3, r2, r3
 8012dc0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012dca:	d102      	bne.n	8012dd2 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	61fb      	str	r3, [r7, #28]
 8012dd0:	e023      	b.n	8012e1a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	681a      	ldr	r2, [r3, #0]
 8012dd6:	4b15      	ldr	r3, [pc, #84]	; (8012e2c <xTaskCheckForTimeOut+0xbc>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d007      	beq.n	8012dee <xTaskCheckForTimeOut+0x7e>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	69ba      	ldr	r2, [r7, #24]
 8012de4:	429a      	cmp	r2, r3
 8012de6:	d302      	bcc.n	8012dee <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012de8:	2301      	movs	r3, #1
 8012dea:	61fb      	str	r3, [r7, #28]
 8012dec:	e015      	b.n	8012e1a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012dee:	683b      	ldr	r3, [r7, #0]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	697a      	ldr	r2, [r7, #20]
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d20b      	bcs.n	8012e10 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012df8:	683b      	ldr	r3, [r7, #0]
 8012dfa:	681a      	ldr	r2, [r3, #0]
 8012dfc:	697b      	ldr	r3, [r7, #20]
 8012dfe:	1ad2      	subs	r2, r2, r3
 8012e00:	683b      	ldr	r3, [r7, #0]
 8012e02:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7ff ff9d 	bl	8012d44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012e0a:	2300      	movs	r3, #0
 8012e0c:	61fb      	str	r3, [r7, #28]
 8012e0e:	e004      	b.n	8012e1a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012e10:	683b      	ldr	r3, [r7, #0]
 8012e12:	2200      	movs	r2, #0
 8012e14:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012e16:	2301      	movs	r3, #1
 8012e18:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012e1a:	f000 fb45 	bl	80134a8 <vPortExitCritical>

	return xReturn;
 8012e1e:	69fb      	ldr	r3, [r7, #28]
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3720      	adds	r7, #32
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}
 8012e28:	200009a0 	.word	0x200009a0
 8012e2c:	200009b4 	.word	0x200009b4

08012e30 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012e30:	b480      	push	{r7}
 8012e32:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012e34:	4b03      	ldr	r3, [pc, #12]	; (8012e44 <vTaskMissedYield+0x14>)
 8012e36:	2201      	movs	r2, #1
 8012e38:	601a      	str	r2, [r3, #0]
}
 8012e3a:	bf00      	nop
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e42:	4770      	bx	lr
 8012e44:	200009b0 	.word	0x200009b0

08012e48 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012e50:	f000 f852 	bl	8012ef8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e54:	4b06      	ldr	r3, [pc, #24]	; (8012e70 <prvIdleTask+0x28>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	2b01      	cmp	r3, #1
 8012e5a:	d9f9      	bls.n	8012e50 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012e5c:	4b05      	ldr	r3, [pc, #20]	; (8012e74 <prvIdleTask+0x2c>)
 8012e5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e62:	601a      	str	r2, [r3, #0]
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012e6c:	e7f0      	b.n	8012e50 <prvIdleTask+0x8>
 8012e6e:	bf00      	nop
 8012e70:	200008a0 	.word	0x200008a0
 8012e74:	e000ed04 	.word	0xe000ed04

08012e78 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b082      	sub	sp, #8
 8012e7c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e7e:	2300      	movs	r3, #0
 8012e80:	607b      	str	r3, [r7, #4]
 8012e82:	e00c      	b.n	8012e9e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e84:	687a      	ldr	r2, [r7, #4]
 8012e86:	4613      	mov	r3, r2
 8012e88:	009b      	lsls	r3, r3, #2
 8012e8a:	4413      	add	r3, r2
 8012e8c:	009b      	lsls	r3, r3, #2
 8012e8e:	4a12      	ldr	r2, [pc, #72]	; (8012ed8 <prvInitialiseTaskLists+0x60>)
 8012e90:	4413      	add	r3, r2
 8012e92:	4618      	mov	r0, r3
 8012e94:	f7fe fcca 	bl	801182c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	3301      	adds	r3, #1
 8012e9c:	607b      	str	r3, [r7, #4]
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2b06      	cmp	r3, #6
 8012ea2:	d9ef      	bls.n	8012e84 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012ea4:	480d      	ldr	r0, [pc, #52]	; (8012edc <prvInitialiseTaskLists+0x64>)
 8012ea6:	f7fe fcc1 	bl	801182c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012eaa:	480d      	ldr	r0, [pc, #52]	; (8012ee0 <prvInitialiseTaskLists+0x68>)
 8012eac:	f7fe fcbe 	bl	801182c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012eb0:	480c      	ldr	r0, [pc, #48]	; (8012ee4 <prvInitialiseTaskLists+0x6c>)
 8012eb2:	f7fe fcbb 	bl	801182c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012eb6:	480c      	ldr	r0, [pc, #48]	; (8012ee8 <prvInitialiseTaskLists+0x70>)
 8012eb8:	f7fe fcb8 	bl	801182c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012ebc:	480b      	ldr	r0, [pc, #44]	; (8012eec <prvInitialiseTaskLists+0x74>)
 8012ebe:	f7fe fcb5 	bl	801182c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012ec2:	4b0b      	ldr	r3, [pc, #44]	; (8012ef0 <prvInitialiseTaskLists+0x78>)
 8012ec4:	4a05      	ldr	r2, [pc, #20]	; (8012edc <prvInitialiseTaskLists+0x64>)
 8012ec6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012ec8:	4b0a      	ldr	r3, [pc, #40]	; (8012ef4 <prvInitialiseTaskLists+0x7c>)
 8012eca:	4a05      	ldr	r2, [pc, #20]	; (8012ee0 <prvInitialiseTaskLists+0x68>)
 8012ecc:	601a      	str	r2, [r3, #0]
}
 8012ece:	bf00      	nop
 8012ed0:	3708      	adds	r7, #8
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}
 8012ed6:	bf00      	nop
 8012ed8:	200008a0 	.word	0x200008a0
 8012edc:	2000092c 	.word	0x2000092c
 8012ee0:	20000940 	.word	0x20000940
 8012ee4:	2000095c 	.word	0x2000095c
 8012ee8:	20000970 	.word	0x20000970
 8012eec:	20000988 	.word	0x20000988
 8012ef0:	20000954 	.word	0x20000954
 8012ef4:	20000958 	.word	0x20000958

08012ef8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b082      	sub	sp, #8
 8012efc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012efe:	e019      	b.n	8012f34 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012f00:	f000 faa4 	bl	801344c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f04:	4b0f      	ldr	r3, [pc, #60]	; (8012f44 <prvCheckTasksWaitingTermination+0x4c>)
 8012f06:	68db      	ldr	r3, [r3, #12]
 8012f08:	68db      	ldr	r3, [r3, #12]
 8012f0a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	3304      	adds	r3, #4
 8012f10:	4618      	mov	r0, r3
 8012f12:	f7fe fd15 	bl	8011940 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012f16:	4b0c      	ldr	r3, [pc, #48]	; (8012f48 <prvCheckTasksWaitingTermination+0x50>)
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	3b01      	subs	r3, #1
 8012f1c:	4a0a      	ldr	r2, [pc, #40]	; (8012f48 <prvCheckTasksWaitingTermination+0x50>)
 8012f1e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012f20:	4b0a      	ldr	r3, [pc, #40]	; (8012f4c <prvCheckTasksWaitingTermination+0x54>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	4a09      	ldr	r2, [pc, #36]	; (8012f4c <prvCheckTasksWaitingTermination+0x54>)
 8012f28:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012f2a:	f000 fabd 	bl	80134a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012f2e:	6878      	ldr	r0, [r7, #4]
 8012f30:	f000 f80e 	bl	8012f50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012f34:	4b05      	ldr	r3, [pc, #20]	; (8012f4c <prvCheckTasksWaitingTermination+0x54>)
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d1e1      	bne.n	8012f00 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012f3c:	bf00      	nop
 8012f3e:	3708      	adds	r7, #8
 8012f40:	46bd      	mov	sp, r7
 8012f42:	bd80      	pop	{r7, pc}
 8012f44:	20000970 	.word	0x20000970
 8012f48:	2000099c 	.word	0x2000099c
 8012f4c:	20000984 	.word	0x20000984

08012f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d108      	bne.n	8012f74 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f66:	4618      	mov	r0, r3
 8012f68:	f000 fc4c 	bl	8013804 <vPortFree>
				vPortFree( pxTCB );
 8012f6c:	6878      	ldr	r0, [r7, #4]
 8012f6e:	f000 fc49 	bl	8013804 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012f72:	e017      	b.n	8012fa4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012f7a:	2b01      	cmp	r3, #1
 8012f7c:	d103      	bne.n	8012f86 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f000 fc40 	bl	8013804 <vPortFree>
	}
 8012f84:	e00e      	b.n	8012fa4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012f8c:	2b02      	cmp	r3, #2
 8012f8e:	d009      	beq.n	8012fa4 <prvDeleteTCB+0x54>
 8012f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f94:	f383 8811 	msr	BASEPRI, r3
 8012f98:	f3bf 8f6f 	isb	sy
 8012f9c:	f3bf 8f4f 	dsb	sy
 8012fa0:	60fb      	str	r3, [r7, #12]
 8012fa2:	e7fe      	b.n	8012fa2 <prvDeleteTCB+0x52>
	}
 8012fa4:	bf00      	nop
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}

08012fac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012fb2:	4b0c      	ldr	r3, [pc, #48]	; (8012fe4 <prvResetNextTaskUnblockTime+0x38>)
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	681b      	ldr	r3, [r3, #0]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	d104      	bne.n	8012fc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012fbc:	4b0a      	ldr	r3, [pc, #40]	; (8012fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8012fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8012fc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012fc4:	e008      	b.n	8012fd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012fc6:	4b07      	ldr	r3, [pc, #28]	; (8012fe4 <prvResetNextTaskUnblockTime+0x38>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	68db      	ldr	r3, [r3, #12]
 8012fcc:	68db      	ldr	r3, [r3, #12]
 8012fce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012fd0:	687b      	ldr	r3, [r7, #4]
 8012fd2:	685b      	ldr	r3, [r3, #4]
 8012fd4:	4a04      	ldr	r2, [pc, #16]	; (8012fe8 <prvResetNextTaskUnblockTime+0x3c>)
 8012fd6:	6013      	str	r3, [r2, #0]
}
 8012fd8:	bf00      	nop
 8012fda:	370c      	adds	r7, #12
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe2:	4770      	bx	lr
 8012fe4:	20000954 	.word	0x20000954
 8012fe8:	200009bc 	.word	0x200009bc

08012fec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012fec:	b480      	push	{r7}
 8012fee:	b083      	sub	sp, #12
 8012ff0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012ff2:	4b0b      	ldr	r3, [pc, #44]	; (8013020 <xTaskGetSchedulerState+0x34>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d102      	bne.n	8013000 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	607b      	str	r3, [r7, #4]
 8012ffe:	e008      	b.n	8013012 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013000:	4b08      	ldr	r3, [pc, #32]	; (8013024 <xTaskGetSchedulerState+0x38>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d102      	bne.n	801300e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013008:	2302      	movs	r3, #2
 801300a:	607b      	str	r3, [r7, #4]
 801300c:	e001      	b.n	8013012 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801300e:	2300      	movs	r3, #0
 8013010:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013012:	687b      	ldr	r3, [r7, #4]
	}
 8013014:	4618      	mov	r0, r3
 8013016:	370c      	adds	r7, #12
 8013018:	46bd      	mov	sp, r7
 801301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801301e:	4770      	bx	lr
 8013020:	200009a8 	.word	0x200009a8
 8013024:	200009c4 	.word	0x200009c4

08013028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013028:	b580      	push	{r7, lr}
 801302a:	b086      	sub	sp, #24
 801302c:	af00      	add	r7, sp, #0
 801302e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013034:	2300      	movs	r3, #0
 8013036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d06c      	beq.n	8013118 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801303e:	4b39      	ldr	r3, [pc, #228]	; (8013124 <xTaskPriorityDisinherit+0xfc>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	693a      	ldr	r2, [r7, #16]
 8013044:	429a      	cmp	r2, r3
 8013046:	d009      	beq.n	801305c <xTaskPriorityDisinherit+0x34>
 8013048:	f04f 0350 	mov.w	r3, #80	; 0x50
 801304c:	f383 8811 	msr	BASEPRI, r3
 8013050:	f3bf 8f6f 	isb	sy
 8013054:	f3bf 8f4f 	dsb	sy
 8013058:	60fb      	str	r3, [r7, #12]
 801305a:	e7fe      	b.n	801305a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013060:	2b00      	cmp	r3, #0
 8013062:	d109      	bne.n	8013078 <xTaskPriorityDisinherit+0x50>
 8013064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	60bb      	str	r3, [r7, #8]
 8013076:	e7fe      	b.n	8013076 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8013078:	693b      	ldr	r3, [r7, #16]
 801307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801307c:	1e5a      	subs	r2, r3, #1
 801307e:	693b      	ldr	r3, [r7, #16]
 8013080:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013082:	693b      	ldr	r3, [r7, #16]
 8013084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013086:	693b      	ldr	r3, [r7, #16]
 8013088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801308a:	429a      	cmp	r2, r3
 801308c:	d044      	beq.n	8013118 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013092:	2b00      	cmp	r3, #0
 8013094:	d140      	bne.n	8013118 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013096:	693b      	ldr	r3, [r7, #16]
 8013098:	3304      	adds	r3, #4
 801309a:	4618      	mov	r0, r3
 801309c:	f7fe fc50 	bl	8011940 <uxListRemove>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d115      	bne.n	80130d2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80130a6:	693b      	ldr	r3, [r7, #16]
 80130a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130aa:	491f      	ldr	r1, [pc, #124]	; (8013128 <xTaskPriorityDisinherit+0x100>)
 80130ac:	4613      	mov	r3, r2
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	4413      	add	r3, r2
 80130b2:	009b      	lsls	r3, r3, #2
 80130b4:	440b      	add	r3, r1
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d10a      	bne.n	80130d2 <xTaskPriorityDisinherit+0xaa>
 80130bc:	693b      	ldr	r3, [r7, #16]
 80130be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130c0:	2201      	movs	r2, #1
 80130c2:	fa02 f303 	lsl.w	r3, r2, r3
 80130c6:	43da      	mvns	r2, r3
 80130c8:	4b18      	ldr	r3, [pc, #96]	; (801312c <xTaskPriorityDisinherit+0x104>)
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	4013      	ands	r3, r2
 80130ce:	4a17      	ldr	r2, [pc, #92]	; (801312c <xTaskPriorityDisinherit+0x104>)
 80130d0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80130d2:	693b      	ldr	r3, [r7, #16]
 80130d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80130d6:	693b      	ldr	r3, [r7, #16]
 80130d8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130da:	693b      	ldr	r3, [r7, #16]
 80130dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130de:	f1c3 0207 	rsb	r2, r3, #7
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130ea:	2201      	movs	r2, #1
 80130ec:	409a      	lsls	r2, r3
 80130ee:	4b0f      	ldr	r3, [pc, #60]	; (801312c <xTaskPriorityDisinherit+0x104>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	4313      	orrs	r3, r2
 80130f4:	4a0d      	ldr	r2, [pc, #52]	; (801312c <xTaskPriorityDisinherit+0x104>)
 80130f6:	6013      	str	r3, [r2, #0]
 80130f8:	693b      	ldr	r3, [r7, #16]
 80130fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130fc:	4613      	mov	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	4413      	add	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	4a08      	ldr	r2, [pc, #32]	; (8013128 <xTaskPriorityDisinherit+0x100>)
 8013106:	441a      	add	r2, r3
 8013108:	693b      	ldr	r3, [r7, #16]
 801310a:	3304      	adds	r3, #4
 801310c:	4619      	mov	r1, r3
 801310e:	4610      	mov	r0, r2
 8013110:	f7fe fbb9 	bl	8011886 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013114:	2301      	movs	r3, #1
 8013116:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013118:	697b      	ldr	r3, [r7, #20]
	}
 801311a:	4618      	mov	r0, r3
 801311c:	3718      	adds	r7, #24
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	2000089c 	.word	0x2000089c
 8013128:	200008a0 	.word	0x200008a0
 801312c:	200009a4 	.word	0x200009a4

08013130 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b084      	sub	sp, #16
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801313a:	4b29      	ldr	r3, [pc, #164]	; (80131e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 801313c:	681b      	ldr	r3, [r3, #0]
 801313e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013140:	4b28      	ldr	r3, [pc, #160]	; (80131e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	3304      	adds	r3, #4
 8013146:	4618      	mov	r0, r3
 8013148:	f7fe fbfa 	bl	8011940 <uxListRemove>
 801314c:	4603      	mov	r3, r0
 801314e:	2b00      	cmp	r3, #0
 8013150:	d10b      	bne.n	801316a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8013152:	4b24      	ldr	r3, [pc, #144]	; (80131e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013158:	2201      	movs	r2, #1
 801315a:	fa02 f303 	lsl.w	r3, r2, r3
 801315e:	43da      	mvns	r2, r3
 8013160:	4b21      	ldr	r3, [pc, #132]	; (80131e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	4013      	ands	r3, r2
 8013166:	4a20      	ldr	r2, [pc, #128]	; (80131e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013168:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013170:	d10a      	bne.n	8013188 <prvAddCurrentTaskToDelayedList+0x58>
 8013172:	683b      	ldr	r3, [r7, #0]
 8013174:	2b00      	cmp	r3, #0
 8013176:	d007      	beq.n	8013188 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013178:	4b1a      	ldr	r3, [pc, #104]	; (80131e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	3304      	adds	r3, #4
 801317e:	4619      	mov	r1, r3
 8013180:	481a      	ldr	r0, [pc, #104]	; (80131ec <prvAddCurrentTaskToDelayedList+0xbc>)
 8013182:	f7fe fb80 	bl	8011886 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013186:	e026      	b.n	80131d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013188:	68fa      	ldr	r2, [r7, #12]
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	4413      	add	r3, r2
 801318e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013190:	4b14      	ldr	r3, [pc, #80]	; (80131e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	68ba      	ldr	r2, [r7, #8]
 8013196:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013198:	68ba      	ldr	r2, [r7, #8]
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	429a      	cmp	r2, r3
 801319e:	d209      	bcs.n	80131b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131a0:	4b13      	ldr	r3, [pc, #76]	; (80131f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	4b0f      	ldr	r3, [pc, #60]	; (80131e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	3304      	adds	r3, #4
 80131aa:	4619      	mov	r1, r3
 80131ac:	4610      	mov	r0, r2
 80131ae:	f7fe fb8e 	bl	80118ce <vListInsert>
}
 80131b2:	e010      	b.n	80131d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80131b4:	4b0f      	ldr	r3, [pc, #60]	; (80131f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 80131b6:	681a      	ldr	r2, [r3, #0]
 80131b8:	4b0a      	ldr	r3, [pc, #40]	; (80131e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	3304      	adds	r3, #4
 80131be:	4619      	mov	r1, r3
 80131c0:	4610      	mov	r0, r2
 80131c2:	f7fe fb84 	bl	80118ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80131c6:	4b0c      	ldr	r3, [pc, #48]	; (80131f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	68ba      	ldr	r2, [r7, #8]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d202      	bcs.n	80131d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80131d0:	4a09      	ldr	r2, [pc, #36]	; (80131f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	6013      	str	r3, [r2, #0]
}
 80131d6:	bf00      	nop
 80131d8:	3710      	adds	r7, #16
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	200009a0 	.word	0x200009a0
 80131e4:	2000089c 	.word	0x2000089c
 80131e8:	200009a4 	.word	0x200009a4
 80131ec:	20000988 	.word	0x20000988
 80131f0:	20000958 	.word	0x20000958
 80131f4:	20000954 	.word	0x20000954
 80131f8:	200009bc 	.word	0x200009bc

080131fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80131fc:	b480      	push	{r7}
 80131fe:	b085      	sub	sp, #20
 8013200:	af00      	add	r7, sp, #0
 8013202:	60f8      	str	r0, [r7, #12]
 8013204:	60b9      	str	r1, [r7, #8]
 8013206:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	3b04      	subs	r3, #4
 801320c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013216:	68fb      	ldr	r3, [r7, #12]
 8013218:	3b04      	subs	r3, #4
 801321a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	f023 0201 	bic.w	r2, r3, #1
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	3b04      	subs	r3, #4
 801322a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801322c:	4a0c      	ldr	r2, [pc, #48]	; (8013260 <pxPortInitialiseStack+0x64>)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	3b14      	subs	r3, #20
 8013236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013238:	687a      	ldr	r2, [r7, #4]
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	3b04      	subs	r3, #4
 8013242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013244:	68fb      	ldr	r3, [r7, #12]
 8013246:	f06f 0202 	mvn.w	r2, #2
 801324a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	3b20      	subs	r3, #32
 8013250:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8013252:	68fb      	ldr	r3, [r7, #12]
}
 8013254:	4618      	mov	r0, r3
 8013256:	3714      	adds	r7, #20
 8013258:	46bd      	mov	sp, r7
 801325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325e:	4770      	bx	lr
 8013260:	08013265 	.word	0x08013265

08013264 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013264:	b480      	push	{r7}
 8013266:	b085      	sub	sp, #20
 8013268:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801326a:	2300      	movs	r3, #0
 801326c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801326e:	4b11      	ldr	r3, [pc, #68]	; (80132b4 <prvTaskExitError+0x50>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013276:	d009      	beq.n	801328c <prvTaskExitError+0x28>
 8013278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801327c:	f383 8811 	msr	BASEPRI, r3
 8013280:	f3bf 8f6f 	isb	sy
 8013284:	f3bf 8f4f 	dsb	sy
 8013288:	60fb      	str	r3, [r7, #12]
 801328a:	e7fe      	b.n	801328a <prvTaskExitError+0x26>
 801328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013290:	f383 8811 	msr	BASEPRI, r3
 8013294:	f3bf 8f6f 	isb	sy
 8013298:	f3bf 8f4f 	dsb	sy
 801329c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801329e:	bf00      	nop
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d0fc      	beq.n	80132a0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80132a6:	bf00      	nop
 80132a8:	3714      	adds	r7, #20
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
 80132b2:	bf00      	nop
 80132b4:	200003b4 	.word	0x200003b4
	...

080132c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80132c0:	4b07      	ldr	r3, [pc, #28]	; (80132e0 <pxCurrentTCBConst2>)
 80132c2:	6819      	ldr	r1, [r3, #0]
 80132c4:	6808      	ldr	r0, [r1, #0]
 80132c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132ca:	f380 8809 	msr	PSP, r0
 80132ce:	f3bf 8f6f 	isb	sy
 80132d2:	f04f 0000 	mov.w	r0, #0
 80132d6:	f380 8811 	msr	BASEPRI, r0
 80132da:	4770      	bx	lr
 80132dc:	f3af 8000 	nop.w

080132e0 <pxCurrentTCBConst2>:
 80132e0:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80132e4:	bf00      	nop
 80132e6:	bf00      	nop

080132e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80132e8:	4808      	ldr	r0, [pc, #32]	; (801330c <prvPortStartFirstTask+0x24>)
 80132ea:	6800      	ldr	r0, [r0, #0]
 80132ec:	6800      	ldr	r0, [r0, #0]
 80132ee:	f380 8808 	msr	MSP, r0
 80132f2:	f04f 0000 	mov.w	r0, #0
 80132f6:	f380 8814 	msr	CONTROL, r0
 80132fa:	b662      	cpsie	i
 80132fc:	b661      	cpsie	f
 80132fe:	f3bf 8f4f 	dsb	sy
 8013302:	f3bf 8f6f 	isb	sy
 8013306:	df00      	svc	0
 8013308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801330a:	bf00      	nop
 801330c:	e000ed08 	.word	0xe000ed08

08013310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b086      	sub	sp, #24
 8013314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8013316:	4b44      	ldr	r3, [pc, #272]	; (8013428 <xPortStartScheduler+0x118>)
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4a44      	ldr	r2, [pc, #272]	; (801342c <xPortStartScheduler+0x11c>)
 801331c:	4293      	cmp	r3, r2
 801331e:	d109      	bne.n	8013334 <xPortStartScheduler+0x24>
 8013320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013324:	f383 8811 	msr	BASEPRI, r3
 8013328:	f3bf 8f6f 	isb	sy
 801332c:	f3bf 8f4f 	dsb	sy
 8013330:	613b      	str	r3, [r7, #16]
 8013332:	e7fe      	b.n	8013332 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8013334:	4b3c      	ldr	r3, [pc, #240]	; (8013428 <xPortStartScheduler+0x118>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	4a3d      	ldr	r2, [pc, #244]	; (8013430 <xPortStartScheduler+0x120>)
 801333a:	4293      	cmp	r3, r2
 801333c:	d109      	bne.n	8013352 <xPortStartScheduler+0x42>
 801333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013342:	f383 8811 	msr	BASEPRI, r3
 8013346:	f3bf 8f6f 	isb	sy
 801334a:	f3bf 8f4f 	dsb	sy
 801334e:	60fb      	str	r3, [r7, #12]
 8013350:	e7fe      	b.n	8013350 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013352:	4b38      	ldr	r3, [pc, #224]	; (8013434 <xPortStartScheduler+0x124>)
 8013354:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	781b      	ldrb	r3, [r3, #0]
 801335a:	b2db      	uxtb	r3, r3
 801335c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801335e:	697b      	ldr	r3, [r7, #20]
 8013360:	22ff      	movs	r2, #255	; 0xff
 8013362:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013364:	697b      	ldr	r3, [r7, #20]
 8013366:	781b      	ldrb	r3, [r3, #0]
 8013368:	b2db      	uxtb	r3, r3
 801336a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801336c:	78fb      	ldrb	r3, [r7, #3]
 801336e:	b2db      	uxtb	r3, r3
 8013370:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013374:	b2da      	uxtb	r2, r3
 8013376:	4b30      	ldr	r3, [pc, #192]	; (8013438 <xPortStartScheduler+0x128>)
 8013378:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801337a:	4b30      	ldr	r3, [pc, #192]	; (801343c <xPortStartScheduler+0x12c>)
 801337c:	2207      	movs	r2, #7
 801337e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013380:	e009      	b.n	8013396 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8013382:	4b2e      	ldr	r3, [pc, #184]	; (801343c <xPortStartScheduler+0x12c>)
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	3b01      	subs	r3, #1
 8013388:	4a2c      	ldr	r2, [pc, #176]	; (801343c <xPortStartScheduler+0x12c>)
 801338a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801338c:	78fb      	ldrb	r3, [r7, #3]
 801338e:	b2db      	uxtb	r3, r3
 8013390:	005b      	lsls	r3, r3, #1
 8013392:	b2db      	uxtb	r3, r3
 8013394:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013396:	78fb      	ldrb	r3, [r7, #3]
 8013398:	b2db      	uxtb	r3, r3
 801339a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801339e:	2b80      	cmp	r3, #128	; 0x80
 80133a0:	d0ef      	beq.n	8013382 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80133a2:	4b26      	ldr	r3, [pc, #152]	; (801343c <xPortStartScheduler+0x12c>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	f1c3 0307 	rsb	r3, r3, #7
 80133aa:	2b04      	cmp	r3, #4
 80133ac:	d009      	beq.n	80133c2 <xPortStartScheduler+0xb2>
 80133ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b2:	f383 8811 	msr	BASEPRI, r3
 80133b6:	f3bf 8f6f 	isb	sy
 80133ba:	f3bf 8f4f 	dsb	sy
 80133be:	60bb      	str	r3, [r7, #8]
 80133c0:	e7fe      	b.n	80133c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80133c2:	4b1e      	ldr	r3, [pc, #120]	; (801343c <xPortStartScheduler+0x12c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	021b      	lsls	r3, r3, #8
 80133c8:	4a1c      	ldr	r2, [pc, #112]	; (801343c <xPortStartScheduler+0x12c>)
 80133ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80133cc:	4b1b      	ldr	r3, [pc, #108]	; (801343c <xPortStartScheduler+0x12c>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80133d4:	4a19      	ldr	r2, [pc, #100]	; (801343c <xPortStartScheduler+0x12c>)
 80133d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	b2da      	uxtb	r2, r3
 80133dc:	697b      	ldr	r3, [r7, #20]
 80133de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80133e0:	4b17      	ldr	r3, [pc, #92]	; (8013440 <xPortStartScheduler+0x130>)
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	4a16      	ldr	r2, [pc, #88]	; (8013440 <xPortStartScheduler+0x130>)
 80133e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80133ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80133ec:	4b14      	ldr	r3, [pc, #80]	; (8013440 <xPortStartScheduler+0x130>)
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4a13      	ldr	r2, [pc, #76]	; (8013440 <xPortStartScheduler+0x130>)
 80133f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80133f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80133f8:	f000 f8d6 	bl	80135a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80133fc:	4b11      	ldr	r3, [pc, #68]	; (8013444 <xPortStartScheduler+0x134>)
 80133fe:	2200      	movs	r2, #0
 8013400:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8013402:	f000 f8f5 	bl	80135f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013406:	4b10      	ldr	r3, [pc, #64]	; (8013448 <xPortStartScheduler+0x138>)
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	4a0f      	ldr	r2, [pc, #60]	; (8013448 <xPortStartScheduler+0x138>)
 801340c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013410:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8013412:	f7ff ff69 	bl	80132e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013416:	f7ff fbb5 	bl	8012b84 <vTaskSwitchContext>
	prvTaskExitError();
 801341a:	f7ff ff23 	bl	8013264 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801341e:	2300      	movs	r3, #0
}
 8013420:	4618      	mov	r0, r3
 8013422:	3718      	adds	r7, #24
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	e000ed00 	.word	0xe000ed00
 801342c:	410fc271 	.word	0x410fc271
 8013430:	410fc270 	.word	0x410fc270
 8013434:	e000e400 	.word	0xe000e400
 8013438:	200009c8 	.word	0x200009c8
 801343c:	200009cc 	.word	0x200009cc
 8013440:	e000ed20 	.word	0xe000ed20
 8013444:	200003b4 	.word	0x200003b4
 8013448:	e000ef34 	.word	0xe000ef34

0801344c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
 8013452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013464:	4b0e      	ldr	r3, [pc, #56]	; (80134a0 <vPortEnterCritical+0x54>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	3301      	adds	r3, #1
 801346a:	4a0d      	ldr	r2, [pc, #52]	; (80134a0 <vPortEnterCritical+0x54>)
 801346c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801346e:	4b0c      	ldr	r3, [pc, #48]	; (80134a0 <vPortEnterCritical+0x54>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	2b01      	cmp	r3, #1
 8013474:	d10e      	bne.n	8013494 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013476:	4b0b      	ldr	r3, [pc, #44]	; (80134a4 <vPortEnterCritical+0x58>)
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	b2db      	uxtb	r3, r3
 801347c:	2b00      	cmp	r3, #0
 801347e:	d009      	beq.n	8013494 <vPortEnterCritical+0x48>
 8013480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013484:	f383 8811 	msr	BASEPRI, r3
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	603b      	str	r3, [r7, #0]
 8013492:	e7fe      	b.n	8013492 <vPortEnterCritical+0x46>
	}
}
 8013494:	bf00      	nop
 8013496:	370c      	adds	r7, #12
 8013498:	46bd      	mov	sp, r7
 801349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349e:	4770      	bx	lr
 80134a0:	200003b4 	.word	0x200003b4
 80134a4:	e000ed04 	.word	0xe000ed04

080134a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80134a8:	b480      	push	{r7}
 80134aa:	b083      	sub	sp, #12
 80134ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80134ae:	4b11      	ldr	r3, [pc, #68]	; (80134f4 <vPortExitCritical+0x4c>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d109      	bne.n	80134ca <vPortExitCritical+0x22>
 80134b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ba:	f383 8811 	msr	BASEPRI, r3
 80134be:	f3bf 8f6f 	isb	sy
 80134c2:	f3bf 8f4f 	dsb	sy
 80134c6:	607b      	str	r3, [r7, #4]
 80134c8:	e7fe      	b.n	80134c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80134ca:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <vPortExitCritical+0x4c>)
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	3b01      	subs	r3, #1
 80134d0:	4a08      	ldr	r2, [pc, #32]	; (80134f4 <vPortExitCritical+0x4c>)
 80134d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80134d4:	4b07      	ldr	r3, [pc, #28]	; (80134f4 <vPortExitCritical+0x4c>)
 80134d6:	681b      	ldr	r3, [r3, #0]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d104      	bne.n	80134e6 <vPortExitCritical+0x3e>
 80134dc:	2300      	movs	r3, #0
 80134de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80134e6:	bf00      	nop
 80134e8:	370c      	adds	r7, #12
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop
 80134f4:	200003b4 	.word	0x200003b4
	...

08013500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013500:	f3ef 8009 	mrs	r0, PSP
 8013504:	f3bf 8f6f 	isb	sy
 8013508:	4b15      	ldr	r3, [pc, #84]	; (8013560 <pxCurrentTCBConst>)
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	f01e 0f10 	tst.w	lr, #16
 8013510:	bf08      	it	eq
 8013512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801351a:	6010      	str	r0, [r2, #0]
 801351c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013520:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013524:	f380 8811 	msr	BASEPRI, r0
 8013528:	f3bf 8f4f 	dsb	sy
 801352c:	f3bf 8f6f 	isb	sy
 8013530:	f7ff fb28 	bl	8012b84 <vTaskSwitchContext>
 8013534:	f04f 0000 	mov.w	r0, #0
 8013538:	f380 8811 	msr	BASEPRI, r0
 801353c:	bc09      	pop	{r0, r3}
 801353e:	6819      	ldr	r1, [r3, #0]
 8013540:	6808      	ldr	r0, [r1, #0]
 8013542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013546:	f01e 0f10 	tst.w	lr, #16
 801354a:	bf08      	it	eq
 801354c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013550:	f380 8809 	msr	PSP, r0
 8013554:	f3bf 8f6f 	isb	sy
 8013558:	4770      	bx	lr
 801355a:	bf00      	nop
 801355c:	f3af 8000 	nop.w

08013560 <pxCurrentTCBConst>:
 8013560:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013564:	bf00      	nop
 8013566:	bf00      	nop

08013568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b082      	sub	sp, #8
 801356c:	af00      	add	r7, sp, #0
	__asm volatile
 801356e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013572:	f383 8811 	msr	BASEPRI, r3
 8013576:	f3bf 8f6f 	isb	sy
 801357a:	f3bf 8f4f 	dsb	sy
 801357e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013580:	f7ff fa48 	bl	8012a14 <xTaskIncrementTick>
 8013584:	4603      	mov	r3, r0
 8013586:	2b00      	cmp	r3, #0
 8013588:	d003      	beq.n	8013592 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801358a:	4b06      	ldr	r3, [pc, #24]	; (80135a4 <SysTick_Handler+0x3c>)
 801358c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013590:	601a      	str	r2, [r3, #0]
 8013592:	2300      	movs	r3, #0
 8013594:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013596:	683b      	ldr	r3, [r7, #0]
 8013598:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801359c:	bf00      	nop
 801359e:	3708      	adds	r7, #8
 80135a0:	46bd      	mov	sp, r7
 80135a2:	bd80      	pop	{r7, pc}
 80135a4:	e000ed04 	.word	0xe000ed04

080135a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80135a8:	b480      	push	{r7}
 80135aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80135ac:	4b0b      	ldr	r3, [pc, #44]	; (80135dc <vPortSetupTimerInterrupt+0x34>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80135b2:	4b0b      	ldr	r3, [pc, #44]	; (80135e0 <vPortSetupTimerInterrupt+0x38>)
 80135b4:	2200      	movs	r2, #0
 80135b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80135b8:	4b0a      	ldr	r3, [pc, #40]	; (80135e4 <vPortSetupTimerInterrupt+0x3c>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	4a0a      	ldr	r2, [pc, #40]	; (80135e8 <vPortSetupTimerInterrupt+0x40>)
 80135be:	fba2 2303 	umull	r2, r3, r2, r3
 80135c2:	099b      	lsrs	r3, r3, #6
 80135c4:	4a09      	ldr	r2, [pc, #36]	; (80135ec <vPortSetupTimerInterrupt+0x44>)
 80135c6:	3b01      	subs	r3, #1
 80135c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80135ca:	4b04      	ldr	r3, [pc, #16]	; (80135dc <vPortSetupTimerInterrupt+0x34>)
 80135cc:	2207      	movs	r2, #7
 80135ce:	601a      	str	r2, [r3, #0]
}
 80135d0:	bf00      	nop
 80135d2:	46bd      	mov	sp, r7
 80135d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135d8:	4770      	bx	lr
 80135da:	bf00      	nop
 80135dc:	e000e010 	.word	0xe000e010
 80135e0:	e000e018 	.word	0xe000e018
 80135e4:	20000280 	.word	0x20000280
 80135e8:	10624dd3 	.word	0x10624dd3
 80135ec:	e000e014 	.word	0xe000e014

080135f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80135f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013600 <vPortEnableVFP+0x10>
 80135f4:	6801      	ldr	r1, [r0, #0]
 80135f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80135fa:	6001      	str	r1, [r0, #0]
 80135fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80135fe:	bf00      	nop
 8013600:	e000ed88 	.word	0xe000ed88

08013604 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8013604:	b480      	push	{r7}
 8013606:	b085      	sub	sp, #20
 8013608:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801360a:	f3ef 8305 	mrs	r3, IPSR
 801360e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	2b0f      	cmp	r3, #15
 8013614:	d913      	bls.n	801363e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8013616:	4a16      	ldr	r2, [pc, #88]	; (8013670 <vPortValidateInterruptPriority+0x6c>)
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	4413      	add	r3, r2
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013620:	4b14      	ldr	r3, [pc, #80]	; (8013674 <vPortValidateInterruptPriority+0x70>)
 8013622:	781b      	ldrb	r3, [r3, #0]
 8013624:	7afa      	ldrb	r2, [r7, #11]
 8013626:	429a      	cmp	r2, r3
 8013628:	d209      	bcs.n	801363e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 801362a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362e:	f383 8811 	msr	BASEPRI, r3
 8013632:	f3bf 8f6f 	isb	sy
 8013636:	f3bf 8f4f 	dsb	sy
 801363a:	607b      	str	r3, [r7, #4]
 801363c:	e7fe      	b.n	801363c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801363e:	4b0e      	ldr	r3, [pc, #56]	; (8013678 <vPortValidateInterruptPriority+0x74>)
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013646:	4b0d      	ldr	r3, [pc, #52]	; (801367c <vPortValidateInterruptPriority+0x78>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	429a      	cmp	r2, r3
 801364c:	d909      	bls.n	8013662 <vPortValidateInterruptPriority+0x5e>
 801364e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013652:	f383 8811 	msr	BASEPRI, r3
 8013656:	f3bf 8f6f 	isb	sy
 801365a:	f3bf 8f4f 	dsb	sy
 801365e:	603b      	str	r3, [r7, #0]
 8013660:	e7fe      	b.n	8013660 <vPortValidateInterruptPriority+0x5c>
	}
 8013662:	bf00      	nop
 8013664:	3714      	adds	r7, #20
 8013666:	46bd      	mov	sp, r7
 8013668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801366c:	4770      	bx	lr
 801366e:	bf00      	nop
 8013670:	e000e3f0 	.word	0xe000e3f0
 8013674:	200009c8 	.word	0x200009c8
 8013678:	e000ed0c 	.word	0xe000ed0c
 801367c:	200009cc 	.word	0x200009cc

08013680 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b08a      	sub	sp, #40	; 0x28
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013688:	2300      	movs	r3, #0
 801368a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801368c:	f7ff f8f6 	bl	801287c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013690:	4b57      	ldr	r3, [pc, #348]	; (80137f0 <pvPortMalloc+0x170>)
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d101      	bne.n	801369c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013698:	f000 f90c 	bl	80138b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801369c:	4b55      	ldr	r3, [pc, #340]	; (80137f4 <pvPortMalloc+0x174>)
 801369e:	681a      	ldr	r2, [r3, #0]
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	4013      	ands	r3, r2
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	f040 808c 	bne.w	80137c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d01c      	beq.n	80136ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80136b0:	2208      	movs	r2, #8
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4413      	add	r3, r2
 80136b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f003 0307 	and.w	r3, r3, #7
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d013      	beq.n	80136ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	f023 0307 	bic.w	r3, r3, #7
 80136c8:	3308      	adds	r3, #8
 80136ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	f003 0307 	and.w	r3, r3, #7
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d009      	beq.n	80136ea <pvPortMalloc+0x6a>
 80136d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136da:	f383 8811 	msr	BASEPRI, r3
 80136de:	f3bf 8f6f 	isb	sy
 80136e2:	f3bf 8f4f 	dsb	sy
 80136e6:	617b      	str	r3, [r7, #20]
 80136e8:	e7fe      	b.n	80136e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2b00      	cmp	r3, #0
 80136ee:	d068      	beq.n	80137c2 <pvPortMalloc+0x142>
 80136f0:	4b41      	ldr	r3, [pc, #260]	; (80137f8 <pvPortMalloc+0x178>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	687a      	ldr	r2, [r7, #4]
 80136f6:	429a      	cmp	r2, r3
 80136f8:	d863      	bhi.n	80137c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80136fa:	4b40      	ldr	r3, [pc, #256]	; (80137fc <pvPortMalloc+0x17c>)
 80136fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80136fe:	4b3f      	ldr	r3, [pc, #252]	; (80137fc <pvPortMalloc+0x17c>)
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013704:	e004      	b.n	8013710 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8013706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801370a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013712:	685b      	ldr	r3, [r3, #4]
 8013714:	687a      	ldr	r2, [r7, #4]
 8013716:	429a      	cmp	r2, r3
 8013718:	d903      	bls.n	8013722 <pvPortMalloc+0xa2>
 801371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d1f1      	bne.n	8013706 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013722:	4b33      	ldr	r3, [pc, #204]	; (80137f0 <pvPortMalloc+0x170>)
 8013724:	681b      	ldr	r3, [r3, #0]
 8013726:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013728:	429a      	cmp	r2, r3
 801372a:	d04a      	beq.n	80137c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801372c:	6a3b      	ldr	r3, [r7, #32]
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	2208      	movs	r2, #8
 8013732:	4413      	add	r3, r2
 8013734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013738:	681a      	ldr	r2, [r3, #0]
 801373a:	6a3b      	ldr	r3, [r7, #32]
 801373c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013740:	685a      	ldr	r2, [r3, #4]
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	1ad2      	subs	r2, r2, r3
 8013746:	2308      	movs	r3, #8
 8013748:	005b      	lsls	r3, r3, #1
 801374a:	429a      	cmp	r2, r3
 801374c:	d91e      	bls.n	801378c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801374e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	4413      	add	r3, r2
 8013754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013756:	69bb      	ldr	r3, [r7, #24]
 8013758:	f003 0307 	and.w	r3, r3, #7
 801375c:	2b00      	cmp	r3, #0
 801375e:	d009      	beq.n	8013774 <pvPortMalloc+0xf4>
 8013760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013764:	f383 8811 	msr	BASEPRI, r3
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	613b      	str	r3, [r7, #16]
 8013772:	e7fe      	b.n	8013772 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013776:	685a      	ldr	r2, [r3, #4]
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	1ad2      	subs	r2, r2, r3
 801377c:	69bb      	ldr	r3, [r7, #24]
 801377e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013786:	69b8      	ldr	r0, [r7, #24]
 8013788:	f000 f8f6 	bl	8013978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801378c:	4b1a      	ldr	r3, [pc, #104]	; (80137f8 <pvPortMalloc+0x178>)
 801378e:	681a      	ldr	r2, [r3, #0]
 8013790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013792:	685b      	ldr	r3, [r3, #4]
 8013794:	1ad3      	subs	r3, r2, r3
 8013796:	4a18      	ldr	r2, [pc, #96]	; (80137f8 <pvPortMalloc+0x178>)
 8013798:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801379a:	4b17      	ldr	r3, [pc, #92]	; (80137f8 <pvPortMalloc+0x178>)
 801379c:	681a      	ldr	r2, [r3, #0]
 801379e:	4b18      	ldr	r3, [pc, #96]	; (8013800 <pvPortMalloc+0x180>)
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	429a      	cmp	r2, r3
 80137a4:	d203      	bcs.n	80137ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80137a6:	4b14      	ldr	r3, [pc, #80]	; (80137f8 <pvPortMalloc+0x178>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4a15      	ldr	r2, [pc, #84]	; (8013800 <pvPortMalloc+0x180>)
 80137ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80137ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137b0:	685a      	ldr	r2, [r3, #4]
 80137b2:	4b10      	ldr	r3, [pc, #64]	; (80137f4 <pvPortMalloc+0x174>)
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	431a      	orrs	r2, r3
 80137b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80137bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137be:	2200      	movs	r2, #0
 80137c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80137c2:	f7ff f869 	bl	8012898 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	f003 0307 	and.w	r3, r3, #7
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d009      	beq.n	80137e4 <pvPortMalloc+0x164>
 80137d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137d4:	f383 8811 	msr	BASEPRI, r3
 80137d8:	f3bf 8f6f 	isb	sy
 80137dc:	f3bf 8f4f 	dsb	sy
 80137e0:	60fb      	str	r3, [r7, #12]
 80137e2:	e7fe      	b.n	80137e2 <pvPortMalloc+0x162>
	return pvReturn;
 80137e4:	69fb      	ldr	r3, [r7, #28]
}
 80137e6:	4618      	mov	r0, r3
 80137e8:	3728      	adds	r7, #40	; 0x28
 80137ea:	46bd      	mov	sp, r7
 80137ec:	bd80      	pop	{r7, pc}
 80137ee:	bf00      	nop
 80137f0:	200045d8 	.word	0x200045d8
 80137f4:	200045e4 	.word	0x200045e4
 80137f8:	200045dc 	.word	0x200045dc
 80137fc:	200045d0 	.word	0x200045d0
 8013800:	200045e0 	.word	0x200045e0

08013804 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b086      	sub	sp, #24
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d046      	beq.n	80138a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013816:	2308      	movs	r3, #8
 8013818:	425b      	negs	r3, r3
 801381a:	697a      	ldr	r2, [r7, #20]
 801381c:	4413      	add	r3, r2
 801381e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	685a      	ldr	r2, [r3, #4]
 8013828:	4b20      	ldr	r3, [pc, #128]	; (80138ac <vPortFree+0xa8>)
 801382a:	681b      	ldr	r3, [r3, #0]
 801382c:	4013      	ands	r3, r2
 801382e:	2b00      	cmp	r3, #0
 8013830:	d109      	bne.n	8013846 <vPortFree+0x42>
 8013832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013836:	f383 8811 	msr	BASEPRI, r3
 801383a:	f3bf 8f6f 	isb	sy
 801383e:	f3bf 8f4f 	dsb	sy
 8013842:	60fb      	str	r3, [r7, #12]
 8013844:	e7fe      	b.n	8013844 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013846:	693b      	ldr	r3, [r7, #16]
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d009      	beq.n	8013862 <vPortFree+0x5e>
 801384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013852:	f383 8811 	msr	BASEPRI, r3
 8013856:	f3bf 8f6f 	isb	sy
 801385a:	f3bf 8f4f 	dsb	sy
 801385e:	60bb      	str	r3, [r7, #8]
 8013860:	e7fe      	b.n	8013860 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	685a      	ldr	r2, [r3, #4]
 8013866:	4b11      	ldr	r3, [pc, #68]	; (80138ac <vPortFree+0xa8>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	4013      	ands	r3, r2
 801386c:	2b00      	cmp	r3, #0
 801386e:	d019      	beq.n	80138a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013870:	693b      	ldr	r3, [r7, #16]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d115      	bne.n	80138a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	685a      	ldr	r2, [r3, #4]
 801387c:	4b0b      	ldr	r3, [pc, #44]	; (80138ac <vPortFree+0xa8>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	43db      	mvns	r3, r3
 8013882:	401a      	ands	r2, r3
 8013884:	693b      	ldr	r3, [r7, #16]
 8013886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013888:	f7fe fff8 	bl	801287c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	685a      	ldr	r2, [r3, #4]
 8013890:	4b07      	ldr	r3, [pc, #28]	; (80138b0 <vPortFree+0xac>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	4413      	add	r3, r2
 8013896:	4a06      	ldr	r2, [pc, #24]	; (80138b0 <vPortFree+0xac>)
 8013898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801389a:	6938      	ldr	r0, [r7, #16]
 801389c:	f000 f86c 	bl	8013978 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80138a0:	f7fe fffa 	bl	8012898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80138a4:	bf00      	nop
 80138a6:	3718      	adds	r7, #24
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	200045e4 	.word	0x200045e4
 80138b0:	200045dc 	.word	0x200045dc

080138b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80138b4:	b480      	push	{r7}
 80138b6:	b085      	sub	sp, #20
 80138b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80138ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80138be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80138c0:	4b27      	ldr	r3, [pc, #156]	; (8013960 <prvHeapInit+0xac>)
 80138c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f003 0307 	and.w	r3, r3, #7
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d00c      	beq.n	80138e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	3307      	adds	r3, #7
 80138d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80138d4:	68fb      	ldr	r3, [r7, #12]
 80138d6:	f023 0307 	bic.w	r3, r3, #7
 80138da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80138dc:	68ba      	ldr	r2, [r7, #8]
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	1ad3      	subs	r3, r2, r3
 80138e2:	4a1f      	ldr	r2, [pc, #124]	; (8013960 <prvHeapInit+0xac>)
 80138e4:	4413      	add	r3, r2
 80138e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80138e8:	68fb      	ldr	r3, [r7, #12]
 80138ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80138ec:	4a1d      	ldr	r2, [pc, #116]	; (8013964 <prvHeapInit+0xb0>)
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80138f2:	4b1c      	ldr	r3, [pc, #112]	; (8013964 <prvHeapInit+0xb0>)
 80138f4:	2200      	movs	r2, #0
 80138f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	68ba      	ldr	r2, [r7, #8]
 80138fc:	4413      	add	r3, r2
 80138fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013900:	2208      	movs	r2, #8
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	1a9b      	subs	r3, r3, r2
 8013906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	f023 0307 	bic.w	r3, r3, #7
 801390e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	4a15      	ldr	r2, [pc, #84]	; (8013968 <prvHeapInit+0xb4>)
 8013914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013916:	4b14      	ldr	r3, [pc, #80]	; (8013968 <prvHeapInit+0xb4>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	2200      	movs	r2, #0
 801391c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801391e:	4b12      	ldr	r3, [pc, #72]	; (8013968 <prvHeapInit+0xb4>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2200      	movs	r2, #0
 8013924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	68fa      	ldr	r2, [r7, #12]
 801392e:	1ad2      	subs	r2, r2, r3
 8013930:	683b      	ldr	r3, [r7, #0]
 8013932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013934:	4b0c      	ldr	r3, [pc, #48]	; (8013968 <prvHeapInit+0xb4>)
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	4a0a      	ldr	r2, [pc, #40]	; (801396c <prvHeapInit+0xb8>)
 8013942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	4a09      	ldr	r2, [pc, #36]	; (8013970 <prvHeapInit+0xbc>)
 801394a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801394c:	4b09      	ldr	r3, [pc, #36]	; (8013974 <prvHeapInit+0xc0>)
 801394e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013952:	601a      	str	r2, [r3, #0]
}
 8013954:	bf00      	nop
 8013956:	3714      	adds	r7, #20
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr
 8013960:	200009d0 	.word	0x200009d0
 8013964:	200045d0 	.word	0x200045d0
 8013968:	200045d8 	.word	0x200045d8
 801396c:	200045e0 	.word	0x200045e0
 8013970:	200045dc 	.word	0x200045dc
 8013974:	200045e4 	.word	0x200045e4

08013978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013978:	b480      	push	{r7}
 801397a:	b085      	sub	sp, #20
 801397c:	af00      	add	r7, sp, #0
 801397e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013980:	4b28      	ldr	r3, [pc, #160]	; (8013a24 <prvInsertBlockIntoFreeList+0xac>)
 8013982:	60fb      	str	r3, [r7, #12]
 8013984:	e002      	b.n	801398c <prvInsertBlockIntoFreeList+0x14>
 8013986:	68fb      	ldr	r3, [r7, #12]
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	60fb      	str	r3, [r7, #12]
 801398c:	68fb      	ldr	r3, [r7, #12]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	429a      	cmp	r2, r3
 8013994:	d8f7      	bhi.n	8013986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013996:	68fb      	ldr	r3, [r7, #12]
 8013998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	4413      	add	r3, r2
 80139a2:	687a      	ldr	r2, [r7, #4]
 80139a4:	429a      	cmp	r2, r3
 80139a6:	d108      	bne.n	80139ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	685a      	ldr	r2, [r3, #4]
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	441a      	add	r2, r3
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	685b      	ldr	r3, [r3, #4]
 80139c2:	68ba      	ldr	r2, [r7, #8]
 80139c4:	441a      	add	r2, r3
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	429a      	cmp	r2, r3
 80139cc:	d118      	bne.n	8013a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681a      	ldr	r2, [r3, #0]
 80139d2:	4b15      	ldr	r3, [pc, #84]	; (8013a28 <prvInsertBlockIntoFreeList+0xb0>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d00d      	beq.n	80139f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	685a      	ldr	r2, [r3, #4]
 80139de:	68fb      	ldr	r3, [r7, #12]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	685b      	ldr	r3, [r3, #4]
 80139e4:	441a      	add	r2, r3
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	681a      	ldr	r2, [r3, #0]
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	601a      	str	r2, [r3, #0]
 80139f4:	e008      	b.n	8013a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80139f6:	4b0c      	ldr	r3, [pc, #48]	; (8013a28 <prvInsertBlockIntoFreeList+0xb0>)
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	601a      	str	r2, [r3, #0]
 80139fe:	e003      	b.n	8013a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681a      	ldr	r2, [r3, #0]
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013a08:	68fa      	ldr	r2, [r7, #12]
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d002      	beq.n	8013a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	687a      	ldr	r2, [r7, #4]
 8013a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a16:	bf00      	nop
 8013a18:	3714      	adds	r7, #20
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	200045d0 	.word	0x200045d0
 8013a28:	200045d8 	.word	0x200045d8

08013a2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8013a2c:	b580      	push	{r7, lr}
 8013a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013a30:	2200      	movs	r2, #0
 8013a32:	4912      	ldr	r1, [pc, #72]	; (8013a7c <MX_USB_DEVICE_Init+0x50>)
 8013a34:	4812      	ldr	r0, [pc, #72]	; (8013a80 <MX_USB_DEVICE_Init+0x54>)
 8013a36:	f7fc fbe3 	bl	8010200 <USBD_Init>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d001      	beq.n	8013a44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013a40:	f7f2 fe96 	bl	8006770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013a44:	490f      	ldr	r1, [pc, #60]	; (8013a84 <MX_USB_DEVICE_Init+0x58>)
 8013a46:	480e      	ldr	r0, [pc, #56]	; (8013a80 <MX_USB_DEVICE_Init+0x54>)
 8013a48:	f7fc fc10 	bl	801026c <USBD_RegisterClass>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d001      	beq.n	8013a56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8013a52:	f7f2 fe8d 	bl	8006770 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8013a56:	490c      	ldr	r1, [pc, #48]	; (8013a88 <MX_USB_DEVICE_Init+0x5c>)
 8013a58:	4809      	ldr	r0, [pc, #36]	; (8013a80 <MX_USB_DEVICE_Init+0x54>)
 8013a5a:	f7fc fb35 	bl	80100c8 <USBD_CDC_RegisterInterface>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d001      	beq.n	8013a68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8013a64:	f7f2 fe84 	bl	8006770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8013a68:	4805      	ldr	r0, [pc, #20]	; (8013a80 <MX_USB_DEVICE_Init+0x54>)
 8013a6a:	f7fc fc20 	bl	80102ae <USBD_Start>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d001      	beq.n	8013a78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8013a74:	f7f2 fe7c 	bl	8006770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8013a78:	bf00      	nop
 8013a7a:	bd80      	pop	{r7, pc}
 8013a7c:	200003d4 	.word	0x200003d4
 8013a80:	200051c8 	.word	0x200051c8
 8013a84:	200002b0 	.word	0x200002b0
 8013a88:	200003c0 	.word	0x200003c0

08013a8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8013a90:	2200      	movs	r2, #0
 8013a92:	4905      	ldr	r1, [pc, #20]	; (8013aa8 <CDC_Init_FS+0x1c>)
 8013a94:	4805      	ldr	r0, [pc, #20]	; (8013aac <CDC_Init_FS+0x20>)
 8013a96:	f7fc fb2c 	bl	80100f2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8013a9a:	4905      	ldr	r1, [pc, #20]	; (8013ab0 <CDC_Init_FS+0x24>)
 8013a9c:	4803      	ldr	r0, [pc, #12]	; (8013aac <CDC_Init_FS+0x20>)
 8013a9e:	f7fc fb41 	bl	8010124 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8013aa2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	20005c98 	.word	0x20005c98
 8013aac:	200051c8 	.word	0x200051c8
 8013ab0:	20005498 	.word	0x20005498

08013ab4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013ab4:	b480      	push	{r7}
 8013ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8013ab8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	46bd      	mov	sp, r7
 8013abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac2:	4770      	bx	lr

08013ac4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013ac4:	b480      	push	{r7}
 8013ac6:	b083      	sub	sp, #12
 8013ac8:	af00      	add	r7, sp, #0
 8013aca:	4603      	mov	r3, r0
 8013acc:	6039      	str	r1, [r7, #0]
 8013ace:	71fb      	strb	r3, [r7, #7]
 8013ad0:	4613      	mov	r3, r2
 8013ad2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013ad4:	79fb      	ldrb	r3, [r7, #7]
 8013ad6:	2b23      	cmp	r3, #35	; 0x23
 8013ad8:	d85c      	bhi.n	8013b94 <CDC_Control_FS+0xd0>
 8013ada:	a201      	add	r2, pc, #4	; (adr r2, 8013ae0 <CDC_Control_FS+0x1c>)
 8013adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ae0:	08013b95 	.word	0x08013b95
 8013ae4:	08013b95 	.word	0x08013b95
 8013ae8:	08013b95 	.word	0x08013b95
 8013aec:	08013b95 	.word	0x08013b95
 8013af0:	08013b95 	.word	0x08013b95
 8013af4:	08013b95 	.word	0x08013b95
 8013af8:	08013b95 	.word	0x08013b95
 8013afc:	08013b95 	.word	0x08013b95
 8013b00:	08013b95 	.word	0x08013b95
 8013b04:	08013b95 	.word	0x08013b95
 8013b08:	08013b95 	.word	0x08013b95
 8013b0c:	08013b95 	.word	0x08013b95
 8013b10:	08013b95 	.word	0x08013b95
 8013b14:	08013b95 	.word	0x08013b95
 8013b18:	08013b95 	.word	0x08013b95
 8013b1c:	08013b95 	.word	0x08013b95
 8013b20:	08013b95 	.word	0x08013b95
 8013b24:	08013b95 	.word	0x08013b95
 8013b28:	08013b95 	.word	0x08013b95
 8013b2c:	08013b95 	.word	0x08013b95
 8013b30:	08013b95 	.word	0x08013b95
 8013b34:	08013b95 	.word	0x08013b95
 8013b38:	08013b95 	.word	0x08013b95
 8013b3c:	08013b95 	.word	0x08013b95
 8013b40:	08013b95 	.word	0x08013b95
 8013b44:	08013b95 	.word	0x08013b95
 8013b48:	08013b95 	.word	0x08013b95
 8013b4c:	08013b95 	.word	0x08013b95
 8013b50:	08013b95 	.word	0x08013b95
 8013b54:	08013b95 	.word	0x08013b95
 8013b58:	08013b95 	.word	0x08013b95
 8013b5c:	08013b95 	.word	0x08013b95
 8013b60:	08013b71 	.word	0x08013b71
 8013b64:	08013b83 	.word	0x08013b83
 8013b68:	08013b95 	.word	0x08013b95
 8013b6c:	08013b95 	.word	0x08013b95
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
        memcpy(lineCoding, pbuf, sizeof(lineCoding));
 8013b70:	4b0c      	ldr	r3, [pc, #48]	; (8013ba4 <CDC_Control_FS+0xe0>)
 8013b72:	683a      	ldr	r2, [r7, #0]
 8013b74:	6810      	ldr	r0, [r2, #0]
 8013b76:	6018      	str	r0, [r3, #0]
 8013b78:	8891      	ldrh	r1, [r2, #4]
 8013b7a:	7992      	ldrb	r2, [r2, #6]
 8013b7c:	8099      	strh	r1, [r3, #4]
 8013b7e:	719a      	strb	r2, [r3, #6]
    break;
 8013b80:	e009      	b.n	8013b96 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
        memcpy(pbuf, lineCoding, sizeof(lineCoding));
 8013b82:	683b      	ldr	r3, [r7, #0]
 8013b84:	4a07      	ldr	r2, [pc, #28]	; (8013ba4 <CDC_Control_FS+0xe0>)
 8013b86:	6810      	ldr	r0, [r2, #0]
 8013b88:	6018      	str	r0, [r3, #0]
 8013b8a:	8891      	ldrh	r1, [r2, #4]
 8013b8c:	7992      	ldrb	r2, [r2, #6]
 8013b8e:	8099      	strh	r1, [r3, #4]
 8013b90:	719a      	strb	r2, [r3, #6]
    break;
 8013b92:	e000      	b.n	8013b96 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8013b94:	bf00      	nop
  }

  return (USBD_OK);
 8013b96:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	370c      	adds	r7, #12
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ba2:	4770      	bx	lr
 8013ba4:	200003b8 	.word	0x200003b8

08013ba8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8013ba8:	b580      	push	{r7, lr}
 8013baa:	b082      	sub	sp, #8
 8013bac:	af00      	add	r7, sp, #0
 8013bae:	6078      	str	r0, [r7, #4]
 8013bb0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8013bb2:	6879      	ldr	r1, [r7, #4]
 8013bb4:	4805      	ldr	r0, [pc, #20]	; (8013bcc <CDC_Receive_FS+0x24>)
 8013bb6:	f7fc fab5 	bl	8010124 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8013bba:	4804      	ldr	r0, [pc, #16]	; (8013bcc <CDC_Receive_FS+0x24>)
 8013bbc:	f7fc faf6 	bl	80101ac <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8013bc0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	200051c8 	.word	0x200051c8

08013bd0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b084      	sub	sp, #16
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	460b      	mov	r3, r1
 8013bda:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013be0:	4b0d      	ldr	r3, [pc, #52]	; (8013c18 <CDC_Transmit_FS+0x48>)
 8013be2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013be6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013be8:	68bb      	ldr	r3, [r7, #8]
 8013bea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d001      	beq.n	8013bf6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8013bf2:	2301      	movs	r3, #1
 8013bf4:	e00b      	b.n	8013c0e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8013bf6:	887b      	ldrh	r3, [r7, #2]
 8013bf8:	461a      	mov	r2, r3
 8013bfa:	6879      	ldr	r1, [r7, #4]
 8013bfc:	4806      	ldr	r0, [pc, #24]	; (8013c18 <CDC_Transmit_FS+0x48>)
 8013bfe:	f7fc fa78 	bl	80100f2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8013c02:	4805      	ldr	r0, [pc, #20]	; (8013c18 <CDC_Transmit_FS+0x48>)
 8013c04:	f7fc faa2 	bl	801014c <USBD_CDC_TransmitPacket>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c0e:	4618      	mov	r0, r3
 8013c10:	3710      	adds	r7, #16
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	200051c8 	.word	0x200051c8

08013c1c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b087      	sub	sp, #28
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	4613      	mov	r3, r2
 8013c28:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8013c2a:	2300      	movs	r3, #0
 8013c2c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8013c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013c32:	4618      	mov	r0, r3
 8013c34:	371c      	adds	r7, #28
 8013c36:	46bd      	mov	sp, r7
 8013c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3c:	4770      	bx	lr
	...

08013c40 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c40:	b480      	push	{r7}
 8013c42:	b083      	sub	sp, #12
 8013c44:	af00      	add	r7, sp, #0
 8013c46:	4603      	mov	r3, r0
 8013c48:	6039      	str	r1, [r7, #0]
 8013c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	2212      	movs	r2, #18
 8013c50:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8013c52:	4b03      	ldr	r3, [pc, #12]	; (8013c60 <USBD_FS_DeviceDescriptor+0x20>)
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	200003f4 	.word	0x200003f4

08013c64 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	6039      	str	r1, [r7, #0]
 8013c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	2204      	movs	r2, #4
 8013c74:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8013c76:	4b03      	ldr	r3, [pc, #12]	; (8013c84 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	370c      	adds	r7, #12
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c82:	4770      	bx	lr
 8013c84:	20000414 	.word	0x20000414

08013c88 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	4603      	mov	r3, r0
 8013c90:	6039      	str	r1, [r7, #0]
 8013c92:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013c94:	79fb      	ldrb	r3, [r7, #7]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d105      	bne.n	8013ca6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013c9a:	683a      	ldr	r2, [r7, #0]
 8013c9c:	4907      	ldr	r1, [pc, #28]	; (8013cbc <USBD_FS_ProductStrDescriptor+0x34>)
 8013c9e:	4808      	ldr	r0, [pc, #32]	; (8013cc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8013ca0:	f7fd fafd 	bl	801129e <USBD_GetString>
 8013ca4:	e004      	b.n	8013cb0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	4904      	ldr	r1, [pc, #16]	; (8013cbc <USBD_FS_ProductStrDescriptor+0x34>)
 8013caa:	4805      	ldr	r0, [pc, #20]	; (8013cc0 <USBD_FS_ProductStrDescriptor+0x38>)
 8013cac:	f7fd faf7 	bl	801129e <USBD_GetString>
  }
  return USBD_StrDesc;
 8013cb0:	4b02      	ldr	r3, [pc, #8]	; (8013cbc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	3708      	adds	r7, #8
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	bd80      	pop	{r7, pc}
 8013cba:	bf00      	nop
 8013cbc:	20006498 	.word	0x20006498
 8013cc0:	08019ef0 	.word	0x08019ef0

08013cc4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	4603      	mov	r3, r0
 8013ccc:	6039      	str	r1, [r7, #0]
 8013cce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013cd0:	683a      	ldr	r2, [r7, #0]
 8013cd2:	4904      	ldr	r1, [pc, #16]	; (8013ce4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8013cd4:	4804      	ldr	r0, [pc, #16]	; (8013ce8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8013cd6:	f7fd fae2 	bl	801129e <USBD_GetString>
  return USBD_StrDesc;
 8013cda:	4b02      	ldr	r3, [pc, #8]	; (8013ce4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}
 8013ce4:	20006498 	.word	0x20006498
 8013ce8:	08019f08 	.word	0x08019f08

08013cec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b082      	sub	sp, #8
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	6039      	str	r1, [r7, #0]
 8013cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013cf8:	683b      	ldr	r3, [r7, #0]
 8013cfa:	221a      	movs	r2, #26
 8013cfc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013cfe:	f000 f855 	bl	8013dac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8013d02:	4b02      	ldr	r3, [pc, #8]	; (8013d0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8013d04:	4618      	mov	r0, r3
 8013d06:	3708      	adds	r7, #8
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}
 8013d0c:	20000418 	.word	0x20000418

08013d10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b082      	sub	sp, #8
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	4603      	mov	r3, r0
 8013d18:	6039      	str	r1, [r7, #0]
 8013d1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8013d1c:	79fb      	ldrb	r3, [r7, #7]
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d105      	bne.n	8013d2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d22:	683a      	ldr	r2, [r7, #0]
 8013d24:	4907      	ldr	r1, [pc, #28]	; (8013d44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013d26:	4808      	ldr	r0, [pc, #32]	; (8013d48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013d28:	f7fd fab9 	bl	801129e <USBD_GetString>
 8013d2c:	e004      	b.n	8013d38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8013d2e:	683a      	ldr	r2, [r7, #0]
 8013d30:	4904      	ldr	r1, [pc, #16]	; (8013d44 <USBD_FS_ConfigStrDescriptor+0x34>)
 8013d32:	4805      	ldr	r0, [pc, #20]	; (8013d48 <USBD_FS_ConfigStrDescriptor+0x38>)
 8013d34:	f7fd fab3 	bl	801129e <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d38:	4b02      	ldr	r3, [pc, #8]	; (8013d44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	20006498 	.word	0x20006498
 8013d48:	08019f1c 	.word	0x08019f1c

08013d4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	4603      	mov	r3, r0
 8013d54:	6039      	str	r1, [r7, #0]
 8013d56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8013d58:	79fb      	ldrb	r3, [r7, #7]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d105      	bne.n	8013d6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013d5e:	683a      	ldr	r2, [r7, #0]
 8013d60:	4907      	ldr	r1, [pc, #28]	; (8013d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013d62:	4808      	ldr	r0, [pc, #32]	; (8013d84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013d64:	f7fd fa9b 	bl	801129e <USBD_GetString>
 8013d68:	e004      	b.n	8013d74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8013d6a:	683a      	ldr	r2, [r7, #0]
 8013d6c:	4904      	ldr	r1, [pc, #16]	; (8013d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8013d6e:	4805      	ldr	r0, [pc, #20]	; (8013d84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8013d70:	f7fd fa95 	bl	801129e <USBD_GetString>
  }
  return USBD_StrDesc;
 8013d74:	4b02      	ldr	r3, [pc, #8]	; (8013d80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3708      	adds	r7, #8
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}
 8013d7e:	bf00      	nop
 8013d80:	20006498 	.word	0x20006498
 8013d84:	08019f28 	.word	0x08019f28

08013d88 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013d88:	b480      	push	{r7}
 8013d8a:	b083      	sub	sp, #12
 8013d8c:	af00      	add	r7, sp, #0
 8013d8e:	4603      	mov	r3, r0
 8013d90:	6039      	str	r1, [r7, #0]
 8013d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8013d94:	683b      	ldr	r3, [r7, #0]
 8013d96:	220c      	movs	r2, #12
 8013d98:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8013d9a:	4b03      	ldr	r3, [pc, #12]	; (8013da8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8013d9c:	4618      	mov	r0, r3
 8013d9e:	370c      	adds	r7, #12
 8013da0:	46bd      	mov	sp, r7
 8013da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da6:	4770      	bx	lr
 8013da8:	20000408 	.word	0x20000408

08013dac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013dac:	b580      	push	{r7, lr}
 8013dae:	b084      	sub	sp, #16
 8013db0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013db2:	4b0f      	ldr	r3, [pc, #60]	; (8013df0 <Get_SerialNum+0x44>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8013db8:	4b0e      	ldr	r3, [pc, #56]	; (8013df4 <Get_SerialNum+0x48>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013dbe:	4b0e      	ldr	r3, [pc, #56]	; (8013df8 <Get_SerialNum+0x4c>)
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	4413      	add	r3, r2
 8013dca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013dcc:	68fb      	ldr	r3, [r7, #12]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d009      	beq.n	8013de6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013dd2:	2208      	movs	r2, #8
 8013dd4:	4909      	ldr	r1, [pc, #36]	; (8013dfc <Get_SerialNum+0x50>)
 8013dd6:	68f8      	ldr	r0, [r7, #12]
 8013dd8:	f000 f814 	bl	8013e04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013ddc:	2204      	movs	r2, #4
 8013dde:	4908      	ldr	r1, [pc, #32]	; (8013e00 <Get_SerialNum+0x54>)
 8013de0:	68b8      	ldr	r0, [r7, #8]
 8013de2:	f000 f80f 	bl	8013e04 <IntToUnicode>
  }
}
 8013de6:	bf00      	nop
 8013de8:	3710      	adds	r7, #16
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	1fff7a10 	.word	0x1fff7a10
 8013df4:	1fff7a14 	.word	0x1fff7a14
 8013df8:	1fff7a18 	.word	0x1fff7a18
 8013dfc:	2000041a 	.word	0x2000041a
 8013e00:	2000042a 	.word	0x2000042a

08013e04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013e04:	b480      	push	{r7}
 8013e06:	b087      	sub	sp, #28
 8013e08:	af00      	add	r7, sp, #0
 8013e0a:	60f8      	str	r0, [r7, #12]
 8013e0c:	60b9      	str	r1, [r7, #8]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013e12:	2300      	movs	r3, #0
 8013e14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8013e16:	2300      	movs	r3, #0
 8013e18:	75fb      	strb	r3, [r7, #23]
 8013e1a:	e027      	b.n	8013e6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	0f1b      	lsrs	r3, r3, #28
 8013e20:	2b09      	cmp	r3, #9
 8013e22:	d80b      	bhi.n	8013e3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	0f1b      	lsrs	r3, r3, #28
 8013e28:	b2da      	uxtb	r2, r3
 8013e2a:	7dfb      	ldrb	r3, [r7, #23]
 8013e2c:	005b      	lsls	r3, r3, #1
 8013e2e:	4619      	mov	r1, r3
 8013e30:	68bb      	ldr	r3, [r7, #8]
 8013e32:	440b      	add	r3, r1
 8013e34:	3230      	adds	r2, #48	; 0x30
 8013e36:	b2d2      	uxtb	r2, r2
 8013e38:	701a      	strb	r2, [r3, #0]
 8013e3a:	e00a      	b.n	8013e52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	0f1b      	lsrs	r3, r3, #28
 8013e40:	b2da      	uxtb	r2, r3
 8013e42:	7dfb      	ldrb	r3, [r7, #23]
 8013e44:	005b      	lsls	r3, r3, #1
 8013e46:	4619      	mov	r1, r3
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	440b      	add	r3, r1
 8013e4c:	3237      	adds	r2, #55	; 0x37
 8013e4e:	b2d2      	uxtb	r2, r2
 8013e50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	011b      	lsls	r3, r3, #4
 8013e56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8013e58:	7dfb      	ldrb	r3, [r7, #23]
 8013e5a:	005b      	lsls	r3, r3, #1
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	68ba      	ldr	r2, [r7, #8]
 8013e60:	4413      	add	r3, r2
 8013e62:	2200      	movs	r2, #0
 8013e64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8013e66:	7dfb      	ldrb	r3, [r7, #23]
 8013e68:	3301      	adds	r3, #1
 8013e6a:	75fb      	strb	r3, [r7, #23]
 8013e6c:	7dfa      	ldrb	r2, [r7, #23]
 8013e6e:	79fb      	ldrb	r3, [r7, #7]
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d3d3      	bcc.n	8013e1c <IntToUnicode+0x18>
  }
}
 8013e74:	bf00      	nop
 8013e76:	371c      	adds	r7, #28
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7e:	4770      	bx	lr

08013e80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b08a      	sub	sp, #40	; 0x28
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e88:	f107 0314 	add.w	r3, r7, #20
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	601a      	str	r2, [r3, #0]
 8013e90:	605a      	str	r2, [r3, #4]
 8013e92:	609a      	str	r2, [r3, #8]
 8013e94:	60da      	str	r2, [r3, #12]
 8013e96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8013ea0:	d13a      	bne.n	8013f18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	613b      	str	r3, [r7, #16]
 8013ea6:	4b1e      	ldr	r3, [pc, #120]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eaa:	4a1d      	ldr	r2, [pc, #116]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013eac:	f043 0301 	orr.w	r3, r3, #1
 8013eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8013eb2:	4b1b      	ldr	r3, [pc, #108]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eb6:	f003 0301 	and.w	r3, r3, #1
 8013eba:	613b      	str	r3, [r7, #16]
 8013ebc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013ebe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ec4:	2302      	movs	r3, #2
 8013ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ec8:	2300      	movs	r3, #0
 8013eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ecc:	2303      	movs	r3, #3
 8013ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8013ed0:	230a      	movs	r3, #10
 8013ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013ed4:	f107 0314 	add.w	r3, r7, #20
 8013ed8:	4619      	mov	r1, r3
 8013eda:	4812      	ldr	r0, [pc, #72]	; (8013f24 <HAL_PCD_MspInit+0xa4>)
 8013edc:	f7f4 fb78 	bl	80085d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8013ee0:	4b0f      	ldr	r3, [pc, #60]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013ee4:	4a0e      	ldr	r2, [pc, #56]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013eea:	6353      	str	r3, [r2, #52]	; 0x34
 8013eec:	2300      	movs	r3, #0
 8013eee:	60fb      	str	r3, [r7, #12]
 8013ef0:	4b0b      	ldr	r3, [pc, #44]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ef4:	4a0a      	ldr	r2, [pc, #40]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013ef6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8013efa:	6453      	str	r3, [r2, #68]	; 0x44
 8013efc:	4b08      	ldr	r3, [pc, #32]	; (8013f20 <HAL_PCD_MspInit+0xa0>)
 8013efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013f04:	60fb      	str	r3, [r7, #12]
 8013f06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8013f08:	2200      	movs	r2, #0
 8013f0a:	2105      	movs	r1, #5
 8013f0c:	2043      	movs	r0, #67	; 0x43
 8013f0e:	f7f3 ffc7 	bl	8007ea0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8013f12:	2043      	movs	r0, #67	; 0x43
 8013f14:	f7f3 ffe0 	bl	8007ed8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8013f18:	bf00      	nop
 8013f1a:	3728      	adds	r7, #40	; 0x28
 8013f1c:	46bd      	mov	sp, r7
 8013f1e:	bd80      	pop	{r7, pc}
 8013f20:	40023800 	.word	0x40023800
 8013f24:	40020000 	.word	0x40020000

08013f28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013f3c:	4619      	mov	r1, r3
 8013f3e:	4610      	mov	r0, r2
 8013f40:	f7fc fa00 	bl	8010344 <USBD_LL_SetupStage>
}
 8013f44:	bf00      	nop
 8013f46:	3708      	adds	r7, #8
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	bd80      	pop	{r7, pc}

08013f4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f4c:	b580      	push	{r7, lr}
 8013f4e:	b082      	sub	sp, #8
 8013f50:	af00      	add	r7, sp, #0
 8013f52:	6078      	str	r0, [r7, #4]
 8013f54:	460b      	mov	r3, r1
 8013f56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013f5e:	78fa      	ldrb	r2, [r7, #3]
 8013f60:	6879      	ldr	r1, [r7, #4]
 8013f62:	4613      	mov	r3, r2
 8013f64:	00db      	lsls	r3, r3, #3
 8013f66:	1a9b      	subs	r3, r3, r2
 8013f68:	009b      	lsls	r3, r3, #2
 8013f6a:	440b      	add	r3, r1
 8013f6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013f70:	681a      	ldr	r2, [r3, #0]
 8013f72:	78fb      	ldrb	r3, [r7, #3]
 8013f74:	4619      	mov	r1, r3
 8013f76:	f7fc fa38 	bl	80103ea <USBD_LL_DataOutStage>
}
 8013f7a:	bf00      	nop
 8013f7c:	3708      	adds	r7, #8
 8013f7e:	46bd      	mov	sp, r7
 8013f80:	bd80      	pop	{r7, pc}

08013f82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013f82:	b580      	push	{r7, lr}
 8013f84:	b082      	sub	sp, #8
 8013f86:	af00      	add	r7, sp, #0
 8013f88:	6078      	str	r0, [r7, #4]
 8013f8a:	460b      	mov	r3, r1
 8013f8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013f94:	78fa      	ldrb	r2, [r7, #3]
 8013f96:	6879      	ldr	r1, [r7, #4]
 8013f98:	4613      	mov	r3, r2
 8013f9a:	00db      	lsls	r3, r3, #3
 8013f9c:	1a9b      	subs	r3, r3, r2
 8013f9e:	009b      	lsls	r3, r3, #2
 8013fa0:	440b      	add	r3, r1
 8013fa2:	3348      	adds	r3, #72	; 0x48
 8013fa4:	681a      	ldr	r2, [r3, #0]
 8013fa6:	78fb      	ldrb	r3, [r7, #3]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	f7fc fa81 	bl	80104b0 <USBD_LL_DataInStage>
}
 8013fae:	bf00      	nop
 8013fb0:	3708      	adds	r7, #8
 8013fb2:	46bd      	mov	sp, r7
 8013fb4:	bd80      	pop	{r7, pc}

08013fb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fb6:	b580      	push	{r7, lr}
 8013fb8:	b082      	sub	sp, #8
 8013fba:	af00      	add	r7, sp, #0
 8013fbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f7fc fb85 	bl	80106d4 <USBD_LL_SOF>
}
 8013fca:	bf00      	nop
 8013fcc:	3708      	adds	r7, #8
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}

08013fd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013fd2:	b580      	push	{r7, lr}
 8013fd4:	b084      	sub	sp, #16
 8013fd6:	af00      	add	r7, sp, #0
 8013fd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013fda:	2301      	movs	r3, #1
 8013fdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	68db      	ldr	r3, [r3, #12]
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d102      	bne.n	8013fec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	73fb      	strb	r3, [r7, #15]
 8013fea:	e008      	b.n	8013ffe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	68db      	ldr	r3, [r3, #12]
 8013ff0:	2b02      	cmp	r3, #2
 8013ff2:	d102      	bne.n	8013ffa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	73fb      	strb	r3, [r7, #15]
 8013ff8:	e001      	b.n	8013ffe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013ffa:	f7f2 fbb9 	bl	8006770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014004:	7bfa      	ldrb	r2, [r7, #15]
 8014006:	4611      	mov	r1, r2
 8014008:	4618      	mov	r0, r3
 801400a:	f7fc fb28 	bl	801065e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014014:	4618      	mov	r0, r3
 8014016:	f7fc fae1 	bl	80105dc <USBD_LL_Reset>
}
 801401a:	bf00      	nop
 801401c:	3710      	adds	r7, #16
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b082      	sub	sp, #8
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014032:	4618      	mov	r0, r3
 8014034:	f7fc fb23 	bl	801067e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	687a      	ldr	r2, [r7, #4]
 8014044:	6812      	ldr	r2, [r2, #0]
 8014046:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801404a:	f043 0301 	orr.w	r3, r3, #1
 801404e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a1b      	ldr	r3, [r3, #32]
 8014054:	2b00      	cmp	r3, #0
 8014056:	d005      	beq.n	8014064 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014058:	4b04      	ldr	r3, [pc, #16]	; (801406c <HAL_PCD_SuspendCallback+0x48>)
 801405a:	691b      	ldr	r3, [r3, #16]
 801405c:	4a03      	ldr	r2, [pc, #12]	; (801406c <HAL_PCD_SuspendCallback+0x48>)
 801405e:	f043 0306 	orr.w	r3, r3, #6
 8014062:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8014064:	bf00      	nop
 8014066:	3708      	adds	r7, #8
 8014068:	46bd      	mov	sp, r7
 801406a:	bd80      	pop	{r7, pc}
 801406c:	e000ed00 	.word	0xe000ed00

08014070 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801407e:	4618      	mov	r0, r3
 8014080:	f7fc fb12 	bl	80106a8 <USBD_LL_Resume>
}
 8014084:	bf00      	nop
 8014086:	3708      	adds	r7, #8
 8014088:	46bd      	mov	sp, r7
 801408a:	bd80      	pop	{r7, pc}

0801408c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801408c:	b580      	push	{r7, lr}
 801408e:	b082      	sub	sp, #8
 8014090:	af00      	add	r7, sp, #0
 8014092:	6078      	str	r0, [r7, #4]
 8014094:	460b      	mov	r3, r1
 8014096:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801409e:	78fa      	ldrb	r2, [r7, #3]
 80140a0:	4611      	mov	r1, r2
 80140a2:	4618      	mov	r0, r3
 80140a4:	f7fc fb3d 	bl	8010722 <USBD_LL_IsoOUTIncomplete>
}
 80140a8:	bf00      	nop
 80140aa:	3708      	adds	r7, #8
 80140ac:	46bd      	mov	sp, r7
 80140ae:	bd80      	pop	{r7, pc}

080140b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140b0:	b580      	push	{r7, lr}
 80140b2:	b082      	sub	sp, #8
 80140b4:	af00      	add	r7, sp, #0
 80140b6:	6078      	str	r0, [r7, #4]
 80140b8:	460b      	mov	r3, r1
 80140ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140c2:	78fa      	ldrb	r2, [r7, #3]
 80140c4:	4611      	mov	r1, r2
 80140c6:	4618      	mov	r0, r3
 80140c8:	f7fc fb1e 	bl	8010708 <USBD_LL_IsoINIncomplete>
}
 80140cc:	bf00      	nop
 80140ce:	3708      	adds	r7, #8
 80140d0:	46bd      	mov	sp, r7
 80140d2:	bd80      	pop	{r7, pc}

080140d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b082      	sub	sp, #8
 80140d8:	af00      	add	r7, sp, #0
 80140da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fc fb2a 	bl	801073c <USBD_LL_DevConnected>
}
 80140e8:	bf00      	nop
 80140ea:	3708      	adds	r7, #8
 80140ec:	46bd      	mov	sp, r7
 80140ee:	bd80      	pop	{r7, pc}

080140f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b082      	sub	sp, #8
 80140f4:	af00      	add	r7, sp, #0
 80140f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fc fb27 	bl	8010752 <USBD_LL_DevDisconnected>
}
 8014104:	bf00      	nop
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}

0801410c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801410c:	b580      	push	{r7, lr}
 801410e:	b082      	sub	sp, #8
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	781b      	ldrb	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d13c      	bne.n	8014196 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801411c:	4a20      	ldr	r2, [pc, #128]	; (80141a0 <USBD_LL_Init+0x94>)
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	4a1e      	ldr	r2, [pc, #120]	; (80141a0 <USBD_LL_Init+0x94>)
 8014128:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801412c:	4b1c      	ldr	r3, [pc, #112]	; (80141a0 <USBD_LL_Init+0x94>)
 801412e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014132:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8014134:	4b1a      	ldr	r3, [pc, #104]	; (80141a0 <USBD_LL_Init+0x94>)
 8014136:	2206      	movs	r2, #6
 8014138:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801413a:	4b19      	ldr	r3, [pc, #100]	; (80141a0 <USBD_LL_Init+0x94>)
 801413c:	2202      	movs	r2, #2
 801413e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014140:	4b17      	ldr	r3, [pc, #92]	; (80141a0 <USBD_LL_Init+0x94>)
 8014142:	2200      	movs	r2, #0
 8014144:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8014146:	4b16      	ldr	r3, [pc, #88]	; (80141a0 <USBD_LL_Init+0x94>)
 8014148:	2202      	movs	r2, #2
 801414a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801414c:	4b14      	ldr	r3, [pc, #80]	; (80141a0 <USBD_LL_Init+0x94>)
 801414e:	2200      	movs	r2, #0
 8014150:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8014152:	4b13      	ldr	r3, [pc, #76]	; (80141a0 <USBD_LL_Init+0x94>)
 8014154:	2200      	movs	r2, #0
 8014156:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8014158:	4b11      	ldr	r3, [pc, #68]	; (80141a0 <USBD_LL_Init+0x94>)
 801415a:	2200      	movs	r2, #0
 801415c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801415e:	4b10      	ldr	r3, [pc, #64]	; (80141a0 <USBD_LL_Init+0x94>)
 8014160:	2200      	movs	r2, #0
 8014162:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8014164:	4b0e      	ldr	r3, [pc, #56]	; (80141a0 <USBD_LL_Init+0x94>)
 8014166:	2200      	movs	r2, #0
 8014168:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801416a:	480d      	ldr	r0, [pc, #52]	; (80141a0 <USBD_LL_Init+0x94>)
 801416c:	f7f5 fbbf 	bl	80098ee <HAL_PCD_Init>
 8014170:	4603      	mov	r3, r0
 8014172:	2b00      	cmp	r3, #0
 8014174:	d001      	beq.n	801417a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8014176:	f7f2 fafb 	bl	8006770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801417a:	2180      	movs	r1, #128	; 0x80
 801417c:	4808      	ldr	r0, [pc, #32]	; (80141a0 <USBD_LL_Init+0x94>)
 801417e:	f7f6 fd50 	bl	800ac22 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8014182:	2240      	movs	r2, #64	; 0x40
 8014184:	2100      	movs	r1, #0
 8014186:	4806      	ldr	r0, [pc, #24]	; (80141a0 <USBD_LL_Init+0x94>)
 8014188:	f7f6 fd04 	bl	800ab94 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801418c:	2280      	movs	r2, #128	; 0x80
 801418e:	2101      	movs	r1, #1
 8014190:	4803      	ldr	r0, [pc, #12]	; (80141a0 <USBD_LL_Init+0x94>)
 8014192:	f7f6 fcff 	bl	800ab94 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}
 80141a0:	20006698 	.word	0x20006698

080141a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af00      	add	r7, sp, #0
 80141aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141ac:	2300      	movs	r3, #0
 80141ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80141b0:	2300      	movs	r3, #0
 80141b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80141ba:	4618      	mov	r0, r3
 80141bc:	f7f5 fcbb 	bl	8009b36 <HAL_PCD_Start>
 80141c0:	4603      	mov	r3, r0
 80141c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80141c4:	7bfb      	ldrb	r3, [r7, #15]
 80141c6:	4618      	mov	r0, r3
 80141c8:	f000 f978 	bl	80144bc <USBD_Get_USB_Status>
 80141cc:	4603      	mov	r3, r0
 80141ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80141d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3710      	adds	r7, #16
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}

080141da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b084      	sub	sp, #16
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
 80141e2:	4608      	mov	r0, r1
 80141e4:	4611      	mov	r1, r2
 80141e6:	461a      	mov	r2, r3
 80141e8:	4603      	mov	r3, r0
 80141ea:	70fb      	strb	r3, [r7, #3]
 80141ec:	460b      	mov	r3, r1
 80141ee:	70bb      	strb	r3, [r7, #2]
 80141f0:	4613      	mov	r3, r2
 80141f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80141f4:	2300      	movs	r3, #0
 80141f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80141f8:	2300      	movs	r3, #0
 80141fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014202:	78bb      	ldrb	r3, [r7, #2]
 8014204:	883a      	ldrh	r2, [r7, #0]
 8014206:	78f9      	ldrb	r1, [r7, #3]
 8014208:	f7f6 f8cc 	bl	800a3a4 <HAL_PCD_EP_Open>
 801420c:	4603      	mov	r3, r0
 801420e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014210:	7bfb      	ldrb	r3, [r7, #15]
 8014212:	4618      	mov	r0, r3
 8014214:	f000 f952 	bl	80144bc <USBD_Get_USB_Status>
 8014218:	4603      	mov	r3, r0
 801421a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801421c:	7bbb      	ldrb	r3, [r7, #14]
}
 801421e:	4618      	mov	r0, r3
 8014220:	3710      	adds	r7, #16
 8014222:	46bd      	mov	sp, r7
 8014224:	bd80      	pop	{r7, pc}

08014226 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014226:	b580      	push	{r7, lr}
 8014228:	b084      	sub	sp, #16
 801422a:	af00      	add	r7, sp, #0
 801422c:	6078      	str	r0, [r7, #4]
 801422e:	460b      	mov	r3, r1
 8014230:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014232:	2300      	movs	r3, #0
 8014234:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014236:	2300      	movs	r3, #0
 8014238:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014240:	78fa      	ldrb	r2, [r7, #3]
 8014242:	4611      	mov	r1, r2
 8014244:	4618      	mov	r0, r3
 8014246:	f7f6 f915 	bl	800a474 <HAL_PCD_EP_Close>
 801424a:	4603      	mov	r3, r0
 801424c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801424e:	7bfb      	ldrb	r3, [r7, #15]
 8014250:	4618      	mov	r0, r3
 8014252:	f000 f933 	bl	80144bc <USBD_Get_USB_Status>
 8014256:	4603      	mov	r3, r0
 8014258:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801425a:	7bbb      	ldrb	r3, [r7, #14]
}
 801425c:	4618      	mov	r0, r3
 801425e:	3710      	adds	r7, #16
 8014260:	46bd      	mov	sp, r7
 8014262:	bd80      	pop	{r7, pc}

08014264 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b084      	sub	sp, #16
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	460b      	mov	r3, r1
 801426e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014270:	2300      	movs	r3, #0
 8014272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014274:	2300      	movs	r3, #0
 8014276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801427e:	78fa      	ldrb	r2, [r7, #3]
 8014280:	4611      	mov	r1, r2
 8014282:	4618      	mov	r0, r3
 8014284:	f7f6 f9ed 	bl	800a662 <HAL_PCD_EP_SetStall>
 8014288:	4603      	mov	r3, r0
 801428a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801428c:	7bfb      	ldrb	r3, [r7, #15]
 801428e:	4618      	mov	r0, r3
 8014290:	f000 f914 	bl	80144bc <USBD_Get_USB_Status>
 8014294:	4603      	mov	r3, r0
 8014296:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014298:	7bbb      	ldrb	r3, [r7, #14]
}
 801429a:	4618      	mov	r0, r3
 801429c:	3710      	adds	r7, #16
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142a2:	b580      	push	{r7, lr}
 80142a4:	b084      	sub	sp, #16
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	6078      	str	r0, [r7, #4]
 80142aa:	460b      	mov	r3, r1
 80142ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80142ae:	2300      	movs	r3, #0
 80142b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80142b2:	2300      	movs	r3, #0
 80142b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80142bc:	78fa      	ldrb	r2, [r7, #3]
 80142be:	4611      	mov	r1, r2
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f6 fa32 	bl	800a72a <HAL_PCD_EP_ClrStall>
 80142c6:	4603      	mov	r3, r0
 80142c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80142ca:	7bfb      	ldrb	r3, [r7, #15]
 80142cc:	4618      	mov	r0, r3
 80142ce:	f000 f8f5 	bl	80144bc <USBD_Get_USB_Status>
 80142d2:	4603      	mov	r3, r0
 80142d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80142d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80142d8:	4618      	mov	r0, r3
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80142e0:	b480      	push	{r7}
 80142e2:	b085      	sub	sp, #20
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
 80142e8:	460b      	mov	r3, r1
 80142ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80142f2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80142f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	da0b      	bge.n	8014314 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80142fc:	78fb      	ldrb	r3, [r7, #3]
 80142fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014302:	68f9      	ldr	r1, [r7, #12]
 8014304:	4613      	mov	r3, r2
 8014306:	00db      	lsls	r3, r3, #3
 8014308:	1a9b      	subs	r3, r3, r2
 801430a:	009b      	lsls	r3, r3, #2
 801430c:	440b      	add	r3, r1
 801430e:	333e      	adds	r3, #62	; 0x3e
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	e00b      	b.n	801432c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8014314:	78fb      	ldrb	r3, [r7, #3]
 8014316:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801431a:	68f9      	ldr	r1, [r7, #12]
 801431c:	4613      	mov	r3, r2
 801431e:	00db      	lsls	r3, r3, #3
 8014320:	1a9b      	subs	r3, r3, r2
 8014322:	009b      	lsls	r3, r3, #2
 8014324:	440b      	add	r3, r1
 8014326:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801432a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801432c:	4618      	mov	r0, r3
 801432e:	3714      	adds	r7, #20
 8014330:	46bd      	mov	sp, r7
 8014332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014336:	4770      	bx	lr

08014338 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
 8014340:	460b      	mov	r3, r1
 8014342:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014344:	2300      	movs	r3, #0
 8014346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8014348:	2300      	movs	r3, #0
 801434a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014352:	78fa      	ldrb	r2, [r7, #3]
 8014354:	4611      	mov	r1, r2
 8014356:	4618      	mov	r0, r3
 8014358:	f7f5 ffff 	bl	800a35a <HAL_PCD_SetAddress>
 801435c:	4603      	mov	r3, r0
 801435e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8014360:	7bfb      	ldrb	r3, [r7, #15]
 8014362:	4618      	mov	r0, r3
 8014364:	f000 f8aa 	bl	80144bc <USBD_Get_USB_Status>
 8014368:	4603      	mov	r3, r0
 801436a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801436c:	7bbb      	ldrb	r3, [r7, #14]
}
 801436e:	4618      	mov	r0, r3
 8014370:	3710      	adds	r7, #16
 8014372:	46bd      	mov	sp, r7
 8014374:	bd80      	pop	{r7, pc}

08014376 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b086      	sub	sp, #24
 801437a:	af00      	add	r7, sp, #0
 801437c:	60f8      	str	r0, [r7, #12]
 801437e:	607a      	str	r2, [r7, #4]
 8014380:	603b      	str	r3, [r7, #0]
 8014382:	460b      	mov	r3, r1
 8014384:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014386:	2300      	movs	r3, #0
 8014388:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801438a:	2300      	movs	r3, #0
 801438c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8014394:	7af9      	ldrb	r1, [r7, #11]
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	687a      	ldr	r2, [r7, #4]
 801439a:	f7f6 f918 	bl	800a5ce <HAL_PCD_EP_Transmit>
 801439e:	4603      	mov	r3, r0
 80143a0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80143a2:	7dfb      	ldrb	r3, [r7, #23]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f000 f889 	bl	80144bc <USBD_Get_USB_Status>
 80143aa:	4603      	mov	r3, r0
 80143ac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80143ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3718      	adds	r7, #24
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b086      	sub	sp, #24
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	607a      	str	r2, [r7, #4]
 80143c2:	603b      	str	r3, [r7, #0]
 80143c4:	460b      	mov	r3, r1
 80143c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80143c8:	2300      	movs	r3, #0
 80143ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80143cc:	2300      	movs	r3, #0
 80143ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80143d6:	7af9      	ldrb	r1, [r7, #11]
 80143d8:	683b      	ldr	r3, [r7, #0]
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	f7f6 f894 	bl	800a508 <HAL_PCD_EP_Receive>
 80143e0:	4603      	mov	r3, r0
 80143e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80143e4:	7dfb      	ldrb	r3, [r7, #23]
 80143e6:	4618      	mov	r0, r3
 80143e8:	f000 f868 	bl	80144bc <USBD_Get_USB_Status>
 80143ec:	4603      	mov	r3, r0
 80143ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80143f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80143f2:	4618      	mov	r0, r3
 80143f4:	3718      	adds	r7, #24
 80143f6:	46bd      	mov	sp, r7
 80143f8:	bd80      	pop	{r7, pc}

080143fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80143fa:	b580      	push	{r7, lr}
 80143fc:	b082      	sub	sp, #8
 80143fe:	af00      	add	r7, sp, #0
 8014400:	6078      	str	r0, [r7, #4]
 8014402:	460b      	mov	r3, r1
 8014404:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801440c:	78fa      	ldrb	r2, [r7, #3]
 801440e:	4611      	mov	r1, r2
 8014410:	4618      	mov	r0, r3
 8014412:	f7f6 f8c4 	bl	800a59e <HAL_PCD_EP_GetRxCount>
 8014416:	4603      	mov	r3, r0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3708      	adds	r7, #8
 801441c:	46bd      	mov	sp, r7
 801441e:	bd80      	pop	{r7, pc}

08014420 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014420:	b580      	push	{r7, lr}
 8014422:	b082      	sub	sp, #8
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	460b      	mov	r3, r1
 801442a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801442c:	78fb      	ldrb	r3, [r7, #3]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d002      	beq.n	8014438 <HAL_PCDEx_LPM_Callback+0x18>
 8014432:	2b01      	cmp	r3, #1
 8014434:	d01f      	beq.n	8014476 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8014436:	e03b      	b.n	80144b0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6a1b      	ldr	r3, [r3, #32]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d007      	beq.n	8014450 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8014440:	f7f0 fd2e 	bl	8004ea0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8014444:	4b1c      	ldr	r3, [pc, #112]	; (80144b8 <HAL_PCDEx_LPM_Callback+0x98>)
 8014446:	691b      	ldr	r3, [r3, #16]
 8014448:	4a1b      	ldr	r2, [pc, #108]	; (80144b8 <HAL_PCDEx_LPM_Callback+0x98>)
 801444a:	f023 0306 	bic.w	r3, r3, #6
 801444e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	681b      	ldr	r3, [r3, #0]
 8014454:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	6812      	ldr	r2, [r2, #0]
 801445e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014462:	f023 0301 	bic.w	r3, r3, #1
 8014466:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801446e:	4618      	mov	r0, r3
 8014470:	f7fc f91a 	bl	80106a8 <USBD_LL_Resume>
    break;
 8014474:	e01c      	b.n	80144b0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	687a      	ldr	r2, [r7, #4]
 8014482:	6812      	ldr	r2, [r2, #0]
 8014484:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014488:	f043 0301 	orr.w	r3, r3, #1
 801448c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014494:	4618      	mov	r0, r3
 8014496:	f7fc f8f2 	bl	801067e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6a1b      	ldr	r3, [r3, #32]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d005      	beq.n	80144ae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80144a2:	4b05      	ldr	r3, [pc, #20]	; (80144b8 <HAL_PCDEx_LPM_Callback+0x98>)
 80144a4:	691b      	ldr	r3, [r3, #16]
 80144a6:	4a04      	ldr	r2, [pc, #16]	; (80144b8 <HAL_PCDEx_LPM_Callback+0x98>)
 80144a8:	f043 0306 	orr.w	r3, r3, #6
 80144ac:	6113      	str	r3, [r2, #16]
    break;
 80144ae:	bf00      	nop
}
 80144b0:	bf00      	nop
 80144b2:	3708      	adds	r7, #8
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd80      	pop	{r7, pc}
 80144b8:	e000ed00 	.word	0xe000ed00

080144bc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80144bc:	b480      	push	{r7}
 80144be:	b085      	sub	sp, #20
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	4603      	mov	r3, r0
 80144c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80144c6:	2300      	movs	r3, #0
 80144c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80144ca:	79fb      	ldrb	r3, [r7, #7]
 80144cc:	2b03      	cmp	r3, #3
 80144ce:	d817      	bhi.n	8014500 <USBD_Get_USB_Status+0x44>
 80144d0:	a201      	add	r2, pc, #4	; (adr r2, 80144d8 <USBD_Get_USB_Status+0x1c>)
 80144d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144d6:	bf00      	nop
 80144d8:	080144e9 	.word	0x080144e9
 80144dc:	080144ef 	.word	0x080144ef
 80144e0:	080144f5 	.word	0x080144f5
 80144e4:	080144fb 	.word	0x080144fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80144e8:	2300      	movs	r3, #0
 80144ea:	73fb      	strb	r3, [r7, #15]
    break;
 80144ec:	e00b      	b.n	8014506 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80144ee:	2303      	movs	r3, #3
 80144f0:	73fb      	strb	r3, [r7, #15]
    break;
 80144f2:	e008      	b.n	8014506 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80144f4:	2301      	movs	r3, #1
 80144f6:	73fb      	strb	r3, [r7, #15]
    break;
 80144f8:	e005      	b.n	8014506 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80144fa:	2303      	movs	r3, #3
 80144fc:	73fb      	strb	r3, [r7, #15]
    break;
 80144fe:	e002      	b.n	8014506 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8014500:	2303      	movs	r3, #3
 8014502:	73fb      	strb	r3, [r7, #15]
    break;
 8014504:	bf00      	nop
  }
  return usb_status;
 8014506:	7bfb      	ldrb	r3, [r7, #15]
}
 8014508:	4618      	mov	r0, r3
 801450a:	3714      	adds	r7, #20
 801450c:	46bd      	mov	sp, r7
 801450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014512:	4770      	bx	lr

08014514 <__assert_func>:
 8014514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014516:	461c      	mov	r4, r3
 8014518:	4b09      	ldr	r3, [pc, #36]	; (8014540 <__assert_func+0x2c>)
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4605      	mov	r5, r0
 801451e:	68d8      	ldr	r0, [r3, #12]
 8014520:	b152      	cbz	r2, 8014538 <__assert_func+0x24>
 8014522:	4b08      	ldr	r3, [pc, #32]	; (8014544 <__assert_func+0x30>)
 8014524:	9100      	str	r1, [sp, #0]
 8014526:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801452a:	4907      	ldr	r1, [pc, #28]	; (8014548 <__assert_func+0x34>)
 801452c:	462b      	mov	r3, r5
 801452e:	4622      	mov	r2, r4
 8014530:	f000 f814 	bl	801455c <fiprintf>
 8014534:	f001 f83a 	bl	80155ac <abort>
 8014538:	4b04      	ldr	r3, [pc, #16]	; (801454c <__assert_func+0x38>)
 801453a:	461a      	mov	r2, r3
 801453c:	e7f2      	b.n	8014524 <__assert_func+0x10>
 801453e:	bf00      	nop
 8014540:	20000434 	.word	0x20000434
 8014544:	08019fd8 	.word	0x08019fd8
 8014548:	08019fe5 	.word	0x08019fe5
 801454c:	0801a013 	.word	0x0801a013

08014550 <__errno>:
 8014550:	4b01      	ldr	r3, [pc, #4]	; (8014558 <__errno+0x8>)
 8014552:	6818      	ldr	r0, [r3, #0]
 8014554:	4770      	bx	lr
 8014556:	bf00      	nop
 8014558:	20000434 	.word	0x20000434

0801455c <fiprintf>:
 801455c:	b40e      	push	{r1, r2, r3}
 801455e:	b503      	push	{r0, r1, lr}
 8014560:	4601      	mov	r1, r0
 8014562:	ab03      	add	r3, sp, #12
 8014564:	4805      	ldr	r0, [pc, #20]	; (801457c <fiprintf+0x20>)
 8014566:	f853 2b04 	ldr.w	r2, [r3], #4
 801456a:	6800      	ldr	r0, [r0, #0]
 801456c:	9301      	str	r3, [sp, #4]
 801456e:	f000 f921 	bl	80147b4 <_vfiprintf_r>
 8014572:	b002      	add	sp, #8
 8014574:	f85d eb04 	ldr.w	lr, [sp], #4
 8014578:	b003      	add	sp, #12
 801457a:	4770      	bx	lr
 801457c:	20000434 	.word	0x20000434

08014580 <__libc_init_array>:
 8014580:	b570      	push	{r4, r5, r6, lr}
 8014582:	4e0d      	ldr	r6, [pc, #52]	; (80145b8 <__libc_init_array+0x38>)
 8014584:	4c0d      	ldr	r4, [pc, #52]	; (80145bc <__libc_init_array+0x3c>)
 8014586:	1ba4      	subs	r4, r4, r6
 8014588:	10a4      	asrs	r4, r4, #2
 801458a:	2500      	movs	r5, #0
 801458c:	42a5      	cmp	r5, r4
 801458e:	d109      	bne.n	80145a4 <__libc_init_array+0x24>
 8014590:	4e0b      	ldr	r6, [pc, #44]	; (80145c0 <__libc_init_array+0x40>)
 8014592:	4c0c      	ldr	r4, [pc, #48]	; (80145c4 <__libc_init_array+0x44>)
 8014594:	f005 f920 	bl	80197d8 <_init>
 8014598:	1ba4      	subs	r4, r4, r6
 801459a:	10a4      	asrs	r4, r4, #2
 801459c:	2500      	movs	r5, #0
 801459e:	42a5      	cmp	r5, r4
 80145a0:	d105      	bne.n	80145ae <__libc_init_array+0x2e>
 80145a2:	bd70      	pop	{r4, r5, r6, pc}
 80145a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80145a8:	4798      	blx	r3
 80145aa:	3501      	adds	r5, #1
 80145ac:	e7ee      	b.n	801458c <__libc_init_array+0xc>
 80145ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80145b2:	4798      	blx	r3
 80145b4:	3501      	adds	r5, #1
 80145b6:	e7f2      	b.n	801459e <__libc_init_array+0x1e>
 80145b8:	0801a528 	.word	0x0801a528
 80145bc:	0801a528 	.word	0x0801a528
 80145c0:	0801a528 	.word	0x0801a528
 80145c4:	0801a52c 	.word	0x0801a52c

080145c8 <malloc>:
 80145c8:	4b02      	ldr	r3, [pc, #8]	; (80145d4 <malloc+0xc>)
 80145ca:	4601      	mov	r1, r0
 80145cc:	6818      	ldr	r0, [r3, #0]
 80145ce:	f000 b86d 	b.w	80146ac <_malloc_r>
 80145d2:	bf00      	nop
 80145d4:	20000434 	.word	0x20000434

080145d8 <free>:
 80145d8:	4b02      	ldr	r3, [pc, #8]	; (80145e4 <free+0xc>)
 80145da:	4601      	mov	r1, r0
 80145dc:	6818      	ldr	r0, [r3, #0]
 80145de:	f000 b817 	b.w	8014610 <_free_r>
 80145e2:	bf00      	nop
 80145e4:	20000434 	.word	0x20000434

080145e8 <memcpy>:
 80145e8:	b510      	push	{r4, lr}
 80145ea:	1e43      	subs	r3, r0, #1
 80145ec:	440a      	add	r2, r1
 80145ee:	4291      	cmp	r1, r2
 80145f0:	d100      	bne.n	80145f4 <memcpy+0xc>
 80145f2:	bd10      	pop	{r4, pc}
 80145f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80145f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80145fc:	e7f7      	b.n	80145ee <memcpy+0x6>

080145fe <memset>:
 80145fe:	4402      	add	r2, r0
 8014600:	4603      	mov	r3, r0
 8014602:	4293      	cmp	r3, r2
 8014604:	d100      	bne.n	8014608 <memset+0xa>
 8014606:	4770      	bx	lr
 8014608:	f803 1b01 	strb.w	r1, [r3], #1
 801460c:	e7f9      	b.n	8014602 <memset+0x4>
	...

08014610 <_free_r>:
 8014610:	b538      	push	{r3, r4, r5, lr}
 8014612:	4605      	mov	r5, r0
 8014614:	2900      	cmp	r1, #0
 8014616:	d045      	beq.n	80146a4 <_free_r+0x94>
 8014618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801461c:	1f0c      	subs	r4, r1, #4
 801461e:	2b00      	cmp	r3, #0
 8014620:	bfb8      	it	lt
 8014622:	18e4      	addlt	r4, r4, r3
 8014624:	f002 f837 	bl	8016696 <__malloc_lock>
 8014628:	4a1f      	ldr	r2, [pc, #124]	; (80146a8 <_free_r+0x98>)
 801462a:	6813      	ldr	r3, [r2, #0]
 801462c:	4610      	mov	r0, r2
 801462e:	b933      	cbnz	r3, 801463e <_free_r+0x2e>
 8014630:	6063      	str	r3, [r4, #4]
 8014632:	6014      	str	r4, [r2, #0]
 8014634:	4628      	mov	r0, r5
 8014636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801463a:	f002 b82d 	b.w	8016698 <__malloc_unlock>
 801463e:	42a3      	cmp	r3, r4
 8014640:	d90c      	bls.n	801465c <_free_r+0x4c>
 8014642:	6821      	ldr	r1, [r4, #0]
 8014644:	1862      	adds	r2, r4, r1
 8014646:	4293      	cmp	r3, r2
 8014648:	bf04      	itt	eq
 801464a:	681a      	ldreq	r2, [r3, #0]
 801464c:	685b      	ldreq	r3, [r3, #4]
 801464e:	6063      	str	r3, [r4, #4]
 8014650:	bf04      	itt	eq
 8014652:	1852      	addeq	r2, r2, r1
 8014654:	6022      	streq	r2, [r4, #0]
 8014656:	6004      	str	r4, [r0, #0]
 8014658:	e7ec      	b.n	8014634 <_free_r+0x24>
 801465a:	4613      	mov	r3, r2
 801465c:	685a      	ldr	r2, [r3, #4]
 801465e:	b10a      	cbz	r2, 8014664 <_free_r+0x54>
 8014660:	42a2      	cmp	r2, r4
 8014662:	d9fa      	bls.n	801465a <_free_r+0x4a>
 8014664:	6819      	ldr	r1, [r3, #0]
 8014666:	1858      	adds	r0, r3, r1
 8014668:	42a0      	cmp	r0, r4
 801466a:	d10b      	bne.n	8014684 <_free_r+0x74>
 801466c:	6820      	ldr	r0, [r4, #0]
 801466e:	4401      	add	r1, r0
 8014670:	1858      	adds	r0, r3, r1
 8014672:	4282      	cmp	r2, r0
 8014674:	6019      	str	r1, [r3, #0]
 8014676:	d1dd      	bne.n	8014634 <_free_r+0x24>
 8014678:	6810      	ldr	r0, [r2, #0]
 801467a:	6852      	ldr	r2, [r2, #4]
 801467c:	605a      	str	r2, [r3, #4]
 801467e:	4401      	add	r1, r0
 8014680:	6019      	str	r1, [r3, #0]
 8014682:	e7d7      	b.n	8014634 <_free_r+0x24>
 8014684:	d902      	bls.n	801468c <_free_r+0x7c>
 8014686:	230c      	movs	r3, #12
 8014688:	602b      	str	r3, [r5, #0]
 801468a:	e7d3      	b.n	8014634 <_free_r+0x24>
 801468c:	6820      	ldr	r0, [r4, #0]
 801468e:	1821      	adds	r1, r4, r0
 8014690:	428a      	cmp	r2, r1
 8014692:	bf04      	itt	eq
 8014694:	6811      	ldreq	r1, [r2, #0]
 8014696:	6852      	ldreq	r2, [r2, #4]
 8014698:	6062      	str	r2, [r4, #4]
 801469a:	bf04      	itt	eq
 801469c:	1809      	addeq	r1, r1, r0
 801469e:	6021      	streq	r1, [r4, #0]
 80146a0:	605c      	str	r4, [r3, #4]
 80146a2:	e7c7      	b.n	8014634 <_free_r+0x24>
 80146a4:	bd38      	pop	{r3, r4, r5, pc}
 80146a6:	bf00      	nop
 80146a8:	200045e8 	.word	0x200045e8

080146ac <_malloc_r>:
 80146ac:	b570      	push	{r4, r5, r6, lr}
 80146ae:	1ccd      	adds	r5, r1, #3
 80146b0:	f025 0503 	bic.w	r5, r5, #3
 80146b4:	3508      	adds	r5, #8
 80146b6:	2d0c      	cmp	r5, #12
 80146b8:	bf38      	it	cc
 80146ba:	250c      	movcc	r5, #12
 80146bc:	2d00      	cmp	r5, #0
 80146be:	4606      	mov	r6, r0
 80146c0:	db01      	blt.n	80146c6 <_malloc_r+0x1a>
 80146c2:	42a9      	cmp	r1, r5
 80146c4:	d903      	bls.n	80146ce <_malloc_r+0x22>
 80146c6:	230c      	movs	r3, #12
 80146c8:	6033      	str	r3, [r6, #0]
 80146ca:	2000      	movs	r0, #0
 80146cc:	bd70      	pop	{r4, r5, r6, pc}
 80146ce:	f001 ffe2 	bl	8016696 <__malloc_lock>
 80146d2:	4a21      	ldr	r2, [pc, #132]	; (8014758 <_malloc_r+0xac>)
 80146d4:	6814      	ldr	r4, [r2, #0]
 80146d6:	4621      	mov	r1, r4
 80146d8:	b991      	cbnz	r1, 8014700 <_malloc_r+0x54>
 80146da:	4c20      	ldr	r4, [pc, #128]	; (801475c <_malloc_r+0xb0>)
 80146dc:	6823      	ldr	r3, [r4, #0]
 80146de:	b91b      	cbnz	r3, 80146e8 <_malloc_r+0x3c>
 80146e0:	4630      	mov	r0, r6
 80146e2:	f000 fde9 	bl	80152b8 <_sbrk_r>
 80146e6:	6020      	str	r0, [r4, #0]
 80146e8:	4629      	mov	r1, r5
 80146ea:	4630      	mov	r0, r6
 80146ec:	f000 fde4 	bl	80152b8 <_sbrk_r>
 80146f0:	1c43      	adds	r3, r0, #1
 80146f2:	d124      	bne.n	801473e <_malloc_r+0x92>
 80146f4:	230c      	movs	r3, #12
 80146f6:	6033      	str	r3, [r6, #0]
 80146f8:	4630      	mov	r0, r6
 80146fa:	f001 ffcd 	bl	8016698 <__malloc_unlock>
 80146fe:	e7e4      	b.n	80146ca <_malloc_r+0x1e>
 8014700:	680b      	ldr	r3, [r1, #0]
 8014702:	1b5b      	subs	r3, r3, r5
 8014704:	d418      	bmi.n	8014738 <_malloc_r+0x8c>
 8014706:	2b0b      	cmp	r3, #11
 8014708:	d90f      	bls.n	801472a <_malloc_r+0x7e>
 801470a:	600b      	str	r3, [r1, #0]
 801470c:	50cd      	str	r5, [r1, r3]
 801470e:	18cc      	adds	r4, r1, r3
 8014710:	4630      	mov	r0, r6
 8014712:	f001 ffc1 	bl	8016698 <__malloc_unlock>
 8014716:	f104 000b 	add.w	r0, r4, #11
 801471a:	1d23      	adds	r3, r4, #4
 801471c:	f020 0007 	bic.w	r0, r0, #7
 8014720:	1ac3      	subs	r3, r0, r3
 8014722:	d0d3      	beq.n	80146cc <_malloc_r+0x20>
 8014724:	425a      	negs	r2, r3
 8014726:	50e2      	str	r2, [r4, r3]
 8014728:	e7d0      	b.n	80146cc <_malloc_r+0x20>
 801472a:	428c      	cmp	r4, r1
 801472c:	684b      	ldr	r3, [r1, #4]
 801472e:	bf16      	itet	ne
 8014730:	6063      	strne	r3, [r4, #4]
 8014732:	6013      	streq	r3, [r2, #0]
 8014734:	460c      	movne	r4, r1
 8014736:	e7eb      	b.n	8014710 <_malloc_r+0x64>
 8014738:	460c      	mov	r4, r1
 801473a:	6849      	ldr	r1, [r1, #4]
 801473c:	e7cc      	b.n	80146d8 <_malloc_r+0x2c>
 801473e:	1cc4      	adds	r4, r0, #3
 8014740:	f024 0403 	bic.w	r4, r4, #3
 8014744:	42a0      	cmp	r0, r4
 8014746:	d005      	beq.n	8014754 <_malloc_r+0xa8>
 8014748:	1a21      	subs	r1, r4, r0
 801474a:	4630      	mov	r0, r6
 801474c:	f000 fdb4 	bl	80152b8 <_sbrk_r>
 8014750:	3001      	adds	r0, #1
 8014752:	d0cf      	beq.n	80146f4 <_malloc_r+0x48>
 8014754:	6025      	str	r5, [r4, #0]
 8014756:	e7db      	b.n	8014710 <_malloc_r+0x64>
 8014758:	200045e8 	.word	0x200045e8
 801475c:	200045ec 	.word	0x200045ec

08014760 <__sfputc_r>:
 8014760:	6893      	ldr	r3, [r2, #8]
 8014762:	3b01      	subs	r3, #1
 8014764:	2b00      	cmp	r3, #0
 8014766:	b410      	push	{r4}
 8014768:	6093      	str	r3, [r2, #8]
 801476a:	da08      	bge.n	801477e <__sfputc_r+0x1e>
 801476c:	6994      	ldr	r4, [r2, #24]
 801476e:	42a3      	cmp	r3, r4
 8014770:	db01      	blt.n	8014776 <__sfputc_r+0x16>
 8014772:	290a      	cmp	r1, #10
 8014774:	d103      	bne.n	801477e <__sfputc_r+0x1e>
 8014776:	f85d 4b04 	ldr.w	r4, [sp], #4
 801477a:	f000 be45 	b.w	8015408 <__swbuf_r>
 801477e:	6813      	ldr	r3, [r2, #0]
 8014780:	1c58      	adds	r0, r3, #1
 8014782:	6010      	str	r0, [r2, #0]
 8014784:	7019      	strb	r1, [r3, #0]
 8014786:	4608      	mov	r0, r1
 8014788:	f85d 4b04 	ldr.w	r4, [sp], #4
 801478c:	4770      	bx	lr

0801478e <__sfputs_r>:
 801478e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014790:	4606      	mov	r6, r0
 8014792:	460f      	mov	r7, r1
 8014794:	4614      	mov	r4, r2
 8014796:	18d5      	adds	r5, r2, r3
 8014798:	42ac      	cmp	r4, r5
 801479a:	d101      	bne.n	80147a0 <__sfputs_r+0x12>
 801479c:	2000      	movs	r0, #0
 801479e:	e007      	b.n	80147b0 <__sfputs_r+0x22>
 80147a0:	463a      	mov	r2, r7
 80147a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80147a6:	4630      	mov	r0, r6
 80147a8:	f7ff ffda 	bl	8014760 <__sfputc_r>
 80147ac:	1c43      	adds	r3, r0, #1
 80147ae:	d1f3      	bne.n	8014798 <__sfputs_r+0xa>
 80147b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080147b4 <_vfiprintf_r>:
 80147b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b8:	460c      	mov	r4, r1
 80147ba:	b09d      	sub	sp, #116	; 0x74
 80147bc:	4617      	mov	r7, r2
 80147be:	461d      	mov	r5, r3
 80147c0:	4606      	mov	r6, r0
 80147c2:	b118      	cbz	r0, 80147cc <_vfiprintf_r+0x18>
 80147c4:	6983      	ldr	r3, [r0, #24]
 80147c6:	b90b      	cbnz	r3, 80147cc <_vfiprintf_r+0x18>
 80147c8:	f001 fe3e 	bl	8016448 <__sinit>
 80147cc:	4b7c      	ldr	r3, [pc, #496]	; (80149c0 <_vfiprintf_r+0x20c>)
 80147ce:	429c      	cmp	r4, r3
 80147d0:	d158      	bne.n	8014884 <_vfiprintf_r+0xd0>
 80147d2:	6874      	ldr	r4, [r6, #4]
 80147d4:	89a3      	ldrh	r3, [r4, #12]
 80147d6:	0718      	lsls	r0, r3, #28
 80147d8:	d55e      	bpl.n	8014898 <_vfiprintf_r+0xe4>
 80147da:	6923      	ldr	r3, [r4, #16]
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d05b      	beq.n	8014898 <_vfiprintf_r+0xe4>
 80147e0:	2300      	movs	r3, #0
 80147e2:	9309      	str	r3, [sp, #36]	; 0x24
 80147e4:	2320      	movs	r3, #32
 80147e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80147ea:	2330      	movs	r3, #48	; 0x30
 80147ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80147f0:	9503      	str	r5, [sp, #12]
 80147f2:	f04f 0b01 	mov.w	fp, #1
 80147f6:	46b8      	mov	r8, r7
 80147f8:	4645      	mov	r5, r8
 80147fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80147fe:	b10b      	cbz	r3, 8014804 <_vfiprintf_r+0x50>
 8014800:	2b25      	cmp	r3, #37	; 0x25
 8014802:	d154      	bne.n	80148ae <_vfiprintf_r+0xfa>
 8014804:	ebb8 0a07 	subs.w	sl, r8, r7
 8014808:	d00b      	beq.n	8014822 <_vfiprintf_r+0x6e>
 801480a:	4653      	mov	r3, sl
 801480c:	463a      	mov	r2, r7
 801480e:	4621      	mov	r1, r4
 8014810:	4630      	mov	r0, r6
 8014812:	f7ff ffbc 	bl	801478e <__sfputs_r>
 8014816:	3001      	adds	r0, #1
 8014818:	f000 80c2 	beq.w	80149a0 <_vfiprintf_r+0x1ec>
 801481c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801481e:	4453      	add	r3, sl
 8014820:	9309      	str	r3, [sp, #36]	; 0x24
 8014822:	f898 3000 	ldrb.w	r3, [r8]
 8014826:	2b00      	cmp	r3, #0
 8014828:	f000 80ba 	beq.w	80149a0 <_vfiprintf_r+0x1ec>
 801482c:	2300      	movs	r3, #0
 801482e:	f04f 32ff 	mov.w	r2, #4294967295
 8014832:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014836:	9304      	str	r3, [sp, #16]
 8014838:	9307      	str	r3, [sp, #28]
 801483a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801483e:	931a      	str	r3, [sp, #104]	; 0x68
 8014840:	46a8      	mov	r8, r5
 8014842:	2205      	movs	r2, #5
 8014844:	f818 1b01 	ldrb.w	r1, [r8], #1
 8014848:	485e      	ldr	r0, [pc, #376]	; (80149c4 <_vfiprintf_r+0x210>)
 801484a:	f7eb fce9 	bl	8000220 <memchr>
 801484e:	9b04      	ldr	r3, [sp, #16]
 8014850:	bb78      	cbnz	r0, 80148b2 <_vfiprintf_r+0xfe>
 8014852:	06d9      	lsls	r1, r3, #27
 8014854:	bf44      	itt	mi
 8014856:	2220      	movmi	r2, #32
 8014858:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801485c:	071a      	lsls	r2, r3, #28
 801485e:	bf44      	itt	mi
 8014860:	222b      	movmi	r2, #43	; 0x2b
 8014862:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8014866:	782a      	ldrb	r2, [r5, #0]
 8014868:	2a2a      	cmp	r2, #42	; 0x2a
 801486a:	d02a      	beq.n	80148c2 <_vfiprintf_r+0x10e>
 801486c:	9a07      	ldr	r2, [sp, #28]
 801486e:	46a8      	mov	r8, r5
 8014870:	2000      	movs	r0, #0
 8014872:	250a      	movs	r5, #10
 8014874:	4641      	mov	r1, r8
 8014876:	f811 3b01 	ldrb.w	r3, [r1], #1
 801487a:	3b30      	subs	r3, #48	; 0x30
 801487c:	2b09      	cmp	r3, #9
 801487e:	d969      	bls.n	8014954 <_vfiprintf_r+0x1a0>
 8014880:	b360      	cbz	r0, 80148dc <_vfiprintf_r+0x128>
 8014882:	e024      	b.n	80148ce <_vfiprintf_r+0x11a>
 8014884:	4b50      	ldr	r3, [pc, #320]	; (80149c8 <_vfiprintf_r+0x214>)
 8014886:	429c      	cmp	r4, r3
 8014888:	d101      	bne.n	801488e <_vfiprintf_r+0xda>
 801488a:	68b4      	ldr	r4, [r6, #8]
 801488c:	e7a2      	b.n	80147d4 <_vfiprintf_r+0x20>
 801488e:	4b4f      	ldr	r3, [pc, #316]	; (80149cc <_vfiprintf_r+0x218>)
 8014890:	429c      	cmp	r4, r3
 8014892:	bf08      	it	eq
 8014894:	68f4      	ldreq	r4, [r6, #12]
 8014896:	e79d      	b.n	80147d4 <_vfiprintf_r+0x20>
 8014898:	4621      	mov	r1, r4
 801489a:	4630      	mov	r0, r6
 801489c:	f000 fe18 	bl	80154d0 <__swsetup_r>
 80148a0:	2800      	cmp	r0, #0
 80148a2:	d09d      	beq.n	80147e0 <_vfiprintf_r+0x2c>
 80148a4:	f04f 30ff 	mov.w	r0, #4294967295
 80148a8:	b01d      	add	sp, #116	; 0x74
 80148aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ae:	46a8      	mov	r8, r5
 80148b0:	e7a2      	b.n	80147f8 <_vfiprintf_r+0x44>
 80148b2:	4a44      	ldr	r2, [pc, #272]	; (80149c4 <_vfiprintf_r+0x210>)
 80148b4:	1a80      	subs	r0, r0, r2
 80148b6:	fa0b f000 	lsl.w	r0, fp, r0
 80148ba:	4318      	orrs	r0, r3
 80148bc:	9004      	str	r0, [sp, #16]
 80148be:	4645      	mov	r5, r8
 80148c0:	e7be      	b.n	8014840 <_vfiprintf_r+0x8c>
 80148c2:	9a03      	ldr	r2, [sp, #12]
 80148c4:	1d11      	adds	r1, r2, #4
 80148c6:	6812      	ldr	r2, [r2, #0]
 80148c8:	9103      	str	r1, [sp, #12]
 80148ca:	2a00      	cmp	r2, #0
 80148cc:	db01      	blt.n	80148d2 <_vfiprintf_r+0x11e>
 80148ce:	9207      	str	r2, [sp, #28]
 80148d0:	e004      	b.n	80148dc <_vfiprintf_r+0x128>
 80148d2:	4252      	negs	r2, r2
 80148d4:	f043 0302 	orr.w	r3, r3, #2
 80148d8:	9207      	str	r2, [sp, #28]
 80148da:	9304      	str	r3, [sp, #16]
 80148dc:	f898 3000 	ldrb.w	r3, [r8]
 80148e0:	2b2e      	cmp	r3, #46	; 0x2e
 80148e2:	d10e      	bne.n	8014902 <_vfiprintf_r+0x14e>
 80148e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80148e8:	2b2a      	cmp	r3, #42	; 0x2a
 80148ea:	d138      	bne.n	801495e <_vfiprintf_r+0x1aa>
 80148ec:	9b03      	ldr	r3, [sp, #12]
 80148ee:	1d1a      	adds	r2, r3, #4
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	9203      	str	r2, [sp, #12]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	bfb8      	it	lt
 80148f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80148fc:	f108 0802 	add.w	r8, r8, #2
 8014900:	9305      	str	r3, [sp, #20]
 8014902:	4d33      	ldr	r5, [pc, #204]	; (80149d0 <_vfiprintf_r+0x21c>)
 8014904:	f898 1000 	ldrb.w	r1, [r8]
 8014908:	2203      	movs	r2, #3
 801490a:	4628      	mov	r0, r5
 801490c:	f7eb fc88 	bl	8000220 <memchr>
 8014910:	b140      	cbz	r0, 8014924 <_vfiprintf_r+0x170>
 8014912:	2340      	movs	r3, #64	; 0x40
 8014914:	1b40      	subs	r0, r0, r5
 8014916:	fa03 f000 	lsl.w	r0, r3, r0
 801491a:	9b04      	ldr	r3, [sp, #16]
 801491c:	4303      	orrs	r3, r0
 801491e:	f108 0801 	add.w	r8, r8, #1
 8014922:	9304      	str	r3, [sp, #16]
 8014924:	f898 1000 	ldrb.w	r1, [r8]
 8014928:	482a      	ldr	r0, [pc, #168]	; (80149d4 <_vfiprintf_r+0x220>)
 801492a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801492e:	2206      	movs	r2, #6
 8014930:	f108 0701 	add.w	r7, r8, #1
 8014934:	f7eb fc74 	bl	8000220 <memchr>
 8014938:	2800      	cmp	r0, #0
 801493a:	d037      	beq.n	80149ac <_vfiprintf_r+0x1f8>
 801493c:	4b26      	ldr	r3, [pc, #152]	; (80149d8 <_vfiprintf_r+0x224>)
 801493e:	bb1b      	cbnz	r3, 8014988 <_vfiprintf_r+0x1d4>
 8014940:	9b03      	ldr	r3, [sp, #12]
 8014942:	3307      	adds	r3, #7
 8014944:	f023 0307 	bic.w	r3, r3, #7
 8014948:	3308      	adds	r3, #8
 801494a:	9303      	str	r3, [sp, #12]
 801494c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801494e:	444b      	add	r3, r9
 8014950:	9309      	str	r3, [sp, #36]	; 0x24
 8014952:	e750      	b.n	80147f6 <_vfiprintf_r+0x42>
 8014954:	fb05 3202 	mla	r2, r5, r2, r3
 8014958:	2001      	movs	r0, #1
 801495a:	4688      	mov	r8, r1
 801495c:	e78a      	b.n	8014874 <_vfiprintf_r+0xc0>
 801495e:	2300      	movs	r3, #0
 8014960:	f108 0801 	add.w	r8, r8, #1
 8014964:	9305      	str	r3, [sp, #20]
 8014966:	4619      	mov	r1, r3
 8014968:	250a      	movs	r5, #10
 801496a:	4640      	mov	r0, r8
 801496c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014970:	3a30      	subs	r2, #48	; 0x30
 8014972:	2a09      	cmp	r2, #9
 8014974:	d903      	bls.n	801497e <_vfiprintf_r+0x1ca>
 8014976:	2b00      	cmp	r3, #0
 8014978:	d0c3      	beq.n	8014902 <_vfiprintf_r+0x14e>
 801497a:	9105      	str	r1, [sp, #20]
 801497c:	e7c1      	b.n	8014902 <_vfiprintf_r+0x14e>
 801497e:	fb05 2101 	mla	r1, r5, r1, r2
 8014982:	2301      	movs	r3, #1
 8014984:	4680      	mov	r8, r0
 8014986:	e7f0      	b.n	801496a <_vfiprintf_r+0x1b6>
 8014988:	ab03      	add	r3, sp, #12
 801498a:	9300      	str	r3, [sp, #0]
 801498c:	4622      	mov	r2, r4
 801498e:	4b13      	ldr	r3, [pc, #76]	; (80149dc <_vfiprintf_r+0x228>)
 8014990:	a904      	add	r1, sp, #16
 8014992:	4630      	mov	r0, r6
 8014994:	f000 f8b8 	bl	8014b08 <_printf_float>
 8014998:	f1b0 3fff 	cmp.w	r0, #4294967295
 801499c:	4681      	mov	r9, r0
 801499e:	d1d5      	bne.n	801494c <_vfiprintf_r+0x198>
 80149a0:	89a3      	ldrh	r3, [r4, #12]
 80149a2:	065b      	lsls	r3, r3, #25
 80149a4:	f53f af7e 	bmi.w	80148a4 <_vfiprintf_r+0xf0>
 80149a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80149aa:	e77d      	b.n	80148a8 <_vfiprintf_r+0xf4>
 80149ac:	ab03      	add	r3, sp, #12
 80149ae:	9300      	str	r3, [sp, #0]
 80149b0:	4622      	mov	r2, r4
 80149b2:	4b0a      	ldr	r3, [pc, #40]	; (80149dc <_vfiprintf_r+0x228>)
 80149b4:	a904      	add	r1, sp, #16
 80149b6:	4630      	mov	r0, r6
 80149b8:	f000 fb5c 	bl	8015074 <_printf_i>
 80149bc:	e7ec      	b.n	8014998 <_vfiprintf_r+0x1e4>
 80149be:	bf00      	nop
 80149c0:	0801a08c 	.word	0x0801a08c
 80149c4:	0801a018 	.word	0x0801a018
 80149c8:	0801a0ac 	.word	0x0801a0ac
 80149cc:	0801a06c 	.word	0x0801a06c
 80149d0:	0801a01e 	.word	0x0801a01e
 80149d4:	0801a022 	.word	0x0801a022
 80149d8:	08014b09 	.word	0x08014b09
 80149dc:	0801478f 	.word	0x0801478f

080149e0 <__cvt>:
 80149e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149e4:	ec55 4b10 	vmov	r4, r5, d0
 80149e8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80149ea:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80149ee:	2d00      	cmp	r5, #0
 80149f0:	460e      	mov	r6, r1
 80149f2:	4691      	mov	r9, r2
 80149f4:	4619      	mov	r1, r3
 80149f6:	bfb8      	it	lt
 80149f8:	4622      	movlt	r2, r4
 80149fa:	462b      	mov	r3, r5
 80149fc:	f027 0720 	bic.w	r7, r7, #32
 8014a00:	bfbb      	ittet	lt
 8014a02:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8014a06:	461d      	movlt	r5, r3
 8014a08:	2300      	movge	r3, #0
 8014a0a:	232d      	movlt	r3, #45	; 0x2d
 8014a0c:	bfb8      	it	lt
 8014a0e:	4614      	movlt	r4, r2
 8014a10:	2f46      	cmp	r7, #70	; 0x46
 8014a12:	700b      	strb	r3, [r1, #0]
 8014a14:	d004      	beq.n	8014a20 <__cvt+0x40>
 8014a16:	2f45      	cmp	r7, #69	; 0x45
 8014a18:	d100      	bne.n	8014a1c <__cvt+0x3c>
 8014a1a:	3601      	adds	r6, #1
 8014a1c:	2102      	movs	r1, #2
 8014a1e:	e000      	b.n	8014a22 <__cvt+0x42>
 8014a20:	2103      	movs	r1, #3
 8014a22:	ab03      	add	r3, sp, #12
 8014a24:	9301      	str	r3, [sp, #4]
 8014a26:	ab02      	add	r3, sp, #8
 8014a28:	9300      	str	r3, [sp, #0]
 8014a2a:	4632      	mov	r2, r6
 8014a2c:	4653      	mov	r3, sl
 8014a2e:	ec45 4b10 	vmov	d0, r4, r5
 8014a32:	f000 fe61 	bl	80156f8 <_dtoa_r>
 8014a36:	2f47      	cmp	r7, #71	; 0x47
 8014a38:	4680      	mov	r8, r0
 8014a3a:	d102      	bne.n	8014a42 <__cvt+0x62>
 8014a3c:	f019 0f01 	tst.w	r9, #1
 8014a40:	d026      	beq.n	8014a90 <__cvt+0xb0>
 8014a42:	2f46      	cmp	r7, #70	; 0x46
 8014a44:	eb08 0906 	add.w	r9, r8, r6
 8014a48:	d111      	bne.n	8014a6e <__cvt+0x8e>
 8014a4a:	f898 3000 	ldrb.w	r3, [r8]
 8014a4e:	2b30      	cmp	r3, #48	; 0x30
 8014a50:	d10a      	bne.n	8014a68 <__cvt+0x88>
 8014a52:	2200      	movs	r2, #0
 8014a54:	2300      	movs	r3, #0
 8014a56:	4620      	mov	r0, r4
 8014a58:	4629      	mov	r1, r5
 8014a5a:	f7ec f855 	bl	8000b08 <__aeabi_dcmpeq>
 8014a5e:	b918      	cbnz	r0, 8014a68 <__cvt+0x88>
 8014a60:	f1c6 0601 	rsb	r6, r6, #1
 8014a64:	f8ca 6000 	str.w	r6, [sl]
 8014a68:	f8da 3000 	ldr.w	r3, [sl]
 8014a6c:	4499      	add	r9, r3
 8014a6e:	2200      	movs	r2, #0
 8014a70:	2300      	movs	r3, #0
 8014a72:	4620      	mov	r0, r4
 8014a74:	4629      	mov	r1, r5
 8014a76:	f7ec f847 	bl	8000b08 <__aeabi_dcmpeq>
 8014a7a:	b938      	cbnz	r0, 8014a8c <__cvt+0xac>
 8014a7c:	2230      	movs	r2, #48	; 0x30
 8014a7e:	9b03      	ldr	r3, [sp, #12]
 8014a80:	454b      	cmp	r3, r9
 8014a82:	d205      	bcs.n	8014a90 <__cvt+0xb0>
 8014a84:	1c59      	adds	r1, r3, #1
 8014a86:	9103      	str	r1, [sp, #12]
 8014a88:	701a      	strb	r2, [r3, #0]
 8014a8a:	e7f8      	b.n	8014a7e <__cvt+0x9e>
 8014a8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a90:	9b03      	ldr	r3, [sp, #12]
 8014a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a94:	eba3 0308 	sub.w	r3, r3, r8
 8014a98:	4640      	mov	r0, r8
 8014a9a:	6013      	str	r3, [r2, #0]
 8014a9c:	b004      	add	sp, #16
 8014a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014aa2 <__exponent>:
 8014aa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014aa4:	2900      	cmp	r1, #0
 8014aa6:	4604      	mov	r4, r0
 8014aa8:	bfba      	itte	lt
 8014aaa:	4249      	neglt	r1, r1
 8014aac:	232d      	movlt	r3, #45	; 0x2d
 8014aae:	232b      	movge	r3, #43	; 0x2b
 8014ab0:	2909      	cmp	r1, #9
 8014ab2:	f804 2b02 	strb.w	r2, [r4], #2
 8014ab6:	7043      	strb	r3, [r0, #1]
 8014ab8:	dd20      	ble.n	8014afc <__exponent+0x5a>
 8014aba:	f10d 0307 	add.w	r3, sp, #7
 8014abe:	461f      	mov	r7, r3
 8014ac0:	260a      	movs	r6, #10
 8014ac2:	fb91 f5f6 	sdiv	r5, r1, r6
 8014ac6:	fb06 1115 	mls	r1, r6, r5, r1
 8014aca:	3130      	adds	r1, #48	; 0x30
 8014acc:	2d09      	cmp	r5, #9
 8014ace:	f803 1c01 	strb.w	r1, [r3, #-1]
 8014ad2:	f103 32ff 	add.w	r2, r3, #4294967295
 8014ad6:	4629      	mov	r1, r5
 8014ad8:	dc09      	bgt.n	8014aee <__exponent+0x4c>
 8014ada:	3130      	adds	r1, #48	; 0x30
 8014adc:	3b02      	subs	r3, #2
 8014ade:	f802 1c01 	strb.w	r1, [r2, #-1]
 8014ae2:	42bb      	cmp	r3, r7
 8014ae4:	4622      	mov	r2, r4
 8014ae6:	d304      	bcc.n	8014af2 <__exponent+0x50>
 8014ae8:	1a10      	subs	r0, r2, r0
 8014aea:	b003      	add	sp, #12
 8014aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014aee:	4613      	mov	r3, r2
 8014af0:	e7e7      	b.n	8014ac2 <__exponent+0x20>
 8014af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014af6:	f804 2b01 	strb.w	r2, [r4], #1
 8014afa:	e7f2      	b.n	8014ae2 <__exponent+0x40>
 8014afc:	2330      	movs	r3, #48	; 0x30
 8014afe:	4419      	add	r1, r3
 8014b00:	7083      	strb	r3, [r0, #2]
 8014b02:	1d02      	adds	r2, r0, #4
 8014b04:	70c1      	strb	r1, [r0, #3]
 8014b06:	e7ef      	b.n	8014ae8 <__exponent+0x46>

08014b08 <_printf_float>:
 8014b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b0c:	b08d      	sub	sp, #52	; 0x34
 8014b0e:	460c      	mov	r4, r1
 8014b10:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8014b14:	4616      	mov	r6, r2
 8014b16:	461f      	mov	r7, r3
 8014b18:	4605      	mov	r5, r0
 8014b1a:	f001 fd1f 	bl	801655c <_localeconv_r>
 8014b1e:	6803      	ldr	r3, [r0, #0]
 8014b20:	9304      	str	r3, [sp, #16]
 8014b22:	4618      	mov	r0, r3
 8014b24:	f7eb fb74 	bl	8000210 <strlen>
 8014b28:	2300      	movs	r3, #0
 8014b2a:	930a      	str	r3, [sp, #40]	; 0x28
 8014b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8014b30:	9005      	str	r0, [sp, #20]
 8014b32:	3307      	adds	r3, #7
 8014b34:	f023 0307 	bic.w	r3, r3, #7
 8014b38:	f103 0208 	add.w	r2, r3, #8
 8014b3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014b40:	f8d4 b000 	ldr.w	fp, [r4]
 8014b44:	f8c8 2000 	str.w	r2, [r8]
 8014b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b4c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014b50:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014b54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b58:	9307      	str	r3, [sp, #28]
 8014b5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8014b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b62:	4ba7      	ldr	r3, [pc, #668]	; (8014e00 <_printf_float+0x2f8>)
 8014b64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b68:	f7ec f800 	bl	8000b6c <__aeabi_dcmpun>
 8014b6c:	bb70      	cbnz	r0, 8014bcc <_printf_float+0xc4>
 8014b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8014b72:	4ba3      	ldr	r3, [pc, #652]	; (8014e00 <_printf_float+0x2f8>)
 8014b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b78:	f7eb ffda 	bl	8000b30 <__aeabi_dcmple>
 8014b7c:	bb30      	cbnz	r0, 8014bcc <_printf_float+0xc4>
 8014b7e:	2200      	movs	r2, #0
 8014b80:	2300      	movs	r3, #0
 8014b82:	4640      	mov	r0, r8
 8014b84:	4649      	mov	r1, r9
 8014b86:	f7eb ffc9 	bl	8000b1c <__aeabi_dcmplt>
 8014b8a:	b110      	cbz	r0, 8014b92 <_printf_float+0x8a>
 8014b8c:	232d      	movs	r3, #45	; 0x2d
 8014b8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b92:	4a9c      	ldr	r2, [pc, #624]	; (8014e04 <_printf_float+0x2fc>)
 8014b94:	4b9c      	ldr	r3, [pc, #624]	; (8014e08 <_printf_float+0x300>)
 8014b96:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014b9a:	bf8c      	ite	hi
 8014b9c:	4690      	movhi	r8, r2
 8014b9e:	4698      	movls	r8, r3
 8014ba0:	2303      	movs	r3, #3
 8014ba2:	f02b 0204 	bic.w	r2, fp, #4
 8014ba6:	6123      	str	r3, [r4, #16]
 8014ba8:	6022      	str	r2, [r4, #0]
 8014baa:	f04f 0900 	mov.w	r9, #0
 8014bae:	9700      	str	r7, [sp, #0]
 8014bb0:	4633      	mov	r3, r6
 8014bb2:	aa0b      	add	r2, sp, #44	; 0x2c
 8014bb4:	4621      	mov	r1, r4
 8014bb6:	4628      	mov	r0, r5
 8014bb8:	f000 f9e6 	bl	8014f88 <_printf_common>
 8014bbc:	3001      	adds	r0, #1
 8014bbe:	f040 808d 	bne.w	8014cdc <_printf_float+0x1d4>
 8014bc2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bc6:	b00d      	add	sp, #52	; 0x34
 8014bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bcc:	4642      	mov	r2, r8
 8014bce:	464b      	mov	r3, r9
 8014bd0:	4640      	mov	r0, r8
 8014bd2:	4649      	mov	r1, r9
 8014bd4:	f7eb ffca 	bl	8000b6c <__aeabi_dcmpun>
 8014bd8:	b110      	cbz	r0, 8014be0 <_printf_float+0xd8>
 8014bda:	4a8c      	ldr	r2, [pc, #560]	; (8014e0c <_printf_float+0x304>)
 8014bdc:	4b8c      	ldr	r3, [pc, #560]	; (8014e10 <_printf_float+0x308>)
 8014bde:	e7da      	b.n	8014b96 <_printf_float+0x8e>
 8014be0:	6861      	ldr	r1, [r4, #4]
 8014be2:	1c4b      	adds	r3, r1, #1
 8014be4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8014be8:	a80a      	add	r0, sp, #40	; 0x28
 8014bea:	d13e      	bne.n	8014c6a <_printf_float+0x162>
 8014bec:	2306      	movs	r3, #6
 8014bee:	6063      	str	r3, [r4, #4]
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014bf6:	ab09      	add	r3, sp, #36	; 0x24
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	ec49 8b10 	vmov	d0, r8, r9
 8014bfe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014c02:	6022      	str	r2, [r4, #0]
 8014c04:	f8cd a004 	str.w	sl, [sp, #4]
 8014c08:	6861      	ldr	r1, [r4, #4]
 8014c0a:	4628      	mov	r0, r5
 8014c0c:	f7ff fee8 	bl	80149e0 <__cvt>
 8014c10:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8014c14:	2b47      	cmp	r3, #71	; 0x47
 8014c16:	4680      	mov	r8, r0
 8014c18:	d109      	bne.n	8014c2e <_printf_float+0x126>
 8014c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c1c:	1cd8      	adds	r0, r3, #3
 8014c1e:	db02      	blt.n	8014c26 <_printf_float+0x11e>
 8014c20:	6862      	ldr	r2, [r4, #4]
 8014c22:	4293      	cmp	r3, r2
 8014c24:	dd47      	ble.n	8014cb6 <_printf_float+0x1ae>
 8014c26:	f1aa 0a02 	sub.w	sl, sl, #2
 8014c2a:	fa5f fa8a 	uxtb.w	sl, sl
 8014c2e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c34:	d824      	bhi.n	8014c80 <_printf_float+0x178>
 8014c36:	3901      	subs	r1, #1
 8014c38:	4652      	mov	r2, sl
 8014c3a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014c3e:	9109      	str	r1, [sp, #36]	; 0x24
 8014c40:	f7ff ff2f 	bl	8014aa2 <__exponent>
 8014c44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c46:	1813      	adds	r3, r2, r0
 8014c48:	2a01      	cmp	r2, #1
 8014c4a:	4681      	mov	r9, r0
 8014c4c:	6123      	str	r3, [r4, #16]
 8014c4e:	dc02      	bgt.n	8014c56 <_printf_float+0x14e>
 8014c50:	6822      	ldr	r2, [r4, #0]
 8014c52:	07d1      	lsls	r1, r2, #31
 8014c54:	d501      	bpl.n	8014c5a <_printf_float+0x152>
 8014c56:	3301      	adds	r3, #1
 8014c58:	6123      	str	r3, [r4, #16]
 8014c5a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d0a5      	beq.n	8014bae <_printf_float+0xa6>
 8014c62:	232d      	movs	r3, #45	; 0x2d
 8014c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c68:	e7a1      	b.n	8014bae <_printf_float+0xa6>
 8014c6a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014c6e:	f000 8177 	beq.w	8014f60 <_printf_float+0x458>
 8014c72:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014c76:	d1bb      	bne.n	8014bf0 <_printf_float+0xe8>
 8014c78:	2900      	cmp	r1, #0
 8014c7a:	d1b9      	bne.n	8014bf0 <_printf_float+0xe8>
 8014c7c:	2301      	movs	r3, #1
 8014c7e:	e7b6      	b.n	8014bee <_printf_float+0xe6>
 8014c80:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014c84:	d119      	bne.n	8014cba <_printf_float+0x1b2>
 8014c86:	2900      	cmp	r1, #0
 8014c88:	6863      	ldr	r3, [r4, #4]
 8014c8a:	dd0c      	ble.n	8014ca6 <_printf_float+0x19e>
 8014c8c:	6121      	str	r1, [r4, #16]
 8014c8e:	b913      	cbnz	r3, 8014c96 <_printf_float+0x18e>
 8014c90:	6822      	ldr	r2, [r4, #0]
 8014c92:	07d2      	lsls	r2, r2, #31
 8014c94:	d502      	bpl.n	8014c9c <_printf_float+0x194>
 8014c96:	3301      	adds	r3, #1
 8014c98:	440b      	add	r3, r1
 8014c9a:	6123      	str	r3, [r4, #16]
 8014c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014c9e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014ca0:	f04f 0900 	mov.w	r9, #0
 8014ca4:	e7d9      	b.n	8014c5a <_printf_float+0x152>
 8014ca6:	b913      	cbnz	r3, 8014cae <_printf_float+0x1a6>
 8014ca8:	6822      	ldr	r2, [r4, #0]
 8014caa:	07d0      	lsls	r0, r2, #31
 8014cac:	d501      	bpl.n	8014cb2 <_printf_float+0x1aa>
 8014cae:	3302      	adds	r3, #2
 8014cb0:	e7f3      	b.n	8014c9a <_printf_float+0x192>
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e7f1      	b.n	8014c9a <_printf_float+0x192>
 8014cb6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8014cba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	db05      	blt.n	8014cce <_printf_float+0x1c6>
 8014cc2:	6822      	ldr	r2, [r4, #0]
 8014cc4:	6123      	str	r3, [r4, #16]
 8014cc6:	07d1      	lsls	r1, r2, #31
 8014cc8:	d5e8      	bpl.n	8014c9c <_printf_float+0x194>
 8014cca:	3301      	adds	r3, #1
 8014ccc:	e7e5      	b.n	8014c9a <_printf_float+0x192>
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	bfd4      	ite	le
 8014cd2:	f1c3 0302 	rsble	r3, r3, #2
 8014cd6:	2301      	movgt	r3, #1
 8014cd8:	4413      	add	r3, r2
 8014cda:	e7de      	b.n	8014c9a <_printf_float+0x192>
 8014cdc:	6823      	ldr	r3, [r4, #0]
 8014cde:	055a      	lsls	r2, r3, #21
 8014ce0:	d407      	bmi.n	8014cf2 <_printf_float+0x1ea>
 8014ce2:	6923      	ldr	r3, [r4, #16]
 8014ce4:	4642      	mov	r2, r8
 8014ce6:	4631      	mov	r1, r6
 8014ce8:	4628      	mov	r0, r5
 8014cea:	47b8      	blx	r7
 8014cec:	3001      	adds	r0, #1
 8014cee:	d12b      	bne.n	8014d48 <_printf_float+0x240>
 8014cf0:	e767      	b.n	8014bc2 <_printf_float+0xba>
 8014cf2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8014cf6:	f240 80dc 	bls.w	8014eb2 <_printf_float+0x3aa>
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014d02:	f7eb ff01 	bl	8000b08 <__aeabi_dcmpeq>
 8014d06:	2800      	cmp	r0, #0
 8014d08:	d033      	beq.n	8014d72 <_printf_float+0x26a>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	4a41      	ldr	r2, [pc, #260]	; (8014e14 <_printf_float+0x30c>)
 8014d0e:	4631      	mov	r1, r6
 8014d10:	4628      	mov	r0, r5
 8014d12:	47b8      	blx	r7
 8014d14:	3001      	adds	r0, #1
 8014d16:	f43f af54 	beq.w	8014bc2 <_printf_float+0xba>
 8014d1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d1e:	429a      	cmp	r2, r3
 8014d20:	db02      	blt.n	8014d28 <_printf_float+0x220>
 8014d22:	6823      	ldr	r3, [r4, #0]
 8014d24:	07d8      	lsls	r0, r3, #31
 8014d26:	d50f      	bpl.n	8014d48 <_printf_float+0x240>
 8014d28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d2c:	4631      	mov	r1, r6
 8014d2e:	4628      	mov	r0, r5
 8014d30:	47b8      	blx	r7
 8014d32:	3001      	adds	r0, #1
 8014d34:	f43f af45 	beq.w	8014bc2 <_printf_float+0xba>
 8014d38:	f04f 0800 	mov.w	r8, #0
 8014d3c:	f104 091a 	add.w	r9, r4, #26
 8014d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d42:	3b01      	subs	r3, #1
 8014d44:	4543      	cmp	r3, r8
 8014d46:	dc09      	bgt.n	8014d5c <_printf_float+0x254>
 8014d48:	6823      	ldr	r3, [r4, #0]
 8014d4a:	079b      	lsls	r3, r3, #30
 8014d4c:	f100 8103 	bmi.w	8014f56 <_printf_float+0x44e>
 8014d50:	68e0      	ldr	r0, [r4, #12]
 8014d52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d54:	4298      	cmp	r0, r3
 8014d56:	bfb8      	it	lt
 8014d58:	4618      	movlt	r0, r3
 8014d5a:	e734      	b.n	8014bc6 <_printf_float+0xbe>
 8014d5c:	2301      	movs	r3, #1
 8014d5e:	464a      	mov	r2, r9
 8014d60:	4631      	mov	r1, r6
 8014d62:	4628      	mov	r0, r5
 8014d64:	47b8      	blx	r7
 8014d66:	3001      	adds	r0, #1
 8014d68:	f43f af2b 	beq.w	8014bc2 <_printf_float+0xba>
 8014d6c:	f108 0801 	add.w	r8, r8, #1
 8014d70:	e7e6      	b.n	8014d40 <_printf_float+0x238>
 8014d72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	dc2b      	bgt.n	8014dd0 <_printf_float+0x2c8>
 8014d78:	2301      	movs	r3, #1
 8014d7a:	4a26      	ldr	r2, [pc, #152]	; (8014e14 <_printf_float+0x30c>)
 8014d7c:	4631      	mov	r1, r6
 8014d7e:	4628      	mov	r0, r5
 8014d80:	47b8      	blx	r7
 8014d82:	3001      	adds	r0, #1
 8014d84:	f43f af1d 	beq.w	8014bc2 <_printf_float+0xba>
 8014d88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d8a:	b923      	cbnz	r3, 8014d96 <_printf_float+0x28e>
 8014d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d8e:	b913      	cbnz	r3, 8014d96 <_printf_float+0x28e>
 8014d90:	6823      	ldr	r3, [r4, #0]
 8014d92:	07d9      	lsls	r1, r3, #31
 8014d94:	d5d8      	bpl.n	8014d48 <_printf_float+0x240>
 8014d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014d9a:	4631      	mov	r1, r6
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	47b8      	blx	r7
 8014da0:	3001      	adds	r0, #1
 8014da2:	f43f af0e 	beq.w	8014bc2 <_printf_float+0xba>
 8014da6:	f04f 0900 	mov.w	r9, #0
 8014daa:	f104 0a1a 	add.w	sl, r4, #26
 8014dae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014db0:	425b      	negs	r3, r3
 8014db2:	454b      	cmp	r3, r9
 8014db4:	dc01      	bgt.n	8014dba <_printf_float+0x2b2>
 8014db6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014db8:	e794      	b.n	8014ce4 <_printf_float+0x1dc>
 8014dba:	2301      	movs	r3, #1
 8014dbc:	4652      	mov	r2, sl
 8014dbe:	4631      	mov	r1, r6
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	47b8      	blx	r7
 8014dc4:	3001      	adds	r0, #1
 8014dc6:	f43f aefc 	beq.w	8014bc2 <_printf_float+0xba>
 8014dca:	f109 0901 	add.w	r9, r9, #1
 8014dce:	e7ee      	b.n	8014dae <_printf_float+0x2a6>
 8014dd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014dd2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	bfa8      	it	ge
 8014dd8:	461a      	movge	r2, r3
 8014dda:	2a00      	cmp	r2, #0
 8014ddc:	4691      	mov	r9, r2
 8014dde:	dd07      	ble.n	8014df0 <_printf_float+0x2e8>
 8014de0:	4613      	mov	r3, r2
 8014de2:	4631      	mov	r1, r6
 8014de4:	4642      	mov	r2, r8
 8014de6:	4628      	mov	r0, r5
 8014de8:	47b8      	blx	r7
 8014dea:	3001      	adds	r0, #1
 8014dec:	f43f aee9 	beq.w	8014bc2 <_printf_float+0xba>
 8014df0:	f104 031a 	add.w	r3, r4, #26
 8014df4:	f04f 0b00 	mov.w	fp, #0
 8014df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014dfc:	9306      	str	r3, [sp, #24]
 8014dfe:	e015      	b.n	8014e2c <_printf_float+0x324>
 8014e00:	7fefffff 	.word	0x7fefffff
 8014e04:	0801a02d 	.word	0x0801a02d
 8014e08:	0801a029 	.word	0x0801a029
 8014e0c:	0801a035 	.word	0x0801a035
 8014e10:	0801a031 	.word	0x0801a031
 8014e14:	0801a039 	.word	0x0801a039
 8014e18:	2301      	movs	r3, #1
 8014e1a:	9a06      	ldr	r2, [sp, #24]
 8014e1c:	4631      	mov	r1, r6
 8014e1e:	4628      	mov	r0, r5
 8014e20:	47b8      	blx	r7
 8014e22:	3001      	adds	r0, #1
 8014e24:	f43f aecd 	beq.w	8014bc2 <_printf_float+0xba>
 8014e28:	f10b 0b01 	add.w	fp, fp, #1
 8014e2c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8014e30:	ebaa 0309 	sub.w	r3, sl, r9
 8014e34:	455b      	cmp	r3, fp
 8014e36:	dcef      	bgt.n	8014e18 <_printf_float+0x310>
 8014e38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e3c:	429a      	cmp	r2, r3
 8014e3e:	44d0      	add	r8, sl
 8014e40:	db15      	blt.n	8014e6e <_printf_float+0x366>
 8014e42:	6823      	ldr	r3, [r4, #0]
 8014e44:	07da      	lsls	r2, r3, #31
 8014e46:	d412      	bmi.n	8014e6e <_printf_float+0x366>
 8014e48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e4c:	eba3 020a 	sub.w	r2, r3, sl
 8014e50:	eba3 0a01 	sub.w	sl, r3, r1
 8014e54:	4592      	cmp	sl, r2
 8014e56:	bfa8      	it	ge
 8014e58:	4692      	movge	sl, r2
 8014e5a:	f1ba 0f00 	cmp.w	sl, #0
 8014e5e:	dc0e      	bgt.n	8014e7e <_printf_float+0x376>
 8014e60:	f04f 0800 	mov.w	r8, #0
 8014e64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014e68:	f104 091a 	add.w	r9, r4, #26
 8014e6c:	e019      	b.n	8014ea2 <_printf_float+0x39a>
 8014e6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e72:	4631      	mov	r1, r6
 8014e74:	4628      	mov	r0, r5
 8014e76:	47b8      	blx	r7
 8014e78:	3001      	adds	r0, #1
 8014e7a:	d1e5      	bne.n	8014e48 <_printf_float+0x340>
 8014e7c:	e6a1      	b.n	8014bc2 <_printf_float+0xba>
 8014e7e:	4653      	mov	r3, sl
 8014e80:	4642      	mov	r2, r8
 8014e82:	4631      	mov	r1, r6
 8014e84:	4628      	mov	r0, r5
 8014e86:	47b8      	blx	r7
 8014e88:	3001      	adds	r0, #1
 8014e8a:	d1e9      	bne.n	8014e60 <_printf_float+0x358>
 8014e8c:	e699      	b.n	8014bc2 <_printf_float+0xba>
 8014e8e:	2301      	movs	r3, #1
 8014e90:	464a      	mov	r2, r9
 8014e92:	4631      	mov	r1, r6
 8014e94:	4628      	mov	r0, r5
 8014e96:	47b8      	blx	r7
 8014e98:	3001      	adds	r0, #1
 8014e9a:	f43f ae92 	beq.w	8014bc2 <_printf_float+0xba>
 8014e9e:	f108 0801 	add.w	r8, r8, #1
 8014ea2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014ea6:	1a9b      	subs	r3, r3, r2
 8014ea8:	eba3 030a 	sub.w	r3, r3, sl
 8014eac:	4543      	cmp	r3, r8
 8014eae:	dcee      	bgt.n	8014e8e <_printf_float+0x386>
 8014eb0:	e74a      	b.n	8014d48 <_printf_float+0x240>
 8014eb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eb4:	2a01      	cmp	r2, #1
 8014eb6:	dc01      	bgt.n	8014ebc <_printf_float+0x3b4>
 8014eb8:	07db      	lsls	r3, r3, #31
 8014eba:	d53a      	bpl.n	8014f32 <_printf_float+0x42a>
 8014ebc:	2301      	movs	r3, #1
 8014ebe:	4642      	mov	r2, r8
 8014ec0:	4631      	mov	r1, r6
 8014ec2:	4628      	mov	r0, r5
 8014ec4:	47b8      	blx	r7
 8014ec6:	3001      	adds	r0, #1
 8014ec8:	f43f ae7b 	beq.w	8014bc2 <_printf_float+0xba>
 8014ecc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ed0:	4631      	mov	r1, r6
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	47b8      	blx	r7
 8014ed6:	3001      	adds	r0, #1
 8014ed8:	f108 0801 	add.w	r8, r8, #1
 8014edc:	f43f ae71 	beq.w	8014bc2 <_printf_float+0xba>
 8014ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	f103 3aff 	add.w	sl, r3, #4294967295
 8014ee8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014eec:	2300      	movs	r3, #0
 8014eee:	f7eb fe0b 	bl	8000b08 <__aeabi_dcmpeq>
 8014ef2:	b9c8      	cbnz	r0, 8014f28 <_printf_float+0x420>
 8014ef4:	4653      	mov	r3, sl
 8014ef6:	4642      	mov	r2, r8
 8014ef8:	4631      	mov	r1, r6
 8014efa:	4628      	mov	r0, r5
 8014efc:	47b8      	blx	r7
 8014efe:	3001      	adds	r0, #1
 8014f00:	d10e      	bne.n	8014f20 <_printf_float+0x418>
 8014f02:	e65e      	b.n	8014bc2 <_printf_float+0xba>
 8014f04:	2301      	movs	r3, #1
 8014f06:	4652      	mov	r2, sl
 8014f08:	4631      	mov	r1, r6
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	47b8      	blx	r7
 8014f0e:	3001      	adds	r0, #1
 8014f10:	f43f ae57 	beq.w	8014bc2 <_printf_float+0xba>
 8014f14:	f108 0801 	add.w	r8, r8, #1
 8014f18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f1a:	3b01      	subs	r3, #1
 8014f1c:	4543      	cmp	r3, r8
 8014f1e:	dcf1      	bgt.n	8014f04 <_printf_float+0x3fc>
 8014f20:	464b      	mov	r3, r9
 8014f22:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f26:	e6de      	b.n	8014ce6 <_printf_float+0x1de>
 8014f28:	f04f 0800 	mov.w	r8, #0
 8014f2c:	f104 0a1a 	add.w	sl, r4, #26
 8014f30:	e7f2      	b.n	8014f18 <_printf_float+0x410>
 8014f32:	2301      	movs	r3, #1
 8014f34:	e7df      	b.n	8014ef6 <_printf_float+0x3ee>
 8014f36:	2301      	movs	r3, #1
 8014f38:	464a      	mov	r2, r9
 8014f3a:	4631      	mov	r1, r6
 8014f3c:	4628      	mov	r0, r5
 8014f3e:	47b8      	blx	r7
 8014f40:	3001      	adds	r0, #1
 8014f42:	f43f ae3e 	beq.w	8014bc2 <_printf_float+0xba>
 8014f46:	f108 0801 	add.w	r8, r8, #1
 8014f4a:	68e3      	ldr	r3, [r4, #12]
 8014f4c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014f4e:	1a9b      	subs	r3, r3, r2
 8014f50:	4543      	cmp	r3, r8
 8014f52:	dcf0      	bgt.n	8014f36 <_printf_float+0x42e>
 8014f54:	e6fc      	b.n	8014d50 <_printf_float+0x248>
 8014f56:	f04f 0800 	mov.w	r8, #0
 8014f5a:	f104 0919 	add.w	r9, r4, #25
 8014f5e:	e7f4      	b.n	8014f4a <_printf_float+0x442>
 8014f60:	2900      	cmp	r1, #0
 8014f62:	f43f ae8b 	beq.w	8014c7c <_printf_float+0x174>
 8014f66:	2300      	movs	r3, #0
 8014f68:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014f6c:	ab09      	add	r3, sp, #36	; 0x24
 8014f6e:	9300      	str	r3, [sp, #0]
 8014f70:	ec49 8b10 	vmov	d0, r8, r9
 8014f74:	6022      	str	r2, [r4, #0]
 8014f76:	f8cd a004 	str.w	sl, [sp, #4]
 8014f7a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014f7e:	4628      	mov	r0, r5
 8014f80:	f7ff fd2e 	bl	80149e0 <__cvt>
 8014f84:	4680      	mov	r8, r0
 8014f86:	e648      	b.n	8014c1a <_printf_float+0x112>

08014f88 <_printf_common>:
 8014f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f8c:	4691      	mov	r9, r2
 8014f8e:	461f      	mov	r7, r3
 8014f90:	688a      	ldr	r2, [r1, #8]
 8014f92:	690b      	ldr	r3, [r1, #16]
 8014f94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f98:	4293      	cmp	r3, r2
 8014f9a:	bfb8      	it	lt
 8014f9c:	4613      	movlt	r3, r2
 8014f9e:	f8c9 3000 	str.w	r3, [r9]
 8014fa2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014fa6:	4606      	mov	r6, r0
 8014fa8:	460c      	mov	r4, r1
 8014faa:	b112      	cbz	r2, 8014fb2 <_printf_common+0x2a>
 8014fac:	3301      	adds	r3, #1
 8014fae:	f8c9 3000 	str.w	r3, [r9]
 8014fb2:	6823      	ldr	r3, [r4, #0]
 8014fb4:	0699      	lsls	r1, r3, #26
 8014fb6:	bf42      	ittt	mi
 8014fb8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014fbc:	3302      	addmi	r3, #2
 8014fbe:	f8c9 3000 	strmi.w	r3, [r9]
 8014fc2:	6825      	ldr	r5, [r4, #0]
 8014fc4:	f015 0506 	ands.w	r5, r5, #6
 8014fc8:	d107      	bne.n	8014fda <_printf_common+0x52>
 8014fca:	f104 0a19 	add.w	sl, r4, #25
 8014fce:	68e3      	ldr	r3, [r4, #12]
 8014fd0:	f8d9 2000 	ldr.w	r2, [r9]
 8014fd4:	1a9b      	subs	r3, r3, r2
 8014fd6:	42ab      	cmp	r3, r5
 8014fd8:	dc28      	bgt.n	801502c <_printf_common+0xa4>
 8014fda:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8014fde:	6822      	ldr	r2, [r4, #0]
 8014fe0:	3300      	adds	r3, #0
 8014fe2:	bf18      	it	ne
 8014fe4:	2301      	movne	r3, #1
 8014fe6:	0692      	lsls	r2, r2, #26
 8014fe8:	d42d      	bmi.n	8015046 <_printf_common+0xbe>
 8014fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fee:	4639      	mov	r1, r7
 8014ff0:	4630      	mov	r0, r6
 8014ff2:	47c0      	blx	r8
 8014ff4:	3001      	adds	r0, #1
 8014ff6:	d020      	beq.n	801503a <_printf_common+0xb2>
 8014ff8:	6823      	ldr	r3, [r4, #0]
 8014ffa:	68e5      	ldr	r5, [r4, #12]
 8014ffc:	f8d9 2000 	ldr.w	r2, [r9]
 8015000:	f003 0306 	and.w	r3, r3, #6
 8015004:	2b04      	cmp	r3, #4
 8015006:	bf08      	it	eq
 8015008:	1aad      	subeq	r5, r5, r2
 801500a:	68a3      	ldr	r3, [r4, #8]
 801500c:	6922      	ldr	r2, [r4, #16]
 801500e:	bf0c      	ite	eq
 8015010:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015014:	2500      	movne	r5, #0
 8015016:	4293      	cmp	r3, r2
 8015018:	bfc4      	itt	gt
 801501a:	1a9b      	subgt	r3, r3, r2
 801501c:	18ed      	addgt	r5, r5, r3
 801501e:	f04f 0900 	mov.w	r9, #0
 8015022:	341a      	adds	r4, #26
 8015024:	454d      	cmp	r5, r9
 8015026:	d11a      	bne.n	801505e <_printf_common+0xd6>
 8015028:	2000      	movs	r0, #0
 801502a:	e008      	b.n	801503e <_printf_common+0xb6>
 801502c:	2301      	movs	r3, #1
 801502e:	4652      	mov	r2, sl
 8015030:	4639      	mov	r1, r7
 8015032:	4630      	mov	r0, r6
 8015034:	47c0      	blx	r8
 8015036:	3001      	adds	r0, #1
 8015038:	d103      	bne.n	8015042 <_printf_common+0xba>
 801503a:	f04f 30ff 	mov.w	r0, #4294967295
 801503e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015042:	3501      	adds	r5, #1
 8015044:	e7c3      	b.n	8014fce <_printf_common+0x46>
 8015046:	18e1      	adds	r1, r4, r3
 8015048:	1c5a      	adds	r2, r3, #1
 801504a:	2030      	movs	r0, #48	; 0x30
 801504c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015050:	4422      	add	r2, r4
 8015052:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015056:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801505a:	3302      	adds	r3, #2
 801505c:	e7c5      	b.n	8014fea <_printf_common+0x62>
 801505e:	2301      	movs	r3, #1
 8015060:	4622      	mov	r2, r4
 8015062:	4639      	mov	r1, r7
 8015064:	4630      	mov	r0, r6
 8015066:	47c0      	blx	r8
 8015068:	3001      	adds	r0, #1
 801506a:	d0e6      	beq.n	801503a <_printf_common+0xb2>
 801506c:	f109 0901 	add.w	r9, r9, #1
 8015070:	e7d8      	b.n	8015024 <_printf_common+0x9c>
	...

08015074 <_printf_i>:
 8015074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015078:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801507c:	460c      	mov	r4, r1
 801507e:	7e09      	ldrb	r1, [r1, #24]
 8015080:	b085      	sub	sp, #20
 8015082:	296e      	cmp	r1, #110	; 0x6e
 8015084:	4617      	mov	r7, r2
 8015086:	4606      	mov	r6, r0
 8015088:	4698      	mov	r8, r3
 801508a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801508c:	f000 80b3 	beq.w	80151f6 <_printf_i+0x182>
 8015090:	d822      	bhi.n	80150d8 <_printf_i+0x64>
 8015092:	2963      	cmp	r1, #99	; 0x63
 8015094:	d036      	beq.n	8015104 <_printf_i+0x90>
 8015096:	d80a      	bhi.n	80150ae <_printf_i+0x3a>
 8015098:	2900      	cmp	r1, #0
 801509a:	f000 80b9 	beq.w	8015210 <_printf_i+0x19c>
 801509e:	2958      	cmp	r1, #88	; 0x58
 80150a0:	f000 8083 	beq.w	80151aa <_printf_i+0x136>
 80150a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80150ac:	e032      	b.n	8015114 <_printf_i+0xa0>
 80150ae:	2964      	cmp	r1, #100	; 0x64
 80150b0:	d001      	beq.n	80150b6 <_printf_i+0x42>
 80150b2:	2969      	cmp	r1, #105	; 0x69
 80150b4:	d1f6      	bne.n	80150a4 <_printf_i+0x30>
 80150b6:	6820      	ldr	r0, [r4, #0]
 80150b8:	6813      	ldr	r3, [r2, #0]
 80150ba:	0605      	lsls	r5, r0, #24
 80150bc:	f103 0104 	add.w	r1, r3, #4
 80150c0:	d52a      	bpl.n	8015118 <_printf_i+0xa4>
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	6011      	str	r1, [r2, #0]
 80150c6:	2b00      	cmp	r3, #0
 80150c8:	da03      	bge.n	80150d2 <_printf_i+0x5e>
 80150ca:	222d      	movs	r2, #45	; 0x2d
 80150cc:	425b      	negs	r3, r3
 80150ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80150d2:	486f      	ldr	r0, [pc, #444]	; (8015290 <_printf_i+0x21c>)
 80150d4:	220a      	movs	r2, #10
 80150d6:	e039      	b.n	801514c <_printf_i+0xd8>
 80150d8:	2973      	cmp	r1, #115	; 0x73
 80150da:	f000 809d 	beq.w	8015218 <_printf_i+0x1a4>
 80150de:	d808      	bhi.n	80150f2 <_printf_i+0x7e>
 80150e0:	296f      	cmp	r1, #111	; 0x6f
 80150e2:	d020      	beq.n	8015126 <_printf_i+0xb2>
 80150e4:	2970      	cmp	r1, #112	; 0x70
 80150e6:	d1dd      	bne.n	80150a4 <_printf_i+0x30>
 80150e8:	6823      	ldr	r3, [r4, #0]
 80150ea:	f043 0320 	orr.w	r3, r3, #32
 80150ee:	6023      	str	r3, [r4, #0]
 80150f0:	e003      	b.n	80150fa <_printf_i+0x86>
 80150f2:	2975      	cmp	r1, #117	; 0x75
 80150f4:	d017      	beq.n	8015126 <_printf_i+0xb2>
 80150f6:	2978      	cmp	r1, #120	; 0x78
 80150f8:	d1d4      	bne.n	80150a4 <_printf_i+0x30>
 80150fa:	2378      	movs	r3, #120	; 0x78
 80150fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015100:	4864      	ldr	r0, [pc, #400]	; (8015294 <_printf_i+0x220>)
 8015102:	e055      	b.n	80151b0 <_printf_i+0x13c>
 8015104:	6813      	ldr	r3, [r2, #0]
 8015106:	1d19      	adds	r1, r3, #4
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	6011      	str	r1, [r2, #0]
 801510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015114:	2301      	movs	r3, #1
 8015116:	e08c      	b.n	8015232 <_printf_i+0x1be>
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	6011      	str	r1, [r2, #0]
 801511c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015120:	bf18      	it	ne
 8015122:	b21b      	sxthne	r3, r3
 8015124:	e7cf      	b.n	80150c6 <_printf_i+0x52>
 8015126:	6813      	ldr	r3, [r2, #0]
 8015128:	6825      	ldr	r5, [r4, #0]
 801512a:	1d18      	adds	r0, r3, #4
 801512c:	6010      	str	r0, [r2, #0]
 801512e:	0628      	lsls	r0, r5, #24
 8015130:	d501      	bpl.n	8015136 <_printf_i+0xc2>
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	e002      	b.n	801513c <_printf_i+0xc8>
 8015136:	0668      	lsls	r0, r5, #25
 8015138:	d5fb      	bpl.n	8015132 <_printf_i+0xbe>
 801513a:	881b      	ldrh	r3, [r3, #0]
 801513c:	4854      	ldr	r0, [pc, #336]	; (8015290 <_printf_i+0x21c>)
 801513e:	296f      	cmp	r1, #111	; 0x6f
 8015140:	bf14      	ite	ne
 8015142:	220a      	movne	r2, #10
 8015144:	2208      	moveq	r2, #8
 8015146:	2100      	movs	r1, #0
 8015148:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801514c:	6865      	ldr	r5, [r4, #4]
 801514e:	60a5      	str	r5, [r4, #8]
 8015150:	2d00      	cmp	r5, #0
 8015152:	f2c0 8095 	blt.w	8015280 <_printf_i+0x20c>
 8015156:	6821      	ldr	r1, [r4, #0]
 8015158:	f021 0104 	bic.w	r1, r1, #4
 801515c:	6021      	str	r1, [r4, #0]
 801515e:	2b00      	cmp	r3, #0
 8015160:	d13d      	bne.n	80151de <_printf_i+0x16a>
 8015162:	2d00      	cmp	r5, #0
 8015164:	f040 808e 	bne.w	8015284 <_printf_i+0x210>
 8015168:	4665      	mov	r5, ip
 801516a:	2a08      	cmp	r2, #8
 801516c:	d10b      	bne.n	8015186 <_printf_i+0x112>
 801516e:	6823      	ldr	r3, [r4, #0]
 8015170:	07db      	lsls	r3, r3, #31
 8015172:	d508      	bpl.n	8015186 <_printf_i+0x112>
 8015174:	6923      	ldr	r3, [r4, #16]
 8015176:	6862      	ldr	r2, [r4, #4]
 8015178:	429a      	cmp	r2, r3
 801517a:	bfde      	ittt	le
 801517c:	2330      	movle	r3, #48	; 0x30
 801517e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015182:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015186:	ebac 0305 	sub.w	r3, ip, r5
 801518a:	6123      	str	r3, [r4, #16]
 801518c:	f8cd 8000 	str.w	r8, [sp]
 8015190:	463b      	mov	r3, r7
 8015192:	aa03      	add	r2, sp, #12
 8015194:	4621      	mov	r1, r4
 8015196:	4630      	mov	r0, r6
 8015198:	f7ff fef6 	bl	8014f88 <_printf_common>
 801519c:	3001      	adds	r0, #1
 801519e:	d14d      	bne.n	801523c <_printf_i+0x1c8>
 80151a0:	f04f 30ff 	mov.w	r0, #4294967295
 80151a4:	b005      	add	sp, #20
 80151a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80151aa:	4839      	ldr	r0, [pc, #228]	; (8015290 <_printf_i+0x21c>)
 80151ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80151b0:	6813      	ldr	r3, [r2, #0]
 80151b2:	6821      	ldr	r1, [r4, #0]
 80151b4:	1d1d      	adds	r5, r3, #4
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	6015      	str	r5, [r2, #0]
 80151ba:	060a      	lsls	r2, r1, #24
 80151bc:	d50b      	bpl.n	80151d6 <_printf_i+0x162>
 80151be:	07ca      	lsls	r2, r1, #31
 80151c0:	bf44      	itt	mi
 80151c2:	f041 0120 	orrmi.w	r1, r1, #32
 80151c6:	6021      	strmi	r1, [r4, #0]
 80151c8:	b91b      	cbnz	r3, 80151d2 <_printf_i+0x15e>
 80151ca:	6822      	ldr	r2, [r4, #0]
 80151cc:	f022 0220 	bic.w	r2, r2, #32
 80151d0:	6022      	str	r2, [r4, #0]
 80151d2:	2210      	movs	r2, #16
 80151d4:	e7b7      	b.n	8015146 <_printf_i+0xd2>
 80151d6:	064d      	lsls	r5, r1, #25
 80151d8:	bf48      	it	mi
 80151da:	b29b      	uxthmi	r3, r3
 80151dc:	e7ef      	b.n	80151be <_printf_i+0x14a>
 80151de:	4665      	mov	r5, ip
 80151e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80151e4:	fb02 3311 	mls	r3, r2, r1, r3
 80151e8:	5cc3      	ldrb	r3, [r0, r3]
 80151ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80151ee:	460b      	mov	r3, r1
 80151f0:	2900      	cmp	r1, #0
 80151f2:	d1f5      	bne.n	80151e0 <_printf_i+0x16c>
 80151f4:	e7b9      	b.n	801516a <_printf_i+0xf6>
 80151f6:	6813      	ldr	r3, [r2, #0]
 80151f8:	6825      	ldr	r5, [r4, #0]
 80151fa:	6961      	ldr	r1, [r4, #20]
 80151fc:	1d18      	adds	r0, r3, #4
 80151fe:	6010      	str	r0, [r2, #0]
 8015200:	0628      	lsls	r0, r5, #24
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	d501      	bpl.n	801520a <_printf_i+0x196>
 8015206:	6019      	str	r1, [r3, #0]
 8015208:	e002      	b.n	8015210 <_printf_i+0x19c>
 801520a:	066a      	lsls	r2, r5, #25
 801520c:	d5fb      	bpl.n	8015206 <_printf_i+0x192>
 801520e:	8019      	strh	r1, [r3, #0]
 8015210:	2300      	movs	r3, #0
 8015212:	6123      	str	r3, [r4, #16]
 8015214:	4665      	mov	r5, ip
 8015216:	e7b9      	b.n	801518c <_printf_i+0x118>
 8015218:	6813      	ldr	r3, [r2, #0]
 801521a:	1d19      	adds	r1, r3, #4
 801521c:	6011      	str	r1, [r2, #0]
 801521e:	681d      	ldr	r5, [r3, #0]
 8015220:	6862      	ldr	r2, [r4, #4]
 8015222:	2100      	movs	r1, #0
 8015224:	4628      	mov	r0, r5
 8015226:	f7ea fffb 	bl	8000220 <memchr>
 801522a:	b108      	cbz	r0, 8015230 <_printf_i+0x1bc>
 801522c:	1b40      	subs	r0, r0, r5
 801522e:	6060      	str	r0, [r4, #4]
 8015230:	6863      	ldr	r3, [r4, #4]
 8015232:	6123      	str	r3, [r4, #16]
 8015234:	2300      	movs	r3, #0
 8015236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801523a:	e7a7      	b.n	801518c <_printf_i+0x118>
 801523c:	6923      	ldr	r3, [r4, #16]
 801523e:	462a      	mov	r2, r5
 8015240:	4639      	mov	r1, r7
 8015242:	4630      	mov	r0, r6
 8015244:	47c0      	blx	r8
 8015246:	3001      	adds	r0, #1
 8015248:	d0aa      	beq.n	80151a0 <_printf_i+0x12c>
 801524a:	6823      	ldr	r3, [r4, #0]
 801524c:	079b      	lsls	r3, r3, #30
 801524e:	d413      	bmi.n	8015278 <_printf_i+0x204>
 8015250:	68e0      	ldr	r0, [r4, #12]
 8015252:	9b03      	ldr	r3, [sp, #12]
 8015254:	4298      	cmp	r0, r3
 8015256:	bfb8      	it	lt
 8015258:	4618      	movlt	r0, r3
 801525a:	e7a3      	b.n	80151a4 <_printf_i+0x130>
 801525c:	2301      	movs	r3, #1
 801525e:	464a      	mov	r2, r9
 8015260:	4639      	mov	r1, r7
 8015262:	4630      	mov	r0, r6
 8015264:	47c0      	blx	r8
 8015266:	3001      	adds	r0, #1
 8015268:	d09a      	beq.n	80151a0 <_printf_i+0x12c>
 801526a:	3501      	adds	r5, #1
 801526c:	68e3      	ldr	r3, [r4, #12]
 801526e:	9a03      	ldr	r2, [sp, #12]
 8015270:	1a9b      	subs	r3, r3, r2
 8015272:	42ab      	cmp	r3, r5
 8015274:	dcf2      	bgt.n	801525c <_printf_i+0x1e8>
 8015276:	e7eb      	b.n	8015250 <_printf_i+0x1dc>
 8015278:	2500      	movs	r5, #0
 801527a:	f104 0919 	add.w	r9, r4, #25
 801527e:	e7f5      	b.n	801526c <_printf_i+0x1f8>
 8015280:	2b00      	cmp	r3, #0
 8015282:	d1ac      	bne.n	80151de <_printf_i+0x16a>
 8015284:	7803      	ldrb	r3, [r0, #0]
 8015286:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801528a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801528e:	e76c      	b.n	801516a <_printf_i+0xf6>
 8015290:	0801a03b 	.word	0x0801a03b
 8015294:	0801a04c 	.word	0x0801a04c

08015298 <copysign>:
 8015298:	ec51 0b10 	vmov	r0, r1, d0
 801529c:	ee11 0a90 	vmov	r0, s3
 80152a0:	ee10 2a10 	vmov	r2, s0
 80152a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80152a8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80152ac:	ea41 0300 	orr.w	r3, r1, r0
 80152b0:	ec43 2b10 	vmov	d0, r2, r3
 80152b4:	4770      	bx	lr
	...

080152b8 <_sbrk_r>:
 80152b8:	b538      	push	{r3, r4, r5, lr}
 80152ba:	4c06      	ldr	r4, [pc, #24]	; (80152d4 <_sbrk_r+0x1c>)
 80152bc:	2300      	movs	r3, #0
 80152be:	4605      	mov	r5, r0
 80152c0:	4608      	mov	r0, r1
 80152c2:	6023      	str	r3, [r4, #0]
 80152c4:	f7f2 f890 	bl	80073e8 <_sbrk>
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d102      	bne.n	80152d2 <_sbrk_r+0x1a>
 80152cc:	6823      	ldr	r3, [r4, #0]
 80152ce:	b103      	cbz	r3, 80152d2 <_sbrk_r+0x1a>
 80152d0:	602b      	str	r3, [r5, #0]
 80152d2:	bd38      	pop	{r3, r4, r5, pc}
 80152d4:	20006aa0 	.word	0x20006aa0

080152d8 <sniprintf>:
 80152d8:	b40c      	push	{r2, r3}
 80152da:	b530      	push	{r4, r5, lr}
 80152dc:	4b17      	ldr	r3, [pc, #92]	; (801533c <sniprintf+0x64>)
 80152de:	1e0c      	subs	r4, r1, #0
 80152e0:	b09d      	sub	sp, #116	; 0x74
 80152e2:	681d      	ldr	r5, [r3, #0]
 80152e4:	da08      	bge.n	80152f8 <sniprintf+0x20>
 80152e6:	238b      	movs	r3, #139	; 0x8b
 80152e8:	602b      	str	r3, [r5, #0]
 80152ea:	f04f 30ff 	mov.w	r0, #4294967295
 80152ee:	b01d      	add	sp, #116	; 0x74
 80152f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80152f4:	b002      	add	sp, #8
 80152f6:	4770      	bx	lr
 80152f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80152fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015300:	bf14      	ite	ne
 8015302:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015306:	4623      	moveq	r3, r4
 8015308:	9304      	str	r3, [sp, #16]
 801530a:	9307      	str	r3, [sp, #28]
 801530c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015310:	9002      	str	r0, [sp, #8]
 8015312:	9006      	str	r0, [sp, #24]
 8015314:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015318:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801531a:	ab21      	add	r3, sp, #132	; 0x84
 801531c:	a902      	add	r1, sp, #8
 801531e:	4628      	mov	r0, r5
 8015320:	9301      	str	r3, [sp, #4]
 8015322:	f001 fd23 	bl	8016d6c <_svfiprintf_r>
 8015326:	1c43      	adds	r3, r0, #1
 8015328:	bfbc      	itt	lt
 801532a:	238b      	movlt	r3, #139	; 0x8b
 801532c:	602b      	strlt	r3, [r5, #0]
 801532e:	2c00      	cmp	r4, #0
 8015330:	d0dd      	beq.n	80152ee <sniprintf+0x16>
 8015332:	9b02      	ldr	r3, [sp, #8]
 8015334:	2200      	movs	r2, #0
 8015336:	701a      	strb	r2, [r3, #0]
 8015338:	e7d9      	b.n	80152ee <sniprintf+0x16>
 801533a:	bf00      	nop
 801533c:	20000434 	.word	0x20000434

08015340 <siprintf>:
 8015340:	b40e      	push	{r1, r2, r3}
 8015342:	b500      	push	{lr}
 8015344:	b09c      	sub	sp, #112	; 0x70
 8015346:	ab1d      	add	r3, sp, #116	; 0x74
 8015348:	9002      	str	r0, [sp, #8]
 801534a:	9006      	str	r0, [sp, #24]
 801534c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015350:	4809      	ldr	r0, [pc, #36]	; (8015378 <siprintf+0x38>)
 8015352:	9107      	str	r1, [sp, #28]
 8015354:	9104      	str	r1, [sp, #16]
 8015356:	4909      	ldr	r1, [pc, #36]	; (801537c <siprintf+0x3c>)
 8015358:	f853 2b04 	ldr.w	r2, [r3], #4
 801535c:	9105      	str	r1, [sp, #20]
 801535e:	6800      	ldr	r0, [r0, #0]
 8015360:	9301      	str	r3, [sp, #4]
 8015362:	a902      	add	r1, sp, #8
 8015364:	f001 fd02 	bl	8016d6c <_svfiprintf_r>
 8015368:	9b02      	ldr	r3, [sp, #8]
 801536a:	2200      	movs	r2, #0
 801536c:	701a      	strb	r2, [r3, #0]
 801536e:	b01c      	add	sp, #112	; 0x70
 8015370:	f85d eb04 	ldr.w	lr, [sp], #4
 8015374:	b003      	add	sp, #12
 8015376:	4770      	bx	lr
 8015378:	20000434 	.word	0x20000434
 801537c:	ffff0208 	.word	0xffff0208

08015380 <__sread>:
 8015380:	b510      	push	{r4, lr}
 8015382:	460c      	mov	r4, r1
 8015384:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015388:	f001 fde8 	bl	8016f5c <_read_r>
 801538c:	2800      	cmp	r0, #0
 801538e:	bfab      	itete	ge
 8015390:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015392:	89a3      	ldrhlt	r3, [r4, #12]
 8015394:	181b      	addge	r3, r3, r0
 8015396:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801539a:	bfac      	ite	ge
 801539c:	6563      	strge	r3, [r4, #84]	; 0x54
 801539e:	81a3      	strhlt	r3, [r4, #12]
 80153a0:	bd10      	pop	{r4, pc}

080153a2 <__swrite>:
 80153a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80153a6:	461f      	mov	r7, r3
 80153a8:	898b      	ldrh	r3, [r1, #12]
 80153aa:	05db      	lsls	r3, r3, #23
 80153ac:	4605      	mov	r5, r0
 80153ae:	460c      	mov	r4, r1
 80153b0:	4616      	mov	r6, r2
 80153b2:	d505      	bpl.n	80153c0 <__swrite+0x1e>
 80153b4:	2302      	movs	r3, #2
 80153b6:	2200      	movs	r2, #0
 80153b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153bc:	f001 f8dc 	bl	8016578 <_lseek_r>
 80153c0:	89a3      	ldrh	r3, [r4, #12]
 80153c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80153ca:	81a3      	strh	r3, [r4, #12]
 80153cc:	4632      	mov	r2, r6
 80153ce:	463b      	mov	r3, r7
 80153d0:	4628      	mov	r0, r5
 80153d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80153d6:	f000 b869 	b.w	80154ac <_write_r>

080153da <__sseek>:
 80153da:	b510      	push	{r4, lr}
 80153dc:	460c      	mov	r4, r1
 80153de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80153e2:	f001 f8c9 	bl	8016578 <_lseek_r>
 80153e6:	1c43      	adds	r3, r0, #1
 80153e8:	89a3      	ldrh	r3, [r4, #12]
 80153ea:	bf15      	itete	ne
 80153ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80153ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80153f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80153f6:	81a3      	strheq	r3, [r4, #12]
 80153f8:	bf18      	it	ne
 80153fa:	81a3      	strhne	r3, [r4, #12]
 80153fc:	bd10      	pop	{r4, pc}

080153fe <__sclose>:
 80153fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015402:	f000 b8db 	b.w	80155bc <_close_r>
	...

08015408 <__swbuf_r>:
 8015408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801540a:	460e      	mov	r6, r1
 801540c:	4614      	mov	r4, r2
 801540e:	4605      	mov	r5, r0
 8015410:	b118      	cbz	r0, 801541a <__swbuf_r+0x12>
 8015412:	6983      	ldr	r3, [r0, #24]
 8015414:	b90b      	cbnz	r3, 801541a <__swbuf_r+0x12>
 8015416:	f001 f817 	bl	8016448 <__sinit>
 801541a:	4b21      	ldr	r3, [pc, #132]	; (80154a0 <__swbuf_r+0x98>)
 801541c:	429c      	cmp	r4, r3
 801541e:	d12a      	bne.n	8015476 <__swbuf_r+0x6e>
 8015420:	686c      	ldr	r4, [r5, #4]
 8015422:	69a3      	ldr	r3, [r4, #24]
 8015424:	60a3      	str	r3, [r4, #8]
 8015426:	89a3      	ldrh	r3, [r4, #12]
 8015428:	071a      	lsls	r2, r3, #28
 801542a:	d52e      	bpl.n	801548a <__swbuf_r+0x82>
 801542c:	6923      	ldr	r3, [r4, #16]
 801542e:	b363      	cbz	r3, 801548a <__swbuf_r+0x82>
 8015430:	6923      	ldr	r3, [r4, #16]
 8015432:	6820      	ldr	r0, [r4, #0]
 8015434:	1ac0      	subs	r0, r0, r3
 8015436:	6963      	ldr	r3, [r4, #20]
 8015438:	b2f6      	uxtb	r6, r6
 801543a:	4283      	cmp	r3, r0
 801543c:	4637      	mov	r7, r6
 801543e:	dc04      	bgt.n	801544a <__swbuf_r+0x42>
 8015440:	4621      	mov	r1, r4
 8015442:	4628      	mov	r0, r5
 8015444:	f000 ff96 	bl	8016374 <_fflush_r>
 8015448:	bb28      	cbnz	r0, 8015496 <__swbuf_r+0x8e>
 801544a:	68a3      	ldr	r3, [r4, #8]
 801544c:	3b01      	subs	r3, #1
 801544e:	60a3      	str	r3, [r4, #8]
 8015450:	6823      	ldr	r3, [r4, #0]
 8015452:	1c5a      	adds	r2, r3, #1
 8015454:	6022      	str	r2, [r4, #0]
 8015456:	701e      	strb	r6, [r3, #0]
 8015458:	6963      	ldr	r3, [r4, #20]
 801545a:	3001      	adds	r0, #1
 801545c:	4283      	cmp	r3, r0
 801545e:	d004      	beq.n	801546a <__swbuf_r+0x62>
 8015460:	89a3      	ldrh	r3, [r4, #12]
 8015462:	07db      	lsls	r3, r3, #31
 8015464:	d519      	bpl.n	801549a <__swbuf_r+0x92>
 8015466:	2e0a      	cmp	r6, #10
 8015468:	d117      	bne.n	801549a <__swbuf_r+0x92>
 801546a:	4621      	mov	r1, r4
 801546c:	4628      	mov	r0, r5
 801546e:	f000 ff81 	bl	8016374 <_fflush_r>
 8015472:	b190      	cbz	r0, 801549a <__swbuf_r+0x92>
 8015474:	e00f      	b.n	8015496 <__swbuf_r+0x8e>
 8015476:	4b0b      	ldr	r3, [pc, #44]	; (80154a4 <__swbuf_r+0x9c>)
 8015478:	429c      	cmp	r4, r3
 801547a:	d101      	bne.n	8015480 <__swbuf_r+0x78>
 801547c:	68ac      	ldr	r4, [r5, #8]
 801547e:	e7d0      	b.n	8015422 <__swbuf_r+0x1a>
 8015480:	4b09      	ldr	r3, [pc, #36]	; (80154a8 <__swbuf_r+0xa0>)
 8015482:	429c      	cmp	r4, r3
 8015484:	bf08      	it	eq
 8015486:	68ec      	ldreq	r4, [r5, #12]
 8015488:	e7cb      	b.n	8015422 <__swbuf_r+0x1a>
 801548a:	4621      	mov	r1, r4
 801548c:	4628      	mov	r0, r5
 801548e:	f000 f81f 	bl	80154d0 <__swsetup_r>
 8015492:	2800      	cmp	r0, #0
 8015494:	d0cc      	beq.n	8015430 <__swbuf_r+0x28>
 8015496:	f04f 37ff 	mov.w	r7, #4294967295
 801549a:	4638      	mov	r0, r7
 801549c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801549e:	bf00      	nop
 80154a0:	0801a08c 	.word	0x0801a08c
 80154a4:	0801a0ac 	.word	0x0801a0ac
 80154a8:	0801a06c 	.word	0x0801a06c

080154ac <_write_r>:
 80154ac:	b538      	push	{r3, r4, r5, lr}
 80154ae:	4c07      	ldr	r4, [pc, #28]	; (80154cc <_write_r+0x20>)
 80154b0:	4605      	mov	r5, r0
 80154b2:	4608      	mov	r0, r1
 80154b4:	4611      	mov	r1, r2
 80154b6:	2200      	movs	r2, #0
 80154b8:	6022      	str	r2, [r4, #0]
 80154ba:	461a      	mov	r2, r3
 80154bc:	f7f1 ff43 	bl	8007346 <_write>
 80154c0:	1c43      	adds	r3, r0, #1
 80154c2:	d102      	bne.n	80154ca <_write_r+0x1e>
 80154c4:	6823      	ldr	r3, [r4, #0]
 80154c6:	b103      	cbz	r3, 80154ca <_write_r+0x1e>
 80154c8:	602b      	str	r3, [r5, #0]
 80154ca:	bd38      	pop	{r3, r4, r5, pc}
 80154cc:	20006aa0 	.word	0x20006aa0

080154d0 <__swsetup_r>:
 80154d0:	4b32      	ldr	r3, [pc, #200]	; (801559c <__swsetup_r+0xcc>)
 80154d2:	b570      	push	{r4, r5, r6, lr}
 80154d4:	681d      	ldr	r5, [r3, #0]
 80154d6:	4606      	mov	r6, r0
 80154d8:	460c      	mov	r4, r1
 80154da:	b125      	cbz	r5, 80154e6 <__swsetup_r+0x16>
 80154dc:	69ab      	ldr	r3, [r5, #24]
 80154de:	b913      	cbnz	r3, 80154e6 <__swsetup_r+0x16>
 80154e0:	4628      	mov	r0, r5
 80154e2:	f000 ffb1 	bl	8016448 <__sinit>
 80154e6:	4b2e      	ldr	r3, [pc, #184]	; (80155a0 <__swsetup_r+0xd0>)
 80154e8:	429c      	cmp	r4, r3
 80154ea:	d10f      	bne.n	801550c <__swsetup_r+0x3c>
 80154ec:	686c      	ldr	r4, [r5, #4]
 80154ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80154f2:	b29a      	uxth	r2, r3
 80154f4:	0715      	lsls	r5, r2, #28
 80154f6:	d42c      	bmi.n	8015552 <__swsetup_r+0x82>
 80154f8:	06d0      	lsls	r0, r2, #27
 80154fa:	d411      	bmi.n	8015520 <__swsetup_r+0x50>
 80154fc:	2209      	movs	r2, #9
 80154fe:	6032      	str	r2, [r6, #0]
 8015500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015504:	81a3      	strh	r3, [r4, #12]
 8015506:	f04f 30ff 	mov.w	r0, #4294967295
 801550a:	e03e      	b.n	801558a <__swsetup_r+0xba>
 801550c:	4b25      	ldr	r3, [pc, #148]	; (80155a4 <__swsetup_r+0xd4>)
 801550e:	429c      	cmp	r4, r3
 8015510:	d101      	bne.n	8015516 <__swsetup_r+0x46>
 8015512:	68ac      	ldr	r4, [r5, #8]
 8015514:	e7eb      	b.n	80154ee <__swsetup_r+0x1e>
 8015516:	4b24      	ldr	r3, [pc, #144]	; (80155a8 <__swsetup_r+0xd8>)
 8015518:	429c      	cmp	r4, r3
 801551a:	bf08      	it	eq
 801551c:	68ec      	ldreq	r4, [r5, #12]
 801551e:	e7e6      	b.n	80154ee <__swsetup_r+0x1e>
 8015520:	0751      	lsls	r1, r2, #29
 8015522:	d512      	bpl.n	801554a <__swsetup_r+0x7a>
 8015524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015526:	b141      	cbz	r1, 801553a <__swsetup_r+0x6a>
 8015528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801552c:	4299      	cmp	r1, r3
 801552e:	d002      	beq.n	8015536 <__swsetup_r+0x66>
 8015530:	4630      	mov	r0, r6
 8015532:	f7ff f86d 	bl	8014610 <_free_r>
 8015536:	2300      	movs	r3, #0
 8015538:	6363      	str	r3, [r4, #52]	; 0x34
 801553a:	89a3      	ldrh	r3, [r4, #12]
 801553c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015540:	81a3      	strh	r3, [r4, #12]
 8015542:	2300      	movs	r3, #0
 8015544:	6063      	str	r3, [r4, #4]
 8015546:	6923      	ldr	r3, [r4, #16]
 8015548:	6023      	str	r3, [r4, #0]
 801554a:	89a3      	ldrh	r3, [r4, #12]
 801554c:	f043 0308 	orr.w	r3, r3, #8
 8015550:	81a3      	strh	r3, [r4, #12]
 8015552:	6923      	ldr	r3, [r4, #16]
 8015554:	b94b      	cbnz	r3, 801556a <__swsetup_r+0x9a>
 8015556:	89a3      	ldrh	r3, [r4, #12]
 8015558:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801555c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015560:	d003      	beq.n	801556a <__swsetup_r+0x9a>
 8015562:	4621      	mov	r1, r4
 8015564:	4630      	mov	r0, r6
 8015566:	f001 f83d 	bl	80165e4 <__smakebuf_r>
 801556a:	89a2      	ldrh	r2, [r4, #12]
 801556c:	f012 0301 	ands.w	r3, r2, #1
 8015570:	d00c      	beq.n	801558c <__swsetup_r+0xbc>
 8015572:	2300      	movs	r3, #0
 8015574:	60a3      	str	r3, [r4, #8]
 8015576:	6963      	ldr	r3, [r4, #20]
 8015578:	425b      	negs	r3, r3
 801557a:	61a3      	str	r3, [r4, #24]
 801557c:	6923      	ldr	r3, [r4, #16]
 801557e:	b953      	cbnz	r3, 8015596 <__swsetup_r+0xc6>
 8015580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015584:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8015588:	d1ba      	bne.n	8015500 <__swsetup_r+0x30>
 801558a:	bd70      	pop	{r4, r5, r6, pc}
 801558c:	0792      	lsls	r2, r2, #30
 801558e:	bf58      	it	pl
 8015590:	6963      	ldrpl	r3, [r4, #20]
 8015592:	60a3      	str	r3, [r4, #8]
 8015594:	e7f2      	b.n	801557c <__swsetup_r+0xac>
 8015596:	2000      	movs	r0, #0
 8015598:	e7f7      	b.n	801558a <__swsetup_r+0xba>
 801559a:	bf00      	nop
 801559c:	20000434 	.word	0x20000434
 80155a0:	0801a08c 	.word	0x0801a08c
 80155a4:	0801a0ac 	.word	0x0801a0ac
 80155a8:	0801a06c 	.word	0x0801a06c

080155ac <abort>:
 80155ac:	b508      	push	{r3, lr}
 80155ae:	2006      	movs	r0, #6
 80155b0:	f001 fd0e 	bl	8016fd0 <raise>
 80155b4:	2001      	movs	r0, #1
 80155b6:	f7f1 fe9f 	bl	80072f8 <_exit>
	...

080155bc <_close_r>:
 80155bc:	b538      	push	{r3, r4, r5, lr}
 80155be:	4c06      	ldr	r4, [pc, #24]	; (80155d8 <_close_r+0x1c>)
 80155c0:	2300      	movs	r3, #0
 80155c2:	4605      	mov	r5, r0
 80155c4:	4608      	mov	r0, r1
 80155c6:	6023      	str	r3, [r4, #0]
 80155c8:	f7f1 fed9 	bl	800737e <_close>
 80155cc:	1c43      	adds	r3, r0, #1
 80155ce:	d102      	bne.n	80155d6 <_close_r+0x1a>
 80155d0:	6823      	ldr	r3, [r4, #0]
 80155d2:	b103      	cbz	r3, 80155d6 <_close_r+0x1a>
 80155d4:	602b      	str	r3, [r5, #0]
 80155d6:	bd38      	pop	{r3, r4, r5, pc}
 80155d8:	20006aa0 	.word	0x20006aa0

080155dc <quorem>:
 80155dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155e0:	6903      	ldr	r3, [r0, #16]
 80155e2:	690c      	ldr	r4, [r1, #16]
 80155e4:	42a3      	cmp	r3, r4
 80155e6:	4680      	mov	r8, r0
 80155e8:	f2c0 8082 	blt.w	80156f0 <quorem+0x114>
 80155ec:	3c01      	subs	r4, #1
 80155ee:	f101 0714 	add.w	r7, r1, #20
 80155f2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80155f6:	f100 0614 	add.w	r6, r0, #20
 80155fa:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80155fe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8015602:	eb06 030c 	add.w	r3, r6, ip
 8015606:	3501      	adds	r5, #1
 8015608:	eb07 090c 	add.w	r9, r7, ip
 801560c:	9301      	str	r3, [sp, #4]
 801560e:	fbb0 f5f5 	udiv	r5, r0, r5
 8015612:	b395      	cbz	r5, 801567a <quorem+0x9e>
 8015614:	f04f 0a00 	mov.w	sl, #0
 8015618:	4638      	mov	r0, r7
 801561a:	46b6      	mov	lr, r6
 801561c:	46d3      	mov	fp, sl
 801561e:	f850 2b04 	ldr.w	r2, [r0], #4
 8015622:	b293      	uxth	r3, r2
 8015624:	fb05 a303 	mla	r3, r5, r3, sl
 8015628:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801562c:	b29b      	uxth	r3, r3
 801562e:	ebab 0303 	sub.w	r3, fp, r3
 8015632:	0c12      	lsrs	r2, r2, #16
 8015634:	f8de b000 	ldr.w	fp, [lr]
 8015638:	fb05 a202 	mla	r2, r5, r2, sl
 801563c:	fa13 f38b 	uxtah	r3, r3, fp
 8015640:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015644:	fa1f fb82 	uxth.w	fp, r2
 8015648:	f8de 2000 	ldr.w	r2, [lr]
 801564c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015650:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015654:	b29b      	uxth	r3, r3
 8015656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801565a:	4581      	cmp	r9, r0
 801565c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015660:	f84e 3b04 	str.w	r3, [lr], #4
 8015664:	d2db      	bcs.n	801561e <quorem+0x42>
 8015666:	f856 300c 	ldr.w	r3, [r6, ip]
 801566a:	b933      	cbnz	r3, 801567a <quorem+0x9e>
 801566c:	9b01      	ldr	r3, [sp, #4]
 801566e:	3b04      	subs	r3, #4
 8015670:	429e      	cmp	r6, r3
 8015672:	461a      	mov	r2, r3
 8015674:	d330      	bcc.n	80156d8 <quorem+0xfc>
 8015676:	f8c8 4010 	str.w	r4, [r8, #16]
 801567a:	4640      	mov	r0, r8
 801567c:	f001 fa22 	bl	8016ac4 <__mcmp>
 8015680:	2800      	cmp	r0, #0
 8015682:	db25      	blt.n	80156d0 <quorem+0xf4>
 8015684:	3501      	adds	r5, #1
 8015686:	4630      	mov	r0, r6
 8015688:	f04f 0c00 	mov.w	ip, #0
 801568c:	f857 2b04 	ldr.w	r2, [r7], #4
 8015690:	f8d0 e000 	ldr.w	lr, [r0]
 8015694:	b293      	uxth	r3, r2
 8015696:	ebac 0303 	sub.w	r3, ip, r3
 801569a:	0c12      	lsrs	r2, r2, #16
 801569c:	fa13 f38e 	uxtah	r3, r3, lr
 80156a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80156a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80156ae:	45b9      	cmp	r9, r7
 80156b0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80156b4:	f840 3b04 	str.w	r3, [r0], #4
 80156b8:	d2e8      	bcs.n	801568c <quorem+0xb0>
 80156ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80156be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80156c2:	b92a      	cbnz	r2, 80156d0 <quorem+0xf4>
 80156c4:	3b04      	subs	r3, #4
 80156c6:	429e      	cmp	r6, r3
 80156c8:	461a      	mov	r2, r3
 80156ca:	d30b      	bcc.n	80156e4 <quorem+0x108>
 80156cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80156d0:	4628      	mov	r0, r5
 80156d2:	b003      	add	sp, #12
 80156d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156d8:	6812      	ldr	r2, [r2, #0]
 80156da:	3b04      	subs	r3, #4
 80156dc:	2a00      	cmp	r2, #0
 80156de:	d1ca      	bne.n	8015676 <quorem+0x9a>
 80156e0:	3c01      	subs	r4, #1
 80156e2:	e7c5      	b.n	8015670 <quorem+0x94>
 80156e4:	6812      	ldr	r2, [r2, #0]
 80156e6:	3b04      	subs	r3, #4
 80156e8:	2a00      	cmp	r2, #0
 80156ea:	d1ef      	bne.n	80156cc <quorem+0xf0>
 80156ec:	3c01      	subs	r4, #1
 80156ee:	e7ea      	b.n	80156c6 <quorem+0xea>
 80156f0:	2000      	movs	r0, #0
 80156f2:	e7ee      	b.n	80156d2 <quorem+0xf6>
 80156f4:	0000      	movs	r0, r0
	...

080156f8 <_dtoa_r>:
 80156f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156fc:	ec57 6b10 	vmov	r6, r7, d0
 8015700:	b097      	sub	sp, #92	; 0x5c
 8015702:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015704:	9106      	str	r1, [sp, #24]
 8015706:	4604      	mov	r4, r0
 8015708:	920b      	str	r2, [sp, #44]	; 0x2c
 801570a:	9312      	str	r3, [sp, #72]	; 0x48
 801570c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015710:	e9cd 6700 	strd	r6, r7, [sp]
 8015714:	b93d      	cbnz	r5, 8015726 <_dtoa_r+0x2e>
 8015716:	2010      	movs	r0, #16
 8015718:	f7fe ff56 	bl	80145c8 <malloc>
 801571c:	6260      	str	r0, [r4, #36]	; 0x24
 801571e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015722:	6005      	str	r5, [r0, #0]
 8015724:	60c5      	str	r5, [r0, #12]
 8015726:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015728:	6819      	ldr	r1, [r3, #0]
 801572a:	b151      	cbz	r1, 8015742 <_dtoa_r+0x4a>
 801572c:	685a      	ldr	r2, [r3, #4]
 801572e:	604a      	str	r2, [r1, #4]
 8015730:	2301      	movs	r3, #1
 8015732:	4093      	lsls	r3, r2
 8015734:	608b      	str	r3, [r1, #8]
 8015736:	4620      	mov	r0, r4
 8015738:	f000 ffe3 	bl	8016702 <_Bfree>
 801573c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801573e:	2200      	movs	r2, #0
 8015740:	601a      	str	r2, [r3, #0]
 8015742:	1e3b      	subs	r3, r7, #0
 8015744:	bfbb      	ittet	lt
 8015746:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801574a:	9301      	strlt	r3, [sp, #4]
 801574c:	2300      	movge	r3, #0
 801574e:	2201      	movlt	r2, #1
 8015750:	bfac      	ite	ge
 8015752:	f8c8 3000 	strge.w	r3, [r8]
 8015756:	f8c8 2000 	strlt.w	r2, [r8]
 801575a:	4baf      	ldr	r3, [pc, #700]	; (8015a18 <_dtoa_r+0x320>)
 801575c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015760:	ea33 0308 	bics.w	r3, r3, r8
 8015764:	d114      	bne.n	8015790 <_dtoa_r+0x98>
 8015766:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015768:	f242 730f 	movw	r3, #9999	; 0x270f
 801576c:	6013      	str	r3, [r2, #0]
 801576e:	9b00      	ldr	r3, [sp, #0]
 8015770:	b923      	cbnz	r3, 801577c <_dtoa_r+0x84>
 8015772:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015776:	2800      	cmp	r0, #0
 8015778:	f000 8542 	beq.w	8016200 <_dtoa_r+0xb08>
 801577c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801577e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015a2c <_dtoa_r+0x334>
 8015782:	2b00      	cmp	r3, #0
 8015784:	f000 8544 	beq.w	8016210 <_dtoa_r+0xb18>
 8015788:	f10b 0303 	add.w	r3, fp, #3
 801578c:	f000 bd3e 	b.w	801620c <_dtoa_r+0xb14>
 8015790:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015794:	2200      	movs	r2, #0
 8015796:	2300      	movs	r3, #0
 8015798:	4630      	mov	r0, r6
 801579a:	4639      	mov	r1, r7
 801579c:	f7eb f9b4 	bl	8000b08 <__aeabi_dcmpeq>
 80157a0:	4681      	mov	r9, r0
 80157a2:	b168      	cbz	r0, 80157c0 <_dtoa_r+0xc8>
 80157a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80157a6:	2301      	movs	r3, #1
 80157a8:	6013      	str	r3, [r2, #0]
 80157aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	f000 8524 	beq.w	80161fa <_dtoa_r+0xb02>
 80157b2:	4b9a      	ldr	r3, [pc, #616]	; (8015a1c <_dtoa_r+0x324>)
 80157b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80157b6:	f103 3bff 	add.w	fp, r3, #4294967295
 80157ba:	6013      	str	r3, [r2, #0]
 80157bc:	f000 bd28 	b.w	8016210 <_dtoa_r+0xb18>
 80157c0:	aa14      	add	r2, sp, #80	; 0x50
 80157c2:	a915      	add	r1, sp, #84	; 0x54
 80157c4:	ec47 6b10 	vmov	d0, r6, r7
 80157c8:	4620      	mov	r0, r4
 80157ca:	f001 f9f2 	bl	8016bb2 <__d2b>
 80157ce:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80157d2:	9004      	str	r0, [sp, #16]
 80157d4:	2d00      	cmp	r5, #0
 80157d6:	d07c      	beq.n	80158d2 <_dtoa_r+0x1da>
 80157d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80157dc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80157e0:	46b2      	mov	sl, r6
 80157e2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80157e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80157ea:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80157ee:	2200      	movs	r2, #0
 80157f0:	4b8b      	ldr	r3, [pc, #556]	; (8015a20 <_dtoa_r+0x328>)
 80157f2:	4650      	mov	r0, sl
 80157f4:	4659      	mov	r1, fp
 80157f6:	f7ea fd67 	bl	80002c8 <__aeabi_dsub>
 80157fa:	a381      	add	r3, pc, #516	; (adr r3, 8015a00 <_dtoa_r+0x308>)
 80157fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015800:	f7ea ff1a 	bl	8000638 <__aeabi_dmul>
 8015804:	a380      	add	r3, pc, #512	; (adr r3, 8015a08 <_dtoa_r+0x310>)
 8015806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801580a:	f7ea fd5f 	bl	80002cc <__adddf3>
 801580e:	4606      	mov	r6, r0
 8015810:	4628      	mov	r0, r5
 8015812:	460f      	mov	r7, r1
 8015814:	f7ea fea6 	bl	8000564 <__aeabi_i2d>
 8015818:	a37d      	add	r3, pc, #500	; (adr r3, 8015a10 <_dtoa_r+0x318>)
 801581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801581e:	f7ea ff0b 	bl	8000638 <__aeabi_dmul>
 8015822:	4602      	mov	r2, r0
 8015824:	460b      	mov	r3, r1
 8015826:	4630      	mov	r0, r6
 8015828:	4639      	mov	r1, r7
 801582a:	f7ea fd4f 	bl	80002cc <__adddf3>
 801582e:	4606      	mov	r6, r0
 8015830:	460f      	mov	r7, r1
 8015832:	f7eb f9b1 	bl	8000b98 <__aeabi_d2iz>
 8015836:	2200      	movs	r2, #0
 8015838:	4682      	mov	sl, r0
 801583a:	2300      	movs	r3, #0
 801583c:	4630      	mov	r0, r6
 801583e:	4639      	mov	r1, r7
 8015840:	f7eb f96c 	bl	8000b1c <__aeabi_dcmplt>
 8015844:	b148      	cbz	r0, 801585a <_dtoa_r+0x162>
 8015846:	4650      	mov	r0, sl
 8015848:	f7ea fe8c 	bl	8000564 <__aeabi_i2d>
 801584c:	4632      	mov	r2, r6
 801584e:	463b      	mov	r3, r7
 8015850:	f7eb f95a 	bl	8000b08 <__aeabi_dcmpeq>
 8015854:	b908      	cbnz	r0, 801585a <_dtoa_r+0x162>
 8015856:	f10a 3aff 	add.w	sl, sl, #4294967295
 801585a:	f1ba 0f16 	cmp.w	sl, #22
 801585e:	d859      	bhi.n	8015914 <_dtoa_r+0x21c>
 8015860:	4970      	ldr	r1, [pc, #448]	; (8015a24 <_dtoa_r+0x32c>)
 8015862:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015866:	e9dd 2300 	ldrd	r2, r3, [sp]
 801586a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801586e:	f7eb f973 	bl	8000b58 <__aeabi_dcmpgt>
 8015872:	2800      	cmp	r0, #0
 8015874:	d050      	beq.n	8015918 <_dtoa_r+0x220>
 8015876:	f10a 3aff 	add.w	sl, sl, #4294967295
 801587a:	2300      	movs	r3, #0
 801587c:	930f      	str	r3, [sp, #60]	; 0x3c
 801587e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015880:	1b5d      	subs	r5, r3, r5
 8015882:	f1b5 0801 	subs.w	r8, r5, #1
 8015886:	bf49      	itett	mi
 8015888:	f1c5 0301 	rsbmi	r3, r5, #1
 801588c:	2300      	movpl	r3, #0
 801588e:	9305      	strmi	r3, [sp, #20]
 8015890:	f04f 0800 	movmi.w	r8, #0
 8015894:	bf58      	it	pl
 8015896:	9305      	strpl	r3, [sp, #20]
 8015898:	f1ba 0f00 	cmp.w	sl, #0
 801589c:	db3e      	blt.n	801591c <_dtoa_r+0x224>
 801589e:	2300      	movs	r3, #0
 80158a0:	44d0      	add	r8, sl
 80158a2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80158a6:	9307      	str	r3, [sp, #28]
 80158a8:	9b06      	ldr	r3, [sp, #24]
 80158aa:	2b09      	cmp	r3, #9
 80158ac:	f200 8090 	bhi.w	80159d0 <_dtoa_r+0x2d8>
 80158b0:	2b05      	cmp	r3, #5
 80158b2:	bfc4      	itt	gt
 80158b4:	3b04      	subgt	r3, #4
 80158b6:	9306      	strgt	r3, [sp, #24]
 80158b8:	9b06      	ldr	r3, [sp, #24]
 80158ba:	f1a3 0302 	sub.w	r3, r3, #2
 80158be:	bfcc      	ite	gt
 80158c0:	2500      	movgt	r5, #0
 80158c2:	2501      	movle	r5, #1
 80158c4:	2b03      	cmp	r3, #3
 80158c6:	f200 808f 	bhi.w	80159e8 <_dtoa_r+0x2f0>
 80158ca:	e8df f003 	tbb	[pc, r3]
 80158ce:	7f7d      	.short	0x7f7d
 80158d0:	7131      	.short	0x7131
 80158d2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80158d6:	441d      	add	r5, r3
 80158d8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80158dc:	2820      	cmp	r0, #32
 80158de:	dd13      	ble.n	8015908 <_dtoa_r+0x210>
 80158e0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80158e4:	9b00      	ldr	r3, [sp, #0]
 80158e6:	fa08 f800 	lsl.w	r8, r8, r0
 80158ea:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80158ee:	fa23 f000 	lsr.w	r0, r3, r0
 80158f2:	ea48 0000 	orr.w	r0, r8, r0
 80158f6:	f7ea fe25 	bl	8000544 <__aeabi_ui2d>
 80158fa:	2301      	movs	r3, #1
 80158fc:	4682      	mov	sl, r0
 80158fe:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015902:	3d01      	subs	r5, #1
 8015904:	9313      	str	r3, [sp, #76]	; 0x4c
 8015906:	e772      	b.n	80157ee <_dtoa_r+0xf6>
 8015908:	9b00      	ldr	r3, [sp, #0]
 801590a:	f1c0 0020 	rsb	r0, r0, #32
 801590e:	fa03 f000 	lsl.w	r0, r3, r0
 8015912:	e7f0      	b.n	80158f6 <_dtoa_r+0x1fe>
 8015914:	2301      	movs	r3, #1
 8015916:	e7b1      	b.n	801587c <_dtoa_r+0x184>
 8015918:	900f      	str	r0, [sp, #60]	; 0x3c
 801591a:	e7b0      	b.n	801587e <_dtoa_r+0x186>
 801591c:	9b05      	ldr	r3, [sp, #20]
 801591e:	eba3 030a 	sub.w	r3, r3, sl
 8015922:	9305      	str	r3, [sp, #20]
 8015924:	f1ca 0300 	rsb	r3, sl, #0
 8015928:	9307      	str	r3, [sp, #28]
 801592a:	2300      	movs	r3, #0
 801592c:	930e      	str	r3, [sp, #56]	; 0x38
 801592e:	e7bb      	b.n	80158a8 <_dtoa_r+0x1b0>
 8015930:	2301      	movs	r3, #1
 8015932:	930a      	str	r3, [sp, #40]	; 0x28
 8015934:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015936:	2b00      	cmp	r3, #0
 8015938:	dd59      	ble.n	80159ee <_dtoa_r+0x2f6>
 801593a:	9302      	str	r3, [sp, #8]
 801593c:	4699      	mov	r9, r3
 801593e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015940:	2200      	movs	r2, #0
 8015942:	6072      	str	r2, [r6, #4]
 8015944:	2204      	movs	r2, #4
 8015946:	f102 0014 	add.w	r0, r2, #20
 801594a:	4298      	cmp	r0, r3
 801594c:	6871      	ldr	r1, [r6, #4]
 801594e:	d953      	bls.n	80159f8 <_dtoa_r+0x300>
 8015950:	4620      	mov	r0, r4
 8015952:	f000 fea2 	bl	801669a <_Balloc>
 8015956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015958:	6030      	str	r0, [r6, #0]
 801595a:	f1b9 0f0e 	cmp.w	r9, #14
 801595e:	f8d3 b000 	ldr.w	fp, [r3]
 8015962:	f200 80e6 	bhi.w	8015b32 <_dtoa_r+0x43a>
 8015966:	2d00      	cmp	r5, #0
 8015968:	f000 80e3 	beq.w	8015b32 <_dtoa_r+0x43a>
 801596c:	ed9d 7b00 	vldr	d7, [sp]
 8015970:	f1ba 0f00 	cmp.w	sl, #0
 8015974:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015978:	dd74      	ble.n	8015a64 <_dtoa_r+0x36c>
 801597a:	4a2a      	ldr	r2, [pc, #168]	; (8015a24 <_dtoa_r+0x32c>)
 801597c:	f00a 030f 	and.w	r3, sl, #15
 8015980:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015984:	ed93 7b00 	vldr	d7, [r3]
 8015988:	ea4f 162a 	mov.w	r6, sl, asr #4
 801598c:	06f0      	lsls	r0, r6, #27
 801598e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015992:	d565      	bpl.n	8015a60 <_dtoa_r+0x368>
 8015994:	4b24      	ldr	r3, [pc, #144]	; (8015a28 <_dtoa_r+0x330>)
 8015996:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801599a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801599e:	f7ea ff75 	bl	800088c <__aeabi_ddiv>
 80159a2:	e9cd 0100 	strd	r0, r1, [sp]
 80159a6:	f006 060f 	and.w	r6, r6, #15
 80159aa:	2503      	movs	r5, #3
 80159ac:	4f1e      	ldr	r7, [pc, #120]	; (8015a28 <_dtoa_r+0x330>)
 80159ae:	e04c      	b.n	8015a4a <_dtoa_r+0x352>
 80159b0:	2301      	movs	r3, #1
 80159b2:	930a      	str	r3, [sp, #40]	; 0x28
 80159b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80159b6:	4453      	add	r3, sl
 80159b8:	f103 0901 	add.w	r9, r3, #1
 80159bc:	9302      	str	r3, [sp, #8]
 80159be:	464b      	mov	r3, r9
 80159c0:	2b01      	cmp	r3, #1
 80159c2:	bfb8      	it	lt
 80159c4:	2301      	movlt	r3, #1
 80159c6:	e7ba      	b.n	801593e <_dtoa_r+0x246>
 80159c8:	2300      	movs	r3, #0
 80159ca:	e7b2      	b.n	8015932 <_dtoa_r+0x23a>
 80159cc:	2300      	movs	r3, #0
 80159ce:	e7f0      	b.n	80159b2 <_dtoa_r+0x2ba>
 80159d0:	2501      	movs	r5, #1
 80159d2:	2300      	movs	r3, #0
 80159d4:	9306      	str	r3, [sp, #24]
 80159d6:	950a      	str	r5, [sp, #40]	; 0x28
 80159d8:	f04f 33ff 	mov.w	r3, #4294967295
 80159dc:	9302      	str	r3, [sp, #8]
 80159de:	4699      	mov	r9, r3
 80159e0:	2200      	movs	r2, #0
 80159e2:	2312      	movs	r3, #18
 80159e4:	920b      	str	r2, [sp, #44]	; 0x2c
 80159e6:	e7aa      	b.n	801593e <_dtoa_r+0x246>
 80159e8:	2301      	movs	r3, #1
 80159ea:	930a      	str	r3, [sp, #40]	; 0x28
 80159ec:	e7f4      	b.n	80159d8 <_dtoa_r+0x2e0>
 80159ee:	2301      	movs	r3, #1
 80159f0:	9302      	str	r3, [sp, #8]
 80159f2:	4699      	mov	r9, r3
 80159f4:	461a      	mov	r2, r3
 80159f6:	e7f5      	b.n	80159e4 <_dtoa_r+0x2ec>
 80159f8:	3101      	adds	r1, #1
 80159fa:	6071      	str	r1, [r6, #4]
 80159fc:	0052      	lsls	r2, r2, #1
 80159fe:	e7a2      	b.n	8015946 <_dtoa_r+0x24e>
 8015a00:	636f4361 	.word	0x636f4361
 8015a04:	3fd287a7 	.word	0x3fd287a7
 8015a08:	8b60c8b3 	.word	0x8b60c8b3
 8015a0c:	3fc68a28 	.word	0x3fc68a28
 8015a10:	509f79fb 	.word	0x509f79fb
 8015a14:	3fd34413 	.word	0x3fd34413
 8015a18:	7ff00000 	.word	0x7ff00000
 8015a1c:	0801a03a 	.word	0x0801a03a
 8015a20:	3ff80000 	.word	0x3ff80000
 8015a24:	0801a0f8 	.word	0x0801a0f8
 8015a28:	0801a0d0 	.word	0x0801a0d0
 8015a2c:	0801a066 	.word	0x0801a066
 8015a30:	07f1      	lsls	r1, r6, #31
 8015a32:	d508      	bpl.n	8015a46 <_dtoa_r+0x34e>
 8015a34:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015a38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a3c:	f7ea fdfc 	bl	8000638 <__aeabi_dmul>
 8015a40:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015a44:	3501      	adds	r5, #1
 8015a46:	1076      	asrs	r6, r6, #1
 8015a48:	3708      	adds	r7, #8
 8015a4a:	2e00      	cmp	r6, #0
 8015a4c:	d1f0      	bne.n	8015a30 <_dtoa_r+0x338>
 8015a4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015a52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015a56:	f7ea ff19 	bl	800088c <__aeabi_ddiv>
 8015a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8015a5e:	e01a      	b.n	8015a96 <_dtoa_r+0x39e>
 8015a60:	2502      	movs	r5, #2
 8015a62:	e7a3      	b.n	80159ac <_dtoa_r+0x2b4>
 8015a64:	f000 80a0 	beq.w	8015ba8 <_dtoa_r+0x4b0>
 8015a68:	f1ca 0600 	rsb	r6, sl, #0
 8015a6c:	4b9f      	ldr	r3, [pc, #636]	; (8015cec <_dtoa_r+0x5f4>)
 8015a6e:	4fa0      	ldr	r7, [pc, #640]	; (8015cf0 <_dtoa_r+0x5f8>)
 8015a70:	f006 020f 	and.w	r2, r6, #15
 8015a74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015a80:	f7ea fdda 	bl	8000638 <__aeabi_dmul>
 8015a84:	e9cd 0100 	strd	r0, r1, [sp]
 8015a88:	1136      	asrs	r6, r6, #4
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	2502      	movs	r5, #2
 8015a8e:	2e00      	cmp	r6, #0
 8015a90:	d17f      	bne.n	8015b92 <_dtoa_r+0x49a>
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d1e1      	bne.n	8015a5a <_dtoa_r+0x362>
 8015a96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	f000 8087 	beq.w	8015bac <_dtoa_r+0x4b4>
 8015a9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	4b93      	ldr	r3, [pc, #588]	; (8015cf4 <_dtoa_r+0x5fc>)
 8015aa6:	4630      	mov	r0, r6
 8015aa8:	4639      	mov	r1, r7
 8015aaa:	f7eb f837 	bl	8000b1c <__aeabi_dcmplt>
 8015aae:	2800      	cmp	r0, #0
 8015ab0:	d07c      	beq.n	8015bac <_dtoa_r+0x4b4>
 8015ab2:	f1b9 0f00 	cmp.w	r9, #0
 8015ab6:	d079      	beq.n	8015bac <_dtoa_r+0x4b4>
 8015ab8:	9b02      	ldr	r3, [sp, #8]
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	dd35      	ble.n	8015b2a <_dtoa_r+0x432>
 8015abe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015ac2:	9308      	str	r3, [sp, #32]
 8015ac4:	4639      	mov	r1, r7
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	4b8b      	ldr	r3, [pc, #556]	; (8015cf8 <_dtoa_r+0x600>)
 8015aca:	4630      	mov	r0, r6
 8015acc:	f7ea fdb4 	bl	8000638 <__aeabi_dmul>
 8015ad0:	e9cd 0100 	strd	r0, r1, [sp]
 8015ad4:	9f02      	ldr	r7, [sp, #8]
 8015ad6:	3501      	adds	r5, #1
 8015ad8:	4628      	mov	r0, r5
 8015ada:	f7ea fd43 	bl	8000564 <__aeabi_i2d>
 8015ade:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015ae2:	f7ea fda9 	bl	8000638 <__aeabi_dmul>
 8015ae6:	2200      	movs	r2, #0
 8015ae8:	4b84      	ldr	r3, [pc, #528]	; (8015cfc <_dtoa_r+0x604>)
 8015aea:	f7ea fbef 	bl	80002cc <__adddf3>
 8015aee:	4605      	mov	r5, r0
 8015af0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015af4:	2f00      	cmp	r7, #0
 8015af6:	d15d      	bne.n	8015bb4 <_dtoa_r+0x4bc>
 8015af8:	2200      	movs	r2, #0
 8015afa:	4b81      	ldr	r3, [pc, #516]	; (8015d00 <_dtoa_r+0x608>)
 8015afc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b00:	f7ea fbe2 	bl	80002c8 <__aeabi_dsub>
 8015b04:	462a      	mov	r2, r5
 8015b06:	4633      	mov	r3, r6
 8015b08:	e9cd 0100 	strd	r0, r1, [sp]
 8015b0c:	f7eb f824 	bl	8000b58 <__aeabi_dcmpgt>
 8015b10:	2800      	cmp	r0, #0
 8015b12:	f040 8288 	bne.w	8016026 <_dtoa_r+0x92e>
 8015b16:	462a      	mov	r2, r5
 8015b18:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015b1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015b20:	f7ea fffc 	bl	8000b1c <__aeabi_dcmplt>
 8015b24:	2800      	cmp	r0, #0
 8015b26:	f040 827c 	bne.w	8016022 <_dtoa_r+0x92a>
 8015b2a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015b2e:	e9cd 2300 	strd	r2, r3, [sp]
 8015b32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	f2c0 8150 	blt.w	8015dda <_dtoa_r+0x6e2>
 8015b3a:	f1ba 0f0e 	cmp.w	sl, #14
 8015b3e:	f300 814c 	bgt.w	8015dda <_dtoa_r+0x6e2>
 8015b42:	4b6a      	ldr	r3, [pc, #424]	; (8015cec <_dtoa_r+0x5f4>)
 8015b44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015b48:	ed93 7b00 	vldr	d7, [r3]
 8015b4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015b54:	f280 80d8 	bge.w	8015d08 <_dtoa_r+0x610>
 8015b58:	f1b9 0f00 	cmp.w	r9, #0
 8015b5c:	f300 80d4 	bgt.w	8015d08 <_dtoa_r+0x610>
 8015b60:	f040 825e 	bne.w	8016020 <_dtoa_r+0x928>
 8015b64:	2200      	movs	r2, #0
 8015b66:	4b66      	ldr	r3, [pc, #408]	; (8015d00 <_dtoa_r+0x608>)
 8015b68:	ec51 0b17 	vmov	r0, r1, d7
 8015b6c:	f7ea fd64 	bl	8000638 <__aeabi_dmul>
 8015b70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015b74:	f7ea ffe6 	bl	8000b44 <__aeabi_dcmpge>
 8015b78:	464f      	mov	r7, r9
 8015b7a:	464e      	mov	r6, r9
 8015b7c:	2800      	cmp	r0, #0
 8015b7e:	f040 8234 	bne.w	8015fea <_dtoa_r+0x8f2>
 8015b82:	2331      	movs	r3, #49	; 0x31
 8015b84:	f10b 0501 	add.w	r5, fp, #1
 8015b88:	f88b 3000 	strb.w	r3, [fp]
 8015b8c:	f10a 0a01 	add.w	sl, sl, #1
 8015b90:	e22f      	b.n	8015ff2 <_dtoa_r+0x8fa>
 8015b92:	07f2      	lsls	r2, r6, #31
 8015b94:	d505      	bpl.n	8015ba2 <_dtoa_r+0x4aa>
 8015b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b9a:	f7ea fd4d 	bl	8000638 <__aeabi_dmul>
 8015b9e:	3501      	adds	r5, #1
 8015ba0:	2301      	movs	r3, #1
 8015ba2:	1076      	asrs	r6, r6, #1
 8015ba4:	3708      	adds	r7, #8
 8015ba6:	e772      	b.n	8015a8e <_dtoa_r+0x396>
 8015ba8:	2502      	movs	r5, #2
 8015baa:	e774      	b.n	8015a96 <_dtoa_r+0x39e>
 8015bac:	f8cd a020 	str.w	sl, [sp, #32]
 8015bb0:	464f      	mov	r7, r9
 8015bb2:	e791      	b.n	8015ad8 <_dtoa_r+0x3e0>
 8015bb4:	4b4d      	ldr	r3, [pc, #308]	; (8015cec <_dtoa_r+0x5f4>)
 8015bb6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015bba:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d047      	beq.n	8015c54 <_dtoa_r+0x55c>
 8015bc4:	4602      	mov	r2, r0
 8015bc6:	460b      	mov	r3, r1
 8015bc8:	2000      	movs	r0, #0
 8015bca:	494e      	ldr	r1, [pc, #312]	; (8015d04 <_dtoa_r+0x60c>)
 8015bcc:	f7ea fe5e 	bl	800088c <__aeabi_ddiv>
 8015bd0:	462a      	mov	r2, r5
 8015bd2:	4633      	mov	r3, r6
 8015bd4:	f7ea fb78 	bl	80002c8 <__aeabi_dsub>
 8015bd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015bdc:	465d      	mov	r5, fp
 8015bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015be2:	f7ea ffd9 	bl	8000b98 <__aeabi_d2iz>
 8015be6:	4606      	mov	r6, r0
 8015be8:	f7ea fcbc 	bl	8000564 <__aeabi_i2d>
 8015bec:	4602      	mov	r2, r0
 8015bee:	460b      	mov	r3, r1
 8015bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015bf4:	f7ea fb68 	bl	80002c8 <__aeabi_dsub>
 8015bf8:	3630      	adds	r6, #48	; 0x30
 8015bfa:	f805 6b01 	strb.w	r6, [r5], #1
 8015bfe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015c02:	e9cd 0100 	strd	r0, r1, [sp]
 8015c06:	f7ea ff89 	bl	8000b1c <__aeabi_dcmplt>
 8015c0a:	2800      	cmp	r0, #0
 8015c0c:	d163      	bne.n	8015cd6 <_dtoa_r+0x5de>
 8015c0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c12:	2000      	movs	r0, #0
 8015c14:	4937      	ldr	r1, [pc, #220]	; (8015cf4 <_dtoa_r+0x5fc>)
 8015c16:	f7ea fb57 	bl	80002c8 <__aeabi_dsub>
 8015c1a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015c1e:	f7ea ff7d 	bl	8000b1c <__aeabi_dcmplt>
 8015c22:	2800      	cmp	r0, #0
 8015c24:	f040 80b7 	bne.w	8015d96 <_dtoa_r+0x69e>
 8015c28:	eba5 030b 	sub.w	r3, r5, fp
 8015c2c:	429f      	cmp	r7, r3
 8015c2e:	f77f af7c 	ble.w	8015b2a <_dtoa_r+0x432>
 8015c32:	2200      	movs	r2, #0
 8015c34:	4b30      	ldr	r3, [pc, #192]	; (8015cf8 <_dtoa_r+0x600>)
 8015c36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c3a:	f7ea fcfd 	bl	8000638 <__aeabi_dmul>
 8015c3e:	2200      	movs	r2, #0
 8015c40:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015c44:	4b2c      	ldr	r3, [pc, #176]	; (8015cf8 <_dtoa_r+0x600>)
 8015c46:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c4a:	f7ea fcf5 	bl	8000638 <__aeabi_dmul>
 8015c4e:	e9cd 0100 	strd	r0, r1, [sp]
 8015c52:	e7c4      	b.n	8015bde <_dtoa_r+0x4e6>
 8015c54:	462a      	mov	r2, r5
 8015c56:	4633      	mov	r3, r6
 8015c58:	f7ea fcee 	bl	8000638 <__aeabi_dmul>
 8015c5c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015c60:	eb0b 0507 	add.w	r5, fp, r7
 8015c64:	465e      	mov	r6, fp
 8015c66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c6a:	f7ea ff95 	bl	8000b98 <__aeabi_d2iz>
 8015c6e:	4607      	mov	r7, r0
 8015c70:	f7ea fc78 	bl	8000564 <__aeabi_i2d>
 8015c74:	3730      	adds	r7, #48	; 0x30
 8015c76:	4602      	mov	r2, r0
 8015c78:	460b      	mov	r3, r1
 8015c7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015c7e:	f7ea fb23 	bl	80002c8 <__aeabi_dsub>
 8015c82:	f806 7b01 	strb.w	r7, [r6], #1
 8015c86:	42ae      	cmp	r6, r5
 8015c88:	e9cd 0100 	strd	r0, r1, [sp]
 8015c8c:	f04f 0200 	mov.w	r2, #0
 8015c90:	d126      	bne.n	8015ce0 <_dtoa_r+0x5e8>
 8015c92:	4b1c      	ldr	r3, [pc, #112]	; (8015d04 <_dtoa_r+0x60c>)
 8015c94:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015c98:	f7ea fb18 	bl	80002cc <__adddf3>
 8015c9c:	4602      	mov	r2, r0
 8015c9e:	460b      	mov	r3, r1
 8015ca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ca4:	f7ea ff58 	bl	8000b58 <__aeabi_dcmpgt>
 8015ca8:	2800      	cmp	r0, #0
 8015caa:	d174      	bne.n	8015d96 <_dtoa_r+0x69e>
 8015cac:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015cb0:	2000      	movs	r0, #0
 8015cb2:	4914      	ldr	r1, [pc, #80]	; (8015d04 <_dtoa_r+0x60c>)
 8015cb4:	f7ea fb08 	bl	80002c8 <__aeabi_dsub>
 8015cb8:	4602      	mov	r2, r0
 8015cba:	460b      	mov	r3, r1
 8015cbc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015cc0:	f7ea ff2c 	bl	8000b1c <__aeabi_dcmplt>
 8015cc4:	2800      	cmp	r0, #0
 8015cc6:	f43f af30 	beq.w	8015b2a <_dtoa_r+0x432>
 8015cca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015cce:	2b30      	cmp	r3, #48	; 0x30
 8015cd0:	f105 32ff 	add.w	r2, r5, #4294967295
 8015cd4:	d002      	beq.n	8015cdc <_dtoa_r+0x5e4>
 8015cd6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015cda:	e04a      	b.n	8015d72 <_dtoa_r+0x67a>
 8015cdc:	4615      	mov	r5, r2
 8015cde:	e7f4      	b.n	8015cca <_dtoa_r+0x5d2>
 8015ce0:	4b05      	ldr	r3, [pc, #20]	; (8015cf8 <_dtoa_r+0x600>)
 8015ce2:	f7ea fca9 	bl	8000638 <__aeabi_dmul>
 8015ce6:	e9cd 0100 	strd	r0, r1, [sp]
 8015cea:	e7bc      	b.n	8015c66 <_dtoa_r+0x56e>
 8015cec:	0801a0f8 	.word	0x0801a0f8
 8015cf0:	0801a0d0 	.word	0x0801a0d0
 8015cf4:	3ff00000 	.word	0x3ff00000
 8015cf8:	40240000 	.word	0x40240000
 8015cfc:	401c0000 	.word	0x401c0000
 8015d00:	40140000 	.word	0x40140000
 8015d04:	3fe00000 	.word	0x3fe00000
 8015d08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015d0c:	465d      	mov	r5, fp
 8015d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d12:	4630      	mov	r0, r6
 8015d14:	4639      	mov	r1, r7
 8015d16:	f7ea fdb9 	bl	800088c <__aeabi_ddiv>
 8015d1a:	f7ea ff3d 	bl	8000b98 <__aeabi_d2iz>
 8015d1e:	4680      	mov	r8, r0
 8015d20:	f7ea fc20 	bl	8000564 <__aeabi_i2d>
 8015d24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d28:	f7ea fc86 	bl	8000638 <__aeabi_dmul>
 8015d2c:	4602      	mov	r2, r0
 8015d2e:	460b      	mov	r3, r1
 8015d30:	4630      	mov	r0, r6
 8015d32:	4639      	mov	r1, r7
 8015d34:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015d38:	f7ea fac6 	bl	80002c8 <__aeabi_dsub>
 8015d3c:	f805 6b01 	strb.w	r6, [r5], #1
 8015d40:	eba5 060b 	sub.w	r6, r5, fp
 8015d44:	45b1      	cmp	r9, r6
 8015d46:	4602      	mov	r2, r0
 8015d48:	460b      	mov	r3, r1
 8015d4a:	d139      	bne.n	8015dc0 <_dtoa_r+0x6c8>
 8015d4c:	f7ea fabe 	bl	80002cc <__adddf3>
 8015d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d54:	4606      	mov	r6, r0
 8015d56:	460f      	mov	r7, r1
 8015d58:	f7ea fefe 	bl	8000b58 <__aeabi_dcmpgt>
 8015d5c:	b9c8      	cbnz	r0, 8015d92 <_dtoa_r+0x69a>
 8015d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015d62:	4630      	mov	r0, r6
 8015d64:	4639      	mov	r1, r7
 8015d66:	f7ea fecf 	bl	8000b08 <__aeabi_dcmpeq>
 8015d6a:	b110      	cbz	r0, 8015d72 <_dtoa_r+0x67a>
 8015d6c:	f018 0f01 	tst.w	r8, #1
 8015d70:	d10f      	bne.n	8015d92 <_dtoa_r+0x69a>
 8015d72:	9904      	ldr	r1, [sp, #16]
 8015d74:	4620      	mov	r0, r4
 8015d76:	f000 fcc4 	bl	8016702 <_Bfree>
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015d7e:	702b      	strb	r3, [r5, #0]
 8015d80:	f10a 0301 	add.w	r3, sl, #1
 8015d84:	6013      	str	r3, [r2, #0]
 8015d86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	f000 8241 	beq.w	8016210 <_dtoa_r+0xb18>
 8015d8e:	601d      	str	r5, [r3, #0]
 8015d90:	e23e      	b.n	8016210 <_dtoa_r+0xb18>
 8015d92:	f8cd a020 	str.w	sl, [sp, #32]
 8015d96:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8015d9a:	2a39      	cmp	r2, #57	; 0x39
 8015d9c:	f105 33ff 	add.w	r3, r5, #4294967295
 8015da0:	d108      	bne.n	8015db4 <_dtoa_r+0x6bc>
 8015da2:	459b      	cmp	fp, r3
 8015da4:	d10a      	bne.n	8015dbc <_dtoa_r+0x6c4>
 8015da6:	9b08      	ldr	r3, [sp, #32]
 8015da8:	3301      	adds	r3, #1
 8015daa:	9308      	str	r3, [sp, #32]
 8015dac:	2330      	movs	r3, #48	; 0x30
 8015dae:	f88b 3000 	strb.w	r3, [fp]
 8015db2:	465b      	mov	r3, fp
 8015db4:	781a      	ldrb	r2, [r3, #0]
 8015db6:	3201      	adds	r2, #1
 8015db8:	701a      	strb	r2, [r3, #0]
 8015dba:	e78c      	b.n	8015cd6 <_dtoa_r+0x5de>
 8015dbc:	461d      	mov	r5, r3
 8015dbe:	e7ea      	b.n	8015d96 <_dtoa_r+0x69e>
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	4b9b      	ldr	r3, [pc, #620]	; (8016030 <_dtoa_r+0x938>)
 8015dc4:	f7ea fc38 	bl	8000638 <__aeabi_dmul>
 8015dc8:	2200      	movs	r2, #0
 8015dca:	2300      	movs	r3, #0
 8015dcc:	4606      	mov	r6, r0
 8015dce:	460f      	mov	r7, r1
 8015dd0:	f7ea fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8015dd4:	2800      	cmp	r0, #0
 8015dd6:	d09a      	beq.n	8015d0e <_dtoa_r+0x616>
 8015dd8:	e7cb      	b.n	8015d72 <_dtoa_r+0x67a>
 8015dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015ddc:	2a00      	cmp	r2, #0
 8015dde:	f000 808b 	beq.w	8015ef8 <_dtoa_r+0x800>
 8015de2:	9a06      	ldr	r2, [sp, #24]
 8015de4:	2a01      	cmp	r2, #1
 8015de6:	dc6e      	bgt.n	8015ec6 <_dtoa_r+0x7ce>
 8015de8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8015dea:	2a00      	cmp	r2, #0
 8015dec:	d067      	beq.n	8015ebe <_dtoa_r+0x7c6>
 8015dee:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015df2:	9f07      	ldr	r7, [sp, #28]
 8015df4:	9d05      	ldr	r5, [sp, #20]
 8015df6:	9a05      	ldr	r2, [sp, #20]
 8015df8:	2101      	movs	r1, #1
 8015dfa:	441a      	add	r2, r3
 8015dfc:	4620      	mov	r0, r4
 8015dfe:	9205      	str	r2, [sp, #20]
 8015e00:	4498      	add	r8, r3
 8015e02:	f000 fd1e 	bl	8016842 <__i2b>
 8015e06:	4606      	mov	r6, r0
 8015e08:	2d00      	cmp	r5, #0
 8015e0a:	dd0c      	ble.n	8015e26 <_dtoa_r+0x72e>
 8015e0c:	f1b8 0f00 	cmp.w	r8, #0
 8015e10:	dd09      	ble.n	8015e26 <_dtoa_r+0x72e>
 8015e12:	4545      	cmp	r5, r8
 8015e14:	9a05      	ldr	r2, [sp, #20]
 8015e16:	462b      	mov	r3, r5
 8015e18:	bfa8      	it	ge
 8015e1a:	4643      	movge	r3, r8
 8015e1c:	1ad2      	subs	r2, r2, r3
 8015e1e:	9205      	str	r2, [sp, #20]
 8015e20:	1aed      	subs	r5, r5, r3
 8015e22:	eba8 0803 	sub.w	r8, r8, r3
 8015e26:	9b07      	ldr	r3, [sp, #28]
 8015e28:	b1eb      	cbz	r3, 8015e66 <_dtoa_r+0x76e>
 8015e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d067      	beq.n	8015f00 <_dtoa_r+0x808>
 8015e30:	b18f      	cbz	r7, 8015e56 <_dtoa_r+0x75e>
 8015e32:	4631      	mov	r1, r6
 8015e34:	463a      	mov	r2, r7
 8015e36:	4620      	mov	r0, r4
 8015e38:	f000 fda2 	bl	8016980 <__pow5mult>
 8015e3c:	9a04      	ldr	r2, [sp, #16]
 8015e3e:	4601      	mov	r1, r0
 8015e40:	4606      	mov	r6, r0
 8015e42:	4620      	mov	r0, r4
 8015e44:	f000 fd06 	bl	8016854 <__multiply>
 8015e48:	9904      	ldr	r1, [sp, #16]
 8015e4a:	9008      	str	r0, [sp, #32]
 8015e4c:	4620      	mov	r0, r4
 8015e4e:	f000 fc58 	bl	8016702 <_Bfree>
 8015e52:	9b08      	ldr	r3, [sp, #32]
 8015e54:	9304      	str	r3, [sp, #16]
 8015e56:	9b07      	ldr	r3, [sp, #28]
 8015e58:	1bda      	subs	r2, r3, r7
 8015e5a:	d004      	beq.n	8015e66 <_dtoa_r+0x76e>
 8015e5c:	9904      	ldr	r1, [sp, #16]
 8015e5e:	4620      	mov	r0, r4
 8015e60:	f000 fd8e 	bl	8016980 <__pow5mult>
 8015e64:	9004      	str	r0, [sp, #16]
 8015e66:	2101      	movs	r1, #1
 8015e68:	4620      	mov	r0, r4
 8015e6a:	f000 fcea 	bl	8016842 <__i2b>
 8015e6e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015e70:	4607      	mov	r7, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	f000 81d0 	beq.w	8016218 <_dtoa_r+0xb20>
 8015e78:	461a      	mov	r2, r3
 8015e7a:	4601      	mov	r1, r0
 8015e7c:	4620      	mov	r0, r4
 8015e7e:	f000 fd7f 	bl	8016980 <__pow5mult>
 8015e82:	9b06      	ldr	r3, [sp, #24]
 8015e84:	2b01      	cmp	r3, #1
 8015e86:	4607      	mov	r7, r0
 8015e88:	dc40      	bgt.n	8015f0c <_dtoa_r+0x814>
 8015e8a:	9b00      	ldr	r3, [sp, #0]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d139      	bne.n	8015f04 <_dtoa_r+0x80c>
 8015e90:	9b01      	ldr	r3, [sp, #4]
 8015e92:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d136      	bne.n	8015f08 <_dtoa_r+0x810>
 8015e9a:	9b01      	ldr	r3, [sp, #4]
 8015e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8015ea0:	0d1b      	lsrs	r3, r3, #20
 8015ea2:	051b      	lsls	r3, r3, #20
 8015ea4:	b12b      	cbz	r3, 8015eb2 <_dtoa_r+0x7ba>
 8015ea6:	9b05      	ldr	r3, [sp, #20]
 8015ea8:	3301      	adds	r3, #1
 8015eaa:	9305      	str	r3, [sp, #20]
 8015eac:	f108 0801 	add.w	r8, r8, #1
 8015eb0:	2301      	movs	r3, #1
 8015eb2:	9307      	str	r3, [sp, #28]
 8015eb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d12a      	bne.n	8015f10 <_dtoa_r+0x818>
 8015eba:	2001      	movs	r0, #1
 8015ebc:	e030      	b.n	8015f20 <_dtoa_r+0x828>
 8015ebe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015ec0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015ec4:	e795      	b.n	8015df2 <_dtoa_r+0x6fa>
 8015ec6:	9b07      	ldr	r3, [sp, #28]
 8015ec8:	f109 37ff 	add.w	r7, r9, #4294967295
 8015ecc:	42bb      	cmp	r3, r7
 8015ece:	bfbf      	itttt	lt
 8015ed0:	9b07      	ldrlt	r3, [sp, #28]
 8015ed2:	9707      	strlt	r7, [sp, #28]
 8015ed4:	1afa      	sublt	r2, r7, r3
 8015ed6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8015ed8:	bfbb      	ittet	lt
 8015eda:	189b      	addlt	r3, r3, r2
 8015edc:	930e      	strlt	r3, [sp, #56]	; 0x38
 8015ede:	1bdf      	subge	r7, r3, r7
 8015ee0:	2700      	movlt	r7, #0
 8015ee2:	f1b9 0f00 	cmp.w	r9, #0
 8015ee6:	bfb5      	itete	lt
 8015ee8:	9b05      	ldrlt	r3, [sp, #20]
 8015eea:	9d05      	ldrge	r5, [sp, #20]
 8015eec:	eba3 0509 	sublt.w	r5, r3, r9
 8015ef0:	464b      	movge	r3, r9
 8015ef2:	bfb8      	it	lt
 8015ef4:	2300      	movlt	r3, #0
 8015ef6:	e77e      	b.n	8015df6 <_dtoa_r+0x6fe>
 8015ef8:	9f07      	ldr	r7, [sp, #28]
 8015efa:	9d05      	ldr	r5, [sp, #20]
 8015efc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8015efe:	e783      	b.n	8015e08 <_dtoa_r+0x710>
 8015f00:	9a07      	ldr	r2, [sp, #28]
 8015f02:	e7ab      	b.n	8015e5c <_dtoa_r+0x764>
 8015f04:	2300      	movs	r3, #0
 8015f06:	e7d4      	b.n	8015eb2 <_dtoa_r+0x7ba>
 8015f08:	9b00      	ldr	r3, [sp, #0]
 8015f0a:	e7d2      	b.n	8015eb2 <_dtoa_r+0x7ba>
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	9307      	str	r3, [sp, #28]
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015f16:	6918      	ldr	r0, [r3, #16]
 8015f18:	f000 fc45 	bl	80167a6 <__hi0bits>
 8015f1c:	f1c0 0020 	rsb	r0, r0, #32
 8015f20:	4440      	add	r0, r8
 8015f22:	f010 001f 	ands.w	r0, r0, #31
 8015f26:	d047      	beq.n	8015fb8 <_dtoa_r+0x8c0>
 8015f28:	f1c0 0320 	rsb	r3, r0, #32
 8015f2c:	2b04      	cmp	r3, #4
 8015f2e:	dd3b      	ble.n	8015fa8 <_dtoa_r+0x8b0>
 8015f30:	9b05      	ldr	r3, [sp, #20]
 8015f32:	f1c0 001c 	rsb	r0, r0, #28
 8015f36:	4403      	add	r3, r0
 8015f38:	9305      	str	r3, [sp, #20]
 8015f3a:	4405      	add	r5, r0
 8015f3c:	4480      	add	r8, r0
 8015f3e:	9b05      	ldr	r3, [sp, #20]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	dd05      	ble.n	8015f50 <_dtoa_r+0x858>
 8015f44:	461a      	mov	r2, r3
 8015f46:	9904      	ldr	r1, [sp, #16]
 8015f48:	4620      	mov	r0, r4
 8015f4a:	f000 fd67 	bl	8016a1c <__lshift>
 8015f4e:	9004      	str	r0, [sp, #16]
 8015f50:	f1b8 0f00 	cmp.w	r8, #0
 8015f54:	dd05      	ble.n	8015f62 <_dtoa_r+0x86a>
 8015f56:	4639      	mov	r1, r7
 8015f58:	4642      	mov	r2, r8
 8015f5a:	4620      	mov	r0, r4
 8015f5c:	f000 fd5e 	bl	8016a1c <__lshift>
 8015f60:	4607      	mov	r7, r0
 8015f62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015f64:	b353      	cbz	r3, 8015fbc <_dtoa_r+0x8c4>
 8015f66:	4639      	mov	r1, r7
 8015f68:	9804      	ldr	r0, [sp, #16]
 8015f6a:	f000 fdab 	bl	8016ac4 <__mcmp>
 8015f6e:	2800      	cmp	r0, #0
 8015f70:	da24      	bge.n	8015fbc <_dtoa_r+0x8c4>
 8015f72:	2300      	movs	r3, #0
 8015f74:	220a      	movs	r2, #10
 8015f76:	9904      	ldr	r1, [sp, #16]
 8015f78:	4620      	mov	r0, r4
 8015f7a:	f000 fbd9 	bl	8016730 <__multadd>
 8015f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f80:	9004      	str	r0, [sp, #16]
 8015f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	f000 814d 	beq.w	8016226 <_dtoa_r+0xb2e>
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	4631      	mov	r1, r6
 8015f90:	220a      	movs	r2, #10
 8015f92:	4620      	mov	r0, r4
 8015f94:	f000 fbcc 	bl	8016730 <__multadd>
 8015f98:	9b02      	ldr	r3, [sp, #8]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	4606      	mov	r6, r0
 8015f9e:	dc4f      	bgt.n	8016040 <_dtoa_r+0x948>
 8015fa0:	9b06      	ldr	r3, [sp, #24]
 8015fa2:	2b02      	cmp	r3, #2
 8015fa4:	dd4c      	ble.n	8016040 <_dtoa_r+0x948>
 8015fa6:	e011      	b.n	8015fcc <_dtoa_r+0x8d4>
 8015fa8:	d0c9      	beq.n	8015f3e <_dtoa_r+0x846>
 8015faa:	9a05      	ldr	r2, [sp, #20]
 8015fac:	331c      	adds	r3, #28
 8015fae:	441a      	add	r2, r3
 8015fb0:	9205      	str	r2, [sp, #20]
 8015fb2:	441d      	add	r5, r3
 8015fb4:	4498      	add	r8, r3
 8015fb6:	e7c2      	b.n	8015f3e <_dtoa_r+0x846>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	e7f6      	b.n	8015faa <_dtoa_r+0x8b2>
 8015fbc:	f1b9 0f00 	cmp.w	r9, #0
 8015fc0:	dc38      	bgt.n	8016034 <_dtoa_r+0x93c>
 8015fc2:	9b06      	ldr	r3, [sp, #24]
 8015fc4:	2b02      	cmp	r3, #2
 8015fc6:	dd35      	ble.n	8016034 <_dtoa_r+0x93c>
 8015fc8:	f8cd 9008 	str.w	r9, [sp, #8]
 8015fcc:	9b02      	ldr	r3, [sp, #8]
 8015fce:	b963      	cbnz	r3, 8015fea <_dtoa_r+0x8f2>
 8015fd0:	4639      	mov	r1, r7
 8015fd2:	2205      	movs	r2, #5
 8015fd4:	4620      	mov	r0, r4
 8015fd6:	f000 fbab 	bl	8016730 <__multadd>
 8015fda:	4601      	mov	r1, r0
 8015fdc:	4607      	mov	r7, r0
 8015fde:	9804      	ldr	r0, [sp, #16]
 8015fe0:	f000 fd70 	bl	8016ac4 <__mcmp>
 8015fe4:	2800      	cmp	r0, #0
 8015fe6:	f73f adcc 	bgt.w	8015b82 <_dtoa_r+0x48a>
 8015fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015fec:	465d      	mov	r5, fp
 8015fee:	ea6f 0a03 	mvn.w	sl, r3
 8015ff2:	f04f 0900 	mov.w	r9, #0
 8015ff6:	4639      	mov	r1, r7
 8015ff8:	4620      	mov	r0, r4
 8015ffa:	f000 fb82 	bl	8016702 <_Bfree>
 8015ffe:	2e00      	cmp	r6, #0
 8016000:	f43f aeb7 	beq.w	8015d72 <_dtoa_r+0x67a>
 8016004:	f1b9 0f00 	cmp.w	r9, #0
 8016008:	d005      	beq.n	8016016 <_dtoa_r+0x91e>
 801600a:	45b1      	cmp	r9, r6
 801600c:	d003      	beq.n	8016016 <_dtoa_r+0x91e>
 801600e:	4649      	mov	r1, r9
 8016010:	4620      	mov	r0, r4
 8016012:	f000 fb76 	bl	8016702 <_Bfree>
 8016016:	4631      	mov	r1, r6
 8016018:	4620      	mov	r0, r4
 801601a:	f000 fb72 	bl	8016702 <_Bfree>
 801601e:	e6a8      	b.n	8015d72 <_dtoa_r+0x67a>
 8016020:	2700      	movs	r7, #0
 8016022:	463e      	mov	r6, r7
 8016024:	e7e1      	b.n	8015fea <_dtoa_r+0x8f2>
 8016026:	f8dd a020 	ldr.w	sl, [sp, #32]
 801602a:	463e      	mov	r6, r7
 801602c:	e5a9      	b.n	8015b82 <_dtoa_r+0x48a>
 801602e:	bf00      	nop
 8016030:	40240000 	.word	0x40240000
 8016034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016036:	f8cd 9008 	str.w	r9, [sp, #8]
 801603a:	2b00      	cmp	r3, #0
 801603c:	f000 80fa 	beq.w	8016234 <_dtoa_r+0xb3c>
 8016040:	2d00      	cmp	r5, #0
 8016042:	dd05      	ble.n	8016050 <_dtoa_r+0x958>
 8016044:	4631      	mov	r1, r6
 8016046:	462a      	mov	r2, r5
 8016048:	4620      	mov	r0, r4
 801604a:	f000 fce7 	bl	8016a1c <__lshift>
 801604e:	4606      	mov	r6, r0
 8016050:	9b07      	ldr	r3, [sp, #28]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d04c      	beq.n	80160f0 <_dtoa_r+0x9f8>
 8016056:	6871      	ldr	r1, [r6, #4]
 8016058:	4620      	mov	r0, r4
 801605a:	f000 fb1e 	bl	801669a <_Balloc>
 801605e:	6932      	ldr	r2, [r6, #16]
 8016060:	3202      	adds	r2, #2
 8016062:	4605      	mov	r5, r0
 8016064:	0092      	lsls	r2, r2, #2
 8016066:	f106 010c 	add.w	r1, r6, #12
 801606a:	300c      	adds	r0, #12
 801606c:	f7fe fabc 	bl	80145e8 <memcpy>
 8016070:	2201      	movs	r2, #1
 8016072:	4629      	mov	r1, r5
 8016074:	4620      	mov	r0, r4
 8016076:	f000 fcd1 	bl	8016a1c <__lshift>
 801607a:	9b00      	ldr	r3, [sp, #0]
 801607c:	f8cd b014 	str.w	fp, [sp, #20]
 8016080:	f003 0301 	and.w	r3, r3, #1
 8016084:	46b1      	mov	r9, r6
 8016086:	9307      	str	r3, [sp, #28]
 8016088:	4606      	mov	r6, r0
 801608a:	4639      	mov	r1, r7
 801608c:	9804      	ldr	r0, [sp, #16]
 801608e:	f7ff faa5 	bl	80155dc <quorem>
 8016092:	4649      	mov	r1, r9
 8016094:	4605      	mov	r5, r0
 8016096:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801609a:	9804      	ldr	r0, [sp, #16]
 801609c:	f000 fd12 	bl	8016ac4 <__mcmp>
 80160a0:	4632      	mov	r2, r6
 80160a2:	9000      	str	r0, [sp, #0]
 80160a4:	4639      	mov	r1, r7
 80160a6:	4620      	mov	r0, r4
 80160a8:	f000 fd26 	bl	8016af8 <__mdiff>
 80160ac:	68c3      	ldr	r3, [r0, #12]
 80160ae:	4602      	mov	r2, r0
 80160b0:	bb03      	cbnz	r3, 80160f4 <_dtoa_r+0x9fc>
 80160b2:	4601      	mov	r1, r0
 80160b4:	9008      	str	r0, [sp, #32]
 80160b6:	9804      	ldr	r0, [sp, #16]
 80160b8:	f000 fd04 	bl	8016ac4 <__mcmp>
 80160bc:	9a08      	ldr	r2, [sp, #32]
 80160be:	4603      	mov	r3, r0
 80160c0:	4611      	mov	r1, r2
 80160c2:	4620      	mov	r0, r4
 80160c4:	9308      	str	r3, [sp, #32]
 80160c6:	f000 fb1c 	bl	8016702 <_Bfree>
 80160ca:	9b08      	ldr	r3, [sp, #32]
 80160cc:	b9a3      	cbnz	r3, 80160f8 <_dtoa_r+0xa00>
 80160ce:	9a06      	ldr	r2, [sp, #24]
 80160d0:	b992      	cbnz	r2, 80160f8 <_dtoa_r+0xa00>
 80160d2:	9a07      	ldr	r2, [sp, #28]
 80160d4:	b982      	cbnz	r2, 80160f8 <_dtoa_r+0xa00>
 80160d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80160da:	d029      	beq.n	8016130 <_dtoa_r+0xa38>
 80160dc:	9b00      	ldr	r3, [sp, #0]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	dd01      	ble.n	80160e6 <_dtoa_r+0x9ee>
 80160e2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80160e6:	9b05      	ldr	r3, [sp, #20]
 80160e8:	1c5d      	adds	r5, r3, #1
 80160ea:	f883 8000 	strb.w	r8, [r3]
 80160ee:	e782      	b.n	8015ff6 <_dtoa_r+0x8fe>
 80160f0:	4630      	mov	r0, r6
 80160f2:	e7c2      	b.n	801607a <_dtoa_r+0x982>
 80160f4:	2301      	movs	r3, #1
 80160f6:	e7e3      	b.n	80160c0 <_dtoa_r+0x9c8>
 80160f8:	9a00      	ldr	r2, [sp, #0]
 80160fa:	2a00      	cmp	r2, #0
 80160fc:	db04      	blt.n	8016108 <_dtoa_r+0xa10>
 80160fe:	d125      	bne.n	801614c <_dtoa_r+0xa54>
 8016100:	9a06      	ldr	r2, [sp, #24]
 8016102:	bb1a      	cbnz	r2, 801614c <_dtoa_r+0xa54>
 8016104:	9a07      	ldr	r2, [sp, #28]
 8016106:	bb0a      	cbnz	r2, 801614c <_dtoa_r+0xa54>
 8016108:	2b00      	cmp	r3, #0
 801610a:	ddec      	ble.n	80160e6 <_dtoa_r+0x9ee>
 801610c:	2201      	movs	r2, #1
 801610e:	9904      	ldr	r1, [sp, #16]
 8016110:	4620      	mov	r0, r4
 8016112:	f000 fc83 	bl	8016a1c <__lshift>
 8016116:	4639      	mov	r1, r7
 8016118:	9004      	str	r0, [sp, #16]
 801611a:	f000 fcd3 	bl	8016ac4 <__mcmp>
 801611e:	2800      	cmp	r0, #0
 8016120:	dc03      	bgt.n	801612a <_dtoa_r+0xa32>
 8016122:	d1e0      	bne.n	80160e6 <_dtoa_r+0x9ee>
 8016124:	f018 0f01 	tst.w	r8, #1
 8016128:	d0dd      	beq.n	80160e6 <_dtoa_r+0x9ee>
 801612a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801612e:	d1d8      	bne.n	80160e2 <_dtoa_r+0x9ea>
 8016130:	9b05      	ldr	r3, [sp, #20]
 8016132:	9a05      	ldr	r2, [sp, #20]
 8016134:	1c5d      	adds	r5, r3, #1
 8016136:	2339      	movs	r3, #57	; 0x39
 8016138:	7013      	strb	r3, [r2, #0]
 801613a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801613e:	2b39      	cmp	r3, #57	; 0x39
 8016140:	f105 32ff 	add.w	r2, r5, #4294967295
 8016144:	d04f      	beq.n	80161e6 <_dtoa_r+0xaee>
 8016146:	3301      	adds	r3, #1
 8016148:	7013      	strb	r3, [r2, #0]
 801614a:	e754      	b.n	8015ff6 <_dtoa_r+0x8fe>
 801614c:	9a05      	ldr	r2, [sp, #20]
 801614e:	2b00      	cmp	r3, #0
 8016150:	f102 0501 	add.w	r5, r2, #1
 8016154:	dd06      	ble.n	8016164 <_dtoa_r+0xa6c>
 8016156:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801615a:	d0e9      	beq.n	8016130 <_dtoa_r+0xa38>
 801615c:	f108 0801 	add.w	r8, r8, #1
 8016160:	9b05      	ldr	r3, [sp, #20]
 8016162:	e7c2      	b.n	80160ea <_dtoa_r+0x9f2>
 8016164:	9a02      	ldr	r2, [sp, #8]
 8016166:	f805 8c01 	strb.w	r8, [r5, #-1]
 801616a:	eba5 030b 	sub.w	r3, r5, fp
 801616e:	4293      	cmp	r3, r2
 8016170:	d021      	beq.n	80161b6 <_dtoa_r+0xabe>
 8016172:	2300      	movs	r3, #0
 8016174:	220a      	movs	r2, #10
 8016176:	9904      	ldr	r1, [sp, #16]
 8016178:	4620      	mov	r0, r4
 801617a:	f000 fad9 	bl	8016730 <__multadd>
 801617e:	45b1      	cmp	r9, r6
 8016180:	9004      	str	r0, [sp, #16]
 8016182:	f04f 0300 	mov.w	r3, #0
 8016186:	f04f 020a 	mov.w	r2, #10
 801618a:	4649      	mov	r1, r9
 801618c:	4620      	mov	r0, r4
 801618e:	d105      	bne.n	801619c <_dtoa_r+0xaa4>
 8016190:	f000 face 	bl	8016730 <__multadd>
 8016194:	4681      	mov	r9, r0
 8016196:	4606      	mov	r6, r0
 8016198:	9505      	str	r5, [sp, #20]
 801619a:	e776      	b.n	801608a <_dtoa_r+0x992>
 801619c:	f000 fac8 	bl	8016730 <__multadd>
 80161a0:	4631      	mov	r1, r6
 80161a2:	4681      	mov	r9, r0
 80161a4:	2300      	movs	r3, #0
 80161a6:	220a      	movs	r2, #10
 80161a8:	4620      	mov	r0, r4
 80161aa:	f000 fac1 	bl	8016730 <__multadd>
 80161ae:	4606      	mov	r6, r0
 80161b0:	e7f2      	b.n	8016198 <_dtoa_r+0xaa0>
 80161b2:	f04f 0900 	mov.w	r9, #0
 80161b6:	2201      	movs	r2, #1
 80161b8:	9904      	ldr	r1, [sp, #16]
 80161ba:	4620      	mov	r0, r4
 80161bc:	f000 fc2e 	bl	8016a1c <__lshift>
 80161c0:	4639      	mov	r1, r7
 80161c2:	9004      	str	r0, [sp, #16]
 80161c4:	f000 fc7e 	bl	8016ac4 <__mcmp>
 80161c8:	2800      	cmp	r0, #0
 80161ca:	dcb6      	bgt.n	801613a <_dtoa_r+0xa42>
 80161cc:	d102      	bne.n	80161d4 <_dtoa_r+0xadc>
 80161ce:	f018 0f01 	tst.w	r8, #1
 80161d2:	d1b2      	bne.n	801613a <_dtoa_r+0xa42>
 80161d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80161d8:	2b30      	cmp	r3, #48	; 0x30
 80161da:	f105 32ff 	add.w	r2, r5, #4294967295
 80161de:	f47f af0a 	bne.w	8015ff6 <_dtoa_r+0x8fe>
 80161e2:	4615      	mov	r5, r2
 80161e4:	e7f6      	b.n	80161d4 <_dtoa_r+0xadc>
 80161e6:	4593      	cmp	fp, r2
 80161e8:	d105      	bne.n	80161f6 <_dtoa_r+0xafe>
 80161ea:	2331      	movs	r3, #49	; 0x31
 80161ec:	f10a 0a01 	add.w	sl, sl, #1
 80161f0:	f88b 3000 	strb.w	r3, [fp]
 80161f4:	e6ff      	b.n	8015ff6 <_dtoa_r+0x8fe>
 80161f6:	4615      	mov	r5, r2
 80161f8:	e79f      	b.n	801613a <_dtoa_r+0xa42>
 80161fa:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016260 <_dtoa_r+0xb68>
 80161fe:	e007      	b.n	8016210 <_dtoa_r+0xb18>
 8016200:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016202:	f8df b060 	ldr.w	fp, [pc, #96]	; 8016264 <_dtoa_r+0xb6c>
 8016206:	b11b      	cbz	r3, 8016210 <_dtoa_r+0xb18>
 8016208:	f10b 0308 	add.w	r3, fp, #8
 801620c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801620e:	6013      	str	r3, [r2, #0]
 8016210:	4658      	mov	r0, fp
 8016212:	b017      	add	sp, #92	; 0x5c
 8016214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016218:	9b06      	ldr	r3, [sp, #24]
 801621a:	2b01      	cmp	r3, #1
 801621c:	f77f ae35 	ble.w	8015e8a <_dtoa_r+0x792>
 8016220:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016222:	9307      	str	r3, [sp, #28]
 8016224:	e649      	b.n	8015eba <_dtoa_r+0x7c2>
 8016226:	9b02      	ldr	r3, [sp, #8]
 8016228:	2b00      	cmp	r3, #0
 801622a:	dc03      	bgt.n	8016234 <_dtoa_r+0xb3c>
 801622c:	9b06      	ldr	r3, [sp, #24]
 801622e:	2b02      	cmp	r3, #2
 8016230:	f73f aecc 	bgt.w	8015fcc <_dtoa_r+0x8d4>
 8016234:	465d      	mov	r5, fp
 8016236:	4639      	mov	r1, r7
 8016238:	9804      	ldr	r0, [sp, #16]
 801623a:	f7ff f9cf 	bl	80155dc <quorem>
 801623e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016242:	f805 8b01 	strb.w	r8, [r5], #1
 8016246:	9a02      	ldr	r2, [sp, #8]
 8016248:	eba5 030b 	sub.w	r3, r5, fp
 801624c:	429a      	cmp	r2, r3
 801624e:	ddb0      	ble.n	80161b2 <_dtoa_r+0xaba>
 8016250:	2300      	movs	r3, #0
 8016252:	220a      	movs	r2, #10
 8016254:	9904      	ldr	r1, [sp, #16]
 8016256:	4620      	mov	r0, r4
 8016258:	f000 fa6a 	bl	8016730 <__multadd>
 801625c:	9004      	str	r0, [sp, #16]
 801625e:	e7ea      	b.n	8016236 <_dtoa_r+0xb3e>
 8016260:	0801a039 	.word	0x0801a039
 8016264:	0801a05d 	.word	0x0801a05d

08016268 <__sflush_r>:
 8016268:	898a      	ldrh	r2, [r1, #12]
 801626a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801626e:	4605      	mov	r5, r0
 8016270:	0710      	lsls	r0, r2, #28
 8016272:	460c      	mov	r4, r1
 8016274:	d458      	bmi.n	8016328 <__sflush_r+0xc0>
 8016276:	684b      	ldr	r3, [r1, #4]
 8016278:	2b00      	cmp	r3, #0
 801627a:	dc05      	bgt.n	8016288 <__sflush_r+0x20>
 801627c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801627e:	2b00      	cmp	r3, #0
 8016280:	dc02      	bgt.n	8016288 <__sflush_r+0x20>
 8016282:	2000      	movs	r0, #0
 8016284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016288:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801628a:	2e00      	cmp	r6, #0
 801628c:	d0f9      	beq.n	8016282 <__sflush_r+0x1a>
 801628e:	2300      	movs	r3, #0
 8016290:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016294:	682f      	ldr	r7, [r5, #0]
 8016296:	6a21      	ldr	r1, [r4, #32]
 8016298:	602b      	str	r3, [r5, #0]
 801629a:	d032      	beq.n	8016302 <__sflush_r+0x9a>
 801629c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801629e:	89a3      	ldrh	r3, [r4, #12]
 80162a0:	075a      	lsls	r2, r3, #29
 80162a2:	d505      	bpl.n	80162b0 <__sflush_r+0x48>
 80162a4:	6863      	ldr	r3, [r4, #4]
 80162a6:	1ac0      	subs	r0, r0, r3
 80162a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162aa:	b10b      	cbz	r3, 80162b0 <__sflush_r+0x48>
 80162ac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162ae:	1ac0      	subs	r0, r0, r3
 80162b0:	2300      	movs	r3, #0
 80162b2:	4602      	mov	r2, r0
 80162b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162b6:	6a21      	ldr	r1, [r4, #32]
 80162b8:	4628      	mov	r0, r5
 80162ba:	47b0      	blx	r6
 80162bc:	1c43      	adds	r3, r0, #1
 80162be:	89a3      	ldrh	r3, [r4, #12]
 80162c0:	d106      	bne.n	80162d0 <__sflush_r+0x68>
 80162c2:	6829      	ldr	r1, [r5, #0]
 80162c4:	291d      	cmp	r1, #29
 80162c6:	d848      	bhi.n	801635a <__sflush_r+0xf2>
 80162c8:	4a29      	ldr	r2, [pc, #164]	; (8016370 <__sflush_r+0x108>)
 80162ca:	40ca      	lsrs	r2, r1
 80162cc:	07d6      	lsls	r6, r2, #31
 80162ce:	d544      	bpl.n	801635a <__sflush_r+0xf2>
 80162d0:	2200      	movs	r2, #0
 80162d2:	6062      	str	r2, [r4, #4]
 80162d4:	04d9      	lsls	r1, r3, #19
 80162d6:	6922      	ldr	r2, [r4, #16]
 80162d8:	6022      	str	r2, [r4, #0]
 80162da:	d504      	bpl.n	80162e6 <__sflush_r+0x7e>
 80162dc:	1c42      	adds	r2, r0, #1
 80162de:	d101      	bne.n	80162e4 <__sflush_r+0x7c>
 80162e0:	682b      	ldr	r3, [r5, #0]
 80162e2:	b903      	cbnz	r3, 80162e6 <__sflush_r+0x7e>
 80162e4:	6560      	str	r0, [r4, #84]	; 0x54
 80162e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162e8:	602f      	str	r7, [r5, #0]
 80162ea:	2900      	cmp	r1, #0
 80162ec:	d0c9      	beq.n	8016282 <__sflush_r+0x1a>
 80162ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80162f2:	4299      	cmp	r1, r3
 80162f4:	d002      	beq.n	80162fc <__sflush_r+0x94>
 80162f6:	4628      	mov	r0, r5
 80162f8:	f7fe f98a 	bl	8014610 <_free_r>
 80162fc:	2000      	movs	r0, #0
 80162fe:	6360      	str	r0, [r4, #52]	; 0x34
 8016300:	e7c0      	b.n	8016284 <__sflush_r+0x1c>
 8016302:	2301      	movs	r3, #1
 8016304:	4628      	mov	r0, r5
 8016306:	47b0      	blx	r6
 8016308:	1c41      	adds	r1, r0, #1
 801630a:	d1c8      	bne.n	801629e <__sflush_r+0x36>
 801630c:	682b      	ldr	r3, [r5, #0]
 801630e:	2b00      	cmp	r3, #0
 8016310:	d0c5      	beq.n	801629e <__sflush_r+0x36>
 8016312:	2b1d      	cmp	r3, #29
 8016314:	d001      	beq.n	801631a <__sflush_r+0xb2>
 8016316:	2b16      	cmp	r3, #22
 8016318:	d101      	bne.n	801631e <__sflush_r+0xb6>
 801631a:	602f      	str	r7, [r5, #0]
 801631c:	e7b1      	b.n	8016282 <__sflush_r+0x1a>
 801631e:	89a3      	ldrh	r3, [r4, #12]
 8016320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016324:	81a3      	strh	r3, [r4, #12]
 8016326:	e7ad      	b.n	8016284 <__sflush_r+0x1c>
 8016328:	690f      	ldr	r7, [r1, #16]
 801632a:	2f00      	cmp	r7, #0
 801632c:	d0a9      	beq.n	8016282 <__sflush_r+0x1a>
 801632e:	0793      	lsls	r3, r2, #30
 8016330:	680e      	ldr	r6, [r1, #0]
 8016332:	bf08      	it	eq
 8016334:	694b      	ldreq	r3, [r1, #20]
 8016336:	600f      	str	r7, [r1, #0]
 8016338:	bf18      	it	ne
 801633a:	2300      	movne	r3, #0
 801633c:	eba6 0807 	sub.w	r8, r6, r7
 8016340:	608b      	str	r3, [r1, #8]
 8016342:	f1b8 0f00 	cmp.w	r8, #0
 8016346:	dd9c      	ble.n	8016282 <__sflush_r+0x1a>
 8016348:	4643      	mov	r3, r8
 801634a:	463a      	mov	r2, r7
 801634c:	6a21      	ldr	r1, [r4, #32]
 801634e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016350:	4628      	mov	r0, r5
 8016352:	47b0      	blx	r6
 8016354:	2800      	cmp	r0, #0
 8016356:	dc06      	bgt.n	8016366 <__sflush_r+0xfe>
 8016358:	89a3      	ldrh	r3, [r4, #12]
 801635a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801635e:	81a3      	strh	r3, [r4, #12]
 8016360:	f04f 30ff 	mov.w	r0, #4294967295
 8016364:	e78e      	b.n	8016284 <__sflush_r+0x1c>
 8016366:	4407      	add	r7, r0
 8016368:	eba8 0800 	sub.w	r8, r8, r0
 801636c:	e7e9      	b.n	8016342 <__sflush_r+0xda>
 801636e:	bf00      	nop
 8016370:	20400001 	.word	0x20400001

08016374 <_fflush_r>:
 8016374:	b538      	push	{r3, r4, r5, lr}
 8016376:	690b      	ldr	r3, [r1, #16]
 8016378:	4605      	mov	r5, r0
 801637a:	460c      	mov	r4, r1
 801637c:	b1db      	cbz	r3, 80163b6 <_fflush_r+0x42>
 801637e:	b118      	cbz	r0, 8016388 <_fflush_r+0x14>
 8016380:	6983      	ldr	r3, [r0, #24]
 8016382:	b90b      	cbnz	r3, 8016388 <_fflush_r+0x14>
 8016384:	f000 f860 	bl	8016448 <__sinit>
 8016388:	4b0c      	ldr	r3, [pc, #48]	; (80163bc <_fflush_r+0x48>)
 801638a:	429c      	cmp	r4, r3
 801638c:	d109      	bne.n	80163a2 <_fflush_r+0x2e>
 801638e:	686c      	ldr	r4, [r5, #4]
 8016390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016394:	b17b      	cbz	r3, 80163b6 <_fflush_r+0x42>
 8016396:	4621      	mov	r1, r4
 8016398:	4628      	mov	r0, r5
 801639a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801639e:	f7ff bf63 	b.w	8016268 <__sflush_r>
 80163a2:	4b07      	ldr	r3, [pc, #28]	; (80163c0 <_fflush_r+0x4c>)
 80163a4:	429c      	cmp	r4, r3
 80163a6:	d101      	bne.n	80163ac <_fflush_r+0x38>
 80163a8:	68ac      	ldr	r4, [r5, #8]
 80163aa:	e7f1      	b.n	8016390 <_fflush_r+0x1c>
 80163ac:	4b05      	ldr	r3, [pc, #20]	; (80163c4 <_fflush_r+0x50>)
 80163ae:	429c      	cmp	r4, r3
 80163b0:	bf08      	it	eq
 80163b2:	68ec      	ldreq	r4, [r5, #12]
 80163b4:	e7ec      	b.n	8016390 <_fflush_r+0x1c>
 80163b6:	2000      	movs	r0, #0
 80163b8:	bd38      	pop	{r3, r4, r5, pc}
 80163ba:	bf00      	nop
 80163bc:	0801a08c 	.word	0x0801a08c
 80163c0:	0801a0ac 	.word	0x0801a0ac
 80163c4:	0801a06c 	.word	0x0801a06c

080163c8 <std>:
 80163c8:	2300      	movs	r3, #0
 80163ca:	b510      	push	{r4, lr}
 80163cc:	4604      	mov	r4, r0
 80163ce:	e9c0 3300 	strd	r3, r3, [r0]
 80163d2:	6083      	str	r3, [r0, #8]
 80163d4:	8181      	strh	r1, [r0, #12]
 80163d6:	6643      	str	r3, [r0, #100]	; 0x64
 80163d8:	81c2      	strh	r2, [r0, #14]
 80163da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80163de:	6183      	str	r3, [r0, #24]
 80163e0:	4619      	mov	r1, r3
 80163e2:	2208      	movs	r2, #8
 80163e4:	305c      	adds	r0, #92	; 0x5c
 80163e6:	f7fe f90a 	bl	80145fe <memset>
 80163ea:	4b05      	ldr	r3, [pc, #20]	; (8016400 <std+0x38>)
 80163ec:	6263      	str	r3, [r4, #36]	; 0x24
 80163ee:	4b05      	ldr	r3, [pc, #20]	; (8016404 <std+0x3c>)
 80163f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80163f2:	4b05      	ldr	r3, [pc, #20]	; (8016408 <std+0x40>)
 80163f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80163f6:	4b05      	ldr	r3, [pc, #20]	; (801640c <std+0x44>)
 80163f8:	6224      	str	r4, [r4, #32]
 80163fa:	6323      	str	r3, [r4, #48]	; 0x30
 80163fc:	bd10      	pop	{r4, pc}
 80163fe:	bf00      	nop
 8016400:	08015381 	.word	0x08015381
 8016404:	080153a3 	.word	0x080153a3
 8016408:	080153db 	.word	0x080153db
 801640c:	080153ff 	.word	0x080153ff

08016410 <_cleanup_r>:
 8016410:	4901      	ldr	r1, [pc, #4]	; (8016418 <_cleanup_r+0x8>)
 8016412:	f000 b885 	b.w	8016520 <_fwalk_reent>
 8016416:	bf00      	nop
 8016418:	08016375 	.word	0x08016375

0801641c <__sfmoreglue>:
 801641c:	b570      	push	{r4, r5, r6, lr}
 801641e:	1e4a      	subs	r2, r1, #1
 8016420:	2568      	movs	r5, #104	; 0x68
 8016422:	4355      	muls	r5, r2
 8016424:	460e      	mov	r6, r1
 8016426:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801642a:	f7fe f93f 	bl	80146ac <_malloc_r>
 801642e:	4604      	mov	r4, r0
 8016430:	b140      	cbz	r0, 8016444 <__sfmoreglue+0x28>
 8016432:	2100      	movs	r1, #0
 8016434:	e9c0 1600 	strd	r1, r6, [r0]
 8016438:	300c      	adds	r0, #12
 801643a:	60a0      	str	r0, [r4, #8]
 801643c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016440:	f7fe f8dd 	bl	80145fe <memset>
 8016444:	4620      	mov	r0, r4
 8016446:	bd70      	pop	{r4, r5, r6, pc}

08016448 <__sinit>:
 8016448:	6983      	ldr	r3, [r0, #24]
 801644a:	b510      	push	{r4, lr}
 801644c:	4604      	mov	r4, r0
 801644e:	bb33      	cbnz	r3, 801649e <__sinit+0x56>
 8016450:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8016454:	6503      	str	r3, [r0, #80]	; 0x50
 8016456:	4b12      	ldr	r3, [pc, #72]	; (80164a0 <__sinit+0x58>)
 8016458:	4a12      	ldr	r2, [pc, #72]	; (80164a4 <__sinit+0x5c>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	6282      	str	r2, [r0, #40]	; 0x28
 801645e:	4298      	cmp	r0, r3
 8016460:	bf04      	itt	eq
 8016462:	2301      	moveq	r3, #1
 8016464:	6183      	streq	r3, [r0, #24]
 8016466:	f000 f81f 	bl	80164a8 <__sfp>
 801646a:	6060      	str	r0, [r4, #4]
 801646c:	4620      	mov	r0, r4
 801646e:	f000 f81b 	bl	80164a8 <__sfp>
 8016472:	60a0      	str	r0, [r4, #8]
 8016474:	4620      	mov	r0, r4
 8016476:	f000 f817 	bl	80164a8 <__sfp>
 801647a:	2200      	movs	r2, #0
 801647c:	60e0      	str	r0, [r4, #12]
 801647e:	2104      	movs	r1, #4
 8016480:	6860      	ldr	r0, [r4, #4]
 8016482:	f7ff ffa1 	bl	80163c8 <std>
 8016486:	2201      	movs	r2, #1
 8016488:	2109      	movs	r1, #9
 801648a:	68a0      	ldr	r0, [r4, #8]
 801648c:	f7ff ff9c 	bl	80163c8 <std>
 8016490:	2202      	movs	r2, #2
 8016492:	2112      	movs	r1, #18
 8016494:	68e0      	ldr	r0, [r4, #12]
 8016496:	f7ff ff97 	bl	80163c8 <std>
 801649a:	2301      	movs	r3, #1
 801649c:	61a3      	str	r3, [r4, #24]
 801649e:	bd10      	pop	{r4, pc}
 80164a0:	0801a014 	.word	0x0801a014
 80164a4:	08016411 	.word	0x08016411

080164a8 <__sfp>:
 80164a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164aa:	4b1b      	ldr	r3, [pc, #108]	; (8016518 <__sfp+0x70>)
 80164ac:	681e      	ldr	r6, [r3, #0]
 80164ae:	69b3      	ldr	r3, [r6, #24]
 80164b0:	4607      	mov	r7, r0
 80164b2:	b913      	cbnz	r3, 80164ba <__sfp+0x12>
 80164b4:	4630      	mov	r0, r6
 80164b6:	f7ff ffc7 	bl	8016448 <__sinit>
 80164ba:	3648      	adds	r6, #72	; 0x48
 80164bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80164c0:	3b01      	subs	r3, #1
 80164c2:	d503      	bpl.n	80164cc <__sfp+0x24>
 80164c4:	6833      	ldr	r3, [r6, #0]
 80164c6:	b133      	cbz	r3, 80164d6 <__sfp+0x2e>
 80164c8:	6836      	ldr	r6, [r6, #0]
 80164ca:	e7f7      	b.n	80164bc <__sfp+0x14>
 80164cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80164d0:	b16d      	cbz	r5, 80164ee <__sfp+0x46>
 80164d2:	3468      	adds	r4, #104	; 0x68
 80164d4:	e7f4      	b.n	80164c0 <__sfp+0x18>
 80164d6:	2104      	movs	r1, #4
 80164d8:	4638      	mov	r0, r7
 80164da:	f7ff ff9f 	bl	801641c <__sfmoreglue>
 80164de:	6030      	str	r0, [r6, #0]
 80164e0:	2800      	cmp	r0, #0
 80164e2:	d1f1      	bne.n	80164c8 <__sfp+0x20>
 80164e4:	230c      	movs	r3, #12
 80164e6:	603b      	str	r3, [r7, #0]
 80164e8:	4604      	mov	r4, r0
 80164ea:	4620      	mov	r0, r4
 80164ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ee:	4b0b      	ldr	r3, [pc, #44]	; (801651c <__sfp+0x74>)
 80164f0:	6665      	str	r5, [r4, #100]	; 0x64
 80164f2:	e9c4 5500 	strd	r5, r5, [r4]
 80164f6:	60a5      	str	r5, [r4, #8]
 80164f8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80164fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8016500:	2208      	movs	r2, #8
 8016502:	4629      	mov	r1, r5
 8016504:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016508:	f7fe f879 	bl	80145fe <memset>
 801650c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016510:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016514:	e7e9      	b.n	80164ea <__sfp+0x42>
 8016516:	bf00      	nop
 8016518:	0801a014 	.word	0x0801a014
 801651c:	ffff0001 	.word	0xffff0001

08016520 <_fwalk_reent>:
 8016520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016524:	4680      	mov	r8, r0
 8016526:	4689      	mov	r9, r1
 8016528:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801652c:	2600      	movs	r6, #0
 801652e:	b914      	cbnz	r4, 8016536 <_fwalk_reent+0x16>
 8016530:	4630      	mov	r0, r6
 8016532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016536:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801653a:	3f01      	subs	r7, #1
 801653c:	d501      	bpl.n	8016542 <_fwalk_reent+0x22>
 801653e:	6824      	ldr	r4, [r4, #0]
 8016540:	e7f5      	b.n	801652e <_fwalk_reent+0xe>
 8016542:	89ab      	ldrh	r3, [r5, #12]
 8016544:	2b01      	cmp	r3, #1
 8016546:	d907      	bls.n	8016558 <_fwalk_reent+0x38>
 8016548:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801654c:	3301      	adds	r3, #1
 801654e:	d003      	beq.n	8016558 <_fwalk_reent+0x38>
 8016550:	4629      	mov	r1, r5
 8016552:	4640      	mov	r0, r8
 8016554:	47c8      	blx	r9
 8016556:	4306      	orrs	r6, r0
 8016558:	3568      	adds	r5, #104	; 0x68
 801655a:	e7ee      	b.n	801653a <_fwalk_reent+0x1a>

0801655c <_localeconv_r>:
 801655c:	4b04      	ldr	r3, [pc, #16]	; (8016570 <_localeconv_r+0x14>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	6a18      	ldr	r0, [r3, #32]
 8016562:	4b04      	ldr	r3, [pc, #16]	; (8016574 <_localeconv_r+0x18>)
 8016564:	2800      	cmp	r0, #0
 8016566:	bf08      	it	eq
 8016568:	4618      	moveq	r0, r3
 801656a:	30f0      	adds	r0, #240	; 0xf0
 801656c:	4770      	bx	lr
 801656e:	bf00      	nop
 8016570:	20000434 	.word	0x20000434
 8016574:	20000498 	.word	0x20000498

08016578 <_lseek_r>:
 8016578:	b538      	push	{r3, r4, r5, lr}
 801657a:	4c07      	ldr	r4, [pc, #28]	; (8016598 <_lseek_r+0x20>)
 801657c:	4605      	mov	r5, r0
 801657e:	4608      	mov	r0, r1
 8016580:	4611      	mov	r1, r2
 8016582:	2200      	movs	r2, #0
 8016584:	6022      	str	r2, [r4, #0]
 8016586:	461a      	mov	r2, r3
 8016588:	f7f0 ff20 	bl	80073cc <_lseek>
 801658c:	1c43      	adds	r3, r0, #1
 801658e:	d102      	bne.n	8016596 <_lseek_r+0x1e>
 8016590:	6823      	ldr	r3, [r4, #0]
 8016592:	b103      	cbz	r3, 8016596 <_lseek_r+0x1e>
 8016594:	602b      	str	r3, [r5, #0]
 8016596:	bd38      	pop	{r3, r4, r5, pc}
 8016598:	20006aa0 	.word	0x20006aa0

0801659c <__swhatbuf_r>:
 801659c:	b570      	push	{r4, r5, r6, lr}
 801659e:	460e      	mov	r6, r1
 80165a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80165a4:	2900      	cmp	r1, #0
 80165a6:	b096      	sub	sp, #88	; 0x58
 80165a8:	4614      	mov	r4, r2
 80165aa:	461d      	mov	r5, r3
 80165ac:	da07      	bge.n	80165be <__swhatbuf_r+0x22>
 80165ae:	2300      	movs	r3, #0
 80165b0:	602b      	str	r3, [r5, #0]
 80165b2:	89b3      	ldrh	r3, [r6, #12]
 80165b4:	061a      	lsls	r2, r3, #24
 80165b6:	d410      	bmi.n	80165da <__swhatbuf_r+0x3e>
 80165b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80165bc:	e00e      	b.n	80165dc <__swhatbuf_r+0x40>
 80165be:	466a      	mov	r2, sp
 80165c0:	f000 fd22 	bl	8017008 <_fstat_r>
 80165c4:	2800      	cmp	r0, #0
 80165c6:	dbf2      	blt.n	80165ae <__swhatbuf_r+0x12>
 80165c8:	9a01      	ldr	r2, [sp, #4]
 80165ca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80165ce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80165d2:	425a      	negs	r2, r3
 80165d4:	415a      	adcs	r2, r3
 80165d6:	602a      	str	r2, [r5, #0]
 80165d8:	e7ee      	b.n	80165b8 <__swhatbuf_r+0x1c>
 80165da:	2340      	movs	r3, #64	; 0x40
 80165dc:	2000      	movs	r0, #0
 80165de:	6023      	str	r3, [r4, #0]
 80165e0:	b016      	add	sp, #88	; 0x58
 80165e2:	bd70      	pop	{r4, r5, r6, pc}

080165e4 <__smakebuf_r>:
 80165e4:	898b      	ldrh	r3, [r1, #12]
 80165e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80165e8:	079d      	lsls	r5, r3, #30
 80165ea:	4606      	mov	r6, r0
 80165ec:	460c      	mov	r4, r1
 80165ee:	d507      	bpl.n	8016600 <__smakebuf_r+0x1c>
 80165f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80165f4:	6023      	str	r3, [r4, #0]
 80165f6:	6123      	str	r3, [r4, #16]
 80165f8:	2301      	movs	r3, #1
 80165fa:	6163      	str	r3, [r4, #20]
 80165fc:	b002      	add	sp, #8
 80165fe:	bd70      	pop	{r4, r5, r6, pc}
 8016600:	ab01      	add	r3, sp, #4
 8016602:	466a      	mov	r2, sp
 8016604:	f7ff ffca 	bl	801659c <__swhatbuf_r>
 8016608:	9900      	ldr	r1, [sp, #0]
 801660a:	4605      	mov	r5, r0
 801660c:	4630      	mov	r0, r6
 801660e:	f7fe f84d 	bl	80146ac <_malloc_r>
 8016612:	b948      	cbnz	r0, 8016628 <__smakebuf_r+0x44>
 8016614:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016618:	059a      	lsls	r2, r3, #22
 801661a:	d4ef      	bmi.n	80165fc <__smakebuf_r+0x18>
 801661c:	f023 0303 	bic.w	r3, r3, #3
 8016620:	f043 0302 	orr.w	r3, r3, #2
 8016624:	81a3      	strh	r3, [r4, #12]
 8016626:	e7e3      	b.n	80165f0 <__smakebuf_r+0xc>
 8016628:	4b0d      	ldr	r3, [pc, #52]	; (8016660 <__smakebuf_r+0x7c>)
 801662a:	62b3      	str	r3, [r6, #40]	; 0x28
 801662c:	89a3      	ldrh	r3, [r4, #12]
 801662e:	6020      	str	r0, [r4, #0]
 8016630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016634:	81a3      	strh	r3, [r4, #12]
 8016636:	9b00      	ldr	r3, [sp, #0]
 8016638:	6163      	str	r3, [r4, #20]
 801663a:	9b01      	ldr	r3, [sp, #4]
 801663c:	6120      	str	r0, [r4, #16]
 801663e:	b15b      	cbz	r3, 8016658 <__smakebuf_r+0x74>
 8016640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016644:	4630      	mov	r0, r6
 8016646:	f000 fcf1 	bl	801702c <_isatty_r>
 801664a:	b128      	cbz	r0, 8016658 <__smakebuf_r+0x74>
 801664c:	89a3      	ldrh	r3, [r4, #12]
 801664e:	f023 0303 	bic.w	r3, r3, #3
 8016652:	f043 0301 	orr.w	r3, r3, #1
 8016656:	81a3      	strh	r3, [r4, #12]
 8016658:	89a3      	ldrh	r3, [r4, #12]
 801665a:	431d      	orrs	r5, r3
 801665c:	81a5      	strh	r5, [r4, #12]
 801665e:	e7cd      	b.n	80165fc <__smakebuf_r+0x18>
 8016660:	08016411 	.word	0x08016411

08016664 <memmove>:
 8016664:	4288      	cmp	r0, r1
 8016666:	b510      	push	{r4, lr}
 8016668:	eb01 0302 	add.w	r3, r1, r2
 801666c:	d807      	bhi.n	801667e <memmove+0x1a>
 801666e:	1e42      	subs	r2, r0, #1
 8016670:	4299      	cmp	r1, r3
 8016672:	d00a      	beq.n	801668a <memmove+0x26>
 8016674:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016678:	f802 4f01 	strb.w	r4, [r2, #1]!
 801667c:	e7f8      	b.n	8016670 <memmove+0xc>
 801667e:	4283      	cmp	r3, r0
 8016680:	d9f5      	bls.n	801666e <memmove+0xa>
 8016682:	1881      	adds	r1, r0, r2
 8016684:	1ad2      	subs	r2, r2, r3
 8016686:	42d3      	cmn	r3, r2
 8016688:	d100      	bne.n	801668c <memmove+0x28>
 801668a:	bd10      	pop	{r4, pc}
 801668c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016690:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016694:	e7f7      	b.n	8016686 <memmove+0x22>

08016696 <__malloc_lock>:
 8016696:	4770      	bx	lr

08016698 <__malloc_unlock>:
 8016698:	4770      	bx	lr

0801669a <_Balloc>:
 801669a:	b570      	push	{r4, r5, r6, lr}
 801669c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801669e:	4604      	mov	r4, r0
 80166a0:	460e      	mov	r6, r1
 80166a2:	b93d      	cbnz	r5, 80166b4 <_Balloc+0x1a>
 80166a4:	2010      	movs	r0, #16
 80166a6:	f7fd ff8f 	bl	80145c8 <malloc>
 80166aa:	6260      	str	r0, [r4, #36]	; 0x24
 80166ac:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80166b0:	6005      	str	r5, [r0, #0]
 80166b2:	60c5      	str	r5, [r0, #12]
 80166b4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80166b6:	68eb      	ldr	r3, [r5, #12]
 80166b8:	b183      	cbz	r3, 80166dc <_Balloc+0x42>
 80166ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166bc:	68db      	ldr	r3, [r3, #12]
 80166be:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80166c2:	b9b8      	cbnz	r0, 80166f4 <_Balloc+0x5a>
 80166c4:	2101      	movs	r1, #1
 80166c6:	fa01 f506 	lsl.w	r5, r1, r6
 80166ca:	1d6a      	adds	r2, r5, #5
 80166cc:	0092      	lsls	r2, r2, #2
 80166ce:	4620      	mov	r0, r4
 80166d0:	f000 fabe 	bl	8016c50 <_calloc_r>
 80166d4:	b160      	cbz	r0, 80166f0 <_Balloc+0x56>
 80166d6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80166da:	e00e      	b.n	80166fa <_Balloc+0x60>
 80166dc:	2221      	movs	r2, #33	; 0x21
 80166de:	2104      	movs	r1, #4
 80166e0:	4620      	mov	r0, r4
 80166e2:	f000 fab5 	bl	8016c50 <_calloc_r>
 80166e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80166e8:	60e8      	str	r0, [r5, #12]
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d1e4      	bne.n	80166ba <_Balloc+0x20>
 80166f0:	2000      	movs	r0, #0
 80166f2:	bd70      	pop	{r4, r5, r6, pc}
 80166f4:	6802      	ldr	r2, [r0, #0]
 80166f6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80166fa:	2300      	movs	r3, #0
 80166fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016700:	e7f7      	b.n	80166f2 <_Balloc+0x58>

08016702 <_Bfree>:
 8016702:	b570      	push	{r4, r5, r6, lr}
 8016704:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016706:	4606      	mov	r6, r0
 8016708:	460d      	mov	r5, r1
 801670a:	b93c      	cbnz	r4, 801671c <_Bfree+0x1a>
 801670c:	2010      	movs	r0, #16
 801670e:	f7fd ff5b 	bl	80145c8 <malloc>
 8016712:	6270      	str	r0, [r6, #36]	; 0x24
 8016714:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016718:	6004      	str	r4, [r0, #0]
 801671a:	60c4      	str	r4, [r0, #12]
 801671c:	b13d      	cbz	r5, 801672e <_Bfree+0x2c>
 801671e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016720:	686a      	ldr	r2, [r5, #4]
 8016722:	68db      	ldr	r3, [r3, #12]
 8016724:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016728:	6029      	str	r1, [r5, #0]
 801672a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801672e:	bd70      	pop	{r4, r5, r6, pc}

08016730 <__multadd>:
 8016730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016734:	690d      	ldr	r5, [r1, #16]
 8016736:	461f      	mov	r7, r3
 8016738:	4606      	mov	r6, r0
 801673a:	460c      	mov	r4, r1
 801673c:	f101 0c14 	add.w	ip, r1, #20
 8016740:	2300      	movs	r3, #0
 8016742:	f8dc 0000 	ldr.w	r0, [ip]
 8016746:	b281      	uxth	r1, r0
 8016748:	fb02 7101 	mla	r1, r2, r1, r7
 801674c:	0c0f      	lsrs	r7, r1, #16
 801674e:	0c00      	lsrs	r0, r0, #16
 8016750:	fb02 7000 	mla	r0, r2, r0, r7
 8016754:	b289      	uxth	r1, r1
 8016756:	3301      	adds	r3, #1
 8016758:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801675c:	429d      	cmp	r5, r3
 801675e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016762:	f84c 1b04 	str.w	r1, [ip], #4
 8016766:	dcec      	bgt.n	8016742 <__multadd+0x12>
 8016768:	b1d7      	cbz	r7, 80167a0 <__multadd+0x70>
 801676a:	68a3      	ldr	r3, [r4, #8]
 801676c:	42ab      	cmp	r3, r5
 801676e:	dc12      	bgt.n	8016796 <__multadd+0x66>
 8016770:	6861      	ldr	r1, [r4, #4]
 8016772:	4630      	mov	r0, r6
 8016774:	3101      	adds	r1, #1
 8016776:	f7ff ff90 	bl	801669a <_Balloc>
 801677a:	6922      	ldr	r2, [r4, #16]
 801677c:	3202      	adds	r2, #2
 801677e:	f104 010c 	add.w	r1, r4, #12
 8016782:	4680      	mov	r8, r0
 8016784:	0092      	lsls	r2, r2, #2
 8016786:	300c      	adds	r0, #12
 8016788:	f7fd ff2e 	bl	80145e8 <memcpy>
 801678c:	4621      	mov	r1, r4
 801678e:	4630      	mov	r0, r6
 8016790:	f7ff ffb7 	bl	8016702 <_Bfree>
 8016794:	4644      	mov	r4, r8
 8016796:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801679a:	3501      	adds	r5, #1
 801679c:	615f      	str	r7, [r3, #20]
 801679e:	6125      	str	r5, [r4, #16]
 80167a0:	4620      	mov	r0, r4
 80167a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080167a6 <__hi0bits>:
 80167a6:	0c02      	lsrs	r2, r0, #16
 80167a8:	0412      	lsls	r2, r2, #16
 80167aa:	4603      	mov	r3, r0
 80167ac:	b9b2      	cbnz	r2, 80167dc <__hi0bits+0x36>
 80167ae:	0403      	lsls	r3, r0, #16
 80167b0:	2010      	movs	r0, #16
 80167b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80167b6:	bf04      	itt	eq
 80167b8:	021b      	lsleq	r3, r3, #8
 80167ba:	3008      	addeq	r0, #8
 80167bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80167c0:	bf04      	itt	eq
 80167c2:	011b      	lsleq	r3, r3, #4
 80167c4:	3004      	addeq	r0, #4
 80167c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80167ca:	bf04      	itt	eq
 80167cc:	009b      	lsleq	r3, r3, #2
 80167ce:	3002      	addeq	r0, #2
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	db06      	blt.n	80167e2 <__hi0bits+0x3c>
 80167d4:	005b      	lsls	r3, r3, #1
 80167d6:	d503      	bpl.n	80167e0 <__hi0bits+0x3a>
 80167d8:	3001      	adds	r0, #1
 80167da:	4770      	bx	lr
 80167dc:	2000      	movs	r0, #0
 80167de:	e7e8      	b.n	80167b2 <__hi0bits+0xc>
 80167e0:	2020      	movs	r0, #32
 80167e2:	4770      	bx	lr

080167e4 <__lo0bits>:
 80167e4:	6803      	ldr	r3, [r0, #0]
 80167e6:	f013 0207 	ands.w	r2, r3, #7
 80167ea:	4601      	mov	r1, r0
 80167ec:	d00b      	beq.n	8016806 <__lo0bits+0x22>
 80167ee:	07da      	lsls	r2, r3, #31
 80167f0:	d423      	bmi.n	801683a <__lo0bits+0x56>
 80167f2:	0798      	lsls	r0, r3, #30
 80167f4:	bf49      	itett	mi
 80167f6:	085b      	lsrmi	r3, r3, #1
 80167f8:	089b      	lsrpl	r3, r3, #2
 80167fa:	2001      	movmi	r0, #1
 80167fc:	600b      	strmi	r3, [r1, #0]
 80167fe:	bf5c      	itt	pl
 8016800:	600b      	strpl	r3, [r1, #0]
 8016802:	2002      	movpl	r0, #2
 8016804:	4770      	bx	lr
 8016806:	b298      	uxth	r0, r3
 8016808:	b9a8      	cbnz	r0, 8016836 <__lo0bits+0x52>
 801680a:	0c1b      	lsrs	r3, r3, #16
 801680c:	2010      	movs	r0, #16
 801680e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016812:	bf04      	itt	eq
 8016814:	0a1b      	lsreq	r3, r3, #8
 8016816:	3008      	addeq	r0, #8
 8016818:	071a      	lsls	r2, r3, #28
 801681a:	bf04      	itt	eq
 801681c:	091b      	lsreq	r3, r3, #4
 801681e:	3004      	addeq	r0, #4
 8016820:	079a      	lsls	r2, r3, #30
 8016822:	bf04      	itt	eq
 8016824:	089b      	lsreq	r3, r3, #2
 8016826:	3002      	addeq	r0, #2
 8016828:	07da      	lsls	r2, r3, #31
 801682a:	d402      	bmi.n	8016832 <__lo0bits+0x4e>
 801682c:	085b      	lsrs	r3, r3, #1
 801682e:	d006      	beq.n	801683e <__lo0bits+0x5a>
 8016830:	3001      	adds	r0, #1
 8016832:	600b      	str	r3, [r1, #0]
 8016834:	4770      	bx	lr
 8016836:	4610      	mov	r0, r2
 8016838:	e7e9      	b.n	801680e <__lo0bits+0x2a>
 801683a:	2000      	movs	r0, #0
 801683c:	4770      	bx	lr
 801683e:	2020      	movs	r0, #32
 8016840:	4770      	bx	lr

08016842 <__i2b>:
 8016842:	b510      	push	{r4, lr}
 8016844:	460c      	mov	r4, r1
 8016846:	2101      	movs	r1, #1
 8016848:	f7ff ff27 	bl	801669a <_Balloc>
 801684c:	2201      	movs	r2, #1
 801684e:	6144      	str	r4, [r0, #20]
 8016850:	6102      	str	r2, [r0, #16]
 8016852:	bd10      	pop	{r4, pc}

08016854 <__multiply>:
 8016854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016858:	4614      	mov	r4, r2
 801685a:	690a      	ldr	r2, [r1, #16]
 801685c:	6923      	ldr	r3, [r4, #16]
 801685e:	429a      	cmp	r2, r3
 8016860:	bfb8      	it	lt
 8016862:	460b      	movlt	r3, r1
 8016864:	4688      	mov	r8, r1
 8016866:	bfbc      	itt	lt
 8016868:	46a0      	movlt	r8, r4
 801686a:	461c      	movlt	r4, r3
 801686c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016870:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016874:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801687c:	eb07 0609 	add.w	r6, r7, r9
 8016880:	42b3      	cmp	r3, r6
 8016882:	bfb8      	it	lt
 8016884:	3101      	addlt	r1, #1
 8016886:	f7ff ff08 	bl	801669a <_Balloc>
 801688a:	f100 0514 	add.w	r5, r0, #20
 801688e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016892:	462b      	mov	r3, r5
 8016894:	2200      	movs	r2, #0
 8016896:	4573      	cmp	r3, lr
 8016898:	d316      	bcc.n	80168c8 <__multiply+0x74>
 801689a:	f104 0214 	add.w	r2, r4, #20
 801689e:	f108 0114 	add.w	r1, r8, #20
 80168a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80168a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80168aa:	9300      	str	r3, [sp, #0]
 80168ac:	9b00      	ldr	r3, [sp, #0]
 80168ae:	9201      	str	r2, [sp, #4]
 80168b0:	4293      	cmp	r3, r2
 80168b2:	d80c      	bhi.n	80168ce <__multiply+0x7a>
 80168b4:	2e00      	cmp	r6, #0
 80168b6:	dd03      	ble.n	80168c0 <__multiply+0x6c>
 80168b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d05d      	beq.n	801697c <__multiply+0x128>
 80168c0:	6106      	str	r6, [r0, #16]
 80168c2:	b003      	add	sp, #12
 80168c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168c8:	f843 2b04 	str.w	r2, [r3], #4
 80168cc:	e7e3      	b.n	8016896 <__multiply+0x42>
 80168ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80168d2:	f1bb 0f00 	cmp.w	fp, #0
 80168d6:	d023      	beq.n	8016920 <__multiply+0xcc>
 80168d8:	4689      	mov	r9, r1
 80168da:	46ac      	mov	ip, r5
 80168dc:	f04f 0800 	mov.w	r8, #0
 80168e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80168e4:	f8dc a000 	ldr.w	sl, [ip]
 80168e8:	b2a3      	uxth	r3, r4
 80168ea:	fa1f fa8a 	uxth.w	sl, sl
 80168ee:	fb0b a303 	mla	r3, fp, r3, sl
 80168f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80168f6:	f8dc 4000 	ldr.w	r4, [ip]
 80168fa:	4443      	add	r3, r8
 80168fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016900:	fb0b 840a 	mla	r4, fp, sl, r8
 8016904:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8016908:	46e2      	mov	sl, ip
 801690a:	b29b      	uxth	r3, r3
 801690c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8016910:	454f      	cmp	r7, r9
 8016912:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8016916:	f84a 3b04 	str.w	r3, [sl], #4
 801691a:	d82b      	bhi.n	8016974 <__multiply+0x120>
 801691c:	f8cc 8004 	str.w	r8, [ip, #4]
 8016920:	9b01      	ldr	r3, [sp, #4]
 8016922:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8016926:	3204      	adds	r2, #4
 8016928:	f1ba 0f00 	cmp.w	sl, #0
 801692c:	d020      	beq.n	8016970 <__multiply+0x11c>
 801692e:	682b      	ldr	r3, [r5, #0]
 8016930:	4689      	mov	r9, r1
 8016932:	46a8      	mov	r8, r5
 8016934:	f04f 0b00 	mov.w	fp, #0
 8016938:	f8b9 c000 	ldrh.w	ip, [r9]
 801693c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8016940:	fb0a 440c 	mla	r4, sl, ip, r4
 8016944:	445c      	add	r4, fp
 8016946:	46c4      	mov	ip, r8
 8016948:	b29b      	uxth	r3, r3
 801694a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801694e:	f84c 3b04 	str.w	r3, [ip], #4
 8016952:	f859 3b04 	ldr.w	r3, [r9], #4
 8016956:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801695a:	0c1b      	lsrs	r3, r3, #16
 801695c:	fb0a b303 	mla	r3, sl, r3, fp
 8016960:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8016964:	454f      	cmp	r7, r9
 8016966:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801696a:	d805      	bhi.n	8016978 <__multiply+0x124>
 801696c:	f8c8 3004 	str.w	r3, [r8, #4]
 8016970:	3504      	adds	r5, #4
 8016972:	e79b      	b.n	80168ac <__multiply+0x58>
 8016974:	46d4      	mov	ip, sl
 8016976:	e7b3      	b.n	80168e0 <__multiply+0x8c>
 8016978:	46e0      	mov	r8, ip
 801697a:	e7dd      	b.n	8016938 <__multiply+0xe4>
 801697c:	3e01      	subs	r6, #1
 801697e:	e799      	b.n	80168b4 <__multiply+0x60>

08016980 <__pow5mult>:
 8016980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016984:	4615      	mov	r5, r2
 8016986:	f012 0203 	ands.w	r2, r2, #3
 801698a:	4606      	mov	r6, r0
 801698c:	460f      	mov	r7, r1
 801698e:	d007      	beq.n	80169a0 <__pow5mult+0x20>
 8016990:	3a01      	subs	r2, #1
 8016992:	4c21      	ldr	r4, [pc, #132]	; (8016a18 <__pow5mult+0x98>)
 8016994:	2300      	movs	r3, #0
 8016996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801699a:	f7ff fec9 	bl	8016730 <__multadd>
 801699e:	4607      	mov	r7, r0
 80169a0:	10ad      	asrs	r5, r5, #2
 80169a2:	d035      	beq.n	8016a10 <__pow5mult+0x90>
 80169a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80169a6:	b93c      	cbnz	r4, 80169b8 <__pow5mult+0x38>
 80169a8:	2010      	movs	r0, #16
 80169aa:	f7fd fe0d 	bl	80145c8 <malloc>
 80169ae:	6270      	str	r0, [r6, #36]	; 0x24
 80169b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80169b4:	6004      	str	r4, [r0, #0]
 80169b6:	60c4      	str	r4, [r0, #12]
 80169b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80169bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80169c0:	b94c      	cbnz	r4, 80169d6 <__pow5mult+0x56>
 80169c2:	f240 2171 	movw	r1, #625	; 0x271
 80169c6:	4630      	mov	r0, r6
 80169c8:	f7ff ff3b 	bl	8016842 <__i2b>
 80169cc:	2300      	movs	r3, #0
 80169ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80169d2:	4604      	mov	r4, r0
 80169d4:	6003      	str	r3, [r0, #0]
 80169d6:	f04f 0800 	mov.w	r8, #0
 80169da:	07eb      	lsls	r3, r5, #31
 80169dc:	d50a      	bpl.n	80169f4 <__pow5mult+0x74>
 80169de:	4639      	mov	r1, r7
 80169e0:	4622      	mov	r2, r4
 80169e2:	4630      	mov	r0, r6
 80169e4:	f7ff ff36 	bl	8016854 <__multiply>
 80169e8:	4639      	mov	r1, r7
 80169ea:	4681      	mov	r9, r0
 80169ec:	4630      	mov	r0, r6
 80169ee:	f7ff fe88 	bl	8016702 <_Bfree>
 80169f2:	464f      	mov	r7, r9
 80169f4:	106d      	asrs	r5, r5, #1
 80169f6:	d00b      	beq.n	8016a10 <__pow5mult+0x90>
 80169f8:	6820      	ldr	r0, [r4, #0]
 80169fa:	b938      	cbnz	r0, 8016a0c <__pow5mult+0x8c>
 80169fc:	4622      	mov	r2, r4
 80169fe:	4621      	mov	r1, r4
 8016a00:	4630      	mov	r0, r6
 8016a02:	f7ff ff27 	bl	8016854 <__multiply>
 8016a06:	6020      	str	r0, [r4, #0]
 8016a08:	f8c0 8000 	str.w	r8, [r0]
 8016a0c:	4604      	mov	r4, r0
 8016a0e:	e7e4      	b.n	80169da <__pow5mult+0x5a>
 8016a10:	4638      	mov	r0, r7
 8016a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a16:	bf00      	nop
 8016a18:	0801a1c0 	.word	0x0801a1c0

08016a1c <__lshift>:
 8016a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a20:	460c      	mov	r4, r1
 8016a22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016a26:	6923      	ldr	r3, [r4, #16]
 8016a28:	6849      	ldr	r1, [r1, #4]
 8016a2a:	eb0a 0903 	add.w	r9, sl, r3
 8016a2e:	68a3      	ldr	r3, [r4, #8]
 8016a30:	4607      	mov	r7, r0
 8016a32:	4616      	mov	r6, r2
 8016a34:	f109 0501 	add.w	r5, r9, #1
 8016a38:	42ab      	cmp	r3, r5
 8016a3a:	db32      	blt.n	8016aa2 <__lshift+0x86>
 8016a3c:	4638      	mov	r0, r7
 8016a3e:	f7ff fe2c 	bl	801669a <_Balloc>
 8016a42:	2300      	movs	r3, #0
 8016a44:	4680      	mov	r8, r0
 8016a46:	f100 0114 	add.w	r1, r0, #20
 8016a4a:	461a      	mov	r2, r3
 8016a4c:	4553      	cmp	r3, sl
 8016a4e:	db2b      	blt.n	8016aa8 <__lshift+0x8c>
 8016a50:	6920      	ldr	r0, [r4, #16]
 8016a52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016a56:	f104 0314 	add.w	r3, r4, #20
 8016a5a:	f016 021f 	ands.w	r2, r6, #31
 8016a5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016a62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016a66:	d025      	beq.n	8016ab4 <__lshift+0x98>
 8016a68:	f1c2 0e20 	rsb	lr, r2, #32
 8016a6c:	2000      	movs	r0, #0
 8016a6e:	681e      	ldr	r6, [r3, #0]
 8016a70:	468a      	mov	sl, r1
 8016a72:	4096      	lsls	r6, r2
 8016a74:	4330      	orrs	r0, r6
 8016a76:	f84a 0b04 	str.w	r0, [sl], #4
 8016a7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8016a7e:	459c      	cmp	ip, r3
 8016a80:	fa20 f00e 	lsr.w	r0, r0, lr
 8016a84:	d814      	bhi.n	8016ab0 <__lshift+0x94>
 8016a86:	6048      	str	r0, [r1, #4]
 8016a88:	b108      	cbz	r0, 8016a8e <__lshift+0x72>
 8016a8a:	f109 0502 	add.w	r5, r9, #2
 8016a8e:	3d01      	subs	r5, #1
 8016a90:	4638      	mov	r0, r7
 8016a92:	f8c8 5010 	str.w	r5, [r8, #16]
 8016a96:	4621      	mov	r1, r4
 8016a98:	f7ff fe33 	bl	8016702 <_Bfree>
 8016a9c:	4640      	mov	r0, r8
 8016a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016aa2:	3101      	adds	r1, #1
 8016aa4:	005b      	lsls	r3, r3, #1
 8016aa6:	e7c7      	b.n	8016a38 <__lshift+0x1c>
 8016aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8016aac:	3301      	adds	r3, #1
 8016aae:	e7cd      	b.n	8016a4c <__lshift+0x30>
 8016ab0:	4651      	mov	r1, sl
 8016ab2:	e7dc      	b.n	8016a6e <__lshift+0x52>
 8016ab4:	3904      	subs	r1, #4
 8016ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8016aba:	f841 2f04 	str.w	r2, [r1, #4]!
 8016abe:	459c      	cmp	ip, r3
 8016ac0:	d8f9      	bhi.n	8016ab6 <__lshift+0x9a>
 8016ac2:	e7e4      	b.n	8016a8e <__lshift+0x72>

08016ac4 <__mcmp>:
 8016ac4:	6903      	ldr	r3, [r0, #16]
 8016ac6:	690a      	ldr	r2, [r1, #16]
 8016ac8:	1a9b      	subs	r3, r3, r2
 8016aca:	b530      	push	{r4, r5, lr}
 8016acc:	d10c      	bne.n	8016ae8 <__mcmp+0x24>
 8016ace:	0092      	lsls	r2, r2, #2
 8016ad0:	3014      	adds	r0, #20
 8016ad2:	3114      	adds	r1, #20
 8016ad4:	1884      	adds	r4, r0, r2
 8016ad6:	4411      	add	r1, r2
 8016ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8016adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8016ae0:	4295      	cmp	r5, r2
 8016ae2:	d003      	beq.n	8016aec <__mcmp+0x28>
 8016ae4:	d305      	bcc.n	8016af2 <__mcmp+0x2e>
 8016ae6:	2301      	movs	r3, #1
 8016ae8:	4618      	mov	r0, r3
 8016aea:	bd30      	pop	{r4, r5, pc}
 8016aec:	42a0      	cmp	r0, r4
 8016aee:	d3f3      	bcc.n	8016ad8 <__mcmp+0x14>
 8016af0:	e7fa      	b.n	8016ae8 <__mcmp+0x24>
 8016af2:	f04f 33ff 	mov.w	r3, #4294967295
 8016af6:	e7f7      	b.n	8016ae8 <__mcmp+0x24>

08016af8 <__mdiff>:
 8016af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016afc:	460d      	mov	r5, r1
 8016afe:	4607      	mov	r7, r0
 8016b00:	4611      	mov	r1, r2
 8016b02:	4628      	mov	r0, r5
 8016b04:	4614      	mov	r4, r2
 8016b06:	f7ff ffdd 	bl	8016ac4 <__mcmp>
 8016b0a:	1e06      	subs	r6, r0, #0
 8016b0c:	d108      	bne.n	8016b20 <__mdiff+0x28>
 8016b0e:	4631      	mov	r1, r6
 8016b10:	4638      	mov	r0, r7
 8016b12:	f7ff fdc2 	bl	801669a <_Balloc>
 8016b16:	2301      	movs	r3, #1
 8016b18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8016b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b20:	bfa4      	itt	ge
 8016b22:	4623      	movge	r3, r4
 8016b24:	462c      	movge	r4, r5
 8016b26:	4638      	mov	r0, r7
 8016b28:	6861      	ldr	r1, [r4, #4]
 8016b2a:	bfa6      	itte	ge
 8016b2c:	461d      	movge	r5, r3
 8016b2e:	2600      	movge	r6, #0
 8016b30:	2601      	movlt	r6, #1
 8016b32:	f7ff fdb2 	bl	801669a <_Balloc>
 8016b36:	692b      	ldr	r3, [r5, #16]
 8016b38:	60c6      	str	r6, [r0, #12]
 8016b3a:	6926      	ldr	r6, [r4, #16]
 8016b3c:	f105 0914 	add.w	r9, r5, #20
 8016b40:	f104 0214 	add.w	r2, r4, #20
 8016b44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8016b48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8016b4c:	f100 0514 	add.w	r5, r0, #20
 8016b50:	f04f 0e00 	mov.w	lr, #0
 8016b54:	f852 ab04 	ldr.w	sl, [r2], #4
 8016b58:	f859 4b04 	ldr.w	r4, [r9], #4
 8016b5c:	fa1e f18a 	uxtah	r1, lr, sl
 8016b60:	b2a3      	uxth	r3, r4
 8016b62:	1ac9      	subs	r1, r1, r3
 8016b64:	0c23      	lsrs	r3, r4, #16
 8016b66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8016b6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8016b6e:	b289      	uxth	r1, r1
 8016b70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8016b74:	45c8      	cmp	r8, r9
 8016b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8016b7a:	4694      	mov	ip, r2
 8016b7c:	f845 3b04 	str.w	r3, [r5], #4
 8016b80:	d8e8      	bhi.n	8016b54 <__mdiff+0x5c>
 8016b82:	45bc      	cmp	ip, r7
 8016b84:	d304      	bcc.n	8016b90 <__mdiff+0x98>
 8016b86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8016b8a:	b183      	cbz	r3, 8016bae <__mdiff+0xb6>
 8016b8c:	6106      	str	r6, [r0, #16]
 8016b8e:	e7c5      	b.n	8016b1c <__mdiff+0x24>
 8016b90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8016b94:	fa1e f381 	uxtah	r3, lr, r1
 8016b98:	141a      	asrs	r2, r3, #16
 8016b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ba4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8016ba8:	f845 3b04 	str.w	r3, [r5], #4
 8016bac:	e7e9      	b.n	8016b82 <__mdiff+0x8a>
 8016bae:	3e01      	subs	r6, #1
 8016bb0:	e7e9      	b.n	8016b86 <__mdiff+0x8e>

08016bb2 <__d2b>:
 8016bb2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016bb6:	460e      	mov	r6, r1
 8016bb8:	2101      	movs	r1, #1
 8016bba:	ec59 8b10 	vmov	r8, r9, d0
 8016bbe:	4615      	mov	r5, r2
 8016bc0:	f7ff fd6b 	bl	801669a <_Balloc>
 8016bc4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8016bc8:	4607      	mov	r7, r0
 8016bca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016bce:	bb34      	cbnz	r4, 8016c1e <__d2b+0x6c>
 8016bd0:	9301      	str	r3, [sp, #4]
 8016bd2:	f1b8 0300 	subs.w	r3, r8, #0
 8016bd6:	d027      	beq.n	8016c28 <__d2b+0x76>
 8016bd8:	a802      	add	r0, sp, #8
 8016bda:	f840 3d08 	str.w	r3, [r0, #-8]!
 8016bde:	f7ff fe01 	bl	80167e4 <__lo0bits>
 8016be2:	9900      	ldr	r1, [sp, #0]
 8016be4:	b1f0      	cbz	r0, 8016c24 <__d2b+0x72>
 8016be6:	9a01      	ldr	r2, [sp, #4]
 8016be8:	f1c0 0320 	rsb	r3, r0, #32
 8016bec:	fa02 f303 	lsl.w	r3, r2, r3
 8016bf0:	430b      	orrs	r3, r1
 8016bf2:	40c2      	lsrs	r2, r0
 8016bf4:	617b      	str	r3, [r7, #20]
 8016bf6:	9201      	str	r2, [sp, #4]
 8016bf8:	9b01      	ldr	r3, [sp, #4]
 8016bfa:	61bb      	str	r3, [r7, #24]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	bf14      	ite	ne
 8016c00:	2102      	movne	r1, #2
 8016c02:	2101      	moveq	r1, #1
 8016c04:	6139      	str	r1, [r7, #16]
 8016c06:	b1c4      	cbz	r4, 8016c3a <__d2b+0x88>
 8016c08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8016c0c:	4404      	add	r4, r0
 8016c0e:	6034      	str	r4, [r6, #0]
 8016c10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016c14:	6028      	str	r0, [r5, #0]
 8016c16:	4638      	mov	r0, r7
 8016c18:	b003      	add	sp, #12
 8016c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016c22:	e7d5      	b.n	8016bd0 <__d2b+0x1e>
 8016c24:	6179      	str	r1, [r7, #20]
 8016c26:	e7e7      	b.n	8016bf8 <__d2b+0x46>
 8016c28:	a801      	add	r0, sp, #4
 8016c2a:	f7ff fddb 	bl	80167e4 <__lo0bits>
 8016c2e:	9b01      	ldr	r3, [sp, #4]
 8016c30:	617b      	str	r3, [r7, #20]
 8016c32:	2101      	movs	r1, #1
 8016c34:	6139      	str	r1, [r7, #16]
 8016c36:	3020      	adds	r0, #32
 8016c38:	e7e5      	b.n	8016c06 <__d2b+0x54>
 8016c3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016c3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016c42:	6030      	str	r0, [r6, #0]
 8016c44:	6918      	ldr	r0, [r3, #16]
 8016c46:	f7ff fdae 	bl	80167a6 <__hi0bits>
 8016c4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016c4e:	e7e1      	b.n	8016c14 <__d2b+0x62>

08016c50 <_calloc_r>:
 8016c50:	b538      	push	{r3, r4, r5, lr}
 8016c52:	fb02 f401 	mul.w	r4, r2, r1
 8016c56:	4621      	mov	r1, r4
 8016c58:	f7fd fd28 	bl	80146ac <_malloc_r>
 8016c5c:	4605      	mov	r5, r0
 8016c5e:	b118      	cbz	r0, 8016c68 <_calloc_r+0x18>
 8016c60:	4622      	mov	r2, r4
 8016c62:	2100      	movs	r1, #0
 8016c64:	f7fd fccb 	bl	80145fe <memset>
 8016c68:	4628      	mov	r0, r5
 8016c6a:	bd38      	pop	{r3, r4, r5, pc}

08016c6c <_realloc_r>:
 8016c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c6e:	4607      	mov	r7, r0
 8016c70:	4614      	mov	r4, r2
 8016c72:	460e      	mov	r6, r1
 8016c74:	b921      	cbnz	r1, 8016c80 <_realloc_r+0x14>
 8016c76:	4611      	mov	r1, r2
 8016c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016c7c:	f7fd bd16 	b.w	80146ac <_malloc_r>
 8016c80:	b922      	cbnz	r2, 8016c8c <_realloc_r+0x20>
 8016c82:	f7fd fcc5 	bl	8014610 <_free_r>
 8016c86:	4625      	mov	r5, r4
 8016c88:	4628      	mov	r0, r5
 8016c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c8c:	f000 f9f0 	bl	8017070 <_malloc_usable_size_r>
 8016c90:	42a0      	cmp	r0, r4
 8016c92:	d20f      	bcs.n	8016cb4 <_realloc_r+0x48>
 8016c94:	4621      	mov	r1, r4
 8016c96:	4638      	mov	r0, r7
 8016c98:	f7fd fd08 	bl	80146ac <_malloc_r>
 8016c9c:	4605      	mov	r5, r0
 8016c9e:	2800      	cmp	r0, #0
 8016ca0:	d0f2      	beq.n	8016c88 <_realloc_r+0x1c>
 8016ca2:	4631      	mov	r1, r6
 8016ca4:	4622      	mov	r2, r4
 8016ca6:	f7fd fc9f 	bl	80145e8 <memcpy>
 8016caa:	4631      	mov	r1, r6
 8016cac:	4638      	mov	r0, r7
 8016cae:	f7fd fcaf 	bl	8014610 <_free_r>
 8016cb2:	e7e9      	b.n	8016c88 <_realloc_r+0x1c>
 8016cb4:	4635      	mov	r5, r6
 8016cb6:	e7e7      	b.n	8016c88 <_realloc_r+0x1c>

08016cb8 <__ssputs_r>:
 8016cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cbc:	688e      	ldr	r6, [r1, #8]
 8016cbe:	429e      	cmp	r6, r3
 8016cc0:	4682      	mov	sl, r0
 8016cc2:	460c      	mov	r4, r1
 8016cc4:	4690      	mov	r8, r2
 8016cc6:	4699      	mov	r9, r3
 8016cc8:	d837      	bhi.n	8016d3a <__ssputs_r+0x82>
 8016cca:	898a      	ldrh	r2, [r1, #12]
 8016ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016cd0:	d031      	beq.n	8016d36 <__ssputs_r+0x7e>
 8016cd2:	6825      	ldr	r5, [r4, #0]
 8016cd4:	6909      	ldr	r1, [r1, #16]
 8016cd6:	1a6f      	subs	r7, r5, r1
 8016cd8:	6965      	ldr	r5, [r4, #20]
 8016cda:	2302      	movs	r3, #2
 8016cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ce0:	fb95 f5f3 	sdiv	r5, r5, r3
 8016ce4:	f109 0301 	add.w	r3, r9, #1
 8016ce8:	443b      	add	r3, r7
 8016cea:	429d      	cmp	r5, r3
 8016cec:	bf38      	it	cc
 8016cee:	461d      	movcc	r5, r3
 8016cf0:	0553      	lsls	r3, r2, #21
 8016cf2:	d530      	bpl.n	8016d56 <__ssputs_r+0x9e>
 8016cf4:	4629      	mov	r1, r5
 8016cf6:	f7fd fcd9 	bl	80146ac <_malloc_r>
 8016cfa:	4606      	mov	r6, r0
 8016cfc:	b950      	cbnz	r0, 8016d14 <__ssputs_r+0x5c>
 8016cfe:	230c      	movs	r3, #12
 8016d00:	f8ca 3000 	str.w	r3, [sl]
 8016d04:	89a3      	ldrh	r3, [r4, #12]
 8016d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d0a:	81a3      	strh	r3, [r4, #12]
 8016d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8016d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d14:	463a      	mov	r2, r7
 8016d16:	6921      	ldr	r1, [r4, #16]
 8016d18:	f7fd fc66 	bl	80145e8 <memcpy>
 8016d1c:	89a3      	ldrh	r3, [r4, #12]
 8016d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d26:	81a3      	strh	r3, [r4, #12]
 8016d28:	6126      	str	r6, [r4, #16]
 8016d2a:	6165      	str	r5, [r4, #20]
 8016d2c:	443e      	add	r6, r7
 8016d2e:	1bed      	subs	r5, r5, r7
 8016d30:	6026      	str	r6, [r4, #0]
 8016d32:	60a5      	str	r5, [r4, #8]
 8016d34:	464e      	mov	r6, r9
 8016d36:	454e      	cmp	r6, r9
 8016d38:	d900      	bls.n	8016d3c <__ssputs_r+0x84>
 8016d3a:	464e      	mov	r6, r9
 8016d3c:	4632      	mov	r2, r6
 8016d3e:	4641      	mov	r1, r8
 8016d40:	6820      	ldr	r0, [r4, #0]
 8016d42:	f7ff fc8f 	bl	8016664 <memmove>
 8016d46:	68a3      	ldr	r3, [r4, #8]
 8016d48:	1b9b      	subs	r3, r3, r6
 8016d4a:	60a3      	str	r3, [r4, #8]
 8016d4c:	6823      	ldr	r3, [r4, #0]
 8016d4e:	441e      	add	r6, r3
 8016d50:	6026      	str	r6, [r4, #0]
 8016d52:	2000      	movs	r0, #0
 8016d54:	e7dc      	b.n	8016d10 <__ssputs_r+0x58>
 8016d56:	462a      	mov	r2, r5
 8016d58:	f7ff ff88 	bl	8016c6c <_realloc_r>
 8016d5c:	4606      	mov	r6, r0
 8016d5e:	2800      	cmp	r0, #0
 8016d60:	d1e2      	bne.n	8016d28 <__ssputs_r+0x70>
 8016d62:	6921      	ldr	r1, [r4, #16]
 8016d64:	4650      	mov	r0, sl
 8016d66:	f7fd fc53 	bl	8014610 <_free_r>
 8016d6a:	e7c8      	b.n	8016cfe <__ssputs_r+0x46>

08016d6c <_svfiprintf_r>:
 8016d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d70:	461d      	mov	r5, r3
 8016d72:	898b      	ldrh	r3, [r1, #12]
 8016d74:	061f      	lsls	r7, r3, #24
 8016d76:	b09d      	sub	sp, #116	; 0x74
 8016d78:	4680      	mov	r8, r0
 8016d7a:	460c      	mov	r4, r1
 8016d7c:	4616      	mov	r6, r2
 8016d7e:	d50f      	bpl.n	8016da0 <_svfiprintf_r+0x34>
 8016d80:	690b      	ldr	r3, [r1, #16]
 8016d82:	b96b      	cbnz	r3, 8016da0 <_svfiprintf_r+0x34>
 8016d84:	2140      	movs	r1, #64	; 0x40
 8016d86:	f7fd fc91 	bl	80146ac <_malloc_r>
 8016d8a:	6020      	str	r0, [r4, #0]
 8016d8c:	6120      	str	r0, [r4, #16]
 8016d8e:	b928      	cbnz	r0, 8016d9c <_svfiprintf_r+0x30>
 8016d90:	230c      	movs	r3, #12
 8016d92:	f8c8 3000 	str.w	r3, [r8]
 8016d96:	f04f 30ff 	mov.w	r0, #4294967295
 8016d9a:	e0c8      	b.n	8016f2e <_svfiprintf_r+0x1c2>
 8016d9c:	2340      	movs	r3, #64	; 0x40
 8016d9e:	6163      	str	r3, [r4, #20]
 8016da0:	2300      	movs	r3, #0
 8016da2:	9309      	str	r3, [sp, #36]	; 0x24
 8016da4:	2320      	movs	r3, #32
 8016da6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016daa:	2330      	movs	r3, #48	; 0x30
 8016dac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016db0:	9503      	str	r5, [sp, #12]
 8016db2:	f04f 0b01 	mov.w	fp, #1
 8016db6:	4637      	mov	r7, r6
 8016db8:	463d      	mov	r5, r7
 8016dba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8016dbe:	b10b      	cbz	r3, 8016dc4 <_svfiprintf_r+0x58>
 8016dc0:	2b25      	cmp	r3, #37	; 0x25
 8016dc2:	d13e      	bne.n	8016e42 <_svfiprintf_r+0xd6>
 8016dc4:	ebb7 0a06 	subs.w	sl, r7, r6
 8016dc8:	d00b      	beq.n	8016de2 <_svfiprintf_r+0x76>
 8016dca:	4653      	mov	r3, sl
 8016dcc:	4632      	mov	r2, r6
 8016dce:	4621      	mov	r1, r4
 8016dd0:	4640      	mov	r0, r8
 8016dd2:	f7ff ff71 	bl	8016cb8 <__ssputs_r>
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	f000 80a4 	beq.w	8016f24 <_svfiprintf_r+0x1b8>
 8016ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016dde:	4453      	add	r3, sl
 8016de0:	9309      	str	r3, [sp, #36]	; 0x24
 8016de2:	783b      	ldrb	r3, [r7, #0]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	f000 809d 	beq.w	8016f24 <_svfiprintf_r+0x1b8>
 8016dea:	2300      	movs	r3, #0
 8016dec:	f04f 32ff 	mov.w	r2, #4294967295
 8016df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016df4:	9304      	str	r3, [sp, #16]
 8016df6:	9307      	str	r3, [sp, #28]
 8016df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8016dfe:	462f      	mov	r7, r5
 8016e00:	2205      	movs	r2, #5
 8016e02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8016e06:	4850      	ldr	r0, [pc, #320]	; (8016f48 <_svfiprintf_r+0x1dc>)
 8016e08:	f7e9 fa0a 	bl	8000220 <memchr>
 8016e0c:	9b04      	ldr	r3, [sp, #16]
 8016e0e:	b9d0      	cbnz	r0, 8016e46 <_svfiprintf_r+0xda>
 8016e10:	06d9      	lsls	r1, r3, #27
 8016e12:	bf44      	itt	mi
 8016e14:	2220      	movmi	r2, #32
 8016e16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e1a:	071a      	lsls	r2, r3, #28
 8016e1c:	bf44      	itt	mi
 8016e1e:	222b      	movmi	r2, #43	; 0x2b
 8016e20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016e24:	782a      	ldrb	r2, [r5, #0]
 8016e26:	2a2a      	cmp	r2, #42	; 0x2a
 8016e28:	d015      	beq.n	8016e56 <_svfiprintf_r+0xea>
 8016e2a:	9a07      	ldr	r2, [sp, #28]
 8016e2c:	462f      	mov	r7, r5
 8016e2e:	2000      	movs	r0, #0
 8016e30:	250a      	movs	r5, #10
 8016e32:	4639      	mov	r1, r7
 8016e34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e38:	3b30      	subs	r3, #48	; 0x30
 8016e3a:	2b09      	cmp	r3, #9
 8016e3c:	d94d      	bls.n	8016eda <_svfiprintf_r+0x16e>
 8016e3e:	b1b8      	cbz	r0, 8016e70 <_svfiprintf_r+0x104>
 8016e40:	e00f      	b.n	8016e62 <_svfiprintf_r+0xf6>
 8016e42:	462f      	mov	r7, r5
 8016e44:	e7b8      	b.n	8016db8 <_svfiprintf_r+0x4c>
 8016e46:	4a40      	ldr	r2, [pc, #256]	; (8016f48 <_svfiprintf_r+0x1dc>)
 8016e48:	1a80      	subs	r0, r0, r2
 8016e4a:	fa0b f000 	lsl.w	r0, fp, r0
 8016e4e:	4318      	orrs	r0, r3
 8016e50:	9004      	str	r0, [sp, #16]
 8016e52:	463d      	mov	r5, r7
 8016e54:	e7d3      	b.n	8016dfe <_svfiprintf_r+0x92>
 8016e56:	9a03      	ldr	r2, [sp, #12]
 8016e58:	1d11      	adds	r1, r2, #4
 8016e5a:	6812      	ldr	r2, [r2, #0]
 8016e5c:	9103      	str	r1, [sp, #12]
 8016e5e:	2a00      	cmp	r2, #0
 8016e60:	db01      	blt.n	8016e66 <_svfiprintf_r+0xfa>
 8016e62:	9207      	str	r2, [sp, #28]
 8016e64:	e004      	b.n	8016e70 <_svfiprintf_r+0x104>
 8016e66:	4252      	negs	r2, r2
 8016e68:	f043 0302 	orr.w	r3, r3, #2
 8016e6c:	9207      	str	r2, [sp, #28]
 8016e6e:	9304      	str	r3, [sp, #16]
 8016e70:	783b      	ldrb	r3, [r7, #0]
 8016e72:	2b2e      	cmp	r3, #46	; 0x2e
 8016e74:	d10c      	bne.n	8016e90 <_svfiprintf_r+0x124>
 8016e76:	787b      	ldrb	r3, [r7, #1]
 8016e78:	2b2a      	cmp	r3, #42	; 0x2a
 8016e7a:	d133      	bne.n	8016ee4 <_svfiprintf_r+0x178>
 8016e7c:	9b03      	ldr	r3, [sp, #12]
 8016e7e:	1d1a      	adds	r2, r3, #4
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	9203      	str	r2, [sp, #12]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	bfb8      	it	lt
 8016e88:	f04f 33ff 	movlt.w	r3, #4294967295
 8016e8c:	3702      	adds	r7, #2
 8016e8e:	9305      	str	r3, [sp, #20]
 8016e90:	4d2e      	ldr	r5, [pc, #184]	; (8016f4c <_svfiprintf_r+0x1e0>)
 8016e92:	7839      	ldrb	r1, [r7, #0]
 8016e94:	2203      	movs	r2, #3
 8016e96:	4628      	mov	r0, r5
 8016e98:	f7e9 f9c2 	bl	8000220 <memchr>
 8016e9c:	b138      	cbz	r0, 8016eae <_svfiprintf_r+0x142>
 8016e9e:	2340      	movs	r3, #64	; 0x40
 8016ea0:	1b40      	subs	r0, r0, r5
 8016ea2:	fa03 f000 	lsl.w	r0, r3, r0
 8016ea6:	9b04      	ldr	r3, [sp, #16]
 8016ea8:	4303      	orrs	r3, r0
 8016eaa:	3701      	adds	r7, #1
 8016eac:	9304      	str	r3, [sp, #16]
 8016eae:	7839      	ldrb	r1, [r7, #0]
 8016eb0:	4827      	ldr	r0, [pc, #156]	; (8016f50 <_svfiprintf_r+0x1e4>)
 8016eb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016eb6:	2206      	movs	r2, #6
 8016eb8:	1c7e      	adds	r6, r7, #1
 8016eba:	f7e9 f9b1 	bl	8000220 <memchr>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d038      	beq.n	8016f34 <_svfiprintf_r+0x1c8>
 8016ec2:	4b24      	ldr	r3, [pc, #144]	; (8016f54 <_svfiprintf_r+0x1e8>)
 8016ec4:	bb13      	cbnz	r3, 8016f0c <_svfiprintf_r+0x1a0>
 8016ec6:	9b03      	ldr	r3, [sp, #12]
 8016ec8:	3307      	adds	r3, #7
 8016eca:	f023 0307 	bic.w	r3, r3, #7
 8016ece:	3308      	adds	r3, #8
 8016ed0:	9303      	str	r3, [sp, #12]
 8016ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ed4:	444b      	add	r3, r9
 8016ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8016ed8:	e76d      	b.n	8016db6 <_svfiprintf_r+0x4a>
 8016eda:	fb05 3202 	mla	r2, r5, r2, r3
 8016ede:	2001      	movs	r0, #1
 8016ee0:	460f      	mov	r7, r1
 8016ee2:	e7a6      	b.n	8016e32 <_svfiprintf_r+0xc6>
 8016ee4:	2300      	movs	r3, #0
 8016ee6:	3701      	adds	r7, #1
 8016ee8:	9305      	str	r3, [sp, #20]
 8016eea:	4619      	mov	r1, r3
 8016eec:	250a      	movs	r5, #10
 8016eee:	4638      	mov	r0, r7
 8016ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ef4:	3a30      	subs	r2, #48	; 0x30
 8016ef6:	2a09      	cmp	r2, #9
 8016ef8:	d903      	bls.n	8016f02 <_svfiprintf_r+0x196>
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d0c8      	beq.n	8016e90 <_svfiprintf_r+0x124>
 8016efe:	9105      	str	r1, [sp, #20]
 8016f00:	e7c6      	b.n	8016e90 <_svfiprintf_r+0x124>
 8016f02:	fb05 2101 	mla	r1, r5, r1, r2
 8016f06:	2301      	movs	r3, #1
 8016f08:	4607      	mov	r7, r0
 8016f0a:	e7f0      	b.n	8016eee <_svfiprintf_r+0x182>
 8016f0c:	ab03      	add	r3, sp, #12
 8016f0e:	9300      	str	r3, [sp, #0]
 8016f10:	4622      	mov	r2, r4
 8016f12:	4b11      	ldr	r3, [pc, #68]	; (8016f58 <_svfiprintf_r+0x1ec>)
 8016f14:	a904      	add	r1, sp, #16
 8016f16:	4640      	mov	r0, r8
 8016f18:	f7fd fdf6 	bl	8014b08 <_printf_float>
 8016f1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016f20:	4681      	mov	r9, r0
 8016f22:	d1d6      	bne.n	8016ed2 <_svfiprintf_r+0x166>
 8016f24:	89a3      	ldrh	r3, [r4, #12]
 8016f26:	065b      	lsls	r3, r3, #25
 8016f28:	f53f af35 	bmi.w	8016d96 <_svfiprintf_r+0x2a>
 8016f2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f2e:	b01d      	add	sp, #116	; 0x74
 8016f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f34:	ab03      	add	r3, sp, #12
 8016f36:	9300      	str	r3, [sp, #0]
 8016f38:	4622      	mov	r2, r4
 8016f3a:	4b07      	ldr	r3, [pc, #28]	; (8016f58 <_svfiprintf_r+0x1ec>)
 8016f3c:	a904      	add	r1, sp, #16
 8016f3e:	4640      	mov	r0, r8
 8016f40:	f7fe f898 	bl	8015074 <_printf_i>
 8016f44:	e7ea      	b.n	8016f1c <_svfiprintf_r+0x1b0>
 8016f46:	bf00      	nop
 8016f48:	0801a018 	.word	0x0801a018
 8016f4c:	0801a01e 	.word	0x0801a01e
 8016f50:	0801a022 	.word	0x0801a022
 8016f54:	08014b09 	.word	0x08014b09
 8016f58:	08016cb9 	.word	0x08016cb9

08016f5c <_read_r>:
 8016f5c:	b538      	push	{r3, r4, r5, lr}
 8016f5e:	4c07      	ldr	r4, [pc, #28]	; (8016f7c <_read_r+0x20>)
 8016f60:	4605      	mov	r5, r0
 8016f62:	4608      	mov	r0, r1
 8016f64:	4611      	mov	r1, r2
 8016f66:	2200      	movs	r2, #0
 8016f68:	6022      	str	r2, [r4, #0]
 8016f6a:	461a      	mov	r2, r3
 8016f6c:	f7f0 f9ce 	bl	800730c <_read>
 8016f70:	1c43      	adds	r3, r0, #1
 8016f72:	d102      	bne.n	8016f7a <_read_r+0x1e>
 8016f74:	6823      	ldr	r3, [r4, #0]
 8016f76:	b103      	cbz	r3, 8016f7a <_read_r+0x1e>
 8016f78:	602b      	str	r3, [r5, #0]
 8016f7a:	bd38      	pop	{r3, r4, r5, pc}
 8016f7c:	20006aa0 	.word	0x20006aa0

08016f80 <_raise_r>:
 8016f80:	291f      	cmp	r1, #31
 8016f82:	b538      	push	{r3, r4, r5, lr}
 8016f84:	4604      	mov	r4, r0
 8016f86:	460d      	mov	r5, r1
 8016f88:	d904      	bls.n	8016f94 <_raise_r+0x14>
 8016f8a:	2316      	movs	r3, #22
 8016f8c:	6003      	str	r3, [r0, #0]
 8016f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8016f92:	bd38      	pop	{r3, r4, r5, pc}
 8016f94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016f96:	b112      	cbz	r2, 8016f9e <_raise_r+0x1e>
 8016f98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016f9c:	b94b      	cbnz	r3, 8016fb2 <_raise_r+0x32>
 8016f9e:	4620      	mov	r0, r4
 8016fa0:	f000 f830 	bl	8017004 <_getpid_r>
 8016fa4:	462a      	mov	r2, r5
 8016fa6:	4601      	mov	r1, r0
 8016fa8:	4620      	mov	r0, r4
 8016faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016fae:	f000 b817 	b.w	8016fe0 <_kill_r>
 8016fb2:	2b01      	cmp	r3, #1
 8016fb4:	d00a      	beq.n	8016fcc <_raise_r+0x4c>
 8016fb6:	1c59      	adds	r1, r3, #1
 8016fb8:	d103      	bne.n	8016fc2 <_raise_r+0x42>
 8016fba:	2316      	movs	r3, #22
 8016fbc:	6003      	str	r3, [r0, #0]
 8016fbe:	2001      	movs	r0, #1
 8016fc0:	e7e7      	b.n	8016f92 <_raise_r+0x12>
 8016fc2:	2400      	movs	r4, #0
 8016fc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016fc8:	4628      	mov	r0, r5
 8016fca:	4798      	blx	r3
 8016fcc:	2000      	movs	r0, #0
 8016fce:	e7e0      	b.n	8016f92 <_raise_r+0x12>

08016fd0 <raise>:
 8016fd0:	4b02      	ldr	r3, [pc, #8]	; (8016fdc <raise+0xc>)
 8016fd2:	4601      	mov	r1, r0
 8016fd4:	6818      	ldr	r0, [r3, #0]
 8016fd6:	f7ff bfd3 	b.w	8016f80 <_raise_r>
 8016fda:	bf00      	nop
 8016fdc:	20000434 	.word	0x20000434

08016fe0 <_kill_r>:
 8016fe0:	b538      	push	{r3, r4, r5, lr}
 8016fe2:	4c07      	ldr	r4, [pc, #28]	; (8017000 <_kill_r+0x20>)
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	4605      	mov	r5, r0
 8016fe8:	4608      	mov	r0, r1
 8016fea:	4611      	mov	r1, r2
 8016fec:	6023      	str	r3, [r4, #0]
 8016fee:	f7f0 f973 	bl	80072d8 <_kill>
 8016ff2:	1c43      	adds	r3, r0, #1
 8016ff4:	d102      	bne.n	8016ffc <_kill_r+0x1c>
 8016ff6:	6823      	ldr	r3, [r4, #0]
 8016ff8:	b103      	cbz	r3, 8016ffc <_kill_r+0x1c>
 8016ffa:	602b      	str	r3, [r5, #0]
 8016ffc:	bd38      	pop	{r3, r4, r5, pc}
 8016ffe:	bf00      	nop
 8017000:	20006aa0 	.word	0x20006aa0

08017004 <_getpid_r>:
 8017004:	f7f0 b960 	b.w	80072c8 <_getpid>

08017008 <_fstat_r>:
 8017008:	b538      	push	{r3, r4, r5, lr}
 801700a:	4c07      	ldr	r4, [pc, #28]	; (8017028 <_fstat_r+0x20>)
 801700c:	2300      	movs	r3, #0
 801700e:	4605      	mov	r5, r0
 8017010:	4608      	mov	r0, r1
 8017012:	4611      	mov	r1, r2
 8017014:	6023      	str	r3, [r4, #0]
 8017016:	f7f0 f9be 	bl	8007396 <_fstat>
 801701a:	1c43      	adds	r3, r0, #1
 801701c:	d102      	bne.n	8017024 <_fstat_r+0x1c>
 801701e:	6823      	ldr	r3, [r4, #0]
 8017020:	b103      	cbz	r3, 8017024 <_fstat_r+0x1c>
 8017022:	602b      	str	r3, [r5, #0]
 8017024:	bd38      	pop	{r3, r4, r5, pc}
 8017026:	bf00      	nop
 8017028:	20006aa0 	.word	0x20006aa0

0801702c <_isatty_r>:
 801702c:	b538      	push	{r3, r4, r5, lr}
 801702e:	4c06      	ldr	r4, [pc, #24]	; (8017048 <_isatty_r+0x1c>)
 8017030:	2300      	movs	r3, #0
 8017032:	4605      	mov	r5, r0
 8017034:	4608      	mov	r0, r1
 8017036:	6023      	str	r3, [r4, #0]
 8017038:	f7f0 f9bd 	bl	80073b6 <_isatty>
 801703c:	1c43      	adds	r3, r0, #1
 801703e:	d102      	bne.n	8017046 <_isatty_r+0x1a>
 8017040:	6823      	ldr	r3, [r4, #0]
 8017042:	b103      	cbz	r3, 8017046 <_isatty_r+0x1a>
 8017044:	602b      	str	r3, [r5, #0]
 8017046:	bd38      	pop	{r3, r4, r5, pc}
 8017048:	20006aa0 	.word	0x20006aa0

0801704c <__ascii_mbtowc>:
 801704c:	b082      	sub	sp, #8
 801704e:	b901      	cbnz	r1, 8017052 <__ascii_mbtowc+0x6>
 8017050:	a901      	add	r1, sp, #4
 8017052:	b142      	cbz	r2, 8017066 <__ascii_mbtowc+0x1a>
 8017054:	b14b      	cbz	r3, 801706a <__ascii_mbtowc+0x1e>
 8017056:	7813      	ldrb	r3, [r2, #0]
 8017058:	600b      	str	r3, [r1, #0]
 801705a:	7812      	ldrb	r2, [r2, #0]
 801705c:	1c10      	adds	r0, r2, #0
 801705e:	bf18      	it	ne
 8017060:	2001      	movne	r0, #1
 8017062:	b002      	add	sp, #8
 8017064:	4770      	bx	lr
 8017066:	4610      	mov	r0, r2
 8017068:	e7fb      	b.n	8017062 <__ascii_mbtowc+0x16>
 801706a:	f06f 0001 	mvn.w	r0, #1
 801706e:	e7f8      	b.n	8017062 <__ascii_mbtowc+0x16>

08017070 <_malloc_usable_size_r>:
 8017070:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017074:	1f18      	subs	r0, r3, #4
 8017076:	2b00      	cmp	r3, #0
 8017078:	bfbc      	itt	lt
 801707a:	580b      	ldrlt	r3, [r1, r0]
 801707c:	18c0      	addlt	r0, r0, r3
 801707e:	4770      	bx	lr

08017080 <__ascii_wctomb>:
 8017080:	b149      	cbz	r1, 8017096 <__ascii_wctomb+0x16>
 8017082:	2aff      	cmp	r2, #255	; 0xff
 8017084:	bf85      	ittet	hi
 8017086:	238a      	movhi	r3, #138	; 0x8a
 8017088:	6003      	strhi	r3, [r0, #0]
 801708a:	700a      	strbls	r2, [r1, #0]
 801708c:	f04f 30ff 	movhi.w	r0, #4294967295
 8017090:	bf98      	it	ls
 8017092:	2001      	movls	r0, #1
 8017094:	4770      	bx	lr
 8017096:	4608      	mov	r0, r1
 8017098:	4770      	bx	lr
 801709a:	0000      	movs	r0, r0
 801709c:	0000      	movs	r0, r0
	...

080170a0 <cos>:
 80170a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80170a2:	ec51 0b10 	vmov	r0, r1, d0
 80170a6:	4a1e      	ldr	r2, [pc, #120]	; (8017120 <cos+0x80>)
 80170a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80170ac:	4293      	cmp	r3, r2
 80170ae:	dc06      	bgt.n	80170be <cos+0x1e>
 80170b0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8017118 <cos+0x78>
 80170b4:	f001 fb3c 	bl	8018730 <__kernel_cos>
 80170b8:	ec51 0b10 	vmov	r0, r1, d0
 80170bc:	e007      	b.n	80170ce <cos+0x2e>
 80170be:	4a19      	ldr	r2, [pc, #100]	; (8017124 <cos+0x84>)
 80170c0:	4293      	cmp	r3, r2
 80170c2:	dd09      	ble.n	80170d8 <cos+0x38>
 80170c4:	ee10 2a10 	vmov	r2, s0
 80170c8:	460b      	mov	r3, r1
 80170ca:	f7e9 f8fd 	bl	80002c8 <__aeabi_dsub>
 80170ce:	ec41 0b10 	vmov	d0, r0, r1
 80170d2:	b005      	add	sp, #20
 80170d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80170d8:	4668      	mov	r0, sp
 80170da:	f000 fdc1 	bl	8017c60 <__ieee754_rem_pio2>
 80170de:	f000 0003 	and.w	r0, r0, #3
 80170e2:	2801      	cmp	r0, #1
 80170e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80170e8:	ed9d 0b00 	vldr	d0, [sp]
 80170ec:	d007      	beq.n	80170fe <cos+0x5e>
 80170ee:	2802      	cmp	r0, #2
 80170f0:	d00e      	beq.n	8017110 <cos+0x70>
 80170f2:	2800      	cmp	r0, #0
 80170f4:	d0de      	beq.n	80170b4 <cos+0x14>
 80170f6:	2001      	movs	r0, #1
 80170f8:	f001 ff22 	bl	8018f40 <__kernel_sin>
 80170fc:	e7dc      	b.n	80170b8 <cos+0x18>
 80170fe:	f001 ff1f 	bl	8018f40 <__kernel_sin>
 8017102:	ec53 2b10 	vmov	r2, r3, d0
 8017106:	ee10 0a10 	vmov	r0, s0
 801710a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801710e:	e7de      	b.n	80170ce <cos+0x2e>
 8017110:	f001 fb0e 	bl	8018730 <__kernel_cos>
 8017114:	e7f5      	b.n	8017102 <cos+0x62>
 8017116:	bf00      	nop
	...
 8017120:	3fe921fb 	.word	0x3fe921fb
 8017124:	7fefffff 	.word	0x7fefffff

08017128 <round>:
 8017128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801712a:	ec57 6b10 	vmov	r6, r7, d0
 801712e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8017132:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8017136:	2c13      	cmp	r4, #19
 8017138:	463b      	mov	r3, r7
 801713a:	463d      	mov	r5, r7
 801713c:	dc17      	bgt.n	801716e <round+0x46>
 801713e:	2c00      	cmp	r4, #0
 8017140:	da09      	bge.n	8017156 <round+0x2e>
 8017142:	3401      	adds	r4, #1
 8017144:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8017148:	d103      	bne.n	8017152 <round+0x2a>
 801714a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801714e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017152:	2100      	movs	r1, #0
 8017154:	e02c      	b.n	80171b0 <round+0x88>
 8017156:	4a18      	ldr	r2, [pc, #96]	; (80171b8 <round+0x90>)
 8017158:	4122      	asrs	r2, r4
 801715a:	4217      	tst	r7, r2
 801715c:	d100      	bne.n	8017160 <round+0x38>
 801715e:	b19e      	cbz	r6, 8017188 <round+0x60>
 8017160:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8017164:	4123      	asrs	r3, r4
 8017166:	442b      	add	r3, r5
 8017168:	ea23 0302 	bic.w	r3, r3, r2
 801716c:	e7f1      	b.n	8017152 <round+0x2a>
 801716e:	2c33      	cmp	r4, #51	; 0x33
 8017170:	dd0d      	ble.n	801718e <round+0x66>
 8017172:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8017176:	d107      	bne.n	8017188 <round+0x60>
 8017178:	4630      	mov	r0, r6
 801717a:	4639      	mov	r1, r7
 801717c:	ee10 2a10 	vmov	r2, s0
 8017180:	f7e9 f8a4 	bl	80002cc <__adddf3>
 8017184:	4606      	mov	r6, r0
 8017186:	460f      	mov	r7, r1
 8017188:	ec47 6b10 	vmov	d0, r6, r7
 801718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801718e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8017192:	f04f 30ff 	mov.w	r0, #4294967295
 8017196:	40d0      	lsrs	r0, r2
 8017198:	4206      	tst	r6, r0
 801719a:	d0f5      	beq.n	8017188 <round+0x60>
 801719c:	2201      	movs	r2, #1
 801719e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80171a2:	fa02 f404 	lsl.w	r4, r2, r4
 80171a6:	1931      	adds	r1, r6, r4
 80171a8:	bf28      	it	cs
 80171aa:	189b      	addcs	r3, r3, r2
 80171ac:	ea21 0100 	bic.w	r1, r1, r0
 80171b0:	461f      	mov	r7, r3
 80171b2:	460e      	mov	r6, r1
 80171b4:	e7e8      	b.n	8017188 <round+0x60>
 80171b6:	bf00      	nop
 80171b8:	000fffff 	.word	0x000fffff
 80171bc:	00000000 	.word	0x00000000

080171c0 <sin>:
 80171c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80171c2:	ec51 0b10 	vmov	r0, r1, d0
 80171c6:	4a20      	ldr	r2, [pc, #128]	; (8017248 <sin+0x88>)
 80171c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80171cc:	4293      	cmp	r3, r2
 80171ce:	dc07      	bgt.n	80171e0 <sin+0x20>
 80171d0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8017240 <sin+0x80>
 80171d4:	2000      	movs	r0, #0
 80171d6:	f001 feb3 	bl	8018f40 <__kernel_sin>
 80171da:	ec51 0b10 	vmov	r0, r1, d0
 80171de:	e007      	b.n	80171f0 <sin+0x30>
 80171e0:	4a1a      	ldr	r2, [pc, #104]	; (801724c <sin+0x8c>)
 80171e2:	4293      	cmp	r3, r2
 80171e4:	dd09      	ble.n	80171fa <sin+0x3a>
 80171e6:	ee10 2a10 	vmov	r2, s0
 80171ea:	460b      	mov	r3, r1
 80171ec:	f7e9 f86c 	bl	80002c8 <__aeabi_dsub>
 80171f0:	ec41 0b10 	vmov	d0, r0, r1
 80171f4:	b005      	add	sp, #20
 80171f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80171fa:	4668      	mov	r0, sp
 80171fc:	f000 fd30 	bl	8017c60 <__ieee754_rem_pio2>
 8017200:	f000 0003 	and.w	r0, r0, #3
 8017204:	2801      	cmp	r0, #1
 8017206:	ed9d 1b02 	vldr	d1, [sp, #8]
 801720a:	ed9d 0b00 	vldr	d0, [sp]
 801720e:	d004      	beq.n	801721a <sin+0x5a>
 8017210:	2802      	cmp	r0, #2
 8017212:	d005      	beq.n	8017220 <sin+0x60>
 8017214:	b970      	cbnz	r0, 8017234 <sin+0x74>
 8017216:	2001      	movs	r0, #1
 8017218:	e7dd      	b.n	80171d6 <sin+0x16>
 801721a:	f001 fa89 	bl	8018730 <__kernel_cos>
 801721e:	e7dc      	b.n	80171da <sin+0x1a>
 8017220:	2001      	movs	r0, #1
 8017222:	f001 fe8d 	bl	8018f40 <__kernel_sin>
 8017226:	ec53 2b10 	vmov	r2, r3, d0
 801722a:	ee10 0a10 	vmov	r0, s0
 801722e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017232:	e7dd      	b.n	80171f0 <sin+0x30>
 8017234:	f001 fa7c 	bl	8018730 <__kernel_cos>
 8017238:	e7f5      	b.n	8017226 <sin+0x66>
 801723a:	bf00      	nop
 801723c:	f3af 8000 	nop.w
	...
 8017248:	3fe921fb 	.word	0x3fe921fb
 801724c:	7fefffff 	.word	0x7fefffff

08017250 <asin>:
 8017250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017252:	ed2d 8b02 	vpush	{d8}
 8017256:	4e26      	ldr	r6, [pc, #152]	; (80172f0 <asin+0xa0>)
 8017258:	b08b      	sub	sp, #44	; 0x2c
 801725a:	ec55 4b10 	vmov	r4, r5, d0
 801725e:	f000 fa0f 	bl	8017680 <__ieee754_asin>
 8017262:	f996 3000 	ldrsb.w	r3, [r6]
 8017266:	eeb0 8a40 	vmov.f32	s16, s0
 801726a:	eef0 8a60 	vmov.f32	s17, s1
 801726e:	3301      	adds	r3, #1
 8017270:	d036      	beq.n	80172e0 <asin+0x90>
 8017272:	4622      	mov	r2, r4
 8017274:	462b      	mov	r3, r5
 8017276:	4620      	mov	r0, r4
 8017278:	4629      	mov	r1, r5
 801727a:	f7e9 fc77 	bl	8000b6c <__aeabi_dcmpun>
 801727e:	4607      	mov	r7, r0
 8017280:	bb70      	cbnz	r0, 80172e0 <asin+0x90>
 8017282:	ec45 4b10 	vmov	d0, r4, r5
 8017286:	f002 f8b7 	bl	80193f8 <fabs>
 801728a:	2200      	movs	r2, #0
 801728c:	4b19      	ldr	r3, [pc, #100]	; (80172f4 <asin+0xa4>)
 801728e:	ec51 0b10 	vmov	r0, r1, d0
 8017292:	f7e9 fc61 	bl	8000b58 <__aeabi_dcmpgt>
 8017296:	b318      	cbz	r0, 80172e0 <asin+0x90>
 8017298:	2301      	movs	r3, #1
 801729a:	9300      	str	r3, [sp, #0]
 801729c:	4816      	ldr	r0, [pc, #88]	; (80172f8 <asin+0xa8>)
 801729e:	4b17      	ldr	r3, [pc, #92]	; (80172fc <asin+0xac>)
 80172a0:	9301      	str	r3, [sp, #4]
 80172a2:	9708      	str	r7, [sp, #32]
 80172a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80172a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80172ac:	f002 f938 	bl	8019520 <nan>
 80172b0:	f996 3000 	ldrsb.w	r3, [r6]
 80172b4:	2b02      	cmp	r3, #2
 80172b6:	ed8d 0b06 	vstr	d0, [sp, #24]
 80172ba:	d104      	bne.n	80172c6 <asin+0x76>
 80172bc:	f7fd f948 	bl	8014550 <__errno>
 80172c0:	2321      	movs	r3, #33	; 0x21
 80172c2:	6003      	str	r3, [r0, #0]
 80172c4:	e004      	b.n	80172d0 <asin+0x80>
 80172c6:	4668      	mov	r0, sp
 80172c8:	f002 f926 	bl	8019518 <matherr>
 80172cc:	2800      	cmp	r0, #0
 80172ce:	d0f5      	beq.n	80172bc <asin+0x6c>
 80172d0:	9b08      	ldr	r3, [sp, #32]
 80172d2:	b11b      	cbz	r3, 80172dc <asin+0x8c>
 80172d4:	f7fd f93c 	bl	8014550 <__errno>
 80172d8:	9b08      	ldr	r3, [sp, #32]
 80172da:	6003      	str	r3, [r0, #0]
 80172dc:	ed9d 8b06 	vldr	d8, [sp, #24]
 80172e0:	eeb0 0a48 	vmov.f32	s0, s16
 80172e4:	eef0 0a68 	vmov.f32	s1, s17
 80172e8:	b00b      	add	sp, #44	; 0x2c
 80172ea:	ecbd 8b02 	vpop	{d8}
 80172ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172f0:	20000604 	.word	0x20000604
 80172f4:	3ff00000 	.word	0x3ff00000
 80172f8:	0801a013 	.word	0x0801a013
 80172fc:	0801a2d7 	.word	0x0801a2d7

08017300 <atan2>:
 8017300:	f000 bbce 	b.w	8017aa0 <__ieee754_atan2>

08017304 <sqrt>:
 8017304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017308:	ed2d 8b02 	vpush	{d8}
 801730c:	b08b      	sub	sp, #44	; 0x2c
 801730e:	ec55 4b10 	vmov	r4, r5, d0
 8017312:	f000 fe97 	bl	8018044 <__ieee754_sqrt>
 8017316:	4b26      	ldr	r3, [pc, #152]	; (80173b0 <sqrt+0xac>)
 8017318:	eeb0 8a40 	vmov.f32	s16, s0
 801731c:	eef0 8a60 	vmov.f32	s17, s1
 8017320:	f993 6000 	ldrsb.w	r6, [r3]
 8017324:	1c73      	adds	r3, r6, #1
 8017326:	d02a      	beq.n	801737e <sqrt+0x7a>
 8017328:	4622      	mov	r2, r4
 801732a:	462b      	mov	r3, r5
 801732c:	4620      	mov	r0, r4
 801732e:	4629      	mov	r1, r5
 8017330:	f7e9 fc1c 	bl	8000b6c <__aeabi_dcmpun>
 8017334:	4607      	mov	r7, r0
 8017336:	bb10      	cbnz	r0, 801737e <sqrt+0x7a>
 8017338:	f04f 0800 	mov.w	r8, #0
 801733c:	f04f 0900 	mov.w	r9, #0
 8017340:	4642      	mov	r2, r8
 8017342:	464b      	mov	r3, r9
 8017344:	4620      	mov	r0, r4
 8017346:	4629      	mov	r1, r5
 8017348:	f7e9 fbe8 	bl	8000b1c <__aeabi_dcmplt>
 801734c:	b1b8      	cbz	r0, 801737e <sqrt+0x7a>
 801734e:	2301      	movs	r3, #1
 8017350:	9300      	str	r3, [sp, #0]
 8017352:	4b18      	ldr	r3, [pc, #96]	; (80173b4 <sqrt+0xb0>)
 8017354:	9301      	str	r3, [sp, #4]
 8017356:	9708      	str	r7, [sp, #32]
 8017358:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801735c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8017360:	b9b6      	cbnz	r6, 8017390 <sqrt+0x8c>
 8017362:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8017366:	4668      	mov	r0, sp
 8017368:	f002 f8d6 	bl	8019518 <matherr>
 801736c:	b1d0      	cbz	r0, 80173a4 <sqrt+0xa0>
 801736e:	9b08      	ldr	r3, [sp, #32]
 8017370:	b11b      	cbz	r3, 801737a <sqrt+0x76>
 8017372:	f7fd f8ed 	bl	8014550 <__errno>
 8017376:	9b08      	ldr	r3, [sp, #32]
 8017378:	6003      	str	r3, [r0, #0]
 801737a:	ed9d 8b06 	vldr	d8, [sp, #24]
 801737e:	eeb0 0a48 	vmov.f32	s0, s16
 8017382:	eef0 0a68 	vmov.f32	s1, s17
 8017386:	b00b      	add	sp, #44	; 0x2c
 8017388:	ecbd 8b02 	vpop	{d8}
 801738c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017390:	4642      	mov	r2, r8
 8017392:	464b      	mov	r3, r9
 8017394:	4640      	mov	r0, r8
 8017396:	4649      	mov	r1, r9
 8017398:	f7e9 fa78 	bl	800088c <__aeabi_ddiv>
 801739c:	2e02      	cmp	r6, #2
 801739e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80173a2:	d1e0      	bne.n	8017366 <sqrt+0x62>
 80173a4:	f7fd f8d4 	bl	8014550 <__errno>
 80173a8:	2321      	movs	r3, #33	; 0x21
 80173aa:	6003      	str	r3, [r0, #0]
 80173ac:	e7df      	b.n	801736e <sqrt+0x6a>
 80173ae:	bf00      	nop
 80173b0:	20000604 	.word	0x20000604
 80173b4:	0801a2dc 	.word	0x0801a2dc

080173b8 <powf>:
 80173b8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80173bc:	ed2d 8b04 	vpush	{d8-d9}
 80173c0:	4ca7      	ldr	r4, [pc, #668]	; (8017660 <powf+0x2a8>)
 80173c2:	b08a      	sub	sp, #40	; 0x28
 80173c4:	eef0 8a40 	vmov.f32	s17, s0
 80173c8:	eeb0 8a60 	vmov.f32	s16, s1
 80173cc:	f000 feea 	bl	80181a4 <__ieee754_powf>
 80173d0:	f994 5000 	ldrsb.w	r5, [r4]
 80173d4:	1c6b      	adds	r3, r5, #1
 80173d6:	eeb0 9a40 	vmov.f32	s18, s0
 80173da:	4626      	mov	r6, r4
 80173dc:	d05f      	beq.n	801749e <powf+0xe6>
 80173de:	eeb4 8a48 	vcmp.f32	s16, s16
 80173e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173e6:	d65a      	bvs.n	801749e <powf+0xe6>
 80173e8:	eef4 8a68 	vcmp.f32	s17, s17
 80173ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173f0:	d721      	bvc.n	8017436 <powf+0x7e>
 80173f2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80173f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173fa:	d150      	bne.n	801749e <powf+0xe6>
 80173fc:	2301      	movs	r3, #1
 80173fe:	9300      	str	r3, [sp, #0]
 8017400:	4b98      	ldr	r3, [pc, #608]	; (8017664 <powf+0x2ac>)
 8017402:	9301      	str	r3, [sp, #4]
 8017404:	ee18 0a90 	vmov	r0, s17
 8017408:	2300      	movs	r3, #0
 801740a:	9308      	str	r3, [sp, #32]
 801740c:	f7e9 f8bc 	bl	8000588 <__aeabi_f2d>
 8017410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017414:	ee18 0a10 	vmov	r0, s16
 8017418:	f7e9 f8b6 	bl	8000588 <__aeabi_f2d>
 801741c:	4b92      	ldr	r3, [pc, #584]	; (8017668 <powf+0x2b0>)
 801741e:	2200      	movs	r2, #0
 8017420:	2d02      	cmp	r5, #2
 8017422:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017426:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801742a:	d032      	beq.n	8017492 <powf+0xda>
 801742c:	4668      	mov	r0, sp
 801742e:	f002 f873 	bl	8019518 <matherr>
 8017432:	bb40      	cbnz	r0, 8017486 <powf+0xce>
 8017434:	e065      	b.n	8017502 <powf+0x14a>
 8017436:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801766c <powf+0x2b4>
 801743a:	eef4 8a69 	vcmp.f32	s17, s19
 801743e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017442:	d163      	bne.n	801750c <powf+0x154>
 8017444:	eeb4 8a69 	vcmp.f32	s16, s19
 8017448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801744c:	d12e      	bne.n	80174ac <powf+0xf4>
 801744e:	2301      	movs	r3, #1
 8017450:	9300      	str	r3, [sp, #0]
 8017452:	4b84      	ldr	r3, [pc, #528]	; (8017664 <powf+0x2ac>)
 8017454:	9301      	str	r3, [sp, #4]
 8017456:	ee18 0a90 	vmov	r0, s17
 801745a:	2300      	movs	r3, #0
 801745c:	9308      	str	r3, [sp, #32]
 801745e:	f7e9 f893 	bl	8000588 <__aeabi_f2d>
 8017462:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017466:	ee18 0a10 	vmov	r0, s16
 801746a:	f7e9 f88d 	bl	8000588 <__aeabi_f2d>
 801746e:	2200      	movs	r2, #0
 8017470:	2300      	movs	r3, #0
 8017472:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017476:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801747a:	2d00      	cmp	r5, #0
 801747c:	d0d6      	beq.n	801742c <powf+0x74>
 801747e:	4b7a      	ldr	r3, [pc, #488]	; (8017668 <powf+0x2b0>)
 8017480:	2200      	movs	r2, #0
 8017482:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017486:	9b08      	ldr	r3, [sp, #32]
 8017488:	b11b      	cbz	r3, 8017492 <powf+0xda>
 801748a:	f7fd f861 	bl	8014550 <__errno>
 801748e:	9b08      	ldr	r3, [sp, #32]
 8017490:	6003      	str	r3, [r0, #0]
 8017492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017496:	f7e9 fbc7 	bl	8000c28 <__aeabi_d2f>
 801749a:	ee09 0a10 	vmov	s18, r0
 801749e:	eeb0 0a49 	vmov.f32	s0, s18
 80174a2:	b00a      	add	sp, #40	; 0x28
 80174a4:	ecbd 8b04 	vpop	{d8-d9}
 80174a8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80174ac:	eeb0 0a48 	vmov.f32	s0, s16
 80174b0:	f002 f8bb 	bl	801962a <finitef>
 80174b4:	2800      	cmp	r0, #0
 80174b6:	d0f2      	beq.n	801749e <powf+0xe6>
 80174b8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80174bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174c0:	d5ed      	bpl.n	801749e <powf+0xe6>
 80174c2:	2301      	movs	r3, #1
 80174c4:	9300      	str	r3, [sp, #0]
 80174c6:	4b67      	ldr	r3, [pc, #412]	; (8017664 <powf+0x2ac>)
 80174c8:	9301      	str	r3, [sp, #4]
 80174ca:	ee18 0a90 	vmov	r0, s17
 80174ce:	2300      	movs	r3, #0
 80174d0:	9308      	str	r3, [sp, #32]
 80174d2:	f7e9 f859 	bl	8000588 <__aeabi_f2d>
 80174d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80174da:	ee18 0a10 	vmov	r0, s16
 80174de:	f7e9 f853 	bl	8000588 <__aeabi_f2d>
 80174e2:	f994 3000 	ldrsb.w	r3, [r4]
 80174e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80174ea:	b923      	cbnz	r3, 80174f6 <powf+0x13e>
 80174ec:	2200      	movs	r2, #0
 80174ee:	2300      	movs	r3, #0
 80174f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80174f4:	e79a      	b.n	801742c <powf+0x74>
 80174f6:	495e      	ldr	r1, [pc, #376]	; (8017670 <powf+0x2b8>)
 80174f8:	2000      	movs	r0, #0
 80174fa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80174fe:	2b02      	cmp	r3, #2
 8017500:	d194      	bne.n	801742c <powf+0x74>
 8017502:	f7fd f825 	bl	8014550 <__errno>
 8017506:	2321      	movs	r3, #33	; 0x21
 8017508:	6003      	str	r3, [r0, #0]
 801750a:	e7bc      	b.n	8017486 <powf+0xce>
 801750c:	f002 f88d 	bl	801962a <finitef>
 8017510:	4605      	mov	r5, r0
 8017512:	2800      	cmp	r0, #0
 8017514:	d173      	bne.n	80175fe <powf+0x246>
 8017516:	eeb0 0a68 	vmov.f32	s0, s17
 801751a:	f002 f886 	bl	801962a <finitef>
 801751e:	2800      	cmp	r0, #0
 8017520:	d06d      	beq.n	80175fe <powf+0x246>
 8017522:	eeb0 0a48 	vmov.f32	s0, s16
 8017526:	f002 f880 	bl	801962a <finitef>
 801752a:	2800      	cmp	r0, #0
 801752c:	d067      	beq.n	80175fe <powf+0x246>
 801752e:	ee18 0a90 	vmov	r0, s17
 8017532:	f7e9 f829 	bl	8000588 <__aeabi_f2d>
 8017536:	4680      	mov	r8, r0
 8017538:	ee18 0a10 	vmov	r0, s16
 801753c:	4689      	mov	r9, r1
 801753e:	f7e9 f823 	bl	8000588 <__aeabi_f2d>
 8017542:	eeb4 9a49 	vcmp.f32	s18, s18
 8017546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801754a:	f994 4000 	ldrsb.w	r4, [r4]
 801754e:	4b45      	ldr	r3, [pc, #276]	; (8017664 <powf+0x2ac>)
 8017550:	d713      	bvc.n	801757a <powf+0x1c2>
 8017552:	2201      	movs	r2, #1
 8017554:	e9cd 2300 	strd	r2, r3, [sp]
 8017558:	9508      	str	r5, [sp, #32]
 801755a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801755e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017562:	2c00      	cmp	r4, #0
 8017564:	d0c2      	beq.n	80174ec <powf+0x134>
 8017566:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801756a:	ee17 0a90 	vmov	r0, s15
 801756e:	f7e9 f80b 	bl	8000588 <__aeabi_f2d>
 8017572:	2c02      	cmp	r4, #2
 8017574:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017578:	e7c2      	b.n	8017500 <powf+0x148>
 801757a:	2203      	movs	r2, #3
 801757c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8017580:	e9cd 2300 	strd	r2, r3, [sp]
 8017584:	9508      	str	r5, [sp, #32]
 8017586:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801758a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801758e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017592:	b9fc      	cbnz	r4, 80175d4 <powf+0x21c>
 8017594:	4b37      	ldr	r3, [pc, #220]	; (8017674 <powf+0x2bc>)
 8017596:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801759a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801759e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80175a6:	d553      	bpl.n	8017650 <powf+0x298>
 80175a8:	eeb0 0a48 	vmov.f32	s0, s16
 80175ac:	f002 f84e 	bl	801964c <rintf>
 80175b0:	eeb4 0a48 	vcmp.f32	s0, s16
 80175b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175b8:	d004      	beq.n	80175c4 <powf+0x20c>
 80175ba:	4b2f      	ldr	r3, [pc, #188]	; (8017678 <powf+0x2c0>)
 80175bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80175c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80175c4:	f996 3000 	ldrsb.w	r3, [r6]
 80175c8:	2b02      	cmp	r3, #2
 80175ca:	d141      	bne.n	8017650 <powf+0x298>
 80175cc:	f7fc ffc0 	bl	8014550 <__errno>
 80175d0:	2322      	movs	r3, #34	; 0x22
 80175d2:	e799      	b.n	8017508 <powf+0x150>
 80175d4:	4b29      	ldr	r3, [pc, #164]	; (801767c <powf+0x2c4>)
 80175d6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80175da:	2200      	movs	r2, #0
 80175dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80175e4:	d5ee      	bpl.n	80175c4 <powf+0x20c>
 80175e6:	eeb0 0a48 	vmov.f32	s0, s16
 80175ea:	f002 f82f 	bl	801964c <rintf>
 80175ee:	eeb4 0a48 	vcmp.f32	s0, s16
 80175f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80175f6:	d0e5      	beq.n	80175c4 <powf+0x20c>
 80175f8:	2200      	movs	r2, #0
 80175fa:	4b1d      	ldr	r3, [pc, #116]	; (8017670 <powf+0x2b8>)
 80175fc:	e7e0      	b.n	80175c0 <powf+0x208>
 80175fe:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017606:	f47f af4a 	bne.w	801749e <powf+0xe6>
 801760a:	eeb0 0a68 	vmov.f32	s0, s17
 801760e:	f002 f80c 	bl	801962a <finitef>
 8017612:	2800      	cmp	r0, #0
 8017614:	f43f af43 	beq.w	801749e <powf+0xe6>
 8017618:	eeb0 0a48 	vmov.f32	s0, s16
 801761c:	f002 f805 	bl	801962a <finitef>
 8017620:	2800      	cmp	r0, #0
 8017622:	f43f af3c 	beq.w	801749e <powf+0xe6>
 8017626:	2304      	movs	r3, #4
 8017628:	9300      	str	r3, [sp, #0]
 801762a:	4b0e      	ldr	r3, [pc, #56]	; (8017664 <powf+0x2ac>)
 801762c:	9301      	str	r3, [sp, #4]
 801762e:	ee18 0a90 	vmov	r0, s17
 8017632:	2300      	movs	r3, #0
 8017634:	9308      	str	r3, [sp, #32]
 8017636:	f7e8 ffa7 	bl	8000588 <__aeabi_f2d>
 801763a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801763e:	ee18 0a10 	vmov	r0, s16
 8017642:	f7e8 ffa1 	bl	8000588 <__aeabi_f2d>
 8017646:	2200      	movs	r2, #0
 8017648:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801764c:	2300      	movs	r3, #0
 801764e:	e7b7      	b.n	80175c0 <powf+0x208>
 8017650:	4668      	mov	r0, sp
 8017652:	f001 ff61 	bl	8019518 <matherr>
 8017656:	2800      	cmp	r0, #0
 8017658:	f47f af15 	bne.w	8017486 <powf+0xce>
 801765c:	e7b6      	b.n	80175cc <powf+0x214>
 801765e:	bf00      	nop
 8017660:	20000604 	.word	0x20000604
 8017664:	0801a2e1 	.word	0x0801a2e1
 8017668:	3ff00000 	.word	0x3ff00000
 801766c:	00000000 	.word	0x00000000
 8017670:	fff00000 	.word	0xfff00000
 8017674:	47efffff 	.word	0x47efffff
 8017678:	c7efffff 	.word	0xc7efffff
 801767c:	7ff00000 	.word	0x7ff00000

08017680 <__ieee754_asin>:
 8017680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017684:	ec55 4b10 	vmov	r4, r5, d0
 8017688:	4bcb      	ldr	r3, [pc, #812]	; (80179b8 <__ieee754_asin+0x338>)
 801768a:	b087      	sub	sp, #28
 801768c:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8017690:	429f      	cmp	r7, r3
 8017692:	9501      	str	r5, [sp, #4]
 8017694:	dd31      	ble.n	80176fa <__ieee754_asin+0x7a>
 8017696:	f107 4740 	add.w	r7, r7, #3221225472	; 0xc0000000
 801769a:	ee10 3a10 	vmov	r3, s0
 801769e:	f507 1780 	add.w	r7, r7, #1048576	; 0x100000
 80176a2:	433b      	orrs	r3, r7
 80176a4:	d117      	bne.n	80176d6 <__ieee754_asin+0x56>
 80176a6:	a3aa      	add	r3, pc, #680	; (adr r3, 8017950 <__ieee754_asin+0x2d0>)
 80176a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176ac:	ee10 0a10 	vmov	r0, s0
 80176b0:	4629      	mov	r1, r5
 80176b2:	f7e8 ffc1 	bl	8000638 <__aeabi_dmul>
 80176b6:	a3a8      	add	r3, pc, #672	; (adr r3, 8017958 <__ieee754_asin+0x2d8>)
 80176b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176bc:	4606      	mov	r6, r0
 80176be:	460f      	mov	r7, r1
 80176c0:	4620      	mov	r0, r4
 80176c2:	4629      	mov	r1, r5
 80176c4:	f7e8 ffb8 	bl	8000638 <__aeabi_dmul>
 80176c8:	4602      	mov	r2, r0
 80176ca:	460b      	mov	r3, r1
 80176cc:	4630      	mov	r0, r6
 80176ce:	4639      	mov	r1, r7
 80176d0:	f7e8 fdfc 	bl	80002cc <__adddf3>
 80176d4:	e00a      	b.n	80176ec <__ieee754_asin+0x6c>
 80176d6:	ee10 2a10 	vmov	r2, s0
 80176da:	462b      	mov	r3, r5
 80176dc:	4620      	mov	r0, r4
 80176de:	4629      	mov	r1, r5
 80176e0:	f7e8 fdf2 	bl	80002c8 <__aeabi_dsub>
 80176e4:	4602      	mov	r2, r0
 80176e6:	460b      	mov	r3, r1
 80176e8:	f7e9 f8d0 	bl	800088c <__aeabi_ddiv>
 80176ec:	4604      	mov	r4, r0
 80176ee:	460d      	mov	r5, r1
 80176f0:	ec45 4b10 	vmov	d0, r4, r5
 80176f4:	b007      	add	sp, #28
 80176f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176fa:	4bb0      	ldr	r3, [pc, #704]	; (80179bc <__ieee754_asin+0x33c>)
 80176fc:	429f      	cmp	r7, r3
 80176fe:	dc11      	bgt.n	8017724 <__ieee754_asin+0xa4>
 8017700:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8017704:	f280 80ae 	bge.w	8017864 <__ieee754_asin+0x1e4>
 8017708:	a395      	add	r3, pc, #596	; (adr r3, 8017960 <__ieee754_asin+0x2e0>)
 801770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801770e:	ee10 0a10 	vmov	r0, s0
 8017712:	4629      	mov	r1, r5
 8017714:	f7e8 fdda 	bl	80002cc <__adddf3>
 8017718:	2200      	movs	r2, #0
 801771a:	4ba9      	ldr	r3, [pc, #676]	; (80179c0 <__ieee754_asin+0x340>)
 801771c:	f7e9 fa1c 	bl	8000b58 <__aeabi_dcmpgt>
 8017720:	2800      	cmp	r0, #0
 8017722:	d1e5      	bne.n	80176f0 <__ieee754_asin+0x70>
 8017724:	ec45 4b10 	vmov	d0, r4, r5
 8017728:	f001 fe66 	bl	80193f8 <fabs>
 801772c:	2000      	movs	r0, #0
 801772e:	ec53 2b10 	vmov	r2, r3, d0
 8017732:	49a3      	ldr	r1, [pc, #652]	; (80179c0 <__ieee754_asin+0x340>)
 8017734:	f7e8 fdc8 	bl	80002c8 <__aeabi_dsub>
 8017738:	2200      	movs	r2, #0
 801773a:	4ba2      	ldr	r3, [pc, #648]	; (80179c4 <__ieee754_asin+0x344>)
 801773c:	f7e8 ff7c 	bl	8000638 <__aeabi_dmul>
 8017740:	a389      	add	r3, pc, #548	; (adr r3, 8017968 <__ieee754_asin+0x2e8>)
 8017742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017746:	4604      	mov	r4, r0
 8017748:	460d      	mov	r5, r1
 801774a:	f7e8 ff75 	bl	8000638 <__aeabi_dmul>
 801774e:	a388      	add	r3, pc, #544	; (adr r3, 8017970 <__ieee754_asin+0x2f0>)
 8017750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017754:	f7e8 fdba 	bl	80002cc <__adddf3>
 8017758:	4622      	mov	r2, r4
 801775a:	462b      	mov	r3, r5
 801775c:	f7e8 ff6c 	bl	8000638 <__aeabi_dmul>
 8017760:	a385      	add	r3, pc, #532	; (adr r3, 8017978 <__ieee754_asin+0x2f8>)
 8017762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017766:	f7e8 fdaf 	bl	80002c8 <__aeabi_dsub>
 801776a:	4622      	mov	r2, r4
 801776c:	462b      	mov	r3, r5
 801776e:	f7e8 ff63 	bl	8000638 <__aeabi_dmul>
 8017772:	a383      	add	r3, pc, #524	; (adr r3, 8017980 <__ieee754_asin+0x300>)
 8017774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017778:	f7e8 fda8 	bl	80002cc <__adddf3>
 801777c:	4622      	mov	r2, r4
 801777e:	462b      	mov	r3, r5
 8017780:	f7e8 ff5a 	bl	8000638 <__aeabi_dmul>
 8017784:	a380      	add	r3, pc, #512	; (adr r3, 8017988 <__ieee754_asin+0x308>)
 8017786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801778a:	f7e8 fd9d 	bl	80002c8 <__aeabi_dsub>
 801778e:	4622      	mov	r2, r4
 8017790:	462b      	mov	r3, r5
 8017792:	f7e8 ff51 	bl	8000638 <__aeabi_dmul>
 8017796:	a37e      	add	r3, pc, #504	; (adr r3, 8017990 <__ieee754_asin+0x310>)
 8017798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801779c:	f7e8 fd96 	bl	80002cc <__adddf3>
 80177a0:	4622      	mov	r2, r4
 80177a2:	462b      	mov	r3, r5
 80177a4:	f7e8 ff48 	bl	8000638 <__aeabi_dmul>
 80177a8:	a37b      	add	r3, pc, #492	; (adr r3, 8017998 <__ieee754_asin+0x318>)
 80177aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177ae:	4680      	mov	r8, r0
 80177b0:	4689      	mov	r9, r1
 80177b2:	4620      	mov	r0, r4
 80177b4:	4629      	mov	r1, r5
 80177b6:	f7e8 ff3f 	bl	8000638 <__aeabi_dmul>
 80177ba:	a379      	add	r3, pc, #484	; (adr r3, 80179a0 <__ieee754_asin+0x320>)
 80177bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177c0:	f7e8 fd82 	bl	80002c8 <__aeabi_dsub>
 80177c4:	4622      	mov	r2, r4
 80177c6:	462b      	mov	r3, r5
 80177c8:	f7e8 ff36 	bl	8000638 <__aeabi_dmul>
 80177cc:	a376      	add	r3, pc, #472	; (adr r3, 80179a8 <__ieee754_asin+0x328>)
 80177ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177d2:	f7e8 fd7b 	bl	80002cc <__adddf3>
 80177d6:	4622      	mov	r2, r4
 80177d8:	462b      	mov	r3, r5
 80177da:	f7e8 ff2d 	bl	8000638 <__aeabi_dmul>
 80177de:	a374      	add	r3, pc, #464	; (adr r3, 80179b0 <__ieee754_asin+0x330>)
 80177e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80177e4:	f7e8 fd70 	bl	80002c8 <__aeabi_dsub>
 80177e8:	4622      	mov	r2, r4
 80177ea:	462b      	mov	r3, r5
 80177ec:	f7e8 ff24 	bl	8000638 <__aeabi_dmul>
 80177f0:	4b73      	ldr	r3, [pc, #460]	; (80179c0 <__ieee754_asin+0x340>)
 80177f2:	2200      	movs	r2, #0
 80177f4:	f7e8 fd6a 	bl	80002cc <__adddf3>
 80177f8:	ec45 4b10 	vmov	d0, r4, r5
 80177fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017800:	f000 fc20 	bl	8018044 <__ieee754_sqrt>
 8017804:	4b70      	ldr	r3, [pc, #448]	; (80179c8 <__ieee754_asin+0x348>)
 8017806:	429f      	cmp	r7, r3
 8017808:	ec5b ab10 	vmov	sl, fp, d0
 801780c:	f340 80de 	ble.w	80179cc <__ieee754_asin+0x34c>
 8017810:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017814:	4640      	mov	r0, r8
 8017816:	4649      	mov	r1, r9
 8017818:	f7e9 f838 	bl	800088c <__aeabi_ddiv>
 801781c:	4652      	mov	r2, sl
 801781e:	465b      	mov	r3, fp
 8017820:	f7e8 ff0a 	bl	8000638 <__aeabi_dmul>
 8017824:	4652      	mov	r2, sl
 8017826:	465b      	mov	r3, fp
 8017828:	f7e8 fd50 	bl	80002cc <__adddf3>
 801782c:	4602      	mov	r2, r0
 801782e:	460b      	mov	r3, r1
 8017830:	f7e8 fd4c 	bl	80002cc <__adddf3>
 8017834:	a348      	add	r3, pc, #288	; (adr r3, 8017958 <__ieee754_asin+0x2d8>)
 8017836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801783a:	f7e8 fd45 	bl	80002c8 <__aeabi_dsub>
 801783e:	4602      	mov	r2, r0
 8017840:	460b      	mov	r3, r1
 8017842:	a143      	add	r1, pc, #268	; (adr r1, 8017950 <__ieee754_asin+0x2d0>)
 8017844:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017848:	f7e8 fd3e 	bl	80002c8 <__aeabi_dsub>
 801784c:	9b01      	ldr	r3, [sp, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	bfdc      	itt	le
 8017852:	4602      	movle	r2, r0
 8017854:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8017858:	4604      	mov	r4, r0
 801785a:	460d      	mov	r5, r1
 801785c:	bfdc      	itt	le
 801785e:	4614      	movle	r4, r2
 8017860:	461d      	movle	r5, r3
 8017862:	e745      	b.n	80176f0 <__ieee754_asin+0x70>
 8017864:	ee10 2a10 	vmov	r2, s0
 8017868:	ee10 0a10 	vmov	r0, s0
 801786c:	462b      	mov	r3, r5
 801786e:	4629      	mov	r1, r5
 8017870:	f7e8 fee2 	bl	8000638 <__aeabi_dmul>
 8017874:	a33c      	add	r3, pc, #240	; (adr r3, 8017968 <__ieee754_asin+0x2e8>)
 8017876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801787a:	4606      	mov	r6, r0
 801787c:	460f      	mov	r7, r1
 801787e:	f7e8 fedb 	bl	8000638 <__aeabi_dmul>
 8017882:	a33b      	add	r3, pc, #236	; (adr r3, 8017970 <__ieee754_asin+0x2f0>)
 8017884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017888:	f7e8 fd20 	bl	80002cc <__adddf3>
 801788c:	4632      	mov	r2, r6
 801788e:	463b      	mov	r3, r7
 8017890:	f7e8 fed2 	bl	8000638 <__aeabi_dmul>
 8017894:	a338      	add	r3, pc, #224	; (adr r3, 8017978 <__ieee754_asin+0x2f8>)
 8017896:	e9d3 2300 	ldrd	r2, r3, [r3]
 801789a:	f7e8 fd15 	bl	80002c8 <__aeabi_dsub>
 801789e:	4632      	mov	r2, r6
 80178a0:	463b      	mov	r3, r7
 80178a2:	f7e8 fec9 	bl	8000638 <__aeabi_dmul>
 80178a6:	a336      	add	r3, pc, #216	; (adr r3, 8017980 <__ieee754_asin+0x300>)
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	f7e8 fd0e 	bl	80002cc <__adddf3>
 80178b0:	4632      	mov	r2, r6
 80178b2:	463b      	mov	r3, r7
 80178b4:	f7e8 fec0 	bl	8000638 <__aeabi_dmul>
 80178b8:	a333      	add	r3, pc, #204	; (adr r3, 8017988 <__ieee754_asin+0x308>)
 80178ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178be:	f7e8 fd03 	bl	80002c8 <__aeabi_dsub>
 80178c2:	4632      	mov	r2, r6
 80178c4:	463b      	mov	r3, r7
 80178c6:	f7e8 feb7 	bl	8000638 <__aeabi_dmul>
 80178ca:	a331      	add	r3, pc, #196	; (adr r3, 8017990 <__ieee754_asin+0x310>)
 80178cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178d0:	f7e8 fcfc 	bl	80002cc <__adddf3>
 80178d4:	4632      	mov	r2, r6
 80178d6:	463b      	mov	r3, r7
 80178d8:	f7e8 feae 	bl	8000638 <__aeabi_dmul>
 80178dc:	a32e      	add	r3, pc, #184	; (adr r3, 8017998 <__ieee754_asin+0x318>)
 80178de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178e2:	4680      	mov	r8, r0
 80178e4:	4689      	mov	r9, r1
 80178e6:	4630      	mov	r0, r6
 80178e8:	4639      	mov	r1, r7
 80178ea:	f7e8 fea5 	bl	8000638 <__aeabi_dmul>
 80178ee:	a32c      	add	r3, pc, #176	; (adr r3, 80179a0 <__ieee754_asin+0x320>)
 80178f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178f4:	f7e8 fce8 	bl	80002c8 <__aeabi_dsub>
 80178f8:	4632      	mov	r2, r6
 80178fa:	463b      	mov	r3, r7
 80178fc:	f7e8 fe9c 	bl	8000638 <__aeabi_dmul>
 8017900:	a329      	add	r3, pc, #164	; (adr r3, 80179a8 <__ieee754_asin+0x328>)
 8017902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017906:	f7e8 fce1 	bl	80002cc <__adddf3>
 801790a:	4632      	mov	r2, r6
 801790c:	463b      	mov	r3, r7
 801790e:	f7e8 fe93 	bl	8000638 <__aeabi_dmul>
 8017912:	a327      	add	r3, pc, #156	; (adr r3, 80179b0 <__ieee754_asin+0x330>)
 8017914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017918:	f7e8 fcd6 	bl	80002c8 <__aeabi_dsub>
 801791c:	4632      	mov	r2, r6
 801791e:	463b      	mov	r3, r7
 8017920:	f7e8 fe8a 	bl	8000638 <__aeabi_dmul>
 8017924:	2200      	movs	r2, #0
 8017926:	4b26      	ldr	r3, [pc, #152]	; (80179c0 <__ieee754_asin+0x340>)
 8017928:	f7e8 fcd0 	bl	80002cc <__adddf3>
 801792c:	4602      	mov	r2, r0
 801792e:	460b      	mov	r3, r1
 8017930:	4640      	mov	r0, r8
 8017932:	4649      	mov	r1, r9
 8017934:	f7e8 ffaa 	bl	800088c <__aeabi_ddiv>
 8017938:	4622      	mov	r2, r4
 801793a:	462b      	mov	r3, r5
 801793c:	f7e8 fe7c 	bl	8000638 <__aeabi_dmul>
 8017940:	4602      	mov	r2, r0
 8017942:	460b      	mov	r3, r1
 8017944:	4620      	mov	r0, r4
 8017946:	4629      	mov	r1, r5
 8017948:	e6c2      	b.n	80176d0 <__ieee754_asin+0x50>
 801794a:	bf00      	nop
 801794c:	f3af 8000 	nop.w
 8017950:	54442d18 	.word	0x54442d18
 8017954:	3ff921fb 	.word	0x3ff921fb
 8017958:	33145c07 	.word	0x33145c07
 801795c:	3c91a626 	.word	0x3c91a626
 8017960:	8800759c 	.word	0x8800759c
 8017964:	7e37e43c 	.word	0x7e37e43c
 8017968:	0dfdf709 	.word	0x0dfdf709
 801796c:	3f023de1 	.word	0x3f023de1
 8017970:	7501b288 	.word	0x7501b288
 8017974:	3f49efe0 	.word	0x3f49efe0
 8017978:	b5688f3b 	.word	0xb5688f3b
 801797c:	3fa48228 	.word	0x3fa48228
 8017980:	0e884455 	.word	0x0e884455
 8017984:	3fc9c155 	.word	0x3fc9c155
 8017988:	03eb6f7d 	.word	0x03eb6f7d
 801798c:	3fd4d612 	.word	0x3fd4d612
 8017990:	55555555 	.word	0x55555555
 8017994:	3fc55555 	.word	0x3fc55555
 8017998:	b12e9282 	.word	0xb12e9282
 801799c:	3fb3b8c5 	.word	0x3fb3b8c5
 80179a0:	1b8d0159 	.word	0x1b8d0159
 80179a4:	3fe6066c 	.word	0x3fe6066c
 80179a8:	9c598ac8 	.word	0x9c598ac8
 80179ac:	40002ae5 	.word	0x40002ae5
 80179b0:	1c8a2d4b 	.word	0x1c8a2d4b
 80179b4:	40033a27 	.word	0x40033a27
 80179b8:	3fefffff 	.word	0x3fefffff
 80179bc:	3fdfffff 	.word	0x3fdfffff
 80179c0:	3ff00000 	.word	0x3ff00000
 80179c4:	3fe00000 	.word	0x3fe00000
 80179c8:	3fef3332 	.word	0x3fef3332
 80179cc:	ee10 2a10 	vmov	r2, s0
 80179d0:	ee10 0a10 	vmov	r0, s0
 80179d4:	465b      	mov	r3, fp
 80179d6:	4659      	mov	r1, fp
 80179d8:	f7e8 fc78 	bl	80002cc <__adddf3>
 80179dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80179e4:	4640      	mov	r0, r8
 80179e6:	4649      	mov	r1, r9
 80179e8:	f7e8 ff50 	bl	800088c <__aeabi_ddiv>
 80179ec:	4602      	mov	r2, r0
 80179ee:	460b      	mov	r3, r1
 80179f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80179f4:	f7e8 fe20 	bl	8000638 <__aeabi_dmul>
 80179f8:	2600      	movs	r6, #0
 80179fa:	4680      	mov	r8, r0
 80179fc:	4689      	mov	r9, r1
 80179fe:	4632      	mov	r2, r6
 8017a00:	465b      	mov	r3, fp
 8017a02:	4630      	mov	r0, r6
 8017a04:	4659      	mov	r1, fp
 8017a06:	f7e8 fe17 	bl	8000638 <__aeabi_dmul>
 8017a0a:	4602      	mov	r2, r0
 8017a0c:	460b      	mov	r3, r1
 8017a0e:	4620      	mov	r0, r4
 8017a10:	4629      	mov	r1, r5
 8017a12:	f7e8 fc59 	bl	80002c8 <__aeabi_dsub>
 8017a16:	4632      	mov	r2, r6
 8017a18:	4604      	mov	r4, r0
 8017a1a:	460d      	mov	r5, r1
 8017a1c:	465b      	mov	r3, fp
 8017a1e:	4650      	mov	r0, sl
 8017a20:	4659      	mov	r1, fp
 8017a22:	f7e8 fc53 	bl	80002cc <__adddf3>
 8017a26:	4602      	mov	r2, r0
 8017a28:	460b      	mov	r3, r1
 8017a2a:	4620      	mov	r0, r4
 8017a2c:	4629      	mov	r1, r5
 8017a2e:	f7e8 ff2d 	bl	800088c <__aeabi_ddiv>
 8017a32:	4602      	mov	r2, r0
 8017a34:	460b      	mov	r3, r1
 8017a36:	f7e8 fc49 	bl	80002cc <__adddf3>
 8017a3a:	4602      	mov	r2, r0
 8017a3c:	460b      	mov	r3, r1
 8017a3e:	a114      	add	r1, pc, #80	; (adr r1, 8017a90 <__ieee754_asin+0x410>)
 8017a40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a44:	f7e8 fc40 	bl	80002c8 <__aeabi_dsub>
 8017a48:	4602      	mov	r2, r0
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	4640      	mov	r0, r8
 8017a4e:	4649      	mov	r1, r9
 8017a50:	f7e8 fc3a 	bl	80002c8 <__aeabi_dsub>
 8017a54:	465f      	mov	r7, fp
 8017a56:	4604      	mov	r4, r0
 8017a58:	460d      	mov	r5, r1
 8017a5a:	4632      	mov	r2, r6
 8017a5c:	465b      	mov	r3, fp
 8017a5e:	4630      	mov	r0, r6
 8017a60:	4639      	mov	r1, r7
 8017a62:	f7e8 fc33 	bl	80002cc <__adddf3>
 8017a66:	4602      	mov	r2, r0
 8017a68:	460b      	mov	r3, r1
 8017a6a:	a10b      	add	r1, pc, #44	; (adr r1, 8017a98 <__ieee754_asin+0x418>)
 8017a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a70:	f7e8 fc2a 	bl	80002c8 <__aeabi_dsub>
 8017a74:	4602      	mov	r2, r0
 8017a76:	460b      	mov	r3, r1
 8017a78:	4620      	mov	r0, r4
 8017a7a:	4629      	mov	r1, r5
 8017a7c:	f7e8 fc24 	bl	80002c8 <__aeabi_dsub>
 8017a80:	4602      	mov	r2, r0
 8017a82:	460b      	mov	r3, r1
 8017a84:	a104      	add	r1, pc, #16	; (adr r1, 8017a98 <__ieee754_asin+0x418>)
 8017a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017a8a:	e6dd      	b.n	8017848 <__ieee754_asin+0x1c8>
 8017a8c:	f3af 8000 	nop.w
 8017a90:	33145c07 	.word	0x33145c07
 8017a94:	3c91a626 	.word	0x3c91a626
 8017a98:	54442d18 	.word	0x54442d18
 8017a9c:	3fe921fb 	.word	0x3fe921fb

08017aa0 <__ieee754_atan2>:
 8017aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017aa4:	ec57 6b11 	vmov	r6, r7, d1
 8017aa8:	4273      	negs	r3, r6
 8017aaa:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8017aae:	4333      	orrs	r3, r6
 8017ab0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8017c58 <__ieee754_atan2+0x1b8>
 8017ab4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8017ab8:	4573      	cmp	r3, lr
 8017aba:	ec51 0b10 	vmov	r0, r1, d0
 8017abe:	ee11 8a10 	vmov	r8, s2
 8017ac2:	d80a      	bhi.n	8017ada <__ieee754_atan2+0x3a>
 8017ac4:	4244      	negs	r4, r0
 8017ac6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017aca:	4304      	orrs	r4, r0
 8017acc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8017ad0:	4574      	cmp	r4, lr
 8017ad2:	468c      	mov	ip, r1
 8017ad4:	ee10 9a10 	vmov	r9, s0
 8017ad8:	d907      	bls.n	8017aea <__ieee754_atan2+0x4a>
 8017ada:	4632      	mov	r2, r6
 8017adc:	463b      	mov	r3, r7
 8017ade:	f7e8 fbf5 	bl	80002cc <__adddf3>
 8017ae2:	ec41 0b10 	vmov	d0, r0, r1
 8017ae6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017aea:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8017aee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017af2:	4334      	orrs	r4, r6
 8017af4:	d103      	bne.n	8017afe <__ieee754_atan2+0x5e>
 8017af6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017afa:	f001 badd 	b.w	80190b8 <atan>
 8017afe:	17bc      	asrs	r4, r7, #30
 8017b00:	f004 0402 	and.w	r4, r4, #2
 8017b04:	ea53 0909 	orrs.w	r9, r3, r9
 8017b08:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8017b0c:	d107      	bne.n	8017b1e <__ieee754_atan2+0x7e>
 8017b0e:	2c02      	cmp	r4, #2
 8017b10:	d073      	beq.n	8017bfa <__ieee754_atan2+0x15a>
 8017b12:	2c03      	cmp	r4, #3
 8017b14:	d1e5      	bne.n	8017ae2 <__ieee754_atan2+0x42>
 8017b16:	a13e      	add	r1, pc, #248	; (adr r1, 8017c10 <__ieee754_atan2+0x170>)
 8017b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b1c:	e7e1      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b1e:	ea52 0808 	orrs.w	r8, r2, r8
 8017b22:	d106      	bne.n	8017b32 <__ieee754_atan2+0x92>
 8017b24:	f1bc 0f00 	cmp.w	ip, #0
 8017b28:	da6b      	bge.n	8017c02 <__ieee754_atan2+0x162>
 8017b2a:	a13b      	add	r1, pc, #236	; (adr r1, 8017c18 <__ieee754_atan2+0x178>)
 8017b2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b30:	e7d7      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b32:	4572      	cmp	r2, lr
 8017b34:	d120      	bne.n	8017b78 <__ieee754_atan2+0xd8>
 8017b36:	4293      	cmp	r3, r2
 8017b38:	d111      	bne.n	8017b5e <__ieee754_atan2+0xbe>
 8017b3a:	2c02      	cmp	r4, #2
 8017b3c:	d007      	beq.n	8017b4e <__ieee754_atan2+0xae>
 8017b3e:	2c03      	cmp	r4, #3
 8017b40:	d009      	beq.n	8017b56 <__ieee754_atan2+0xb6>
 8017b42:	2c01      	cmp	r4, #1
 8017b44:	d155      	bne.n	8017bf2 <__ieee754_atan2+0x152>
 8017b46:	a136      	add	r1, pc, #216	; (adr r1, 8017c20 <__ieee754_atan2+0x180>)
 8017b48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b4c:	e7c9      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b4e:	a136      	add	r1, pc, #216	; (adr r1, 8017c28 <__ieee754_atan2+0x188>)
 8017b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b54:	e7c5      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b56:	a136      	add	r1, pc, #216	; (adr r1, 8017c30 <__ieee754_atan2+0x190>)
 8017b58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017b5c:	e7c1      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b5e:	2c02      	cmp	r4, #2
 8017b60:	d04b      	beq.n	8017bfa <__ieee754_atan2+0x15a>
 8017b62:	2c03      	cmp	r4, #3
 8017b64:	d0d7      	beq.n	8017b16 <__ieee754_atan2+0x76>
 8017b66:	2c01      	cmp	r4, #1
 8017b68:	f04f 0000 	mov.w	r0, #0
 8017b6c:	d102      	bne.n	8017b74 <__ieee754_atan2+0xd4>
 8017b6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8017b72:	e7b6      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b74:	2100      	movs	r1, #0
 8017b76:	e7b4      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017b78:	4573      	cmp	r3, lr
 8017b7a:	d0d3      	beq.n	8017b24 <__ieee754_atan2+0x84>
 8017b7c:	1a9b      	subs	r3, r3, r2
 8017b7e:	151b      	asrs	r3, r3, #20
 8017b80:	2b3c      	cmp	r3, #60	; 0x3c
 8017b82:	dc1e      	bgt.n	8017bc2 <__ieee754_atan2+0x122>
 8017b84:	2f00      	cmp	r7, #0
 8017b86:	da01      	bge.n	8017b8c <__ieee754_atan2+0xec>
 8017b88:	333c      	adds	r3, #60	; 0x3c
 8017b8a:	db1e      	blt.n	8017bca <__ieee754_atan2+0x12a>
 8017b8c:	4632      	mov	r2, r6
 8017b8e:	463b      	mov	r3, r7
 8017b90:	f7e8 fe7c 	bl	800088c <__aeabi_ddiv>
 8017b94:	ec41 0b10 	vmov	d0, r0, r1
 8017b98:	f001 fc2e 	bl	80193f8 <fabs>
 8017b9c:	f001 fa8c 	bl	80190b8 <atan>
 8017ba0:	ec51 0b10 	vmov	r0, r1, d0
 8017ba4:	2c01      	cmp	r4, #1
 8017ba6:	d013      	beq.n	8017bd0 <__ieee754_atan2+0x130>
 8017ba8:	2c02      	cmp	r4, #2
 8017baa:	d015      	beq.n	8017bd8 <__ieee754_atan2+0x138>
 8017bac:	2c00      	cmp	r4, #0
 8017bae:	d098      	beq.n	8017ae2 <__ieee754_atan2+0x42>
 8017bb0:	a321      	add	r3, pc, #132	; (adr r3, 8017c38 <__ieee754_atan2+0x198>)
 8017bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bb6:	f7e8 fb87 	bl	80002c8 <__aeabi_dsub>
 8017bba:	a321      	add	r3, pc, #132	; (adr r3, 8017c40 <__ieee754_atan2+0x1a0>)
 8017bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bc0:	e014      	b.n	8017bec <__ieee754_atan2+0x14c>
 8017bc2:	a121      	add	r1, pc, #132	; (adr r1, 8017c48 <__ieee754_atan2+0x1a8>)
 8017bc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017bc8:	e7ec      	b.n	8017ba4 <__ieee754_atan2+0x104>
 8017bca:	2000      	movs	r0, #0
 8017bcc:	2100      	movs	r1, #0
 8017bce:	e7e9      	b.n	8017ba4 <__ieee754_atan2+0x104>
 8017bd0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017bd4:	4619      	mov	r1, r3
 8017bd6:	e784      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017bd8:	a317      	add	r3, pc, #92	; (adr r3, 8017c38 <__ieee754_atan2+0x198>)
 8017bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bde:	f7e8 fb73 	bl	80002c8 <__aeabi_dsub>
 8017be2:	4602      	mov	r2, r0
 8017be4:	460b      	mov	r3, r1
 8017be6:	a116      	add	r1, pc, #88	; (adr r1, 8017c40 <__ieee754_atan2+0x1a0>)
 8017be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017bec:	f7e8 fb6c 	bl	80002c8 <__aeabi_dsub>
 8017bf0:	e777      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017bf2:	a117      	add	r1, pc, #92	; (adr r1, 8017c50 <__ieee754_atan2+0x1b0>)
 8017bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017bf8:	e773      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017bfa:	a111      	add	r1, pc, #68	; (adr r1, 8017c40 <__ieee754_atan2+0x1a0>)
 8017bfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c00:	e76f      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017c02:	a111      	add	r1, pc, #68	; (adr r1, 8017c48 <__ieee754_atan2+0x1a8>)
 8017c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017c08:	e76b      	b.n	8017ae2 <__ieee754_atan2+0x42>
 8017c0a:	bf00      	nop
 8017c0c:	f3af 8000 	nop.w
 8017c10:	54442d18 	.word	0x54442d18
 8017c14:	c00921fb 	.word	0xc00921fb
 8017c18:	54442d18 	.word	0x54442d18
 8017c1c:	bff921fb 	.word	0xbff921fb
 8017c20:	54442d18 	.word	0x54442d18
 8017c24:	bfe921fb 	.word	0xbfe921fb
 8017c28:	7f3321d2 	.word	0x7f3321d2
 8017c2c:	4002d97c 	.word	0x4002d97c
 8017c30:	7f3321d2 	.word	0x7f3321d2
 8017c34:	c002d97c 	.word	0xc002d97c
 8017c38:	33145c07 	.word	0x33145c07
 8017c3c:	3ca1a626 	.word	0x3ca1a626
 8017c40:	54442d18 	.word	0x54442d18
 8017c44:	400921fb 	.word	0x400921fb
 8017c48:	54442d18 	.word	0x54442d18
 8017c4c:	3ff921fb 	.word	0x3ff921fb
 8017c50:	54442d18 	.word	0x54442d18
 8017c54:	3fe921fb 	.word	0x3fe921fb
 8017c58:	7ff00000 	.word	0x7ff00000
 8017c5c:	00000000 	.word	0x00000000

08017c60 <__ieee754_rem_pio2>:
 8017c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c64:	ec57 6b10 	vmov	r6, r7, d0
 8017c68:	4bc3      	ldr	r3, [pc, #780]	; (8017f78 <__ieee754_rem_pio2+0x318>)
 8017c6a:	b08d      	sub	sp, #52	; 0x34
 8017c6c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8017c70:	4598      	cmp	r8, r3
 8017c72:	4604      	mov	r4, r0
 8017c74:	9704      	str	r7, [sp, #16]
 8017c76:	dc07      	bgt.n	8017c88 <__ieee754_rem_pio2+0x28>
 8017c78:	2200      	movs	r2, #0
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	ed84 0b00 	vstr	d0, [r4]
 8017c80:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8017c84:	2500      	movs	r5, #0
 8017c86:	e027      	b.n	8017cd8 <__ieee754_rem_pio2+0x78>
 8017c88:	4bbc      	ldr	r3, [pc, #752]	; (8017f7c <__ieee754_rem_pio2+0x31c>)
 8017c8a:	4598      	cmp	r8, r3
 8017c8c:	dc75      	bgt.n	8017d7a <__ieee754_rem_pio2+0x11a>
 8017c8e:	9b04      	ldr	r3, [sp, #16]
 8017c90:	4dbb      	ldr	r5, [pc, #748]	; (8017f80 <__ieee754_rem_pio2+0x320>)
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	ee10 0a10 	vmov	r0, s0
 8017c98:	a3a9      	add	r3, pc, #676	; (adr r3, 8017f40 <__ieee754_rem_pio2+0x2e0>)
 8017c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c9e:	4639      	mov	r1, r7
 8017ca0:	dd36      	ble.n	8017d10 <__ieee754_rem_pio2+0xb0>
 8017ca2:	f7e8 fb11 	bl	80002c8 <__aeabi_dsub>
 8017ca6:	45a8      	cmp	r8, r5
 8017ca8:	4606      	mov	r6, r0
 8017caa:	460f      	mov	r7, r1
 8017cac:	d018      	beq.n	8017ce0 <__ieee754_rem_pio2+0x80>
 8017cae:	a3a6      	add	r3, pc, #664	; (adr r3, 8017f48 <__ieee754_rem_pio2+0x2e8>)
 8017cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb4:	f7e8 fb08 	bl	80002c8 <__aeabi_dsub>
 8017cb8:	4602      	mov	r2, r0
 8017cba:	460b      	mov	r3, r1
 8017cbc:	e9c4 2300 	strd	r2, r3, [r4]
 8017cc0:	4630      	mov	r0, r6
 8017cc2:	4639      	mov	r1, r7
 8017cc4:	f7e8 fb00 	bl	80002c8 <__aeabi_dsub>
 8017cc8:	a39f      	add	r3, pc, #636	; (adr r3, 8017f48 <__ieee754_rem_pio2+0x2e8>)
 8017cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cce:	f7e8 fafb 	bl	80002c8 <__aeabi_dsub>
 8017cd2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017cd6:	2501      	movs	r5, #1
 8017cd8:	4628      	mov	r0, r5
 8017cda:	b00d      	add	sp, #52	; 0x34
 8017cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ce0:	a39b      	add	r3, pc, #620	; (adr r3, 8017f50 <__ieee754_rem_pio2+0x2f0>)
 8017ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ce6:	f7e8 faef 	bl	80002c8 <__aeabi_dsub>
 8017cea:	a39b      	add	r3, pc, #620	; (adr r3, 8017f58 <__ieee754_rem_pio2+0x2f8>)
 8017cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cf0:	4606      	mov	r6, r0
 8017cf2:	460f      	mov	r7, r1
 8017cf4:	f7e8 fae8 	bl	80002c8 <__aeabi_dsub>
 8017cf8:	4602      	mov	r2, r0
 8017cfa:	460b      	mov	r3, r1
 8017cfc:	e9c4 2300 	strd	r2, r3, [r4]
 8017d00:	4630      	mov	r0, r6
 8017d02:	4639      	mov	r1, r7
 8017d04:	f7e8 fae0 	bl	80002c8 <__aeabi_dsub>
 8017d08:	a393      	add	r3, pc, #588	; (adr r3, 8017f58 <__ieee754_rem_pio2+0x2f8>)
 8017d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d0e:	e7de      	b.n	8017cce <__ieee754_rem_pio2+0x6e>
 8017d10:	f7e8 fadc 	bl	80002cc <__adddf3>
 8017d14:	45a8      	cmp	r8, r5
 8017d16:	4606      	mov	r6, r0
 8017d18:	460f      	mov	r7, r1
 8017d1a:	d016      	beq.n	8017d4a <__ieee754_rem_pio2+0xea>
 8017d1c:	a38a      	add	r3, pc, #552	; (adr r3, 8017f48 <__ieee754_rem_pio2+0x2e8>)
 8017d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d22:	f7e8 fad3 	bl	80002cc <__adddf3>
 8017d26:	4602      	mov	r2, r0
 8017d28:	460b      	mov	r3, r1
 8017d2a:	e9c4 2300 	strd	r2, r3, [r4]
 8017d2e:	4630      	mov	r0, r6
 8017d30:	4639      	mov	r1, r7
 8017d32:	f7e8 fac9 	bl	80002c8 <__aeabi_dsub>
 8017d36:	a384      	add	r3, pc, #528	; (adr r3, 8017f48 <__ieee754_rem_pio2+0x2e8>)
 8017d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d3c:	f7e8 fac6 	bl	80002cc <__adddf3>
 8017d40:	f04f 35ff 	mov.w	r5, #4294967295
 8017d44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017d48:	e7c6      	b.n	8017cd8 <__ieee754_rem_pio2+0x78>
 8017d4a:	a381      	add	r3, pc, #516	; (adr r3, 8017f50 <__ieee754_rem_pio2+0x2f0>)
 8017d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d50:	f7e8 fabc 	bl	80002cc <__adddf3>
 8017d54:	a380      	add	r3, pc, #512	; (adr r3, 8017f58 <__ieee754_rem_pio2+0x2f8>)
 8017d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d5a:	4606      	mov	r6, r0
 8017d5c:	460f      	mov	r7, r1
 8017d5e:	f7e8 fab5 	bl	80002cc <__adddf3>
 8017d62:	4602      	mov	r2, r0
 8017d64:	460b      	mov	r3, r1
 8017d66:	e9c4 2300 	strd	r2, r3, [r4]
 8017d6a:	4630      	mov	r0, r6
 8017d6c:	4639      	mov	r1, r7
 8017d6e:	f7e8 faab 	bl	80002c8 <__aeabi_dsub>
 8017d72:	a379      	add	r3, pc, #484	; (adr r3, 8017f58 <__ieee754_rem_pio2+0x2f8>)
 8017d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d78:	e7e0      	b.n	8017d3c <__ieee754_rem_pio2+0xdc>
 8017d7a:	4b82      	ldr	r3, [pc, #520]	; (8017f84 <__ieee754_rem_pio2+0x324>)
 8017d7c:	4598      	cmp	r8, r3
 8017d7e:	f300 80d0 	bgt.w	8017f22 <__ieee754_rem_pio2+0x2c2>
 8017d82:	f001 fb39 	bl	80193f8 <fabs>
 8017d86:	ec57 6b10 	vmov	r6, r7, d0
 8017d8a:	ee10 0a10 	vmov	r0, s0
 8017d8e:	a374      	add	r3, pc, #464	; (adr r3, 8017f60 <__ieee754_rem_pio2+0x300>)
 8017d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d94:	4639      	mov	r1, r7
 8017d96:	f7e8 fc4f 	bl	8000638 <__aeabi_dmul>
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	4b7a      	ldr	r3, [pc, #488]	; (8017f88 <__ieee754_rem_pio2+0x328>)
 8017d9e:	f7e8 fa95 	bl	80002cc <__adddf3>
 8017da2:	f7e8 fef9 	bl	8000b98 <__aeabi_d2iz>
 8017da6:	4605      	mov	r5, r0
 8017da8:	f7e8 fbdc 	bl	8000564 <__aeabi_i2d>
 8017dac:	a364      	add	r3, pc, #400	; (adr r3, 8017f40 <__ieee754_rem_pio2+0x2e0>)
 8017dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017db6:	f7e8 fc3f 	bl	8000638 <__aeabi_dmul>
 8017dba:	4602      	mov	r2, r0
 8017dbc:	460b      	mov	r3, r1
 8017dbe:	4630      	mov	r0, r6
 8017dc0:	4639      	mov	r1, r7
 8017dc2:	f7e8 fa81 	bl	80002c8 <__aeabi_dsub>
 8017dc6:	a360      	add	r3, pc, #384	; (adr r3, 8017f48 <__ieee754_rem_pio2+0x2e8>)
 8017dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dcc:	4682      	mov	sl, r0
 8017dce:	468b      	mov	fp, r1
 8017dd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017dd4:	f7e8 fc30 	bl	8000638 <__aeabi_dmul>
 8017dd8:	2d1f      	cmp	r5, #31
 8017dda:	4606      	mov	r6, r0
 8017ddc:	460f      	mov	r7, r1
 8017dde:	dc0c      	bgt.n	8017dfa <__ieee754_rem_pio2+0x19a>
 8017de0:	1e6a      	subs	r2, r5, #1
 8017de2:	4b6a      	ldr	r3, [pc, #424]	; (8017f8c <__ieee754_rem_pio2+0x32c>)
 8017de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017de8:	4543      	cmp	r3, r8
 8017dea:	d006      	beq.n	8017dfa <__ieee754_rem_pio2+0x19a>
 8017dec:	4632      	mov	r2, r6
 8017dee:	463b      	mov	r3, r7
 8017df0:	4650      	mov	r0, sl
 8017df2:	4659      	mov	r1, fp
 8017df4:	f7e8 fa68 	bl	80002c8 <__aeabi_dsub>
 8017df8:	e00e      	b.n	8017e18 <__ieee754_rem_pio2+0x1b8>
 8017dfa:	4632      	mov	r2, r6
 8017dfc:	463b      	mov	r3, r7
 8017dfe:	4650      	mov	r0, sl
 8017e00:	4659      	mov	r1, fp
 8017e02:	f7e8 fa61 	bl	80002c8 <__aeabi_dsub>
 8017e06:	ea4f 5328 	mov.w	r3, r8, asr #20
 8017e0a:	9305      	str	r3, [sp, #20]
 8017e0c:	9a05      	ldr	r2, [sp, #20]
 8017e0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017e12:	1ad3      	subs	r3, r2, r3
 8017e14:	2b10      	cmp	r3, #16
 8017e16:	dc02      	bgt.n	8017e1e <__ieee754_rem_pio2+0x1be>
 8017e18:	e9c4 0100 	strd	r0, r1, [r4]
 8017e1c:	e039      	b.n	8017e92 <__ieee754_rem_pio2+0x232>
 8017e1e:	a34c      	add	r3, pc, #304	; (adr r3, 8017f50 <__ieee754_rem_pio2+0x2f0>)
 8017e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e28:	f7e8 fc06 	bl	8000638 <__aeabi_dmul>
 8017e2c:	4606      	mov	r6, r0
 8017e2e:	460f      	mov	r7, r1
 8017e30:	4602      	mov	r2, r0
 8017e32:	460b      	mov	r3, r1
 8017e34:	4650      	mov	r0, sl
 8017e36:	4659      	mov	r1, fp
 8017e38:	f7e8 fa46 	bl	80002c8 <__aeabi_dsub>
 8017e3c:	4602      	mov	r2, r0
 8017e3e:	460b      	mov	r3, r1
 8017e40:	4680      	mov	r8, r0
 8017e42:	4689      	mov	r9, r1
 8017e44:	4650      	mov	r0, sl
 8017e46:	4659      	mov	r1, fp
 8017e48:	f7e8 fa3e 	bl	80002c8 <__aeabi_dsub>
 8017e4c:	4632      	mov	r2, r6
 8017e4e:	463b      	mov	r3, r7
 8017e50:	f7e8 fa3a 	bl	80002c8 <__aeabi_dsub>
 8017e54:	a340      	add	r3, pc, #256	; (adr r3, 8017f58 <__ieee754_rem_pio2+0x2f8>)
 8017e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017e5a:	4606      	mov	r6, r0
 8017e5c:	460f      	mov	r7, r1
 8017e5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017e62:	f7e8 fbe9 	bl	8000638 <__aeabi_dmul>
 8017e66:	4632      	mov	r2, r6
 8017e68:	463b      	mov	r3, r7
 8017e6a:	f7e8 fa2d 	bl	80002c8 <__aeabi_dsub>
 8017e6e:	4602      	mov	r2, r0
 8017e70:	460b      	mov	r3, r1
 8017e72:	4606      	mov	r6, r0
 8017e74:	460f      	mov	r7, r1
 8017e76:	4640      	mov	r0, r8
 8017e78:	4649      	mov	r1, r9
 8017e7a:	f7e8 fa25 	bl	80002c8 <__aeabi_dsub>
 8017e7e:	9a05      	ldr	r2, [sp, #20]
 8017e80:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8017e84:	1ad3      	subs	r3, r2, r3
 8017e86:	2b31      	cmp	r3, #49	; 0x31
 8017e88:	dc20      	bgt.n	8017ecc <__ieee754_rem_pio2+0x26c>
 8017e8a:	e9c4 0100 	strd	r0, r1, [r4]
 8017e8e:	46c2      	mov	sl, r8
 8017e90:	46cb      	mov	fp, r9
 8017e92:	e9d4 8900 	ldrd	r8, r9, [r4]
 8017e96:	4650      	mov	r0, sl
 8017e98:	4642      	mov	r2, r8
 8017e9a:	464b      	mov	r3, r9
 8017e9c:	4659      	mov	r1, fp
 8017e9e:	f7e8 fa13 	bl	80002c8 <__aeabi_dsub>
 8017ea2:	463b      	mov	r3, r7
 8017ea4:	4632      	mov	r2, r6
 8017ea6:	f7e8 fa0f 	bl	80002c8 <__aeabi_dsub>
 8017eaa:	9b04      	ldr	r3, [sp, #16]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017eb2:	f6bf af11 	bge.w	8017cd8 <__ieee754_rem_pio2+0x78>
 8017eb6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8017eba:	6063      	str	r3, [r4, #4]
 8017ebc:	f8c4 8000 	str.w	r8, [r4]
 8017ec0:	60a0      	str	r0, [r4, #8]
 8017ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017ec6:	60e3      	str	r3, [r4, #12]
 8017ec8:	426d      	negs	r5, r5
 8017eca:	e705      	b.n	8017cd8 <__ieee754_rem_pio2+0x78>
 8017ecc:	a326      	add	r3, pc, #152	; (adr r3, 8017f68 <__ieee754_rem_pio2+0x308>)
 8017ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ed2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017ed6:	f7e8 fbaf 	bl	8000638 <__aeabi_dmul>
 8017eda:	4606      	mov	r6, r0
 8017edc:	460f      	mov	r7, r1
 8017ede:	4602      	mov	r2, r0
 8017ee0:	460b      	mov	r3, r1
 8017ee2:	4640      	mov	r0, r8
 8017ee4:	4649      	mov	r1, r9
 8017ee6:	f7e8 f9ef 	bl	80002c8 <__aeabi_dsub>
 8017eea:	4602      	mov	r2, r0
 8017eec:	460b      	mov	r3, r1
 8017eee:	4682      	mov	sl, r0
 8017ef0:	468b      	mov	fp, r1
 8017ef2:	4640      	mov	r0, r8
 8017ef4:	4649      	mov	r1, r9
 8017ef6:	f7e8 f9e7 	bl	80002c8 <__aeabi_dsub>
 8017efa:	4632      	mov	r2, r6
 8017efc:	463b      	mov	r3, r7
 8017efe:	f7e8 f9e3 	bl	80002c8 <__aeabi_dsub>
 8017f02:	a31b      	add	r3, pc, #108	; (adr r3, 8017f70 <__ieee754_rem_pio2+0x310>)
 8017f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f08:	4606      	mov	r6, r0
 8017f0a:	460f      	mov	r7, r1
 8017f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017f10:	f7e8 fb92 	bl	8000638 <__aeabi_dmul>
 8017f14:	4632      	mov	r2, r6
 8017f16:	463b      	mov	r3, r7
 8017f18:	f7e8 f9d6 	bl	80002c8 <__aeabi_dsub>
 8017f1c:	4606      	mov	r6, r0
 8017f1e:	460f      	mov	r7, r1
 8017f20:	e764      	b.n	8017dec <__ieee754_rem_pio2+0x18c>
 8017f22:	4b1b      	ldr	r3, [pc, #108]	; (8017f90 <__ieee754_rem_pio2+0x330>)
 8017f24:	4598      	cmp	r8, r3
 8017f26:	dd35      	ble.n	8017f94 <__ieee754_rem_pio2+0x334>
 8017f28:	ee10 2a10 	vmov	r2, s0
 8017f2c:	463b      	mov	r3, r7
 8017f2e:	4630      	mov	r0, r6
 8017f30:	4639      	mov	r1, r7
 8017f32:	f7e8 f9c9 	bl	80002c8 <__aeabi_dsub>
 8017f36:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8017f3a:	e9c4 0100 	strd	r0, r1, [r4]
 8017f3e:	e6a1      	b.n	8017c84 <__ieee754_rem_pio2+0x24>
 8017f40:	54400000 	.word	0x54400000
 8017f44:	3ff921fb 	.word	0x3ff921fb
 8017f48:	1a626331 	.word	0x1a626331
 8017f4c:	3dd0b461 	.word	0x3dd0b461
 8017f50:	1a600000 	.word	0x1a600000
 8017f54:	3dd0b461 	.word	0x3dd0b461
 8017f58:	2e037073 	.word	0x2e037073
 8017f5c:	3ba3198a 	.word	0x3ba3198a
 8017f60:	6dc9c883 	.word	0x6dc9c883
 8017f64:	3fe45f30 	.word	0x3fe45f30
 8017f68:	2e000000 	.word	0x2e000000
 8017f6c:	3ba3198a 	.word	0x3ba3198a
 8017f70:	252049c1 	.word	0x252049c1
 8017f74:	397b839a 	.word	0x397b839a
 8017f78:	3fe921fb 	.word	0x3fe921fb
 8017f7c:	4002d97b 	.word	0x4002d97b
 8017f80:	3ff921fb 	.word	0x3ff921fb
 8017f84:	413921fb 	.word	0x413921fb
 8017f88:	3fe00000 	.word	0x3fe00000
 8017f8c:	0801a2e8 	.word	0x0801a2e8
 8017f90:	7fefffff 	.word	0x7fefffff
 8017f94:	ea4f 5528 	mov.w	r5, r8, asr #20
 8017f98:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8017f9c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8017fa0:	4630      	mov	r0, r6
 8017fa2:	460f      	mov	r7, r1
 8017fa4:	f7e8 fdf8 	bl	8000b98 <__aeabi_d2iz>
 8017fa8:	f7e8 fadc 	bl	8000564 <__aeabi_i2d>
 8017fac:	4602      	mov	r2, r0
 8017fae:	460b      	mov	r3, r1
 8017fb0:	4630      	mov	r0, r6
 8017fb2:	4639      	mov	r1, r7
 8017fb4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8017fb8:	f7e8 f986 	bl	80002c8 <__aeabi_dsub>
 8017fbc:	2200      	movs	r2, #0
 8017fbe:	4b1f      	ldr	r3, [pc, #124]	; (801803c <__ieee754_rem_pio2+0x3dc>)
 8017fc0:	f7e8 fb3a 	bl	8000638 <__aeabi_dmul>
 8017fc4:	460f      	mov	r7, r1
 8017fc6:	4606      	mov	r6, r0
 8017fc8:	f7e8 fde6 	bl	8000b98 <__aeabi_d2iz>
 8017fcc:	f7e8 faca 	bl	8000564 <__aeabi_i2d>
 8017fd0:	4602      	mov	r2, r0
 8017fd2:	460b      	mov	r3, r1
 8017fd4:	4630      	mov	r0, r6
 8017fd6:	4639      	mov	r1, r7
 8017fd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8017fdc:	f7e8 f974 	bl	80002c8 <__aeabi_dsub>
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	4b16      	ldr	r3, [pc, #88]	; (801803c <__ieee754_rem_pio2+0x3dc>)
 8017fe4:	f7e8 fb28 	bl	8000638 <__aeabi_dmul>
 8017fe8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017fec:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8017ff0:	f04f 0803 	mov.w	r8, #3
 8017ff4:	2600      	movs	r6, #0
 8017ff6:	2700      	movs	r7, #0
 8017ff8:	4632      	mov	r2, r6
 8017ffa:	463b      	mov	r3, r7
 8017ffc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8018000:	f108 3aff 	add.w	sl, r8, #4294967295
 8018004:	f7e8 fd80 	bl	8000b08 <__aeabi_dcmpeq>
 8018008:	b9b0      	cbnz	r0, 8018038 <__ieee754_rem_pio2+0x3d8>
 801800a:	4b0d      	ldr	r3, [pc, #52]	; (8018040 <__ieee754_rem_pio2+0x3e0>)
 801800c:	9301      	str	r3, [sp, #4]
 801800e:	2302      	movs	r3, #2
 8018010:	9300      	str	r3, [sp, #0]
 8018012:	462a      	mov	r2, r5
 8018014:	4643      	mov	r3, r8
 8018016:	4621      	mov	r1, r4
 8018018:	a806      	add	r0, sp, #24
 801801a:	f000 fc51 	bl	80188c0 <__kernel_rem_pio2>
 801801e:	9b04      	ldr	r3, [sp, #16]
 8018020:	2b00      	cmp	r3, #0
 8018022:	4605      	mov	r5, r0
 8018024:	f6bf ae58 	bge.w	8017cd8 <__ieee754_rem_pio2+0x78>
 8018028:	6863      	ldr	r3, [r4, #4]
 801802a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801802e:	6063      	str	r3, [r4, #4]
 8018030:	68e3      	ldr	r3, [r4, #12]
 8018032:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8018036:	e746      	b.n	8017ec6 <__ieee754_rem_pio2+0x266>
 8018038:	46d0      	mov	r8, sl
 801803a:	e7dd      	b.n	8017ff8 <__ieee754_rem_pio2+0x398>
 801803c:	41700000 	.word	0x41700000
 8018040:	0801a368 	.word	0x0801a368

08018044 <__ieee754_sqrt>:
 8018044:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018048:	4955      	ldr	r1, [pc, #340]	; (80181a0 <__ieee754_sqrt+0x15c>)
 801804a:	ec55 4b10 	vmov	r4, r5, d0
 801804e:	43a9      	bics	r1, r5
 8018050:	462b      	mov	r3, r5
 8018052:	462a      	mov	r2, r5
 8018054:	d112      	bne.n	801807c <__ieee754_sqrt+0x38>
 8018056:	ee10 2a10 	vmov	r2, s0
 801805a:	ee10 0a10 	vmov	r0, s0
 801805e:	4629      	mov	r1, r5
 8018060:	f7e8 faea 	bl	8000638 <__aeabi_dmul>
 8018064:	4602      	mov	r2, r0
 8018066:	460b      	mov	r3, r1
 8018068:	4620      	mov	r0, r4
 801806a:	4629      	mov	r1, r5
 801806c:	f7e8 f92e 	bl	80002cc <__adddf3>
 8018070:	4604      	mov	r4, r0
 8018072:	460d      	mov	r5, r1
 8018074:	ec45 4b10 	vmov	d0, r4, r5
 8018078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801807c:	2d00      	cmp	r5, #0
 801807e:	ee10 0a10 	vmov	r0, s0
 8018082:	4621      	mov	r1, r4
 8018084:	dc0f      	bgt.n	80180a6 <__ieee754_sqrt+0x62>
 8018086:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801808a:	4330      	orrs	r0, r6
 801808c:	d0f2      	beq.n	8018074 <__ieee754_sqrt+0x30>
 801808e:	b155      	cbz	r5, 80180a6 <__ieee754_sqrt+0x62>
 8018090:	ee10 2a10 	vmov	r2, s0
 8018094:	4620      	mov	r0, r4
 8018096:	4629      	mov	r1, r5
 8018098:	f7e8 f916 	bl	80002c8 <__aeabi_dsub>
 801809c:	4602      	mov	r2, r0
 801809e:	460b      	mov	r3, r1
 80180a0:	f7e8 fbf4 	bl	800088c <__aeabi_ddiv>
 80180a4:	e7e4      	b.n	8018070 <__ieee754_sqrt+0x2c>
 80180a6:	151b      	asrs	r3, r3, #20
 80180a8:	d073      	beq.n	8018192 <__ieee754_sqrt+0x14e>
 80180aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80180ae:	07dd      	lsls	r5, r3, #31
 80180b0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80180b4:	bf48      	it	mi
 80180b6:	0fc8      	lsrmi	r0, r1, #31
 80180b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80180bc:	bf44      	itt	mi
 80180be:	0049      	lslmi	r1, r1, #1
 80180c0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80180c4:	2500      	movs	r5, #0
 80180c6:	1058      	asrs	r0, r3, #1
 80180c8:	0fcb      	lsrs	r3, r1, #31
 80180ca:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80180ce:	0049      	lsls	r1, r1, #1
 80180d0:	2316      	movs	r3, #22
 80180d2:	462c      	mov	r4, r5
 80180d4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80180d8:	19a7      	adds	r7, r4, r6
 80180da:	4297      	cmp	r7, r2
 80180dc:	bfde      	ittt	le
 80180de:	19bc      	addle	r4, r7, r6
 80180e0:	1bd2      	suble	r2, r2, r7
 80180e2:	19ad      	addle	r5, r5, r6
 80180e4:	0fcf      	lsrs	r7, r1, #31
 80180e6:	3b01      	subs	r3, #1
 80180e8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80180ec:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80180f0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80180f4:	d1f0      	bne.n	80180d8 <__ieee754_sqrt+0x94>
 80180f6:	f04f 0c20 	mov.w	ip, #32
 80180fa:	469e      	mov	lr, r3
 80180fc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018100:	42a2      	cmp	r2, r4
 8018102:	eb06 070e 	add.w	r7, r6, lr
 8018106:	dc02      	bgt.n	801810e <__ieee754_sqrt+0xca>
 8018108:	d112      	bne.n	8018130 <__ieee754_sqrt+0xec>
 801810a:	428f      	cmp	r7, r1
 801810c:	d810      	bhi.n	8018130 <__ieee754_sqrt+0xec>
 801810e:	2f00      	cmp	r7, #0
 8018110:	eb07 0e06 	add.w	lr, r7, r6
 8018114:	da42      	bge.n	801819c <__ieee754_sqrt+0x158>
 8018116:	f1be 0f00 	cmp.w	lr, #0
 801811a:	db3f      	blt.n	801819c <__ieee754_sqrt+0x158>
 801811c:	f104 0801 	add.w	r8, r4, #1
 8018120:	1b12      	subs	r2, r2, r4
 8018122:	428f      	cmp	r7, r1
 8018124:	bf88      	it	hi
 8018126:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801812a:	1bc9      	subs	r1, r1, r7
 801812c:	4433      	add	r3, r6
 801812e:	4644      	mov	r4, r8
 8018130:	0052      	lsls	r2, r2, #1
 8018132:	f1bc 0c01 	subs.w	ip, ip, #1
 8018136:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801813a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801813e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8018142:	d1dd      	bne.n	8018100 <__ieee754_sqrt+0xbc>
 8018144:	430a      	orrs	r2, r1
 8018146:	d006      	beq.n	8018156 <__ieee754_sqrt+0x112>
 8018148:	1c5c      	adds	r4, r3, #1
 801814a:	bf13      	iteet	ne
 801814c:	3301      	addne	r3, #1
 801814e:	3501      	addeq	r5, #1
 8018150:	4663      	moveq	r3, ip
 8018152:	f023 0301 	bicne.w	r3, r3, #1
 8018156:	106a      	asrs	r2, r5, #1
 8018158:	085b      	lsrs	r3, r3, #1
 801815a:	07e9      	lsls	r1, r5, #31
 801815c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8018160:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8018164:	bf48      	it	mi
 8018166:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801816a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801816e:	461c      	mov	r4, r3
 8018170:	e780      	b.n	8018074 <__ieee754_sqrt+0x30>
 8018172:	0aca      	lsrs	r2, r1, #11
 8018174:	3815      	subs	r0, #21
 8018176:	0549      	lsls	r1, r1, #21
 8018178:	2a00      	cmp	r2, #0
 801817a:	d0fa      	beq.n	8018172 <__ieee754_sqrt+0x12e>
 801817c:	02d6      	lsls	r6, r2, #11
 801817e:	d50a      	bpl.n	8018196 <__ieee754_sqrt+0x152>
 8018180:	f1c3 0420 	rsb	r4, r3, #32
 8018184:	fa21 f404 	lsr.w	r4, r1, r4
 8018188:	1e5d      	subs	r5, r3, #1
 801818a:	4099      	lsls	r1, r3
 801818c:	4322      	orrs	r2, r4
 801818e:	1b43      	subs	r3, r0, r5
 8018190:	e78b      	b.n	80180aa <__ieee754_sqrt+0x66>
 8018192:	4618      	mov	r0, r3
 8018194:	e7f0      	b.n	8018178 <__ieee754_sqrt+0x134>
 8018196:	0052      	lsls	r2, r2, #1
 8018198:	3301      	adds	r3, #1
 801819a:	e7ef      	b.n	801817c <__ieee754_sqrt+0x138>
 801819c:	46a0      	mov	r8, r4
 801819e:	e7bf      	b.n	8018120 <__ieee754_sqrt+0xdc>
 80181a0:	7ff00000 	.word	0x7ff00000

080181a4 <__ieee754_powf>:
 80181a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181a8:	ee10 5a90 	vmov	r5, s1
 80181ac:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 80181b0:	ed2d 8b02 	vpush	{d8}
 80181b4:	eeb0 8a40 	vmov.f32	s16, s0
 80181b8:	eef0 8a60 	vmov.f32	s17, s1
 80181bc:	f000 8293 	beq.w	80186e6 <__ieee754_powf+0x542>
 80181c0:	ee10 8a10 	vmov	r8, s0
 80181c4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 80181c8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80181cc:	dc06      	bgt.n	80181dc <__ieee754_powf+0x38>
 80181ce:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80181d2:	dd0a      	ble.n	80181ea <__ieee754_powf+0x46>
 80181d4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80181d8:	f000 8285 	beq.w	80186e6 <__ieee754_powf+0x542>
 80181dc:	ecbd 8b02 	vpop	{d8}
 80181e0:	48d9      	ldr	r0, [pc, #868]	; (8018548 <__ieee754_powf+0x3a4>)
 80181e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181e6:	f001 ba2b 	b.w	8019640 <nanf>
 80181ea:	f1b8 0f00 	cmp.w	r8, #0
 80181ee:	da1d      	bge.n	801822c <__ieee754_powf+0x88>
 80181f0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 80181f4:	da2c      	bge.n	8018250 <__ieee754_powf+0xac>
 80181f6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80181fa:	db30      	blt.n	801825e <__ieee754_powf+0xba>
 80181fc:	15fb      	asrs	r3, r7, #23
 80181fe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018202:	fa47 f603 	asr.w	r6, r7, r3
 8018206:	fa06 f303 	lsl.w	r3, r6, r3
 801820a:	42bb      	cmp	r3, r7
 801820c:	d127      	bne.n	801825e <__ieee754_powf+0xba>
 801820e:	f006 0601 	and.w	r6, r6, #1
 8018212:	f1c6 0602 	rsb	r6, r6, #2
 8018216:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801821a:	d122      	bne.n	8018262 <__ieee754_powf+0xbe>
 801821c:	2d00      	cmp	r5, #0
 801821e:	f280 8268 	bge.w	80186f2 <__ieee754_powf+0x54e>
 8018222:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018226:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801822a:	e00d      	b.n	8018248 <__ieee754_powf+0xa4>
 801822c:	2600      	movs	r6, #0
 801822e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8018232:	d1f0      	bne.n	8018216 <__ieee754_powf+0x72>
 8018234:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8018238:	f000 8255 	beq.w	80186e6 <__ieee754_powf+0x542>
 801823c:	dd0a      	ble.n	8018254 <__ieee754_powf+0xb0>
 801823e:	2d00      	cmp	r5, #0
 8018240:	f280 8254 	bge.w	80186ec <__ieee754_powf+0x548>
 8018244:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801854c <__ieee754_powf+0x3a8>
 8018248:	ecbd 8b02 	vpop	{d8}
 801824c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018250:	2602      	movs	r6, #2
 8018252:	e7ec      	b.n	801822e <__ieee754_powf+0x8a>
 8018254:	2d00      	cmp	r5, #0
 8018256:	daf5      	bge.n	8018244 <__ieee754_powf+0xa0>
 8018258:	eeb1 0a68 	vneg.f32	s0, s17
 801825c:	e7f4      	b.n	8018248 <__ieee754_powf+0xa4>
 801825e:	2600      	movs	r6, #0
 8018260:	e7d9      	b.n	8018216 <__ieee754_powf+0x72>
 8018262:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8018266:	d102      	bne.n	801826e <__ieee754_powf+0xca>
 8018268:	ee28 0a08 	vmul.f32	s0, s16, s16
 801826c:	e7ec      	b.n	8018248 <__ieee754_powf+0xa4>
 801826e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8018272:	eeb0 0a48 	vmov.f32	s0, s16
 8018276:	d108      	bne.n	801828a <__ieee754_powf+0xe6>
 8018278:	f1b8 0f00 	cmp.w	r8, #0
 801827c:	db05      	blt.n	801828a <__ieee754_powf+0xe6>
 801827e:	ecbd 8b02 	vpop	{d8}
 8018282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018286:	f000 ba4d 	b.w	8018724 <__ieee754_sqrtf>
 801828a:	f001 f9c7 	bl	801961c <fabsf>
 801828e:	b124      	cbz	r4, 801829a <__ieee754_powf+0xf6>
 8018290:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8018294:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018298:	d117      	bne.n	80182ca <__ieee754_powf+0x126>
 801829a:	2d00      	cmp	r5, #0
 801829c:	bfbc      	itt	lt
 801829e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80182a2:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80182a6:	f1b8 0f00 	cmp.w	r8, #0
 80182aa:	dacd      	bge.n	8018248 <__ieee754_powf+0xa4>
 80182ac:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 80182b0:	ea54 0306 	orrs.w	r3, r4, r6
 80182b4:	d104      	bne.n	80182c0 <__ieee754_powf+0x11c>
 80182b6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80182ba:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80182be:	e7c3      	b.n	8018248 <__ieee754_powf+0xa4>
 80182c0:	2e01      	cmp	r6, #1
 80182c2:	d1c1      	bne.n	8018248 <__ieee754_powf+0xa4>
 80182c4:	eeb1 0a40 	vneg.f32	s0, s0
 80182c8:	e7be      	b.n	8018248 <__ieee754_powf+0xa4>
 80182ca:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 80182ce:	3801      	subs	r0, #1
 80182d0:	ea56 0300 	orrs.w	r3, r6, r0
 80182d4:	d104      	bne.n	80182e0 <__ieee754_powf+0x13c>
 80182d6:	ee38 8a48 	vsub.f32	s16, s16, s16
 80182da:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80182de:	e7b3      	b.n	8018248 <__ieee754_powf+0xa4>
 80182e0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 80182e4:	dd6d      	ble.n	80183c2 <__ieee754_powf+0x21e>
 80182e6:	4b9a      	ldr	r3, [pc, #616]	; (8018550 <__ieee754_powf+0x3ac>)
 80182e8:	429c      	cmp	r4, r3
 80182ea:	dc06      	bgt.n	80182fa <__ieee754_powf+0x156>
 80182ec:	2d00      	cmp	r5, #0
 80182ee:	daa9      	bge.n	8018244 <__ieee754_powf+0xa0>
 80182f0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8018554 <__ieee754_powf+0x3b0>
 80182f4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80182f8:	e7a6      	b.n	8018248 <__ieee754_powf+0xa4>
 80182fa:	4b97      	ldr	r3, [pc, #604]	; (8018558 <__ieee754_powf+0x3b4>)
 80182fc:	429c      	cmp	r4, r3
 80182fe:	dd02      	ble.n	8018306 <__ieee754_powf+0x162>
 8018300:	2d00      	cmp	r5, #0
 8018302:	dcf5      	bgt.n	80182f0 <__ieee754_powf+0x14c>
 8018304:	e79e      	b.n	8018244 <__ieee754_powf+0xa0>
 8018306:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801830a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801830e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801855c <__ieee754_powf+0x3b8>
 8018312:	eef1 6a40 	vneg.f32	s13, s0
 8018316:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801831a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801831e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018322:	eee7 7a40 	vfms.f32	s15, s14, s0
 8018326:	ee60 0a00 	vmul.f32	s1, s0, s0
 801832a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8018560 <__ieee754_powf+0x3bc>
 801832e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8018332:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8018564 <__ieee754_powf+0x3c0>
 8018336:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801833a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801833e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8018568 <__ieee754_powf+0x3c4>
 8018342:	eeb0 6a67 	vmov.f32	s12, s15
 8018346:	eea0 6a07 	vfma.f32	s12, s0, s14
 801834a:	ee16 3a10 	vmov	r3, s12
 801834e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018352:	f023 030f 	bic.w	r3, r3, #15
 8018356:	ee00 3a90 	vmov	s1, r3
 801835a:	eee6 0a87 	vfma.f32	s1, s13, s14
 801835e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018362:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8018366:	f025 050f 	bic.w	r5, r5, #15
 801836a:	ee07 5a10 	vmov	s14, r5
 801836e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018372:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018376:	ee07 3a90 	vmov	s15, r3
 801837a:	eee7 0a27 	vfma.f32	s1, s14, s15
 801837e:	3e01      	subs	r6, #1
 8018380:	ea56 0200 	orrs.w	r2, r6, r0
 8018384:	ee07 5a10 	vmov	s14, r5
 8018388:	ee67 7a87 	vmul.f32	s15, s15, s14
 801838c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018390:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018394:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018398:	ee17 4a10 	vmov	r4, s14
 801839c:	bf08      	it	eq
 801839e:	eeb0 8a40 	vmoveq.f32	s16, s0
 80183a2:	2c00      	cmp	r4, #0
 80183a4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80183a8:	f340 8184 	ble.w	80186b4 <__ieee754_powf+0x510>
 80183ac:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80183b0:	f340 80fc 	ble.w	80185ac <__ieee754_powf+0x408>
 80183b4:	eddf 7a67 	vldr	s15, [pc, #412]	; 8018554 <__ieee754_powf+0x3b0>
 80183b8:	ee28 0a27 	vmul.f32	s0, s16, s15
 80183bc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80183c0:	e742      	b.n	8018248 <__ieee754_powf+0xa4>
 80183c2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 80183c6:	bfbf      	itttt	lt
 80183c8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801856c <__ieee754_powf+0x3c8>
 80183cc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80183d0:	f06f 0217 	mvnlt.w	r2, #23
 80183d4:	ee17 4a90 	vmovlt	r4, s15
 80183d8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 80183dc:	bfa8      	it	ge
 80183de:	2200      	movge	r2, #0
 80183e0:	3b7f      	subs	r3, #127	; 0x7f
 80183e2:	4413      	add	r3, r2
 80183e4:	4a62      	ldr	r2, [pc, #392]	; (8018570 <__ieee754_powf+0x3cc>)
 80183e6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80183ea:	4294      	cmp	r4, r2
 80183ec:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 80183f0:	dd06      	ble.n	8018400 <__ieee754_powf+0x25c>
 80183f2:	4a60      	ldr	r2, [pc, #384]	; (8018574 <__ieee754_powf+0x3d0>)
 80183f4:	4294      	cmp	r4, r2
 80183f6:	f340 80a5 	ble.w	8018544 <__ieee754_powf+0x3a0>
 80183fa:	3301      	adds	r3, #1
 80183fc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018400:	2400      	movs	r4, #0
 8018402:	4a5d      	ldr	r2, [pc, #372]	; (8018578 <__ieee754_powf+0x3d4>)
 8018404:	00a7      	lsls	r7, r4, #2
 8018406:	443a      	add	r2, r7
 8018408:	ee07 1a90 	vmov	s15, r1
 801840c:	ed92 7a00 	vldr	s14, [r2]
 8018410:	4a5a      	ldr	r2, [pc, #360]	; (801857c <__ieee754_powf+0x3d8>)
 8018412:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018416:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801841a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801841e:	1049      	asrs	r1, r1, #1
 8018420:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018424:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018428:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801842c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8018430:	ee06 1a10 	vmov	s12, r1
 8018434:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8018438:	ee14 ca90 	vmov	ip, s9
 801843c:	ea02 0c0c 	and.w	ip, r2, ip
 8018440:	ee05 ca10 	vmov	s10, ip
 8018444:	eeb1 4a45 	vneg.f32	s8, s10
 8018448:	eee4 5a06 	vfma.f32	s11, s8, s12
 801844c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8018450:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8018580 <__ieee754_powf+0x3dc>
 8018454:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8018458:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801845c:	eee4 5a06 	vfma.f32	s11, s8, s12
 8018460:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8018464:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8018468:	eddf 5a46 	vldr	s11, [pc, #280]	; 8018584 <__ieee754_powf+0x3e0>
 801846c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8018470:	eddf 5a45 	vldr	s11, [pc, #276]	; 8018588 <__ieee754_powf+0x3e4>
 8018474:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018478:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801855c <__ieee754_powf+0x3b8>
 801847c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018480:	eddf 5a42 	vldr	s11, [pc, #264]	; 801858c <__ieee754_powf+0x3e8>
 8018484:	eee7 5a27 	vfma.f32	s11, s14, s15
 8018488:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8018590 <__ieee754_powf+0x3ec>
 801848c:	ee75 6a24 	vadd.f32	s13, s10, s9
 8018490:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018494:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018498:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801849c:	eef0 7a65 	vmov.f32	s15, s11
 80184a0:	eee3 6a87 	vfma.f32	s13, s7, s14
 80184a4:	eee5 7a05 	vfma.f32	s15, s10, s10
 80184a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80184ac:	ee17 1a90 	vmov	r1, s15
 80184b0:	4011      	ands	r1, r2
 80184b2:	ee07 1a90 	vmov	s15, r1
 80184b6:	ee37 7ae5 	vsub.f32	s14, s15, s11
 80184ba:	eddf 5a36 	vldr	s11, [pc, #216]	; 8018594 <__ieee754_powf+0x3f0>
 80184be:	eea4 7a05 	vfma.f32	s14, s8, s10
 80184c2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80184c6:	ee27 7a24 	vmul.f32	s14, s14, s9
 80184ca:	eea7 7a86 	vfma.f32	s14, s15, s12
 80184ce:	eeb0 6a47 	vmov.f32	s12, s14
 80184d2:	eea5 6a27 	vfma.f32	s12, s10, s15
 80184d6:	ee16 1a10 	vmov	r1, s12
 80184da:	4011      	ands	r1, r2
 80184dc:	ee06 1a90 	vmov	s13, r1
 80184e0:	eee4 6a27 	vfma.f32	s13, s8, s15
 80184e4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8018598 <__ieee754_powf+0x3f4>
 80184e8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80184ec:	ee06 1a10 	vmov	s12, r1
 80184f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80184f4:	eddf 7a29 	vldr	s15, [pc, #164]	; 801859c <__ieee754_powf+0x3f8>
 80184f8:	4929      	ldr	r1, [pc, #164]	; (80185a0 <__ieee754_powf+0x3fc>)
 80184fa:	eea6 7a27 	vfma.f32	s14, s12, s15
 80184fe:	4439      	add	r1, r7
 8018500:	edd1 7a00 	vldr	s15, [r1]
 8018504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018508:	ee07 3a90 	vmov	s15, r3
 801850c:	eef0 0a47 	vmov.f32	s1, s14
 8018510:	4b24      	ldr	r3, [pc, #144]	; (80185a4 <__ieee754_powf+0x400>)
 8018512:	eee6 0a25 	vfma.f32	s1, s12, s11
 8018516:	443b      	add	r3, r7
 8018518:	ed93 5a00 	vldr	s10, [r3]
 801851c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018520:	ee70 0a85 	vadd.f32	s1, s1, s10
 8018524:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8018528:	ee17 3a90 	vmov	r3, s15
 801852c:	4013      	ands	r3, r2
 801852e:	ee07 3a90 	vmov	s15, r3
 8018532:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018536:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801853a:	eee6 7a65 	vfms.f32	s15, s12, s11
 801853e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018542:	e70e      	b.n	8018362 <__ieee754_powf+0x1be>
 8018544:	2401      	movs	r4, #1
 8018546:	e75c      	b.n	8018402 <__ieee754_powf+0x25e>
 8018548:	0801a013 	.word	0x0801a013
 801854c:	00000000 	.word	0x00000000
 8018550:	3f7ffff7 	.word	0x3f7ffff7
 8018554:	7149f2ca 	.word	0x7149f2ca
 8018558:	3f800007 	.word	0x3f800007
 801855c:	3eaaaaab 	.word	0x3eaaaaab
 8018560:	36eca570 	.word	0x36eca570
 8018564:	3fb8aa3b 	.word	0x3fb8aa3b
 8018568:	3fb8aa00 	.word	0x3fb8aa00
 801856c:	4b800000 	.word	0x4b800000
 8018570:	001cc471 	.word	0x001cc471
 8018574:	005db3d6 	.word	0x005db3d6
 8018578:	0801a470 	.word	0x0801a470
 801857c:	fffff000 	.word	0xfffff000
 8018580:	3e6c3255 	.word	0x3e6c3255
 8018584:	3e53f142 	.word	0x3e53f142
 8018588:	3e8ba305 	.word	0x3e8ba305
 801858c:	3edb6db7 	.word	0x3edb6db7
 8018590:	3f19999a 	.word	0x3f19999a
 8018594:	3f763800 	.word	0x3f763800
 8018598:	3f76384f 	.word	0x3f76384f
 801859c:	369dc3a0 	.word	0x369dc3a0
 80185a0:	0801a480 	.word	0x0801a480
 80185a4:	0801a478 	.word	0x0801a478
 80185a8:	3338aa3c 	.word	0x3338aa3c
 80185ac:	f040 8092 	bne.w	80186d4 <__ieee754_powf+0x530>
 80185b0:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80185a8 <__ieee754_powf+0x404>
 80185b4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80185b8:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80185bc:	eef4 6ac7 	vcmpe.f32	s13, s14
 80185c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185c4:	f73f aef6 	bgt.w	80183b4 <__ieee754_powf+0x210>
 80185c8:	15db      	asrs	r3, r3, #23
 80185ca:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 80185ce:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80185d2:	4103      	asrs	r3, r0
 80185d4:	4423      	add	r3, r4
 80185d6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80185da:	4947      	ldr	r1, [pc, #284]	; (80186f8 <__ieee754_powf+0x554>)
 80185dc:	3a7f      	subs	r2, #127	; 0x7f
 80185de:	4111      	asrs	r1, r2
 80185e0:	ea23 0101 	bic.w	r1, r3, r1
 80185e4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80185e8:	ee07 1a10 	vmov	s14, r1
 80185ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80185f0:	f1c2 0217 	rsb	r2, r2, #23
 80185f4:	4110      	asrs	r0, r2
 80185f6:	2c00      	cmp	r4, #0
 80185f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80185fc:	bfb8      	it	lt
 80185fe:	4240      	neglt	r0, r0
 8018600:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8018604:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80186fc <__ieee754_powf+0x558>
 8018608:	ee17 3a10 	vmov	r3, s14
 801860c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018610:	f023 030f 	bic.w	r3, r3, #15
 8018614:	ee07 3a10 	vmov	s14, r3
 8018618:	ee77 7a67 	vsub.f32	s15, s14, s15
 801861c:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018620:	eddf 7a37 	vldr	s15, [pc, #220]	; 8018700 <__ieee754_powf+0x55c>
 8018624:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018628:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801862c:	eddf 6a35 	vldr	s13, [pc, #212]	; 8018704 <__ieee754_powf+0x560>
 8018630:	eeb0 0a67 	vmov.f32	s0, s15
 8018634:	eea7 0a26 	vfma.f32	s0, s14, s13
 8018638:	eeb0 6a40 	vmov.f32	s12, s0
 801863c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018640:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018644:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8018648:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8018708 <__ieee754_powf+0x564>
 801864c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801870c <__ieee754_powf+0x568>
 8018650:	eea7 6a26 	vfma.f32	s12, s14, s13
 8018654:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8018710 <__ieee754_powf+0x56c>
 8018658:	eee6 6a07 	vfma.f32	s13, s12, s14
 801865c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8018714 <__ieee754_powf+0x570>
 8018660:	eea6 6a87 	vfma.f32	s12, s13, s14
 8018664:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8018718 <__ieee754_powf+0x574>
 8018668:	eee6 6a07 	vfma.f32	s13, s12, s14
 801866c:	eeb0 6a40 	vmov.f32	s12, s0
 8018670:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8018674:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8018678:	eeb0 7a46 	vmov.f32	s14, s12
 801867c:	ee77 6a66 	vsub.f32	s13, s14, s13
 8018680:	ee20 6a06 	vmul.f32	s12, s0, s12
 8018684:	eee0 7a27 	vfma.f32	s15, s0, s15
 8018688:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801868c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018690:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018694:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018698:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801869c:	ee10 3a10 	vmov	r3, s0
 80186a0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80186a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80186a8:	da1a      	bge.n	80186e0 <__ieee754_powf+0x53c>
 80186aa:	f001 f829 	bl	8019700 <scalbnf>
 80186ae:	ee20 0a08 	vmul.f32	s0, s0, s16
 80186b2:	e5c9      	b.n	8018248 <__ieee754_powf+0xa4>
 80186b4:	4a19      	ldr	r2, [pc, #100]	; (801871c <__ieee754_powf+0x578>)
 80186b6:	4293      	cmp	r3, r2
 80186b8:	dd02      	ble.n	80186c0 <__ieee754_powf+0x51c>
 80186ba:	eddf 7a19 	vldr	s15, [pc, #100]	; 8018720 <__ieee754_powf+0x57c>
 80186be:	e67b      	b.n	80183b8 <__ieee754_powf+0x214>
 80186c0:	d108      	bne.n	80186d4 <__ieee754_powf+0x530>
 80186c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80186c6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80186ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ce:	f6ff af7b 	blt.w	80185c8 <__ieee754_powf+0x424>
 80186d2:	e7f2      	b.n	80186ba <__ieee754_powf+0x516>
 80186d4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 80186d8:	f73f af76 	bgt.w	80185c8 <__ieee754_powf+0x424>
 80186dc:	2000      	movs	r0, #0
 80186de:	e78f      	b.n	8018600 <__ieee754_powf+0x45c>
 80186e0:	ee00 3a10 	vmov	s0, r3
 80186e4:	e7e3      	b.n	80186ae <__ieee754_powf+0x50a>
 80186e6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80186ea:	e5ad      	b.n	8018248 <__ieee754_powf+0xa4>
 80186ec:	eeb0 0a68 	vmov.f32	s0, s17
 80186f0:	e5aa      	b.n	8018248 <__ieee754_powf+0xa4>
 80186f2:	eeb0 0a48 	vmov.f32	s0, s16
 80186f6:	e5a7      	b.n	8018248 <__ieee754_powf+0xa4>
 80186f8:	007fffff 	.word	0x007fffff
 80186fc:	3f317218 	.word	0x3f317218
 8018700:	35bfbe8c 	.word	0x35bfbe8c
 8018704:	3f317200 	.word	0x3f317200
 8018708:	3331bb4c 	.word	0x3331bb4c
 801870c:	b5ddea0e 	.word	0xb5ddea0e
 8018710:	388ab355 	.word	0x388ab355
 8018714:	bb360b61 	.word	0xbb360b61
 8018718:	3e2aaaab 	.word	0x3e2aaaab
 801871c:	43160000 	.word	0x43160000
 8018720:	0da24260 	.word	0x0da24260

08018724 <__ieee754_sqrtf>:
 8018724:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018728:	4770      	bx	lr
 801872a:	0000      	movs	r0, r0
 801872c:	0000      	movs	r0, r0
	...

08018730 <__kernel_cos>:
 8018730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018734:	ec59 8b10 	vmov	r8, r9, d0
 8018738:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801873c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8018740:	ed2d 8b02 	vpush	{d8}
 8018744:	eeb0 8a41 	vmov.f32	s16, s2
 8018748:	eef0 8a61 	vmov.f32	s17, s3
 801874c:	da07      	bge.n	801875e <__kernel_cos+0x2e>
 801874e:	ee10 0a10 	vmov	r0, s0
 8018752:	4649      	mov	r1, r9
 8018754:	f7e8 fa20 	bl	8000b98 <__aeabi_d2iz>
 8018758:	2800      	cmp	r0, #0
 801875a:	f000 8089 	beq.w	8018870 <__kernel_cos+0x140>
 801875e:	4642      	mov	r2, r8
 8018760:	464b      	mov	r3, r9
 8018762:	4640      	mov	r0, r8
 8018764:	4649      	mov	r1, r9
 8018766:	f7e7 ff67 	bl	8000638 <__aeabi_dmul>
 801876a:	2200      	movs	r2, #0
 801876c:	4b4e      	ldr	r3, [pc, #312]	; (80188a8 <__kernel_cos+0x178>)
 801876e:	4604      	mov	r4, r0
 8018770:	460d      	mov	r5, r1
 8018772:	f7e7 ff61 	bl	8000638 <__aeabi_dmul>
 8018776:	a340      	add	r3, pc, #256	; (adr r3, 8018878 <__kernel_cos+0x148>)
 8018778:	e9d3 2300 	ldrd	r2, r3, [r3]
 801877c:	4682      	mov	sl, r0
 801877e:	468b      	mov	fp, r1
 8018780:	4620      	mov	r0, r4
 8018782:	4629      	mov	r1, r5
 8018784:	f7e7 ff58 	bl	8000638 <__aeabi_dmul>
 8018788:	a33d      	add	r3, pc, #244	; (adr r3, 8018880 <__kernel_cos+0x150>)
 801878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801878e:	f7e7 fd9d 	bl	80002cc <__adddf3>
 8018792:	4622      	mov	r2, r4
 8018794:	462b      	mov	r3, r5
 8018796:	f7e7 ff4f 	bl	8000638 <__aeabi_dmul>
 801879a:	a33b      	add	r3, pc, #236	; (adr r3, 8018888 <__kernel_cos+0x158>)
 801879c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187a0:	f7e7 fd92 	bl	80002c8 <__aeabi_dsub>
 80187a4:	4622      	mov	r2, r4
 80187a6:	462b      	mov	r3, r5
 80187a8:	f7e7 ff46 	bl	8000638 <__aeabi_dmul>
 80187ac:	a338      	add	r3, pc, #224	; (adr r3, 8018890 <__kernel_cos+0x160>)
 80187ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187b2:	f7e7 fd8b 	bl	80002cc <__adddf3>
 80187b6:	4622      	mov	r2, r4
 80187b8:	462b      	mov	r3, r5
 80187ba:	f7e7 ff3d 	bl	8000638 <__aeabi_dmul>
 80187be:	a336      	add	r3, pc, #216	; (adr r3, 8018898 <__kernel_cos+0x168>)
 80187c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187c4:	f7e7 fd80 	bl	80002c8 <__aeabi_dsub>
 80187c8:	4622      	mov	r2, r4
 80187ca:	462b      	mov	r3, r5
 80187cc:	f7e7 ff34 	bl	8000638 <__aeabi_dmul>
 80187d0:	a333      	add	r3, pc, #204	; (adr r3, 80188a0 <__kernel_cos+0x170>)
 80187d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187d6:	f7e7 fd79 	bl	80002cc <__adddf3>
 80187da:	4622      	mov	r2, r4
 80187dc:	462b      	mov	r3, r5
 80187de:	f7e7 ff2b 	bl	8000638 <__aeabi_dmul>
 80187e2:	4622      	mov	r2, r4
 80187e4:	462b      	mov	r3, r5
 80187e6:	f7e7 ff27 	bl	8000638 <__aeabi_dmul>
 80187ea:	ec53 2b18 	vmov	r2, r3, d8
 80187ee:	4604      	mov	r4, r0
 80187f0:	460d      	mov	r5, r1
 80187f2:	4640      	mov	r0, r8
 80187f4:	4649      	mov	r1, r9
 80187f6:	f7e7 ff1f 	bl	8000638 <__aeabi_dmul>
 80187fa:	460b      	mov	r3, r1
 80187fc:	4602      	mov	r2, r0
 80187fe:	4629      	mov	r1, r5
 8018800:	4620      	mov	r0, r4
 8018802:	f7e7 fd61 	bl	80002c8 <__aeabi_dsub>
 8018806:	4b29      	ldr	r3, [pc, #164]	; (80188ac <__kernel_cos+0x17c>)
 8018808:	429e      	cmp	r6, r3
 801880a:	4680      	mov	r8, r0
 801880c:	4689      	mov	r9, r1
 801880e:	dc11      	bgt.n	8018834 <__kernel_cos+0x104>
 8018810:	4602      	mov	r2, r0
 8018812:	460b      	mov	r3, r1
 8018814:	4650      	mov	r0, sl
 8018816:	4659      	mov	r1, fp
 8018818:	f7e7 fd56 	bl	80002c8 <__aeabi_dsub>
 801881c:	460b      	mov	r3, r1
 801881e:	4924      	ldr	r1, [pc, #144]	; (80188b0 <__kernel_cos+0x180>)
 8018820:	4602      	mov	r2, r0
 8018822:	2000      	movs	r0, #0
 8018824:	f7e7 fd50 	bl	80002c8 <__aeabi_dsub>
 8018828:	ecbd 8b02 	vpop	{d8}
 801882c:	ec41 0b10 	vmov	d0, r0, r1
 8018830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018834:	4b1f      	ldr	r3, [pc, #124]	; (80188b4 <__kernel_cos+0x184>)
 8018836:	491e      	ldr	r1, [pc, #120]	; (80188b0 <__kernel_cos+0x180>)
 8018838:	429e      	cmp	r6, r3
 801883a:	bfcc      	ite	gt
 801883c:	4d1e      	ldrgt	r5, [pc, #120]	; (80188b8 <__kernel_cos+0x188>)
 801883e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8018842:	2400      	movs	r4, #0
 8018844:	4622      	mov	r2, r4
 8018846:	462b      	mov	r3, r5
 8018848:	2000      	movs	r0, #0
 801884a:	f7e7 fd3d 	bl	80002c8 <__aeabi_dsub>
 801884e:	4622      	mov	r2, r4
 8018850:	4606      	mov	r6, r0
 8018852:	460f      	mov	r7, r1
 8018854:	462b      	mov	r3, r5
 8018856:	4650      	mov	r0, sl
 8018858:	4659      	mov	r1, fp
 801885a:	f7e7 fd35 	bl	80002c8 <__aeabi_dsub>
 801885e:	4642      	mov	r2, r8
 8018860:	464b      	mov	r3, r9
 8018862:	f7e7 fd31 	bl	80002c8 <__aeabi_dsub>
 8018866:	4602      	mov	r2, r0
 8018868:	460b      	mov	r3, r1
 801886a:	4630      	mov	r0, r6
 801886c:	4639      	mov	r1, r7
 801886e:	e7d9      	b.n	8018824 <__kernel_cos+0xf4>
 8018870:	2000      	movs	r0, #0
 8018872:	490f      	ldr	r1, [pc, #60]	; (80188b0 <__kernel_cos+0x180>)
 8018874:	e7d8      	b.n	8018828 <__kernel_cos+0xf8>
 8018876:	bf00      	nop
 8018878:	be8838d4 	.word	0xbe8838d4
 801887c:	bda8fae9 	.word	0xbda8fae9
 8018880:	bdb4b1c4 	.word	0xbdb4b1c4
 8018884:	3e21ee9e 	.word	0x3e21ee9e
 8018888:	809c52ad 	.word	0x809c52ad
 801888c:	3e927e4f 	.word	0x3e927e4f
 8018890:	19cb1590 	.word	0x19cb1590
 8018894:	3efa01a0 	.word	0x3efa01a0
 8018898:	16c15177 	.word	0x16c15177
 801889c:	3f56c16c 	.word	0x3f56c16c
 80188a0:	5555554c 	.word	0x5555554c
 80188a4:	3fa55555 	.word	0x3fa55555
 80188a8:	3fe00000 	.word	0x3fe00000
 80188ac:	3fd33332 	.word	0x3fd33332
 80188b0:	3ff00000 	.word	0x3ff00000
 80188b4:	3fe90000 	.word	0x3fe90000
 80188b8:	3fd20000 	.word	0x3fd20000
 80188bc:	00000000 	.word	0x00000000

080188c0 <__kernel_rem_pio2>:
 80188c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c4:	ed2d 8b02 	vpush	{d8}
 80188c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80188cc:	1ed4      	subs	r4, r2, #3
 80188ce:	9308      	str	r3, [sp, #32]
 80188d0:	9101      	str	r1, [sp, #4]
 80188d2:	4bc5      	ldr	r3, [pc, #788]	; (8018be8 <__kernel_rem_pio2+0x328>)
 80188d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80188d6:	9009      	str	r0, [sp, #36]	; 0x24
 80188d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80188dc:	9304      	str	r3, [sp, #16]
 80188de:	9b08      	ldr	r3, [sp, #32]
 80188e0:	3b01      	subs	r3, #1
 80188e2:	9307      	str	r3, [sp, #28]
 80188e4:	2318      	movs	r3, #24
 80188e6:	fb94 f4f3 	sdiv	r4, r4, r3
 80188ea:	f06f 0317 	mvn.w	r3, #23
 80188ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80188f2:	fb04 3303 	mla	r3, r4, r3, r3
 80188f6:	eb03 0a02 	add.w	sl, r3, r2
 80188fa:	9b04      	ldr	r3, [sp, #16]
 80188fc:	9a07      	ldr	r2, [sp, #28]
 80188fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8018bd8 <__kernel_rem_pio2+0x318>
 8018902:	eb03 0802 	add.w	r8, r3, r2
 8018906:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018908:	1aa7      	subs	r7, r4, r2
 801890a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801890e:	ae22      	add	r6, sp, #136	; 0x88
 8018910:	2500      	movs	r5, #0
 8018912:	4545      	cmp	r5, r8
 8018914:	dd13      	ble.n	801893e <__kernel_rem_pio2+0x7e>
 8018916:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8018bd8 <__kernel_rem_pio2+0x318>
 801891a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801891e:	2600      	movs	r6, #0
 8018920:	9b04      	ldr	r3, [sp, #16]
 8018922:	429e      	cmp	r6, r3
 8018924:	dc32      	bgt.n	801898c <__kernel_rem_pio2+0xcc>
 8018926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018928:	9302      	str	r3, [sp, #8]
 801892a:	9b08      	ldr	r3, [sp, #32]
 801892c:	199d      	adds	r5, r3, r6
 801892e:	ab22      	add	r3, sp, #136	; 0x88
 8018930:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8018934:	9306      	str	r3, [sp, #24]
 8018936:	ec59 8b18 	vmov	r8, r9, d8
 801893a:	2700      	movs	r7, #0
 801893c:	e01f      	b.n	801897e <__kernel_rem_pio2+0xbe>
 801893e:	42ef      	cmn	r7, r5
 8018940:	d407      	bmi.n	8018952 <__kernel_rem_pio2+0x92>
 8018942:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8018946:	f7e7 fe0d 	bl	8000564 <__aeabi_i2d>
 801894a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801894e:	3501      	adds	r5, #1
 8018950:	e7df      	b.n	8018912 <__kernel_rem_pio2+0x52>
 8018952:	ec51 0b18 	vmov	r0, r1, d8
 8018956:	e7f8      	b.n	801894a <__kernel_rem_pio2+0x8a>
 8018958:	9906      	ldr	r1, [sp, #24]
 801895a:	9d02      	ldr	r5, [sp, #8]
 801895c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8018960:	9106      	str	r1, [sp, #24]
 8018962:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8018966:	9502      	str	r5, [sp, #8]
 8018968:	f7e7 fe66 	bl	8000638 <__aeabi_dmul>
 801896c:	4602      	mov	r2, r0
 801896e:	460b      	mov	r3, r1
 8018970:	4640      	mov	r0, r8
 8018972:	4649      	mov	r1, r9
 8018974:	f7e7 fcaa 	bl	80002cc <__adddf3>
 8018978:	3701      	adds	r7, #1
 801897a:	4680      	mov	r8, r0
 801897c:	4689      	mov	r9, r1
 801897e:	9b07      	ldr	r3, [sp, #28]
 8018980:	429f      	cmp	r7, r3
 8018982:	dde9      	ble.n	8018958 <__kernel_rem_pio2+0x98>
 8018984:	e8eb 8902 	strd	r8, r9, [fp], #8
 8018988:	3601      	adds	r6, #1
 801898a:	e7c9      	b.n	8018920 <__kernel_rem_pio2+0x60>
 801898c:	9b04      	ldr	r3, [sp, #16]
 801898e:	aa0e      	add	r2, sp, #56	; 0x38
 8018990:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018994:	930c      	str	r3, [sp, #48]	; 0x30
 8018996:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8018998:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801899c:	9c04      	ldr	r4, [sp, #16]
 801899e:	930b      	str	r3, [sp, #44]	; 0x2c
 80189a0:	ab9a      	add	r3, sp, #616	; 0x268
 80189a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80189a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80189aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80189ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80189b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80189b6:	ab9a      	add	r3, sp, #616	; 0x268
 80189b8:	445b      	add	r3, fp
 80189ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80189be:	2500      	movs	r5, #0
 80189c0:	1b63      	subs	r3, r4, r5
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	dc78      	bgt.n	8018ab8 <__kernel_rem_pio2+0x1f8>
 80189c6:	4650      	mov	r0, sl
 80189c8:	ec49 8b10 	vmov	d0, r8, r9
 80189cc:	f000 fdb0 	bl	8019530 <scalbn>
 80189d0:	ec57 6b10 	vmov	r6, r7, d0
 80189d4:	2200      	movs	r2, #0
 80189d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80189da:	ee10 0a10 	vmov	r0, s0
 80189de:	4639      	mov	r1, r7
 80189e0:	f7e7 fe2a 	bl	8000638 <__aeabi_dmul>
 80189e4:	ec41 0b10 	vmov	d0, r0, r1
 80189e8:	f000 fd12 	bl	8019410 <floor>
 80189ec:	2200      	movs	r2, #0
 80189ee:	ec51 0b10 	vmov	r0, r1, d0
 80189f2:	4b7e      	ldr	r3, [pc, #504]	; (8018bec <__kernel_rem_pio2+0x32c>)
 80189f4:	f7e7 fe20 	bl	8000638 <__aeabi_dmul>
 80189f8:	4602      	mov	r2, r0
 80189fa:	460b      	mov	r3, r1
 80189fc:	4630      	mov	r0, r6
 80189fe:	4639      	mov	r1, r7
 8018a00:	f7e7 fc62 	bl	80002c8 <__aeabi_dsub>
 8018a04:	460f      	mov	r7, r1
 8018a06:	4606      	mov	r6, r0
 8018a08:	f7e8 f8c6 	bl	8000b98 <__aeabi_d2iz>
 8018a0c:	9006      	str	r0, [sp, #24]
 8018a0e:	f7e7 fda9 	bl	8000564 <__aeabi_i2d>
 8018a12:	4602      	mov	r2, r0
 8018a14:	460b      	mov	r3, r1
 8018a16:	4630      	mov	r0, r6
 8018a18:	4639      	mov	r1, r7
 8018a1a:	f7e7 fc55 	bl	80002c8 <__aeabi_dsub>
 8018a1e:	f1ba 0f00 	cmp.w	sl, #0
 8018a22:	4606      	mov	r6, r0
 8018a24:	460f      	mov	r7, r1
 8018a26:	dd6c      	ble.n	8018b02 <__kernel_rem_pio2+0x242>
 8018a28:	1e62      	subs	r2, r4, #1
 8018a2a:	ab0e      	add	r3, sp, #56	; 0x38
 8018a2c:	f1ca 0118 	rsb	r1, sl, #24
 8018a30:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018a34:	9d06      	ldr	r5, [sp, #24]
 8018a36:	fa40 f301 	asr.w	r3, r0, r1
 8018a3a:	441d      	add	r5, r3
 8018a3c:	408b      	lsls	r3, r1
 8018a3e:	1ac0      	subs	r0, r0, r3
 8018a40:	ab0e      	add	r3, sp, #56	; 0x38
 8018a42:	9506      	str	r5, [sp, #24]
 8018a44:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8018a48:	f1ca 0317 	rsb	r3, sl, #23
 8018a4c:	fa40 f303 	asr.w	r3, r0, r3
 8018a50:	9302      	str	r3, [sp, #8]
 8018a52:	9b02      	ldr	r3, [sp, #8]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	dd62      	ble.n	8018b1e <__kernel_rem_pio2+0x25e>
 8018a58:	9b06      	ldr	r3, [sp, #24]
 8018a5a:	2200      	movs	r2, #0
 8018a5c:	3301      	adds	r3, #1
 8018a5e:	9306      	str	r3, [sp, #24]
 8018a60:	4615      	mov	r5, r2
 8018a62:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8018a66:	4294      	cmp	r4, r2
 8018a68:	f300 8095 	bgt.w	8018b96 <__kernel_rem_pio2+0x2d6>
 8018a6c:	f1ba 0f00 	cmp.w	sl, #0
 8018a70:	dd07      	ble.n	8018a82 <__kernel_rem_pio2+0x1c2>
 8018a72:	f1ba 0f01 	cmp.w	sl, #1
 8018a76:	f000 80a2 	beq.w	8018bbe <__kernel_rem_pio2+0x2fe>
 8018a7a:	f1ba 0f02 	cmp.w	sl, #2
 8018a7e:	f000 80c1 	beq.w	8018c04 <__kernel_rem_pio2+0x344>
 8018a82:	9b02      	ldr	r3, [sp, #8]
 8018a84:	2b02      	cmp	r3, #2
 8018a86:	d14a      	bne.n	8018b1e <__kernel_rem_pio2+0x25e>
 8018a88:	4632      	mov	r2, r6
 8018a8a:	463b      	mov	r3, r7
 8018a8c:	2000      	movs	r0, #0
 8018a8e:	4958      	ldr	r1, [pc, #352]	; (8018bf0 <__kernel_rem_pio2+0x330>)
 8018a90:	f7e7 fc1a 	bl	80002c8 <__aeabi_dsub>
 8018a94:	4606      	mov	r6, r0
 8018a96:	460f      	mov	r7, r1
 8018a98:	2d00      	cmp	r5, #0
 8018a9a:	d040      	beq.n	8018b1e <__kernel_rem_pio2+0x25e>
 8018a9c:	4650      	mov	r0, sl
 8018a9e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8018be0 <__kernel_rem_pio2+0x320>
 8018aa2:	f000 fd45 	bl	8019530 <scalbn>
 8018aa6:	4630      	mov	r0, r6
 8018aa8:	4639      	mov	r1, r7
 8018aaa:	ec53 2b10 	vmov	r2, r3, d0
 8018aae:	f7e7 fc0b 	bl	80002c8 <__aeabi_dsub>
 8018ab2:	4606      	mov	r6, r0
 8018ab4:	460f      	mov	r7, r1
 8018ab6:	e032      	b.n	8018b1e <__kernel_rem_pio2+0x25e>
 8018ab8:	2200      	movs	r2, #0
 8018aba:	4b4e      	ldr	r3, [pc, #312]	; (8018bf4 <__kernel_rem_pio2+0x334>)
 8018abc:	4640      	mov	r0, r8
 8018abe:	4649      	mov	r1, r9
 8018ac0:	f7e7 fdba 	bl	8000638 <__aeabi_dmul>
 8018ac4:	f7e8 f868 	bl	8000b98 <__aeabi_d2iz>
 8018ac8:	f7e7 fd4c 	bl	8000564 <__aeabi_i2d>
 8018acc:	2200      	movs	r2, #0
 8018ace:	4b4a      	ldr	r3, [pc, #296]	; (8018bf8 <__kernel_rem_pio2+0x338>)
 8018ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ad4:	f7e7 fdb0 	bl	8000638 <__aeabi_dmul>
 8018ad8:	4602      	mov	r2, r0
 8018ada:	460b      	mov	r3, r1
 8018adc:	4640      	mov	r0, r8
 8018ade:	4649      	mov	r1, r9
 8018ae0:	f7e7 fbf2 	bl	80002c8 <__aeabi_dsub>
 8018ae4:	f7e8 f858 	bl	8000b98 <__aeabi_d2iz>
 8018ae8:	ab0e      	add	r3, sp, #56	; 0x38
 8018aea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8018aee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8018af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018af6:	f7e7 fbe9 	bl	80002cc <__adddf3>
 8018afa:	3501      	adds	r5, #1
 8018afc:	4680      	mov	r8, r0
 8018afe:	4689      	mov	r9, r1
 8018b00:	e75e      	b.n	80189c0 <__kernel_rem_pio2+0x100>
 8018b02:	d105      	bne.n	8018b10 <__kernel_rem_pio2+0x250>
 8018b04:	1e63      	subs	r3, r4, #1
 8018b06:	aa0e      	add	r2, sp, #56	; 0x38
 8018b08:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8018b0c:	15c3      	asrs	r3, r0, #23
 8018b0e:	e79f      	b.n	8018a50 <__kernel_rem_pio2+0x190>
 8018b10:	2200      	movs	r2, #0
 8018b12:	4b3a      	ldr	r3, [pc, #232]	; (8018bfc <__kernel_rem_pio2+0x33c>)
 8018b14:	f7e8 f816 	bl	8000b44 <__aeabi_dcmpge>
 8018b18:	2800      	cmp	r0, #0
 8018b1a:	d139      	bne.n	8018b90 <__kernel_rem_pio2+0x2d0>
 8018b1c:	9002      	str	r0, [sp, #8]
 8018b1e:	2200      	movs	r2, #0
 8018b20:	2300      	movs	r3, #0
 8018b22:	4630      	mov	r0, r6
 8018b24:	4639      	mov	r1, r7
 8018b26:	f7e7 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8018b2a:	2800      	cmp	r0, #0
 8018b2c:	f000 80c7 	beq.w	8018cbe <__kernel_rem_pio2+0x3fe>
 8018b30:	1e65      	subs	r5, r4, #1
 8018b32:	462b      	mov	r3, r5
 8018b34:	2200      	movs	r2, #0
 8018b36:	9904      	ldr	r1, [sp, #16]
 8018b38:	428b      	cmp	r3, r1
 8018b3a:	da6a      	bge.n	8018c12 <__kernel_rem_pio2+0x352>
 8018b3c:	2a00      	cmp	r2, #0
 8018b3e:	f000 8088 	beq.w	8018c52 <__kernel_rem_pio2+0x392>
 8018b42:	ab0e      	add	r3, sp, #56	; 0x38
 8018b44:	f1aa 0a18 	sub.w	sl, sl, #24
 8018b48:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8018b4c:	2b00      	cmp	r3, #0
 8018b4e:	f000 80b4 	beq.w	8018cba <__kernel_rem_pio2+0x3fa>
 8018b52:	4650      	mov	r0, sl
 8018b54:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8018be0 <__kernel_rem_pio2+0x320>
 8018b58:	f000 fcea 	bl	8019530 <scalbn>
 8018b5c:	00ec      	lsls	r4, r5, #3
 8018b5e:	ab72      	add	r3, sp, #456	; 0x1c8
 8018b60:	191e      	adds	r6, r3, r4
 8018b62:	ec59 8b10 	vmov	r8, r9, d0
 8018b66:	f106 0a08 	add.w	sl, r6, #8
 8018b6a:	462f      	mov	r7, r5
 8018b6c:	2f00      	cmp	r7, #0
 8018b6e:	f280 80df 	bge.w	8018d30 <__kernel_rem_pio2+0x470>
 8018b72:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8018bd8 <__kernel_rem_pio2+0x318>
 8018b76:	f04f 0a00 	mov.w	sl, #0
 8018b7a:	eba5 030a 	sub.w	r3, r5, sl
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	f2c0 810a 	blt.w	8018d98 <__kernel_rem_pio2+0x4d8>
 8018b84:	f8df b078 	ldr.w	fp, [pc, #120]	; 8018c00 <__kernel_rem_pio2+0x340>
 8018b88:	ec59 8b18 	vmov	r8, r9, d8
 8018b8c:	2700      	movs	r7, #0
 8018b8e:	e0f5      	b.n	8018d7c <__kernel_rem_pio2+0x4bc>
 8018b90:	2302      	movs	r3, #2
 8018b92:	9302      	str	r3, [sp, #8]
 8018b94:	e760      	b.n	8018a58 <__kernel_rem_pio2+0x198>
 8018b96:	ab0e      	add	r3, sp, #56	; 0x38
 8018b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018b9c:	b94d      	cbnz	r5, 8018bb2 <__kernel_rem_pio2+0x2f2>
 8018b9e:	b12b      	cbz	r3, 8018bac <__kernel_rem_pio2+0x2ec>
 8018ba0:	a80e      	add	r0, sp, #56	; 0x38
 8018ba2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8018ba6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018baa:	2301      	movs	r3, #1
 8018bac:	3201      	adds	r2, #1
 8018bae:	461d      	mov	r5, r3
 8018bb0:	e759      	b.n	8018a66 <__kernel_rem_pio2+0x1a6>
 8018bb2:	a80e      	add	r0, sp, #56	; 0x38
 8018bb4:	1acb      	subs	r3, r1, r3
 8018bb6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8018bba:	462b      	mov	r3, r5
 8018bbc:	e7f6      	b.n	8018bac <__kernel_rem_pio2+0x2ec>
 8018bbe:	1e62      	subs	r2, r4, #1
 8018bc0:	ab0e      	add	r3, sp, #56	; 0x38
 8018bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bc6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018bca:	a90e      	add	r1, sp, #56	; 0x38
 8018bcc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8018bd0:	e757      	b.n	8018a82 <__kernel_rem_pio2+0x1c2>
 8018bd2:	bf00      	nop
 8018bd4:	f3af 8000 	nop.w
	...
 8018be4:	3ff00000 	.word	0x3ff00000
 8018be8:	0801a4c8 	.word	0x0801a4c8
 8018bec:	40200000 	.word	0x40200000
 8018bf0:	3ff00000 	.word	0x3ff00000
 8018bf4:	3e700000 	.word	0x3e700000
 8018bf8:	41700000 	.word	0x41700000
 8018bfc:	3fe00000 	.word	0x3fe00000
 8018c00:	0801a488 	.word	0x0801a488
 8018c04:	1e62      	subs	r2, r4, #1
 8018c06:	ab0e      	add	r3, sp, #56	; 0x38
 8018c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c0c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8018c10:	e7db      	b.n	8018bca <__kernel_rem_pio2+0x30a>
 8018c12:	a90e      	add	r1, sp, #56	; 0x38
 8018c14:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8018c18:	3b01      	subs	r3, #1
 8018c1a:	430a      	orrs	r2, r1
 8018c1c:	e78b      	b.n	8018b36 <__kernel_rem_pio2+0x276>
 8018c1e:	3301      	adds	r3, #1
 8018c20:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8018c24:	2900      	cmp	r1, #0
 8018c26:	d0fa      	beq.n	8018c1e <__kernel_rem_pio2+0x35e>
 8018c28:	9a08      	ldr	r2, [sp, #32]
 8018c2a:	4422      	add	r2, r4
 8018c2c:	00d2      	lsls	r2, r2, #3
 8018c2e:	a922      	add	r1, sp, #136	; 0x88
 8018c30:	18e3      	adds	r3, r4, r3
 8018c32:	9206      	str	r2, [sp, #24]
 8018c34:	440a      	add	r2, r1
 8018c36:	9302      	str	r3, [sp, #8]
 8018c38:	f10b 0108 	add.w	r1, fp, #8
 8018c3c:	f102 0308 	add.w	r3, r2, #8
 8018c40:	1c66      	adds	r6, r4, #1
 8018c42:	910a      	str	r1, [sp, #40]	; 0x28
 8018c44:	2500      	movs	r5, #0
 8018c46:	930d      	str	r3, [sp, #52]	; 0x34
 8018c48:	9b02      	ldr	r3, [sp, #8]
 8018c4a:	42b3      	cmp	r3, r6
 8018c4c:	da04      	bge.n	8018c58 <__kernel_rem_pio2+0x398>
 8018c4e:	461c      	mov	r4, r3
 8018c50:	e6a6      	b.n	80189a0 <__kernel_rem_pio2+0xe0>
 8018c52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c54:	2301      	movs	r3, #1
 8018c56:	e7e3      	b.n	8018c20 <__kernel_rem_pio2+0x360>
 8018c58:	9b06      	ldr	r3, [sp, #24]
 8018c5a:	18ef      	adds	r7, r5, r3
 8018c5c:	ab22      	add	r3, sp, #136	; 0x88
 8018c5e:	441f      	add	r7, r3
 8018c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c62:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018c66:	f7e7 fc7d 	bl	8000564 <__aeabi_i2d>
 8018c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c6c:	461c      	mov	r4, r3
 8018c6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018c70:	e9c7 0100 	strd	r0, r1, [r7]
 8018c74:	eb03 0b05 	add.w	fp, r3, r5
 8018c78:	2700      	movs	r7, #0
 8018c7a:	f04f 0800 	mov.w	r8, #0
 8018c7e:	f04f 0900 	mov.w	r9, #0
 8018c82:	9b07      	ldr	r3, [sp, #28]
 8018c84:	429f      	cmp	r7, r3
 8018c86:	dd08      	ble.n	8018c9a <__kernel_rem_pio2+0x3da>
 8018c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018c8a:	aa72      	add	r2, sp, #456	; 0x1c8
 8018c8c:	18eb      	adds	r3, r5, r3
 8018c8e:	4413      	add	r3, r2
 8018c90:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8018c94:	3601      	adds	r6, #1
 8018c96:	3508      	adds	r5, #8
 8018c98:	e7d6      	b.n	8018c48 <__kernel_rem_pio2+0x388>
 8018c9a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8018c9e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8018ca2:	f7e7 fcc9 	bl	8000638 <__aeabi_dmul>
 8018ca6:	4602      	mov	r2, r0
 8018ca8:	460b      	mov	r3, r1
 8018caa:	4640      	mov	r0, r8
 8018cac:	4649      	mov	r1, r9
 8018cae:	f7e7 fb0d 	bl	80002cc <__adddf3>
 8018cb2:	3701      	adds	r7, #1
 8018cb4:	4680      	mov	r8, r0
 8018cb6:	4689      	mov	r9, r1
 8018cb8:	e7e3      	b.n	8018c82 <__kernel_rem_pio2+0x3c2>
 8018cba:	3d01      	subs	r5, #1
 8018cbc:	e741      	b.n	8018b42 <__kernel_rem_pio2+0x282>
 8018cbe:	f1ca 0000 	rsb	r0, sl, #0
 8018cc2:	ec47 6b10 	vmov	d0, r6, r7
 8018cc6:	f000 fc33 	bl	8019530 <scalbn>
 8018cca:	ec57 6b10 	vmov	r6, r7, d0
 8018cce:	2200      	movs	r2, #0
 8018cd0:	4b99      	ldr	r3, [pc, #612]	; (8018f38 <__kernel_rem_pio2+0x678>)
 8018cd2:	ee10 0a10 	vmov	r0, s0
 8018cd6:	4639      	mov	r1, r7
 8018cd8:	f7e7 ff34 	bl	8000b44 <__aeabi_dcmpge>
 8018cdc:	b1f8      	cbz	r0, 8018d1e <__kernel_rem_pio2+0x45e>
 8018cde:	2200      	movs	r2, #0
 8018ce0:	4b96      	ldr	r3, [pc, #600]	; (8018f3c <__kernel_rem_pio2+0x67c>)
 8018ce2:	4630      	mov	r0, r6
 8018ce4:	4639      	mov	r1, r7
 8018ce6:	f7e7 fca7 	bl	8000638 <__aeabi_dmul>
 8018cea:	f7e7 ff55 	bl	8000b98 <__aeabi_d2iz>
 8018cee:	4680      	mov	r8, r0
 8018cf0:	f7e7 fc38 	bl	8000564 <__aeabi_i2d>
 8018cf4:	2200      	movs	r2, #0
 8018cf6:	4b90      	ldr	r3, [pc, #576]	; (8018f38 <__kernel_rem_pio2+0x678>)
 8018cf8:	f7e7 fc9e 	bl	8000638 <__aeabi_dmul>
 8018cfc:	460b      	mov	r3, r1
 8018cfe:	4602      	mov	r2, r0
 8018d00:	4639      	mov	r1, r7
 8018d02:	4630      	mov	r0, r6
 8018d04:	f7e7 fae0 	bl	80002c8 <__aeabi_dsub>
 8018d08:	f7e7 ff46 	bl	8000b98 <__aeabi_d2iz>
 8018d0c:	1c65      	adds	r5, r4, #1
 8018d0e:	ab0e      	add	r3, sp, #56	; 0x38
 8018d10:	f10a 0a18 	add.w	sl, sl, #24
 8018d14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018d18:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8018d1c:	e719      	b.n	8018b52 <__kernel_rem_pio2+0x292>
 8018d1e:	4630      	mov	r0, r6
 8018d20:	4639      	mov	r1, r7
 8018d22:	f7e7 ff39 	bl	8000b98 <__aeabi_d2iz>
 8018d26:	ab0e      	add	r3, sp, #56	; 0x38
 8018d28:	4625      	mov	r5, r4
 8018d2a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8018d2e:	e710      	b.n	8018b52 <__kernel_rem_pio2+0x292>
 8018d30:	ab0e      	add	r3, sp, #56	; 0x38
 8018d32:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8018d36:	f7e7 fc15 	bl	8000564 <__aeabi_i2d>
 8018d3a:	4642      	mov	r2, r8
 8018d3c:	464b      	mov	r3, r9
 8018d3e:	f7e7 fc7b 	bl	8000638 <__aeabi_dmul>
 8018d42:	2200      	movs	r2, #0
 8018d44:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8018d48:	4b7c      	ldr	r3, [pc, #496]	; (8018f3c <__kernel_rem_pio2+0x67c>)
 8018d4a:	4640      	mov	r0, r8
 8018d4c:	4649      	mov	r1, r9
 8018d4e:	f7e7 fc73 	bl	8000638 <__aeabi_dmul>
 8018d52:	3f01      	subs	r7, #1
 8018d54:	4680      	mov	r8, r0
 8018d56:	4689      	mov	r9, r1
 8018d58:	e708      	b.n	8018b6c <__kernel_rem_pio2+0x2ac>
 8018d5a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8018d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d62:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8018d66:	f7e7 fc67 	bl	8000638 <__aeabi_dmul>
 8018d6a:	4602      	mov	r2, r0
 8018d6c:	460b      	mov	r3, r1
 8018d6e:	4640      	mov	r0, r8
 8018d70:	4649      	mov	r1, r9
 8018d72:	f7e7 faab 	bl	80002cc <__adddf3>
 8018d76:	3701      	adds	r7, #1
 8018d78:	4680      	mov	r8, r0
 8018d7a:	4689      	mov	r9, r1
 8018d7c:	9b04      	ldr	r3, [sp, #16]
 8018d7e:	429f      	cmp	r7, r3
 8018d80:	dc01      	bgt.n	8018d86 <__kernel_rem_pio2+0x4c6>
 8018d82:	45ba      	cmp	sl, r7
 8018d84:	dae9      	bge.n	8018d5a <__kernel_rem_pio2+0x49a>
 8018d86:	ab4a      	add	r3, sp, #296	; 0x128
 8018d88:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018d8c:	e9c3 8900 	strd	r8, r9, [r3]
 8018d90:	f10a 0a01 	add.w	sl, sl, #1
 8018d94:	3e08      	subs	r6, #8
 8018d96:	e6f0      	b.n	8018b7a <__kernel_rem_pio2+0x2ba>
 8018d98:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8018d9a:	2b03      	cmp	r3, #3
 8018d9c:	d85b      	bhi.n	8018e56 <__kernel_rem_pio2+0x596>
 8018d9e:	e8df f003 	tbb	[pc, r3]
 8018da2:	264a      	.short	0x264a
 8018da4:	0226      	.short	0x0226
 8018da6:	ab9a      	add	r3, sp, #616	; 0x268
 8018da8:	441c      	add	r4, r3
 8018daa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8018dae:	46a2      	mov	sl, r4
 8018db0:	46ab      	mov	fp, r5
 8018db2:	f1bb 0f00 	cmp.w	fp, #0
 8018db6:	dc6c      	bgt.n	8018e92 <__kernel_rem_pio2+0x5d2>
 8018db8:	46a2      	mov	sl, r4
 8018dba:	46ab      	mov	fp, r5
 8018dbc:	f1bb 0f01 	cmp.w	fp, #1
 8018dc0:	f300 8086 	bgt.w	8018ed0 <__kernel_rem_pio2+0x610>
 8018dc4:	2000      	movs	r0, #0
 8018dc6:	2100      	movs	r1, #0
 8018dc8:	2d01      	cmp	r5, #1
 8018dca:	f300 80a0 	bgt.w	8018f0e <__kernel_rem_pio2+0x64e>
 8018dce:	9b02      	ldr	r3, [sp, #8]
 8018dd0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8018dd4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	f040 809e 	bne.w	8018f1a <__kernel_rem_pio2+0x65a>
 8018dde:	9b01      	ldr	r3, [sp, #4]
 8018de0:	e9c3 7800 	strd	r7, r8, [r3]
 8018de4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8018de8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8018dec:	e033      	b.n	8018e56 <__kernel_rem_pio2+0x596>
 8018dee:	3408      	adds	r4, #8
 8018df0:	ab4a      	add	r3, sp, #296	; 0x128
 8018df2:	441c      	add	r4, r3
 8018df4:	462e      	mov	r6, r5
 8018df6:	2000      	movs	r0, #0
 8018df8:	2100      	movs	r1, #0
 8018dfa:	2e00      	cmp	r6, #0
 8018dfc:	da3a      	bge.n	8018e74 <__kernel_rem_pio2+0x5b4>
 8018dfe:	9b02      	ldr	r3, [sp, #8]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d03d      	beq.n	8018e80 <__kernel_rem_pio2+0x5c0>
 8018e04:	4602      	mov	r2, r0
 8018e06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e0a:	9c01      	ldr	r4, [sp, #4]
 8018e0c:	e9c4 2300 	strd	r2, r3, [r4]
 8018e10:	4602      	mov	r2, r0
 8018e12:	460b      	mov	r3, r1
 8018e14:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8018e18:	f7e7 fa56 	bl	80002c8 <__aeabi_dsub>
 8018e1c:	ae4c      	add	r6, sp, #304	; 0x130
 8018e1e:	2401      	movs	r4, #1
 8018e20:	42a5      	cmp	r5, r4
 8018e22:	da30      	bge.n	8018e86 <__kernel_rem_pio2+0x5c6>
 8018e24:	9b02      	ldr	r3, [sp, #8]
 8018e26:	b113      	cbz	r3, 8018e2e <__kernel_rem_pio2+0x56e>
 8018e28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	9b01      	ldr	r3, [sp, #4]
 8018e30:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8018e34:	e00f      	b.n	8018e56 <__kernel_rem_pio2+0x596>
 8018e36:	ab9a      	add	r3, sp, #616	; 0x268
 8018e38:	441c      	add	r4, r3
 8018e3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8018e3e:	2000      	movs	r0, #0
 8018e40:	2100      	movs	r1, #0
 8018e42:	2d00      	cmp	r5, #0
 8018e44:	da10      	bge.n	8018e68 <__kernel_rem_pio2+0x5a8>
 8018e46:	9b02      	ldr	r3, [sp, #8]
 8018e48:	b113      	cbz	r3, 8018e50 <__kernel_rem_pio2+0x590>
 8018e4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018e4e:	4619      	mov	r1, r3
 8018e50:	9b01      	ldr	r3, [sp, #4]
 8018e52:	e9c3 0100 	strd	r0, r1, [r3]
 8018e56:	9b06      	ldr	r3, [sp, #24]
 8018e58:	f003 0007 	and.w	r0, r3, #7
 8018e5c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8018e60:	ecbd 8b02 	vpop	{d8}
 8018e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e68:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018e6c:	f7e7 fa2e 	bl	80002cc <__adddf3>
 8018e70:	3d01      	subs	r5, #1
 8018e72:	e7e6      	b.n	8018e42 <__kernel_rem_pio2+0x582>
 8018e74:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018e78:	f7e7 fa28 	bl	80002cc <__adddf3>
 8018e7c:	3e01      	subs	r6, #1
 8018e7e:	e7bc      	b.n	8018dfa <__kernel_rem_pio2+0x53a>
 8018e80:	4602      	mov	r2, r0
 8018e82:	460b      	mov	r3, r1
 8018e84:	e7c1      	b.n	8018e0a <__kernel_rem_pio2+0x54a>
 8018e86:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8018e8a:	f7e7 fa1f 	bl	80002cc <__adddf3>
 8018e8e:	3401      	adds	r4, #1
 8018e90:	e7c6      	b.n	8018e20 <__kernel_rem_pio2+0x560>
 8018e92:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8018e96:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018e9a:	4640      	mov	r0, r8
 8018e9c:	ec53 2b17 	vmov	r2, r3, d7
 8018ea0:	4649      	mov	r1, r9
 8018ea2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018ea6:	f7e7 fa11 	bl	80002cc <__adddf3>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	460b      	mov	r3, r1
 8018eae:	4606      	mov	r6, r0
 8018eb0:	460f      	mov	r7, r1
 8018eb2:	4640      	mov	r0, r8
 8018eb4:	4649      	mov	r1, r9
 8018eb6:	f7e7 fa07 	bl	80002c8 <__aeabi_dsub>
 8018eba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018ebe:	f7e7 fa05 	bl	80002cc <__adddf3>
 8018ec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018ec6:	e9ca 0100 	strd	r0, r1, [sl]
 8018eca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8018ece:	e770      	b.n	8018db2 <__kernel_rem_pio2+0x4f2>
 8018ed0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8018ed4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8018ed8:	4630      	mov	r0, r6
 8018eda:	ec53 2b17 	vmov	r2, r3, d7
 8018ede:	4639      	mov	r1, r7
 8018ee0:	ed8d 7b04 	vstr	d7, [sp, #16]
 8018ee4:	f7e7 f9f2 	bl	80002cc <__adddf3>
 8018ee8:	4602      	mov	r2, r0
 8018eea:	460b      	mov	r3, r1
 8018eec:	4680      	mov	r8, r0
 8018eee:	4689      	mov	r9, r1
 8018ef0:	4630      	mov	r0, r6
 8018ef2:	4639      	mov	r1, r7
 8018ef4:	f7e7 f9e8 	bl	80002c8 <__aeabi_dsub>
 8018ef8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8018efc:	f7e7 f9e6 	bl	80002cc <__adddf3>
 8018f00:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018f04:	e9ca 0100 	strd	r0, r1, [sl]
 8018f08:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8018f0c:	e756      	b.n	8018dbc <__kernel_rem_pio2+0x4fc>
 8018f0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8018f12:	f7e7 f9db 	bl	80002cc <__adddf3>
 8018f16:	3d01      	subs	r5, #1
 8018f18:	e756      	b.n	8018dc8 <__kernel_rem_pio2+0x508>
 8018f1a:	9b01      	ldr	r3, [sp, #4]
 8018f1c:	9a01      	ldr	r2, [sp, #4]
 8018f1e:	601f      	str	r7, [r3, #0]
 8018f20:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8018f24:	605c      	str	r4, [r3, #4]
 8018f26:	609d      	str	r5, [r3, #8]
 8018f28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8018f2c:	60d3      	str	r3, [r2, #12]
 8018f2e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018f32:	6110      	str	r0, [r2, #16]
 8018f34:	6153      	str	r3, [r2, #20]
 8018f36:	e78e      	b.n	8018e56 <__kernel_rem_pio2+0x596>
 8018f38:	41700000 	.word	0x41700000
 8018f3c:	3e700000 	.word	0x3e700000

08018f40 <__kernel_sin>:
 8018f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f44:	ec55 4b10 	vmov	r4, r5, d0
 8018f48:	b085      	sub	sp, #20
 8018f4a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8018f4e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8018f52:	ed8d 1b00 	vstr	d1, [sp]
 8018f56:	9002      	str	r0, [sp, #8]
 8018f58:	da06      	bge.n	8018f68 <__kernel_sin+0x28>
 8018f5a:	ee10 0a10 	vmov	r0, s0
 8018f5e:	4629      	mov	r1, r5
 8018f60:	f7e7 fe1a 	bl	8000b98 <__aeabi_d2iz>
 8018f64:	2800      	cmp	r0, #0
 8018f66:	d051      	beq.n	801900c <__kernel_sin+0xcc>
 8018f68:	4622      	mov	r2, r4
 8018f6a:	462b      	mov	r3, r5
 8018f6c:	4620      	mov	r0, r4
 8018f6e:	4629      	mov	r1, r5
 8018f70:	f7e7 fb62 	bl	8000638 <__aeabi_dmul>
 8018f74:	4682      	mov	sl, r0
 8018f76:	468b      	mov	fp, r1
 8018f78:	4602      	mov	r2, r0
 8018f7a:	460b      	mov	r3, r1
 8018f7c:	4620      	mov	r0, r4
 8018f7e:	4629      	mov	r1, r5
 8018f80:	f7e7 fb5a 	bl	8000638 <__aeabi_dmul>
 8018f84:	a341      	add	r3, pc, #260	; (adr r3, 801908c <__kernel_sin+0x14c>)
 8018f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f8a:	4680      	mov	r8, r0
 8018f8c:	4689      	mov	r9, r1
 8018f8e:	4650      	mov	r0, sl
 8018f90:	4659      	mov	r1, fp
 8018f92:	f7e7 fb51 	bl	8000638 <__aeabi_dmul>
 8018f96:	a33f      	add	r3, pc, #252	; (adr r3, 8019094 <__kernel_sin+0x154>)
 8018f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f9c:	f7e7 f994 	bl	80002c8 <__aeabi_dsub>
 8018fa0:	4652      	mov	r2, sl
 8018fa2:	465b      	mov	r3, fp
 8018fa4:	f7e7 fb48 	bl	8000638 <__aeabi_dmul>
 8018fa8:	a33c      	add	r3, pc, #240	; (adr r3, 801909c <__kernel_sin+0x15c>)
 8018faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fae:	f7e7 f98d 	bl	80002cc <__adddf3>
 8018fb2:	4652      	mov	r2, sl
 8018fb4:	465b      	mov	r3, fp
 8018fb6:	f7e7 fb3f 	bl	8000638 <__aeabi_dmul>
 8018fba:	a33a      	add	r3, pc, #232	; (adr r3, 80190a4 <__kernel_sin+0x164>)
 8018fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fc0:	f7e7 f982 	bl	80002c8 <__aeabi_dsub>
 8018fc4:	4652      	mov	r2, sl
 8018fc6:	465b      	mov	r3, fp
 8018fc8:	f7e7 fb36 	bl	8000638 <__aeabi_dmul>
 8018fcc:	a337      	add	r3, pc, #220	; (adr r3, 80190ac <__kernel_sin+0x16c>)
 8018fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fd2:	f7e7 f97b 	bl	80002cc <__adddf3>
 8018fd6:	9b02      	ldr	r3, [sp, #8]
 8018fd8:	4606      	mov	r6, r0
 8018fda:	460f      	mov	r7, r1
 8018fdc:	b9db      	cbnz	r3, 8019016 <__kernel_sin+0xd6>
 8018fde:	4602      	mov	r2, r0
 8018fe0:	460b      	mov	r3, r1
 8018fe2:	4650      	mov	r0, sl
 8018fe4:	4659      	mov	r1, fp
 8018fe6:	f7e7 fb27 	bl	8000638 <__aeabi_dmul>
 8018fea:	a325      	add	r3, pc, #148	; (adr r3, 8019080 <__kernel_sin+0x140>)
 8018fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ff0:	f7e7 f96a 	bl	80002c8 <__aeabi_dsub>
 8018ff4:	4642      	mov	r2, r8
 8018ff6:	464b      	mov	r3, r9
 8018ff8:	f7e7 fb1e 	bl	8000638 <__aeabi_dmul>
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	460b      	mov	r3, r1
 8019000:	4620      	mov	r0, r4
 8019002:	4629      	mov	r1, r5
 8019004:	f7e7 f962 	bl	80002cc <__adddf3>
 8019008:	4604      	mov	r4, r0
 801900a:	460d      	mov	r5, r1
 801900c:	ec45 4b10 	vmov	d0, r4, r5
 8019010:	b005      	add	sp, #20
 8019012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019016:	2200      	movs	r2, #0
 8019018:	4b1b      	ldr	r3, [pc, #108]	; (8019088 <__kernel_sin+0x148>)
 801901a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801901e:	f7e7 fb0b 	bl	8000638 <__aeabi_dmul>
 8019022:	4632      	mov	r2, r6
 8019024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019028:	463b      	mov	r3, r7
 801902a:	4640      	mov	r0, r8
 801902c:	4649      	mov	r1, r9
 801902e:	f7e7 fb03 	bl	8000638 <__aeabi_dmul>
 8019032:	4602      	mov	r2, r0
 8019034:	460b      	mov	r3, r1
 8019036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801903a:	f7e7 f945 	bl	80002c8 <__aeabi_dsub>
 801903e:	4652      	mov	r2, sl
 8019040:	465b      	mov	r3, fp
 8019042:	f7e7 faf9 	bl	8000638 <__aeabi_dmul>
 8019046:	e9dd 2300 	ldrd	r2, r3, [sp]
 801904a:	f7e7 f93d 	bl	80002c8 <__aeabi_dsub>
 801904e:	a30c      	add	r3, pc, #48	; (adr r3, 8019080 <__kernel_sin+0x140>)
 8019050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019054:	4606      	mov	r6, r0
 8019056:	460f      	mov	r7, r1
 8019058:	4640      	mov	r0, r8
 801905a:	4649      	mov	r1, r9
 801905c:	f7e7 faec 	bl	8000638 <__aeabi_dmul>
 8019060:	4602      	mov	r2, r0
 8019062:	460b      	mov	r3, r1
 8019064:	4630      	mov	r0, r6
 8019066:	4639      	mov	r1, r7
 8019068:	f7e7 f930 	bl	80002cc <__adddf3>
 801906c:	4602      	mov	r2, r0
 801906e:	460b      	mov	r3, r1
 8019070:	4620      	mov	r0, r4
 8019072:	4629      	mov	r1, r5
 8019074:	f7e7 f928 	bl	80002c8 <__aeabi_dsub>
 8019078:	e7c6      	b.n	8019008 <__kernel_sin+0xc8>
 801907a:	bf00      	nop
 801907c:	f3af 8000 	nop.w
 8019080:	55555549 	.word	0x55555549
 8019084:	3fc55555 	.word	0x3fc55555
 8019088:	3fe00000 	.word	0x3fe00000
 801908c:	5acfd57c 	.word	0x5acfd57c
 8019090:	3de5d93a 	.word	0x3de5d93a
 8019094:	8a2b9ceb 	.word	0x8a2b9ceb
 8019098:	3e5ae5e6 	.word	0x3e5ae5e6
 801909c:	57b1fe7d 	.word	0x57b1fe7d
 80190a0:	3ec71de3 	.word	0x3ec71de3
 80190a4:	19c161d5 	.word	0x19c161d5
 80190a8:	3f2a01a0 	.word	0x3f2a01a0
 80190ac:	1110f8a6 	.word	0x1110f8a6
 80190b0:	3f811111 	.word	0x3f811111
 80190b4:	00000000 	.word	0x00000000

080190b8 <atan>:
 80190b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190bc:	ec55 4b10 	vmov	r4, r5, d0
 80190c0:	4bc3      	ldr	r3, [pc, #780]	; (80193d0 <atan+0x318>)
 80190c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80190c6:	429e      	cmp	r6, r3
 80190c8:	46ab      	mov	fp, r5
 80190ca:	dd18      	ble.n	80190fe <atan+0x46>
 80190cc:	4bc1      	ldr	r3, [pc, #772]	; (80193d4 <atan+0x31c>)
 80190ce:	429e      	cmp	r6, r3
 80190d0:	dc01      	bgt.n	80190d6 <atan+0x1e>
 80190d2:	d109      	bne.n	80190e8 <atan+0x30>
 80190d4:	b144      	cbz	r4, 80190e8 <atan+0x30>
 80190d6:	4622      	mov	r2, r4
 80190d8:	462b      	mov	r3, r5
 80190da:	4620      	mov	r0, r4
 80190dc:	4629      	mov	r1, r5
 80190de:	f7e7 f8f5 	bl	80002cc <__adddf3>
 80190e2:	4604      	mov	r4, r0
 80190e4:	460d      	mov	r5, r1
 80190e6:	e006      	b.n	80190f6 <atan+0x3e>
 80190e8:	f1bb 0f00 	cmp.w	fp, #0
 80190ec:	f340 8131 	ble.w	8019352 <atan+0x29a>
 80190f0:	a59b      	add	r5, pc, #620	; (adr r5, 8019360 <atan+0x2a8>)
 80190f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80190f6:	ec45 4b10 	vmov	d0, r4, r5
 80190fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190fe:	4bb6      	ldr	r3, [pc, #728]	; (80193d8 <atan+0x320>)
 8019100:	429e      	cmp	r6, r3
 8019102:	dc14      	bgt.n	801912e <atan+0x76>
 8019104:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8019108:	429e      	cmp	r6, r3
 801910a:	dc0d      	bgt.n	8019128 <atan+0x70>
 801910c:	a396      	add	r3, pc, #600	; (adr r3, 8019368 <atan+0x2b0>)
 801910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019112:	ee10 0a10 	vmov	r0, s0
 8019116:	4629      	mov	r1, r5
 8019118:	f7e7 f8d8 	bl	80002cc <__adddf3>
 801911c:	2200      	movs	r2, #0
 801911e:	4baf      	ldr	r3, [pc, #700]	; (80193dc <atan+0x324>)
 8019120:	f7e7 fd1a 	bl	8000b58 <__aeabi_dcmpgt>
 8019124:	2800      	cmp	r0, #0
 8019126:	d1e6      	bne.n	80190f6 <atan+0x3e>
 8019128:	f04f 3aff 	mov.w	sl, #4294967295
 801912c:	e02b      	b.n	8019186 <atan+0xce>
 801912e:	f000 f963 	bl	80193f8 <fabs>
 8019132:	4bab      	ldr	r3, [pc, #684]	; (80193e0 <atan+0x328>)
 8019134:	429e      	cmp	r6, r3
 8019136:	ec55 4b10 	vmov	r4, r5, d0
 801913a:	f300 80bf 	bgt.w	80192bc <atan+0x204>
 801913e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8019142:	429e      	cmp	r6, r3
 8019144:	f300 80a0 	bgt.w	8019288 <atan+0x1d0>
 8019148:	ee10 2a10 	vmov	r2, s0
 801914c:	ee10 0a10 	vmov	r0, s0
 8019150:	462b      	mov	r3, r5
 8019152:	4629      	mov	r1, r5
 8019154:	f7e7 f8ba 	bl	80002cc <__adddf3>
 8019158:	2200      	movs	r2, #0
 801915a:	4ba0      	ldr	r3, [pc, #640]	; (80193dc <atan+0x324>)
 801915c:	f7e7 f8b4 	bl	80002c8 <__aeabi_dsub>
 8019160:	2200      	movs	r2, #0
 8019162:	4606      	mov	r6, r0
 8019164:	460f      	mov	r7, r1
 8019166:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801916a:	4620      	mov	r0, r4
 801916c:	4629      	mov	r1, r5
 801916e:	f7e7 f8ad 	bl	80002cc <__adddf3>
 8019172:	4602      	mov	r2, r0
 8019174:	460b      	mov	r3, r1
 8019176:	4630      	mov	r0, r6
 8019178:	4639      	mov	r1, r7
 801917a:	f7e7 fb87 	bl	800088c <__aeabi_ddiv>
 801917e:	f04f 0a00 	mov.w	sl, #0
 8019182:	4604      	mov	r4, r0
 8019184:	460d      	mov	r5, r1
 8019186:	4622      	mov	r2, r4
 8019188:	462b      	mov	r3, r5
 801918a:	4620      	mov	r0, r4
 801918c:	4629      	mov	r1, r5
 801918e:	f7e7 fa53 	bl	8000638 <__aeabi_dmul>
 8019192:	4602      	mov	r2, r0
 8019194:	460b      	mov	r3, r1
 8019196:	4680      	mov	r8, r0
 8019198:	4689      	mov	r9, r1
 801919a:	f7e7 fa4d 	bl	8000638 <__aeabi_dmul>
 801919e:	a374      	add	r3, pc, #464	; (adr r3, 8019370 <atan+0x2b8>)
 80191a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191a4:	4606      	mov	r6, r0
 80191a6:	460f      	mov	r7, r1
 80191a8:	f7e7 fa46 	bl	8000638 <__aeabi_dmul>
 80191ac:	a372      	add	r3, pc, #456	; (adr r3, 8019378 <atan+0x2c0>)
 80191ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191b2:	f7e7 f88b 	bl	80002cc <__adddf3>
 80191b6:	4632      	mov	r2, r6
 80191b8:	463b      	mov	r3, r7
 80191ba:	f7e7 fa3d 	bl	8000638 <__aeabi_dmul>
 80191be:	a370      	add	r3, pc, #448	; (adr r3, 8019380 <atan+0x2c8>)
 80191c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191c4:	f7e7 f882 	bl	80002cc <__adddf3>
 80191c8:	4632      	mov	r2, r6
 80191ca:	463b      	mov	r3, r7
 80191cc:	f7e7 fa34 	bl	8000638 <__aeabi_dmul>
 80191d0:	a36d      	add	r3, pc, #436	; (adr r3, 8019388 <atan+0x2d0>)
 80191d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191d6:	f7e7 f879 	bl	80002cc <__adddf3>
 80191da:	4632      	mov	r2, r6
 80191dc:	463b      	mov	r3, r7
 80191de:	f7e7 fa2b 	bl	8000638 <__aeabi_dmul>
 80191e2:	a36b      	add	r3, pc, #428	; (adr r3, 8019390 <atan+0x2d8>)
 80191e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191e8:	f7e7 f870 	bl	80002cc <__adddf3>
 80191ec:	4632      	mov	r2, r6
 80191ee:	463b      	mov	r3, r7
 80191f0:	f7e7 fa22 	bl	8000638 <__aeabi_dmul>
 80191f4:	a368      	add	r3, pc, #416	; (adr r3, 8019398 <atan+0x2e0>)
 80191f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191fa:	f7e7 f867 	bl	80002cc <__adddf3>
 80191fe:	4642      	mov	r2, r8
 8019200:	464b      	mov	r3, r9
 8019202:	f7e7 fa19 	bl	8000638 <__aeabi_dmul>
 8019206:	a366      	add	r3, pc, #408	; (adr r3, 80193a0 <atan+0x2e8>)
 8019208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920c:	4680      	mov	r8, r0
 801920e:	4689      	mov	r9, r1
 8019210:	4630      	mov	r0, r6
 8019212:	4639      	mov	r1, r7
 8019214:	f7e7 fa10 	bl	8000638 <__aeabi_dmul>
 8019218:	a363      	add	r3, pc, #396	; (adr r3, 80193a8 <atan+0x2f0>)
 801921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801921e:	f7e7 f853 	bl	80002c8 <__aeabi_dsub>
 8019222:	4632      	mov	r2, r6
 8019224:	463b      	mov	r3, r7
 8019226:	f7e7 fa07 	bl	8000638 <__aeabi_dmul>
 801922a:	a361      	add	r3, pc, #388	; (adr r3, 80193b0 <atan+0x2f8>)
 801922c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019230:	f7e7 f84a 	bl	80002c8 <__aeabi_dsub>
 8019234:	4632      	mov	r2, r6
 8019236:	463b      	mov	r3, r7
 8019238:	f7e7 f9fe 	bl	8000638 <__aeabi_dmul>
 801923c:	a35e      	add	r3, pc, #376	; (adr r3, 80193b8 <atan+0x300>)
 801923e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019242:	f7e7 f841 	bl	80002c8 <__aeabi_dsub>
 8019246:	4632      	mov	r2, r6
 8019248:	463b      	mov	r3, r7
 801924a:	f7e7 f9f5 	bl	8000638 <__aeabi_dmul>
 801924e:	a35c      	add	r3, pc, #368	; (adr r3, 80193c0 <atan+0x308>)
 8019250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019254:	f7e7 f838 	bl	80002c8 <__aeabi_dsub>
 8019258:	4632      	mov	r2, r6
 801925a:	463b      	mov	r3, r7
 801925c:	f7e7 f9ec 	bl	8000638 <__aeabi_dmul>
 8019260:	4602      	mov	r2, r0
 8019262:	460b      	mov	r3, r1
 8019264:	4640      	mov	r0, r8
 8019266:	4649      	mov	r1, r9
 8019268:	f7e7 f830 	bl	80002cc <__adddf3>
 801926c:	4622      	mov	r2, r4
 801926e:	462b      	mov	r3, r5
 8019270:	f7e7 f9e2 	bl	8000638 <__aeabi_dmul>
 8019274:	f1ba 3fff 	cmp.w	sl, #4294967295
 8019278:	4602      	mov	r2, r0
 801927a:	460b      	mov	r3, r1
 801927c:	d14b      	bne.n	8019316 <atan+0x25e>
 801927e:	4620      	mov	r0, r4
 8019280:	4629      	mov	r1, r5
 8019282:	f7e7 f821 	bl	80002c8 <__aeabi_dsub>
 8019286:	e72c      	b.n	80190e2 <atan+0x2a>
 8019288:	ee10 0a10 	vmov	r0, s0
 801928c:	2200      	movs	r2, #0
 801928e:	4b53      	ldr	r3, [pc, #332]	; (80193dc <atan+0x324>)
 8019290:	4629      	mov	r1, r5
 8019292:	f7e7 f819 	bl	80002c8 <__aeabi_dsub>
 8019296:	2200      	movs	r2, #0
 8019298:	4606      	mov	r6, r0
 801929a:	460f      	mov	r7, r1
 801929c:	4b4f      	ldr	r3, [pc, #316]	; (80193dc <atan+0x324>)
 801929e:	4620      	mov	r0, r4
 80192a0:	4629      	mov	r1, r5
 80192a2:	f7e7 f813 	bl	80002cc <__adddf3>
 80192a6:	4602      	mov	r2, r0
 80192a8:	460b      	mov	r3, r1
 80192aa:	4630      	mov	r0, r6
 80192ac:	4639      	mov	r1, r7
 80192ae:	f7e7 faed 	bl	800088c <__aeabi_ddiv>
 80192b2:	f04f 0a01 	mov.w	sl, #1
 80192b6:	4604      	mov	r4, r0
 80192b8:	460d      	mov	r5, r1
 80192ba:	e764      	b.n	8019186 <atan+0xce>
 80192bc:	4b49      	ldr	r3, [pc, #292]	; (80193e4 <atan+0x32c>)
 80192be:	429e      	cmp	r6, r3
 80192c0:	dc1d      	bgt.n	80192fe <atan+0x246>
 80192c2:	ee10 0a10 	vmov	r0, s0
 80192c6:	2200      	movs	r2, #0
 80192c8:	4b47      	ldr	r3, [pc, #284]	; (80193e8 <atan+0x330>)
 80192ca:	4629      	mov	r1, r5
 80192cc:	f7e6 fffc 	bl	80002c8 <__aeabi_dsub>
 80192d0:	2200      	movs	r2, #0
 80192d2:	4606      	mov	r6, r0
 80192d4:	460f      	mov	r7, r1
 80192d6:	4b44      	ldr	r3, [pc, #272]	; (80193e8 <atan+0x330>)
 80192d8:	4620      	mov	r0, r4
 80192da:	4629      	mov	r1, r5
 80192dc:	f7e7 f9ac 	bl	8000638 <__aeabi_dmul>
 80192e0:	2200      	movs	r2, #0
 80192e2:	4b3e      	ldr	r3, [pc, #248]	; (80193dc <atan+0x324>)
 80192e4:	f7e6 fff2 	bl	80002cc <__adddf3>
 80192e8:	4602      	mov	r2, r0
 80192ea:	460b      	mov	r3, r1
 80192ec:	4630      	mov	r0, r6
 80192ee:	4639      	mov	r1, r7
 80192f0:	f7e7 facc 	bl	800088c <__aeabi_ddiv>
 80192f4:	f04f 0a02 	mov.w	sl, #2
 80192f8:	4604      	mov	r4, r0
 80192fa:	460d      	mov	r5, r1
 80192fc:	e743      	b.n	8019186 <atan+0xce>
 80192fe:	462b      	mov	r3, r5
 8019300:	ee10 2a10 	vmov	r2, s0
 8019304:	2000      	movs	r0, #0
 8019306:	4939      	ldr	r1, [pc, #228]	; (80193ec <atan+0x334>)
 8019308:	f7e7 fac0 	bl	800088c <__aeabi_ddiv>
 801930c:	f04f 0a03 	mov.w	sl, #3
 8019310:	4604      	mov	r4, r0
 8019312:	460d      	mov	r5, r1
 8019314:	e737      	b.n	8019186 <atan+0xce>
 8019316:	4b36      	ldr	r3, [pc, #216]	; (80193f0 <atan+0x338>)
 8019318:	4e36      	ldr	r6, [pc, #216]	; (80193f4 <atan+0x33c>)
 801931a:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801931e:	4456      	add	r6, sl
 8019320:	449a      	add	sl, r3
 8019322:	e9da 2300 	ldrd	r2, r3, [sl]
 8019326:	f7e6 ffcf 	bl	80002c8 <__aeabi_dsub>
 801932a:	4622      	mov	r2, r4
 801932c:	462b      	mov	r3, r5
 801932e:	f7e6 ffcb 	bl	80002c8 <__aeabi_dsub>
 8019332:	4602      	mov	r2, r0
 8019334:	460b      	mov	r3, r1
 8019336:	e9d6 0100 	ldrd	r0, r1, [r6]
 801933a:	f7e6 ffc5 	bl	80002c8 <__aeabi_dsub>
 801933e:	f1bb 0f00 	cmp.w	fp, #0
 8019342:	4604      	mov	r4, r0
 8019344:	460d      	mov	r5, r1
 8019346:	f6bf aed6 	bge.w	80190f6 <atan+0x3e>
 801934a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801934e:	461d      	mov	r5, r3
 8019350:	e6d1      	b.n	80190f6 <atan+0x3e>
 8019352:	a51d      	add	r5, pc, #116	; (adr r5, 80193c8 <atan+0x310>)
 8019354:	e9d5 4500 	ldrd	r4, r5, [r5]
 8019358:	e6cd      	b.n	80190f6 <atan+0x3e>
 801935a:	bf00      	nop
 801935c:	f3af 8000 	nop.w
 8019360:	54442d18 	.word	0x54442d18
 8019364:	3ff921fb 	.word	0x3ff921fb
 8019368:	8800759c 	.word	0x8800759c
 801936c:	7e37e43c 	.word	0x7e37e43c
 8019370:	e322da11 	.word	0xe322da11
 8019374:	3f90ad3a 	.word	0x3f90ad3a
 8019378:	24760deb 	.word	0x24760deb
 801937c:	3fa97b4b 	.word	0x3fa97b4b
 8019380:	a0d03d51 	.word	0xa0d03d51
 8019384:	3fb10d66 	.word	0x3fb10d66
 8019388:	c54c206e 	.word	0xc54c206e
 801938c:	3fb745cd 	.word	0x3fb745cd
 8019390:	920083ff 	.word	0x920083ff
 8019394:	3fc24924 	.word	0x3fc24924
 8019398:	5555550d 	.word	0x5555550d
 801939c:	3fd55555 	.word	0x3fd55555
 80193a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80193a4:	bfa2b444 	.word	0xbfa2b444
 80193a8:	52defd9a 	.word	0x52defd9a
 80193ac:	3fadde2d 	.word	0x3fadde2d
 80193b0:	af749a6d 	.word	0xaf749a6d
 80193b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80193b8:	fe231671 	.word	0xfe231671
 80193bc:	3fbc71c6 	.word	0x3fbc71c6
 80193c0:	9998ebc4 	.word	0x9998ebc4
 80193c4:	3fc99999 	.word	0x3fc99999
 80193c8:	54442d18 	.word	0x54442d18
 80193cc:	bff921fb 	.word	0xbff921fb
 80193d0:	440fffff 	.word	0x440fffff
 80193d4:	7ff00000 	.word	0x7ff00000
 80193d8:	3fdbffff 	.word	0x3fdbffff
 80193dc:	3ff00000 	.word	0x3ff00000
 80193e0:	3ff2ffff 	.word	0x3ff2ffff
 80193e4:	40037fff 	.word	0x40037fff
 80193e8:	3ff80000 	.word	0x3ff80000
 80193ec:	bff00000 	.word	0xbff00000
 80193f0:	0801a4f8 	.word	0x0801a4f8
 80193f4:	0801a4d8 	.word	0x0801a4d8

080193f8 <fabs>:
 80193f8:	ec51 0b10 	vmov	r0, r1, d0
 80193fc:	ee10 2a10 	vmov	r2, s0
 8019400:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019404:	ec43 2b10 	vmov	d0, r2, r3
 8019408:	4770      	bx	lr
 801940a:	0000      	movs	r0, r0
 801940c:	0000      	movs	r0, r0
	...

08019410 <floor>:
 8019410:	ec51 0b10 	vmov	r0, r1, d0
 8019414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019418:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801941c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019420:	2e13      	cmp	r6, #19
 8019422:	460c      	mov	r4, r1
 8019424:	ee10 5a10 	vmov	r5, s0
 8019428:	4680      	mov	r8, r0
 801942a:	dc34      	bgt.n	8019496 <floor+0x86>
 801942c:	2e00      	cmp	r6, #0
 801942e:	da16      	bge.n	801945e <floor+0x4e>
 8019430:	a335      	add	r3, pc, #212	; (adr r3, 8019508 <floor+0xf8>)
 8019432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019436:	f7e6 ff49 	bl	80002cc <__adddf3>
 801943a:	2200      	movs	r2, #0
 801943c:	2300      	movs	r3, #0
 801943e:	f7e7 fb8b 	bl	8000b58 <__aeabi_dcmpgt>
 8019442:	b148      	cbz	r0, 8019458 <floor+0x48>
 8019444:	2c00      	cmp	r4, #0
 8019446:	da59      	bge.n	80194fc <floor+0xec>
 8019448:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801944c:	4a30      	ldr	r2, [pc, #192]	; (8019510 <floor+0x100>)
 801944e:	432b      	orrs	r3, r5
 8019450:	2500      	movs	r5, #0
 8019452:	42ab      	cmp	r3, r5
 8019454:	bf18      	it	ne
 8019456:	4614      	movne	r4, r2
 8019458:	4621      	mov	r1, r4
 801945a:	4628      	mov	r0, r5
 801945c:	e025      	b.n	80194aa <floor+0x9a>
 801945e:	4f2d      	ldr	r7, [pc, #180]	; (8019514 <floor+0x104>)
 8019460:	4137      	asrs	r7, r6
 8019462:	ea01 0307 	and.w	r3, r1, r7
 8019466:	4303      	orrs	r3, r0
 8019468:	d01f      	beq.n	80194aa <floor+0x9a>
 801946a:	a327      	add	r3, pc, #156	; (adr r3, 8019508 <floor+0xf8>)
 801946c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019470:	f7e6 ff2c 	bl	80002cc <__adddf3>
 8019474:	2200      	movs	r2, #0
 8019476:	2300      	movs	r3, #0
 8019478:	f7e7 fb6e 	bl	8000b58 <__aeabi_dcmpgt>
 801947c:	2800      	cmp	r0, #0
 801947e:	d0eb      	beq.n	8019458 <floor+0x48>
 8019480:	2c00      	cmp	r4, #0
 8019482:	bfbe      	ittt	lt
 8019484:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019488:	fa43 f606 	asrlt.w	r6, r3, r6
 801948c:	19a4      	addlt	r4, r4, r6
 801948e:	ea24 0407 	bic.w	r4, r4, r7
 8019492:	2500      	movs	r5, #0
 8019494:	e7e0      	b.n	8019458 <floor+0x48>
 8019496:	2e33      	cmp	r6, #51	; 0x33
 8019498:	dd0b      	ble.n	80194b2 <floor+0xa2>
 801949a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801949e:	d104      	bne.n	80194aa <floor+0x9a>
 80194a0:	ee10 2a10 	vmov	r2, s0
 80194a4:	460b      	mov	r3, r1
 80194a6:	f7e6 ff11 	bl	80002cc <__adddf3>
 80194aa:	ec41 0b10 	vmov	d0, r0, r1
 80194ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194b2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80194b6:	f04f 33ff 	mov.w	r3, #4294967295
 80194ba:	fa23 f707 	lsr.w	r7, r3, r7
 80194be:	4207      	tst	r7, r0
 80194c0:	d0f3      	beq.n	80194aa <floor+0x9a>
 80194c2:	a311      	add	r3, pc, #68	; (adr r3, 8019508 <floor+0xf8>)
 80194c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c8:	f7e6 ff00 	bl	80002cc <__adddf3>
 80194cc:	2200      	movs	r2, #0
 80194ce:	2300      	movs	r3, #0
 80194d0:	f7e7 fb42 	bl	8000b58 <__aeabi_dcmpgt>
 80194d4:	2800      	cmp	r0, #0
 80194d6:	d0bf      	beq.n	8019458 <floor+0x48>
 80194d8:	2c00      	cmp	r4, #0
 80194da:	da02      	bge.n	80194e2 <floor+0xd2>
 80194dc:	2e14      	cmp	r6, #20
 80194de:	d103      	bne.n	80194e8 <floor+0xd8>
 80194e0:	3401      	adds	r4, #1
 80194e2:	ea25 0507 	bic.w	r5, r5, r7
 80194e6:	e7b7      	b.n	8019458 <floor+0x48>
 80194e8:	2301      	movs	r3, #1
 80194ea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80194ee:	fa03 f606 	lsl.w	r6, r3, r6
 80194f2:	4435      	add	r5, r6
 80194f4:	4545      	cmp	r5, r8
 80194f6:	bf38      	it	cc
 80194f8:	18e4      	addcc	r4, r4, r3
 80194fa:	e7f2      	b.n	80194e2 <floor+0xd2>
 80194fc:	2500      	movs	r5, #0
 80194fe:	462c      	mov	r4, r5
 8019500:	e7aa      	b.n	8019458 <floor+0x48>
 8019502:	bf00      	nop
 8019504:	f3af 8000 	nop.w
 8019508:	8800759c 	.word	0x8800759c
 801950c:	7e37e43c 	.word	0x7e37e43c
 8019510:	bff00000 	.word	0xbff00000
 8019514:	000fffff 	.word	0x000fffff

08019518 <matherr>:
 8019518:	2000      	movs	r0, #0
 801951a:	4770      	bx	lr
 801951c:	0000      	movs	r0, r0
	...

08019520 <nan>:
 8019520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019528 <nan+0x8>
 8019524:	4770      	bx	lr
 8019526:	bf00      	nop
 8019528:	00000000 	.word	0x00000000
 801952c:	7ff80000 	.word	0x7ff80000

08019530 <scalbn>:
 8019530:	b570      	push	{r4, r5, r6, lr}
 8019532:	ec55 4b10 	vmov	r4, r5, d0
 8019536:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801953a:	4606      	mov	r6, r0
 801953c:	462b      	mov	r3, r5
 801953e:	b9aa      	cbnz	r2, 801956c <scalbn+0x3c>
 8019540:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019544:	4323      	orrs	r3, r4
 8019546:	d03b      	beq.n	80195c0 <scalbn+0x90>
 8019548:	4b31      	ldr	r3, [pc, #196]	; (8019610 <scalbn+0xe0>)
 801954a:	4629      	mov	r1, r5
 801954c:	2200      	movs	r2, #0
 801954e:	ee10 0a10 	vmov	r0, s0
 8019552:	f7e7 f871 	bl	8000638 <__aeabi_dmul>
 8019556:	4b2f      	ldr	r3, [pc, #188]	; (8019614 <scalbn+0xe4>)
 8019558:	429e      	cmp	r6, r3
 801955a:	4604      	mov	r4, r0
 801955c:	460d      	mov	r5, r1
 801955e:	da12      	bge.n	8019586 <scalbn+0x56>
 8019560:	a327      	add	r3, pc, #156	; (adr r3, 8019600 <scalbn+0xd0>)
 8019562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019566:	f7e7 f867 	bl	8000638 <__aeabi_dmul>
 801956a:	e009      	b.n	8019580 <scalbn+0x50>
 801956c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019570:	428a      	cmp	r2, r1
 8019572:	d10c      	bne.n	801958e <scalbn+0x5e>
 8019574:	ee10 2a10 	vmov	r2, s0
 8019578:	4620      	mov	r0, r4
 801957a:	4629      	mov	r1, r5
 801957c:	f7e6 fea6 	bl	80002cc <__adddf3>
 8019580:	4604      	mov	r4, r0
 8019582:	460d      	mov	r5, r1
 8019584:	e01c      	b.n	80195c0 <scalbn+0x90>
 8019586:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801958a:	460b      	mov	r3, r1
 801958c:	3a36      	subs	r2, #54	; 0x36
 801958e:	4432      	add	r2, r6
 8019590:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019594:	428a      	cmp	r2, r1
 8019596:	dd0b      	ble.n	80195b0 <scalbn+0x80>
 8019598:	ec45 4b11 	vmov	d1, r4, r5
 801959c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8019608 <scalbn+0xd8>
 80195a0:	f7fb fe7a 	bl	8015298 <copysign>
 80195a4:	a318      	add	r3, pc, #96	; (adr r3, 8019608 <scalbn+0xd8>)
 80195a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195aa:	ec51 0b10 	vmov	r0, r1, d0
 80195ae:	e7da      	b.n	8019566 <scalbn+0x36>
 80195b0:	2a00      	cmp	r2, #0
 80195b2:	dd08      	ble.n	80195c6 <scalbn+0x96>
 80195b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80195b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80195bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80195c0:	ec45 4b10 	vmov	d0, r4, r5
 80195c4:	bd70      	pop	{r4, r5, r6, pc}
 80195c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80195ca:	da0d      	bge.n	80195e8 <scalbn+0xb8>
 80195cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80195d0:	429e      	cmp	r6, r3
 80195d2:	ec45 4b11 	vmov	d1, r4, r5
 80195d6:	dce1      	bgt.n	801959c <scalbn+0x6c>
 80195d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8019600 <scalbn+0xd0>
 80195dc:	f7fb fe5c 	bl	8015298 <copysign>
 80195e0:	a307      	add	r3, pc, #28	; (adr r3, 8019600 <scalbn+0xd0>)
 80195e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80195e6:	e7e0      	b.n	80195aa <scalbn+0x7a>
 80195e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80195ec:	3236      	adds	r2, #54	; 0x36
 80195ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80195f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80195f6:	4620      	mov	r0, r4
 80195f8:	4629      	mov	r1, r5
 80195fa:	2200      	movs	r2, #0
 80195fc:	4b06      	ldr	r3, [pc, #24]	; (8019618 <scalbn+0xe8>)
 80195fe:	e7b2      	b.n	8019566 <scalbn+0x36>
 8019600:	c2f8f359 	.word	0xc2f8f359
 8019604:	01a56e1f 	.word	0x01a56e1f
 8019608:	8800759c 	.word	0x8800759c
 801960c:	7e37e43c 	.word	0x7e37e43c
 8019610:	43500000 	.word	0x43500000
 8019614:	ffff3cb0 	.word	0xffff3cb0
 8019618:	3c900000 	.word	0x3c900000

0801961c <fabsf>:
 801961c:	ee10 3a10 	vmov	r3, s0
 8019620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019624:	ee00 3a10 	vmov	s0, r3
 8019628:	4770      	bx	lr

0801962a <finitef>:
 801962a:	ee10 3a10 	vmov	r3, s0
 801962e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8019632:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019636:	bfac      	ite	ge
 8019638:	2000      	movge	r0, #0
 801963a:	2001      	movlt	r0, #1
 801963c:	4770      	bx	lr
	...

08019640 <nanf>:
 8019640:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019648 <nanf+0x8>
 8019644:	4770      	bx	lr
 8019646:	bf00      	nop
 8019648:	7fc00000 	.word	0x7fc00000

0801964c <rintf>:
 801964c:	b513      	push	{r0, r1, r4, lr}
 801964e:	ee10 1a10 	vmov	r1, s0
 8019652:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8019656:	0ddc      	lsrs	r4, r3, #23
 8019658:	3c7f      	subs	r4, #127	; 0x7f
 801965a:	2c16      	cmp	r4, #22
 801965c:	dc46      	bgt.n	80196ec <rintf+0xa0>
 801965e:	b32b      	cbz	r3, 80196ac <rintf+0x60>
 8019660:	2c00      	cmp	r4, #0
 8019662:	ee10 2a10 	vmov	r2, s0
 8019666:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801966a:	da21      	bge.n	80196b0 <rintf+0x64>
 801966c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8019670:	425b      	negs	r3, r3
 8019672:	4a21      	ldr	r2, [pc, #132]	; (80196f8 <rintf+0xac>)
 8019674:	0a5b      	lsrs	r3, r3, #9
 8019676:	0d09      	lsrs	r1, r1, #20
 8019678:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801967c:	0509      	lsls	r1, r1, #20
 801967e:	430b      	orrs	r3, r1
 8019680:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8019684:	ee07 3a90 	vmov	s15, r3
 8019688:	edd2 6a00 	vldr	s13, [r2]
 801968c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8019690:	ed8d 7a01 	vstr	s14, [sp, #4]
 8019694:	eddd 7a01 	vldr	s15, [sp, #4]
 8019698:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801969c:	ee17 3a90 	vmov	r3, s15
 80196a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80196a4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 80196a8:	ee00 3a10 	vmov	s0, r3
 80196ac:	b002      	add	sp, #8
 80196ae:	bd10      	pop	{r4, pc}
 80196b0:	4b12      	ldr	r3, [pc, #72]	; (80196fc <rintf+0xb0>)
 80196b2:	4123      	asrs	r3, r4
 80196b4:	4219      	tst	r1, r3
 80196b6:	d0f9      	beq.n	80196ac <rintf+0x60>
 80196b8:	085b      	lsrs	r3, r3, #1
 80196ba:	4219      	tst	r1, r3
 80196bc:	d006      	beq.n	80196cc <rintf+0x80>
 80196be:	ea21 0203 	bic.w	r2, r1, r3
 80196c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80196c6:	fa43 f404 	asr.w	r4, r3, r4
 80196ca:	4322      	orrs	r2, r4
 80196cc:	4b0a      	ldr	r3, [pc, #40]	; (80196f8 <rintf+0xac>)
 80196ce:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80196d2:	ed90 7a00 	vldr	s14, [r0]
 80196d6:	ee07 2a90 	vmov	s15, r2
 80196da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80196de:	edcd 7a01 	vstr	s15, [sp, #4]
 80196e2:	ed9d 0a01 	vldr	s0, [sp, #4]
 80196e6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80196ea:	e7df      	b.n	80196ac <rintf+0x60>
 80196ec:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80196f0:	d3dc      	bcc.n	80196ac <rintf+0x60>
 80196f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80196f6:	e7d9      	b.n	80196ac <rintf+0x60>
 80196f8:	0801a518 	.word	0x0801a518
 80196fc:	007fffff 	.word	0x007fffff

08019700 <scalbnf>:
 8019700:	b508      	push	{r3, lr}
 8019702:	ee10 2a10 	vmov	r2, s0
 8019706:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801970a:	ed2d 8b02 	vpush	{d8}
 801970e:	eef0 0a40 	vmov.f32	s1, s0
 8019712:	d004      	beq.n	801971e <scalbnf+0x1e>
 8019714:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019718:	d306      	bcc.n	8019728 <scalbnf+0x28>
 801971a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801971e:	ecbd 8b02 	vpop	{d8}
 8019722:	eeb0 0a60 	vmov.f32	s0, s1
 8019726:	bd08      	pop	{r3, pc}
 8019728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801972c:	d21c      	bcs.n	8019768 <scalbnf+0x68>
 801972e:	4b1f      	ldr	r3, [pc, #124]	; (80197ac <scalbnf+0xac>)
 8019730:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80197b0 <scalbnf+0xb0>
 8019734:	4298      	cmp	r0, r3
 8019736:	ee60 0a27 	vmul.f32	s1, s0, s15
 801973a:	db10      	blt.n	801975e <scalbnf+0x5e>
 801973c:	ee10 2a90 	vmov	r2, s1
 8019740:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8019744:	3b19      	subs	r3, #25
 8019746:	4403      	add	r3, r0
 8019748:	2bfe      	cmp	r3, #254	; 0xfe
 801974a:	dd0f      	ble.n	801976c <scalbnf+0x6c>
 801974c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80197b4 <scalbnf+0xb4>
 8019750:	eeb0 0a48 	vmov.f32	s0, s16
 8019754:	f000 f834 	bl	80197c0 <copysignf>
 8019758:	ee60 0a08 	vmul.f32	s1, s0, s16
 801975c:	e7df      	b.n	801971e <scalbnf+0x1e>
 801975e:	eddf 7a16 	vldr	s15, [pc, #88]	; 80197b8 <scalbnf+0xb8>
 8019762:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8019766:	e7da      	b.n	801971e <scalbnf+0x1e>
 8019768:	0ddb      	lsrs	r3, r3, #23
 801976a:	e7ec      	b.n	8019746 <scalbnf+0x46>
 801976c:	2b00      	cmp	r3, #0
 801976e:	dd06      	ble.n	801977e <scalbnf+0x7e>
 8019770:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019774:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8019778:	ee00 3a90 	vmov	s1, r3
 801977c:	e7cf      	b.n	801971e <scalbnf+0x1e>
 801977e:	f113 0f16 	cmn.w	r3, #22
 8019782:	da06      	bge.n	8019792 <scalbnf+0x92>
 8019784:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019788:	4298      	cmp	r0, r3
 801978a:	dcdf      	bgt.n	801974c <scalbnf+0x4c>
 801978c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80197b8 <scalbnf+0xb8>
 8019790:	e7de      	b.n	8019750 <scalbnf+0x50>
 8019792:	3319      	adds	r3, #25
 8019794:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8019798:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801979c:	eddf 7a07 	vldr	s15, [pc, #28]	; 80197bc <scalbnf+0xbc>
 80197a0:	ee07 3a10 	vmov	s14, r3
 80197a4:	ee67 0a27 	vmul.f32	s1, s14, s15
 80197a8:	e7b9      	b.n	801971e <scalbnf+0x1e>
 80197aa:	bf00      	nop
 80197ac:	ffff3cb0 	.word	0xffff3cb0
 80197b0:	4c000000 	.word	0x4c000000
 80197b4:	7149f2ca 	.word	0x7149f2ca
 80197b8:	0da24260 	.word	0x0da24260
 80197bc:	33000000 	.word	0x33000000

080197c0 <copysignf>:
 80197c0:	ee10 3a10 	vmov	r3, s0
 80197c4:	ee10 2a90 	vmov	r2, s1
 80197c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80197cc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80197d0:	4313      	orrs	r3, r2
 80197d2:	ee00 3a10 	vmov	s0, r3
 80197d6:	4770      	bx	lr

080197d8 <_init>:
 80197d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197da:	bf00      	nop
 80197dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197de:	bc08      	pop	{r3}
 80197e0:	469e      	mov	lr, r3
 80197e2:	4770      	bx	lr

080197e4 <_fini>:
 80197e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80197e6:	bf00      	nop
 80197e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80197ea:	bc08      	pop	{r3}
 80197ec:	469e      	mov	lr, r3
 80197ee:	4770      	bx	lr
